<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="catch_8hpp" kind="file" language="C++">
    <compoundname>catch.hpp</compoundname>
    <includes local="no">iosfwd</includes>
    <includes local="no">string</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">vector</includes>
    <includes local="no">cstddef</includes>
    <includes local="no">cassert</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">ostream</includes>
    <includes local="no">chrono</includes>
    <includes local="no">memory</includes>
    <includes local="no">exception</includes>
    <includes local="no">functional</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">utility</includes>
    <includes local="no">random</includes>
    <includedby refid="includes_8h" local="yes">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/includes.h</includedby>
    <includedby refid="spdlog_2tests_2main_8cpp" local="yes">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/main.cpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp</label>
        <link refid="catch_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>algorithm</label>
      </node>
      <node id="7">
        <label>cassert</label>
      </node>
      <node id="10">
        <label>chrono</label>
      </node>
      <node id="6">
        <label>cstddef</label>
      </node>
      <node id="4">
        <label>cstdint</label>
      </node>
      <node id="12">
        <label>exception</label>
      </node>
      <node id="13">
        <label>functional</label>
      </node>
      <node id="2">
        <label>iosfwd</label>
      </node>
      <node id="11">
        <label>memory</label>
      </node>
      <node id="9">
        <label>ostream</label>
      </node>
      <node id="16">
        <label>random</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="8">
        <label>type_traits</label>
      </node>
      <node id="15">
        <label>utility</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp</label>
        <link refid="catch_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/includes.h</label>
        <link refid="includes_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/main.cpp</label>
        <link refid="spdlog_2tests_2main_8cpp_source"/>
      </node>
      <node id="3">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_async.cpp</label>
        <link refid="test__async_8cpp_source"/>
      </node>
      <node id="4">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_backtrace.cpp</label>
        <link refid="test__backtrace_8cpp_source"/>
      </node>
      <node id="5">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_cfg.cpp</label>
        <link refid="test__cfg_8cpp_source"/>
      </node>
      <node id="6">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_create_dir.cpp</label>
        <link refid="test__create__dir_8cpp_source"/>
      </node>
      <node id="7">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_daily_logger.cpp</label>
        <link refid="test__daily__logger_8cpp_source"/>
      </node>
      <node id="8">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_dup_filter.cpp</label>
        <link refid="test__dup__filter_8cpp_source"/>
      </node>
      <node id="9">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_errors.cpp</label>
        <link refid="test__errors_8cpp_source"/>
      </node>
      <node id="10">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_file_helper.cpp</label>
        <link refid="test__file__helper_8cpp_source"/>
      </node>
      <node id="11">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_file_logging.cpp</label>
        <link refid="test__file__logging_8cpp_source"/>
      </node>
      <node id="12">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_fmt_helper.cpp</label>
        <link refid="test__fmt__helper_8cpp_source"/>
      </node>
      <node id="13">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_macros.cpp</label>
        <link refid="test__macros_8cpp_source"/>
      </node>
      <node id="14">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_misc.cpp</label>
        <link refid="test__misc_8cpp_source"/>
      </node>
      <node id="15">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_mpmc_q.cpp</label>
        <link refid="test__mpmc__q_8cpp_source"/>
      </node>
      <node id="16">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp</label>
        <link refid="test__pattern__formatter_8cpp_source"/>
      </node>
      <node id="17">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_registry.cpp</label>
        <link refid="test__registry_8cpp_source"/>
      </node>
      <node id="18">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_stdout_api.cpp</label>
        <link refid="test__stdout__api_8cpp_source"/>
      </node>
      <node id="19">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_stopwatch.cpp</label>
        <link refid="test__stopwatch_8cpp_source"/>
      </node>
      <node id="20">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_systemd.cpp</label>
        <link refid="test__systemd_8cpp_source"/>
      </node>
      <node id="21">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_time_point.cpp</label>
        <link refid="test__time__point_8cpp_source"/>
      </node>
      <node id="22">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/utils.cpp</label>
        <link refid="utils_8cpp_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_catch__global__namespace__dummy" prot="public">Catch_global_namespace_dummy</innerclass>
    <innerclass refid="struct_catch_1_1_case_sensitive" prot="public">Catch::CaseSensitive</innerclass>
    <innerclass refid="class_catch_1_1_non_copyable" prot="public">Catch::NonCopyable</innerclass>
    <innerclass refid="struct_catch_1_1_source_line_info" prot="public">Catch::SourceLineInfo</innerclass>
    <innerclass refid="struct_catch_1_1_stream_end_stop" prot="public">Catch::StreamEndStop</innerclass>
    <innerclass refid="struct_catch_1_1_registrar_for_tag_aliases" prot="public">Catch::RegistrarForTagAliases</innerclass>
    <innerclass refid="struct_catch_1_1_i_test_invoker" prot="public">Catch::ITestInvoker</innerclass>
    <innerclass refid="struct_catch_1_1_i_test_case_registry" prot="public">Catch::ITestCaseRegistry</innerclass>
    <innerclass refid="class_catch_1_1_string_ref" prot="public">Catch::StringRef</innerclass>
    <innerclass refid="struct_catch_1_1always__false" prot="public">Catch::always_false</innerclass>
    <innerclass refid="struct_catch_1_1true__given" prot="public">Catch::true_given</innerclass>
    <innerclass refid="struct_catch_1_1is__callable__tester" prot="public">Catch::is_callable_tester</innerclass>
    <innerclass refid="struct_catch_1_1is__callable_3_01_fun_07_args_8_8_8_08_4" prot="public">Catch::is_callable&lt; Fun(Args...)&gt;</innerclass>
    <innerclass refid="class_catch_1_1_test_invoker_as_method" prot="public">Catch::TestInvokerAsMethod</innerclass>
    <innerclass refid="struct_catch_1_1_name_and_tags" prot="public">Catch::NameAndTags</innerclass>
    <innerclass refid="struct_catch_1_1_auto_reg" prot="public">Catch::AutoReg</innerclass>
    <innerclass refid="struct_catch_1_1_result_was" prot="public">Catch::ResultWas</innerclass>
    <innerclass refid="struct_catch_1_1_result_disposition" prot="public">Catch::ResultDisposition</innerclass>
    <innerclass refid="struct_catch_1_1_assertion_info" prot="public">Catch::AssertionInfo</innerclass>
    <innerclass refid="struct_catch_1_1_i_stream" prot="public">Catch::IStream</innerclass>
    <innerclass refid="class_catch_1_1_reusable_string_stream" prot="public">Catch::ReusableStringStream</innerclass>
    <innerclass refid="struct_catch_1_1_detail_1_1_enum_info" prot="public">Catch::Detail::EnumInfo</innerclass>
    <innerclass refid="struct_catch_1_1_i_mutable_enum_values_registry" prot="public">Catch::IMutableEnumValuesRegistry</innerclass>
    <innerclass refid="class_catch_1_1_detail_1_1_is_stream_insertable" prot="public">Catch::Detail::IsStreamInsertable</innerclass>
    <innerclass refid="struct_catch_1_1_string_maker" prot="public">Catch::StringMaker</innerclass>
    <innerclass refid="struct_catch_1_1_string_maker_3_01std_1_1string_01_4" prot="public">Catch::StringMaker&lt; std::string &gt;</innerclass>
    <innerclass refid="struct_catch_1_1_string_maker_3_01char_01const_01_5_01_4" prot="public">Catch::StringMaker&lt; char const * &gt;</innerclass>
    <innerclass refid="struct_catch_1_1_string_maker_3_01char_01_5_01_4" prot="public">Catch::StringMaker&lt; char * &gt;</innerclass>
    <innerclass refid="struct_catch_1_1_string_maker_3_01std_1_1wstring_01_4" prot="public">Catch::StringMaker&lt; std::wstring &gt;</innerclass>
    <innerclass refid="struct_catch_1_1_string_maker_3_01wchar__t_01const_01_5_01_4" prot="public">Catch::StringMaker&lt; wchar_t const * &gt;</innerclass>
    <innerclass refid="struct_catch_1_1_string_maker_3_01wchar__t_01_5_01_4" prot="public">Catch::StringMaker&lt; wchar_t * &gt;</innerclass>
    <innerclass refid="struct_catch_1_1_string_maker_3_01char_0f_s_z_0e_4" prot="public">Catch::StringMaker&lt; char[SZ]&gt;</innerclass>
    <innerclass refid="struct_catch_1_1_string_maker_3_01signed_01char_0f_s_z_0e_4" prot="public">Catch::StringMaker&lt; signed char[SZ]&gt;</innerclass>
    <innerclass refid="struct_catch_1_1_string_maker_3_01unsigned_01char_0f_s_z_0e_4" prot="public">Catch::StringMaker&lt; unsigned char[SZ]&gt;</innerclass>
    <innerclass refid="struct_catch_1_1_string_maker_3_01int_01_4" prot="public">Catch::StringMaker&lt; int &gt;</innerclass>
    <innerclass refid="struct_catch_1_1_string_maker_3_01long_01_4" prot="public">Catch::StringMaker&lt; long &gt;</innerclass>
    <innerclass refid="struct_catch_1_1_string_maker_3_01long_01long_01_4" prot="public">Catch::StringMaker&lt; long long &gt;</innerclass>
    <innerclass refid="struct_catch_1_1_string_maker_3_01unsigned_01int_01_4" prot="public">Catch::StringMaker&lt; unsigned int &gt;</innerclass>
    <innerclass refid="struct_catch_1_1_string_maker_3_01unsigned_01long_01_4" prot="public">Catch::StringMaker&lt; unsigned long &gt;</innerclass>
    <innerclass refid="struct_catch_1_1_string_maker_3_01unsigned_01long_01long_01_4" prot="public">Catch::StringMaker&lt; unsigned long long &gt;</innerclass>
    <innerclass refid="struct_catch_1_1_string_maker_3_01bool_01_4" prot="public">Catch::StringMaker&lt; bool &gt;</innerclass>
    <innerclass refid="struct_catch_1_1_string_maker_3_01char_01_4" prot="public">Catch::StringMaker&lt; char &gt;</innerclass>
    <innerclass refid="struct_catch_1_1_string_maker_3_01signed_01char_01_4" prot="public">Catch::StringMaker&lt; signed char &gt;</innerclass>
    <innerclass refid="struct_catch_1_1_string_maker_3_01unsigned_01char_01_4" prot="public">Catch::StringMaker&lt; unsigned char &gt;</innerclass>
    <innerclass refid="struct_catch_1_1_string_maker_3_01std_1_1nullptr__t_01_4" prot="public">Catch::StringMaker&lt; std::nullptr_t &gt;</innerclass>
    <innerclass refid="struct_catch_1_1_string_maker_3_01float_01_4" prot="public">Catch::StringMaker&lt; float &gt;</innerclass>
    <innerclass refid="struct_catch_1_1_string_maker_3_01double_01_4" prot="public">Catch::StringMaker&lt; double &gt;</innerclass>
    <innerclass refid="struct_catch_1_1_string_maker_3_01_t_01_5_01_4" prot="public">Catch::StringMaker&lt; T * &gt;</innerclass>
    <innerclass refid="struct_catch_1_1_string_maker_3_01_r_01_c_1_1_5_01_4" prot="public">Catch::StringMaker&lt; R C::* &gt;</innerclass>
    <innerclass refid="struct_catch_1_1detail_1_1void__type" prot="public">Catch::detail::void_type</innerclass>
    <innerclass refid="struct_catch_1_1detail_1_1is__range__impl" prot="public">Catch::detail::is_range_impl</innerclass>
    <innerclass refid="struct_catch_1_1detail_1_1is__range__impl_3_01_t_00_01typename_01void__type_3_01decltype_07begin8604ecb9de16ea7789f2f694ac896ffd" prot="public">Catch::detail::is_range_impl&lt; T, typename void_type&lt; decltype(begin(std::declval&lt; T &gt;()))&gt;::type &gt;</innerclass>
    <innerclass refid="struct_catch_1_1is__range" prot="public">Catch::is_range</innerclass>
    <innerclass refid="struct_catch_1_1_string_maker_3_01_r_00_01typename_01std_1_1enable__if_3_01is__range_3_01_r_01_4536d8fedfff6d62432b3dc59b56e1380" prot="public">Catch::StringMaker&lt; R, typename std::enable_if&lt; is_range&lt; R &gt;::value &amp;&amp;!::Catch::Detail::IsStreamInsertable&lt; R &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="struct_catch_1_1_string_maker_3_01_t_0f_s_z_0e_4" prot="public">Catch::StringMaker&lt; T[SZ]&gt;</innerclass>
    <innerclass refid="struct_catch_1_1_i_transient_expression" prot="public">Catch::ITransientExpression</innerclass>
    <innerclass refid="class_catch_1_1_binary_expr" prot="public">Catch::BinaryExpr</innerclass>
    <innerclass refid="class_catch_1_1_unary_expr" prot="public">Catch::UnaryExpr</innerclass>
    <innerclass refid="class_catch_1_1_expr_lhs" prot="public">Catch::ExprLhs</innerclass>
    <innerclass refid="struct_catch_1_1_decomposer" prot="public">Catch::Decomposer</innerclass>
    <innerclass refid="struct_catch_1_1_i_result_capture" prot="public">Catch::IResultCapture</innerclass>
    <innerclass refid="struct_catch_1_1_test_failure_exception" prot="public">Catch::TestFailureException</innerclass>
    <innerclass refid="class_catch_1_1_lazy_expression" prot="public">Catch::LazyExpression</innerclass>
    <innerclass refid="struct_catch_1_1_assertion_reaction" prot="public">Catch::AssertionReaction</innerclass>
    <innerclass refid="class_catch_1_1_assertion_handler" prot="public">Catch::AssertionHandler</innerclass>
    <innerclass refid="struct_catch_1_1_message_info" prot="public">Catch::MessageInfo</innerclass>
    <innerclass refid="struct_catch_1_1_message_stream" prot="public">Catch::MessageStream</innerclass>
    <innerclass refid="struct_catch_1_1_message_builder" prot="public">Catch::MessageBuilder</innerclass>
    <innerclass refid="class_catch_1_1_scoped_message" prot="public">Catch::ScopedMessage</innerclass>
    <innerclass refid="class_catch_1_1_capturer" prot="public">Catch::Capturer</innerclass>
    <innerclass refid="struct_catch_1_1_counts" prot="public">Catch::Counts</innerclass>
    <innerclass refid="struct_catch_1_1_totals" prot="public">Catch::Totals</innerclass>
    <innerclass refid="struct_catch_1_1_section_info" prot="public">Catch::SectionInfo</innerclass>
    <innerclass refid="struct_catch_1_1_section_end_info" prot="public">Catch::SectionEndInfo</innerclass>
    <innerclass refid="class_catch_1_1_timer" prot="public">Catch::Timer</innerclass>
    <innerclass refid="class_catch_1_1_section" prot="public">Catch::Section</innerclass>
    <innerclass refid="struct_catch_1_1_i_registry_hub" prot="public">Catch::IRegistryHub</innerclass>
    <innerclass refid="struct_catch_1_1_i_mutable_registry_hub" prot="public">Catch::IMutableRegistryHub</innerclass>
    <innerclass refid="struct_catch_1_1_i_exception_translator" prot="public">Catch::IExceptionTranslator</innerclass>
    <innerclass refid="struct_catch_1_1_i_exception_translator_registry" prot="public">Catch::IExceptionTranslatorRegistry</innerclass>
    <innerclass refid="class_catch_1_1_exception_translator_registrar" prot="public">Catch::ExceptionTranslatorRegistrar</innerclass>
    <innerclass refid="class_catch_1_1_exception_translator_registrar_1_1_exception_translator" prot="private">Catch::ExceptionTranslatorRegistrar::ExceptionTranslator</innerclass>
    <innerclass refid="class_catch_1_1_detail_1_1_approx" prot="public">Catch::Detail::Approx</innerclass>
    <innerclass refid="struct_catch_1_1_string_maker_3_01_catch_1_1_detail_1_1_approx_01_4" prot="public">Catch::StringMaker&lt; Catch::Detail::Approx &gt;</innerclass>
    <innerclass refid="struct_catch_1_1pluralise" prot="public">Catch::pluralise</innerclass>
    <innerclass refid="class_catch_1_1_matchers_1_1_impl_1_1_matcher_untyped_base" prot="public">Catch::Matchers::Impl::MatcherUntypedBase</innerclass>
    <innerclass refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_method" prot="public">Catch::Matchers::Impl::MatcherMethod</innerclass>
    <innerclass refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base" prot="public">Catch::Matchers::Impl::MatcherBase</innerclass>
    <innerclass refid="struct_catch_1_1_matchers_1_1_impl_1_1_match_all_of" prot="public">Catch::Matchers::Impl::MatchAllOf</innerclass>
    <innerclass refid="struct_catch_1_1_matchers_1_1_impl_1_1_match_any_of" prot="public">Catch::Matchers::Impl::MatchAnyOf</innerclass>
    <innerclass refid="struct_catch_1_1_matchers_1_1_impl_1_1_match_not_of" prot="public">Catch::Matchers::Impl::MatchNotOf</innerclass>
    <innerclass refid="class_catch_1_1_matchers_1_1_exception_1_1_exception_message_matcher" prot="public">Catch::Matchers::Exception::ExceptionMessageMatcher</innerclass>
    <innerclass refid="struct_catch_1_1_matchers_1_1_floating_1_1_within_abs_matcher" prot="public">Catch::Matchers::Floating::WithinAbsMatcher</innerclass>
    <innerclass refid="struct_catch_1_1_matchers_1_1_floating_1_1_within_ulps_matcher" prot="public">Catch::Matchers::Floating::WithinUlpsMatcher</innerclass>
    <innerclass refid="struct_catch_1_1_matchers_1_1_floating_1_1_within_rel_matcher" prot="public">Catch::Matchers::Floating::WithinRelMatcher</innerclass>
    <innerclass refid="class_catch_1_1_matchers_1_1_generic_1_1_predicate_matcher" prot="public">Catch::Matchers::Generic::PredicateMatcher</innerclass>
    <innerclass refid="struct_catch_1_1_matchers_1_1_std_string_1_1_cased_string" prot="public">Catch::Matchers::StdString::CasedString</innerclass>
    <innerclass refid="struct_catch_1_1_matchers_1_1_std_string_1_1_string_matcher_base" prot="public">Catch::Matchers::StdString::StringMatcherBase</innerclass>
    <innerclass refid="struct_catch_1_1_matchers_1_1_std_string_1_1_equals_matcher" prot="public">Catch::Matchers::StdString::EqualsMatcher</innerclass>
    <innerclass refid="struct_catch_1_1_matchers_1_1_std_string_1_1_contains_matcher" prot="public">Catch::Matchers::StdString::ContainsMatcher</innerclass>
    <innerclass refid="struct_catch_1_1_matchers_1_1_std_string_1_1_starts_with_matcher" prot="public">Catch::Matchers::StdString::StartsWithMatcher</innerclass>
    <innerclass refid="struct_catch_1_1_matchers_1_1_std_string_1_1_ends_with_matcher" prot="public">Catch::Matchers::StdString::EndsWithMatcher</innerclass>
    <innerclass refid="struct_catch_1_1_matchers_1_1_std_string_1_1_regex_matcher" prot="public">Catch::Matchers::StdString::RegexMatcher</innerclass>
    <innerclass refid="struct_catch_1_1_matchers_1_1_vector_1_1_contains_element_matcher" prot="public">Catch::Matchers::Vector::ContainsElementMatcher</innerclass>
    <innerclass refid="struct_catch_1_1_matchers_1_1_vector_1_1_contains_matcher" prot="public">Catch::Matchers::Vector::ContainsMatcher</innerclass>
    <innerclass refid="struct_catch_1_1_matchers_1_1_vector_1_1_equals_matcher" prot="public">Catch::Matchers::Vector::EqualsMatcher</innerclass>
    <innerclass refid="struct_catch_1_1_matchers_1_1_vector_1_1_approx_matcher" prot="public">Catch::Matchers::Vector::ApproxMatcher</innerclass>
    <innerclass refid="struct_catch_1_1_matchers_1_1_vector_1_1_unordered_equals_matcher" prot="public">Catch::Matchers::Vector::UnorderedEqualsMatcher</innerclass>
    <innerclass refid="class_catch_1_1_match_expr" prot="public">Catch::MatchExpr</innerclass>
    <innerclass refid="class_catch_1_1_generators_1_1_generator_untyped_base" prot="public">Catch::Generators::GeneratorUntypedBase</innerclass>
    <innerclass refid="struct_catch_1_1_i_generator_tracker" prot="public">Catch::IGeneratorTracker</innerclass>
    <innerclass refid="class_catch_1_1_generator_exception" prot="public">Catch::GeneratorException</innerclass>
    <innerclass refid="struct_catch_1_1_generators_1_1_i_generator" prot="public">Catch::Generators::IGenerator</innerclass>
    <innerclass refid="class_catch_1_1_generators_1_1_single_value_generator" prot="public">Catch::Generators::SingleValueGenerator</innerclass>
    <innerclass refid="class_catch_1_1_generators_1_1_fixed_values_generator" prot="public">Catch::Generators::FixedValuesGenerator</innerclass>
    <innerclass refid="class_catch_1_1_generators_1_1_generator_wrapper" prot="public">Catch::Generators::GeneratorWrapper</innerclass>
    <innerclass refid="class_catch_1_1_generators_1_1_generators" prot="public">Catch::Generators::Generators</innerclass>
    <innerclass refid="struct_catch_1_1_generators_1_1as" prot="public">Catch::Generators::as</innerclass>
    <innerclass refid="class_catch_1_1_generators_1_1_take_generator" prot="public">Catch::Generators::TakeGenerator</innerclass>
    <innerclass refid="class_catch_1_1_generators_1_1_filter_generator" prot="public">Catch::Generators::FilterGenerator</innerclass>
    <innerclass refid="class_catch_1_1_generators_1_1_repeat_generator" prot="public">Catch::Generators::RepeatGenerator</innerclass>
    <innerclass refid="class_catch_1_1_generators_1_1_map_generator" prot="public">Catch::Generators::MapGenerator</innerclass>
    <innerclass refid="class_catch_1_1_generators_1_1_chunk_generator" prot="public">Catch::Generators::ChunkGenerator</innerclass>
    <innerclass refid="struct_catch_1_1_i_context" prot="public">Catch::IContext</innerclass>
    <innerclass refid="struct_catch_1_1_i_mutable_context" prot="public">Catch::IMutableContext</innerclass>
    <innerclass refid="class_catch_1_1_option" prot="public">Catch::Option</innerclass>
    <innerclass refid="struct_catch_1_1_warn_about" prot="public">Catch::WarnAbout</innerclass>
    <innerclass refid="struct_catch_1_1_show_durations" prot="public">Catch::ShowDurations</innerclass>
    <innerclass refid="struct_catch_1_1_run_tests" prot="public">Catch::RunTests</innerclass>
    <innerclass refid="struct_catch_1_1_use_colour" prot="public">Catch::UseColour</innerclass>
    <innerclass refid="struct_catch_1_1_wait_for_keypress" prot="public">Catch::WaitForKeypress</innerclass>
    <innerclass refid="struct_catch_1_1_i_config" prot="public">Catch::IConfig</innerclass>
    <innerclass refid="class_catch_1_1_simple_pcg32" prot="public">Catch::SimplePcg32</innerclass>
    <innerclass refid="class_catch_1_1_generators_1_1_random_floating_generator" prot="public">Catch::Generators::RandomFloatingGenerator</innerclass>
    <innerclass refid="class_catch_1_1_generators_1_1_random_integer_generator" prot="public">Catch::Generators::RandomIntegerGenerator</innerclass>
    <innerclass refid="class_catch_1_1_generators_1_1_range_generator" prot="public">Catch::Generators::RangeGenerator</innerclass>
    <innerclass refid="class_catch_1_1_generators_1_1_iterator_generator" prot="public">Catch::Generators::IteratorGenerator</innerclass>
    <innerclass refid="struct_catch_1_1_test_case_info" prot="public">Catch::TestCaseInfo</innerclass>
    <innerclass refid="class_catch_1_1_test_case" prot="public">Catch::TestCase</innerclass>
    <innerclass refid="struct_catch_1_1_i_runner" prot="public">Catch::IRunner</innerclass>
    <innernamespace refid="namespace_catch">Catch</innernamespace>
    <innernamespace refid="namespacempl__">mpl_</innernamespace>
    <innernamespace refid="namespace_catch_1_1_detail">Catch::Detail</innernamespace>
    <innernamespace refid="namespace_catch_1_1detail">Catch::detail</innernamespace>
    <innernamespace refid="namespace_catch_1_1literals">Catch::literals</innernamespace>
    <innernamespace refid="namespace_catch_1_1_matchers">Catch::Matchers</innernamespace>
    <innernamespace refid="namespace_catch_1_1_matchers_1_1_impl">Catch::Matchers::Impl</innernamespace>
    <innernamespace refid="namespace_catch_1_1_matchers_1_1_exception">Catch::Matchers::Exception</innernamespace>
    <innernamespace refid="namespace_catch_1_1_matchers_1_1_floating">Catch::Matchers::Floating</innernamespace>
    <innernamespace refid="namespace_catch_1_1_matchers_1_1_generic">Catch::Matchers::Generic</innernamespace>
    <innernamespace refid="namespace_catch_1_1_matchers_1_1_generic_1_1_detail">Catch::Matchers::Generic::Detail</innernamespace>
    <innernamespace refid="namespace_catch_1_1_matchers_1_1_std_string">Catch::Matchers::StdString</innernamespace>
    <innernamespace refid="namespace_catch_1_1_matchers_1_1_vector">Catch::Matchers::Vector</innernamespace>
    <innernamespace refid="namespace_catch_1_1_generators">Catch::Generators</innernamespace>
    <innernamespace refid="namespace_catch_1_1_generators_1_1pf">Catch::Generators::pf</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="catch_8hpp_1aed4b3022e5b389a59ee3e1633c0a70a8" prot="public" static="no">
        <name>CATCH_VERSION_MAJOR</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="16" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a7c36daa8f2e725fe5e1ff2a9c2559d4f" prot="public" static="no">
        <name>CATCH_VERSION_MINOR</name>
        <initializer>13</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ab6adfb1d16a244d790dc1fe385831a52" prot="public" static="no">
        <name>CATCH_VERSION_PATCH</name>
        <initializer>7</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="18" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a3c8d4b828da004fc3ad2511c1900ec19" prot="public" static="no">
        <name>CATCH_INTERNAL_CONFIG_POSIX_SIGNALS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="189" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a18b42ab8d6d1efdf417f97e5474dc450" prot="public" static="no">
        <name>CATCH_INTERNAL_CONFIG_COUNTER</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="296" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="296" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a48ae5ed6ff9168c5ad3d5058527fbfae" prot="public" static="no">
        <name>CATCH_INTERNAL_CONFIG_GLOBAL_NEXTAFTER</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="311" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="311" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1aa70cff16ca513ff81704961bed5e01b0" prot="public" static="no">
        <name>CATCH_CONFIG_COUNTER</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="352" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="352" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ac5eee4f90512985d2043f971c6f08707" prot="public" static="no">
        <name>CATCH_CONFIG_POSIX_SIGNALS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="359" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ac6675f48ca221c1b9124ea02fe88324b" prot="public" static="no">
        <name>CATCH_CONFIG_WCHAR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="363" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="363" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a5e8669f07e3db1e9e1604508689bc28a" prot="public" static="no">
        <name>CATCH_CONFIG_CPP11_TO_STRING</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="367" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="367" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a893712b2ba6e7400136a0a023b12e9db" prot="public" static="no">
        <name>CATCH_CONFIG_DISABLE_EXCEPTIONS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="395" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="395" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a3271a306c531fd4a2c6c6180e4903fd9" prot="public" static="no">
        <name>CATCH_CONFIG_GLOBAL_NEXTAFTER</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="411" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="411" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a1500dca9a578a0bd2f85771cfa3fd35d" prot="public" static="no">
        <name>CATCH_INTERNAL_START_WARNINGS_SUPPRESSION</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="417" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="417" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ad9594e9891b032f0dd0279960dc861a5" prot="public" static="no">
        <name>CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="420" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a89c1608a68775aca1bb7c265f7ba923a" prot="public" static="no">
        <name>CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="423" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="423" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1aa0200c23b35ba2bd8ebed69a8f3c1c66" prot="public" static="no">
        <name>CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="426" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="426" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a828d81ce73c46941460c92ecbd7b8fc2" prot="public" static="no">
        <name>CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="429" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="429" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1af9c2d6807f17109481b536551c0c10bf" prot="public" static="no">
        <name>CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="432" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="432" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1aa7ffc39ff2307d382e766a867d49b67a" prot="public" static="no">
        <name>CATCH_INTERNAL_IGNORE_BUT_WARN</name>
        <param><defname>...</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="438" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="438" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a10a275cf93b99d6f1246d9d9df09d1d8" prot="public" static="no">
        <name>CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="448" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="448" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ab76c2d22e571ab1a828f5c60d2f485a6" prot="public" static="no">
        <name>CATCH_TRY</name>
        <initializer>if ((true))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="452" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="452" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1afa0ae14e70806dca4f8bf06d06645fa9" prot="public" static="no">
        <name>CATCH_CATCH_ALL</name>
        <initializer>if ((false))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="453" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="453" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a3caecf3cbc55848423d744df50d84d5b" prot="public" static="no">
        <name>CATCH_CATCH_ANON</name>
        <param><defname>type</defname></param>
        <initializer>if ((false))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="454" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="454" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a7c21e89d8b7727757ce9ca2b848f1cda" prot="public" static="no">
        <name>INTERNAL_CATCH_UNIQUE_NAME_LINE2</name>
        <param><defname>name</defname></param>
        <param><defname>line</defname></param>
        <initializer>name##line</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="466" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="466" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a1b51a086ea21a750bd306ac0ed4d2a95" prot="public" static="no">
        <name>INTERNAL_CATCH_UNIQUE_NAME_LINE</name>
        <param><defname>name</defname></param>
        <param><defname>line</defname></param>
        <initializer>INTERNAL_CATCH_UNIQUE_NAME_LINE2( name, line )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="467" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="467" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1afe320ceec108fc8c160f9ac3938f1bc8" prot="public" static="no">
        <name>INTERNAL_CATCH_UNIQUE_NAME</name>
        <param><defname>name</defname></param>
        <initializer>INTERNAL_CATCH_UNIQUE_NAME_LINE( name, __COUNTER__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="469" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="469" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1abc0b2405454c51748a31e0393d9ad5d1" prot="public" static="no">
        <name>CATCH_INTERNAL_LINEINFO</name>
        <initializer>    ::<ref refid="struct_catch_1_1_source_line_info" kindref="compound">Catch::SourceLineInfo</ref>( __FILE__, static_cast&lt;std::size_t&gt;( __LINE__ ) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="541" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="541" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1af7f9d4a12274e1ccf4b1021e5d35e0c5" prot="public" static="no">
        <name>CATCH_REGISTER_TAG_ALIAS</name>
        <param><defname>alias</defname></param>
        <param><defname>spec</defname></param>
        <initializer>    CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \
    CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
    namespace{ <ref refid="struct_catch_1_1_registrar_for_tag_aliases" kindref="compound">Catch::RegistrarForTagAliases</ref> INTERNAL_CATCH_UNIQUE_NAME( AutoRegisterTagAlias )( alias, spec, CATCH_INTERNAL_LINEINFO ); } \
    CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="553" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="553" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1aedfa83a9b9671b2f3ce5d64207eab45f" prot="public" static="no">
        <name>CATCH_RECURSION_LEVEL0</name>
        <param><defname>...</defname></param>
        <initializer>__VA_ARGS__</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="691" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="691" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ad1cc1127b3a8ed84d336fd86c25571a9" prot="public" static="no">
        <name>CATCH_RECURSION_LEVEL1</name>
        <param><defname>...</defname></param>
        <initializer>CATCH_RECURSION_LEVEL0(CATCH_RECURSION_LEVEL0(CATCH_RECURSION_LEVEL0(__VA_ARGS__)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="692" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="692" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a2a7ccfd6ceda0c723d1c81ed0a8ea7aa" prot="public" static="no">
        <name>CATCH_RECURSION_LEVEL2</name>
        <param><defname>...</defname></param>
        <initializer>CATCH_RECURSION_LEVEL1(CATCH_RECURSION_LEVEL1(CATCH_RECURSION_LEVEL1(__VA_ARGS__)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="693" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="693" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ac5ead3b79069ca9b5de9cad80029bc71" prot="public" static="no">
        <name>CATCH_RECURSION_LEVEL3</name>
        <param><defname>...</defname></param>
        <initializer>CATCH_RECURSION_LEVEL2(CATCH_RECURSION_LEVEL2(CATCH_RECURSION_LEVEL2(__VA_ARGS__)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="694" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="694" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a7738534acacfd54ef5b9f89cf07fa16d" prot="public" static="no">
        <name>CATCH_RECURSION_LEVEL4</name>
        <param><defname>...</defname></param>
        <initializer>CATCH_RECURSION_LEVEL3(CATCH_RECURSION_LEVEL3(CATCH_RECURSION_LEVEL3(__VA_ARGS__)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="695" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="695" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a761d2ca7a5b0393ae7a6edf086a9c3da" prot="public" static="no">
        <name>CATCH_RECURSION_LEVEL5</name>
        <param><defname>...</defname></param>
        <initializer>CATCH_RECURSION_LEVEL4(CATCH_RECURSION_LEVEL4(CATCH_RECURSION_LEVEL4(__VA_ARGS__)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="696" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="696" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ae3ce5d9c8e50eba755111a19a62432e5" prot="public" static="no">
        <name>CATCH_RECURSE</name>
        <param><defname>...</defname></param>
        <initializer>CATCH_RECURSION_LEVEL5(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="704" column="10" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="704" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1aebb9e7be881ac3dcd10db9fb45830649" prot="public" static="no">
        <name>CATCH_REC_END</name>
        <param><defname>...</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="707" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="707" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ab469d9696504fd14e36fd1d8b6e47b7f" prot="public" static="no">
        <name>CATCH_REC_OUT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="708" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="708" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a8ac224562b8423a7c07e368216d0f0e9" prot="public" static="no">
        <name>CATCH_EMPTY</name>
        <param></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="710" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="710" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a83c1ab15f3d715f25fe504c114cf6144" prot="public" static="no">
        <name>CATCH_DEFER</name>
        <param><defname>id</defname></param>
        <initializer>id CATCH_EMPTY()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="711" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="711" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1aa335d39d6fdb7e20c94edaa4de21d1a3" prot="public" static="no">
        <name>CATCH_REC_GET_END2</name>
        <param></param>
        <initializer>0, CATCH_REC_END</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="713" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="713" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a476d332d716d4691f874195acea4931b" prot="public" static="no">
        <name>CATCH_REC_GET_END1</name>
        <param><defname>...</defname></param>
        <initializer>CATCH_REC_GET_END2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="714" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="714" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a536dd24bc8e72ec8eb14c3676f20c778" prot="public" static="no">
        <name>CATCH_REC_GET_END</name>
        <param><defname>...</defname></param>
        <initializer>CATCH_REC_GET_END1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="715" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="715" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ae25889c34b72704724f5797b6103c463" prot="public" static="no">
        <name>CATCH_REC_NEXT0</name>
        <param><defname>test</defname></param>
        <param><defname>next</defname></param>
        <param><defname>...</defname></param>
        <initializer>next CATCH_REC_OUT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="716" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="716" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a0ddf3b75cc3780765a2cb551d6536721" prot="public" static="no">
        <name>CATCH_REC_NEXT1</name>
        <param><defname>test</defname></param>
        <param><defname>next</defname></param>
        <initializer>CATCH_DEFER ( CATCH_REC_NEXT0 ) ( test, next, 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="717" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="717" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1abaddf93f755cea9e20aee254aa566adf" prot="public" static="no">
        <name>CATCH_REC_NEXT</name>
        <param><defname>test</defname></param>
        <param><defname>next</defname></param>
        <initializer>CATCH_REC_NEXT1(CATCH_REC_GET_END test, next)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="718" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="718" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a3e07fd613c41bd44cb4bd14fccc3c388" prot="public" static="no">
        <name>CATCH_REC_LIST0</name>
        <param><defname>f</defname></param>
        <param><defname>x</defname></param>
        <param><defname>peek</defname></param>
        <param><defname>...</defname></param>
        <initializer>, f(x) CATCH_DEFER ( CATCH_REC_NEXT(peek, CATCH_REC_LIST1) ) ( f, peek, __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="720" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="720" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1abedd1ae08e12478704233e9bf29e0fe9" prot="public" static="no">
        <name>CATCH_REC_LIST1</name>
        <param><defname>f</defname></param>
        <param><defname>x</defname></param>
        <param><defname>peek</defname></param>
        <param><defname>...</defname></param>
        <initializer>, f(x) CATCH_DEFER ( CATCH_REC_NEXT(peek, CATCH_REC_LIST0) ) ( f, peek, __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="721" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="721" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1abe3c205d4ba8406d45439abb91366ce9" prot="public" static="no">
        <name>CATCH_REC_LIST2</name>
        <param><defname>f</defname></param>
        <param><defname>x</defname></param>
        <param><defname>peek</defname></param>
        <param><defname>...</defname></param>
        <initializer>f(x) CATCH_DEFER ( CATCH_REC_NEXT(peek, CATCH_REC_LIST1) ) ( f, peek, __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="722" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="722" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1aea894953d28c5ed83e59ce6c74d0a665" prot="public" static="no">
        <name>CATCH_REC_LIST0_UD</name>
        <param><defname>f</defname></param>
        <param><defname>userdata</defname></param>
        <param><defname>x</defname></param>
        <param><defname>peek</defname></param>
        <param><defname>...</defname></param>
        <initializer>, f(userdata, x) CATCH_DEFER ( CATCH_REC_NEXT(peek, CATCH_REC_LIST1_UD) ) ( f, userdata, peek, __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="724" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="724" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1abbcff29ced4d413bc121f7b761558c16" prot="public" static="no">
        <name>CATCH_REC_LIST1_UD</name>
        <param><defname>f</defname></param>
        <param><defname>userdata</defname></param>
        <param><defname>x</defname></param>
        <param><defname>peek</defname></param>
        <param><defname>...</defname></param>
        <initializer>, f(userdata, x) CATCH_DEFER ( CATCH_REC_NEXT(peek, CATCH_REC_LIST0_UD) ) ( f, userdata, peek, __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="725" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="725" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a0c2dd548d178fbc2202ecd74ce4be91b" prot="public" static="no">
        <name>CATCH_REC_LIST2_UD</name>
        <param><defname>f</defname></param>
        <param><defname>userdata</defname></param>
        <param><defname>x</defname></param>
        <param><defname>peek</defname></param>
        <param><defname>...</defname></param>
        <initializer>f(userdata, x) CATCH_DEFER ( CATCH_REC_NEXT(peek, CATCH_REC_LIST1_UD) ) ( f, userdata, peek, __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="726" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="726" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a8e404d42a6d0402698c1d4d16e831d28" prot="public" static="no">
        <name>CATCH_REC_LIST_UD</name>
        <param><defname>f</defname></param>
        <param><defname>userdata</defname></param>
        <param><defname>...</defname></param>
        <initializer>CATCH_RECURSE(CATCH_REC_LIST2_UD(f, userdata, __VA_ARGS__, ()()(), ()()(), ()()(), 0))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="731" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="731" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a060f5fa141c247b4d07dfe9bf3c54079" prot="public" static="no">
        <name>CATCH_REC_LIST</name>
        <param><defname>f</defname></param>
        <param><defname>...</defname></param>
        <initializer>CATCH_RECURSE(CATCH_REC_LIST2(f, __VA_ARGS__, ()()(), ()()(), ()()(), 0))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="733" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="733" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1afec78f8054a97a6ecb38ff098f275efb" prot="public" static="no">
        <name>INTERNAL_CATCH_EXPAND1</name>
        <param><defname>param</defname></param>
        <initializer>INTERNAL_CATCH_EXPAND2(param)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="735" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="735" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a163ac3d9bea0921d546f125ef5d58a2d" prot="public" static="no">
        <name>INTERNAL_CATCH_EXPAND2</name>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_NO## __VA_ARGS__</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="736" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="736" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a053610cf96d1be50463e9cb08e818ed1" prot="public" static="no">
        <name>INTERNAL_CATCH_DEF</name>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_DEF __VA_ARGS__</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="737" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="737" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a6868a4eb7481605e628a3aaf0c1fbb01" prot="public" static="no">
        <name>INTERNAL_CATCH_NOINTERNAL_CATCH_DEF</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="738" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="738" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a13733e49e752d29b735e94d9e72c7d6b" prot="public" static="no">
        <name>INTERNAL_CATCH_STRINGIZE</name>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_STRINGIZE2(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="739" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="739" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a6fedc6934bac0e22dbbd13aabf81ad3f" prot="public" static="no">
        <name>INTERNAL_CATCH_STRINGIZE2</name>
        <param><defname>...</defname></param>
        <initializer>#__VA_ARGS__</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="741" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="741" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1aa66562537dd49bc33e53f9aa01acedaf" prot="public" static="no">
        <name>INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS</name>
        <param><defname>param</defname></param>
        <initializer>INTERNAL_CATCH_STRINGIZE(INTERNAL_CATCH_REMOVE_PARENS(param))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="742" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="742" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a5d544d56630e5c6e293d49a825127646" prot="public" static="no">
        <name>INTERNAL_CATCH_MAKE_NAMESPACE2</name>
        <param><defname>...</defname></param>
        <initializer>ns_##__VA_ARGS__</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="750" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="750" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a6b5bf9be0310bb60ec9738cbf4ea53f4" prot="public" static="no">
        <name>INTERNAL_CATCH_MAKE_NAMESPACE</name>
        <param><defname>name</defname></param>
        <initializer>INTERNAL_CATCH_MAKE_NAMESPACE2(name)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="751" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="751" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1adf5ede19321b27ce635d01688551e782" prot="public" static="no">
        <name>INTERNAL_CATCH_REMOVE_PARENS</name>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_EXPAND1(INTERNAL_CATCH_DEF __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="753" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="753" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ab0c28a0a25d0d138ca5f4049a1094227" prot="public" static="no">
        <name>INTERNAL_CATCH_MAKE_TYPE_LIST2</name>
        <param><defname>...</defname></param>
        <initializer>decltype(get_wrapper&lt;INTERNAL_CATCH_REMOVE_PARENS_GEN(__VA_ARGS__)&gt;())</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="756" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="756" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a74ceed46879d878afcd12648df097264" prot="public" static="no">
        <name>INTERNAL_CATCH_MAKE_TYPE_LIST</name>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_MAKE_TYPE_LIST2(INTERNAL_CATCH_REMOVE_PARENS(__VA_ARGS__))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="757" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="757" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a3125bdc64f326e6c65f60e3d0b917e0e" prot="public" static="no">
        <name>INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES</name>
        <param><defname>...</defname></param>
        <initializer>    CATCH_REC_LIST(INTERNAL_CATCH_MAKE_TYPE_LIST,__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="763" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="763" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1aaff4fdf9d9447a3e896ff3c940aa63bf" prot="public" static="no">
        <name>INTERNAL_CATCH_REMOVE_PARENS_1_ARG</name>
        <param><defname>_0</defname></param>
        <initializer>INTERNAL_CATCH_REMOVE_PARENS(_0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="766" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="766" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ad922f8cb04e51fa4d1fc7136c2170ec7" prot="public" static="no">
        <name>INTERNAL_CATCH_REMOVE_PARENS_2_ARG</name>
        <param><defname>_0</defname></param>
        <param><defname>_1</defname></param>
        <initializer>INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_1_ARG(_1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="767" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="767" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a3e122b37a4a905554e927a298e96ba4e" prot="public" static="no">
        <name>INTERNAL_CATCH_REMOVE_PARENS_3_ARG</name>
        <param><defname>_0</defname></param>
        <param><defname>_1</defname></param>
        <param><defname>_2</defname></param>
        <initializer>INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_2_ARG(_1, _2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="768" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="768" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ad13badf823db63f70503f46977ff7664" prot="public" static="no">
        <name>INTERNAL_CATCH_REMOVE_PARENS_4_ARG</name>
        <param><defname>_0</defname></param>
        <param><defname>_1</defname></param>
        <param><defname>_2</defname></param>
        <param><defname>_3</defname></param>
        <initializer>INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_3_ARG(_1, _2, _3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="769" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="769" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a886c6ae574320d8aae6415985b19426c" prot="public" static="no">
        <name>INTERNAL_CATCH_REMOVE_PARENS_5_ARG</name>
        <param><defname>_0</defname></param>
        <param><defname>_1</defname></param>
        <param><defname>_2</defname></param>
        <param><defname>_3</defname></param>
        <param><defname>_4</defname></param>
        <initializer>INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_4_ARG(_1, _2, _3, _4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="770" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="770" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a261dd3f6db0cd3199456d5be891bec22" prot="public" static="no">
        <name>INTERNAL_CATCH_REMOVE_PARENS_6_ARG</name>
        <param><defname>_0</defname></param>
        <param><defname>_1</defname></param>
        <param><defname>_2</defname></param>
        <param><defname>_3</defname></param>
        <param><defname>_4</defname></param>
        <param><defname>_5</defname></param>
        <initializer>INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_5_ARG(_1, _2, _3, _4, _5)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="771" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="771" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a4ff89b8d8438fa571ccebd4611679cb0" prot="public" static="no">
        <name>INTERNAL_CATCH_REMOVE_PARENS_7_ARG</name>
        <param><defname>_0</defname></param>
        <param><defname>_1</defname></param>
        <param><defname>_2</defname></param>
        <param><defname>_3</defname></param>
        <param><defname>_4</defname></param>
        <param><defname>_5</defname></param>
        <param><defname>_6</defname></param>
        <initializer>INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_6_ARG(_1, _2, _3, _4, _5, _6)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="772" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="772" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a2bc5383346d063d8aa13169a86101f8a" prot="public" static="no">
        <name>INTERNAL_CATCH_REMOVE_PARENS_8_ARG</name>
        <param><defname>_0</defname></param>
        <param><defname>_1</defname></param>
        <param><defname>_2</defname></param>
        <param><defname>_3</defname></param>
        <param><defname>_4</defname></param>
        <param><defname>_5</defname></param>
        <param><defname>_6</defname></param>
        <param><defname>_7</defname></param>
        <initializer>INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_7_ARG(_1, _2, _3, _4, _5, _6, _7)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="773" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="773" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1aac325e60ff7ae083ea5378a57ad0853e" prot="public" static="no">
        <name>INTERNAL_CATCH_REMOVE_PARENS_9_ARG</name>
        <param><defname>_0</defname></param>
        <param><defname>_1</defname></param>
        <param><defname>_2</defname></param>
        <param><defname>_3</defname></param>
        <param><defname>_4</defname></param>
        <param><defname>_5</defname></param>
        <param><defname>_6</defname></param>
        <param><defname>_7</defname></param>
        <param><defname>_8</defname></param>
        <initializer>INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_8_ARG(_1, _2, _3, _4, _5, _6, _7, _8)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="774" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="774" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ad456e4d0700058feab367df4dfdb034a" prot="public" static="no">
        <name>INTERNAL_CATCH_REMOVE_PARENS_10_ARG</name>
        <param><defname>_0</defname></param>
        <param><defname>_1</defname></param>
        <param><defname>_2</defname></param>
        <param><defname>_3</defname></param>
        <param><defname>_4</defname></param>
        <param><defname>_5</defname></param>
        <param><defname>_6</defname></param>
        <param><defname>_7</defname></param>
        <param><defname>_8</defname></param>
        <param><defname>_9</defname></param>
        <initializer>INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_9_ARG(_1, _2, _3, _4, _5, _6, _7, _8, _9)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="775" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="775" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1adda79d552d6615a64b064426fe5d8347" prot="public" static="no">
        <name>INTERNAL_CATCH_REMOVE_PARENS_11_ARG</name>
        <param><defname>_0</defname></param>
        <param><defname>_1</defname></param>
        <param><defname>_2</defname></param>
        <param><defname>_3</defname></param>
        <param><defname>_4</defname></param>
        <param><defname>_5</defname></param>
        <param><defname>_6</defname></param>
        <param><defname>_7</defname></param>
        <param><defname>_8</defname></param>
        <param><defname>_9</defname></param>
        <param><defname>_10</defname></param>
        <initializer>INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_10_ARG(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="776" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="776" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a053a90e2d222ba1c12095556aa8db44a" prot="public" static="no">
        <name>INTERNAL_CATCH_VA_NARGS_IMPL</name>
        <param><defname>_0</defname></param>
        <param><defname>_1</defname></param>
        <param><defname>_2</defname></param>
        <param><defname>_3</defname></param>
        <param><defname>_4</defname></param>
        <param><defname>_5</defname></param>
        <param><defname>_6</defname></param>
        <param><defname>_7</defname></param>
        <param><defname>_8</defname></param>
        <param><defname>_9</defname></param>
        <param><defname>_10</defname></param>
        <param><defname>N</defname></param>
        <param><defname>...</defname></param>
        <initializer>N</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="778" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="778" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1aea71652955762dc6db3912ec66740b7a" prot="public" static="no">
        <name>INTERNAL_CATCH_TYPE_GEN</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="780" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="780" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ac74ba3aed32e3cfe16e9aaa7e5229fef" prot="public" static="no">
        <name>INTERNAL_CATCH_NTTP_1</name>
        <param><defname>signature</defname></param>
        <param><defname>...</defname></param>
        <initializer>    template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt; struct Nttp{};\
    template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;\
    constexpr auto get_wrapper() noexcept -&gt; Nttp&lt;__VA_ARGS__&gt; { return {}; } \
    template&lt;template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt; class...&gt; struct NttpTemplateTypeList{};\
    template&lt;template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt; class...Cs&gt;\
    constexpr auto get_wrapper() noexcept -&gt; NttpTemplateTypeList&lt;Cs...&gt; { return {}; } \
    \
    template&lt; template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt; class Container, template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt; class List, INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;\
    struct rewrap&lt;NttpTemplateTypeList&lt;Container&gt;, List&lt;__VA_ARGS__&gt;&gt; { using type = TypeList&lt;Container&lt;__VA_ARGS__&gt;&gt;; };\
    template&lt; template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt; class Container, template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt; class List, INTERNAL_CATCH_REMOVE_PARENS(signature), typename...Elements&gt;\
    struct rewrap&lt;NttpTemplateTypeList&lt;Container&gt;, List&lt;__VA_ARGS__&gt;, Elements...&gt; { using type = typename append&lt;TypeList&lt;Container&lt;__VA_ARGS__&gt;&gt;, typename rewrap&lt;NttpTemplateTypeList&lt;Container&gt;, Elements...&gt;::type&gt;::type; };\
    template&lt;template &lt;typename...&gt; class Final, template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt; class...Containers, typename...Types&gt;\
    struct create&lt;Final, NttpTemplateTypeList&lt;Containers...&gt;, TypeList&lt;Types...&gt;&gt; { using type = typename append&lt;Final&lt;&gt;, typename rewrap&lt;NttpTemplateTypeList&lt;Containers&gt;, Types...&gt;::type...&gt;::type; };</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="813" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="813" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a4f7507c7b536901dbb97dea59df86078" prot="public" static="no">
        <name>INTERNAL_CATCH_DECLARE_SIG_TEST0</name>
        <param><defname>TestName</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="828" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="828" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ae9b9c3b580df7d3aa3df12e31d07b228" prot="public" static="no">
        <name>INTERNAL_CATCH_DECLARE_SIG_TEST1</name>
        <param><defname>TestName</defname></param>
        <param><defname>signature</defname></param>
        <initializer>    template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;\
    static void TestName()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="829" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="829" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1aa74256b09ddc9f24b9d5e99e6b8cd7f5" prot="public" static="no">
        <name>INTERNAL_CATCH_DECLARE_SIG_TEST_X</name>
        <param><defname>TestName</defname></param>
        <param><defname>signature</defname></param>
        <param><defname>...</defname></param>
        <initializer>    template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;\
    static void TestName()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="832" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="832" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a0687445db41b1402c3b63677f5fb855f" prot="public" static="no">
        <name>INTERNAL_CATCH_DEFINE_SIG_TEST0</name>
        <param><defname>TestName</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="836" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="836" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a9d259f87ac04160887d8dc58f223298b" prot="public" static="no">
        <name>INTERNAL_CATCH_DEFINE_SIG_TEST1</name>
        <param><defname>TestName</defname></param>
        <param><defname>signature</defname></param>
        <initializer>    template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;\
    static void TestName()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="837" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="837" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a700005dc1f5d4d1c9b4977dfbcc39553" prot="public" static="no">
        <name>INTERNAL_CATCH_DEFINE_SIG_TEST_X</name>
        <param><defname>TestName</defname></param>
        <param><defname>signature</defname></param>
        <param><defname>...</defname></param>
        <initializer>    template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;\
    static void TestName()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="840" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="840" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a46d03d475b2d70c812ae2fbb7c62e2e1" prot="public" static="no">
        <name>INTERNAL_CATCH_NTTP_REGISTER0</name>
        <param><defname>TestFunc</defname></param>
        <param><defname>signature</defname></param>
        <initializer>    template&lt;typename Type&gt;\
    void reg_test(TypeList&lt;Type&gt;, <ref refid="struct_catch_1_1_name_and_tags" kindref="compound">Catch::NameAndTags</ref> nameAndTags)\
    {\
        <ref refid="struct_catch_1_1_auto_reg" kindref="compound">Catch::AutoReg</ref>( Catch::makeTestInvoker(&amp;TestFunc&lt;Type&gt;), CATCH_INTERNAL_LINEINFO, <ref refid="class_catch_1_1_string_ref" kindref="compound">Catch::StringRef</ref>(), nameAndTags);\
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="844" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="844" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a3f4b5b59a0890d8f4b5ccde153f52b91" prot="public" static="no">
        <name>INTERNAL_CATCH_NTTP_REGISTER</name>
        <param><defname>TestFunc</defname></param>
        <param><defname>signature</defname></param>
        <param><defname>...</defname></param>
        <initializer>    template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;\
    void reg_test(Nttp&lt;__VA_ARGS__&gt;, <ref refid="struct_catch_1_1_name_and_tags" kindref="compound">Catch::NameAndTags</ref> nameAndTags)\
    {\
        <ref refid="struct_catch_1_1_auto_reg" kindref="compound">Catch::AutoReg</ref>( Catch::makeTestInvoker(&amp;TestFunc&lt;__VA_ARGS__&gt;), CATCH_INTERNAL_LINEINFO, <ref refid="class_catch_1_1_string_ref" kindref="compound">Catch::StringRef</ref>(), nameAndTags);\
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="851" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="851" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a3ec09fcab86a0d09313b48d4e8275594" prot="public" static="no">
        <name>INTERNAL_CATCH_NTTP_REGISTER_METHOD0</name>
        <param><defname>TestName</defname></param>
        <param><defname>signature</defname></param>
        <param><defname>...</defname></param>
        <initializer>    template&lt;typename Type&gt;\
    void reg_test(TypeList&lt;Type&gt;, <ref refid="class_catch_1_1_string_ref" kindref="compound">Catch::StringRef</ref> className, <ref refid="struct_catch_1_1_name_and_tags" kindref="compound">Catch::NameAndTags</ref> nameAndTags)\
    {\
        <ref refid="struct_catch_1_1_auto_reg" kindref="compound">Catch::AutoReg</ref>( Catch::makeTestInvoker(&amp;TestName&lt;Type&gt;::test), CATCH_INTERNAL_LINEINFO, className, nameAndTags);\
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="858" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="858" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a50f42674ac12901035ad2357a85e160f" prot="public" static="no">
        <name>INTERNAL_CATCH_NTTP_REGISTER_METHOD</name>
        <param><defname>TestName</defname></param>
        <param><defname>signature</defname></param>
        <param><defname>...</defname></param>
        <initializer>    template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;\
    void reg_test(Nttp&lt;__VA_ARGS__&gt;, <ref refid="class_catch_1_1_string_ref" kindref="compound">Catch::StringRef</ref> className, <ref refid="struct_catch_1_1_name_and_tags" kindref="compound">Catch::NameAndTags</ref> nameAndTags)\
    {\
        <ref refid="struct_catch_1_1_auto_reg" kindref="compound">Catch::AutoReg</ref>( Catch::makeTestInvoker(&amp;TestName&lt;__VA_ARGS__&gt;::test), CATCH_INTERNAL_LINEINFO, className, nameAndTags);\
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="865" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="865" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a2101df7508291ca3898e52c34c40599b" prot="public" static="no">
        <name>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD0</name>
        <param><defname>TestName</defname></param>
        <param><defname>ClassName</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="872" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="872" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a4378072081595eeb217cfa656cbcbfad" prot="public" static="no">
        <name>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD1</name>
        <param><defname>TestName</defname></param>
        <param><defname>ClassName</defname></param>
        <param><defname>signature</defname></param>
        <initializer>    template&lt;typename TestType&gt; \
    struct TestName : INTERNAL_CATCH_REMOVE_PARENS(ClassName)&lt;TestType&gt; { \
        void test();\
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="873" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="873" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a3a61470086671485bf5f3d8139a8b379" prot="public" static="no">
        <name>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X</name>
        <param><defname>TestName</defname></param>
        <param><defname>ClassName</defname></param>
        <param><defname>signature</defname></param>
        <param><defname>...</defname></param>
        <initializer>    template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt; \
    struct TestName : INTERNAL_CATCH_REMOVE_PARENS(ClassName)&lt;__VA_ARGS__&gt; { \
        void test();\
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="879" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="879" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1aabc65a509a1d132b7a5fe6c4320c82fc" prot="public" static="no">
        <name>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD0</name>
        <param><defname>TestName</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="885" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="885" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ae0cccd56ac66f873543f3dede228dbe9" prot="public" static="no">
        <name>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD1</name>
        <param><defname>TestName</defname></param>
        <param><defname>signature</defname></param>
        <initializer>    template&lt;typename TestType&gt; \
    void INTERNAL_CATCH_MAKE_NAMESPACE(TestName)::TestName&lt;TestType&gt;::test()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="886" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="886" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a9c7bb282d50599e94b665ad7f9ffed31" prot="public" static="no">
        <name>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X</name>
        <param><defname>TestName</defname></param>
        <param><defname>signature</defname></param>
        <param><defname>...</defname></param>
        <initializer>    template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt; \
    void INTERNAL_CATCH_MAKE_NAMESPACE(TestName)::TestName&lt;__VA_ARGS__&gt;::test()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="889" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="889" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a6e4eddcee92aabb74a7fa182650307c3" prot="public" static="no">
        <name>INTERNAL_CATCH_NTTP_0</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="894" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="894" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a22d82768693e811fd08acca9c0e44726" prot="public" static="no">
        <name>INTERNAL_CATCH_NTTP_GEN</name>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_VA_NARGS_IMPL(__VA_ARGS__, INTERNAL_CATCH_NTTP_1(__VA_ARGS__), INTERNAL_CATCH_NTTP_1(__VA_ARGS__), INTERNAL_CATCH_NTTP_1(__VA_ARGS__), INTERNAL_CATCH_NTTP_1(__VA_ARGS__), INTERNAL_CATCH_NTTP_1(__VA_ARGS__), INTERNAL_CATCH_NTTP_1( __VA_ARGS__), INTERNAL_CATCH_NTTP_1( __VA_ARGS__), INTERNAL_CATCH_NTTP_1( __VA_ARGS__), INTERNAL_CATCH_NTTP_1( __VA_ARGS__),INTERNAL_CATCH_NTTP_1( __VA_ARGS__), INTERNAL_CATCH_NTTP_0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="895" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="895" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a871da5e60f2ec529a6df64220e9c0790" prot="public" static="no">
        <name>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD</name>
        <param><defname>TestName</defname></param>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_VA_NARGS_IMPL( &quot;dummy&quot;, __VA_ARGS__, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD1, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD0)(TestName, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="896" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="896" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a3df212478ac0ede0c8a0fe9b8e186c8f" prot="public" static="no">
        <name>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD</name>
        <param><defname>TestName</defname></param>
        <param><defname>ClassName</defname></param>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_VA_NARGS_IMPL( &quot;dummy&quot;, __VA_ARGS__, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD1, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD0)(TestName, ClassName, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="897" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="897" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a960369279996cfc00d2e1a913afd98e8" prot="public" static="no">
        <name>INTERNAL_CATCH_NTTP_REG_METHOD_GEN</name>
        <param><defname>TestName</defname></param>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_VA_NARGS_IMPL( &quot;dummy&quot;, __VA_ARGS__, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD0, INTERNAL_CATCH_NTTP_REGISTER_METHOD0)(TestName, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="898" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="898" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a534515713c8464b85add867ec4166ecf" prot="public" static="no">
        <name>INTERNAL_CATCH_NTTP_REG_GEN</name>
        <param><defname>TestFunc</defname></param>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_VA_NARGS_IMPL( &quot;dummy&quot;, __VA_ARGS__, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER0, INTERNAL_CATCH_NTTP_REGISTER0)(TestFunc, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="899" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="899" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a812cb39b5411a0f1a3ab2e91cb537f4c" prot="public" static="no">
        <name>INTERNAL_CATCH_DEFINE_SIG_TEST</name>
        <param><defname>TestName</defname></param>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_VA_NARGS_IMPL( &quot;dummy&quot;, __VA_ARGS__, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X,INTERNAL_CATCH_DEFINE_SIG_TEST_X,INTERNAL_CATCH_DEFINE_SIG_TEST1, INTERNAL_CATCH_DEFINE_SIG_TEST0)(TestName, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="900" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="900" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a00d8d21b6aeab72bf51f5b7d14afd201" prot="public" static="no">
        <name>INTERNAL_CATCH_DECLARE_SIG_TEST</name>
        <param><defname>TestName</defname></param>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_VA_NARGS_IMPL( &quot;dummy&quot;, __VA_ARGS__, INTERNAL_CATCH_DECLARE_SIG_TEST_X,INTERNAL_CATCH_DECLARE_SIG_TEST_X, INTERNAL_CATCH_DECLARE_SIG_TEST_X, INTERNAL_CATCH_DECLARE_SIG_TEST_X, INTERNAL_CATCH_DECLARE_SIG_TEST_X, INTERNAL_CATCH_DECLARE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X,INTERNAL_CATCH_DECLARE_SIG_TEST_X,INTERNAL_CATCH_DECLARE_SIG_TEST_X, INTERNAL_CATCH_DECLARE_SIG_TEST1, INTERNAL_CATCH_DECLARE_SIG_TEST0)(TestName, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="901" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="901" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ab71d7147401833586d6ef7c7db0cb463" prot="public" static="no">
        <name>INTERNAL_CATCH_REMOVE_PARENS_GEN</name>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_VA_NARGS_IMPL(__VA_ARGS__, INTERNAL_CATCH_REMOVE_PARENS_11_ARG,INTERNAL_CATCH_REMOVE_PARENS_10_ARG,INTERNAL_CATCH_REMOVE_PARENS_9_ARG,INTERNAL_CATCH_REMOVE_PARENS_8_ARG,INTERNAL_CATCH_REMOVE_PARENS_7_ARG,INTERNAL_CATCH_REMOVE_PARENS_6_ARG,INTERNAL_CATCH_REMOVE_PARENS_5_ARG,INTERNAL_CATCH_REMOVE_PARENS_4_ARG,INTERNAL_CATCH_REMOVE_PARENS_3_ARG,INTERNAL_CATCH_REMOVE_PARENS_2_ARG,INTERNAL_CATCH_REMOVE_PARENS_1_ARG)(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="902" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="902" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a33905c95a4d545efcf34abfbf790ad9c" prot="public" static="no">
        <name>INTERNAL_CATCH_TESTCASE2</name>
        <param><defname>TestName</defname></param>
        <param><defname>...</defname></param>
        <initializer>        static void TestName(); \
        CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \
        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
        namespace{ <ref refid="struct_catch_1_1_auto_reg" kindref="compound">Catch::AutoReg</ref> INTERNAL_CATCH_UNIQUE_NAME( autoRegistrar )( Catch::makeTestInvoker( &amp;TestName ), CATCH_INTERNAL_LINEINFO, <ref refid="class_catch_1_1_string_ref" kindref="compound">Catch::StringRef</ref>(), <ref refid="struct_catch_1_1_name_and_tags" kindref="compound">Catch::NameAndTags</ref>{ __VA_ARGS__ } ); } /* NOLINT */ \
        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \
        static void TestName()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="1045" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="1045" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a83f221452b6494c1eb0ae9bab79faa3c" prot="public" static="no">
        <name>INTERNAL_CATCH_TESTCASE</name>
        <param><defname>...</defname></param>
        <initializer>        INTERNAL_CATCH_TESTCASE2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_S_T____ ), __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="1052" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="1052" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1af5bedfdbfc32cddf5287a77cf860f242" prot="public" static="no">
        <name>INTERNAL_CATCH_METHOD_AS_TEST_CASE</name>
        <param><defname>QualifiedMethod</defname></param>
        <param><defname>...</defname></param>
        <initializer>        CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \
        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
        namespace{ <ref refid="struct_catch_1_1_auto_reg" kindref="compound">Catch::AutoReg</ref> INTERNAL_CATCH_UNIQUE_NAME( autoRegistrar )( Catch::makeTestInvoker( &amp;QualifiedMethod ), CATCH_INTERNAL_LINEINFO, &quot;&amp;&quot; #QualifiedMethod, <ref refid="struct_catch_1_1_name_and_tags" kindref="compound">Catch::NameAndTags</ref>{ __VA_ARGS__ } ); } /* NOLINT */ \
        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="1056" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="1056" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a60e66c178de977271dd864ade805a250" prot="public" static="no">
        <name>INTERNAL_CATCH_TEST_CASE_METHOD2</name>
        <param><defname>TestName</defname></param>
        <param><defname>ClassName</defname></param>
        <param><defname>...</defname></param>
        <initializer>        CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \
        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
        namespace{ \
            struct TestName : INTERNAL_CATCH_REMOVE_PARENS(ClassName) { \
                void test(); \
            }; \
            <ref refid="struct_catch_1_1_auto_reg" kindref="compound">Catch::AutoReg</ref> INTERNAL_CATCH_UNIQUE_NAME( autoRegistrar ) ( Catch::makeTestInvoker( &amp;TestName::test ), CATCH_INTERNAL_LINEINFO, #ClassName, <ref refid="struct_catch_1_1_name_and_tags" kindref="compound">Catch::NameAndTags</ref>{ __VA_ARGS__ } ); /* NOLINT */ \
        } \
        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \
        void TestName::test()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="1063" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="1063" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a4755a44f041605a731180e1e19e72bee" prot="public" static="no">
        <name>INTERNAL_CATCH_TEST_CASE_METHOD</name>
        <param><defname>ClassName</defname></param>
        <param><defname>...</defname></param>
        <initializer>        INTERNAL_CATCH_TEST_CASE_METHOD2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_S_T____ ), ClassName, __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="1074" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="1074" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ad7fc9293cc800a6f2fde7a0a211533c8" prot="public" static="no">
        <name>INTERNAL_CATCH_REGISTER_TESTCASE</name>
        <param><defname>Function</defname></param>
        <param><defname>...</defname></param>
        <initializer>        CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \
        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
        <ref refid="struct_catch_1_1_auto_reg" kindref="compound">Catch::AutoReg</ref> INTERNAL_CATCH_UNIQUE_NAME( autoRegistrar )( Catch::makeTestInvoker( Function ), CATCH_INTERNAL_LINEINFO, <ref refid="class_catch_1_1_string_ref" kindref="compound">Catch::StringRef</ref>(), <ref refid="struct_catch_1_1_name_and_tags" kindref="compound">Catch::NameAndTags</ref>{ __VA_ARGS__ } ); /* NOLINT */ \
        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="1078" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="1078" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a7a9fab8f42ff86d3985c11b474efdaec" prot="public" static="no">
        <name>INTERNAL_CATCH_TEMPLATE_TEST_CASE_2</name>
        <param><defname>TestName</defname></param>
        <param><defname>TestFunc</defname></param>
        <param><defname>Name</defname></param>
        <param><defname>Tags</defname></param>
        <param><defname>Signature</defname></param>
        <param><defname>...</defname></param>
        <initializer>        CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \
        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
        CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS \
        CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \
        INTERNAL_CATCH_DECLARE_SIG_TEST(TestFunc, INTERNAL_CATCH_REMOVE_PARENS(Signature));\
        namespace {\
        namespace INTERNAL_CATCH_MAKE_NAMESPACE(TestName){\
            INTERNAL_CATCH_TYPE_GEN\
            INTERNAL_CATCH_NTTP_GEN(INTERNAL_CATCH_REMOVE_PARENS(Signature))\
            INTERNAL_CATCH_NTTP_REG_GEN(TestFunc,INTERNAL_CATCH_REMOVE_PARENS(Signature))\
            template&lt;typename...Types&gt; \
            struct TestName{\
                TestName(){\
                    int index = 0;                                    \
                    constexpr char const* tmpl_types[] = {CATCH_REC_LIST(INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS, __VA_ARGS__)};\
                    using expander = int[];\
                    (void)expander{(reg_test(Types{}, <ref refid="struct_catch_1_1_name_and_tags" kindref="compound">Catch::NameAndTags</ref>{ Name &quot; - &quot; + std::string(tmpl_types[index]), Tags } ), index++)... };/* NOLINT */ \
                }\
            };\
            static int INTERNAL_CATCH_UNIQUE_NAME( globalRegistrar ) = [](){\
            TestName&lt;INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES(__VA_ARGS__)&gt;();\
            return 0;\
        }();\
        }\
        }\
        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \
        INTERNAL_CATCH_DEFINE_SIG_TEST(TestFunc,INTERNAL_CATCH_REMOVE_PARENS(Signature))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="1085" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="1085" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a8190f00b563c3efb52f8057be41db45f" prot="public" static="no">
        <name>INTERNAL_CATCH_TEMPLATE_TEST_CASE</name>
        <param><defname>Name</defname></param>
        <param><defname>Tags</defname></param>
        <param><defname>...</defname></param>
        <initializer>        INTERNAL_CATCH_TEMPLATE_TEST_CASE_2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____ ), Name, Tags, typename TestType, __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="1115" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="1115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1acdd7766753f3768c537a9a0747dc15fc" prot="public" static="no">
        <name>INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG</name>
        <param><defname>Name</defname></param>
        <param><defname>Tags</defname></param>
        <param><defname>Signature</defname></param>
        <param><defname>...</defname></param>
        <initializer>        INTERNAL_CATCH_TEMPLATE_TEST_CASE_2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____ ), Name, Tags, Signature, __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="1123" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="1123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a52cf4aaf39fe85c5af878c432296a46d" prot="public" static="no">
        <name>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2</name>
        <param><defname>TestName</defname></param>
        <param><defname>TestFuncName</defname></param>
        <param><defname>Name</defname></param>
        <param><defname>Tags</defname></param>
        <param><defname>Signature</defname></param>
        <param><defname>TmplTypes</defname></param>
        <param><defname>TypesList</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="1130" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="1130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1acd8f967bc841a9ab05774e8863cf9506" prot="public" static="no">
        <name>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE</name>
        <param><defname>Name</defname></param>
        <param><defname>Tags</defname></param>
        <param><defname>...</defname></param>
        <initializer>        INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2(INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____ ), Name, Tags, typename T,__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="1164" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="1164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ab1e624e6e831f5f15df243f97bf7e962" prot="public" static="no">
        <name>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG</name>
        <param><defname>Name</defname></param>
        <param><defname>Tags</defname></param>
        <param><defname>Signature</defname></param>
        <param><defname>...</defname></param>
        <initializer>        INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2(INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____ ), Name, Tags, Signature, __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="1172" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="1172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a1ddeb0664108fbef4c50e5dab4dbc567" prot="public" static="no">
        <name>INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_2</name>
        <param><defname>TestName</defname></param>
        <param><defname>TestFunc</defname></param>
        <param><defname>Name</defname></param>
        <param><defname>Tags</defname></param>
        <param><defname>TmplList</defname></param>
        <initializer>        CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \
        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
        CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \
        template&lt;typename TestType&gt; static void TestFunc();       \
        namespace {\
        namespace INTERNAL_CATCH_MAKE_NAMESPACE(TestName){\
        INTERNAL_CATCH_TYPE_GEN\
        template&lt;typename... Types&gt;                               \
        struct TestName {                                         \
            void reg_tests() {                                          \
                int index = 0;                                    \
                using expander = int[];                           \
                (void)expander{(<ref refid="struct_catch_1_1_auto_reg" kindref="compound">Catch::AutoReg</ref>( Catch::makeTestInvoker( &amp;TestFunc&lt;Types&gt; ), CATCH_INTERNAL_LINEINFO, <ref refid="class_catch_1_1_string_ref" kindref="compound">Catch::StringRef</ref>(), <ref refid="struct_catch_1_1_name_and_tags" kindref="compound">Catch::NameAndTags</ref>{ Name &quot; - &quot; + std::string(INTERNAL_CATCH_STRINGIZE(TmplList)) + &quot; - &quot; + std::to_string(index), Tags } ), index++)... };/* NOLINT */\
            }                                                     \
        };\
        static int INTERNAL_CATCH_UNIQUE_NAME( globalRegistrar ) = [](){ \
                using TestInit = typename convert&lt;TestName, TmplList&gt;::type; \
                TestInit t;                                           \
                t.reg_tests();                                        \
                return 0;                                             \
            }();                                                      \
        }}\
        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION                       \
        template&lt;typename TestType&gt;                                   \
        static void TestFunc()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="1179" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="1179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ac9ef0e27a1dcfda5fe253f1767e2fab8" prot="public" static="no">
        <name>INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE</name>
        <param><defname>Name</defname></param>
        <param><defname>Tags</defname></param>
        <param><defname>TmplList</defname></param>
        <initializer>        INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____ ), Name, Tags, TmplList )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="1206" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="1206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a8d7a6f4bac6e19a2d5ed5b35fd0a7efb" prot="public" static="no">
        <name>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2</name>
        <param><defname>TestNameClass</defname></param>
        <param><defname>TestName</defname></param>
        <param><defname>ClassName</defname></param>
        <param><defname>Name</defname></param>
        <param><defname>Tags</defname></param>
        <param><defname>Signature</defname></param>
        <param><defname>...</defname></param>
        <initializer>        CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \
        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
        CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS \
        CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \
        namespace {\
        namespace INTERNAL_CATCH_MAKE_NAMESPACE(TestName){ \
            INTERNAL_CATCH_TYPE_GEN\
            INTERNAL_CATCH_NTTP_GEN(INTERNAL_CATCH_REMOVE_PARENS(Signature))\
            INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD(TestName, ClassName, INTERNAL_CATCH_REMOVE_PARENS(Signature));\
            INTERNAL_CATCH_NTTP_REG_METHOD_GEN(TestName, INTERNAL_CATCH_REMOVE_PARENS(Signature))\
            template&lt;typename...Types&gt; \
            struct TestNameClass{\
                TestNameClass(){\
                    int index = 0;                                    \
                    constexpr char const* tmpl_types[] = {CATCH_REC_LIST(INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS, __VA_ARGS__)};\
                    using expander = int[];\
                    (void)expander{(reg_test(Types{}, #ClassName, <ref refid="struct_catch_1_1_name_and_tags" kindref="compound">Catch::NameAndTags</ref>{ Name &quot; - &quot; + std::string(tmpl_types[index]), Tags } ), index++)... };/* NOLINT */ \
                }\
            };\
            static int INTERNAL_CATCH_UNIQUE_NAME( globalRegistrar ) = [](){\
                TestNameClass&lt;INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES(__VA_ARGS__)&gt;();\
                return 0;\
        }();\
        }\
        }\
        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \
        INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD(TestName, INTERNAL_CATCH_REMOVE_PARENS(Signature))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="1209" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="1209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a582f90e5f7c36e9e69fff5f4c891ac29" prot="public" static="no">
        <name>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD</name>
        <param><defname>ClassName</defname></param>
        <param><defname>Name</defname></param>
        <param><defname>Tags</defname></param>
        <param><defname>...</defname></param>
        <initializer>        INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____C_L_A_S_S____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ) , ClassName, Name, Tags, typename T, __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="1239" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="1239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ab536a2ad12ea4a01b8037d0c953e1ddf" prot="public" static="no">
        <name>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG</name>
        <param><defname>ClassName</defname></param>
        <param><defname>Name</defname></param>
        <param><defname>Tags</defname></param>
        <param><defname>Signature</defname></param>
        <param><defname>...</defname></param>
        <initializer>        INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____C_L_A_S_S____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ) , ClassName, Name, Tags, Signature, __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="1247" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="1247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1aa50cacf2bbca5f9ddd2625403e649799" prot="public" static="no">
        <name>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2</name>
        <param><defname>TestNameClass</defname></param>
        <param><defname>TestName</defname></param>
        <param><defname>ClassName</defname></param>
        <param><defname>Name</defname></param>
        <param><defname>Tags</defname></param>
        <param><defname>Signature</defname></param>
        <param><defname>TmplTypes</defname></param>
        <param><defname>TypesList</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="1254" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="1254" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a1a4839fc44923f817dec5694f0bd1f33" prot="public" static="no">
        <name>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD</name>
        <param><defname>ClassName</defname></param>
        <param><defname>Name</defname></param>
        <param><defname>Tags</defname></param>
        <param><defname>...</defname></param>
        <initializer>        INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____ ), ClassName, Name, Tags, typename T, __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="1291" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="1291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a09fd24fffbc23194f538de357e9714f7" prot="public" static="no">
        <name>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG</name>
        <param><defname>ClassName</defname></param>
        <param><defname>Name</defname></param>
        <param><defname>Tags</defname></param>
        <param><defname>Signature</defname></param>
        <param><defname>...</defname></param>
        <initializer>        INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____ ), ClassName, Name, Tags, Signature, __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="1299" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="1299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a9f5b6affb41be524dcd4b28723ffcfc8" prot="public" static="no">
        <name>INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD_2</name>
        <param><defname>TestNameClass</defname></param>
        <param><defname>TestName</defname></param>
        <param><defname>ClassName</defname></param>
        <param><defname>Name</defname></param>
        <param><defname>Tags</defname></param>
        <param><defname>TmplList</defname></param>
        <initializer>        CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \
        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
        CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \
        template&lt;typename TestType&gt; \
        struct TestName : INTERNAL_CATCH_REMOVE_PARENS(ClassName &lt;TestType&gt;) { \
            void test();\
        };\
        namespace {\
        namespace INTERNAL_CATCH_MAKE_NAMESPACE(TestName){ \
            INTERNAL_CATCH_TYPE_GEN\
            template&lt;typename...Types&gt;\
            struct TestNameClass{\
                void reg_tests(){\
                    int index = 0;\
                    using expander = int[];\
                    (void)expander{(<ref refid="struct_catch_1_1_auto_reg" kindref="compound">Catch::AutoReg</ref>( Catch::makeTestInvoker( &amp;TestName&lt;Types&gt;::test ), CATCH_INTERNAL_LINEINFO, #ClassName, <ref refid="struct_catch_1_1_name_and_tags" kindref="compound">Catch::NameAndTags</ref>{ Name &quot; - &quot; + std::string(INTERNAL_CATCH_STRINGIZE(TmplList)) + &quot; - &quot; + std::to_string(index), Tags } ), index++)... };/* NOLINT */ \
                }\
            };\
            static int INTERNAL_CATCH_UNIQUE_NAME( globalRegistrar ) = [](){\
                using TestInit = typename convert&lt;TestNameClass, TmplList&gt;::type;\
                TestInit t;\
                t.reg_tests();\
                return 0;\
            }(); \
        }}\
        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \
        template&lt;typename TestType&gt; \
        void TestName&lt;TestType&gt;::test()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="1306" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="1306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a6e9c5f2b3bc07068ad3bd78d224989f3" prot="public" static="no">
        <name>INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD</name>
        <param><defname>ClassName</defname></param>
        <param><defname>Name</defname></param>
        <param><defname>Tags</defname></param>
        <param><defname>TmplList</defname></param>
        <initializer>        INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD_2( INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____ ), INTERNAL_CATCH_UNIQUE_NAME( ____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____ ), ClassName, Name, Tags, TmplList )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="1336" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="1336" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a1c3c601bf24488800bdf3f634a2a6b11" prot="public" static="no">
        <name>INTERNAL_CATCH_REGISTER_ENUM</name>
        <param><defname>enumName</defname></param>
        <param><defname>...</defname></param>
        <initializer>namespace Catch { \
    template&lt;&gt; struct StringMaker&lt;enumName&gt; { \
        static std::string convert( enumName <ref refid="classvalue" kindref="compound">value</ref> ) { \
            static const auto&amp; enumInfo = ::Catch::getMutableRegistryHub().getMutableEnumValuesRegistry().registerEnum( #enumName, #__VA_ARGS__, { __VA_ARGS__ } ); \
            return static_cast&lt;std::string&gt;(enumInfo.lookup( static_cast&lt;int&gt;( <ref refid="classvalue" kindref="compound">value</ref> ) )); \
        } \
    }; \
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="2170" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="2170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a3063d7b316c984044916079ab8b7dad6" prot="public" static="no">
        <name>CATCH_REGISTER_ENUM</name>
        <param><defname>enumName</defname></param>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_REGISTER_ENUM( enumName, __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="2180" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="2180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ab6dc42a98c8854e2e1d91874b1fe406c" prot="public" static="no">
        <name>CATCH_INTERNAL_STRINGIFY</name>
        <param><defname>...</defname></param>
        <initializer>#__VA_ARGS__</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="2678" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="2678" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1af21395add3cdee3109e0a2e7c15a54bc" prot="public" static="no">
        <name>INTERNAL_CATCH_TRY</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="2688" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="2688" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a3ef8d1213eac4fd0e2fdb4e13bdb8070" prot="public" static="no">
        <name>INTERNAL_CATCH_CATCH</name>
        <param><defname>capturer</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="2689" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="2689" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a87986fec7b6b65bdae29cd2fa62bec20" prot="public" static="no">
        <name>INTERNAL_CATCH_REACT</name>
        <param><defname>handler</defname></param>
        <initializer>handler.complete();</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="2698" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="2698" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ac3284f56c2f755d2b79fdb663cf9fb72" prot="public" static="no">
        <name>INTERNAL_CATCH_TEST</name>
        <param><defname>macroName</defname></param>
        <param><defname>resultDisposition</defname></param>
        <param><defname>...</defname></param>
        <initializer>    do { \
        CATCH_INTERNAL_IGNORE_BUT_WARN(__VA_ARGS__); \
        <ref refid="class_catch_1_1_assertion_handler" kindref="compound">Catch::AssertionHandler</ref> catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(__VA_ARGS__), resultDisposition ); \
        INTERNAL_CATCH_TRY { \
            CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \
            CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS \
            catchAssertionHandler.handleExpr( <ref refid="struct_catch_1_1_decomposer" kindref="compound">Catch::Decomposer</ref>() &lt;= __VA_ARGS__ ); \
            CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \
        } INTERNAL_CATCH_CATCH( catchAssertionHandler ) \
        INTERNAL_CATCH_REACT( catchAssertionHandler ) \
    } while( (void)0, (false) &amp;&amp; static_cast&lt;bool&gt;( !!(__VA_ARGS__) ) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="2701" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="2701" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1abfd240b1bdcc699638464fb3c7131c1d" prot="public" static="no">
        <name>INTERNAL_CATCH_IF</name>
        <param><defname>macroName</defname></param>
        <param><defname>resultDisposition</defname></param>
        <param><defname>...</defname></param>
        <initializer>    INTERNAL_CATCH_TEST( macroName, resultDisposition, __VA_ARGS__ ); \
    if( Catch::getResultCapture().lastAssertionPassed() )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="2715" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="2715" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1aaf2139c8903264bfe442e4b23b6673a9" prot="public" static="no">
        <name>INTERNAL_CATCH_ELSE</name>
        <param><defname>macroName</defname></param>
        <param><defname>resultDisposition</defname></param>
        <param><defname>...</defname></param>
        <initializer>    INTERNAL_CATCH_TEST( macroName, resultDisposition, __VA_ARGS__ ); \
    if( !Catch::getResultCapture().lastAssertionPassed() )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="2720" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="2720" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ac340cc35716115abaec4dfbcb061da52" prot="public" static="no">
        <name>INTERNAL_CATCH_NO_THROW</name>
        <param><defname>macroName</defname></param>
        <param><defname>resultDisposition</defname></param>
        <param><defname>...</defname></param>
        <initializer>    do { \
        <ref refid="class_catch_1_1_assertion_handler" kindref="compound">Catch::AssertionHandler</ref> catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(__VA_ARGS__), resultDisposition ); \
        try { \
            static_cast&lt;void&gt;(__VA_ARGS__); \
            catchAssertionHandler.handleExceptionNotThrownAsExpected(); \
        } \
        catch( ... ) { \
            catchAssertionHandler.handleUnexpectedInflightException(); \
        } \
        INTERNAL_CATCH_REACT( catchAssertionHandler ) \
    } while( false )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="2725" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="2725" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a2f3028d4fd4510f2f47ddd20626cccae" prot="public" static="no">
        <name>INTERNAL_CATCH_THROWS</name>
        <param><defname>macroName</defname></param>
        <param><defname>resultDisposition</defname></param>
        <param><defname>...</defname></param>
        <initializer>    do { \
        <ref refid="class_catch_1_1_assertion_handler" kindref="compound">Catch::AssertionHandler</ref> catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(__VA_ARGS__), resultDisposition); \
        if( catchAssertionHandler.allowThrows() ) \
            try { \
                static_cast&lt;void&gt;(__VA_ARGS__); \
                catchAssertionHandler.handleUnexpectedExceptionNotThrown(); \
            } \
            catch( ... ) { \
                catchAssertionHandler.handleExceptionThrownAsExpected(); \
            } \
        else \
            catchAssertionHandler.handleThrowingCallSkipped(); \
        INTERNAL_CATCH_REACT( catchAssertionHandler ) \
    } while( false )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="2739" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="2739" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a5e87b48ab40b7b128ae8428c14c25a91" prot="public" static="no">
        <name>INTERNAL_CATCH_THROWS_AS</name>
        <param><defname>macroName</defname></param>
        <param><defname>exceptionType</defname></param>
        <param><defname>resultDisposition</defname></param>
        <param><defname>expr</defname></param>
        <initializer>    do { \
        <ref refid="class_catch_1_1_assertion_handler" kindref="compound">Catch::AssertionHandler</ref> catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(expr) &quot;, &quot; CATCH_INTERNAL_STRINGIFY(exceptionType), resultDisposition ); \
        if( catchAssertionHandler.allowThrows() ) \
            try { \
                static_cast&lt;void&gt;(expr); \
                catchAssertionHandler.handleUnexpectedExceptionNotThrown(); \
            } \
            catch( exceptionType const&amp; ) { \
                catchAssertionHandler.handleExceptionThrownAsExpected(); \
            } \
            catch( ... ) { \
                catchAssertionHandler.handleUnexpectedInflightException(); \
            } \
        else \
            catchAssertionHandler.handleThrowingCallSkipped(); \
        INTERNAL_CATCH_REACT( catchAssertionHandler ) \
    } while( false )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="2756" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="2756" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ad1f7d83040ad9b09020dc72c57019638" prot="public" static="no">
        <name>INTERNAL_CATCH_MSG</name>
        <param><defname>macroName</defname></param>
        <param><defname>messageType</defname></param>
        <param><defname>resultDisposition</defname></param>
        <param><defname>...</defname></param>
        <initializer>    do { \
        <ref refid="class_catch_1_1_assertion_handler" kindref="compound">Catch::AssertionHandler</ref> catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, <ref refid="class_catch_1_1_string_ref" kindref="compound">Catch::StringRef</ref>(), resultDisposition ); \
        catchAssertionHandler.handleMessage( messageType, ( <ref refid="struct_catch_1_1_message_stream" kindref="compound">Catch::MessageStream</ref>() &lt;&lt; __VA_ARGS__ + ::<ref refid="struct_catch_1_1_stream_end_stop" kindref="compound">Catch::StreamEndStop</ref>() ).m_stream.str() ); \
        INTERNAL_CATCH_REACT( catchAssertionHandler ) \
    } while( false )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="2776" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="2776" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ad8c51fdad7ab7e39414cd1bf90a3ce06" prot="public" static="no">
        <name>INTERNAL_CATCH_CAPTURE</name>
        <param><defname>varName</defname></param>
        <param><defname>macroName</defname></param>
        <param><defname>...</defname></param>
        <initializer>    auto varName = <ref refid="class_catch_1_1_capturer" kindref="compound">Catch::Capturer</ref>( macroName, CATCH_INTERNAL_LINEINFO, Catch::ResultWas::Info, #__VA_ARGS__ ); \
    varName.captureValues( 0, __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="2784" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="2784" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ab0eb5cfab90a80f3113f0ecb65c62a1c" prot="public" static="no">
        <name>INTERNAL_CATCH_INFO</name>
        <param><defname>macroName</defname></param>
        <param><defname>log</defname></param>
        <initializer>    <ref refid="class_catch_1_1_scoped_message" kindref="compound">Catch::ScopedMessage</ref> INTERNAL_CATCH_UNIQUE_NAME( scopedMessage )( <ref refid="struct_catch_1_1_message_builder" kindref="compound">Catch::MessageBuilder</ref>( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, Catch::ResultWas::Info ) &lt;&lt; log );</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="2789" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="2789" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ab268c09b68167db4b163234f9934463f" prot="public" static="no">
        <name>INTERNAL_CATCH_UNSCOPED_INFO</name>
        <param><defname>macroName</defname></param>
        <param><defname>log</defname></param>
        <initializer>    Catch::getResultCapture().emplaceUnscopedMessage( <ref refid="struct_catch_1_1_message_builder" kindref="compound">Catch::MessageBuilder</ref>( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, Catch::ResultWas::Info ) &lt;&lt; log )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="2793" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="2793" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a4296ab989dbc1f6c52c24d60012144d6" prot="public" static="no">
        <name>INTERNAL_CATCH_THROWS_STR_MATCHES</name>
        <param><defname>macroName</defname></param>
        <param><defname>resultDisposition</defname></param>
        <param><defname>matcher</defname></param>
        <param><defname>...</defname></param>
        <initializer>    do { \
        <ref refid="class_catch_1_1_assertion_handler" kindref="compound">Catch::AssertionHandler</ref> catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(__VA_ARGS__) &quot;, &quot; CATCH_INTERNAL_STRINGIFY(matcher), resultDisposition ); \
        if( catchAssertionHandler.allowThrows() ) \
            try { \
                static_cast&lt;void&gt;(__VA_ARGS__); \
                catchAssertionHandler.handleUnexpectedExceptionNotThrown(); \
            } \
            catch( ... ) { \
                Catch::handleExceptionMatchExpr( catchAssertionHandler, matcher, #matcher##_catch_sr ); \
            } \
        else \
            catchAssertionHandler.handleThrowingCallSkipped(); \
        INTERNAL_CATCH_REACT( catchAssertionHandler ) \
    } while( false )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="2798" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="2798" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a2969ec50cc661169e94b1b80ac799c07" prot="public" static="no">
        <name>INTERNAL_CATCH_SECTION</name>
        <param><defname>...</defname></param>
        <initializer>    CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \
    CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS \
    if( <ref refid="class_catch_1_1_section" kindref="compound">Catch::Section</ref> const&amp; INTERNAL_CATCH_UNIQUE_NAME( catch_internal_Section ) = <ref refid="struct_catch_1_1_section_info" kindref="compound">Catch::SectionInfo</ref>( CATCH_INTERNAL_LINEINFO, __VA_ARGS__ ) ) \
    CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="2928" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="2928" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1abe92a5063c83dec8143bf685e4b4a198" prot="public" static="no">
        <name>INTERNAL_CATCH_DYNAMIC_SECTION</name>
        <param><defname>...</defname></param>
        <initializer>    CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \
    CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS \
    if( <ref refid="class_catch_1_1_section" kindref="compound">Catch::Section</ref> const&amp; INTERNAL_CATCH_UNIQUE_NAME( catch_internal_Section ) = <ref refid="struct_catch_1_1_section_info" kindref="compound">Catch::SectionInfo</ref>( CATCH_INTERNAL_LINEINFO, (<ref refid="class_catch_1_1_reusable_string_stream" kindref="compound">Catch::ReusableStringStream</ref>() &lt;&lt; __VA_ARGS__).str() ) ) \
    CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="2934" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="2934" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ab5314f401394dc4f7d1ac8b59370af09" prot="public" static="no">
        <name>INTERNAL_CATCH_TRANSLATE_EXCEPTION2</name>
        <param><defname>translatorName</defname></param>
        <param><defname>signature</defname></param>
        <initializer>    static std::string translatorName( signature ); \
    CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \
    CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \
    namespace{ <ref refid="class_catch_1_1_exception_translator_registrar" kindref="compound">Catch::ExceptionTranslatorRegistrar</ref> INTERNAL_CATCH_UNIQUE_NAME( catch_internal_ExceptionRegistrar )( &amp;translatorName ); } \
    CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \
    static std::string translatorName( signature )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="3058" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="3058" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a109d814750b0a695e2b66e9c53e748c0" prot="public" static="no">
        <name>INTERNAL_CATCH_TRANSLATE_EXCEPTION</name>
        <param><defname>signature</defname></param>
        <initializer>INTERNAL_CATCH_TRANSLATE_EXCEPTION2( INTERNAL_CATCH_UNIQUE_NAME( catch_internal_ExceptionTranslator ), signature )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="3066" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="3066" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a877690adc04f1fbfe944df6bebe6f8b5" prot="public" static="no">
        <name>INTERNAL_CHECK_THAT</name>
        <param><defname>macroName</defname></param>
        <param><defname>matcher</defname></param>
        <param><defname>resultDisposition</defname></param>
        <param><defname>arg</defname></param>
        <initializer>    do { \
        <ref refid="class_catch_1_1_assertion_handler" kindref="compound">Catch::AssertionHandler</ref> catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(arg) &quot;, &quot; CATCH_INTERNAL_STRINGIFY(matcher), resultDisposition ); \
        INTERNAL_CATCH_TRY { \
            catchAssertionHandler.handleExpr( Catch::makeMatchExpr( arg, matcher, #matcher##_catch_sr ) ); \
        } INTERNAL_CATCH_CATCH( catchAssertionHandler ) \
        INTERNAL_CATCH_REACT( catchAssertionHandler ) \
    } while( false )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="3802" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="3802" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ace8fc7b74db8a1b2916554ad64e5b036" prot="public" static="no">
        <name>INTERNAL_CATCH_THROWS_MATCHES</name>
        <param><defname>macroName</defname></param>
        <param><defname>exceptionType</defname></param>
        <param><defname>resultDisposition</defname></param>
        <param><defname>matcher</defname></param>
        <param><defname>...</defname></param>
        <initializer>    do { \
        <ref refid="class_catch_1_1_assertion_handler" kindref="compound">Catch::AssertionHandler</ref> catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(__VA_ARGS__) &quot;, &quot; CATCH_INTERNAL_STRINGIFY(exceptionType) &quot;, &quot; CATCH_INTERNAL_STRINGIFY(matcher), resultDisposition ); \
        if( catchAssertionHandler.allowThrows() ) \
            try { \
                static_cast&lt;void&gt;(__VA_ARGS__ ); \
                catchAssertionHandler.handleUnexpectedExceptionNotThrown(); \
            } \
            catch( exceptionType const&amp; ex ) { \
                catchAssertionHandler.handleExpr( Catch::makeMatchExpr( ex, matcher, #matcher##_catch_sr ) ); \
            } \
            catch( ... ) { \
                catchAssertionHandler.handleUnexpectedInflightException(); \
            } \
        else \
            catchAssertionHandler.handleThrowingCallSkipped(); \
        INTERNAL_CATCH_REACT( catchAssertionHandler ) \
    } while( false )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="3812" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="3812" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a8e47cad0b28262f193e489df151fed27" prot="public" static="no">
        <name>CATCH_MAKE_MSG</name>
        <param><defname>...</defname></param>
        <initializer>    (<ref refid="class_catch_1_1_reusable_string_stream" kindref="compound">Catch::ReusableStringStream</ref>() &lt;&lt; __VA_ARGS__).str()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="3892" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="3892" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1af445c1e136fadba0e92f3c22d68a7641" prot="public" static="no">
        <name>CATCH_INTERNAL_ERROR</name>
        <param><defname>...</defname></param>
        <initializer>    Catch::throw_logic_error(CATCH_MAKE_MSG( CATCH_INTERNAL_LINEINFO &lt;&lt; &quot;: Internal Catch2 error: &quot; &lt;&lt; __VA_ARGS__))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="3895" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="3895" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ad9884641eb178d2628cf3ad19c394f47" prot="public" static="no">
        <name>CATCH_ERROR</name>
        <param><defname>...</defname></param>
        <initializer>    Catch::throw_domain_error(CATCH_MAKE_MSG( __VA_ARGS__ ))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="3898" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="3898" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a834a24a39cf448d5a0f812e716be1c76" prot="public" static="no">
        <name>CATCH_RUNTIME_ERROR</name>
        <param><defname>...</defname></param>
        <initializer>    Catch::throw_runtime_error(CATCH_MAKE_MSG( __VA_ARGS__ ))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="3901" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="3901" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1aba552c917b9ac8604f50a914a745e974" prot="public" static="no">
        <name>CATCH_ENFORCE</name>
        <param><defname>condition</defname></param>
        <param><defname>...</defname></param>
        <initializer>    do{ if( !(condition) ) CATCH_ERROR( __VA_ARGS__ ); } while(false)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="3904" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="3904" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a4941c6427cfa36ee7c52d734e460f9df" prot="public" static="no">
        <name>GENERATE</name>
        <param><defname>...</defname></param>
        <initializer>    Catch::Generators::generate( INTERNAL_CATCH_STRINGIZE(INTERNAL_CATCH_UNIQUE_NAME(generator)), \
                                 CATCH_INTERNAL_LINEINFO, \
                                 [ ]{ using namespace Catch::Generators; return makeGenerators( __VA_ARGS__ ); } )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="4098" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="4098" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a44e2fff00253a218f0a392ad6abac624" prot="public" static="no">
        <name>GENERATE_COPY</name>
        <param><defname>...</defname></param>
        <initializer>    Catch::Generators::generate( INTERNAL_CATCH_STRINGIZE(INTERNAL_CATCH_UNIQUE_NAME(generator)), \
                                 CATCH_INTERNAL_LINEINFO, \
                                 [=]{ using namespace Catch::Generators; return makeGenerators( __VA_ARGS__ ); } )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="4102" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="4102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1aebcb76dcf5cbbbd3dca153a21d6f78fe" prot="public" static="no">
        <name>GENERATE_REF</name>
        <param><defname>...</defname></param>
        <initializer>    Catch::Generators::generate( INTERNAL_CATCH_STRINGIZE(INTERNAL_CATCH_UNIQUE_NAME(generator)), \
                                 CATCH_INTERNAL_LINEINFO, \
                                 [&amp;]{ using namespace Catch::Generators; return makeGenerators( __VA_ARGS__ ); } )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="4106" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="4106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ad57835ba8f1bb419a865ada6bd011a85" prot="public" static="no">
        <name>REQUIRE</name>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_TEST( &quot;REQUIRE&quot;, Catch::ResultDisposition::Normal, __VA_ARGS__  )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17659" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17659" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ada5065594bafc152162761ace47c1dcb" prot="public" static="no">
        <name>REQUIRE_FALSE</name>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_TEST( &quot;REQUIRE_FALSE&quot;, Catch::ResultDisposition::Normal | Catch::ResultDisposition::FalseTest, __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17660" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17660" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ae3c33faa1d31a2bb0811dac74b994e3e" prot="public" static="no">
        <name>REQUIRE_THROWS</name>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_THROWS( &quot;REQUIRE_THROWS&quot;, Catch::ResultDisposition::Normal, __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17662" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17662" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ae24a059e3c28ff3eea69be48282f5f81" prot="public" static="no">
        <name>REQUIRE_THROWS_AS</name>
        <param><defname>expr</defname></param>
        <param><defname>exceptionType</defname></param>
        <initializer>INTERNAL_CATCH_THROWS_AS( &quot;REQUIRE_THROWS_AS&quot;, exceptionType, Catch::ResultDisposition::Normal, expr )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17663" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17663" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1aa39a017db507132071d2819f087b2f28" prot="public" static="no">
        <name>REQUIRE_THROWS_WITH</name>
        <param><defname>expr</defname></param>
        <param><defname>matcher</defname></param>
        <initializer>INTERNAL_CATCH_THROWS_STR_MATCHES( &quot;REQUIRE_THROWS_WITH&quot;, Catch::ResultDisposition::Normal, matcher, expr )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17664" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17664" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a54473a48ac2ac55bfe1165b69e1b8010" prot="public" static="no">
        <name>REQUIRE_THROWS_MATCHES</name>
        <param><defname>expr</defname></param>
        <param><defname>exceptionType</defname></param>
        <param><defname>matcher</defname></param>
        <initializer>INTERNAL_CATCH_THROWS_MATCHES( &quot;REQUIRE_THROWS_MATCHES&quot;, exceptionType, Catch::ResultDisposition::Normal, matcher, expr )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17666" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17666" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ab0148f0dfca438f7aa01974e9c33216a" prot="public" static="no">
        <name>REQUIRE_NOTHROW</name>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_NO_THROW( &quot;REQUIRE_NOTHROW&quot;, Catch::ResultDisposition::Normal, __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17668" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17668" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a836cca6b6ed3a1706353f6d1bca0935f" prot="public" static="no">
        <name>CHECK</name>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_TEST( &quot;CHECK&quot;, Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17670" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17670" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a7bf095d8512cb180f8ff3a2258a6eaac" prot="public" static="no">
        <name>CHECK_FALSE</name>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_TEST( &quot;CHECK_FALSE&quot;, Catch::ResultDisposition::ContinueOnFailure | Catch::ResultDisposition::FalseTest, __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17671" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17671" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a354466c7b989ec55784c02d74013263c" prot="public" static="no">
        <name>CHECKED_IF</name>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_IF( &quot;CHECKED_IF&quot;, Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17672" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17672" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a5fa42bb950a65e22eac778c86b27d832" prot="public" static="no">
        <name>CHECKED_ELSE</name>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_ELSE( &quot;CHECKED_ELSE&quot;, Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17673" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17673" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a13c6feaf82c3c419104c50dbb8caa3ef" prot="public" static="no">
        <name>CHECK_NOFAIL</name>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_TEST( &quot;CHECK_NOFAIL&quot;, Catch::ResultDisposition::ContinueOnFailure | Catch::ResultDisposition::SuppressFail, __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17674" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17674" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a5c646dfe831e596b59073014c1c8b9e5" prot="public" static="no">
        <name>CHECK_THROWS</name>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_THROWS( &quot;CHECK_THROWS&quot;, Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17676" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17676" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a1fb6439098d2a12bb69188034e03baf2" prot="public" static="no">
        <name>CHECK_THROWS_AS</name>
        <param><defname>expr</defname></param>
        <param><defname>exceptionType</defname></param>
        <initializer>INTERNAL_CATCH_THROWS_AS( &quot;CHECK_THROWS_AS&quot;, exceptionType, Catch::ResultDisposition::ContinueOnFailure, expr )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17677" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17677" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a4903733490f526b58053836575e99066" prot="public" static="no">
        <name>CHECK_THROWS_WITH</name>
        <param><defname>expr</defname></param>
        <param><defname>matcher</defname></param>
        <initializer>INTERNAL_CATCH_THROWS_STR_MATCHES( &quot;CHECK_THROWS_WITH&quot;, Catch::ResultDisposition::ContinueOnFailure, matcher, expr )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17678" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17678" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a74fcc14d39e8cc35ff39f69c5b60e375" prot="public" static="no">
        <name>CHECK_THROWS_MATCHES</name>
        <param><defname>expr</defname></param>
        <param><defname>exceptionType</defname></param>
        <param><defname>matcher</defname></param>
        <initializer>INTERNAL_CATCH_THROWS_MATCHES( &quot;CHECK_THROWS_MATCHES&quot;, exceptionType, Catch::ResultDisposition::ContinueOnFailure, matcher, expr )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17680" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17680" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a78e70f011f20c4ade1d1ac2b8fd33626" prot="public" static="no">
        <name>CHECK_NOTHROW</name>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_NO_THROW( &quot;CHECK_NOTHROW&quot;, Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17682" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17682" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a5b8c33c63e0804d4458e2c761370b75d" prot="public" static="no">
        <name>CHECK_THAT</name>
        <param><defname>arg</defname></param>
        <param><defname>matcher</defname></param>
        <initializer>INTERNAL_CHECK_THAT( &quot;CHECK_THAT&quot;, matcher, Catch::ResultDisposition::ContinueOnFailure, arg )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17685" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17685" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ac1354db6f3e9c1e0a8eda0eea7ff1f0a" prot="public" static="no">
        <name>REQUIRE_THAT</name>
        <param><defname>arg</defname></param>
        <param><defname>matcher</defname></param>
        <initializer>INTERNAL_CHECK_THAT( &quot;REQUIRE_THAT&quot;, matcher, Catch::ResultDisposition::Normal, arg )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17687" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17687" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a3ae64706314066fdc8b6c8029a915aa7" prot="public" static="no">
        <name>INFO</name>
        <param><defname>msg</defname></param>
        <initializer>INTERNAL_CATCH_INFO( &quot;INFO&quot;, msg )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17690" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17690" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a8dd723bbdb751f1c2f3af8c4f264b7a3" prot="public" static="no">
        <name>UNSCOPED_INFO</name>
        <param><defname>msg</defname></param>
        <initializer>INTERNAL_CATCH_UNSCOPED_INFO( &quot;UNSCOPED_INFO&quot;, msg )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17691" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17691" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a108d6c5c51dd46e82a62b262394f0242" prot="public" static="no">
        <name>WARN</name>
        <param><defname>msg</defname></param>
        <initializer>INTERNAL_CATCH_MSG( &quot;WARN&quot;, Catch::ResultWas::Warning, Catch::ResultDisposition::ContinueOnFailure, msg )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17692" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17692" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1aaf9fe43c53965ff8d94bbd522fd1fd7a" prot="public" static="no">
        <name>CAPTURE</name>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_CAPTURE( INTERNAL_CATCH_UNIQUE_NAME(capturer), &quot;CAPTURE&quot;,__VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17693" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17693" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1abd6e2aec703006b3da62cf7860c9808f" prot="public" static="no">
        <name>TEST_CASE</name>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_TESTCASE( __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17695" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17695" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1adf06142f54a9e271590fa0e270bc41d2" prot="public" static="no">
        <name>TEST_CASE_METHOD</name>
        <param><defname>className</defname></param>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_TEST_CASE_METHOD( className, __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17696" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17696" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1add790b4107e8b013f21b0272be7bcc76" prot="public" static="no">
        <name>METHOD_AS_TEST_CASE</name>
        <param><defname>method</defname></param>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_METHOD_AS_TEST_CASE( method, __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17697" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17697" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a784b9192db328b4f21186f9b26e4146e" prot="public" static="no">
        <name>REGISTER_TEST_CASE</name>
        <param><defname>Function</defname></param>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_REGISTER_TESTCASE( Function, __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17698" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17698" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ad512fd95a78b95770b9759823f8fbc21" prot="public" static="no">
        <name>SECTION</name>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_SECTION( __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17699" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17699" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1aa1caa37b980555de35faefa9191b5128" prot="public" static="no">
        <name>DYNAMIC_SECTION</name>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_DYNAMIC_SECTION( __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17700" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17700" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ac8d1eaf65528f86b445cf6e45b2d72c9" prot="public" static="no">
        <name>FAIL</name>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_MSG( &quot;FAIL&quot;, Catch::ResultWas::ExplicitFailure, Catch::ResultDisposition::Normal, __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17701" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17701" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a3c2341a3238242fdc02d33a1968bd1d2" prot="public" static="no">
        <name>FAIL_CHECK</name>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_MSG( &quot;FAIL_CHECK&quot;, Catch::ResultWas::ExplicitFailure, Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17702" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17702" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a8e852a9421caf4fda4e1903d9f02bcf5" prot="public" static="no">
        <name>SUCCEED</name>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_MSG( &quot;SUCCEED&quot;, Catch::ResultWas::Ok, Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17703" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17703" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ab41cb63be394c30d48fa579bf8352f18" prot="public" static="no">
        <name>ANON_TEST_CASE</name>
        <param></param>
        <initializer>INTERNAL_CATCH_TESTCASE()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17704" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17704" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a9a88d21bfca0d58782cc5f0811801303" prot="public" static="no">
        <name>TEMPLATE_TEST_CASE</name>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_TEMPLATE_TEST_CASE( __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17707" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17707" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a4286bffddeb38a4e793ef35b7555f474" prot="public" static="no">
        <name>TEMPLATE_TEST_CASE_SIG</name>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG( __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17708" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17708" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a5922ee8a997f9f6c5016b186f148b73b" prot="public" static="no">
        <name>TEMPLATE_TEST_CASE_METHOD</name>
        <param><defname>className</defname></param>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD( className, __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17709" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17709" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a7b7cfca8f5e204e872ec31dc186957ac" prot="public" static="no">
        <name>TEMPLATE_TEST_CASE_METHOD_SIG</name>
        <param><defname>className</defname></param>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG( className, __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17710" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17710" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a76578a19e481e4ccdb928e68a17478d5" prot="public" static="no">
        <name>TEMPLATE_PRODUCT_TEST_CASE</name>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE( __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17711" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17711" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a52bd728f9409ff8fc6a24d49282a1994" prot="public" static="no">
        <name>TEMPLATE_PRODUCT_TEST_CASE_SIG</name>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG( __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17712" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17712" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a15aefc2b8f75059606bebf400a348870" prot="public" static="no">
        <name>TEMPLATE_PRODUCT_TEST_CASE_METHOD</name>
        <param><defname>className</defname></param>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD( className, __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17713" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17713" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1af9e44fff2a2bdba1d66ee625e8ed126d" prot="public" static="no">
        <name>TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG</name>
        <param><defname>className</defname></param>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG( className, __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17714" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17714" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a6c5f7165be1abd8331be1a47a446f20a" prot="public" static="no">
        <name>TEMPLATE_LIST_TEST_CASE</name>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE(__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17715" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17715" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a00cdc7c1452d76b386c3b85f9cce80c0" prot="public" static="no">
        <name>TEMPLATE_LIST_TEST_CASE_METHOD</name>
        <param><defname>className</defname></param>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD( className, __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17716" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17716" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1abad9ff23b730469f209b010e0ac4687c" prot="public" static="no">
        <name>STATIC_REQUIRE</name>
        <param><defname>...</defname></param>
        <initializer>static_assert(   __VA_ARGS__,  #__VA_ARGS__ ); SUCCEED( #__VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17731" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17731" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ae7506af68f12e7efdb22e951b911b5a0" prot="public" static="no">
        <name>STATIC_REQUIRE_FALSE</name>
        <param><defname>...</defname></param>
        <initializer>static_assert( !(__VA_ARGS__), &quot;!(&quot; #__VA_ARGS__ &quot;)&quot; ); SUCCEED( &quot;!(&quot; #__VA_ARGS__ &quot;)&quot; )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17732" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17732" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a094602ff56422c96e501eaaef1ef8c12" prot="public" static="no">
        <name>CATCH_TRANSLATE_EXCEPTION</name>
        <param><defname>signature</defname></param>
        <initializer>INTERNAL_CATCH_TRANSLATE_EXCEPTION( signature )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17740" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17740" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1acf8f441c7b9d70251ccbb7ccd8b83183" prot="public" static="no">
        <name>SCENARIO</name>
        <param><defname>...</defname></param>
        <initializer>TEST_CASE( &quot;Scenario: &quot; __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17743" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17743" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1add17eb8f8d85412a08a8a048cd38f33b" prot="public" static="no">
        <name>SCENARIO_METHOD</name>
        <param><defname>className</defname></param>
        <param><defname>...</defname></param>
        <initializer>INTERNAL_CATCH_TEST_CASE_METHOD( className, &quot;Scenario: &quot; __VA_ARGS__ )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17744" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17744" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a2b70c603786d759242856d883dbe93bd" prot="public" static="no">
        <name>GIVEN</name>
        <param><defname>desc</defname></param>
        <initializer>INTERNAL_CATCH_DYNAMIC_SECTION( &quot;    Given: &quot; &lt;&lt; desc )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17746" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17746" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a89dcfbe509f3f81fd865d4acd1632b66" prot="public" static="no">
        <name>AND_GIVEN</name>
        <param><defname>desc</defname></param>
        <initializer>INTERNAL_CATCH_DYNAMIC_SECTION( &quot;And given: &quot; &lt;&lt; desc )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17747" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17747" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1ab09e9b8186233f676ce6a23aebe89d6e" prot="public" static="no">
        <name>WHEN</name>
        <param><defname>desc</defname></param>
        <initializer>INTERNAL_CATCH_DYNAMIC_SECTION( &quot;     When: &quot; &lt;&lt; desc )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17748" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17748" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a054a37584492a5dfbdb5ee0f2fc10b7a" prot="public" static="no">
        <name>AND_WHEN</name>
        <param><defname>desc</defname></param>
        <initializer>INTERNAL_CATCH_DYNAMIC_SECTION( &quot; And when: &quot; &lt;&lt; desc )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17749" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17749" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1a27987092139727fd7a471b5f74dc62de" prot="public" static="no">
        <name>THEN</name>
        <param><defname>desc</defname></param>
        <initializer>INTERNAL_CATCH_DYNAMIC_SECTION( &quot;     Then: &quot; &lt;&lt; desc )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17750" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17750" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="catch_8hpp_1aafdc2a6cfbcecedec25e64bcbd6c09c6" prot="public" static="no">
        <name>AND_THEN</name>
        <param><defname>desc</defname></param>
        <initializer>INTERNAL_CATCH_DYNAMIC_SECTION( &quot;      And: &quot; &lt;&lt; desc )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="17751" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="17751" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="catch_8hpp_1aae0cdd5d2f0ac242b9ab18b0f66ba26e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;, Catch_global_namespace_dummy)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type><ref refid="struct_catch__global__namespace__dummy" kindref="compound">Catch_global_namespace_dummy</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="480" column="1" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" declline="480" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="catch_8hpp_1ad678c2afffe520362e3bb7d51f0e8f8d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto operator&quot;&quot;_catch_sr</definition>
        <argsstring>(char const *rawChars, std::size_t size) noexcept -&gt; Catch::StringRef</argsstring>
        <name>operator&quot;&quot;_catch_sr</name>
        <param>
          <type>char const *</type>
          <declname>rawChars</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" line="683" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp" bodystart="683" bodyend="685"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/>Catch<sp/>v2.13.7</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/><sp/>Generated:<sp/>2021-07-28<sp/>20:29:27.753164</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>----------------------------------------------------------</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/>This<sp/>file<sp/>has<sp/>been<sp/>merged<sp/>from<sp/>multiple<sp/>headers.<sp/>Please<sp/>don&apos;t<sp/>edit<sp/>it<sp/>directly</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>(c)<sp/>2021<sp/>Two<sp/>Blue<sp/>Cubes<sp/>Ltd.<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/><sp/>Distributed<sp/>under<sp/>the<sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.<sp/>(See<sp/>accompanying</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/>file<sp/>LICENSE_1_0.txt<sp/>or<sp/>copy<sp/>at<sp/>http://www.boost.org/LICENSE_1_0.txt)</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_VERSION_MAJOR<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_VERSION_MINOR<sp/>13</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_VERSION_PATCH<sp/>7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>clang<sp/>system_header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>GCC<sp/>system_header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_suppress_warnings.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>ifdef<sp/>__ICC<sp/></highlight><highlight class="comment">//<sp/>icpc<sp/>defines<sp/>the<sp/>__clang__<sp/>macro</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pragma<sp/>warning(push)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pragma<sp/>warning(disable:<sp/>161<sp/>1682)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else<sp/></highlight><highlight class="comment">//<sp/>__ICC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pragma<sp/>clang<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wpadded&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wswitch-enum&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wcovered-switch-default&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Because<sp/>REQUIREs<sp/>trigger<sp/>GCC&apos;s<sp/>-Wparentheses,<sp/>and<sp/>because<sp/>still</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>supported<sp/>version<sp/>of<sp/>g++<sp/>have<sp/>only<sp/>buggy<sp/>support<sp/>for<sp/>_Pragmas,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wparentheses<sp/>have<sp/>to<sp/>be<sp/>suppressed<sp/>globally.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wparentheses&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>See<sp/>#674<sp/>for<sp/>details</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wunused-variable&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wpadded&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_suppress_warnings.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_MAIN)<sp/>||<sp/>defined(CATCH_CONFIG_RUNNER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CATCH_IMPL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CATCH_CONFIG_ALL_PARTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>impl<sp/>file,<sp/>we<sp/>want<sp/>to<sp/>have<sp/>access<sp/>to<sp/>all<sp/>parts<sp/>of<sp/>the<sp/>headers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Can<sp/>also<sp/>be<sp/>used<sp/>to<sp/>sanely<sp/>support<sp/>PCHs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_ALL_PARTS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CATCH_CONFIG_EXTERNAL_INTERFACES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(CATCH_CONFIG_DISABLE_MATCHERS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>undef<sp/>CATCH_CONFIG_DISABLE_MATCHERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>!defined(CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_CONFIG_IMPL_ONLY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_platform.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>e.g.:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://opensource.apple.com/source/CarbonHeaders/CarbonHeaders-18.1/TargetConditionals.h.auto.html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__APPLE__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;TargetConditionals.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>(defined(TARGET_OS_OSX)<sp/>&amp;&amp;<sp/>TARGET_OS_OSX<sp/>==<sp/>1)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(defined(TARGET_OS_MAC)<sp/>&amp;&amp;<sp/>TARGET_OS_MAC<sp/>==<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>CATCH_PLATFORM_MAC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>elif<sp/>(defined(TARGET_OS_IPHONE)<sp/>&amp;&amp;<sp/>TARGET_OS_IPHONE<sp/>==<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>CATCH_PLATFORM_IPHONE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(linux)<sp/>||<sp/>defined(__linux)<sp/>||<sp/>defined(__linux__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CATCH_PLATFORM_LINUX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(WIN32)<sp/>||<sp/>defined(__WIN32__)<sp/>||<sp/>defined(_WIN32)<sp/>||<sp/>defined(_MSC_VER)<sp/>||<sp/>defined(__MINGW32__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CATCH_PLATFORM_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_platform.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CATCH_IMPL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>ifndef<sp/>CLARA_CONFIG_MAIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>CLARA_CONFIG_MAIN_NOT_DEFINED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>CLARA_CONFIG_MAIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_user_interfaces.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rngSeed();</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_user_interfaces.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_tag_alias_autoregistrar.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_common.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_compiler_capabilities.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Detect<sp/>a<sp/>number<sp/>of<sp/>compiler<sp/>features<sp/>-<sp/>by<sp/>compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>features<sp/>are<sp/>defined:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_COUNTER<sp/>:<sp/>is<sp/>the<sp/>__COUNTER__<sp/>macro<sp/>supported?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_WINDOWS_SEH<sp/>:<sp/>is<sp/>Windows<sp/>SEH<sp/>supported?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_POSIX_SIGNALS<sp/>:<sp/>are<sp/>POSIX<sp/>signals<sp/>supported?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_DISABLE_EXCEPTIONS<sp/>:<sp/>Are<sp/>exceptions<sp/>enabled?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>****************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>to<sp/>maintainers:<sp/>if<sp/>new<sp/>toggles<sp/>are<sp/>added<sp/>please<sp/>document<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>configuration.md,<sp/>too</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>****************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>general<sp/>each<sp/>macro<sp/>has<sp/>a<sp/>_NO_&lt;feature<sp/>name&gt;<sp/>form</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(e.g.<sp/>CATCH_CONFIG_NO_POSIX_SIGNALS)<sp/>which<sp/>disables<sp/>the<sp/>feature.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Many<sp/>features,<sp/>at<sp/>point<sp/>of<sp/>detection,<sp/>define<sp/>an<sp/>_INTERNAL_<sp/>macro,<sp/>so<sp/>they</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>combined,<sp/>en-mass,<sp/>with<sp/>the<sp/>_NO_<sp/>forms<sp/>later.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>(__cplusplus<sp/>&gt;=<sp/>201402L)<sp/>||<sp/>(defined(_MSVC_LANG)<sp/>&amp;&amp;<sp/>_MSVC_LANG<sp/>&gt;=<sp/>201402L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>CATCH_CPP14_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>(__cplusplus<sp/>&gt;=<sp/>201703L)<sp/>||<sp/>(defined(_MSVC_LANG)<sp/>&amp;&amp;<sp/>_MSVC_LANG<sp/>&gt;=<sp/>201703L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>CATCH_CPP17_OR_GREATER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Only<sp/>GCC<sp/>compiler<sp/>should<sp/>be<sp/>used<sp/>in<sp/>this<sp/>block,<sp/>so<sp/>other<sp/>compilers<sp/>trying<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//<sp/>mask<sp/>themselves<sp/>as<sp/>GCC<sp/>should<sp/>be<sp/>ignored.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUC__)<sp/>&amp;&amp;<sp/>!defined(__clang__)<sp/>&amp;&amp;<sp/>!defined(__ICC)<sp/>&amp;&amp;<sp/>!defined(__CUDACC__)<sp/>&amp;&amp;<sp/>!defined(__LCC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>CATCH_INTERNAL_START_WARNINGS_SUPPRESSION<sp/>_Pragma(<sp/>&quot;GCC<sp/>diagnostic<sp/>push&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION<sp/><sp/>_Pragma(<sp/>&quot;GCC<sp/>diagnostic<sp/>pop&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>CATCH_INTERNAL_IGNORE_BUT_WARN(...)<sp/>(void)__builtin_constant_p(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>CATCH_INTERNAL_START_WARNINGS_SUPPRESSION<sp/>_Pragma(<sp/>&quot;clang<sp/>diagnostic<sp/>push&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION<sp/><sp/>_Pragma(<sp/>&quot;clang<sp/>diagnostic<sp/>pop&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">//<sp/>As<sp/>of<sp/>this<sp/>writing,<sp/>IBM<sp/>XL&apos;s<sp/>implementation<sp/>of<sp/>__builtin_constant_p<sp/>has<sp/>a<sp/>bug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>results<sp/>in<sp/>calls<sp/>to<sp/>destructors<sp/>being<sp/>emitted<sp/>for<sp/>each<sp/>temporary,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//<sp/>without<sp/>a<sp/>matching<sp/>initialization.<sp/>In<sp/>practice,<sp/>this<sp/>can<sp/>result<sp/>in<sp/>something</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//<sp/>like<sp/>`std::string::~string`<sp/>being<sp/>called<sp/>on<sp/>an<sp/>uninitialized<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>example,<sp/>this<sp/>code<sp/>will<sp/>likely<sp/>segfault<sp/>under<sp/>IBM<sp/>XL:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//<sp/>```</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">//<sp/>REQUIRE(std::string(&quot;12&quot;)<sp/>+<sp/>&quot;34&quot;<sp/>==<sp/>&quot;1234&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//<sp/>```</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Therefore,<sp/>`CATCH_INTERNAL_IGNORE_BUT_WARN`<sp/>is<sp/>not<sp/>implemented.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>!defined(__ibmxl__)<sp/>&amp;&amp;<sp/>!defined(__CUDACC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>CATCH_INTERNAL_IGNORE_BUT_WARN(...)<sp/>(void)__builtin_constant_p(__VA_ARGS__)<sp/></highlight><highlight class="comment">/*<sp/>NOLINT(cppcoreguidelines-pro-type-vararg,<sp/>hicpp-vararg)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS<sp/>\</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Pragma(<sp/>&quot;clang<sp/>diagnostic<sp/>ignored<sp/>\&quot;-Wexit-time-destructors\&quot;&quot;</highlight><highlight class="normal"><sp/>)<sp/>\</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Pragma(<sp/>&quot;clang<sp/>diagnostic<sp/>ignored<sp/>\&quot;-Wglobal-constructors\&quot;&quot;)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS<sp/>\</highlight></codeline>
<codeline lineno="173"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Pragma(<sp/>&quot;clang<sp/>diagnostic<sp/>ignored<sp/>\&quot;-Wparentheses\&quot;&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS<sp/>\</highlight></codeline>
<codeline lineno="176"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Pragma(<sp/>&quot;clang<sp/>diagnostic<sp/>ignored<sp/>\&quot;-Wunused-variable\&quot;&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS<sp/>\</highlight></codeline>
<codeline lineno="179"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Pragma(<sp/>&quot;clang<sp/>diagnostic<sp/>ignored<sp/>\&quot;-Wgnu-zero-variadic-macro-arguments\&quot;&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS<sp/>\</highlight></codeline>
<codeline lineno="182"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Pragma(<sp/>&quot;clang<sp/>diagnostic<sp/>ignored<sp/>\&quot;-Wunused-template\&quot;&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="comment">//<sp/>Assume<sp/>that<sp/>non-Windows<sp/>platforms<sp/>support<sp/>posix<sp/>signals<sp/>by<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_PLATFORM_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CATCH_INTERNAL_CONFIG_POSIX_SIGNALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="comment">//<sp/>We<sp/>know<sp/>some<sp/>environments<sp/>not<sp/>to<sp/>support<sp/>full<sp/>POSIX<sp/>signals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__CYGWIN__)<sp/>||<sp/>defined(__QNX__)<sp/>||<sp/>defined(__EMSCRIPTEN__)<sp/>||<sp/>defined(__DJGPP__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CATCH_INTERNAL_CONFIG_NO_POSIX_SIGNALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__OS400__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>CATCH_INTERNAL_CONFIG_NO_POSIX_SIGNALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>CATCH_CONFIG_COLOUR_NONE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="comment">//<sp/>Android<sp/>somehow<sp/>still<sp/>does<sp/>not<sp/>support<sp/>std::to_string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__ANDROID__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>CATCH_INTERNAL_CONFIG_NO_CPP11_TO_STRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>CATCH_INTERNAL_CONFIG_ANDROID_LOGWRITE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="comment">//<sp/>Not<sp/>all<sp/>Windows<sp/>environments<sp/>support<sp/>SEH<sp/>properly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__MINGW32__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>CATCH_INTERNAL_CONFIG_NO_WINDOWS_SEH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="comment">//<sp/>PS4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__ORBIS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>CATCH_INTERNAL_CONFIG_NO_NEW_CAPTURE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="comment">//<sp/>Cygwin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__CYGWIN__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Required<sp/>for<sp/>some<sp/>versions<sp/>of<sp/>Cygwin<sp/>to<sp/>declare<sp/>gettimeofday</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment">//<sp/>see:<sp/>http://stackoverflow.com/questions/36901803/gettimeofday-not-declared-in-this-scope-cygwin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>_BSD_SOURCE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment">//<sp/>some<sp/>versions<sp/>of<sp/>cygwin<sp/>(most)<sp/>do<sp/>not<sp/>support<sp/>std::to_string.<sp/>Use<sp/>the<sp/>libstd<sp/>check.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://gcc.gnu.org/onlinedocs/gcc-4.8.2/libstdc++/api/a01053_source.html<sp/>line<sp/>2812-2813</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>!((__cplusplus<sp/>&gt;=<sp/>201103L)<sp/>&amp;&amp;<sp/>defined(_GLIBCXX_USE_C99)<sp/>\</highlight></codeline>
<codeline lineno="232"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!defined(_GLIBCXX_HAVE_BROKEN_VSWPRINTF))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>CATCH_INTERNAL_CONFIG_NO_CPP11_TO_STRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>__CYGWIN__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="comment">//<sp/>Visual<sp/>C++</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CATCH_INTERNAL_START_WARNINGS_SUPPRESSION<sp/>__pragma(<sp/>warning(push)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION<sp/><sp/>__pragma(<sp/>warning(pop)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Universal<sp/>Windows<sp/>platform<sp/>does<sp/>not<sp/>support<sp/>SEH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Or<sp/>console<sp/>colours<sp/>(or<sp/>console<sp/>at<sp/>all...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(WINAPI_FAMILY)<sp/>&amp;&amp;<sp/>(WINAPI_FAMILY<sp/>==<sp/>WINAPI_FAMILY_APP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>CATCH_CONFIG_COLOUR_NONE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>CATCH_INTERNAL_CONFIG_WINDOWS_SEH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC<sp/>traditional<sp/>preprocessor<sp/>needs<sp/>some<sp/>workaround<sp/>for<sp/>__VA_ARGS__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">//<sp/>_MSVC_TRADITIONAL<sp/>==<sp/>0<sp/>means<sp/>new<sp/>conformant<sp/>preprocessor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">//<sp/>_MSVC_TRADITIONAL<sp/>==<sp/>1<sp/>means<sp/>old<sp/>traditional<sp/>non-conformant<sp/>preprocessor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>!defined(__clang__)<sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>Clang<sp/>masquerading<sp/>for<sp/>msvc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>if<sp/>!defined(_MSVC_TRADITIONAL)<sp/>||<sp/>(defined(_MSVC_TRADITIONAL)<sp/>&amp;&amp;<sp/>_MSVC_TRADITIONAL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>CATCH_INTERNAL_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>endif<sp/></highlight><highlight class="comment">//<sp/>MSVC_TRADITIONAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif<sp/></highlight><highlight class="comment">//<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_REENTRANT)<sp/>||<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Enable<sp/>async<sp/>processing,<sp/>as<sp/>-pthread<sp/>is<sp/>specified<sp/>or<sp/>no<sp/>additional<sp/>linking<sp/>is<sp/>required</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>CATCH_INTERNAL_CONFIG_USE_ASYNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="comment">//<sp/>Check<sp/>if<sp/>we<sp/>are<sp/>compiled<sp/>with<sp/>-fno-exceptions<sp/>or<sp/>equivalent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__EXCEPTIONS)<sp/>||<sp/>defined(__cpp_exceptions)<sp/>||<sp/>defined(_CPPUNWIND)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CATCH_INTERNAL_CONFIG_EXCEPTIONS_ENABLED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="comment">//<sp/>DJGPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__DJGPP__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CATCH_INTERNAL_CONFIG_NO_WCHAR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>__DJGPP__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="comment">//<sp/>Embarcadero<sp/>C++Build</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__BORLANDC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CATCH_INTERNAL_CONFIG_POLYFILL_ISNAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>of<sp/>__COUNTER__<sp/>is<sp/>suppressed<sp/>during<sp/>code<sp/>analysis<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CLion/AppCode<sp/>2017.2.x<sp/>and<sp/>former,<sp/>because<sp/>__COUNTER__<sp/>is<sp/>not<sp/>properly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="comment">//<sp/>handled<sp/>by<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Otherwise<sp/>all<sp/>supported<sp/>compilers<sp/>support<sp/>COUNTER<sp/>macro,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>user<sp/>still<sp/>might<sp/>want<sp/>to<sp/>turn<sp/>it<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>!defined(__JETBRAINS_IDE__)<sp/>||<sp/>__JETBRAINS_IDE__<sp/>&gt;=<sp/>20170300L<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CATCH_INTERNAL_CONFIG_COUNTER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RTX<sp/>is<sp/>a<sp/>special<sp/>version<sp/>of<sp/>Windows<sp/>that<sp/>is<sp/>real<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>means<sp/>that<sp/>it<sp/>is<sp/>detected<sp/>as<sp/>Windows,<sp/>but<sp/>does<sp/>not<sp/>provide</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>same<sp/>set<sp/>of<sp/>capabilities<sp/>as<sp/>real<sp/>Windows<sp/>does.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(UNDER_RTSS)<sp/>||<sp/>defined(RTX64_BUILD)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CATCH_INTERNAL_CONFIG_NO_WINDOWS_SEH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CATCH_INTERNAL_CONFIG_NO_ASYNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CATCH_CONFIG_COLOUR_NONE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(_GLIBCXX_USE_C99_MATH_TR1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_INTERNAL_CONFIG_GLOBAL_NEXTAFTER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Various<sp/>stdlib<sp/>support<sp/>checks<sp/>that<sp/>require<sp/>__has_include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__has_include)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>string_view<sp/>is<sp/>available<sp/>and<sp/>usable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>__has_include(&lt;string_view&gt;)<sp/>&amp;&amp;<sp/>defined(CATCH_CPP17_OR_GREATER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#<sp/><sp/><sp/><sp/>define<sp/>CATCH_INTERNAL_CONFIG_CPP17_STRING_VIEW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>optional<sp/>is<sp/>available<sp/>and<sp/>usable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#<sp/><sp/>if<sp/>__has_include(&lt;optional&gt;)<sp/>&amp;&amp;<sp/>defined(CATCH_CPP17_OR_GREATER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#<sp/><sp/><sp/><sp/>define<sp/>CATCH_INTERNAL_CONFIG_CPP17_OPTIONAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#<sp/><sp/>endif<sp/></highlight><highlight class="comment">//<sp/>__has_include(&lt;optional&gt;)<sp/>&amp;&amp;<sp/>defined(CATCH_CPP17_OR_GREATER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>byte<sp/>is<sp/>available<sp/>and<sp/>usable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#<sp/><sp/>if<sp/>__has_include(&lt;cstddef&gt;)<sp/>&amp;&amp;<sp/>defined(CATCH_CPP17_OR_GREATER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#<sp/><sp/><sp/><sp/>include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#<sp/><sp/><sp/><sp/>if<sp/>defined(__cpp_lib_byte)<sp/>&amp;&amp;<sp/>(__cpp_lib_byte<sp/>&gt;<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#<sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>CATCH_INTERNAL_CONFIG_CPP17_BYTE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#<sp/><sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#<sp/><sp/>endif<sp/></highlight><highlight class="comment">//<sp/>__has_include(&lt;cstddef&gt;)<sp/>&amp;&amp;<sp/>defined(CATCH_CPP17_OR_GREATER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>variant<sp/>is<sp/>available<sp/>and<sp/>usable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#<sp/><sp/>if<sp/>__has_include(&lt;variant&gt;)<sp/>&amp;&amp;<sp/>defined(CATCH_CPP17_OR_GREATER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#<sp/><sp/><sp/><sp/>if<sp/>defined(__clang__)<sp/>&amp;&amp;<sp/>(__clang_major__<sp/>&lt;<sp/>8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>work<sp/>around<sp/>clang<sp/>bug<sp/>with<sp/>libstdc++<sp/>https://bugs.llvm.org/show_bug.cgi?id=31852</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fix<sp/>should<sp/>be<sp/>in<sp/>clang<sp/>8,<sp/>workaround<sp/>in<sp/>libstdc++<sp/>8.2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#<sp/><sp/><sp/><sp/><sp/><sp/>include<sp/>&lt;ciso646&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#<sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>defined(__GLIBCXX__)<sp/>&amp;&amp;<sp/>defined(_GLIBCXX_RELEASE)<sp/>&amp;&amp;<sp/>(_GLIBCXX_RELEASE<sp/>&lt;<sp/>9)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>CATCH_CONFIG_NO_CPP17_VARIANT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#<sp/><sp/><sp/><sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>CATCH_INTERNAL_CONFIG_CPP17_VARIANT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#<sp/><sp/><sp/><sp/><sp/><sp/>endif<sp/></highlight><highlight class="comment">//<sp/>defined(__GLIBCXX__)<sp/>&amp;&amp;<sp/>defined(_GLIBCXX_RELEASE)<sp/>&amp;&amp;<sp/>(_GLIBCXX_RELEASE<sp/>&lt;<sp/>9)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#<sp/><sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#<sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>CATCH_INTERNAL_CONFIG_CPP17_VARIANT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#<sp/><sp/><sp/><sp/>endif<sp/></highlight><highlight class="comment">//<sp/>defined(__clang__)<sp/>&amp;&amp;<sp/>(__clang_major__<sp/>&lt;<sp/>8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#<sp/><sp/>endif<sp/></highlight><highlight class="comment">//<sp/>__has_include(&lt;variant&gt;)<sp/>&amp;&amp;<sp/>defined(CATCH_CPP17_OR_GREATER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(__has_include)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_INTERNAL_CONFIG_COUNTER)<sp/>&amp;&amp;<sp/>!defined(CATCH_CONFIG_NO_COUNTER)<sp/>&amp;&amp;<sp/>!defined(CATCH_CONFIG_COUNTER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>CATCH_CONFIG_COUNTER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_INTERNAL_CONFIG_WINDOWS_SEH)<sp/>&amp;&amp;<sp/>!defined(CATCH_CONFIG_NO_WINDOWS_SEH)<sp/>&amp;&amp;<sp/>!defined(CATCH_CONFIG_WINDOWS_SEH)<sp/>&amp;&amp;<sp/>!defined(CATCH_INTERNAL_CONFIG_NO_WINDOWS_SEH)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>CATCH_CONFIG_WINDOWS_SEH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>set<sp/>by<sp/>default,<sp/>because<sp/>we<sp/>assume<sp/>that<sp/>unix<sp/>compilers<sp/>are<sp/>posix-signal-compatible<sp/>by<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_INTERNAL_CONFIG_POSIX_SIGNALS)<sp/>&amp;&amp;<sp/>!defined(CATCH_INTERNAL_CONFIG_NO_POSIX_SIGNALS)<sp/>&amp;&amp;<sp/>!defined(CATCH_CONFIG_NO_POSIX_SIGNALS)<sp/>&amp;&amp;<sp/>!defined(CATCH_CONFIG_POSIX_SIGNALS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>CATCH_CONFIG_POSIX_SIGNALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>set<sp/>by<sp/>default,<sp/>because<sp/>we<sp/>assume<sp/>that<sp/>compilers<sp/>with<sp/>no<sp/>wchar_t<sp/>support<sp/>are<sp/>just<sp/>rare<sp/>exceptions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_INTERNAL_CONFIG_NO_WCHAR)<sp/>&amp;&amp;<sp/>!defined(CATCH_CONFIG_NO_WCHAR)<sp/>&amp;&amp;<sp/>!defined(CATCH_CONFIG_WCHAR)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>CATCH_CONFIG_WCHAR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_INTERNAL_CONFIG_NO_CPP11_TO_STRING)<sp/>&amp;&amp;<sp/>!defined(CATCH_CONFIG_NO_CPP11_TO_STRING)<sp/>&amp;&amp;<sp/>!defined(CATCH_CONFIG_CPP11_TO_STRING)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>CATCH_CONFIG_CPP11_TO_STRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_INTERNAL_CONFIG_CPP17_OPTIONAL)<sp/>&amp;&amp;<sp/>!defined(CATCH_CONFIG_NO_CPP17_OPTIONAL)<sp/>&amp;&amp;<sp/>!defined(CATCH_CONFIG_CPP17_OPTIONAL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CATCH_CONFIG_CPP17_OPTIONAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_INTERNAL_CONFIG_CPP17_STRING_VIEW)<sp/>&amp;&amp;<sp/>!defined(CATCH_CONFIG_NO_CPP17_STRING_VIEW)<sp/>&amp;&amp;<sp/>!defined(CATCH_CONFIG_CPP17_STRING_VIEW)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CATCH_CONFIG_CPP17_STRING_VIEW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_INTERNAL_CONFIG_CPP17_VARIANT)<sp/>&amp;&amp;<sp/>!defined(CATCH_CONFIG_NO_CPP17_VARIANT)<sp/>&amp;&amp;<sp/>!defined(CATCH_CONFIG_CPP17_VARIANT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CATCH_CONFIG_CPP17_VARIANT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_INTERNAL_CONFIG_CPP17_BYTE)<sp/>&amp;&amp;<sp/>!defined(CATCH_CONFIG_NO_CPP17_BYTE)<sp/>&amp;&amp;<sp/>!defined(CATCH_CONFIG_CPP17_BYTE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CATCH_CONFIG_CPP17_BYTE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_EXPERIMENTAL_REDIRECT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CATCH_INTERNAL_CONFIG_NEW_CAPTURE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_INTERNAL_CONFIG_NEW_CAPTURE)<sp/>&amp;&amp;<sp/>!defined(CATCH_INTERNAL_CONFIG_NO_NEW_CAPTURE)<sp/>&amp;&amp;<sp/>!defined(CATCH_CONFIG_NO_NEW_CAPTURE)<sp/>&amp;&amp;<sp/>!defined(CATCH_CONFIG_NEW_CAPTURE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CATCH_CONFIG_NEW_CAPTURE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_INTERNAL_CONFIG_EXCEPTIONS_ENABLED)<sp/>&amp;&amp;<sp/>!defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CATCH_CONFIG_DISABLE_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_INTERNAL_CONFIG_POLYFILL_ISNAN)<sp/>&amp;&amp;<sp/>!defined(CATCH_CONFIG_NO_POLYFILL_ISNAN)<sp/>&amp;&amp;<sp/>!defined(CATCH_CONFIG_POLYFILL_ISNAN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CATCH_CONFIG_POLYFILL_ISNAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_INTERNAL_CONFIG_USE_ASYNC)<sp/><sp/>&amp;&amp;<sp/>!defined(CATCH_INTERNAL_CONFIG_NO_ASYNC)<sp/>&amp;&amp;<sp/>!defined(CATCH_CONFIG_NO_USE_ASYNC)<sp/>&amp;&amp;<sp/>!defined(CATCH_CONFIG_USE_ASYNC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CATCH_CONFIG_USE_ASYNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_INTERNAL_CONFIG_ANDROID_LOGWRITE)<sp/>&amp;&amp;<sp/>!defined(CATCH_CONFIG_NO_ANDROID_LOGWRITE)<sp/>&amp;&amp;<sp/>!defined(CATCH_CONFIG_ANDROID_LOGWRITE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CATCH_CONFIG_ANDROID_LOGWRITE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_INTERNAL_CONFIG_GLOBAL_NEXTAFTER)<sp/>&amp;&amp;<sp/>!defined(CATCH_CONFIG_NO_GLOBAL_NEXTAFTER)<sp/>&amp;&amp;<sp/>!defined(CATCH_CONFIG_GLOBAL_NEXTAFTER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CATCH_CONFIG_GLOBAL_NEXTAFTER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Even<sp/>if<sp/>we<sp/>do<sp/>not<sp/>think<sp/>the<sp/>compiler<sp/>has<sp/>that<sp/>warning,<sp/>we<sp/>still<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>provide<sp/>a<sp/>macro<sp/>that<sp/>can<sp/>be<sp/>used<sp/>by<sp/>the<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_INTERNAL_START_WARNINGS_SUPPRESSION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>CATCH_INTERNAL_START_WARNINGS_SUPPRESSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>goal<sp/>of<sp/>this<sp/>macro<sp/>is<sp/>to<sp/>avoid<sp/>evaluation<sp/>of<sp/>the<sp/>arguments,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="comment">//<sp/>still<sp/>have<sp/>the<sp/>compiler<sp/>warn<sp/>on<sp/>problems<sp/>inside...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_INTERNAL_IGNORE_BUT_WARN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>CATCH_INTERNAL_IGNORE_BUT_WARN(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__APPLE__)<sp/>&amp;&amp;<sp/>defined(__apple_build_version__)<sp/>&amp;&amp;<sp/>(__clang_major__<sp/>&lt;<sp/>10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>undef<sp/>CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__clang__)<sp/>&amp;&amp;<sp/>(__clang_major__<sp/>&lt;<sp/>5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>undef<sp/>CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TRY<sp/>if<sp/>((true))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CATCH_ALL<sp/>if<sp/>((false))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CATCH_ANON(type)<sp/>if<sp/>((false))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TRY<sp/>try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CATCH_ALL<sp/>catch<sp/>(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CATCH_ANON(type)<sp/>catch<sp/>(type)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_INTERNAL_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR)<sp/>&amp;&amp;<sp/>!defined(CATCH_CONFIG_NO_TRADITIONAL_MSVC_PREPROCESSOR)<sp/>&amp;&amp;<sp/>!defined(CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_compiler_capabilities.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_UNIQUE_NAME_LINE2(<sp/>name,<sp/>line<sp/>)<sp/>name##line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_UNIQUE_NAME_LINE(<sp/>name,<sp/>line<sp/>)<sp/>INTERNAL_CATCH_UNIQUE_NAME_LINE2(<sp/>name,<sp/>line<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CATCH_CONFIG_COUNTER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>name<sp/>)<sp/>INTERNAL_CATCH_UNIQUE_NAME_LINE(<sp/>name,<sp/>__COUNTER__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>name<sp/>)<sp/>INTERNAL_CATCH_UNIQUE_NAME_LINE(<sp/>name,<sp/>__LINE__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iosfwd&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>a<sp/>dummy<sp/>global<sp/>operator&lt;&lt;<sp/>so<sp/>we<sp/>can<sp/>bring<sp/>it<sp/>into<sp/>Catch<sp/>namespace<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479" refid="struct_catch__global__namespace__dummy" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch__global__namespace__dummy" kindref="compound">Catch_global_namespace_dummy</ref><sp/>{};</highlight></codeline>
<codeline lineno="480"><highlight class="normal">std::ostream&amp;<sp/>operator&lt;&lt;(std::ostream&amp;,<sp/><ref refid="struct_catch__global__namespace__dummy" kindref="compound">Catch_global_namespace_dummy</ref>);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484" refid="struct_catch_1_1_case_sensitive" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_case_sensitive" kindref="compound">CaseSensitive</ref><sp/>{<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>Choice<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Yes,</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>No</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>};<sp/>};</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489" refid="class_catch_1_1_non_copyable" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_non_copyable" kindref="compound">NonCopyable</ref><sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_non_copyable" kindref="compound">NonCopyable</ref>(<sp/><ref refid="class_catch_1_1_non_copyable" kindref="compound">NonCopyable</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_non_copyable" kindref="compound">NonCopyable</ref>(<sp/><ref refid="class_catch_1_1_non_copyable" kindref="compound">NonCopyable</ref><sp/>&amp;&amp;<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_non_copyable" kindref="compound">NonCopyable</ref>&amp;<sp/>operator<sp/>=<sp/>(<sp/><ref refid="class_catch_1_1_non_copyable" kindref="compound">NonCopyable</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_non_copyable" kindref="compound">NonCopyable</ref>&amp;<sp/>operator<sp/>=<sp/>(<sp/><ref refid="class_catch_1_1_non_copyable" kindref="compound">NonCopyable</ref><sp/>&amp;&amp;<sp/>)<sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_non_copyable" kindref="compound">NonCopyable</ref>();</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="class_catch_1_1_non_copyable" kindref="compound">~NonCopyable</ref>();</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500" refid="struct_catch_1_1_source_line_info" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_source_line_info" kindref="compound">SourceLineInfo</ref><sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_source_line_info" kindref="compound">SourceLineInfo</ref>()<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_source_line_info" kindref="compound">SourceLineInfo</ref>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>_file,<sp/>std::size_t<sp/>_line<sp/>)<sp/>noexcept</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>file(<sp/>_file<sp/>),</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line(<sp/>_line<sp/>)</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_source_line_info" kindref="compound">SourceLineInfo</ref>(<sp/><ref refid="struct_catch_1_1_source_line_info" kindref="compound">SourceLineInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_source_line_info" kindref="compound">SourceLineInfo</ref>&amp;<sp/>operator<sp/>=<sp/>(<sp/><ref refid="struct_catch_1_1_source_line_info" kindref="compound">SourceLineInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_source_line_info" kindref="compound">SourceLineInfo</ref>(<sp/><ref refid="struct_catch_1_1_source_line_info" kindref="compound">SourceLineInfo</ref>&amp;&amp;<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_source_line_info" kindref="compound">SourceLineInfo</ref>&amp;<sp/>operator<sp/>=<sp/>(<sp/><ref refid="struct_catch_1_1_source_line_info" kindref="compound">SourceLineInfo</ref>&amp;&amp;<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>empty()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>file[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>==<sp/>(<sp/><ref refid="struct_catch_1_1_source_line_info" kindref="compound">SourceLineInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>&lt;<sp/>(<sp/><ref refid="struct_catch_1_1_source_line_info" kindref="compound">SourceLineInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>file;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>line;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/>operator<sp/>&lt;&lt;<sp/>(<sp/>std::ostream&amp;<sp/>os,<sp/><ref refid="struct_catch_1_1_source_line_info" kindref="compound">SourceLineInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bring<sp/>in<sp/>operator&lt;&lt;<sp/>from<sp/>global<sp/>namespace<sp/>into<sp/>Catch<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>necessary<sp/>because<sp/>the<sp/>overload<sp/>of<sp/>operator&lt;&lt;<sp/>above<sp/>makes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lookup<sp/>stop<sp/>at<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>using<sp/>::operator&lt;&lt;;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>this<sp/>in<sp/>variadic<sp/>streaming<sp/>macros<sp/>to<sp/>allow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>&gt;&gt;<sp/>+StreamEndStop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>well<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>&gt;&gt;<sp/>stuff<sp/>+StreamEndStop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532" refid="struct_catch_1_1_stream_end_stop" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_stream_end_stop" kindref="compound">StreamEndStop</ref><sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>operator+()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>operator<sp/>+<sp/>(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="classvalue" kindref="compound">value</ref>,<sp/><ref refid="struct_catch_1_1_stream_end_stop" kindref="compound">StreamEndStop</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_INTERNAL_LINEINFO<sp/>\</highlight></codeline>
<codeline lineno="542"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>::Catch::SourceLineInfo(<sp/>__FILE__,<sp/>static_cast&lt;std::size_t&gt;(<sp/>__LINE__<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_common.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547" refid="struct_catch_1_1_registrar_for_tag_aliases" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_registrar_for_tag_aliases" kindref="compound">RegistrarForTagAliases</ref><sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_registrar_for_tag_aliases" kindref="compound">RegistrarForTagAliases</ref>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>alias,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>tag,<sp/><ref refid="struct_catch_1_1_source_line_info" kindref="compound">SourceLineInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lineInfo<sp/>);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REGISTER_TAG_ALIAS(<sp/>alias,<sp/>spec<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="554"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CATCH_INTERNAL_START_WARNINGS_SUPPRESSION<sp/>\</highlight></codeline>
<codeline lineno="555"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS<sp/>\</highlight></codeline>
<codeline lineno="556"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>namespace{<sp/>Catch::RegistrarForTagAliases<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>AutoRegisterTagAlias<sp/>)(<sp/>alias,<sp/>spec,<sp/>CATCH_INTERNAL_LINEINFO<sp/>);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="557"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_tag_alias_autoregistrar.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_test_registry.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_interfaces_testcase.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TestSpec;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570" refid="struct_catch_1_1_i_test_invoker" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_i_test_invoker" kindref="compound">ITestInvoker</ref><sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>invoke<sp/>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_i_test_invoker" kindref="compound">~ITestInvoker</ref>();</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_test_case" kindref="compound">TestCase</ref>;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_i_config" kindref="compound">IConfig</ref>;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578" refid="struct_catch_1_1_i_test_case_registry" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_i_test_case_registry" kindref="compound">ITestCaseRegistry</ref><sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_i_test_case_registry" kindref="compound">~ITestCaseRegistry</ref>();</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::vector&lt;TestCase&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>getAllTests()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::vector&lt;TestCase&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>getAllTestsSorted(<sp/><ref refid="struct_catch_1_1_i_config" kindref="compound">IConfig</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isThrowSafe(<sp/><ref refid="class_catch_1_1_test_case" kindref="compound">TestCase</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCase,<sp/><ref refid="struct_catch_1_1_i_config" kindref="compound">IConfig</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config<sp/>);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>matchTest(<sp/><ref refid="class_catch_1_1_test_case" kindref="compound">TestCase</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCase,<sp/>TestSpec<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testSpec,<sp/><ref refid="struct_catch_1_1_i_config" kindref="compound">IConfig</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config<sp/>);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;TestCase&gt;<sp/>filterTests(<sp/>std::vector&lt;TestCase&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCases,<sp/>TestSpec<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testSpec,<sp/><ref refid="struct_catch_1_1_i_config" kindref="compound">IConfig</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config<sp/>);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;TestCase&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>getAllTestCasesSorted(<sp/><ref refid="struct_catch_1_1_i_config" kindref="compound">IConfig</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config<sp/>);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal">}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_interfaces_testcase.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_stringref.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iosfwd&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="604" refid="class_catch_1_1_string_ref" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>size_type<sp/>=<sp/>std::size_t;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>const_iterator<sp/>=<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>s_empty<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>m_start<sp/>=<sp/>s_empty;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_type<sp/>m_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>construction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref>()<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>rawChars<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>rawChars,<sp/>size_type<sp/>size<sp/>)<sp/>noexcept</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>m_start(<sp/>rawChars<sp/>),</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_size(<sp/>size<sp/>)</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref>(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>stdString<sp/>)<sp/>noexcept</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>m_start(<sp/>stdString.c_str()<sp/>),</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_size(<sp/>stdString.size()<sp/>)</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>std::string()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(m_start,<sp/>m_size);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>==<sp/>(<sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>-&gt;<sp/>bool;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>!=<sp/>(<ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>other);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator[]<sp/>(<sp/>size_type<sp/>index<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(index<sp/>&lt;<sp/>m_size);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_start[index];</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>named<sp/>queries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>empty()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_size<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>-&gt;<sp/>size_type<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_size;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>current<sp/>start<sp/>pointer.<sp/>If<sp/>the<sp/>StringRef<sp/>is<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>null-terminated,<sp/>throws<sp/>std::domain_exception</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c_str()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>substrings<sp/>and<sp/>searches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>substring<sp/>of<sp/>[start,<sp/>start<sp/>+<sp/>length).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>start<sp/>+<sp/>length<sp/>&gt;<sp/>size(),<sp/>then<sp/>the<sp/>substring<sp/>is<sp/>[start,<sp/>size()).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>start<sp/>&gt;<sp/>size(),<sp/>then<sp/>the<sp/>substring<sp/>is<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>substr(<sp/>size_type<sp/>start,<sp/>size_type<sp/>length<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref>;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>current<sp/>start<sp/>pointer.<sp/>May<sp/>not<sp/>be<sp/>null-terminated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>data()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>isNullTerminated()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_start[m_size]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>iterators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>const_iterator<sp/>begin()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_start;<sp/>}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>const_iterator<sp/>end()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_start<sp/>+<sp/>m_size;<sp/>}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>+=<sp/>(<sp/>std::string&amp;<sp/>lhs,<sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>sr<sp/>)<sp/>-&gt;<sp/>std::string&amp;;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>&lt;&lt;<sp/>(<sp/>std::ostream&amp;<sp/>os,<sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>sr<sp/>)<sp/>-&gt;<sp/>std::ostream&amp;;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>_sr(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>rawChars,<sp/>std::size_t<sp/>size<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/>{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref>(<sp/>rawChars,<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="681"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>_catch_sr(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>rawChars,<sp/>std::size_t<sp/>size<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">Catch::StringRef</ref><sp/>{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">Catch::StringRef</ref>(<sp/>rawChars,<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="685"><highlight class="normal">}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_stringref.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_preprocessor.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_RECURSION_LEVEL0(...)<sp/>__VA_ARGS__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_RECURSION_LEVEL1(...)<sp/>CATCH_RECURSION_LEVEL0(CATCH_RECURSION_LEVEL0(CATCH_RECURSION_LEVEL0(__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_RECURSION_LEVEL2(...)<sp/>CATCH_RECURSION_LEVEL1(CATCH_RECURSION_LEVEL1(CATCH_RECURSION_LEVEL1(__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_RECURSION_LEVEL3(...)<sp/>CATCH_RECURSION_LEVEL2(CATCH_RECURSION_LEVEL2(CATCH_RECURSION_LEVEL2(__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_RECURSION_LEVEL4(...)<sp/>CATCH_RECURSION_LEVEL3(CATCH_RECURSION_LEVEL3(CATCH_RECURSION_LEVEL3(__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_RECURSION_LEVEL5(...)<sp/>CATCH_RECURSION_LEVEL4(CATCH_RECURSION_LEVEL4(CATCH_RECURSION_LEVEL4(__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_EXPAND_VARGS(...)<sp/>__VA_ARGS__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC<sp/>needs<sp/>more<sp/>evaluations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_RECURSION_LEVEL6(...)<sp/>CATCH_RECURSION_LEVEL5(CATCH_RECURSION_LEVEL5(CATCH_RECURSION_LEVEL5(__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_RECURSE(...)<sp/><sp/>CATCH_RECURSION_LEVEL6(CATCH_RECURSION_LEVEL6(__VA_ARGS__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_RECURSE(...)<sp/><sp/>CATCH_RECURSION_LEVEL5(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REC_END(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REC_OUT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_EMPTY()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_DEFER(id)<sp/>id<sp/>CATCH_EMPTY()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REC_GET_END2()<sp/>0,<sp/>CATCH_REC_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REC_GET_END1(...)<sp/>CATCH_REC_GET_END2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REC_GET_END(...)<sp/>CATCH_REC_GET_END1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REC_NEXT0(test,<sp/>next,<sp/>...)<sp/>next<sp/>CATCH_REC_OUT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REC_NEXT1(test,<sp/>next)<sp/>CATCH_DEFER<sp/>(<sp/>CATCH_REC_NEXT0<sp/>)<sp/>(<sp/>test,<sp/>next,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REC_NEXT(test,<sp/>next)<sp/><sp/>CATCH_REC_NEXT1(CATCH_REC_GET_END<sp/>test,<sp/>next)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REC_LIST0(f,<sp/>x,<sp/>peek,<sp/>...)<sp/>,<sp/>f(x)<sp/>CATCH_DEFER<sp/>(<sp/>CATCH_REC_NEXT(peek,<sp/>CATCH_REC_LIST1)<sp/>)<sp/>(<sp/>f,<sp/>peek,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REC_LIST1(f,<sp/>x,<sp/>peek,<sp/>...)<sp/>,<sp/>f(x)<sp/>CATCH_DEFER<sp/>(<sp/>CATCH_REC_NEXT(peek,<sp/>CATCH_REC_LIST0)<sp/>)<sp/>(<sp/>f,<sp/>peek,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REC_LIST2(f,<sp/>x,<sp/>peek,<sp/>...)<sp/><sp/><sp/>f(x)<sp/>CATCH_DEFER<sp/>(<sp/>CATCH_REC_NEXT(peek,<sp/>CATCH_REC_LIST1)<sp/>)<sp/>(<sp/>f,<sp/>peek,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REC_LIST0_UD(f,<sp/>userdata,<sp/>x,<sp/>peek,<sp/>...)<sp/>,<sp/>f(userdata,<sp/>x)<sp/>CATCH_DEFER<sp/>(<sp/>CATCH_REC_NEXT(peek,<sp/>CATCH_REC_LIST1_UD)<sp/>)<sp/>(<sp/>f,<sp/>userdata,<sp/>peek,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REC_LIST1_UD(f,<sp/>userdata,<sp/>x,<sp/>peek,<sp/>...)<sp/>,<sp/>f(userdata,<sp/>x)<sp/>CATCH_DEFER<sp/>(<sp/>CATCH_REC_NEXT(peek,<sp/>CATCH_REC_LIST0_UD)<sp/>)<sp/>(<sp/>f,<sp/>userdata,<sp/>peek,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REC_LIST2_UD(f,<sp/>userdata,<sp/>x,<sp/>peek,<sp/>...)<sp/><sp/><sp/>f(userdata,<sp/>x)<sp/>CATCH_DEFER<sp/>(<sp/>CATCH_REC_NEXT(peek,<sp/>CATCH_REC_LIST1_UD)<sp/>)<sp/>(<sp/>f,<sp/>userdata,<sp/>peek,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Applies<sp/>the<sp/>function<sp/>macro<sp/>`f`<sp/>to<sp/>each<sp/>of<sp/>the<sp/>remaining<sp/>parameters,<sp/>inserts<sp/>commas<sp/>between<sp/>the<sp/>results,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>passes<sp/>userdata<sp/>as<sp/>the<sp/>first<sp/>parameter<sp/>to<sp/>each<sp/>invocation,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight><highlight class="comment">//<sp/>e.g.<sp/>CATCH_REC_LIST_UD(f,<sp/>x,<sp/>a,<sp/>b,<sp/>c)<sp/>evaluates<sp/>to<sp/>f(x,<sp/>a),<sp/>f(x,<sp/>b),<sp/>f(x,<sp/>c)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REC_LIST_UD(f,<sp/>userdata,<sp/>...)<sp/>CATCH_RECURSE(CATCH_REC_LIST2_UD(f,<sp/>userdata,<sp/>__VA_ARGS__,<sp/>()()(),<sp/>()()(),<sp/>()()(),<sp/>0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REC_LIST(f,<sp/>...)<sp/>CATCH_RECURSE(CATCH_REC_LIST2(f,<sp/>__VA_ARGS__,<sp/>()()(),<sp/>()()(),<sp/>()()(),<sp/>0))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_EXPAND1(param)<sp/>INTERNAL_CATCH_EXPAND2(param)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_EXPAND2(...)<sp/>INTERNAL_CATCH_NO##<sp/>__VA_ARGS__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_DEF(...)<sp/>INTERNAL_CATCH_DEF<sp/>__VA_ARGS__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_NOINTERNAL_CATCH_DEF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_STRINGIZE(...)<sp/>INTERNAL_CATCH_STRINGIZE2(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_STRINGIZE2(...)<sp/>#__VA_ARGS__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS(param)<sp/>INTERNAL_CATCH_STRINGIZE(INTERNAL_CATCH_REMOVE_PARENS(param))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MSVC<sp/>is<sp/>adding<sp/>extra<sp/>space<sp/>and<sp/>needs<sp/>another<sp/>indirection<sp/>to<sp/>expand<sp/>INTERNAL_CATCH_NOINTERNAL_CATCH_DEF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_STRINGIZE2(...)<sp/>INTERNAL_CATCH_STRINGIZE3(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_STRINGIZE3(...)<sp/>#__VA_ARGS__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS(param)<sp/>(INTERNAL_CATCH_STRINGIZE(INTERNAL_CATCH_REMOVE_PARENS(param))<sp/>+<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_MAKE_NAMESPACE2(...)<sp/>ns_##__VA_ARGS__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_MAKE_NAMESPACE(name)<sp/>INTERNAL_CATCH_MAKE_NAMESPACE2(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_REMOVE_PARENS(...)<sp/>INTERNAL_CATCH_EXPAND1(INTERNAL_CATCH_DEF<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_MAKE_TYPE_LIST2(...)<sp/>decltype(get_wrapper&lt;INTERNAL_CATCH_REMOVE_PARENS_GEN(__VA_ARGS__)&gt;())</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_MAKE_TYPE_LIST(...)<sp/>INTERNAL_CATCH_MAKE_TYPE_LIST2(INTERNAL_CATCH_REMOVE_PARENS(__VA_ARGS__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_MAKE_TYPE_LIST2(...)<sp/>INTERNAL_CATCH_EXPAND_VARGS(decltype(get_wrapper&lt;INTERNAL_CATCH_REMOVE_PARENS_GEN(__VA_ARGS__)&gt;()))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_MAKE_TYPE_LIST(...)<sp/>INTERNAL_CATCH_EXPAND_VARGS(INTERNAL_CATCH_MAKE_TYPE_LIST2(INTERNAL_CATCH_REMOVE_PARENS(__VA_ARGS__)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES(...)\</highlight></codeline>
<codeline lineno="764"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CATCH_REC_LIST(INTERNAL_CATCH_MAKE_TYPE_LIST,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_REMOVE_PARENS_1_ARG(_0)<sp/>INTERNAL_CATCH_REMOVE_PARENS(_0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_REMOVE_PARENS_2_ARG(_0,<sp/>_1)<sp/>INTERNAL_CATCH_REMOVE_PARENS(_0),<sp/>INTERNAL_CATCH_REMOVE_PARENS_1_ARG(_1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_REMOVE_PARENS_3_ARG(_0,<sp/>_1,<sp/>_2)<sp/>INTERNAL_CATCH_REMOVE_PARENS(_0),<sp/>INTERNAL_CATCH_REMOVE_PARENS_2_ARG(_1,<sp/>_2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_REMOVE_PARENS_4_ARG(_0,<sp/>_1,<sp/>_2,<sp/>_3)<sp/>INTERNAL_CATCH_REMOVE_PARENS(_0),<sp/>INTERNAL_CATCH_REMOVE_PARENS_3_ARG(_1,<sp/>_2,<sp/>_3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_REMOVE_PARENS_5_ARG(_0,<sp/>_1,<sp/>_2,<sp/>_3,<sp/>_4)<sp/>INTERNAL_CATCH_REMOVE_PARENS(_0),<sp/>INTERNAL_CATCH_REMOVE_PARENS_4_ARG(_1,<sp/>_2,<sp/>_3,<sp/>_4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_REMOVE_PARENS_6_ARG(_0,<sp/>_1,<sp/>_2,<sp/>_3,<sp/>_4,<sp/>_5)<sp/>INTERNAL_CATCH_REMOVE_PARENS(_0),<sp/>INTERNAL_CATCH_REMOVE_PARENS_5_ARG(_1,<sp/>_2,<sp/>_3,<sp/>_4,<sp/>_5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_REMOVE_PARENS_7_ARG(_0,<sp/>_1,<sp/>_2,<sp/>_3,<sp/>_4,<sp/>_5,<sp/>_6)<sp/>INTERNAL_CATCH_REMOVE_PARENS(_0),<sp/>INTERNAL_CATCH_REMOVE_PARENS_6_ARG(_1,<sp/>_2,<sp/>_3,<sp/>_4,<sp/>_5,<sp/>_6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_REMOVE_PARENS_8_ARG(_0,<sp/>_1,<sp/>_2,<sp/>_3,<sp/>_4,<sp/>_5,<sp/>_6,<sp/>_7)<sp/>INTERNAL_CATCH_REMOVE_PARENS(_0),<sp/>INTERNAL_CATCH_REMOVE_PARENS_7_ARG(_1,<sp/>_2,<sp/>_3,<sp/>_4,<sp/>_5,<sp/>_6,<sp/>_7)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_REMOVE_PARENS_9_ARG(_0,<sp/>_1,<sp/>_2,<sp/>_3,<sp/>_4,<sp/>_5,<sp/>_6,<sp/>_7,<sp/>_8)<sp/>INTERNAL_CATCH_REMOVE_PARENS(_0),<sp/>INTERNAL_CATCH_REMOVE_PARENS_8_ARG(_1,<sp/>_2,<sp/>_3,<sp/>_4,<sp/>_5,<sp/>_6,<sp/>_7,<sp/>_8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_REMOVE_PARENS_10_ARG(_0,<sp/>_1,<sp/>_2,<sp/>_3,<sp/>_4,<sp/>_5,<sp/>_6,<sp/>_7,<sp/>_8,<sp/>_9)<sp/>INTERNAL_CATCH_REMOVE_PARENS(_0),<sp/>INTERNAL_CATCH_REMOVE_PARENS_9_ARG(_1,<sp/>_2,<sp/>_3,<sp/>_4,<sp/>_5,<sp/>_6,<sp/>_7,<sp/>_8,<sp/>_9)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_REMOVE_PARENS_11_ARG(_0,<sp/>_1,<sp/>_2,<sp/>_3,<sp/>_4,<sp/>_5,<sp/>_6,<sp/>_7,<sp/>_8,<sp/>_9,<sp/>_10)<sp/>INTERNAL_CATCH_REMOVE_PARENS(_0),<sp/>INTERNAL_CATCH_REMOVE_PARENS_10_ARG(_1,<sp/>_2,<sp/>_3,<sp/>_4,<sp/>_5,<sp/>_6,<sp/>_7,<sp/>_8,<sp/>_9,<sp/>_10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_VA_NARGS_IMPL(_0,<sp/>_1,<sp/>_2,<sp/>_3,<sp/>_4,<sp/>_5,<sp/>_6,<sp/>_7,<sp/>_8,<sp/>_9,<sp/>_10,<sp/>N,<sp/>...)<sp/>N</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_TYPE_GEN\</highlight></codeline>
<codeline lineno="781"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;typename...&gt;<sp/>struct<sp/>TypeList<sp/>{};\</highlight></codeline>
<codeline lineno="782"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;typename...Ts&gt;\</highlight></codeline>
<codeline lineno="783"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>get_wrapper()<sp/>noexcept<sp/>-&gt;<sp/>TypeList&lt;Ts...&gt;<sp/>{<sp/>return<sp/>{};<sp/>}\</highlight></codeline>
<codeline lineno="784"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;template&lt;typename...&gt;<sp/>class...&gt;<sp/>struct<sp/>TemplateTypeList{};\</highlight></codeline>
<codeline lineno="785"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;template&lt;typename...&gt;<sp/>class...Cs&gt;\</highlight></codeline>
<codeline lineno="786"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>get_wrapper()<sp/>noexcept<sp/>-&gt;<sp/>TemplateTypeList&lt;Cs...&gt;<sp/>{<sp/>return<sp/>{};<sp/>}\</highlight></codeline>
<codeline lineno="787"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;typename...&gt;\</highlight></codeline>
<codeline lineno="788"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>append;\</highlight></codeline>
<codeline lineno="789"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;typename...&gt;\</highlight></codeline>
<codeline lineno="790"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>rewrap;\</highlight></codeline>
<codeline lineno="791"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;template&lt;typename...&gt;<sp/>class,<sp/>typename...&gt;\</highlight></codeline>
<codeline lineno="792"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>create;\</highlight></codeline>
<codeline lineno="793"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;template&lt;typename...&gt;<sp/>class,<sp/>typename&gt;\</highlight></codeline>
<codeline lineno="794"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>convert;\</highlight></codeline>
<codeline lineno="795"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="796"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>T&gt;<sp/>\</highlight></codeline>
<codeline lineno="797"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>append&lt;T&gt;<sp/>{<sp/>using<sp/>type<sp/>=<sp/>T;<sp/>};\</highlight></codeline>
<codeline lineno="798"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;<sp/>template&lt;typename...&gt;<sp/>class<sp/>L1,<sp/>typename...E1,<sp/>template&lt;typename...&gt;<sp/>class<sp/>L2,<sp/>typename...E2,<sp/>typename...Rest&gt;\</highlight></codeline>
<codeline lineno="799"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>append&lt;L1&lt;E1...&gt;,<sp/>L2&lt;E2...&gt;,<sp/>Rest...&gt;<sp/>{<sp/>using<sp/>type<sp/>=<sp/>typename<sp/>append&lt;L1&lt;E1...,E2...&gt;,<sp/>Rest...&gt;::type;<sp/>};\</highlight></codeline>
<codeline lineno="800"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;<sp/>template&lt;typename...&gt;<sp/>class<sp/>L1,<sp/>typename...E1,<sp/>typename...Rest&gt;\</highlight></codeline>
<codeline lineno="801"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>append&lt;L1&lt;E1...&gt;,<sp/>TypeList&lt;mpl_::na&gt;,<sp/>Rest...&gt;<sp/>{<sp/>using<sp/>type<sp/>=<sp/>L1&lt;E1...&gt;;<sp/>};\</highlight></codeline>
<codeline lineno="802"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="803"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;<sp/>template&lt;typename...&gt;<sp/>class<sp/>Container,<sp/>template&lt;typename...&gt;<sp/>class<sp/>List,<sp/>typename...elems&gt;\</highlight></codeline>
<codeline lineno="804"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>rewrap&lt;TemplateTypeList&lt;Container&gt;,<sp/>List&lt;elems...&gt;&gt;<sp/>{<sp/>using<sp/>type<sp/>=<sp/>TypeList&lt;Container&lt;elems...&gt;&gt;;<sp/>};\</highlight></codeline>
<codeline lineno="805"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;<sp/>template&lt;typename...&gt;<sp/>class<sp/>Container,<sp/>template&lt;typename...&gt;<sp/>class<sp/>List,<sp/>class...Elems,<sp/>typename...Elements&gt;\</highlight></codeline>
<codeline lineno="806"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>rewrap&lt;TemplateTypeList&lt;Container&gt;,<sp/>List&lt;Elems...&gt;,<sp/>Elements...&gt;<sp/>{<sp/>using<sp/>type<sp/>=<sp/>typename<sp/>append&lt;TypeList&lt;Container&lt;Elems...&gt;&gt;,<sp/>typename<sp/>rewrap&lt;TemplateTypeList&lt;Container&gt;,<sp/>Elements...&gt;::type&gt;::type;<sp/>};\</highlight></codeline>
<codeline lineno="807"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="808"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;template<sp/>&lt;typename...&gt;<sp/>class<sp/>Final,<sp/>template&lt;<sp/>typename...&gt;<sp/>class...Containers,<sp/>typename...Types&gt;\</highlight></codeline>
<codeline lineno="809"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>create&lt;Final,<sp/>TemplateTypeList&lt;Containers...&gt;,<sp/>TypeList&lt;Types...&gt;&gt;<sp/>{<sp/>using<sp/>type<sp/>=<sp/>typename<sp/>append&lt;Final&lt;&gt;,<sp/>typename<sp/>rewrap&lt;TemplateTypeList&lt;Containers&gt;,<sp/>Types...&gt;::type...&gt;::type;<sp/>};\</highlight></codeline>
<codeline lineno="810"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;template<sp/>&lt;typename...&gt;<sp/>class<sp/>Final,<sp/>template<sp/>&lt;typename...&gt;<sp/>class<sp/>List,<sp/>typename...Ts&gt;\</highlight></codeline>
<codeline lineno="811"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>convert&lt;Final,<sp/>List&lt;Ts...&gt;&gt;<sp/>{<sp/>using<sp/>type<sp/>=<sp/>typename<sp/>append&lt;Final&lt;&gt;,TypeList&lt;Ts&gt;...&gt;::type;<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_NTTP_1(signature,<sp/>...)\</highlight></codeline>
<codeline lineno="814"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;<sp/>struct<sp/>Nttp{};\</highlight></codeline>
<codeline lineno="815"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;\</highlight></codeline>
<codeline lineno="816"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>get_wrapper()<sp/>noexcept<sp/>-&gt;<sp/>Nttp&lt;__VA_ARGS__&gt;<sp/>{<sp/>return<sp/>{};<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="817"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;<sp/>class...&gt;<sp/>struct<sp/>NttpTemplateTypeList{};\</highlight></codeline>
<codeline lineno="818"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;<sp/>class...Cs&gt;\</highlight></codeline>
<codeline lineno="819"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>get_wrapper()<sp/>noexcept<sp/>-&gt;<sp/>NttpTemplateTypeList&lt;Cs...&gt;<sp/>{<sp/>return<sp/>{};<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="820"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="821"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;<sp/>template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;<sp/>class<sp/>Container,<sp/>template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;<sp/>class<sp/>List,<sp/>INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;\</highlight></codeline>
<codeline lineno="822"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>rewrap&lt;NttpTemplateTypeList&lt;Container&gt;,<sp/>List&lt;__VA_ARGS__&gt;&gt;<sp/>{<sp/>using<sp/>type<sp/>=<sp/>TypeList&lt;Container&lt;__VA_ARGS__&gt;&gt;;<sp/>};\</highlight></codeline>
<codeline lineno="823"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;<sp/>template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;<sp/>class<sp/>Container,<sp/>template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;<sp/>class<sp/>List,<sp/>INTERNAL_CATCH_REMOVE_PARENS(signature),<sp/>typename...Elements&gt;\</highlight></codeline>
<codeline lineno="824"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>rewrap&lt;NttpTemplateTypeList&lt;Container&gt;,<sp/>List&lt;__VA_ARGS__&gt;,<sp/>Elements...&gt;<sp/>{<sp/>using<sp/>type<sp/>=<sp/>typename<sp/>append&lt;TypeList&lt;Container&lt;__VA_ARGS__&gt;&gt;,<sp/>typename<sp/>rewrap&lt;NttpTemplateTypeList&lt;Container&gt;,<sp/>Elements...&gt;::type&gt;::type;<sp/>};\</highlight></codeline>
<codeline lineno="825"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;template<sp/>&lt;typename...&gt;<sp/>class<sp/>Final,<sp/>template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;<sp/>class...Containers,<sp/>typename...Types&gt;\</highlight></codeline>
<codeline lineno="826"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>create&lt;Final,<sp/>NttpTemplateTypeList&lt;Containers...&gt;,<sp/>TypeList&lt;Types...&gt;&gt;<sp/>{<sp/>using<sp/>type<sp/>=<sp/>typename<sp/>append&lt;Final&lt;&gt;,<sp/>typename<sp/>rewrap&lt;NttpTemplateTypeList&lt;Containers&gt;,<sp/>Types...&gt;::type...&gt;::type;<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST0(TestName)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST1(TestName,<sp/>signature)\</highlight></codeline>
<codeline lineno="830"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;\</highlight></codeline>
<codeline lineno="831"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>void<sp/>TestName()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST_X(TestName,<sp/>signature,<sp/>...)\</highlight></codeline>
<codeline lineno="833"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;\</highlight></codeline>
<codeline lineno="834"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>void<sp/>TestName()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST0(TestName)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST1(TestName,<sp/>signature)\</highlight></codeline>
<codeline lineno="838"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;\</highlight></codeline>
<codeline lineno="839"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>void<sp/>TestName()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_X(TestName,<sp/>signature,...)\</highlight></codeline>
<codeline lineno="841"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;\</highlight></codeline>
<codeline lineno="842"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>void<sp/>TestName()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_NTTP_REGISTER0(TestFunc,<sp/>signature)\</highlight></codeline>
<codeline lineno="845"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>Type&gt;\</highlight></codeline>
<codeline lineno="846"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>void<sp/>reg_test(TypeList&lt;Type&gt;,<sp/>Catch::NameAndTags<sp/>nameAndTags)\</highlight></codeline>
<codeline lineno="847"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{\</highlight></codeline>
<codeline lineno="848"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::AutoReg(<sp/>Catch::makeTestInvoker(&amp;TestFunc&lt;Type&gt;),<sp/>CATCH_INTERNAL_LINEINFO,<sp/>Catch::StringRef(),<sp/>nameAndTags);\</highlight></codeline>
<codeline lineno="849"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_NTTP_REGISTER(TestFunc,<sp/>signature,<sp/>...)\</highlight></codeline>
<codeline lineno="852"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;\</highlight></codeline>
<codeline lineno="853"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>void<sp/>reg_test(Nttp&lt;__VA_ARGS__&gt;,<sp/>Catch::NameAndTags<sp/>nameAndTags)\</highlight></codeline>
<codeline lineno="854"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{\</highlight></codeline>
<codeline lineno="855"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::AutoReg(<sp/>Catch::makeTestInvoker(&amp;TestFunc&lt;__VA_ARGS__&gt;),<sp/>CATCH_INTERNAL_LINEINFO,<sp/>Catch::StringRef(),<sp/>nameAndTags);\</highlight></codeline>
<codeline lineno="856"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_NTTP_REGISTER_METHOD0(TestName,<sp/>signature,<sp/>...)\</highlight></codeline>
<codeline lineno="859"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>Type&gt;\</highlight></codeline>
<codeline lineno="860"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>void<sp/>reg_test(TypeList&lt;Type&gt;,<sp/>Catch::StringRef<sp/>className,<sp/>Catch::NameAndTags<sp/>nameAndTags)\</highlight></codeline>
<codeline lineno="861"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{\</highlight></codeline>
<codeline lineno="862"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::AutoReg(<sp/>Catch::makeTestInvoker(&amp;TestName&lt;Type&gt;::test),<sp/>CATCH_INTERNAL_LINEINFO,<sp/>className,<sp/>nameAndTags);\</highlight></codeline>
<codeline lineno="863"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_NTTP_REGISTER_METHOD(TestName,<sp/>signature,<sp/>...)\</highlight></codeline>
<codeline lineno="866"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;\</highlight></codeline>
<codeline lineno="867"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>void<sp/>reg_test(Nttp&lt;__VA_ARGS__&gt;,<sp/>Catch::StringRef<sp/>className,<sp/>Catch::NameAndTags<sp/>nameAndTags)\</highlight></codeline>
<codeline lineno="868"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{\</highlight></codeline>
<codeline lineno="869"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::AutoReg(<sp/>Catch::makeTestInvoker(&amp;TestName&lt;__VA_ARGS__&gt;::test),<sp/>CATCH_INTERNAL_LINEINFO,<sp/>className,<sp/>nameAndTags);\</highlight></codeline>
<codeline lineno="870"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD0(TestName,<sp/>ClassName)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD1(TestName,<sp/>ClassName,<sp/>signature)\</highlight></codeline>
<codeline lineno="874"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>TestType&gt;<sp/>\</highlight></codeline>
<codeline lineno="875"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>TestName<sp/>:<sp/>INTERNAL_CATCH_REMOVE_PARENS(ClassName)&lt;TestType&gt;<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="876"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>test();\</highlight></codeline>
<codeline lineno="877"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X(TestName,<sp/>ClassName,<sp/>signature,<sp/>...)\</highlight></codeline>
<codeline lineno="880"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;<sp/>\</highlight></codeline>
<codeline lineno="881"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>struct<sp/>TestName<sp/>:<sp/>INTERNAL_CATCH_REMOVE_PARENS(ClassName)&lt;__VA_ARGS__&gt;<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="882"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>test();\</highlight></codeline>
<codeline lineno="883"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD0(TestName)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD1(TestName,<sp/>signature)\</highlight></codeline>
<codeline lineno="887"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>TestType&gt;<sp/>\</highlight></codeline>
<codeline lineno="888"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>void<sp/>INTERNAL_CATCH_MAKE_NAMESPACE(TestName)::TestName&lt;TestType&gt;::test()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X(TestName,<sp/>signature,<sp/>...)\</highlight></codeline>
<codeline lineno="890"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;INTERNAL_CATCH_REMOVE_PARENS(signature)&gt;<sp/>\</highlight></codeline>
<codeline lineno="891"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>void<sp/>INTERNAL_CATCH_MAKE_NAMESPACE(TestName)::TestName&lt;__VA_ARGS__&gt;::test()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_NTTP_0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_NTTP_GEN(...)<sp/>INTERNAL_CATCH_VA_NARGS_IMPL(__VA_ARGS__,<sp/>INTERNAL_CATCH_NTTP_1(__VA_ARGS__),<sp/>INTERNAL_CATCH_NTTP_1(__VA_ARGS__),<sp/>INTERNAL_CATCH_NTTP_1(__VA_ARGS__),<sp/>INTERNAL_CATCH_NTTP_1(__VA_ARGS__),<sp/>INTERNAL_CATCH_NTTP_1(__VA_ARGS__),<sp/>INTERNAL_CATCH_NTTP_1(<sp/>__VA_ARGS__),<sp/>INTERNAL_CATCH_NTTP_1(<sp/>__VA_ARGS__),<sp/>INTERNAL_CATCH_NTTP_1(<sp/>__VA_ARGS__),<sp/>INTERNAL_CATCH_NTTP_1(<sp/>__VA_ARGS__),INTERNAL_CATCH_NTTP_1(<sp/>__VA_ARGS__),<sp/>INTERNAL_CATCH_NTTP_0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD(TestName,<sp/>...)<sp/>INTERNAL_CATCH_VA_NARGS_IMPL(<sp/>&quot;dummy&quot;</highlight><highlight class="normal">,<sp/>__VA_ARGS__,<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD1,<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD0)(TestName,<sp/>__VA_ARGS__)</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD(TestName,<sp/>ClassName,<sp/>...)<sp/>INTERNAL_CATCH_VA_NARGS_IMPL(<sp/>&quot;dummy&quot;</highlight><highlight class="normal">,<sp/>__VA_ARGS__,<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD1,<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD0)(TestName,<sp/>ClassName,<sp/>__VA_ARGS__)</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_NTTP_REG_METHOD_GEN(TestName,<sp/>...)<sp/>INTERNAL_CATCH_VA_NARGS_IMPL(<sp/>&quot;dummy&quot;</highlight><highlight class="normal">,<sp/>__VA_ARGS__,<sp/>INTERNAL_CATCH_NTTP_REGISTER_METHOD,<sp/>INTERNAL_CATCH_NTTP_REGISTER_METHOD,<sp/>INTERNAL_CATCH_NTTP_REGISTER_METHOD,<sp/>INTERNAL_CATCH_NTTP_REGISTER_METHOD,<sp/>INTERNAL_CATCH_NTTP_REGISTER_METHOD,<sp/>INTERNAL_CATCH_NTTP_REGISTER_METHOD,<sp/>INTERNAL_CATCH_NTTP_REGISTER_METHOD,<sp/>INTERNAL_CATCH_NTTP_REGISTER_METHOD,<sp/>INTERNAL_CATCH_NTTP_REGISTER_METHOD,<sp/>INTERNAL_CATCH_NTTP_REGISTER_METHOD0,<sp/>INTERNAL_CATCH_NTTP_REGISTER_METHOD0)(TestName,<sp/>__VA_ARGS__)</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_NTTP_REG_GEN(TestFunc,<sp/>...)<sp/>INTERNAL_CATCH_VA_NARGS_IMPL(<sp/>&quot;dummy&quot;</highlight><highlight class="normal">,<sp/>__VA_ARGS__,<sp/>INTERNAL_CATCH_NTTP_REGISTER,<sp/>INTERNAL_CATCH_NTTP_REGISTER,<sp/>INTERNAL_CATCH_NTTP_REGISTER,<sp/>INTERNAL_CATCH_NTTP_REGISTER,<sp/>INTERNAL_CATCH_NTTP_REGISTER,<sp/>INTERNAL_CATCH_NTTP_REGISTER,<sp/>INTERNAL_CATCH_NTTP_REGISTER,<sp/>INTERNAL_CATCH_NTTP_REGISTER,<sp/>INTERNAL_CATCH_NTTP_REGISTER,<sp/>INTERNAL_CATCH_NTTP_REGISTER0,<sp/>INTERNAL_CATCH_NTTP_REGISTER0)(TestFunc,<sp/>__VA_ARGS__)</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST(TestName,<sp/>...)<sp/>INTERNAL_CATCH_VA_NARGS_IMPL(<sp/>&quot;dummy&quot;</highlight><highlight class="normal">,<sp/>__VA_ARGS__,<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_X,<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_X,<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_X,<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_X,<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_X,<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_X,<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_X,<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_X,INTERNAL_CATCH_DEFINE_SIG_TEST_X,INTERNAL_CATCH_DEFINE_SIG_TEST1,<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST0)(TestName,<sp/>__VA_ARGS__)</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST(TestName,<sp/>...)<sp/>INTERNAL_CATCH_VA_NARGS_IMPL(<sp/>&quot;dummy&quot;</highlight><highlight class="normal">,<sp/>__VA_ARGS__,<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST_X,INTERNAL_CATCH_DECLARE_SIG_TEST_X,<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST_X,<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST_X,<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST_X,<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST_X,<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_X,INTERNAL_CATCH_DECLARE_SIG_TEST_X,INTERNAL_CATCH_DECLARE_SIG_TEST_X,<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST1,<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST0)(TestName,<sp/>__VA_ARGS__)</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_REMOVE_PARENS_GEN(...)<sp/>INTERNAL_CATCH_VA_NARGS_IMPL(__VA_ARGS__,<sp/>INTERNAL_CATCH_REMOVE_PARENS_11_ARG,INTERNAL_CATCH_REMOVE_PARENS_10_ARG,INTERNAL_CATCH_REMOVE_PARENS_9_ARG,INTERNAL_CATCH_REMOVE_PARENS_8_ARG,INTERNAL_CATCH_REMOVE_PARENS_7_ARG,INTERNAL_CATCH_REMOVE_PARENS_6_ARG,INTERNAL_CATCH_REMOVE_PARENS_5_ARG,INTERNAL_CATCH_REMOVE_PARENS_4_ARG,INTERNAL_CATCH_REMOVE_PARENS_3_ARG,INTERNAL_CATCH_REMOVE_PARENS_2_ARG,INTERNAL_CATCH_REMOVE_PARENS_1_ARG)(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_NTTP_0(signature)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_NTTP_GEN(...)<sp/>INTERNAL_CATCH_EXPAND_VARGS(INTERNAL_CATCH_VA_NARGS_IMPL(__VA_ARGS__,<sp/>INTERNAL_CATCH_NTTP_1,<sp/>INTERNAL_CATCH_NTTP_1,<sp/>INTERNAL_CATCH_NTTP_1,<sp/>INTERNAL_CATCH_NTTP_1,<sp/>INTERNAL_CATCH_NTTP_1,<sp/>INTERNAL_CATCH_NTTP_1,<sp/>INTERNAL_CATCH_NTTP_1,<sp/>INTERNAL_CATCH_NTTP_1,<sp/>INTERNAL_CATCH_NTTP_1,INTERNAL_CATCH_NTTP_1,<sp/>INTERNAL_CATCH_NTTP_0)(<sp/>__VA_ARGS__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD(TestName,<sp/>...)<sp/>INTERNAL_CATCH_EXPAND_VARGS(INTERNAL_CATCH_VA_NARGS_IMPL(<sp/>&quot;dummy&quot;</highlight><highlight class="normal">,<sp/>__VA_ARGS__,<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD1,<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD0)(TestName,<sp/>__VA_ARGS__))</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD(TestName,<sp/>ClassName,<sp/>...)<sp/>INTERNAL_CATCH_EXPAND_VARGS(INTERNAL_CATCH_VA_NARGS_IMPL(<sp/>&quot;dummy&quot;</highlight><highlight class="normal">,<sp/>__VA_ARGS__,<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD1,<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD0)(TestName,<sp/>ClassName,<sp/>__VA_ARGS__))</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_NTTP_REG_METHOD_GEN(TestName,<sp/>...)<sp/>INTERNAL_CATCH_EXPAND_VARGS(INTERNAL_CATCH_VA_NARGS_IMPL(<sp/>&quot;dummy&quot;</highlight><highlight class="normal">,<sp/>__VA_ARGS__,<sp/>INTERNAL_CATCH_NTTP_REGISTER_METHOD,<sp/>INTERNAL_CATCH_NTTP_REGISTER_METHOD,<sp/>INTERNAL_CATCH_NTTP_REGISTER_METHOD,<sp/>INTERNAL_CATCH_NTTP_REGISTER_METHOD,<sp/>INTERNAL_CATCH_NTTP_REGISTER_METHOD,<sp/>INTERNAL_CATCH_NTTP_REGISTER_METHOD,<sp/>INTERNAL_CATCH_NTTP_REGISTER_METHOD,<sp/>INTERNAL_CATCH_NTTP_REGISTER_METHOD,<sp/>INTERNAL_CATCH_NTTP_REGISTER_METHOD,<sp/>INTERNAL_CATCH_NTTP_REGISTER_METHOD0,<sp/>INTERNAL_CATCH_NTTP_REGISTER_METHOD0)(TestName,<sp/>__VA_ARGS__))</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_NTTP_REG_GEN(TestFunc,<sp/>...)<sp/>INTERNAL_CATCH_EXPAND_VARGS(INTERNAL_CATCH_VA_NARGS_IMPL(<sp/>&quot;dummy&quot;</highlight><highlight class="normal">,<sp/>__VA_ARGS__,<sp/>INTERNAL_CATCH_NTTP_REGISTER,<sp/>INTERNAL_CATCH_NTTP_REGISTER,<sp/>INTERNAL_CATCH_NTTP_REGISTER,<sp/>INTERNAL_CATCH_NTTP_REGISTER,<sp/>INTERNAL_CATCH_NTTP_REGISTER,<sp/>INTERNAL_CATCH_NTTP_REGISTER,<sp/>INTERNAL_CATCH_NTTP_REGISTER,<sp/>INTERNAL_CATCH_NTTP_REGISTER,<sp/>INTERNAL_CATCH_NTTP_REGISTER,<sp/>INTERNAL_CATCH_NTTP_REGISTER0,<sp/>INTERNAL_CATCH_NTTP_REGISTER0)(TestFunc,<sp/>__VA_ARGS__))</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST(TestName,<sp/>...)<sp/>INTERNAL_CATCH_EXPAND_VARGS(INTERNAL_CATCH_VA_NARGS_IMPL(<sp/>&quot;dummy&quot;</highlight><highlight class="normal">,<sp/>__VA_ARGS__,<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_X,<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_X,<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_X,<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_X,<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_X,<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_X,<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_X,<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_X,INTERNAL_CATCH_DEFINE_SIG_TEST_X,INTERNAL_CATCH_DEFINE_SIG_TEST1,<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST0)(TestName,<sp/>__VA_ARGS__))</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST(TestName,<sp/>...)<sp/>INTERNAL_CATCH_EXPAND_VARGS(INTERNAL_CATCH_VA_NARGS_IMPL(<sp/>&quot;dummy&quot;</highlight><highlight class="normal">,<sp/>__VA_ARGS__,<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST_X,INTERNAL_CATCH_DECLARE_SIG_TEST_X,<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST_X,<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST_X,<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST_X,<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST_X,<sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_X,INTERNAL_CATCH_DECLARE_SIG_TEST_X,INTERNAL_CATCH_DECLARE_SIG_TEST_X,<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST1,<sp/>INTERNAL_CATCH_DECLARE_SIG_TEST0)(TestName,<sp/>__VA_ARGS__))</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_REMOVE_PARENS_GEN(...)<sp/>INTERNAL_CATCH_EXPAND_VARGS(INTERNAL_CATCH_VA_NARGS_IMPL(__VA_ARGS__,<sp/>INTERNAL_CATCH_REMOVE_PARENS_11_ARG,INTERNAL_CATCH_REMOVE_PARENS_10_ARG,INTERNAL_CATCH_REMOVE_PARENS_9_ARG,INTERNAL_CATCH_REMOVE_PARENS_8_ARG,INTERNAL_CATCH_REMOVE_PARENS_7_ARG,INTERNAL_CATCH_REMOVE_PARENS_6_ARG,INTERNAL_CATCH_REMOVE_PARENS_5_ARG,INTERNAL_CATCH_REMOVE_PARENS_4_ARG,INTERNAL_CATCH_REMOVE_PARENS_3_ARG,INTERNAL_CATCH_REMOVE_PARENS_2_ARG,INTERNAL_CATCH_REMOVE_PARENS_1_ARG)(__VA_ARGS__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_preprocessor.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_meta.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="923" refid="struct_catch_1_1always__false" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1always__false" kindref="compound">always_false</ref><sp/>:<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925" refid="struct_catch_1_1true__given" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1true__given" kindref="compound">true_given</ref><sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="926" refid="struct_catch_1_1is__callable__tester" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1is__callable__tester" kindref="compound">is_callable_tester</ref><sp/>{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Fun,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1true__given" kindref="compound">true_given&lt;decltype(std::declval&lt;Fun&gt;</ref>()(std::declval&lt;Args&gt;()...))&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>test(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...&gt;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::false_type<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>test(...);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="934" refid="struct_catch_1_1is__callable" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1is__callable" kindref="compound">is_callable</ref>;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Fun,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="937" refid="struct_catch_1_1is__callable_3_01_fun_07_args_8_8_8_08_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1is__callable" kindref="compound">is_callable</ref>&lt;Fun(Args...)&gt;<sp/>:<sp/>decltype(is_callable_tester::test&lt;Fun,<sp/>Args...&gt;(0))<sp/>{};</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__cpp_lib_is_invocable)<sp/>&amp;&amp;<sp/>__cpp_lib_is_invocable<sp/>&gt;=<sp/>201703</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::result_of<sp/>is<sp/>deprecated<sp/>in<sp/>C++17<sp/>and<sp/>removed<sp/>in<sp/>C++20.<sp/>Hence,<sp/>it<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>replaced<sp/>with<sp/>std::invoke_result<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>U&gt;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>FunctionReturnType<sp/>=<sp/>std::remove_reference_t&lt;std::remove_cv_t&lt;std::invoke_result_t&lt;Func,<sp/>U...&gt;&gt;&gt;;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Keep<sp/>::type<sp/>here<sp/>because<sp/>we<sp/>still<sp/>support<sp/>C++11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>U&gt;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>FunctionReturnType<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_reference&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_cv&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::result_of&lt;Func(U...)&gt;::type&gt;::type&gt;::type;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">mpl_{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">na;</highlight></codeline>
<codeline lineno="954"><highlight class="normal">}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_meta.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="960" refid="class_catch_1_1_test_invoker_as_method" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_test_invoker_as_method" kindref="compound">TestInvokerAsMethod</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_i_test_invoker" kindref="compound">ITestInvoker</ref><sp/>{</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(C::*m_testAsMethod)();</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_test_invoker_as_method" kindref="compound">TestInvokerAsMethod</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(C::*testAsMethod)()<sp/>)<sp/>noexcept<sp/>:<sp/>m_testAsMethod(<sp/>testAsMethod<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>invoke()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C<sp/>obj;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(obj.*m_testAsMethod)();</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="969"><highlight class="normal">};</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>makeTestInvoker(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(*testAsFunction)()<sp/>)<sp/>noexcept<sp/>-&gt;<sp/><ref refid="struct_catch_1_1_i_test_invoker" kindref="compound">ITestInvoker</ref>*;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal">template&lt;typename<sp/>C&gt;</highlight></codeline>
<codeline lineno="974"><highlight class="normal">auto<sp/>makeTestInvoker(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(C::*testAsMethod)()<sp/>)<sp/>noexcept<sp/>-&gt;<sp/><ref refid="struct_catch_1_1_i_test_invoker" kindref="compound">ITestInvoker</ref>*<sp/>{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(std::nothrow)<sp/><ref refid="class_catch_1_1_test_invoker_as_method" kindref="compound">TestInvokerAsMethod&lt;C&gt;</ref>(<sp/>testAsMethod<sp/>);</highlight></codeline>
<codeline lineno="976"><highlight class="normal">}</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="978" refid="struct_catch_1_1_name_and_tags" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_name_and_tags" kindref="compound">NameAndTags</ref><sp/>{</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_name_and_tags" kindref="compound">NameAndTags</ref>(<sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name_<sp/>=<sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref>(),<sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>tags_<sp/>=<sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref>()<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/>name;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/>tags;</highlight></codeline>
<codeline lineno="982"><highlight class="normal">};</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="984" refid="struct_catch_1_1_auto_reg" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_auto_reg" kindref="compound">AutoReg</ref><sp/>:<sp/><ref refid="class_catch_1_1_non_copyable" kindref="compound">NonCopyable</ref><sp/>{</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_auto_reg" kindref="compound">AutoReg</ref>(<sp/><ref refid="struct_catch_1_1_i_test_invoker" kindref="compound">ITestInvoker</ref>*<sp/>invoker,<sp/><ref refid="struct_catch_1_1_source_line_info" kindref="compound">SourceLineInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lineInfo,<sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>classOrMethod,<sp/><ref refid="struct_catch_1_1_name_and_tags" kindref="compound">NameAndTags</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>nameAndTags<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_auto_reg" kindref="compound">~AutoReg</ref>();</highlight></codeline>
<codeline lineno="987"><highlight class="normal">};</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_DISABLE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(<sp/>TestName,<sp/>...<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="993"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>void<sp/>TestName()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TESTCASE_METHOD_NO_REGISTRATION(<sp/>TestName,<sp/>ClassName,<sp/>...<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="995"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespace{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="996"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>TestName<sp/>:<sp/>INTERNAL_CATCH_REMOVE_PARENS(ClassName)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="997"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>test();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="998"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="999"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1000"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>TestName::test()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION_2(<sp/>TestName,<sp/>TestFunc,<sp/>Name,<sp/>Tags,<sp/>Signature,<sp/>...<sp/>)<sp/><sp/>\</highlight></codeline>
<codeline lineno="1002"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_DEFINE_SIG_TEST(TestFunc,<sp/>INTERNAL_CATCH_REMOVE_PARENS(Signature))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION_2(<sp/>TestNameClass,<sp/>TestName,<sp/>ClassName,<sp/>Name,<sp/>Tags,<sp/>Signature,<sp/>...<sp/>)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1004"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespace{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1005"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespace<sp/>INTERNAL_CATCH_MAKE_NAMESPACE(TestName)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1006"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD(TestName,<sp/>ClassName,<sp/>INTERNAL_CATCH_REMOVE_PARENS(Signature));\</highlight></codeline>
<codeline lineno="1007"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1008"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1009"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD(TestName,<sp/>INTERNAL_CATCH_REMOVE_PARENS(Signature))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifndef<sp/>CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION(Name,<sp/>Tags,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="1013"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION_2(<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____<sp/>),<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____<sp/>),<sp/>Name,<sp/>Tags,<sp/>typename<sp/>TestType,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION(Name,<sp/>Tags,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="1016"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION_2(<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____<sp/>),<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____<sp/>),<sp/>Name,<sp/>Tags,<sp/>typename<sp/>TestType,<sp/>__VA_ARGS__<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifndef<sp/>CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG_NO_REGISTRATION(Name,<sp/>Tags,<sp/>Signature,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="1021"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION_2(<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____<sp/>),<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____<sp/>),<sp/>Name,<sp/>Tags,<sp/>Signature,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG_NO_REGISTRATION(Name,<sp/>Tags,<sp/>Signature,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="1024"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION_2(<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____<sp/>),<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____<sp/>),<sp/>Name,<sp/>Tags,<sp/>Signature,<sp/>__VA_ARGS__<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifndef<sp/>CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION(<sp/>ClassName,<sp/>Name,<sp/>Tags,...<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="1029"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION_2(<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____C_L_A_S_S____<sp/>),<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____<sp/>)<sp/>,<sp/>ClassName,<sp/>Name,<sp/>Tags,<sp/>typename<sp/>T,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION(<sp/>ClassName,<sp/>Name,<sp/>Tags,...<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="1032"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION_2(<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____C_L_A_S_S____<sp/>),<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____<sp/>)<sp/>,<sp/>ClassName,<sp/>Name,<sp/>Tags,<sp/>typename<sp/>T,<sp/>__VA_ARGS__<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifndef<sp/>CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG_NO_REGISTRATION(<sp/>ClassName,<sp/>Name,<sp/>Tags,<sp/>Signature,<sp/>...<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="1037"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION_2(<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____C_L_A_S_S____<sp/>),<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____<sp/>)<sp/>,<sp/>ClassName,<sp/>Name,<sp/>Tags,<sp/>Signature,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG_NO_REGISTRATION(<sp/>ClassName,<sp/>Name,<sp/>Tags,<sp/>Signature,<sp/>...<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="1040"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION_2(<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____C_L_A_S_S____<sp/>),<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____<sp/>)<sp/>,<sp/>ClassName,<sp/>Name,<sp/>Tags,<sp/>Signature,<sp/>__VA_ARGS__<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TESTCASE2(<sp/>TestName,<sp/>...<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="1046"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>void<sp/>TestName();<sp/>\</highlight></codeline>
<codeline lineno="1047"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_START_WARNINGS_SUPPRESSION<sp/>\</highlight></codeline>
<codeline lineno="1048"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS<sp/>\</highlight></codeline>
<codeline lineno="1049"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespace{<sp/>Catch::AutoReg<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>autoRegistrar<sp/>)(<sp/>Catch::makeTestInvoker(<sp/>&amp;TestName<sp/>),<sp/>CATCH_INTERNAL_LINEINFO,<sp/>Catch::StringRef(),<sp/>Catch::NameAndTags{<sp/>__VA_ARGS__<sp/>}<sp/>);<sp/>}<sp/></highlight><highlight class="comment">/*<sp/>NOLINT<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="1050"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION<sp/>\</highlight></codeline>
<codeline lineno="1051"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>void<sp/>TestName()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TESTCASE(<sp/>...<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="1053"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_TESTCASE2(<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_S_T____<sp/>),<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_METHOD_AS_TEST_CASE(<sp/>QualifiedMethod,<sp/>...<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="1057"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_START_WARNINGS_SUPPRESSION<sp/>\</highlight></codeline>
<codeline lineno="1058"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS<sp/>\</highlight></codeline>
<codeline lineno="1059"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespace{<sp/>Catch::AutoReg<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>autoRegistrar<sp/>)(<sp/>Catch::makeTestInvoker(<sp/>&amp;QualifiedMethod<sp/>),<sp/>CATCH_INTERNAL_LINEINFO,<sp/>&quot;&amp;&quot;</highlight><highlight class="normal"><sp/>#QualifiedMethod,<sp/>Catch::NameAndTags{<sp/>__VA_ARGS__<sp/>}<sp/>);<sp/>}<sp/></highlight><highlight class="comment">/*<sp/>NOLINT<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="1060"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TEST_CASE_METHOD2(<sp/>TestName,<sp/>ClassName,<sp/>...<sp/>)\</highlight></codeline>
<codeline lineno="1064"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_START_WARNINGS_SUPPRESSION<sp/>\</highlight></codeline>
<codeline lineno="1065"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS<sp/>\</highlight></codeline>
<codeline lineno="1066"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespace{<sp/>\</highlight></codeline>
<codeline lineno="1067"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>TestName<sp/>:<sp/>INTERNAL_CATCH_REMOVE_PARENS(ClassName)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1068"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>test();<sp/>\</highlight></codeline>
<codeline lineno="1069"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};<sp/>\</highlight></codeline>
<codeline lineno="1070"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::AutoReg<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>autoRegistrar<sp/>)<sp/>(<sp/>Catch::makeTestInvoker(<sp/>&amp;TestName::test<sp/>),<sp/>CATCH_INTERNAL_LINEINFO,<sp/>#ClassName,<sp/>Catch::NameAndTags{<sp/>__VA_ARGS__<sp/>}<sp/>);<sp/></highlight><highlight class="comment">/*<sp/>NOLINT<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="1071"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1072"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION<sp/>\</highlight></codeline>
<codeline lineno="1073"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>TestName::test()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TEST_CASE_METHOD(<sp/>ClassName,<sp/>...<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="1075"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_TEST_CASE_METHOD2(<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_S_T____<sp/>),<sp/>ClassName,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_REGISTER_TESTCASE(<sp/>Function,<sp/>...<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="1079"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_START_WARNINGS_SUPPRESSION<sp/>\</highlight></codeline>
<codeline lineno="1080"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS<sp/>\</highlight></codeline>
<codeline lineno="1081"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::AutoReg<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>autoRegistrar<sp/>)(<sp/>Catch::makeTestInvoker(<sp/>Function<sp/>),<sp/>CATCH_INTERNAL_LINEINFO,<sp/>Catch::StringRef(),<sp/>Catch::NameAndTags{<sp/>__VA_ARGS__<sp/>}<sp/>);<sp/></highlight><highlight class="comment">/*<sp/>NOLINT<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="1082"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_2(TestName,<sp/>TestFunc,<sp/>Name,<sp/>Tags,<sp/>Signature,<sp/>...<sp/>)\</highlight></codeline>
<codeline lineno="1086"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_START_WARNINGS_SUPPRESSION<sp/>\</highlight></codeline>
<codeline lineno="1087"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS<sp/>\</highlight></codeline>
<codeline lineno="1088"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS<sp/>\</highlight></codeline>
<codeline lineno="1089"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS<sp/>\</highlight></codeline>
<codeline lineno="1090"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_DECLARE_SIG_TEST(TestFunc,<sp/>INTERNAL_CATCH_REMOVE_PARENS(Signature));\</highlight></codeline>
<codeline lineno="1091"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespace<sp/>{\</highlight></codeline>
<codeline lineno="1092"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespace<sp/>INTERNAL_CATCH_MAKE_NAMESPACE(TestName){\</highlight></codeline>
<codeline lineno="1093"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_TYPE_GEN\</highlight></codeline>
<codeline lineno="1094"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_NTTP_GEN(INTERNAL_CATCH_REMOVE_PARENS(Signature))\</highlight></codeline>
<codeline lineno="1095"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_NTTP_REG_GEN(TestFunc,INTERNAL_CATCH_REMOVE_PARENS(Signature))\</highlight></codeline>
<codeline lineno="1096"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename...Types&gt;<sp/>\</highlight></codeline>
<codeline lineno="1097"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>TestName{\</highlight></codeline>
<codeline lineno="1098"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestName(){\</highlight></codeline>
<codeline lineno="1099"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>index<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1100"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/>char<sp/>const*<sp/>tmpl_types[]<sp/>=<sp/>{CATCH_REC_LIST(INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS,<sp/>__VA_ARGS__)};\</highlight></codeline>
<codeline lineno="1101"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>expander<sp/>=<sp/>int[];\</highlight></codeline>
<codeline lineno="1102"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)expander{(reg_test(Types{},<sp/>Catch::NameAndTags{<sp/>Name<sp/>&quot;<sp/>-<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(tmpl_types[index]),<sp/>Tags<sp/>}<sp/>),<sp/>index++)...<sp/>};</highlight><highlight class="comment">/*<sp/>NOLINT<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="1103"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="1104"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};\</highlight></codeline>
<codeline lineno="1105"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>int<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>globalRegistrar<sp/>)<sp/>=<sp/>[](){\</highlight></codeline>
<codeline lineno="1106"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestName&lt;INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES(__VA_ARGS__)&gt;();\</highlight></codeline>
<codeline lineno="1107"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0;\</highlight></codeline>
<codeline lineno="1108"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}();\</highlight></codeline>
<codeline lineno="1109"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="1110"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="1111"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION<sp/>\</highlight></codeline>
<codeline lineno="1112"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_DEFINE_SIG_TEST(TestFunc,INTERNAL_CATCH_REMOVE_PARENS(Signature))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE(Name,<sp/>Tags,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="1116"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_2(<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____<sp/>),<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____<sp/>),<sp/>Name,<sp/>Tags,<sp/>typename<sp/>TestType,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE(Name,<sp/>Tags,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="1119"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_2(<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____<sp/>),<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____<sp/>),<sp/>Name,<sp/>Tags,<sp/>typename<sp/>TestType,<sp/>__VA_ARGS__<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG(Name,<sp/>Tags,<sp/>Signature,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="1124"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_2(<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____<sp/>),<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____<sp/>),<sp/>Name,<sp/>Tags,<sp/>Signature,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG(Name,<sp/>Tags,<sp/>Signature,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="1127"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_2(<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____<sp/>),<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____<sp/>),<sp/>Name,<sp/>Tags,<sp/>Signature,<sp/>__VA_ARGS__<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2(TestName,<sp/>TestFuncName,<sp/>Name,<sp/>Tags,<sp/>Signature,<sp/>TmplTypes,<sp/>TypesList)<sp/>\</highlight></codeline>
<codeline lineno="1131"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_START_WARNINGS_SUPPRESSION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1132"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1133"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1134"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1135"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename<sp/>TestType&gt;<sp/>static<sp/>void<sp/>TestFuncName();<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1136"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespace<sp/>{\</highlight></codeline>
<codeline lineno="1137"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespace<sp/>INTERNAL_CATCH_MAKE_NAMESPACE(TestName)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1138"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_TYPE_GEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1139"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_NTTP_GEN(INTERNAL_CATCH_REMOVE_PARENS(Signature))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1140"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename...<sp/>Types&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1141"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>TestName<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1142"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>reg_tests()<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1143"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>index<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1144"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>expander<sp/>=<sp/>int[];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1145"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/>char<sp/>const*<sp/>tmpl_types[]<sp/>=<sp/>{CATCH_REC_LIST(INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS,<sp/>INTERNAL_CATCH_REMOVE_PARENS(TmplTypes))};\</highlight></codeline>
<codeline lineno="1146"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/>char<sp/>const*<sp/>types_list[]<sp/>=<sp/>{CATCH_REC_LIST(INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS,<sp/>INTERNAL_CATCH_REMOVE_PARENS(TypesList))};\</highlight></codeline>
<codeline lineno="1147"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>num_types<sp/>=<sp/>sizeof(types_list)<sp/>/<sp/>sizeof(types_list[0]);\</highlight></codeline>
<codeline lineno="1148"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)expander{(Catch::AutoReg(<sp/>Catch::makeTestInvoker(<sp/>&amp;TestFuncName&lt;Types&gt;<sp/>),<sp/>CATCH_INTERNAL_LINEINFO,<sp/>Catch::StringRef(),<sp/>Catch::NameAndTags{<sp/>Name<sp/>&quot;<sp/>-<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(tmpl_types[index<sp/>/<sp/>num_types])<sp/>+<sp/>&quot;&lt;&quot;<sp/>+<sp/>std::string(types_list[index<sp/>%<sp/>num_types])<sp/>+<sp/>&quot;&gt;&quot;,<sp/>Tags<sp/>}<sp/>),<sp/>index++)...<sp/>};</highlight><highlight class="comment">/*<sp/>NOLINT<sp/>*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="1149"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1150"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1151"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>int<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>globalRegistrar<sp/>)<sp/>=<sp/>[](){<sp/>\</highlight></codeline>
<codeline lineno="1152"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>TestInit<sp/>=<sp/>typename<sp/>create&lt;TestName,<sp/>decltype(get_wrapper&lt;INTERNAL_CATCH_REMOVE_PARENS(TmplTypes)&gt;()),<sp/>TypeList&lt;INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES(INTERNAL_CATCH_REMOVE_PARENS(TypesList))&gt;&gt;::type;<sp/>\</highlight></codeline>
<codeline lineno="1153"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestInit<sp/>t;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1154"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.reg_tests();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1155"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1156"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1157"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1158"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1159"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1160"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename<sp/>TestType&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1161"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>void<sp/>TestFuncName()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE(Name,<sp/>Tags,<sp/>...)\</highlight></codeline>
<codeline lineno="1165"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2(INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____<sp/>),<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____<sp/>),<sp/>Name,<sp/>Tags,<sp/>typename<sp/>T,__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE(Name,<sp/>Tags,<sp/>...)\</highlight></codeline>
<codeline lineno="1168"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2(<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____<sp/>),<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____<sp/>),<sp/>Name,<sp/>Tags,<sp/>typename<sp/>T,<sp/>__VA_ARGS__<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG(Name,<sp/>Tags,<sp/>Signature,<sp/>...)\</highlight></codeline>
<codeline lineno="1173"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2(INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____<sp/>),<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____<sp/>),<sp/>Name,<sp/>Tags,<sp/>Signature,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG(Name,<sp/>Tags,<sp/>Signature,<sp/>...)\</highlight></codeline>
<codeline lineno="1176"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2(<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____<sp/>),<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____<sp/>),<sp/>Name,<sp/>Tags,<sp/>Signature,<sp/>__VA_ARGS__<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_2(TestName,<sp/>TestFunc,<sp/>Name,<sp/>Tags,<sp/>TmplList)\</highlight></codeline>
<codeline lineno="1180"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_START_WARNINGS_SUPPRESSION<sp/>\</highlight></codeline>
<codeline lineno="1181"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS<sp/>\</highlight></codeline>
<codeline lineno="1182"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS<sp/>\</highlight></codeline>
<codeline lineno="1183"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename<sp/>TestType&gt;<sp/>static<sp/>void<sp/>TestFunc();<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1184"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespace<sp/>{\</highlight></codeline>
<codeline lineno="1185"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespace<sp/>INTERNAL_CATCH_MAKE_NAMESPACE(TestName){\</highlight></codeline>
<codeline lineno="1186"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_TYPE_GEN\</highlight></codeline>
<codeline lineno="1187"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename...<sp/>Types&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1188"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>TestName<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1189"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>reg_tests()<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1190"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>index<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1191"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>expander<sp/>=<sp/>int[];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1192"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)expander{(Catch::AutoReg(<sp/>Catch::makeTestInvoker(<sp/>&amp;TestFunc&lt;Types&gt;<sp/>),<sp/>CATCH_INTERNAL_LINEINFO,<sp/>Catch::StringRef(),<sp/>Catch::NameAndTags{<sp/>Name<sp/>&quot;<sp/>-<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(INTERNAL_CATCH_STRINGIZE(TmplList))<sp/>+<sp/>&quot;<sp/>-<sp/>&quot;<sp/>+<sp/>std::to_string(index),<sp/>Tags<sp/>}<sp/>),<sp/>index++)...<sp/>};</highlight><highlight class="comment">/*<sp/>NOLINT<sp/>*/</highlight><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="1193"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1194"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};\</highlight></codeline>
<codeline lineno="1195"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>int<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>globalRegistrar<sp/>)<sp/>=<sp/>[](){<sp/>\</highlight></codeline>
<codeline lineno="1196"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>TestInit<sp/>=<sp/>typename<sp/>convert&lt;TestName,<sp/>TmplList&gt;::type;<sp/>\</highlight></codeline>
<codeline lineno="1197"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestInit<sp/>t;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1198"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.reg_tests();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1199"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1200"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1201"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}}\</highlight></codeline>
<codeline lineno="1202"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1203"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename<sp/>TestType&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1204"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>void<sp/>TestFunc()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE(Name,<sp/>Tags,<sp/>TmplList)<sp/>\</highlight></codeline>
<codeline lineno="1207"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_2(<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____<sp/>),<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____<sp/>),<sp/>Name,<sp/>Tags,<sp/>TmplList<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2(<sp/>TestNameClass,<sp/>TestName,<sp/>ClassName,<sp/>Name,<sp/>Tags,<sp/>Signature,<sp/>...<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="1210"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_START_WARNINGS_SUPPRESSION<sp/>\</highlight></codeline>
<codeline lineno="1211"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS<sp/>\</highlight></codeline>
<codeline lineno="1212"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS<sp/>\</highlight></codeline>
<codeline lineno="1213"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS<sp/>\</highlight></codeline>
<codeline lineno="1214"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespace<sp/>{\</highlight></codeline>
<codeline lineno="1215"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespace<sp/>INTERNAL_CATCH_MAKE_NAMESPACE(TestName){<sp/>\</highlight></codeline>
<codeline lineno="1216"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_TYPE_GEN\</highlight></codeline>
<codeline lineno="1217"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_NTTP_GEN(INTERNAL_CATCH_REMOVE_PARENS(Signature))\</highlight></codeline>
<codeline lineno="1218"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD(TestName,<sp/>ClassName,<sp/>INTERNAL_CATCH_REMOVE_PARENS(Signature));\</highlight></codeline>
<codeline lineno="1219"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_NTTP_REG_METHOD_GEN(TestName,<sp/>INTERNAL_CATCH_REMOVE_PARENS(Signature))\</highlight></codeline>
<codeline lineno="1220"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename...Types&gt;<sp/>\</highlight></codeline>
<codeline lineno="1221"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>TestNameClass{\</highlight></codeline>
<codeline lineno="1222"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestNameClass(){\</highlight></codeline>
<codeline lineno="1223"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>index<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1224"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/>char<sp/>const*<sp/>tmpl_types[]<sp/>=<sp/>{CATCH_REC_LIST(INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS,<sp/>__VA_ARGS__)};\</highlight></codeline>
<codeline lineno="1225"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>expander<sp/>=<sp/>int[];\</highlight></codeline>
<codeline lineno="1226"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)expander{(reg_test(Types{},<sp/>#ClassName,<sp/>Catch::NameAndTags{<sp/>Name<sp/>&quot;<sp/>-<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(tmpl_types[index]),<sp/>Tags<sp/>}<sp/>),<sp/>index++)...<sp/>};</highlight><highlight class="comment">/*<sp/>NOLINT<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="1227"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="1228"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};\</highlight></codeline>
<codeline lineno="1229"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>int<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>globalRegistrar<sp/>)<sp/>=<sp/>[](){\</highlight></codeline>
<codeline lineno="1230"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestNameClass&lt;INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES(__VA_ARGS__)&gt;();\</highlight></codeline>
<codeline lineno="1231"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0;\</highlight></codeline>
<codeline lineno="1232"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}();\</highlight></codeline>
<codeline lineno="1233"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="1234"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="1235"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION<sp/>\</highlight></codeline>
<codeline lineno="1236"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD(TestName,<sp/>INTERNAL_CATCH_REMOVE_PARENS(Signature))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD(<sp/>ClassName,<sp/>Name,<sp/>Tags,...<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="1240"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2(<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____C_L_A_S_S____<sp/>),<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____<sp/>)<sp/>,<sp/>ClassName,<sp/>Name,<sp/>Tags,<sp/>typename<sp/>T,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD(<sp/>ClassName,<sp/>Name,<sp/>Tags,...<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="1243"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2(<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____C_L_A_S_S____<sp/>),<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____<sp/>)<sp/>,<sp/>ClassName,<sp/>Name,<sp/>Tags,<sp/>typename<sp/>T,<sp/>__VA_ARGS__<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG(<sp/>ClassName,<sp/>Name,<sp/>Tags,<sp/>Signature,<sp/>...<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="1248"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2(<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____C_L_A_S_S____<sp/>),<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____<sp/>)<sp/>,<sp/>ClassName,<sp/>Name,<sp/>Tags,<sp/>Signature,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG(<sp/>ClassName,<sp/>Name,<sp/>Tags,<sp/>Signature,<sp/>...<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="1251"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2(<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____C_L_A_S_S____<sp/>),<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____<sp/>)<sp/>,<sp/>ClassName,<sp/>Name,<sp/>Tags,<sp/>Signature,<sp/>__VA_ARGS__<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2(TestNameClass,<sp/>TestName,<sp/>ClassName,<sp/>Name,<sp/>Tags,<sp/>Signature,<sp/>TmplTypes,<sp/>TypesList)\</highlight></codeline>
<codeline lineno="1255"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_START_WARNINGS_SUPPRESSION<sp/>\</highlight></codeline>
<codeline lineno="1256"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS<sp/>\</highlight></codeline>
<codeline lineno="1257"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS<sp/>\</highlight></codeline>
<codeline lineno="1258"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS<sp/>\</highlight></codeline>
<codeline lineno="1259"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename<sp/>TestType&gt;<sp/>\</highlight></codeline>
<codeline lineno="1260"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>TestName<sp/>:<sp/>INTERNAL_CATCH_REMOVE_PARENS(ClassName<sp/>&lt;TestType&gt;)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1261"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>test();\</highlight></codeline>
<codeline lineno="1262"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};\</highlight></codeline>
<codeline lineno="1263"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespace<sp/>{\</highlight></codeline>
<codeline lineno="1264"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespace<sp/>INTERNAL_CATCH_MAKE_NAMESPACE(TestNameClass)<sp/>{\</highlight></codeline>
<codeline lineno="1265"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_TYPE_GEN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1266"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_NTTP_GEN(INTERNAL_CATCH_REMOVE_PARENS(Signature))\</highlight></codeline>
<codeline lineno="1267"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename...Types&gt;\</highlight></codeline>
<codeline lineno="1268"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>TestNameClass{\</highlight></codeline>
<codeline lineno="1269"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>reg_tests(){\</highlight></codeline>
<codeline lineno="1270"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>index<sp/>=<sp/>0;\</highlight></codeline>
<codeline lineno="1271"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>expander<sp/>=<sp/>int[];\</highlight></codeline>
<codeline lineno="1272"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/>char<sp/>const*<sp/>tmpl_types[]<sp/>=<sp/>{CATCH_REC_LIST(INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS,<sp/>INTERNAL_CATCH_REMOVE_PARENS(TmplTypes))};\</highlight></codeline>
<codeline lineno="1273"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/>char<sp/>const*<sp/>types_list[]<sp/>=<sp/>{CATCH_REC_LIST(INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS,<sp/>INTERNAL_CATCH_REMOVE_PARENS(TypesList))};\</highlight></codeline>
<codeline lineno="1274"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/>auto<sp/>num_types<sp/>=<sp/>sizeof(types_list)<sp/>/<sp/>sizeof(types_list[0]);\</highlight></codeline>
<codeline lineno="1275"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)expander{(Catch::AutoReg(<sp/>Catch::makeTestInvoker(<sp/>&amp;TestName&lt;Types&gt;::test<sp/>),<sp/>CATCH_INTERNAL_LINEINFO,<sp/>#ClassName,<sp/>Catch::NameAndTags{<sp/>Name<sp/>&quot;<sp/>-<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(tmpl_types[index<sp/>/<sp/>num_types])<sp/>+<sp/>&quot;&lt;&quot;<sp/>+<sp/>std::string(types_list[index<sp/>%<sp/>num_types])<sp/>+<sp/>&quot;&gt;&quot;,<sp/>Tags<sp/>}<sp/>),<sp/>index++)...<sp/>};</highlight><highlight class="comment">/*<sp/>NOLINT<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="1276"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="1277"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};\</highlight></codeline>
<codeline lineno="1278"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>int<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>globalRegistrar<sp/>)<sp/>=<sp/>[](){\</highlight></codeline>
<codeline lineno="1279"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>TestInit<sp/>=<sp/>typename<sp/>create&lt;TestNameClass,<sp/>decltype(get_wrapper&lt;INTERNAL_CATCH_REMOVE_PARENS(TmplTypes)&gt;()),<sp/>TypeList&lt;INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES(INTERNAL_CATCH_REMOVE_PARENS(TypesList))&gt;&gt;::type;\</highlight></codeline>
<codeline lineno="1280"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestInit<sp/>t;\</highlight></codeline>
<codeline lineno="1281"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.reg_tests();\</highlight></codeline>
<codeline lineno="1282"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0;\</highlight></codeline>
<codeline lineno="1283"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}();<sp/>\</highlight></codeline>
<codeline lineno="1284"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="1285"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="1286"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION<sp/>\</highlight></codeline>
<codeline lineno="1287"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename<sp/>TestType&gt;<sp/>\</highlight></codeline>
<codeline lineno="1288"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>TestName&lt;TestType&gt;::test()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD(<sp/>ClassName,<sp/>Name,<sp/>Tags,<sp/>...<sp/>)\</highlight></codeline>
<codeline lineno="1292"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2(<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____<sp/>),<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____<sp/>),<sp/>ClassName,<sp/>Name,<sp/>Tags,<sp/>typename<sp/>T,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD(<sp/>ClassName,<sp/>Name,<sp/>Tags,<sp/>...<sp/>)\</highlight></codeline>
<codeline lineno="1295"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2(<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____<sp/>),<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____<sp/>),<sp/>ClassName,<sp/>Name,<sp/>Tags,<sp/>typename<sp/>T,__VA_ARGS__<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG(<sp/>ClassName,<sp/>Name,<sp/>Tags,<sp/>Signature,<sp/>...<sp/>)\</highlight></codeline>
<codeline lineno="1300"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2(<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____<sp/>),<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____<sp/>),<sp/>ClassName,<sp/>Name,<sp/>Tags,<sp/>Signature,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG(<sp/>ClassName,<sp/>Name,<sp/>Tags,<sp/>Signature,<sp/>...<sp/>)\</highlight></codeline>
<codeline lineno="1303"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2(<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____<sp/>),<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____<sp/>),<sp/>ClassName,<sp/>Name,<sp/>Tags,<sp/>Signature,__VA_ARGS__<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD_2(<sp/>TestNameClass,<sp/>TestName,<sp/>ClassName,<sp/>Name,<sp/>Tags,<sp/>TmplList)<sp/>\</highlight></codeline>
<codeline lineno="1307"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_START_WARNINGS_SUPPRESSION<sp/>\</highlight></codeline>
<codeline lineno="1308"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS<sp/>\</highlight></codeline>
<codeline lineno="1309"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS<sp/>\</highlight></codeline>
<codeline lineno="1310"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename<sp/>TestType&gt;<sp/>\</highlight></codeline>
<codeline lineno="1311"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>TestName<sp/>:<sp/>INTERNAL_CATCH_REMOVE_PARENS(ClassName<sp/>&lt;TestType&gt;)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1312"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>test();\</highlight></codeline>
<codeline lineno="1313"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};\</highlight></codeline>
<codeline lineno="1314"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespace<sp/>{\</highlight></codeline>
<codeline lineno="1315"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespace<sp/>INTERNAL_CATCH_MAKE_NAMESPACE(TestName){<sp/>\</highlight></codeline>
<codeline lineno="1316"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_TYPE_GEN\</highlight></codeline>
<codeline lineno="1317"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename...Types&gt;\</highlight></codeline>
<codeline lineno="1318"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/>TestNameClass{\</highlight></codeline>
<codeline lineno="1319"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>reg_tests(){\</highlight></codeline>
<codeline lineno="1320"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>index<sp/>=<sp/>0;\</highlight></codeline>
<codeline lineno="1321"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>expander<sp/>=<sp/>int[];\</highlight></codeline>
<codeline lineno="1322"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)expander{(Catch::AutoReg(<sp/>Catch::makeTestInvoker(<sp/>&amp;TestName&lt;Types&gt;::test<sp/>),<sp/>CATCH_INTERNAL_LINEINFO,<sp/>#ClassName,<sp/>Catch::NameAndTags{<sp/>Name<sp/>&quot;<sp/>-<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(INTERNAL_CATCH_STRINGIZE(TmplList))<sp/>+<sp/>&quot;<sp/>-<sp/>&quot;<sp/>+<sp/>std::to_string(index),<sp/>Tags<sp/>}<sp/>),<sp/>index++)...<sp/>};</highlight><highlight class="comment">/*<sp/>NOLINT<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="1323"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="1324"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};\</highlight></codeline>
<codeline lineno="1325"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>int<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>globalRegistrar<sp/>)<sp/>=<sp/>[](){\</highlight></codeline>
<codeline lineno="1326"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>TestInit<sp/>=<sp/>typename<sp/>convert&lt;TestNameClass,<sp/>TmplList&gt;::type;\</highlight></codeline>
<codeline lineno="1327"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestInit<sp/>t;\</highlight></codeline>
<codeline lineno="1328"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.reg_tests();\</highlight></codeline>
<codeline lineno="1329"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0;\</highlight></codeline>
<codeline lineno="1330"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}();<sp/>\</highlight></codeline>
<codeline lineno="1331"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}}\</highlight></codeline>
<codeline lineno="1332"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION<sp/>\</highlight></codeline>
<codeline lineno="1333"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template&lt;typename<sp/>TestType&gt;<sp/>\</highlight></codeline>
<codeline lineno="1334"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>TestName&lt;TestType&gt;::test()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD(ClassName,<sp/>Name,<sp/>Tags,<sp/>TmplList)<sp/>\</highlight></codeline>
<codeline lineno="1337"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD_2(<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____<sp/>),<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_M_P_L_A_T_E____T_E_S_T____F_U_N_C____<sp/>),<sp/>ClassName,<sp/>Name,<sp/>Tags,<sp/>TmplList<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_test_registry.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_capture.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_assertionhandler.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_assertioninfo.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_result_type.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ResultWas::OfType<sp/>enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1351" refid="struct_catch_1_1_result_was" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_result_was" kindref="compound">ResultWas</ref><sp/>{<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>OfType<sp/>{</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Unknown<sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ok<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Info<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Warning<sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FailureBit<sp/>=<sp/>0x10,</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExpressionFailed<sp/>=<sp/>FailureBit<sp/>|<sp/>1,</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExplicitFailure<sp/>=<sp/>FailureBit<sp/>|<sp/>2,</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Exception<sp/>=<sp/>0x100<sp/>|<sp/>FailureBit,</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ThrewException<sp/>=<sp/>Exception<sp/>|<sp/>1,</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DidntThrowException<sp/>=<sp/>Exception<sp/>|<sp/>2,</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FatalErrorCondition<sp/>=<sp/>0x200<sp/>|<sp/>FailureBit</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/>};<sp/>};</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isOk(<sp/>ResultWas::OfType<sp/>resultType<sp/>);</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isJustInfo(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags<sp/>);</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ResultDisposition::Flags<sp/>enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1375" refid="struct_catch_1_1_result_disposition" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_result_disposition" kindref="compound">ResultDisposition</ref><sp/>{<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>Flags<sp/>{</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Normal<sp/>=<sp/>0x01,</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ContinueOnFailure<sp/>=<sp/>0x02,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Failures<sp/>fail<sp/>test,<sp/>but<sp/>execution<sp/>continues</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FalseTest<sp/>=<sp/>0x04,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prefix<sp/>expression<sp/>with<sp/>!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SuppressFail<sp/>=<sp/>0x08<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Failures<sp/>are<sp/>reported<sp/>but<sp/>do<sp/>not<sp/>fail<sp/>the<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/>};<sp/>};</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/>ResultDisposition::Flags<sp/>operator<sp/>|<sp/>(<sp/>ResultDisposition::Flags<sp/>lhs,<sp/>ResultDisposition::Flags<sp/>rhs<sp/>);</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shouldContinueOnFailure(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags<sp/>);</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isFalseTest(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags<sp/>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>flags<sp/>&amp;<sp/>ResultDisposition::FalseTest<sp/>)<sp/>!=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shouldSuppressFailure(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags<sp/>);</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_result_type.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight></codeline>
<codeline lineno="1394" refid="struct_catch_1_1_assertion_info" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_assertion_info" kindref="compound">AssertionInfo</ref></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/>macroName;</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_source_line_info" kindref="compound">SourceLineInfo</ref><sp/>lineInfo;</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/>capturedExpression;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultDisposition::Flags<sp/>resultDisposition;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>want<sp/>to<sp/>delete<sp/>this<sp/>constructor<sp/>but<sp/>a<sp/>compiler<sp/>bug<sp/>in<sp/>4.8<sp/>means</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>struct<sp/>is<sp/>then<sp/>treated<sp/>as<sp/>non-aggregate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//AssertionInfo()<sp/>=<sp/>delete;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_assertioninfo.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_decomposer.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_tostring.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_stream.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iosfwd&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/>cout();</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/>cerr();</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/>clog();</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">StringRef;</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"></highlight></codeline>
<codeline lineno="1431" refid="struct_catch_1_1_i_stream" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_i_stream" kindref="compound">IStream</ref><sp/>{</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_i_stream" kindref="compound">~IStream</ref>();</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::ostream&amp;<sp/>stream()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>makeStream(<sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;filename<sp/>)<sp/>-&gt;<sp/><ref refid="struct_catch_1_1_i_stream" kindref="compound">IStream</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight></codeline>
<codeline lineno="1438" refid="class_catch_1_1_reusable_string_stream" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_reusable_string_stream" kindref="compound">ReusableStringStream</ref><sp/>:<sp/><ref refid="class_catch_1_1_non_copyable" kindref="compound">NonCopyable</ref><sp/>{</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>m_index;</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostream*<sp/>m_oss;</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_reusable_string_stream" kindref="compound">ReusableStringStream</ref>();</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_reusable_string_stream" kindref="compound">~ReusableStringStream</ref>();</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>str()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/>std::string;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>&lt;&lt;<sp/>(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>)<sp/>-&gt;<sp/><ref refid="class_catch_1_1_reusable_string_stream" kindref="compound">ReusableStringStream</ref>&amp;<sp/>{</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*m_oss<sp/>&lt;&lt;<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get()<sp/>-&gt;<sp/>std::ostream&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*m_oss;<sp/>}</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_stream.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_interfaces_enum_values_registry.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Detail<sp/>{</highlight></codeline>
<codeline lineno="1464" refid="struct_catch_1_1_detail_1_1_enum_info" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_detail_1_1_enum_info" kindref="compound">EnumInfo</ref><sp/>{</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/>m_name;</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;int,<sp/>StringRef&gt;&gt;<sp/>m_values;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_detail_1_1_enum_info" kindref="compound">~EnumInfo</ref>();</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/>lookup(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight></codeline>
<codeline lineno="1474" refid="struct_catch_1_1_i_mutable_enum_values_registry" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_i_mutable_enum_values_registry" kindref="compound">IMutableEnumValuesRegistry</ref><sp/>{</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_i_mutable_enum_values_registry" kindref="compound">~IMutableEnumValuesRegistry</ref>();</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_detail_1_1_enum_info" kindref="compound">Detail::EnumInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>registerEnum(<sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/>enumName,<sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/>allEnums,<sp/>std::vector&lt;int&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>values<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E&gt;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_detail_1_1_enum_info" kindref="compound">Detail::EnumInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>registerEnum(<sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/>enumName,<sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/>allEnums,<sp/>std::initializer_list&lt;E&gt;<sp/>values<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int)<sp/>&gt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(E),<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>serialize<sp/>enum<sp/>to<sp/>int&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>intValues;</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intValues.reserve(<sp/>values.size()<sp/>);</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>enumValue<sp/>:<sp/>values<sp/>)</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>intValues.push_back(<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>enumValue<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>registerEnum(<sp/>enumName,<sp/>allEnums,<sp/>intValues<sp/>);</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_interfaces_enum_values_registry.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CATCH_CONFIG_CPP17_STRING_VIEW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string_view&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__OBJC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_objc_arc.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight><highlight class="preprocessor">#import<sp/>&lt;Foundation/Foundation.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__has_feature</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_ARC_ENABLED<sp/>__has_feature(objc_arc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_ARC_ENABLED<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>arcSafeRelease(<sp/>NSObject*<sp/>obj<sp/>);</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>performOptionalSelector(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>obj,<sp/></highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal"><sp/>sel<sp/>);</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!CATCH_ARC_ENABLED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>arcSafeRelease(<sp/>NSObject*<sp/>obj<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/>[obj<sp/>release];</highlight></codeline>
<codeline lineno="1515"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>performOptionalSelector(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>obj,<sp/></highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal"><sp/>sel<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>[obj<sp/>respondsToSelector:<sp/>sel]<sp/>)</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[obj<sp/>performSelector:<sp/>sel];</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nil;</highlight></codeline>
<codeline lineno="1520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_UNSAFE_UNRETAINED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_ARC_STRONG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>arcSafeRelease(<sp/>NSObject*<sp/>){}</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>performOptionalSelector(<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>obj,<sp/></highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal"><sp/>sel<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1528"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Warc-performSelector-leaks&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>[obj<sp/>respondsToSelector:<sp/>sel]<sp/>)</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[obj<sp/>performSelector:<sp/>sel];</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nil;</highlight></codeline>
<codeline lineno="1536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_UNSAFE_UNRETAINED<sp/>__unsafe_unretained</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_ARC_STRONG<sp/>__strong</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_objc_arc.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(push)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(disable:4180)<sp/></highlight><highlight class="comment">//<sp/>We<sp/>attempt<sp/>to<sp/>stream<sp/>a<sp/>function<sp/>(address)<sp/>by<sp/>const&amp;,<sp/>which<sp/>MSVC<sp/>complains<sp/>about<sp/>but<sp/>is<sp/>harmless</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Detail<sp/>{</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"></highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>unprintableString;</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>rawMemoryToString(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>std::size_t<sp/>size<sp/>);</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>rawMemoryToString(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rawMemoryToString(<sp/>&amp;</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1562" refid="class_catch_1_1_detail_1_1_is_stream_insertable" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_detail_1_1_is_stream_insertable" kindref="compound">IsStreamInsertable</ref><sp/>{</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Stream,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(std::declval&lt;Stream&amp;&gt;()<sp/>&lt;&lt;<sp/>std::declval&lt;U&gt;(),<sp/>std::true_type());</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test(...)-&gt;std::false_type;</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(test&lt;std::ostream,<sp/>const<sp/>T&amp;&gt;(0))::<ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"></highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E&gt;</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>convertUnknownEnumToString(<sp/>E<sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref><sp/>);</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"></highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_enum&lt;T&gt;::value<sp/>&amp;&amp;<sp/>!std::is_base_of&lt;std::exception,<sp/>T&gt;::value,</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string&gt;::type<sp/>convertUnstreamable(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Detail::unprintableString;</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_enum&lt;T&gt;::value<sp/>&amp;&amp;<sp/>std::is_base_of&lt;std::exception,<sp/>T&gt;::value,</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string&gt;::type<sp/>convertUnstreamable(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>ex)<sp/>{</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ex.what();</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_enum&lt;T&gt;::value</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>std::string&gt;::type<sp/>convertUnstreamable(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>convertUnknownEnumToString(<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>);</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MANAGED)</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>clrReferenceToString(<sp/>T^<sp/>ref<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ref<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(</highlight><highlight class="stringliteral">&quot;null&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classbytes" kindref="compound">bytes</ref><sp/>=<sp/>System::Text::Encoding::UTF8-&gt;GetBytes(ref-&gt;ToString());</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cli::pin_ptr&lt;System::Byte&gt;<sp/>p<sp/>=<sp/>&amp;<ref refid="classbytes" kindref="compound">bytes</ref>[0];</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(p),<sp/><ref refid="classbytes" kindref="compound">bytes</ref>-&gt;Length);</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>decide<sp/>for<sp/>C++14,<sp/>change<sp/>these<sp/>to<sp/>enable_if_ts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="1613" refid="struct_catch_1_1_string_maker" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_string_maker" kindref="compound">StringMaker</ref><sp/>{</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Fake<sp/>=<sp/>T&gt;</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;::Catch::Detail::IsStreamInsertable&lt;Fake&gt;::value,<sp/>std::string&gt;::type</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Fake&amp;<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_reusable_string_stream" kindref="compound">ReusableStringStream</ref><sp/>rss;</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NB:<sp/>call<sp/>using<sp/>the<sp/>function-like<sp/>syntax<sp/>to<sp/>avoid<sp/>ambiguity<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>user-defined<sp/>templated<sp/>operator&lt;&lt;<sp/>under<sp/>clang.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss.operator&lt;&lt;(<ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rss.str();</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Fake<sp/>=<sp/>T&gt;</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;!::Catch::Detail::IsStreamInsertable&lt;Fake&gt;::value,<sp/>std::string&gt;::type</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convert(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Fake&amp;<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_CONFIG_FALLBACK_STRINGIFIER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Detail::convertUnstreamable(<ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CATCH_CONFIG_FALLBACK_STRINGIFIER(<ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Detail<sp/>{</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>dispatches<sp/>all<sp/>stringification<sp/>requests<sp/>inside<sp/>of<sp/>Catch.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Should<sp/>be<sp/>preferably<sp/>called<sp/>fully<sp/>qualified,<sp/>like<sp/>::Catch::Detail::stringify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>stringify(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>::Catch::StringMaker&lt;typename<sp/>std::remove_cv&lt;typename<sp/>std::remove_reference&lt;T&gt;::type&gt;::type&gt;::convert(<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>);</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E&gt;</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>convertUnknownEnumToString(<sp/>E<sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>::Catch::Detail::stringify(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">typename<sp/>std::underlying_type&lt;E&gt;::type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>));</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MANAGED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>stringify(<sp/>T^<sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>::Catch::StringMaker&lt;T^&gt;::convert(<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>);</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1657"><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>predefined<sp/>specializations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="1663" refid="struct_catch_1_1_string_maker_3_01std_1_1string_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_string_maker" kindref="compound">StringMaker</ref>&lt;std::string&gt;<sp/>{</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str);</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CATCH_CONFIG_CPP17_STRING_VIEW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_string_maker" kindref="compound">StringMaker</ref>&lt;std::<ref refid="classbasic__string__view" kindref="compound">string_view</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(std::string_view<sp/>str);</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="1675" refid="struct_catch_1_1_string_maker_3_01char_01const_01_5_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_string_maker" kindref="compound">StringMaker</ref>&lt;char<sp/>const<sp/>*&gt;<sp/>{</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>str);</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="1679" refid="struct_catch_1_1_string_maker_3_01char_01_5_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_string_maker" kindref="compound">StringMaker</ref>&lt;char<sp/>*&gt;<sp/>{</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>str);</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CATCH_CONFIG_WCHAR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="1685" refid="struct_catch_1_1_string_maker_3_01std_1_1wstring_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_string_maker" kindref="compound">StringMaker</ref>&lt;std::wstring&gt;<sp/>{</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::wstring&amp;<sp/>wstr);</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>CATCH_CONFIG_CPP17_STRING_VIEW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_string_maker" kindref="compound">StringMaker</ref>&lt;std::<ref refid="classbasic__string__view" kindref="compound">wstring_view</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(std::wstring_view<sp/>str);</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="1697" refid="struct_catch_1_1_string_maker_3_01wchar__t_01const_01_5_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_string_maker" kindref="compound">StringMaker</ref>&lt;wchar_t<sp/>const<sp/>*&gt;<sp/>{</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>str);</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="1701" refid="struct_catch_1_1_string_maker_3_01wchar__t_01_5_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_string_maker" kindref="compound">StringMaker</ref>&lt;wchar_t<sp/>*&gt;<sp/>{</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*<sp/>str);</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"></highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TBD:<sp/>Should<sp/>we<sp/>use<sp/>`strnlen`<sp/>to<sp/>ensure<sp/>that<sp/>we<sp/>don&apos;t<sp/>go<sp/>out<sp/>of<sp/>the<sp/>buffer,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>keeping<sp/>string<sp/>semantics?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SZ&gt;</highlight></codeline>
<codeline lineno="1709" refid="struct_catch_1_1_string_maker_3_01char_0f_s_z_0e_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_string_maker" kindref="compound">StringMaker</ref>&lt;char[SZ]&gt;<sp/>{</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>::Catch::Detail::stringify(std::string{<sp/>str<sp/>});</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SZ&gt;</highlight></codeline>
<codeline lineno="1715" refid="struct_catch_1_1_string_maker_3_01signed_01char_0f_s_z_0e_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_string_maker" kindref="compound">StringMaker</ref>&lt;signed<sp/>char[SZ]&gt;<sp/>{</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>::Catch::Detail::stringify(std::string{<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(str)<sp/>});</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SZ&gt;</highlight></codeline>
<codeline lineno="1721" refid="struct_catch_1_1_string_maker_3_01unsigned_01char_0f_s_z_0e_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_string_maker" kindref="compound">StringMaker</ref>&lt;unsigned<sp/>char[SZ]&gt;<sp/>{</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>::Catch::Detail::stringify(std::string{<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(str)<sp/>});</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"></highlight></codeline>
<codeline lineno="1727"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_CPP17_BYTE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_string_maker" kindref="compound">StringMaker</ref>&lt;std::byte&gt;<sp/>{</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(<ref refid="group__gtx__raw__data_1gacd7fe1f2ad60a57f7d7ad4f1e6836efd" kindref="member">std::byte</ref><sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(CATCH_CONFIG_CPP17_BYTE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="1734" refid="struct_catch_1_1_string_maker_3_01int_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_string_maker" kindref="compound">StringMaker</ref>&lt;int&gt;<sp/>{</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="1738" refid="struct_catch_1_1_string_maker_3_01long_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_string_maker" kindref="compound">StringMaker</ref>&lt;long&gt;<sp/>{</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="1742" refid="struct_catch_1_1_string_maker_3_01long_01long_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_string_maker" kindref="compound">StringMaker</ref>&lt;long<sp/>long&gt;<sp/>{</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="1746" refid="struct_catch_1_1_string_maker_3_01unsigned_01int_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_string_maker" kindref="compound">StringMaker</ref>&lt;unsigned<sp/>int&gt;<sp/>{</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="1750" refid="struct_catch_1_1_string_maker_3_01unsigned_01long_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_string_maker" kindref="compound">StringMaker</ref>&lt;unsigned<sp/>long&gt;<sp/>{</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="1754" refid="struct_catch_1_1_string_maker_3_01unsigned_01long_01long_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_string_maker" kindref="compound">StringMaker</ref>&lt;unsigned<sp/>long<sp/>long&gt;<sp/>{</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"></highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="1759" refid="struct_catch_1_1_string_maker_3_01bool_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_string_maker" kindref="compound">StringMaker</ref>&lt;bool&gt;<sp/>{</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b);</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"></highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="1764" refid="struct_catch_1_1_string_maker_3_01char_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_string_maker" kindref="compound">StringMaker</ref>&lt;char&gt;<sp/>{</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c);</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="1768" refid="struct_catch_1_1_string_maker_3_01signed_01char_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_string_maker" kindref="compound">StringMaker</ref>&lt;signed<sp/>char&gt;<sp/>{</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c);</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="1772" refid="struct_catch_1_1_string_maker_3_01unsigned_01char_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_string_maker" kindref="compound">StringMaker</ref>&lt;unsigned<sp/>char&gt;<sp/>{</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c);</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="1777" refid="struct_catch_1_1_string_maker_3_01std_1_1nullptr__t_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_string_maker" kindref="compound">StringMaker</ref>&lt;std::nullptr_t&gt;<sp/>{</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(std::nullptr_t);</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"></highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="1782" refid="struct_catch_1_1_string_maker_3_01float_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_string_maker" kindref="compound">StringMaker</ref>&lt;float&gt;<sp/>{</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision;</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="1788" refid="struct_catch_1_1_string_maker_3_01double_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_string_maker" kindref="compound">StringMaker</ref>&lt;double&gt;<sp/>{</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision;</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"></highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1794" refid="struct_catch_1_1_string_maker_3_01_t_01_5_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_string_maker" kindref="compound">StringMaker</ref>&lt;T*&gt;<sp/>{</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(U*<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p)<sp/>{</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>::Catch::Detail::rawMemoryToString(p);</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;nullptr&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="1806" refid="struct_catch_1_1_string_maker_3_01_r_01_c_1_1_5_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_string_maker" kindref="compound">StringMaker</ref>&lt;R<sp/>C::*&gt;<sp/>{</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(R<sp/>C::*<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p)<sp/>{</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>::Catch::Detail::rawMemoryToString(p);</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;nullptr&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"></highlight></codeline>
<codeline lineno="1816"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MANAGED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_string_maker" kindref="compound">StringMaker</ref>&lt;T^&gt;<sp/>{</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(<sp/>T^<sp/>ref<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>::Catch::Detail::clrReferenceToString(ref);</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Detail<sp/>{</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIterator,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Sentinel<sp/>=<sp/>InputIterator&gt;</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>rangeToString(InputIterator<sp/>first,<sp/>Sentinel<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReusableStringStream<sp/>rss;</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;{<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first<sp/>!=<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/>::Catch::Detail::stringify(*first);</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(++first;<sp/>first<sp/>!=<sp/>last;<sp/>++first)</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>::Catch::Detail::stringify(*first);</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rss.str();</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"></highlight></codeline>
<codeline lineno="1840"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__OBJC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">StringMaker&lt;NSString*&gt;<sp/>{</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(NSString<sp/>*<sp/>nsstring)<sp/>{</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!nsstring)</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;nil&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(</highlight><highlight class="stringliteral">&quot;@&quot;</highlight><highlight class="normal">)<sp/>+<sp/>[nsstring<sp/>UTF8String];</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">StringMaker&lt;NSObject*&gt;<sp/>{</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(NSObject*<sp/>nsObject)<sp/>{</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>::Catch::Detail::stringify([nsObject<sp/>description]);</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Detail<sp/>{</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>stringify(<sp/>NSString*<sp/>nsstring<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StringMaker&lt;NSString*&gt;::convert(<sp/>nsstring<sp/>);</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>__OBJC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1865"><highlight class="normal"></highlight></codeline>
<codeline lineno="1867"><highlight class="comment">//<sp/>Separate<sp/>std-lib<sp/>types<sp/>stringification,<sp/>so<sp/>it<sp/>can<sp/>be<sp/>selectively<sp/>enabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>means<sp/>that<sp/>we<sp/>do<sp/>not<sp/>bring<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_ENABLE_ALL_STRINGMAKERS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CATCH_CONFIG_ENABLE_PAIR_STRINGMAKER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1872"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CATCH_CONFIG_ENABLE_TUPLE_STRINGMAKER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CATCH_CONFIG_ENABLE_VARIANT_STRINGMAKER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1874"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1875"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CATCH_CONFIG_ENABLE_OPTIONAL_STRINGMAKER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1876"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1877"><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Separate<sp/>std::pair<sp/>specialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1879"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_ENABLE_PAIR_STRINGMAKER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1880"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1881"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">StringMaker&lt;std::pair&lt;T1,<sp/>T2&gt;<sp/>&gt;<sp/>{</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;T1,<sp/>T2&gt;&amp;<sp/>pair)<sp/>{</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReusableStringStream<sp/>rss;</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;{<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>::Catch::Detail::stringify(pair.first)</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>::Catch::Detail::stringify(pair.second)</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rss.str();</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1894"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_ENABLE_PAIR_STRINGMAKER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1896"><highlight class="normal"></highlight></codeline>
<codeline lineno="1897"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_ENABLE_OPTIONAL_STRINGMAKER)<sp/>&amp;&amp;<sp/>defined(CATCH_CONFIG_CPP17_OPTIONAL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;optional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1899"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">StringMaker&lt;std::optional&lt;T&gt;<sp/>&gt;<sp/>{</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::optional&lt;T&gt;&amp;<sp/>optional)<sp/>{</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReusableStringStream<sp/>rss;</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(optional.has_value())<sp/>{</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/>::Catch::Detail::stringify(*optional);</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;{<sp/>}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rss.str();</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1912"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_ENABLE_OPTIONAL_STRINGMAKER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight></codeline>
<codeline lineno="1915"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Separate<sp/>std::tuple<sp/>specialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1916"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_ENABLE_TUPLE_STRINGMAKER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1917"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1918"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Detail<sp/>{</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tuple,</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>N<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>=<sp/>(N<sp/>&lt;<sp/>std::tuple_size&lt;Tuple&gt;::value)</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>TupleElementPrinter<sp/>{</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tuple&amp;<sp/>tuple,<sp/>std::ostream&amp;<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>(N<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>::Catch::Detail::stringify(std::get&lt;N&gt;(tuple));</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TupleElementPrinter&lt;Tuple,<sp/>N<sp/>+<sp/>1&gt;::print(tuple,<sp/>os);</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tuple,</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>N</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TupleElementPrinter&lt;Tuple,<sp/>N,<sp/>false&gt;<sp/>{</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tuple&amp;,<sp/>std::ostream&amp;)<sp/>{}</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"></highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"></highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...Types&gt;</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">StringMaker&lt;std::tuple&lt;Types...&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::tuple&lt;Types...&gt;&amp;<sp/>tuple)<sp/>{</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReusableStringStream<sp/>rss;</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Detail::TupleElementPrinter&lt;std::tuple&lt;Types...&gt;&gt;::print(tuple,<sp/>rss.get());</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rss.str();</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1953"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_ENABLE_TUPLE_STRINGMAKER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal"></highlight></codeline>
<codeline lineno="1956"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_ENABLE_VARIANT_STRINGMAKER)<sp/>&amp;&amp;<sp/>defined(CATCH_CONFIG_CPP17_VARIANT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1957"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;variant&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1958"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">StringMaker&lt;std::<ref refid="structmonostate" kindref="compound">monostate</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::monostate&amp;)<sp/>{</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;{<sp/>}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"></highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Elements&gt;</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">StringMaker&lt;std::variant&lt;Elements...&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::variant&lt;Elements...&gt;&amp;<sp/>variant)<sp/>{</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(variant.valueless_by_exception())<sp/>{</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;{valueless<sp/>variant}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::visit(</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>::Catch::Detail::stringify(<ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>variant</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1981"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_ENABLE_VARIANT_STRINGMAKER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1983"><highlight class="normal"></highlight></codeline>
<codeline lineno="1984"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Import<sp/>begin/<sp/>end<sp/>from<sp/>std<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::begin;</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::end;</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"></highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...&gt;</highlight></codeline>
<codeline lineno="1991" refid="struct_catch_1_1detail_1_1void__type" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1detail_1_1void__type" kindref="compound">void_type</ref><sp/>{</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>void;</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"></highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="1996" refid="struct_catch_1_1detail_1_1is__range__impl" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1detail_1_1is__range__impl" kindref="compound">is_range_impl</ref><sp/>:<sp/>std::false_type<sp/>{</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"></highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2000" refid="struct_catch_1_1detail_1_1is__range__impl_3_01_t_00_01typename_01void__type_3_01decltype_07begin8604ecb9de16ea7789f2f694ac896ffd" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1detail_1_1is__range__impl" kindref="compound">is_range_impl&lt;T, typename void_type&lt;decltype(begin(std::declval&lt;T&gt;</ref>()))&gt;::type&gt;<sp/>:<sp/>std::true_type<sp/>{</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2003"><highlight class="normal"></highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2005" refid="struct_catch_1_1is__range" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1is__range" kindref="compound">is_range</ref><sp/>:<sp/><ref refid="struct_catch_1_1detail_1_1is__range__impl" kindref="compound">detail::is_range_impl</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"></highlight></codeline>
<codeline lineno="2008"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MANAGED)<sp/></highlight><highlight class="comment">//<sp/>Managed<sp/>types<sp/>are<sp/>never<sp/>ranges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1is__range" kindref="compound">is_range</ref>&lt;T^&gt;<sp/>{</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2014"><highlight class="normal"></highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Range&gt;</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>rangeToString(<sp/>Range<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>range<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>::Catch::Detail::rangeToString(<sp/>begin(<sp/>range<sp/>),<sp/>end(<sp/>range<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"></highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>vector&lt;bool&gt;<sp/>specially</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Allocator&gt;</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>rangeToString(<sp/>std::vector&lt;bool,<sp/>Allocator&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>v<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReusableStringStream<sp/>rss;</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;{<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b<sp/>:<sp/>v<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>first<sp/>)</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/>::Catch::Detail::stringify(<sp/>b<sp/>);</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rss.str();</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"></highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R&gt;</highlight></codeline>
<codeline lineno="2038" refid="struct_catch_1_1_string_maker_3_01_r_00_01typename_01std_1_1enable__if_3_01is__range_3_01_r_01_4536d8fedfff6d62432b3dc59b56e1380" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_string_maker" kindref="compound">StringMaker</ref>&lt;R,<sp/>typename<sp/>std::enable_if&lt;is_range&lt;R&gt;::value<sp/>&amp;&amp;<sp/>!::Catch::Detail::IsStreamInsertable&lt;R&gt;::value&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(<sp/>R<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>range<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rangeToString(<sp/>range<sp/>);</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"></highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SZ&gt;</highlight></codeline>
<codeline lineno="2045" refid="struct_catch_1_1_string_maker_3_01_t_0f_s_z_0e_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_string_maker" kindref="compound">StringMaker</ref>&lt;T[SZ]&gt;<sp/>{</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">(&amp;arr)[SZ])<sp/>{</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rangeToString(arr);</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"></highlight></codeline>
<codeline lineno="2051"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2052"><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Separate<sp/>std::chrono::duration<sp/>specialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2054"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2055"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctime&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2056"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ratio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2057"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2058"><highlight class="normal"></highlight></codeline>
<codeline lineno="2059"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"></highlight></codeline>
<codeline lineno="2061"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Ratio&gt;</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ratio_string<sp/>{</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>symbol();</highlight></codeline>
<codeline lineno="2064"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"></highlight></codeline>
<codeline lineno="2066"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Ratio&gt;</highlight></codeline>
<codeline lineno="2067"><highlight class="normal">std::string<sp/>ratio_string&lt;Ratio&gt;::symbol()<sp/>{</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_reusable_string_stream" kindref="compound">Catch::ReusableStringStream</ref><sp/>rss;</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>Ratio::num<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Ratio::den<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rss.str();</highlight></codeline>
<codeline lineno="2072"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ratio_string&lt;std::atto&gt;<sp/>{</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>symbol();</highlight></codeline>
<codeline lineno="2076"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ratio_string&lt;std::femto&gt;<sp/>{</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>symbol();</highlight></codeline>
<codeline lineno="2080"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ratio_string&lt;std::pico&gt;<sp/>{</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>symbol();</highlight></codeline>
<codeline lineno="2084"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ratio_string&lt;std::nano&gt;<sp/>{</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>symbol();</highlight></codeline>
<codeline lineno="2088"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ratio_string&lt;std::micro&gt;<sp/>{</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>symbol();</highlight></codeline>
<codeline lineno="2092"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ratio_string&lt;std::milli&gt;<sp/>{</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>symbol();</highlight></codeline>
<codeline lineno="2096"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"></highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::chrono::duration<sp/>specializations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Value,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Ratio&gt;</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">StringMaker&lt;std::chrono::duration&lt;Value,<sp/>Ratio&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(std::chrono::duration&lt;Value,<sp/>Ratio&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>duration)<sp/>{</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReusableStringStream<sp/>rss;</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/>duration.count()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ratio_string&lt;Ratio&gt;::symbol()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rss.str();</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Value&gt;</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">StringMaker&lt;std::chrono::duration&lt;Value,<sp/>std::ratio&lt;1&gt;&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(std::chrono::duration&lt;Value,<sp/>std::ratio&lt;1&gt;&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>duration)<sp/>{</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReusableStringStream<sp/>rss;</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/>duration.count()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>s&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rss.str();</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Value&gt;</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">StringMaker&lt;std::chrono::duration&lt;Value,<sp/>std::ratio&lt;60&gt;&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(std::chrono::duration&lt;Value,<sp/>std::ratio&lt;60&gt;&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>duration)<sp/>{</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReusableStringStream<sp/>rss;</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/>duration.count()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rss.str();</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Value&gt;</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">StringMaker&lt;std::chrono::duration&lt;Value,<sp/>std::ratio&lt;3600&gt;&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(std::chrono::duration&lt;Value,<sp/>std::ratio&lt;3600&gt;&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>duration)<sp/>{</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReusableStringStream<sp/>rss;</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/>duration.count()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>h&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rss.str();</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"></highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::chrono::time_point<sp/>specialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generic<sp/>time_point<sp/>cannot<sp/>be<sp/>specialized,<sp/>only<sp/>std::chrono::time_point&lt;system_clock&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Clock,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Duration&gt;</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">StringMaker&lt;std::chrono::time_point&lt;Clock,<sp/>Duration&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(std::chrono::time_point&lt;Clock,<sp/>Duration&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>time_point)<sp/>{</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>::Catch::Detail::stringify(time_point.time_since_epoch())<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>since<sp/>epoch&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::chrono::time_point&lt;system_clock&gt;<sp/>specialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Duration&gt;</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">StringMaker&lt;std::chrono::time_point&lt;std::chrono::system_clock,<sp/>Duration&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(std::chrono::time_point&lt;std::chrono::system_clock,<sp/>Duration&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>time_point)<sp/>{</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>converted<sp/>=<sp/>std::chrono::system_clock::to_time_t(time_point);</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"></highlight></codeline>
<codeline lineno="2148"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tm<sp/>timeInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gmtime_s(&amp;timeInfo,<sp/>&amp;converted);</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tm*<sp/>timeInfo<sp/>=<sp/>std::gmtime(&amp;converted);</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2154"><highlight class="normal"></highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>timeStampSize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;2017-01-16T17:06:45Z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>timeStamp[timeStampSize];</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>fmt<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;%Y-%m-%dT%H:%M:%SZ&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"></highlight></codeline>
<codeline lineno="2159"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::strftime(timeStamp,<sp/>timeStampSize,<sp/>fmt,<sp/>&amp;timeInfo);</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::strftime(timeStamp,<sp/>timeStampSize,<sp/>fmt,<sp/>timeInfo);</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(timeStamp);</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2169"><highlight class="normal"></highlight></codeline>
<codeline lineno="2170"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_REGISTER_ENUM(<sp/>enumName,<sp/>...<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="2171"><highlight class="preprocessor">namespace<sp/>Catch<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2172"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>template&lt;&gt;<sp/>struct<sp/>StringMaker&lt;enumName&gt;<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2173"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>std::string<sp/>convert(<sp/>enumName<sp/>value<sp/>)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2174"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>const<sp/>auto&amp;<sp/>enumInfo<sp/>=<sp/>::Catch::getMutableRegistryHub().getMutableEnumValuesRegistry().registerEnum(<sp/>#enumName,<sp/>#__VA_ARGS__,<sp/>{<sp/>__VA_ARGS__<sp/>}<sp/>);<sp/>\</highlight></codeline>
<codeline lineno="2175"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>static_cast&lt;std::string&gt;(enumInfo.lookup(<sp/>static_cast&lt;int&gt;(<sp/>value<sp/>)<sp/>));<sp/>\</highlight></codeline>
<codeline lineno="2176"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2177"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>};<sp/>\</highlight></codeline>
<codeline lineno="2178"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2179"><highlight class="normal"></highlight></codeline>
<codeline lineno="2180"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REGISTER_ENUM(<sp/>enumName,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_REGISTER_ENUM(<sp/>enumName,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2181"><highlight class="normal"></highlight></codeline>
<codeline lineno="2182"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2183"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(pop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2184"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2185"><highlight class="normal"></highlight></codeline>
<codeline lineno="2186"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_tostring.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2187"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iosfwd&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2188"><highlight class="normal"></highlight></codeline>
<codeline lineno="2189"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2190"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(push)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2191"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(disable:4389)<sp/></highlight><highlight class="comment">//<sp/>&apos;==&apos;<sp/>:<sp/>signed/unsigned<sp/>mismatch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2192"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(disable:4018)<sp/></highlight><highlight class="comment">//<sp/>more<sp/>&quot;signed/unsigned<sp/>mismatch&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2193"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(disable:4312)<sp/></highlight><highlight class="comment">//<sp/>Converting<sp/>int<sp/>to<sp/>T*<sp/>using<sp/>reinterpret_cast<sp/>(issue<sp/>on<sp/>x64<sp/>platform)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2194"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(disable:4180)<sp/></highlight><highlight class="comment">//<sp/>qualifier<sp/>applied<sp/>to<sp/>function<sp/>type<sp/>has<sp/>no<sp/>meaning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2195"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(disable:4800)<sp/></highlight><highlight class="comment">//<sp/>Forcing<sp/>result<sp/>to<sp/>true<sp/>or<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2196"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2197"><highlight class="normal"></highlight></codeline>
<codeline lineno="2198"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"></highlight></codeline>
<codeline lineno="2200" refid="struct_catch_1_1_i_transient_expression" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_i_transient_expression" kindref="compound">ITransientExpression</ref><sp/>{</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>isBinaryExpression()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_isBinaryExpression;<sp/>}</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>getResult()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_result;<sp/>}</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>streamReconstructedExpression(<sp/>std::ostream<sp/>&amp;os<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"></highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_i_transient_expression" kindref="compound">ITransientExpression</ref>(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isBinaryExpression,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>)</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>m_isBinaryExpression(<sp/>isBinaryExpression<sp/>),</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_result(<sp/><ref refid="structresult" kindref="compound">result</ref><sp/>)</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"></highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>actually<sp/>need<sp/>a<sp/>virtual<sp/>destructor,<sp/>but<sp/>many<sp/>static<sp/>analysers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>complain<sp/>if<sp/>it&apos;s<sp/>not<sp/>here<sp/>:-(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_i_transient_expression" kindref="compound">~ITransientExpression</ref>();</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"></highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_isBinaryExpression;</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_result;</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"></highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>formatReconstructedExpression(<sp/>std::ostream<sp/>&amp;os,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/>op,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs<sp/>);</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"></highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LhsT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RhsT&gt;</highlight></codeline>
<codeline lineno="2222" refid="class_catch_1_1_binary_expr" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_binary_expr" kindref="compound">BinaryExpr</ref><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_i_transient_expression" kindref="compound">ITransientExpression</ref><sp/>{</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LhsT<sp/>m_lhs;</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/>m_op;</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RhsT<sp/>m_rhs;</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"></highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>streamReconstructedExpression(<sp/>std::ostream<sp/>&amp;os<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>formatReconstructedExpression</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>os,<sp/>Catch::Detail::stringify(<sp/>m_lhs<sp/>),<sp/>m_op,<sp/>Catch::Detail::stringify(<sp/>m_rhs<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_binary_expr" kindref="compound">BinaryExpr</ref>(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>comparisonResult,<sp/>LhsT<sp/>lhs,<sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/>op,<sp/>RhsT<sp/>rhs<sp/>)</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/><ref refid="struct_catch_1_1_i_transient_expression" kindref="compound">ITransientExpression</ref>{<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>comparisonResult<sp/>},</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_lhs(<sp/>lhs<sp/>),</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_op(<sp/>op<sp/>),</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_rhs(<sp/>rhs<sp/>)</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"></highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>&amp;&amp;<sp/>(<sp/>T<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_catch_1_1_binary_expr" kindref="compound">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_catch_1_1always__false" kindref="compound">always_false&lt;T&gt;::value</ref>,</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;chained<sp/>comparisons<sp/>are<sp/>not<sp/>supported<sp/>inside<sp/>assertions,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;wrap<sp/>the<sp/>expression<sp/>inside<sp/>parentheses,<sp/>or<sp/>decompose<sp/>it&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"></highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>||<sp/>(<sp/>T<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_catch_1_1_binary_expr" kindref="compound">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_catch_1_1always__false" kindref="compound">always_false&lt;T&gt;::value</ref>,</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;chained<sp/>comparisons<sp/>are<sp/>not<sp/>supported<sp/>inside<sp/>assertions,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;wrap<sp/>the<sp/>expression<sp/>inside<sp/>parentheses,<sp/>or<sp/>decompose<sp/>it&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"></highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>==<sp/>(<sp/>T<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_catch_1_1_binary_expr" kindref="compound">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_catch_1_1always__false" kindref="compound">always_false&lt;T&gt;::value</ref>,</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;chained<sp/>comparisons<sp/>are<sp/>not<sp/>supported<sp/>inside<sp/>assertions,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;wrap<sp/>the<sp/>expression<sp/>inside<sp/>parentheses,<sp/>or<sp/>decompose<sp/>it&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"></highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>!=<sp/>(<sp/>T<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_catch_1_1_binary_expr" kindref="compound">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_catch_1_1always__false" kindref="compound">always_false&lt;T&gt;::value</ref>,</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;chained<sp/>comparisons<sp/>are<sp/>not<sp/>supported<sp/>inside<sp/>assertions,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;wrap<sp/>the<sp/>expression<sp/>inside<sp/>parentheses,<sp/>or<sp/>decompose<sp/>it&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"></highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>&gt;<sp/>(<sp/>T<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_catch_1_1_binary_expr" kindref="compound">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_catch_1_1always__false" kindref="compound">always_false&lt;T&gt;::value</ref>,</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;chained<sp/>comparisons<sp/>are<sp/>not<sp/>supported<sp/>inside<sp/>assertions,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;wrap<sp/>the<sp/>expression<sp/>inside<sp/>parentheses,<sp/>or<sp/>decompose<sp/>it&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"></highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>&lt;<sp/>(<sp/>T<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_catch_1_1_binary_expr" kindref="compound">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_catch_1_1always__false" kindref="compound">always_false&lt;T&gt;::value</ref>,</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;chained<sp/>comparisons<sp/>are<sp/>not<sp/>supported<sp/>inside<sp/>assertions,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;wrap<sp/>the<sp/>expression<sp/>inside<sp/>parentheses,<sp/>or<sp/>decompose<sp/>it&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"></highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>&gt;=<sp/>(<sp/>T<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_catch_1_1_binary_expr" kindref="compound">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_catch_1_1always__false" kindref="compound">always_false&lt;T&gt;::value</ref>,</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;chained<sp/>comparisons<sp/>are<sp/>not<sp/>supported<sp/>inside<sp/>assertions,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;wrap<sp/>the<sp/>expression<sp/>inside<sp/>parentheses,<sp/>or<sp/>decompose<sp/>it&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"></highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>&lt;=<sp/>(<sp/>T<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_catch_1_1_binary_expr" kindref="compound">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_catch_1_1always__false" kindref="compound">always_false&lt;T&gt;::value</ref>,</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;chained<sp/>comparisons<sp/>are<sp/>not<sp/>supported<sp/>inside<sp/>assertions,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;wrap<sp/>the<sp/>expression<sp/>inside<sp/>parentheses,<sp/>or<sp/>decompose<sp/>it&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"></highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LhsT&gt;</highlight></codeline>
<codeline lineno="2298" refid="class_catch_1_1_unary_expr" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_unary_expr" kindref="compound">UnaryExpr</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_i_transient_expression" kindref="compound">ITransientExpression</ref><sp/>{</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LhsT<sp/>m_lhs;</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"></highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>streamReconstructedExpression(<sp/>std::ostream<sp/>&amp;os<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>Catch::Detail::stringify(<sp/>m_lhs<sp/>);</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"></highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="class_catch_1_1_unary_expr" kindref="compound">UnaryExpr</ref>(<sp/>LhsT<sp/>lhs<sp/>)</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/><ref refid="struct_catch_1_1_i_transient_expression" kindref="compound">ITransientExpression</ref>{<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lhs)<sp/>},</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_lhs(<sp/>lhs<sp/>)</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"></highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Specialised<sp/>comparison<sp/>functions<sp/>to<sp/>handle<sp/>equality<sp/>comparisons<sp/>between<sp/>ints<sp/>and<sp/>pointers<sp/>(NULL<sp/>deduces<sp/>as<sp/>an<sp/>int)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LhsT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RhsT&gt;</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>compareEqual(<sp/>LhsT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/>RhsT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs<sp/>)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lhs<sp/>==<sp/>rhs);<sp/>}</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>compareEqual(<sp/>T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rhs<sp/>)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>==<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>const*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>rhs<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>compareEqual(<sp/>T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>rhs<sp/>)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>==<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>const*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>rhs<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>compareEqual(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lhs,<sp/>T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs<sp/>)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>const*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>lhs<sp/>)<sp/>==<sp/>rhs;<sp/>}</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>compareEqual(<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>lhs,<sp/>T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs<sp/>)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>const*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>lhs<sp/>)<sp/>==<sp/>rhs;<sp/>}</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"></highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LhsT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RhsT&gt;</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>compareNotEqual(<sp/>LhsT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/>RhsT&amp;&amp;<sp/>rhs<sp/>)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lhs<sp/>!=<sp/>rhs);<sp/>}</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>compareNotEqual(<sp/>T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rhs<sp/>)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>!=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>const*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>rhs<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>compareNotEqual(<sp/>T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>rhs<sp/>)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>!=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>const*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>rhs<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>compareNotEqual(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lhs,<sp/>T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs<sp/>)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>const*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>lhs<sp/>)<sp/>!=<sp/>rhs;<sp/>}</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>compareNotEqual(<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>lhs,<sp/>T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs<sp/>)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>const*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>lhs<sp/>)<sp/>!=<sp/>rhs;<sp/>}</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"></highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LhsT&gt;</highlight></codeline>
<codeline lineno="2336" refid="class_catch_1_1_expr_lhs" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_expr_lhs" kindref="compound">ExprLhs</ref><sp/>{</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LhsT<sp/>m_lhs;</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="class_catch_1_1_expr_lhs" kindref="compound">ExprLhs</ref>(<sp/>LhsT<sp/>lhs<sp/>)<sp/>:<sp/>m_lhs(<sp/>lhs<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"></highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RhsT&gt;</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>==<sp/>(<sp/>RhsT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs<sp/>)<sp/>-&gt;<sp/><ref refid="class_catch_1_1_binary_expr" kindref="compound">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>compareEqual(<sp/>m_lhs,<sp/>rhs<sp/>),<sp/>m_lhs,<sp/></highlight><highlight class="stringliteral">&quot;==&quot;</highlight><highlight class="normal">,<sp/>rhs<sp/>};</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>==<sp/>(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>rhs<sp/>)<sp/>-&gt;<sp/><ref refid="class_catch_1_1_binary_expr" kindref="compound">BinaryExpr&lt;LhsT, bool&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>m_lhs<sp/>==<sp/>rhs,<sp/>m_lhs,<sp/></highlight><highlight class="stringliteral">&quot;==&quot;</highlight><highlight class="normal">,<sp/>rhs<sp/>};</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"></highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RhsT&gt;</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>!=<sp/>(<sp/>RhsT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs<sp/>)<sp/>-&gt;<sp/><ref refid="class_catch_1_1_binary_expr" kindref="compound">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>compareNotEqual(<sp/>m_lhs,<sp/>rhs<sp/>),<sp/>m_lhs,<sp/></highlight><highlight class="stringliteral">&quot;!=&quot;</highlight><highlight class="normal">,<sp/>rhs<sp/>};</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>!=<sp/>(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>rhs<sp/>)<sp/>-&gt;<sp/><ref refid="class_catch_1_1_binary_expr" kindref="compound">BinaryExpr&lt;LhsT, bool&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>m_lhs<sp/>!=<sp/>rhs,<sp/>m_lhs,<sp/></highlight><highlight class="stringliteral">&quot;!=&quot;</highlight><highlight class="normal">,<sp/>rhs<sp/>};</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"></highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RhsT&gt;</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>&gt;<sp/>(<sp/>RhsT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs<sp/>)<sp/>-&gt;<sp/><ref refid="class_catch_1_1_binary_expr" kindref="compound">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_lhs<sp/>&gt;<sp/>rhs),<sp/>m_lhs,<sp/></highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">,<sp/>rhs<sp/>};</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RhsT&gt;</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>&lt;<sp/>(<sp/>RhsT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs<sp/>)<sp/>-&gt;<sp/><ref refid="class_catch_1_1_binary_expr" kindref="compound">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_lhs<sp/>&lt;<sp/>rhs),<sp/>m_lhs,<sp/></highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal">,<sp/>rhs<sp/>};</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RhsT&gt;</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>&gt;=<sp/>(<sp/>RhsT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs<sp/>)<sp/>-&gt;<sp/><ref refid="class_catch_1_1_binary_expr" kindref="compound">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_lhs<sp/>&gt;=<sp/>rhs),<sp/>m_lhs,<sp/></highlight><highlight class="stringliteral">&quot;&gt;=&quot;</highlight><highlight class="normal">,<sp/>rhs<sp/>};</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RhsT&gt;</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>&lt;=<sp/>(<sp/>RhsT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs<sp/>)<sp/>-&gt;<sp/><ref refid="class_catch_1_1_binary_expr" kindref="compound">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_lhs<sp/>&lt;=<sp/>rhs),<sp/>m_lhs,<sp/></highlight><highlight class="stringliteral">&quot;&lt;=&quot;</highlight><highlight class="normal">,<sp/>rhs<sp/>};</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RhsT&gt;</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>|<sp/>(RhsT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs)<sp/>-&gt;<sp/><ref refid="class_catch_1_1_binary_expr" kindref="compound">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_lhs<sp/>|<sp/>rhs),<sp/>m_lhs,<sp/></highlight><highlight class="stringliteral">&quot;|&quot;</highlight><highlight class="normal">,<sp/>rhs<sp/>};</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RhsT&gt;</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>&amp;<sp/>(RhsT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs)<sp/>-&gt;<sp/><ref refid="class_catch_1_1_binary_expr" kindref="compound">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_lhs<sp/>&amp;<sp/>rhs),<sp/>m_lhs,<sp/></highlight><highlight class="stringliteral">&quot;&amp;&quot;</highlight><highlight class="normal">,<sp/>rhs<sp/>};</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RhsT&gt;</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>^<sp/>(RhsT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs)<sp/>-&gt;<sp/><ref refid="class_catch_1_1_binary_expr" kindref="compound">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_lhs<sp/>^<sp/>rhs),<sp/>m_lhs,<sp/></highlight><highlight class="stringliteral">&quot;^&quot;</highlight><highlight class="normal">,<sp/>rhs<sp/>};</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"></highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RhsT&gt;</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>&amp;&amp;<sp/>(<sp/>RhsT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/>-&gt;<sp/><ref refid="class_catch_1_1_binary_expr" kindref="compound">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_catch_1_1always__false" kindref="compound">always_false&lt;RhsT&gt;::value</ref>,</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;operator&amp;&amp;<sp/>is<sp/>not<sp/>supported<sp/>inside<sp/>assertions,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;wrap<sp/>the<sp/>expression<sp/>inside<sp/>parentheses,<sp/>or<sp/>decompose<sp/>it&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"></highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RhsT&gt;</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>||<sp/>(<sp/>RhsT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/>-&gt;<sp/><ref refid="class_catch_1_1_binary_expr" kindref="compound">BinaryExpr&lt;LhsT, RhsT const&amp;&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="struct_catch_1_1always__false" kindref="compound">always_false&lt;RhsT&gt;::value</ref>,</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;operator||<sp/>is<sp/>not<sp/>supported<sp/>inside<sp/>assertions,<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;wrap<sp/>the<sp/>expression<sp/>inside<sp/>parentheses,<sp/>or<sp/>decompose<sp/>it&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"></highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>makeUnaryExpr()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="class_catch_1_1_unary_expr" kindref="compound">UnaryExpr&lt;LhsT&gt;</ref><sp/>{</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_catch_1_1_unary_expr" kindref="compound">UnaryExpr&lt;LhsT&gt;</ref>{<sp/>m_lhs<sp/>};</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"></highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleExpression(<sp/><ref refid="struct_catch_1_1_i_transient_expression" kindref="compound">ITransientExpression</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>expr<sp/>);</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"></highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleExpression(<sp/><ref refid="class_catch_1_1_expr_lhs" kindref="compound">ExprLhs&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>expr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handleExpression(<sp/>expr.makeUnaryExpr()<sp/>);</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"></highlight></codeline>
<codeline lineno="2412" refid="struct_catch_1_1_decomposer" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_decomposer" kindref="compound">Decomposer</ref><sp/>{</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>&lt;=<sp/>(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lhs<sp/>)<sp/>-&gt;<sp/><ref refid="class_catch_1_1_expr_lhs" kindref="compound">ExprLhs&lt;T const&amp;&gt;</ref><sp/>{</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_catch_1_1_expr_lhs" kindref="compound">ExprLhs&lt;T const&amp;&gt;</ref>{<sp/>lhs<sp/>};</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"></highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>&lt;=(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>)<sp/>-&gt;<sp/><ref refid="class_catch_1_1_expr_lhs" kindref="compound">ExprLhs&lt;bool&gt;</ref><sp/>{</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_catch_1_1_expr_lhs" kindref="compound">ExprLhs&lt;bool&gt;</ref>{<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>};</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2424"><highlight class="normal"></highlight></codeline>
<codeline lineno="2425"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2426"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(pop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2427"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2428"><highlight class="normal"></highlight></codeline>
<codeline lineno="2429"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_decomposer.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2430"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_interfaces_capture.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2431"><highlight class="normal"></highlight></codeline>
<codeline lineno="2432"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2433"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2434"><highlight class="normal"></highlight></codeline>
<codeline lineno="2435"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"></highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AssertionResult;</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">AssertionInfo;</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SectionInfo;</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SectionEndInfo;</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MessageInfo;</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MessageBuilder;</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Counts;</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">AssertionReaction;</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SourceLineInfo;</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"></highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ITransientExpression;</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IGeneratorTracker;</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"></highlight></codeline>
<codeline lineno="2450"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_ENABLE_BENCHMARKING)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">BenchmarkInfo;</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Duration<sp/>=<sp/>std::chrono::duration&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>std::nano&gt;&gt;</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">BenchmarkStats;</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_ENABLE_BENCHMARKING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2455"><highlight class="normal"></highlight></codeline>
<codeline lineno="2456" refid="struct_catch_1_1_i_result_capture" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_i_result_capture" kindref="compound">IResultCapture</ref><sp/>{</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"></highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_i_result_capture" kindref="compound">~IResultCapture</ref>();</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"></highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sectionStarted(<sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_section_info" kindref="compound">SectionInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>sectionInfo,</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_counts" kindref="compound">Counts</ref>&amp;<sp/>assertions<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sectionEnded(<sp/><ref refid="struct_catch_1_1_section_end_info" kindref="compound">SectionEndInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>endInfo<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sectionEndedEarly(<sp/><ref refid="struct_catch_1_1_section_end_info" kindref="compound">SectionEndInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>endInfo<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"></highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>acquireGeneratorTracker(<sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/>generatorName,<sp/><ref refid="struct_catch_1_1_source_line_info" kindref="compound">SourceLineInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lineInfo<sp/>)<sp/>-&gt;<sp/><ref refid="struct_catch_1_1_i_generator_tracker" kindref="compound">IGeneratorTracker</ref>&amp;<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"></highlight></codeline>
<codeline lineno="2467"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_ENABLE_BENCHMARKING)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>benchmarkPreparing(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>benchmarkStarting(<sp/>BenchmarkInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>benchmarkEnded(<sp/>BenchmarkStats&lt;&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>stats<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>benchmarkFailed(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>error<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_ENABLE_BENCHMARKING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2473"><highlight class="normal"></highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pushScopedMessage(<sp/><ref refid="struct_catch_1_1_message_info" kindref="compound">MessageInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>message<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>popScopedMessage(<sp/><ref refid="struct_catch_1_1_message_info" kindref="compound">MessageInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>message<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"></highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>emplaceUnscopedMessage(<sp/><ref refid="struct_catch_1_1_message_builder" kindref="compound">MessageBuilder</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>builder<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"></highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleFatalErrorCondition(<sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/>message<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"></highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleExpr</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/><sp/><sp/><ref refid="struct_catch_1_1_assertion_info" kindref="compound">AssertionInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structinfo" kindref="compound">info</ref>,</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_i_transient_expression" kindref="compound">ITransientExpression</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>expr,</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_assertion_reaction" kindref="compound">AssertionReaction</ref>&amp;<sp/>reaction<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleMessage</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/><sp/><sp/><ref refid="struct_catch_1_1_assertion_info" kindref="compound">AssertionInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structinfo" kindref="compound">info</ref>,</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultWas::OfType<sp/>resultType,</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>message,</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_assertion_reaction" kindref="compound">AssertionReaction</ref>&amp;<sp/>reaction<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleUnexpectedExceptionNotThrown</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/><sp/><sp/><ref refid="struct_catch_1_1_assertion_info" kindref="compound">AssertionInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structinfo" kindref="compound">info</ref>,</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_assertion_reaction" kindref="compound">AssertionReaction</ref>&amp;<sp/>reaction<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleUnexpectedInflightException</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/><sp/><sp/><ref refid="struct_catch_1_1_assertion_info" kindref="compound">AssertionInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structinfo" kindref="compound">info</ref>,</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>message,</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_assertion_reaction" kindref="compound">AssertionReaction</ref>&amp;<sp/>reaction<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleIncomplete</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/><sp/><sp/><ref refid="struct_catch_1_1_assertion_info" kindref="compound">AssertionInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleNonExpr</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/><sp/><sp/><ref refid="struct_catch_1_1_assertion_info" kindref="compound">AssertionInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<ref refid="structinfo" kindref="compound">info</ref>,</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultWas::OfType<sp/>resultType,</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_assertion_reaction" kindref="compound">AssertionReaction</ref><sp/>&amp;reaction<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"></highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lastAssertionPassed()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assertionPassed()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"></highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Deprecated,<sp/>do<sp/>not<sp/>use:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/>getCurrentTestName()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AssertionResult*<sp/>getLastResult()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>exceptionEarlyReported()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"></highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_i_result_capture" kindref="compound">IResultCapture</ref>&amp;<sp/>getResultCapture();</highlight></codeline>
<codeline lineno="2514"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"></highlight></codeline>
<codeline lineno="2516"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_interfaces_capture.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2517"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"></highlight></codeline>
<codeline lineno="2519" refid="struct_catch_1_1_test_failure_exception" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_test_failure_exception" kindref="compound">TestFailureException</ref>{};</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">AssertionResultData;</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_i_result_capture" kindref="compound">IResultCapture</ref>;</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">RunContext;</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"></highlight></codeline>
<codeline lineno="2524" refid="class_catch_1_1_lazy_expression" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_lazy_expression" kindref="compound">LazyExpression</ref><sp/>{</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_assertion_handler" kindref="compound">AssertionHandler</ref>;</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">AssertionStats;</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">RunContext;</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"></highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_i_transient_expression" kindref="compound">ITransientExpression</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>m_transientExpression<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_isNegated;</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_lazy_expression" kindref="compound">LazyExpression</ref>(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isNegated<sp/>);</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_lazy_expression" kindref="compound">LazyExpression</ref>(<sp/><ref refid="class_catch_1_1_lazy_expression" kindref="compound">LazyExpression</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other<sp/>);</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_lazy_expression" kindref="compound">LazyExpression</ref>&amp;<sp/>operator<sp/>=<sp/>(<sp/><ref refid="class_catch_1_1_lazy_expression" kindref="compound">LazyExpression</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"></highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"></highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>&lt;&lt;<sp/>(<sp/>std::ostream&amp;<sp/>os,<sp/><ref refid="class_catch_1_1_lazy_expression" kindref="compound">LazyExpression</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lazyExpr<sp/>)<sp/>-&gt;<sp/>std::ostream&amp;;</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"></highlight></codeline>
<codeline lineno="2541" refid="struct_catch_1_1_assertion_reaction" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_assertion_reaction" kindref="compound">AssertionReaction</ref><sp/>{</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shouldDebugBreak<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shouldThrow<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"></highlight></codeline>
<codeline lineno="2546" refid="class_catch_1_1_assertion_handler" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_assertion_handler" kindref="compound">AssertionHandler</ref><sp/>{</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_assertion_info" kindref="compound">AssertionInfo</ref><sp/>m_assertionInfo;</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_assertion_reaction" kindref="compound">AssertionReaction</ref><sp/>m_reaction;</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_completed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_i_result_capture" kindref="compound">IResultCapture</ref>&amp;<sp/>m_resultCapture;</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"></highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_assertion_handler" kindref="compound">AssertionHandler</ref></highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/><sp/><sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>macroName,</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_source_line_info" kindref="compound">SourceLineInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lineInfo,</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/>capturedExpression,</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultDisposition::Flags<sp/>resultDisposition<sp/>);</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_assertion_handler" kindref="compound">~AssertionHandler</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m_completed<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_resultCapture.handleIncomplete(<sp/>m_assertionInfo<sp/>);</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"></highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleExpr(<sp/><ref refid="class_catch_1_1_expr_lhs" kindref="compound">ExprLhs&lt;T&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>expr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handleExpr(<sp/>expr.makeUnaryExpr()<sp/>);</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleExpr(<sp/><ref refid="struct_catch_1_1_i_transient_expression" kindref="compound">ITransientExpression</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>expr<sp/>);</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"></highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleMessage(ResultWas::OfType<sp/>resultType,<sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>message);</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"></highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleExceptionThrownAsExpected();</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleUnexpectedExceptionNotThrown();</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleExceptionNotThrownAsExpected();</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleThrowingCallSkipped();</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleUnexpectedInflightException();</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"></highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>complete();</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setCompleted();</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"></highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>query</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>allowThrows()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/>bool;</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"></highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleExceptionMatchExpr(<sp/><ref refid="class_catch_1_1_assertion_handler" kindref="compound">AssertionHandler</ref>&amp;<sp/>handler,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>str,<sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>matcherString<sp/>);</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"></highlight></codeline>
<codeline lineno="2587"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2588"><highlight class="normal"></highlight></codeline>
<codeline lineno="2589"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_assertionhandler.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2590"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_message.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2591"><highlight class="normal"></highlight></codeline>
<codeline lineno="2592"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2593"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2594"><highlight class="normal"></highlight></codeline>
<codeline lineno="2595"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"></highlight></codeline>
<codeline lineno="2597" refid="struct_catch_1_1_message_info" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_message_info" kindref="compound">MessageInfo</ref><sp/>{</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_message_info" kindref="compound">MessageInfo</ref>(<sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_macroName,</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_source_line_info" kindref="compound">SourceLineInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_lineInfo,</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultWas::OfType<sp/>_type<sp/>);</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"></highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/>macroName;</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>message;</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_source_line_info" kindref="compound">SourceLineInfo</ref><sp/>lineInfo;</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultWas::OfType<sp/>type;</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sequence;</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"></highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>==<sp/>(<sp/><ref refid="struct_catch_1_1_message_info" kindref="compound">MessageInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>&lt;<sp/>(<sp/><ref refid="struct_catch_1_1_message_info" kindref="compound">MessageInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>globalCount;</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"></highlight></codeline>
<codeline lineno="2614" refid="struct_catch_1_1_message_stream" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_message_stream" kindref="compound">MessageStream</ref><sp/>{</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"></highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_message_stream" kindref="compound">MessageStream</ref>&amp;<sp/>operator<sp/>&lt;&lt;<sp/>(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_stream<sp/>&lt;&lt;<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"></highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_reusable_string_stream" kindref="compound">ReusableStringStream</ref><sp/>m_stream;</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"></highlight></codeline>
<codeline lineno="2625" refid="struct_catch_1_1_message_builder" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_message_builder" kindref="compound">MessageBuilder</ref><sp/>:<sp/><ref refid="struct_catch_1_1_message_stream" kindref="compound">MessageStream</ref><sp/>{</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_message_builder" kindref="compound">MessageBuilder</ref>(<sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>macroName,</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_source_line_info" kindref="compound">SourceLineInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lineInfo,</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultWas::OfType<sp/>type<sp/>);</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"></highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_message_builder" kindref="compound">MessageBuilder</ref>&amp;<sp/>operator<sp/>&lt;&lt;<sp/>(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_stream<sp/>&lt;&lt;<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"></highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_message_info" kindref="compound">MessageInfo</ref><sp/>m_info;</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"></highlight></codeline>
<codeline lineno="2639" refid="class_catch_1_1_scoped_message" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_scoped_message" kindref="compound">ScopedMessage</ref><sp/>{</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="class_catch_1_1_scoped_message" kindref="compound">ScopedMessage</ref>(<sp/><ref refid="struct_catch_1_1_message_builder" kindref="compound">MessageBuilder</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>builder<sp/>);</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_scoped_message" kindref="compound">ScopedMessage</ref>(<sp/><ref refid="class_catch_1_1_scoped_message" kindref="compound">ScopedMessage</ref>&amp;<sp/>duplicate<sp/>)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_scoped_message" kindref="compound">ScopedMessage</ref>(<sp/><ref refid="class_catch_1_1_scoped_message" kindref="compound">ScopedMessage</ref>&amp;&amp;<sp/>old<sp/>);</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_scoped_message" kindref="compound">~ScopedMessage</ref>();</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"></highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_message_info" kindref="compound">MessageInfo</ref><sp/>m_info;</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_moved;</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"></highlight></codeline>
<codeline lineno="2650" refid="class_catch_1_1_capturer" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_capturer" kindref="compound">Capturer</ref><sp/>{</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;MessageInfo&gt;<sp/>m_messages;</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_i_result_capture" kindref="compound">IResultCapture</ref>&amp;<sp/>m_resultCapture<sp/>=<sp/>getResultCapture();</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m_captured<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_capturer" kindref="compound">Capturer</ref>(<sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/>macroName,<sp/><ref refid="struct_catch_1_1_source_line_info" kindref="compound">SourceLineInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lineInfo,<sp/>ResultWas::OfType<sp/>resultType,<sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/>names<sp/>);</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_capturer" kindref="compound">~Capturer</ref>();</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"></highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>captureValue(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>);</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"></highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>captureValues(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>captureValue(<sp/>index,<sp/>Catch::Detail::stringify(<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"></highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>captureValues(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="classvalue" kindref="compound">value</ref>,<sp/>Ts<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;...<sp/>values<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>captureValue(<sp/>index,<sp/>Catch::Detail::stringify(<ref refid="classvalue" kindref="compound">value</ref>)<sp/>);</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>captureValues(<sp/>index+1,<sp/>values...<sp/>);</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"></highlight></codeline>
<codeline lineno="2672"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2673"><highlight class="normal"></highlight></codeline>
<codeline lineno="2674"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_message.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2675"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_CONFIG_DISABLE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2676"><highlight class="normal"></highlight></codeline>
<codeline lineno="2677"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_CONFIG_DISABLE_STRINGIFICATION)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2678"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CATCH_INTERNAL_STRINGIFY(...)<sp/>#__VA_ARGS__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2679"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2680"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>CATCH_INTERNAL_STRINGIFY(...)<sp/>&quot;Disabled<sp/>by<sp/>CATCH_CONFIG_DISABLE_STRINGIFICATION&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2681"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2682"><highlight class="normal"></highlight></codeline>
<codeline lineno="2683"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_FAST_COMPILE)<sp/>||<sp/>defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2684"><highlight class="normal"></highlight></codeline>
<codeline lineno="2686"><highlight class="comment">//<sp/>Another<sp/>way<sp/>to<sp/>speed-up<sp/>compilation<sp/>is<sp/>to<sp/>omit<sp/>local<sp/>try-catch<sp/>for<sp/>REQUIRE*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2687"><highlight class="normal"></highlight><highlight class="comment">//<sp/>macros.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2688"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_TRY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2689"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_CATCH(<sp/>capturer<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2690"><highlight class="normal"></highlight></codeline>
<codeline lineno="2691"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_FAST_COMPILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2692"><highlight class="normal"></highlight></codeline>
<codeline lineno="2693"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_TRY<sp/>try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2694"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_CATCH(<sp/>handler<sp/>)<sp/>catch(...)<sp/>{<sp/>handler.handleUnexpectedInflightException();<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2695"><highlight class="normal"></highlight></codeline>
<codeline lineno="2696"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2697"><highlight class="normal"></highlight></codeline>
<codeline lineno="2698"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_REACT(<sp/>handler<sp/>)<sp/>handler.complete();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2699"><highlight class="normal"></highlight></codeline>
<codeline lineno="2701"><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_TEST(<sp/>macroName,<sp/>resultDisposition,<sp/>...<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="2702"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2703"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_IGNORE_BUT_WARN(__VA_ARGS__);<sp/>\</highlight></codeline>
<codeline lineno="2704"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::AssertionHandler<sp/>catchAssertionHandler(<sp/>macroName##_catch_sr,<sp/>CATCH_INTERNAL_LINEINFO,<sp/>CATCH_INTERNAL_STRINGIFY(__VA_ARGS__),<sp/>resultDisposition<sp/>);<sp/>\</highlight></codeline>
<codeline lineno="2705"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_TRY<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2706"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_START_WARNINGS_SUPPRESSION<sp/>\</highlight></codeline>
<codeline lineno="2707"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS<sp/>\</highlight></codeline>
<codeline lineno="2708"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>catchAssertionHandler.handleExpr(<sp/>Catch::Decomposer()<sp/>&lt;=<sp/>__VA_ARGS__<sp/>);<sp/>\</highlight></codeline>
<codeline lineno="2709"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION<sp/>\</highlight></codeline>
<codeline lineno="2710"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>INTERNAL_CATCH_CATCH(<sp/>catchAssertionHandler<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="2711"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_REACT(<sp/>catchAssertionHandler<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="2712"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while(<sp/>(void)0,<sp/>(false)<sp/>&amp;&amp;<sp/>static_cast&lt;bool&gt;(<sp/>!!(__VA_ARGS__)<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2713"><highlight class="normal"></highlight></codeline>
<codeline lineno="2715"><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_IF(<sp/>macroName,<sp/>resultDisposition,<sp/>...<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="2716"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>INTERNAL_CATCH_TEST(<sp/>macroName,<sp/>resultDisposition,<sp/>__VA_ARGS__<sp/>);<sp/>\</highlight></codeline>
<codeline lineno="2717"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if(<sp/>Catch::getResultCapture().lastAssertionPassed()<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2718"><highlight class="normal"></highlight></codeline>
<codeline lineno="2720"><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_ELSE(<sp/>macroName,<sp/>resultDisposition,<sp/>...<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="2721"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>INTERNAL_CATCH_TEST(<sp/>macroName,<sp/>resultDisposition,<sp/>__VA_ARGS__<sp/>);<sp/>\</highlight></codeline>
<codeline lineno="2722"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if(<sp/>!Catch::getResultCapture().lastAssertionPassed()<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2723"><highlight class="normal"></highlight></codeline>
<codeline lineno="2725"><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_NO_THROW(<sp/>macroName,<sp/>resultDisposition,<sp/>...<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="2726"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2727"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::AssertionHandler<sp/>catchAssertionHandler(<sp/>macroName##_catch_sr,<sp/>CATCH_INTERNAL_LINEINFO,<sp/>CATCH_INTERNAL_STRINGIFY(__VA_ARGS__),<sp/>resultDisposition<sp/>);<sp/>\</highlight></codeline>
<codeline lineno="2728"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2729"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;void&gt;(__VA_ARGS__);<sp/>\</highlight></codeline>
<codeline lineno="2730"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>catchAssertionHandler.handleExceptionNotThrownAsExpected();<sp/>\</highlight></codeline>
<codeline lineno="2731"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2732"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>catch(<sp/>...<sp/>)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2733"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>catchAssertionHandler.handleUnexpectedInflightException();<sp/>\</highlight></codeline>
<codeline lineno="2734"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2735"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_REACT(<sp/>catchAssertionHandler<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="2736"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while(<sp/>false<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2737"><highlight class="normal"></highlight></codeline>
<codeline lineno="2739"><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_THROWS(<sp/>macroName,<sp/>resultDisposition,<sp/>...<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="2740"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2741"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::AssertionHandler<sp/>catchAssertionHandler(<sp/>macroName##_catch_sr,<sp/>CATCH_INTERNAL_LINEINFO,<sp/>CATCH_INTERNAL_STRINGIFY(__VA_ARGS__),<sp/>resultDisposition);<sp/>\</highlight></codeline>
<codeline lineno="2742"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(<sp/>catchAssertionHandler.allowThrows()<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="2743"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2744"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;void&gt;(__VA_ARGS__);<sp/>\</highlight></codeline>
<codeline lineno="2745"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>catchAssertionHandler.handleUnexpectedExceptionNotThrown();<sp/>\</highlight></codeline>
<codeline lineno="2746"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2747"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>catch(<sp/>...<sp/>)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2748"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>catchAssertionHandler.handleExceptionThrownAsExpected();<sp/>\</highlight></codeline>
<codeline lineno="2749"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2750"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>\</highlight></codeline>
<codeline lineno="2751"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>catchAssertionHandler.handleThrowingCallSkipped();<sp/>\</highlight></codeline>
<codeline lineno="2752"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_REACT(<sp/>catchAssertionHandler<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="2753"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while(<sp/>false<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2754"><highlight class="normal"></highlight></codeline>
<codeline lineno="2756"><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_THROWS_AS(<sp/>macroName,<sp/>exceptionType,<sp/>resultDisposition,<sp/>expr<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="2757"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2758"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::AssertionHandler<sp/>catchAssertionHandler(<sp/>macroName##_catch_sr,<sp/>CATCH_INTERNAL_LINEINFO,<sp/>CATCH_INTERNAL_STRINGIFY(expr)<sp/>&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>CATCH_INTERNAL_STRINGIFY(exceptionType),<sp/>resultDisposition<sp/>);<sp/>\</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(<sp/>catchAssertionHandler.allowThrows()<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;void&gt;(expr);<sp/>\</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>catchAssertionHandler.handleUnexpectedExceptionNotThrown();<sp/>\</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>catch(<sp/>exceptionType<sp/>const&amp;<sp/>)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>catchAssertionHandler.handleExceptionThrownAsExpected();<sp/>\</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>catch(<sp/>...<sp/>)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>catchAssertionHandler.handleUnexpectedInflightException();<sp/>\</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>\</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>catchAssertionHandler.handleThrowingCallSkipped();<sp/>\</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_REACT(<sp/>catchAssertionHandler<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>while(<sp/>false<sp/>)</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"></highlight></codeline>
<codeline lineno="2776"><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_MSG(<sp/>macroName,<sp/>messageType,<sp/>resultDisposition,<sp/>...<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="2777"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2778"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::AssertionHandler<sp/>catchAssertionHandler(<sp/>macroName##_catch_sr,<sp/>CATCH_INTERNAL_LINEINFO,<sp/>Catch::StringRef(),<sp/>resultDisposition<sp/>);<sp/>\</highlight></codeline>
<codeline lineno="2779"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>catchAssertionHandler.handleMessage(<sp/>messageType,<sp/>(<sp/>Catch::MessageStream()<sp/>&lt;&lt;<sp/>__VA_ARGS__<sp/>+<sp/>::Catch::StreamEndStop()<sp/>).m_stream.str()<sp/>);<sp/>\</highlight></codeline>
<codeline lineno="2780"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_REACT(<sp/>catchAssertionHandler<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="2781"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while(<sp/>false<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2782"><highlight class="normal"></highlight></codeline>
<codeline lineno="2784"><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_CAPTURE(<sp/>varName,<sp/>macroName,<sp/>...<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="2785"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>auto<sp/>varName<sp/>=<sp/>Catch::Capturer(<sp/>macroName,<sp/>CATCH_INTERNAL_LINEINFO,<sp/>Catch::ResultWas::Info,<sp/>#__VA_ARGS__<sp/>);<sp/>\</highlight></codeline>
<codeline lineno="2786"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>varName.captureValues(<sp/>0,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2787"><highlight class="normal"></highlight></codeline>
<codeline lineno="2789"><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_INFO(<sp/>macroName,<sp/>log<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="2790"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Catch::ScopedMessage<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>scopedMessage<sp/>)(<sp/>Catch::MessageBuilder(<sp/>macroName##_catch_sr,<sp/>CATCH_INTERNAL_LINEINFO,<sp/>Catch::ResultWas::Info<sp/>)<sp/>&lt;&lt;<sp/>log<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2791"><highlight class="normal"></highlight></codeline>
<codeline lineno="2793"><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_UNSCOPED_INFO(<sp/>macroName,<sp/>log<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="2794"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Catch::getResultCapture().emplaceUnscopedMessage(<sp/>Catch::MessageBuilder(<sp/>macroName##_catch_sr,<sp/>CATCH_INTERNAL_LINEINFO,<sp/>Catch::ResultWas::Info<sp/>)<sp/>&lt;&lt;<sp/>log<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2795"><highlight class="normal"></highlight></codeline>
<codeline lineno="2797"><highlight class="comment">//<sp/>Although<sp/>this<sp/>is<sp/>matcher-based,<sp/>it<sp/>can<sp/>be<sp/>used<sp/>with<sp/>just<sp/>a<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2798"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_THROWS_STR_MATCHES(<sp/>macroName,<sp/>resultDisposition,<sp/>matcher,<sp/>...<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="2799"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2800"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::AssertionHandler<sp/>catchAssertionHandler(<sp/>macroName##_catch_sr,<sp/>CATCH_INTERNAL_LINEINFO,<sp/>CATCH_INTERNAL_STRINGIFY(__VA_ARGS__)<sp/>&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>CATCH_INTERNAL_STRINGIFY(matcher),<sp/>resultDisposition<sp/>);<sp/>\</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(<sp/>catchAssertionHandler.allowThrows()<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;void&gt;(__VA_ARGS__);<sp/>\</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>catchAssertionHandler.handleUnexpectedExceptionNotThrown();<sp/>\</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>catch(<sp/>...<sp/>)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::handleExceptionMatchExpr(<sp/>catchAssertionHandler,<sp/>matcher,<sp/>#matcher##_catch_sr<sp/>);<sp/>\</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>\</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>catchAssertionHandler.handleThrowingCallSkipped();<sp/>\</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_REACT(<sp/>catchAssertionHandler<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>while(<sp/>false<sp/>)</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"></highlight></codeline>
<codeline lineno="2814"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_DISABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2815"><highlight class="normal"></highlight></codeline>
<codeline lineno="2816"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_capture.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2817"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_section.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2818"><highlight class="normal"></highlight></codeline>
<codeline lineno="2819"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_section_info.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2820"><highlight class="normal"></highlight></codeline>
<codeline lineno="2821"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_totals.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2822"><highlight class="normal"></highlight></codeline>
<codeline lineno="2823"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2824"><highlight class="normal"></highlight></codeline>
<codeline lineno="2825"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"></highlight></codeline>
<codeline lineno="2827" refid="struct_catch_1_1_counts" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_counts" kindref="compound">Counts</ref><sp/>{</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_counts" kindref="compound">Counts</ref><sp/>operator<sp/>-<sp/>(<sp/><ref refid="struct_catch_1_1_counts" kindref="compound">Counts</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_counts" kindref="compound">Counts</ref>&amp;<sp/>operator<sp/>+=<sp/>(<sp/><ref refid="struct_catch_1_1_counts" kindref="compound">Counts</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other<sp/>);</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"></highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>total()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allPassed()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allOk()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"></highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>passed<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>failed<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>failedButOk<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"></highlight></codeline>
<codeline lineno="2840" refid="struct_catch_1_1_totals" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_totals" kindref="compound">Totals</ref><sp/>{</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"></highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_totals" kindref="compound">Totals</ref><sp/>operator<sp/>-<sp/>(<sp/><ref refid="struct_catch_1_1_totals" kindref="compound">Totals</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_totals" kindref="compound">Totals</ref>&amp;<sp/>operator<sp/>+=<sp/>(<sp/><ref refid="struct_catch_1_1_totals" kindref="compound">Totals</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other<sp/>);</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"></highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_totals" kindref="compound">Totals</ref><sp/>delta(<sp/><ref refid="struct_catch_1_1_totals" kindref="compound">Totals</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>prevTotals<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"></highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_counts" kindref="compound">Counts</ref><sp/>assertions;</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_counts" kindref="compound">Counts</ref><sp/>testCases;</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2851"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"></highlight></codeline>
<codeline lineno="2853"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_totals.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2854"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2855"><highlight class="normal"></highlight></codeline>
<codeline lineno="2856"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"></highlight></codeline>
<codeline lineno="2858" refid="struct_catch_1_1_section_info" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_section_info" kindref="compound">SectionInfo</ref><sp/>{</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_section_info" kindref="compound">SectionInfo</ref></highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/><sp/><sp/><ref refid="struct_catch_1_1_source_line_info" kindref="compound">SourceLineInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_lineInfo,</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_name<sp/>);</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"></highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Deprecated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_section_info" kindref="compound">SectionInfo</ref></highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/><sp/><sp/><ref refid="struct_catch_1_1_source_line_info" kindref="compound">SourceLineInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_lineInfo,</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_name,</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/>:<sp/><ref refid="struct_catch_1_1_section_info" kindref="compound">SectionInfo</ref>(<sp/>_lineInfo,<sp/>_name<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"></highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name;</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>description;<sp/></highlight><highlight class="comment">//<sp/>!Deprecated:<sp/>this<sp/>will<sp/>always<sp/>be<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_source_line_info" kindref="compound">SourceLineInfo</ref><sp/>lineInfo;</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"></highlight></codeline>
<codeline lineno="2874" refid="struct_catch_1_1_section_end_info" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_section_end_info" kindref="compound">SectionEndInfo</ref><sp/>{</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_section_info" kindref="compound">SectionInfo</ref><sp/>sectionInfo;</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_counts" kindref="compound">Counts</ref><sp/>prevAssertions;</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>durationInSeconds;</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"></highlight></codeline>
<codeline lineno="2880"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2881"><highlight class="normal"></highlight></codeline>
<codeline lineno="2882"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_section_info.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2883"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_timer.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2884"><highlight class="normal"></highlight></codeline>
<codeline lineno="2885"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2886"><highlight class="normal"></highlight></codeline>
<codeline lineno="2887"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"></highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>getCurrentNanosecondsSinceEpoch()<sp/>-&gt;<sp/><ref refid="group__gtc__type__precision_1ga058f57c19e1befdcf12498944bd73e69" kindref="member">uint64_t</ref>;</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>getEstimatedClockResolution()<sp/>-&gt;<sp/><ref refid="group__gtc__type__precision_1ga058f57c19e1befdcf12498944bd73e69" kindref="member">uint64_t</ref>;</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"></highlight></codeline>
<codeline lineno="2892" refid="class_catch_1_1_timer" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_timer" kindref="compound">Timer</ref><sp/>{</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>m_nanoseconds<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>start();</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>getElapsedNanoseconds()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="group__gtc__type__precision_1ga058f57c19e1befdcf12498944bd73e69" kindref="member">uint64_t</ref>;</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>getElapsedMicroseconds()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="group__gtc__type__precision_1ga058f57c19e1befdcf12498944bd73e69" kindref="member">uint64_t</ref>;</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>getElapsedMilliseconds()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int;</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>getElapsedSeconds()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/>double;</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"></highlight></codeline>
<codeline lineno="2902"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2903"><highlight class="normal"></highlight></codeline>
<codeline lineno="2904"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_timer.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2905"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2906"><highlight class="normal"></highlight></codeline>
<codeline lineno="2907"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"></highlight></codeline>
<codeline lineno="2909" refid="class_catch_1_1_section" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_section" kindref="compound">Section</ref><sp/>:<sp/><ref refid="class_catch_1_1_non_copyable" kindref="compound">NonCopyable</ref><sp/>{</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_section" kindref="compound">Section</ref>(<sp/><ref refid="struct_catch_1_1_section_info" kindref="compound">SectionInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>);</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_section" kindref="compound">~Section</ref>();</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"></highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>indicates<sp/>whether<sp/>the<sp/>section<sp/>should<sp/>be<sp/>executed<sp/>or<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"></highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_section_info" kindref="compound">SectionInfo</ref><sp/>m_info;</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"></highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>m_name;</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_counts" kindref="compound">Counts</ref><sp/>m_assertions;</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_sectionIncluded;</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_timer" kindref="compound">Timer</ref><sp/>m_timer;</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"></highlight></codeline>
<codeline lineno="2926"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2927"><highlight class="normal"></highlight></codeline>
<codeline lineno="2928"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_SECTION(<sp/>...<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="2929"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CATCH_INTERNAL_START_WARNINGS_SUPPRESSION<sp/>\</highlight></codeline>
<codeline lineno="2930"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS<sp/>\</highlight></codeline>
<codeline lineno="2931"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if(<sp/>Catch::Section<sp/>const&amp;<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>catch_internal_Section<sp/>)<sp/>=<sp/>Catch::SectionInfo(<sp/>CATCH_INTERNAL_LINEINFO,<sp/>__VA_ARGS__<sp/>)<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="2932"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2933"><highlight class="normal"></highlight></codeline>
<codeline lineno="2934"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_DYNAMIC_SECTION(<sp/>...<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="2935"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CATCH_INTERNAL_START_WARNINGS_SUPPRESSION<sp/>\</highlight></codeline>
<codeline lineno="2936"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CATCH_INTERNAL_SUPPRESS_UNUSED_WARNINGS<sp/>\</highlight></codeline>
<codeline lineno="2937"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if(<sp/>Catch::Section<sp/>const&amp;<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>catch_internal_Section<sp/>)<sp/>=<sp/>Catch::SectionInfo(<sp/>CATCH_INTERNAL_LINEINFO,<sp/>(Catch::ReusableStringStream()<sp/>&lt;&lt;<sp/>__VA_ARGS__).str()<sp/>)<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="2938"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2939"><highlight class="normal"></highlight></codeline>
<codeline lineno="2940"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_section.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2941"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_interfaces_exception.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2942"><highlight class="normal"></highlight></codeline>
<codeline lineno="2943"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_interfaces_registry_hub.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2944"><highlight class="normal"></highlight></codeline>
<codeline lineno="2945"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2946"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2947"><highlight class="normal"></highlight></codeline>
<codeline lineno="2948"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"></highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TestCase;</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ITestCaseRegistry;</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IExceptionTranslatorRegistry;</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IExceptionTranslator;</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IReporterRegistry;</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IReporterFactory;</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ITagAliasRegistry;</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IMutableEnumValuesRegistry;</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"></highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">StartupExceptionRegistry;</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"></highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>IReporterFactoryPtr<sp/>=<sp/>std::shared_ptr&lt;IReporterFactory&gt;;</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"></highlight></codeline>
<codeline lineno="2963" refid="struct_catch_1_1_i_registry_hub" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_i_registry_hub" kindref="compound">IRegistryHub</ref><sp/>{</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_i_registry_hub" kindref="compound">~IRegistryHub</ref>();</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"></highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>IReporterRegistry<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>getReporterRegistry()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_i_test_case_registry" kindref="compound">ITestCaseRegistry</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>getTestCaseRegistry()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>ITagAliasRegistry<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>getTagAliasRegistry()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_i_exception_translator_registry" kindref="compound">IExceptionTranslatorRegistry</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>getExceptionTranslatorRegistry()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"></highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>StartupExceptionRegistry<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>getStartupExceptionRegistry()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"></highlight></codeline>
<codeline lineno="2974" refid="struct_catch_1_1_i_mutable_registry_hub" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_i_mutable_registry_hub" kindref="compound">IMutableRegistryHub</ref><sp/>{</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_i_mutable_registry_hub" kindref="compound">~IMutableRegistryHub</ref>();</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>registerReporter(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name,<sp/>IReporterFactoryPtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>factory<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>registerListener(<sp/>IReporterFactoryPtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>factory<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>registerTest(<sp/><ref refid="class_catch_1_1_test_case" kindref="compound">TestCase</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testInfo<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>registerTranslator(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_i_exception_translator" kindref="compound">IExceptionTranslator</ref>*<sp/>translator<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>registerTagAlias(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>alias,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>tag,<sp/><ref refid="struct_catch_1_1_source_line_info" kindref="compound">SourceLineInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lineInfo<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>registerStartupException()<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_i_mutable_enum_values_registry" kindref="compound">IMutableEnumValuesRegistry</ref>&amp;<sp/>getMutableEnumValuesRegistry()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"></highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_i_registry_hub" kindref="compound">IRegistryHub</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>getRegistryHub();</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_i_mutable_registry_hub" kindref="compound">IMutableRegistryHub</ref>&amp;<sp/>getMutableRegistryHub();</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cleanUp();</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>translateActiveException();</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"></highlight></codeline>
<codeline lineno="2990"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"></highlight></codeline>
<codeline lineno="2992"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_interfaces_registry_hub.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2993"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_DISABLE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2994"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>INTERNAL_CATCH_TRANSLATE_EXCEPTION_NO_REG(<sp/>translatorName,<sp/>signature)<sp/>\</highlight></codeline>
<codeline lineno="2995"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>std::string<sp/>translatorName(<sp/>signature<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2996"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2997"><highlight class="normal"></highlight></codeline>
<codeline lineno="2998"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;exception&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2999"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3000"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3001"><highlight class="normal"></highlight></codeline>
<codeline lineno="3002"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>exceptionTranslateFunction<sp/>=<sp/>std::string(*)();</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"></highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IExceptionTranslator;</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ExceptionTranslators<sp/>=<sp/>std::vector&lt;std::unique_ptr&lt;IExceptionTranslator<sp/>const&gt;&gt;;</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"></highlight></codeline>
<codeline lineno="3008" refid="struct_catch_1_1_i_exception_translator" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_i_exception_translator" kindref="compound">IExceptionTranslator</ref><sp/>{</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_i_exception_translator" kindref="compound">~IExceptionTranslator</ref>();</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/>translate(<sp/>ExceptionTranslators::const_iterator<sp/>it,<sp/>ExceptionTranslators::const_iterator<sp/>itEnd<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"></highlight></codeline>
<codeline lineno="3013" refid="struct_catch_1_1_i_exception_translator_registry" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_i_exception_translator_registry" kindref="compound">IExceptionTranslatorRegistry</ref><sp/>{</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_i_exception_translator_registry" kindref="compound">~IExceptionTranslatorRegistry</ref>();</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"></highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/>translateActiveException()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"></highlight></codeline>
<codeline lineno="3019" refid="class_catch_1_1_exception_translator_registrar" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_exception_translator_registrar" kindref="compound">ExceptionTranslatorRegistrar</ref><sp/>{</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ExceptionTranslator<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_i_exception_translator" kindref="compound">IExceptionTranslator</ref><sp/>{</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"></highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExceptionTranslator(<sp/>std::string(*translateFunction)(<sp/>T&amp;<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_translateFunction(<sp/>translateFunction<sp/>)</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"></highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="group__gtc__matrix__transform_1ga67d8473d6b293d1bb2b4eaf249795cab" kindref="member">translate</ref>(<sp/>ExceptionTranslators::const_iterator<sp/>it,<sp/>ExceptionTranslators::const_iterator<sp/>itEnd<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>it<sp/>==<sp/>itEnd<sp/>)</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::rethrow_exception(std::current_exception());</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*it)-&gt;translate(<sp/>it+1,<sp/>itEnd<sp/>);</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(<sp/>T&amp;<sp/>ex<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_translateFunction(<sp/>ex<sp/>);</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"></highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string(*m_translateFunction)(<sp/>T&amp;<sp/>);</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"></highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_exception_translator_registrar" kindref="compound">ExceptionTranslatorRegistrar</ref>(<sp/>std::string(*translateFunction)(<sp/>T&amp;<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getMutableRegistryHub().registerTranslator</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ExceptionTranslator&lt;T&gt;(<sp/>translateFunction<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3055"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"></highlight></codeline>
<codeline lineno="3058"><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_TRANSLATE_EXCEPTION2(<sp/>translatorName,<sp/>signature<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="3059"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>std::string<sp/>translatorName(<sp/>signature<sp/>);<sp/>\</highlight></codeline>
<codeline lineno="3060"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CATCH_INTERNAL_START_WARNINGS_SUPPRESSION<sp/>\</highlight></codeline>
<codeline lineno="3061"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS<sp/>\</highlight></codeline>
<codeline lineno="3062"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>namespace{<sp/>Catch::ExceptionTranslatorRegistrar<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>catch_internal_ExceptionRegistrar<sp/>)(<sp/>&amp;translatorName<sp/>);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="3063"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION<sp/>\</highlight></codeline>
<codeline lineno="3064"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>std::string<sp/>translatorName(<sp/>signature<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3065"><highlight class="normal"></highlight></codeline>
<codeline lineno="3066"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_TRANSLATE_EXCEPTION(<sp/>signature<sp/>)<sp/>INTERNAL_CATCH_TRANSLATE_EXCEPTION2(<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>catch_internal_ExceptionTranslator<sp/>),<sp/>signature<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3067"><highlight class="normal"></highlight></codeline>
<codeline lineno="3068"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_interfaces_exception.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3069"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_approx.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3070"><highlight class="normal"></highlight></codeline>
<codeline lineno="3071"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3072"><highlight class="normal"></highlight></codeline>
<codeline lineno="3073"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Detail<sp/>{</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"></highlight></codeline>
<codeline lineno="3076" refid="class_catch_1_1_detail_1_1_approx" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref><sp/>{</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>equalityComparisonImpl(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Validates<sp/>the<sp/>new<sp/>margin<sp/>(margin<sp/>&gt;=<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>out-of-line<sp/>to<sp/>avoid<sp/>including<sp/>stdexcept<sp/>in<sp/>the<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setMargin(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>margin);</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Validates<sp/>the<sp/>new<sp/>epsilon<sp/>(0<sp/>&lt;<sp/>epsilon<sp/>&lt;<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>out-of-line<sp/>to<sp/>avoid<sp/>including<sp/>stdexcept<sp/>in<sp/>the<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setEpsilon(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon);</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"></highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref><sp/>(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>);</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"></highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref><sp/>custom();</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"></highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref><sp/>operator-()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"></highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_constructible&lt;double,<sp/>T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref><sp/>operator()(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref><sp/>approx(<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classvalue" kindref="compound">value</ref>)<sp/>);</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>approx.m_epsilon<sp/>=<sp/>m_epsilon;</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>approx.m_margin<sp/>=<sp/>m_margin;</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>approx.m_scale<sp/>=<sp/>m_scale;</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>approx;</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"></highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_constructible&lt;double,<sp/>T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref>(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>):<sp/><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classvalue" kindref="compound">value</ref>))</highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"></highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_constructible&lt;double,<sp/>T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>==<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>lhs,<sp/><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lhs_v<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lhs);</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rhs.equalityComparisonImpl(lhs_v);</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"></highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_constructible&lt;double,<sp/>T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>==<sp/>(<sp/><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>rhs<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>operator==(<sp/>rhs,<sp/>lhs<sp/>);</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3116"><highlight class="normal"></highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_constructible&lt;double,<sp/>T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>!=<sp/>(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!operator==(<sp/>lhs,<sp/>rhs<sp/>);</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"></highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_constructible&lt;double,<sp/>T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>!=<sp/>(<sp/><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!operator==(<sp/>rhs,<sp/>lhs<sp/>);</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"></highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_constructible&lt;double,<sp/>T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>&lt;=<sp/>(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lhs)<sp/>&lt;<sp/>rhs.m_value<sp/>||<sp/>lhs<sp/>==<sp/>rhs;</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"></highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_constructible&lt;double,<sp/>T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>&lt;=<sp/>(<sp/><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.m_value<sp/>&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rhs)<sp/>||<sp/>lhs<sp/>==<sp/>rhs;</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"></highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_constructible&lt;double,<sp/>T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>&gt;=<sp/>(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lhs)<sp/>&gt;<sp/>rhs.m_value<sp/>||<sp/>lhs<sp/>==<sp/>rhs;</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"></highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_constructible&lt;double,<sp/>T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>&gt;=<sp/>(<sp/><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.m_value<sp/>&gt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rhs)<sp/>||<sp/>lhs<sp/>==<sp/>rhs;</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"></highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_constructible&lt;double,<sp/>T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref>&amp;<sp/>epsilon(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>newEpsilon<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilonAsDouble<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(newEpsilon);</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setEpsilon(epsilonAsDouble);</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"></highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_constructible&lt;double,<sp/>T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref>&amp;<sp/>margin(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>newMargin<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>marginAsDouble<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(newMargin);</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setMargin(marginAsDouble);</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"></highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_constructible&lt;double,<sp/>T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref>&amp;<sp/>scale(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>newScale<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_scale<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(newScale);</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"></highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>toString()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"></highlight></codeline>
<codeline lineno="3169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m_epsilon;</highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m_margin;</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m_scale;</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m_value;</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3175"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3176"><highlight class="normal"></highlight></codeline>
<codeline lineno="3177"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">literals<sp/>{</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Detail::Approx</ref><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>_a(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val);</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Detail::Approx</ref><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>_a(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val);</highlight></codeline>
<codeline lineno="3180"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>literals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3181"><highlight class="normal"></highlight></codeline>
<codeline lineno="3182"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="3183" refid="struct_catch_1_1_string_maker_3_01_catch_1_1_detail_1_1_approx_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_string_maker" kindref="compound">StringMaker</ref>&lt;Catch::<ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Detail::Approx</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>convert(<ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Catch::Detail::Approx</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="3185"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"></highlight></codeline>
<codeline lineno="3187"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3188"><highlight class="normal"></highlight></codeline>
<codeline lineno="3189"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_approx.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3190"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_string_manip.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3191"><highlight class="normal"></highlight></codeline>
<codeline lineno="3192"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3193"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iosfwd&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3194"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3195"><highlight class="normal"></highlight></codeline>
<codeline lineno="3196"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="3197"><highlight class="normal"></highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>startsWith(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>s,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>prefix<sp/>);</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>startsWith(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>prefix<sp/>);</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>endsWith(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>s,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>suffix<sp/>);</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>endsWith(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>suffix<sp/>);</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>contains(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>s,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>infix<sp/>);</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toLowerInPlace(<sp/>std::string&amp;<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>toLower(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>trim(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>str<sp/>);</highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/><sp/><sp/>StringRef<sp/>trim(StringRef<sp/>ref);</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"></highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>!!!<sp/>Be<sp/>aware,<sp/>returns<sp/>refs<sp/>into<sp/>original<sp/>string<sp/>-<sp/>make<sp/>sure<sp/>original<sp/>string<sp/>outlives<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;StringRef&gt;<sp/>splitStringRef(<sp/>StringRef<sp/>str,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>delimiter<sp/>);</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>replaceInPlace(<sp/>std::string&amp;<sp/>str,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>replaceThis,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>withThis<sp/>);</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"></highlight></codeline>
<codeline lineno="3214" refid="struct_catch_1_1pluralise" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1pluralise" kindref="compound">pluralise</ref><sp/>{</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1pluralise" kindref="compound">pluralise</ref>(<sp/>std::size_t<sp/>count,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>label<sp/>);</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"></highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>std::ostream&amp;<sp/>operator<sp/>&lt;&lt;<sp/>(<sp/>std::ostream&amp;<sp/>os,<sp/><ref refid="struct_catch_1_1pluralise" kindref="compound">pluralise</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>pluraliser<sp/>);</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"></highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>m_count;</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>m_label;</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"></highlight></codeline>
<codeline lineno="3224"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_string_manip.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3225"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CATCH_CONFIG_DISABLE_MATCHERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3226"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_capture_matchers.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3227"><highlight class="normal"></highlight></codeline>
<codeline lineno="3228"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_matchers.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3229"><highlight class="normal"></highlight></codeline>
<codeline lineno="3230"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3231"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3232"><highlight class="normal"></highlight></codeline>
<codeline lineno="3233"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Matchers<sp/>{</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Impl<sp/>{</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"></highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgT&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MatchAllOf;</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgT&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MatchAnyOf;</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgT&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MatchNotOf;</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"></highlight></codeline>
<codeline lineno="3241" refid="class_catch_1_1_matchers_1_1_impl_1_1_matcher_untyped_base" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_matchers_1_1_impl_1_1_matcher_untyped_base" kindref="compound">MatcherUntypedBase</ref><sp/>{</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_matchers_1_1_impl_1_1_matcher_untyped_base" kindref="compound">MatcherUntypedBase</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_matchers_1_1_impl_1_1_matcher_untyped_base" kindref="compound">MatcherUntypedBase</ref><sp/>(<sp/><ref refid="class_catch_1_1_matchers_1_1_impl_1_1_matcher_untyped_base" kindref="compound">MatcherUntypedBase</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_matchers_1_1_impl_1_1_matcher_untyped_base" kindref="compound">MatcherUntypedBase</ref>&amp;<sp/>operator<sp/>=<sp/>(<sp/><ref refid="class_catch_1_1_matchers_1_1_impl_1_1_matcher_untyped_base" kindref="compound">MatcherUntypedBase</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>toString()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"></highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="class_catch_1_1_matchers_1_1_impl_1_1_matcher_untyped_base" kindref="compound">~MatcherUntypedBase</ref>();</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/>describe()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>std::string<sp/>m_cachedToString;</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"></highlight></codeline>
<codeline lineno="3254"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3255"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>clang<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3256"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wnon-virtual-dtor&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3257"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3258"><highlight class="normal"></highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ObjectT&gt;</highlight></codeline>
<codeline lineno="3260" refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_method" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_method" kindref="compound">MatcherMethod</ref><sp/>{</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match(<sp/>ObjectT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>arg<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3263"><highlight class="normal"></highlight></codeline>
<codeline lineno="3264"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__OBJC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Hack<sp/>to<sp/>fix<sp/>Catch<sp/>GH<sp/>issue<sp/>#1661.<sp/>Could<sp/>use<sp/>id<sp/>for<sp/>generic<sp/>Object<sp/>support.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>of<sp/>const<sp/>for<sp/>Object<sp/>pointers<sp/>is<sp/>very<sp/>uncommon<sp/>and<sp/>under<sp/>ARC<sp/>it<sp/>causes<sp/>some<sp/>kind<sp/>of<sp/>signature<sp/>mismatch<sp/>that<sp/>breaks<sp/>compilation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_method" kindref="compound">MatcherMethod</ref>&lt;NSString*&gt;<sp/>{</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match(<sp/>NSString*<sp/>arg<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3271"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3272"><highlight class="normal"></highlight></codeline>
<codeline lineno="3273"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3274"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>clang<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3275"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3276"><highlight class="normal"></highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3278" refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base" kindref="compound">MatcherBase</ref><sp/>:<sp/><ref refid="class_catch_1_1_matchers_1_1_impl_1_1_matcher_untyped_base" kindref="compound">MatcherUntypedBase</ref>,<sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_method" kindref="compound">MatcherMethod</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"></highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_match_all_of" kindref="compound">MatchAllOf&lt;T&gt;</ref><sp/>operator<sp/>&amp;&amp;<sp/>(<sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base" kindref="compound">MatcherBase</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_match_any_of" kindref="compound">MatchAnyOf&lt;T&gt;</ref><sp/>operator<sp/>||<sp/>(<sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base" kindref="compound">MatcherBase</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_match_not_of" kindref="compound">MatchNotOf&lt;T&gt;</ref><sp/>operator<sp/>!<sp/>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"></highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgT&gt;</highlight></codeline>
<codeline lineno="3286" refid="struct_catch_1_1_matchers_1_1_impl_1_1_match_all_of" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_match_all_of" kindref="compound">MatchAllOf</ref><sp/>:<sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base" kindref="compound">MatcherBase</ref>&lt;ArgT&gt;<sp/>{</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match(<sp/>ArgT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>arg<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>matcher<sp/>:<sp/>m_matchers<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!matcher-&gt;match(arg))</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>describe()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>description;</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>description.reserve(<sp/>4<sp/>+<sp/>m_matchers.size()*32<sp/>);</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>description<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;(<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>matcher<sp/>:<sp/>m_matchers<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>first<sp/>)</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>description<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>description<sp/>+=<sp/>matcher-&gt;toString();</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>description<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>description;</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"></highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_match_all_of" kindref="compound">MatchAllOf&lt;ArgT&gt;</ref><sp/>operator<sp/>&amp;&amp;<sp/>(<sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base" kindref="compound">MatcherBase&lt;ArgT&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>copy(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy.m_matchers.push_back(<sp/>&amp;other<sp/>);</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>copy;</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"></highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;MatcherBase&lt;ArgT&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*&gt;<sp/>m_matchers;</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgT&gt;</highlight></codeline>
<codeline lineno="3319" refid="struct_catch_1_1_matchers_1_1_impl_1_1_match_any_of" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_match_any_of" kindref="compound">MatchAnyOf</ref><sp/>:<sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base" kindref="compound">MatcherBase</ref>&lt;ArgT&gt;<sp/>{</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"></highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match(<sp/>ArgT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>arg<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>matcher<sp/>:<sp/>m_matchers<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matcher-&gt;match(arg))</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>describe()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>description;</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>description.reserve(<sp/>4<sp/>+<sp/>m_matchers.size()*32<sp/>);</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>description<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;(<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>matcher<sp/>:<sp/>m_matchers<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>first<sp/>)</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>description<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>or<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>description<sp/>+=<sp/>matcher-&gt;toString();</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>description<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>description;</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"></highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_match_any_of" kindref="compound">MatchAnyOf&lt;ArgT&gt;</ref><sp/>operator<sp/>||<sp/>(<sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base" kindref="compound">MatcherBase&lt;ArgT&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>copy(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy.m_matchers.push_back(<sp/>&amp;other<sp/>);</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>copy;</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"></highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;MatcherBase&lt;ArgT&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*&gt;<sp/>m_matchers;</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"></highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgT&gt;</highlight></codeline>
<codeline lineno="3354" refid="struct_catch_1_1_matchers_1_1_impl_1_1_match_not_of" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_match_not_of" kindref="compound">MatchNotOf</ref><sp/>:<sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base" kindref="compound">MatcherBase</ref>&lt;ArgT&gt;<sp/>{</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"></highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_match_not_of" kindref="compound">MatchNotOf</ref>(<sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base" kindref="compound">MatcherBase&lt;ArgT&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>underlyingMatcher<sp/>)<sp/>:<sp/>m_underlyingMatcher(<sp/>underlyingMatcher<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"></highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match(<sp/>ArgT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>arg<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!m_underlyingMatcher.match(<sp/>arg<sp/>);</highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"></highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>describe()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;not<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>m_underlyingMatcher.toString();</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base" kindref="compound">MatcherBase&lt;ArgT&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>m_underlyingMatcher;</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"></highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_match_all_of" kindref="compound">MatchAllOf&lt;T&gt;</ref><sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base" kindref="compound">MatcherBase&lt;T&gt;::operator &amp;&amp; </ref>(<sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base" kindref="compound">MatcherBase</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_match_all_of" kindref="compound">MatchAllOf&lt;T&gt;</ref>()<sp/>&amp;&amp;<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>other;</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchAnyOf&lt;T&gt;<sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base" kindref="compound">MatcherBase&lt;T&gt;::operator || </ref>(<sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base" kindref="compound">MatcherBase</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MatchAnyOf&lt;T&gt;()<sp/>||<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>||<sp/>other;</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchNotOf&lt;T&gt;<sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base" kindref="compound">MatcherBase&lt;T&gt;::operator ! </ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MatchNotOf&lt;T&gt;(<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"></highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Impl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3382"><highlight class="normal"></highlight></codeline>
<codeline lineno="3383"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Matchers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3384"><highlight class="normal"></highlight></codeline>
<codeline lineno="3385"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Matchers;</highlight></codeline>
<codeline lineno="3386"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Matchers::Impl::MatcherBase;</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"></highlight></codeline>
<codeline lineno="3388"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3389"><highlight class="normal"></highlight></codeline>
<codeline lineno="3390"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_matchers.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3391"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_matchers_exception.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3392"><highlight class="normal"></highlight></codeline>
<codeline lineno="3393"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Matchers<sp/>{</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Exception<sp/>{</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"></highlight></codeline>
<codeline lineno="3397" refid="class_catch_1_1_matchers_1_1_exception_1_1_exception_message_matcher" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_matchers_1_1_exception_1_1_exception_message_matcher" kindref="compound">ExceptionMessageMatcher</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base" kindref="compound">MatcherBase</ref>&lt;std::exception&gt;<sp/>{</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>m_message;</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"></highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_matchers_1_1_exception_1_1_exception_message_matcher" kindref="compound">ExceptionMessageMatcher</ref>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>message):</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_message(message)</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"></highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match(std::exception<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>ex)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3406"><highlight class="normal"></highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>describe()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3408"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"></highlight></codeline>
<codeline lineno="3410"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Exception</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3411"><highlight class="normal"></highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><ref refid="class_catch_1_1_matchers_1_1_exception_1_1_exception_message_matcher" kindref="compound">Exception::ExceptionMessageMatcher</ref><sp/>Message(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>message);</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"></highlight></codeline>
<codeline lineno="3414"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Matchers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3415"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3416"><highlight class="normal"></highlight></codeline>
<codeline lineno="3417"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_matchers_exception.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3418"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_matchers_floating.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3419"><highlight class="normal"></highlight></codeline>
<codeline lineno="3420"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Matchers<sp/>{</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"></highlight></codeline>
<codeline lineno="3423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Floating<sp/>{</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"></highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>FloatingPointKind<sp/>:<sp/>uint8_t;</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"></highlight></codeline>
<codeline lineno="3427" refid="struct_catch_1_1_matchers_1_1_floating_1_1_within_abs_matcher" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struct<sp/><ref refid="struct_catch_1_1_matchers_1_1_floating_1_1_within_abs_matcher" kindref="compound">WithinAbsMatcher</ref><sp/>:<sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base" kindref="compound">MatcherBase</ref>&lt;double&gt;<sp/>{</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_floating_1_1_within_abs_matcher" kindref="compound">WithinAbsMatcher</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>target,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>margin);</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>matchee)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>describe()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m_target;</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m_margin;</highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3435"><highlight class="normal"></highlight></codeline>
<codeline lineno="3436" refid="struct_catch_1_1_matchers_1_1_floating_1_1_within_ulps_matcher" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_matchers_1_1_floating_1_1_within_ulps_matcher" kindref="compound">WithinUlpsMatcher</ref><sp/>:<sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base" kindref="compound">MatcherBase</ref>&lt;double&gt;<sp/>{</highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_floating_1_1_within_ulps_matcher" kindref="compound">WithinUlpsMatcher</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>target,<sp/>uint64_t<sp/>ulps,<sp/>FloatingPointKind<sp/>baseType);</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>matchee)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>describe()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m_target;</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>m_ulps;</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FloatingPointKind<sp/>m_type;</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"></highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Given<sp/>IEEE-754<sp/>format<sp/>for<sp/>floats<sp/>and<sp/>doubles,<sp/>we<sp/>can<sp/>assume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>float<sp/>-&gt;<sp/>double<sp/>promotion<sp/>is<sp/>lossless.<sp/>Given<sp/>this,<sp/>we<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assume<sp/>that<sp/>if<sp/>we<sp/>do<sp/>the<sp/>standard<sp/>relative<sp/>comparison<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>|lhs<sp/>-<sp/>rhs|<sp/>&lt;=<sp/>epsilon<sp/>*<sp/>max(fabs(lhs),<sp/>fabs(rhs)),<sp/>then<sp/>we<sp/>get</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>same<sp/>result<sp/>if<sp/>we<sp/>do<sp/>this<sp/>for<sp/>floats,<sp/>as<sp/>if<sp/>we<sp/>do<sp/>this<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>doubles<sp/>that<sp/>were<sp/>promoted<sp/>from<sp/>floats.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3452" refid="struct_catch_1_1_matchers_1_1_floating_1_1_within_rel_matcher" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_matchers_1_1_floating_1_1_within_rel_matcher" kindref="compound">WithinRelMatcher</ref><sp/>:<sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base" kindref="compound">MatcherBase</ref>&lt;double&gt;<sp/>{</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_floating_1_1_within_rel_matcher" kindref="compound">WithinRelMatcher</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>target,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga2a1e57fc5592b69cfae84174cbfc9429" kindref="member">epsilon</ref>);</highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>matchee)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>describe()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m_target;</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m_epsilon;</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"></highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Floating</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3462"><highlight class="normal"></highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>functions<sp/>create<sp/>the<sp/>actual<sp/>matcher<sp/>objects.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>allows<sp/>the<sp/>types<sp/>to<sp/>be<sp/>inferred</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_floating_1_1_within_ulps_matcher" kindref="compound">Floating::WithinUlpsMatcher</ref><sp/>WithinULP(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>target,<sp/>uint64_t<sp/>maxUlpDiff);</highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_floating_1_1_within_ulps_matcher" kindref="compound">Floating::WithinUlpsMatcher</ref><sp/>WithinULP(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>target,<sp/>uint64_t<sp/>maxUlpDiff);</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_floating_1_1_within_abs_matcher" kindref="compound">Floating::WithinAbsMatcher</ref><sp/>WithinAbs(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>target,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>margin);</highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_floating_1_1_within_rel_matcher" kindref="compound">Floating::WithinRelMatcher</ref><sp/>WithinRel(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>target,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eps);</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>defaults<sp/>epsilon<sp/>to<sp/>100*numeric_limits&lt;double&gt;::epsilon()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_floating_1_1_within_rel_matcher" kindref="compound">Floating::WithinRelMatcher</ref><sp/>WithinRel(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>target);</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_floating_1_1_within_rel_matcher" kindref="compound">Floating::WithinRelMatcher</ref><sp/>WithinRel(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>target,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>eps);</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>defaults<sp/>epsilon<sp/>to<sp/>100*numeric_limits&lt;float&gt;::epsilon()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_floating_1_1_within_rel_matcher" kindref="compound">Floating::WithinRelMatcher</ref><sp/>WithinRel(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>target);</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"></highlight></codeline>
<codeline lineno="3475"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Matchers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3476"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3477"><highlight class="normal"></highlight></codeline>
<codeline lineno="3478"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_matchers_floating.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3479"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_matchers_generic.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3480"><highlight class="normal"></highlight></codeline>
<codeline lineno="3481"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3482"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3483"><highlight class="normal"></highlight></codeline>
<codeline lineno="3484"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Matchers<sp/>{</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Generic<sp/>{</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"></highlight></codeline>
<codeline lineno="3488"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Detail<sp/>{</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>finalizeDescription(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>desc);</highlight></codeline>
<codeline lineno="3490"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3491"><highlight class="normal"></highlight></codeline>
<codeline lineno="3492"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3493" refid="class_catch_1_1_matchers_1_1_generic_1_1_predicate_matcher" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_matchers_1_1_generic_1_1_predicate_matcher" kindref="compound">PredicateMatcher</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base" kindref="compound">MatcherBase</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;bool(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)&gt;<sp/>m_predicate;</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>m_description;</highlight></codeline>
<codeline lineno="3496"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"></highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_matchers_1_1_generic_1_1_predicate_matcher" kindref="compound">PredicateMatcher</ref>(std::function&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>elem,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>descr)</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:m_predicate(std::move(elem)),</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_description(Detail::finalizeDescription(descr))</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"></highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>item<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_predicate(item);</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"></highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>describe()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_description;</highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3510"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"></highlight></codeline>
<codeline lineno="3512"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Generic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3513"><highlight class="normal"></highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>functions<sp/>create<sp/>the<sp/>actual<sp/>matcher<sp/>objects.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>user<sp/>has<sp/>to<sp/>explicitly<sp/>specify<sp/>type<sp/>to<sp/>the<sp/>function,<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>inferring<sp/>std::function&lt;bool(T<sp/>const&amp;)&gt;<sp/>is<sp/>hard<sp/>(but<sp/>possible)<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>requires<sp/>a<sp/>lot<sp/>of<sp/>TMP.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_matchers_1_1_generic_1_1_predicate_matcher" kindref="compound">Generic::PredicateMatcher&lt;T&gt;</ref><sp/>Predicate(std::function&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>predicate,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>description<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_catch_1_1_matchers_1_1_generic_1_1_predicate_matcher" kindref="compound">Generic::PredicateMatcher&lt;T&gt;</ref>(predicate,<sp/>description);</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3522"><highlight class="normal"></highlight></codeline>
<codeline lineno="3523"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Matchers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3524"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3525"><highlight class="normal"></highlight></codeline>
<codeline lineno="3526"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_matchers_generic.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3527"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_matchers_string.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3528"><highlight class="normal"></highlight></codeline>
<codeline lineno="3529"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3530"><highlight class="normal"></highlight></codeline>
<codeline lineno="3531"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Matchers<sp/>{</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"></highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">StdString<sp/>{</highlight></codeline>
<codeline lineno="3535"><highlight class="normal"></highlight></codeline>
<codeline lineno="3536" refid="struct_catch_1_1_matchers_1_1_std_string_1_1_cased_string" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_matchers_1_1_std_string_1_1_cased_string" kindref="compound">CasedString</ref></highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_std_string_1_1_cased_string" kindref="compound">CasedString</ref>(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>str,<sp/>CaseSensitive::Choice<sp/>caseSensitivity<sp/>);</highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>adjustString(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>str<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>caseSensitivitySuffix()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"></highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CaseSensitive::Choice<sp/>m_caseSensitivity;</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>m_str;</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"></highlight></codeline>
<codeline lineno="3546" refid="struct_catch_1_1_matchers_1_1_std_string_1_1_string_matcher_base" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_matchers_1_1_std_string_1_1_string_matcher_base" kindref="compound">StringMatcherBase</ref><sp/>:<sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base" kindref="compound">MatcherBase</ref>&lt;std::string&gt;<sp/>{</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_std_string_1_1_string_matcher_base" kindref="compound">StringMatcherBase</ref>(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>operation,<sp/><ref refid="struct_catch_1_1_matchers_1_1_std_string_1_1_cased_string" kindref="compound">CasedString</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>comparator<sp/>);</highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>describe()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"></highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_std_string_1_1_cased_string" kindref="compound">CasedString</ref><sp/>m_comparator;</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>m_operation;</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"></highlight></codeline>
<codeline lineno="3554" refid="struct_catch_1_1_matchers_1_1_std_string_1_1_equals_matcher" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_matchers_1_1_std_string_1_1_equals_matcher" kindref="compound">EqualsMatcher</ref><sp/>:<sp/><ref refid="struct_catch_1_1_matchers_1_1_std_string_1_1_string_matcher_base" kindref="compound">StringMatcherBase</ref><sp/>{</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_std_string_1_1_equals_matcher" kindref="compound">EqualsMatcher</ref>(<sp/><ref refid="struct_catch_1_1_matchers_1_1_std_string_1_1_cased_string" kindref="compound">CasedString</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>comparator<sp/>);</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>source<sp/>)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3558" refid="struct_catch_1_1_matchers_1_1_std_string_1_1_contains_matcher" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_matchers_1_1_std_string_1_1_contains_matcher" kindref="compound">ContainsMatcher</ref><sp/>:<sp/><ref refid="struct_catch_1_1_matchers_1_1_std_string_1_1_string_matcher_base" kindref="compound">StringMatcherBase</ref><sp/>{</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_std_string_1_1_contains_matcher" kindref="compound">ContainsMatcher</ref>(<sp/><ref refid="struct_catch_1_1_matchers_1_1_std_string_1_1_cased_string" kindref="compound">CasedString</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>comparator<sp/>);</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>source<sp/>)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3562" refid="struct_catch_1_1_matchers_1_1_std_string_1_1_starts_with_matcher" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_matchers_1_1_std_string_1_1_starts_with_matcher" kindref="compound">StartsWithMatcher</ref><sp/>:<sp/><ref refid="struct_catch_1_1_matchers_1_1_std_string_1_1_string_matcher_base" kindref="compound">StringMatcherBase</ref><sp/>{</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_std_string_1_1_starts_with_matcher" kindref="compound">StartsWithMatcher</ref>(<sp/><ref refid="struct_catch_1_1_matchers_1_1_std_string_1_1_cased_string" kindref="compound">CasedString</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>comparator<sp/>);</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>source<sp/>)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3566" refid="struct_catch_1_1_matchers_1_1_std_string_1_1_ends_with_matcher" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_matchers_1_1_std_string_1_1_ends_with_matcher" kindref="compound">EndsWithMatcher</ref><sp/>:<sp/><ref refid="struct_catch_1_1_matchers_1_1_std_string_1_1_string_matcher_base" kindref="compound">StringMatcherBase</ref><sp/>{</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_std_string_1_1_ends_with_matcher" kindref="compound">EndsWithMatcher</ref>(<sp/><ref refid="struct_catch_1_1_matchers_1_1_std_string_1_1_cased_string" kindref="compound">CasedString</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>comparator<sp/>);</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>source<sp/>)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"></highlight></codeline>
<codeline lineno="3571" refid="struct_catch_1_1_matchers_1_1_std_string_1_1_regex_matcher" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_matchers_1_1_std_string_1_1_regex_matcher" kindref="compound">RegexMatcher</ref><sp/>:<sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base" kindref="compound">MatcherBase</ref>&lt;std::string&gt;<sp/>{</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_std_string_1_1_regex_matcher" kindref="compound">RegexMatcher</ref>(<sp/>std::string<sp/>regex,<sp/>CaseSensitive::Choice<sp/>caseSensitivity<sp/>);</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>matchee<sp/>)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>describe()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"></highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>m_regex;</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CaseSensitive::Choice<sp/>m_caseSensitivity;</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"></highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>StdString</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3582"><highlight class="normal"></highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>functions<sp/>create<sp/>the<sp/>actual<sp/>matcher<sp/>objects.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>allows<sp/>the<sp/>types<sp/>to<sp/>be<sp/>inferred</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3585"><highlight class="normal"></highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_std_string_1_1_equals_matcher" kindref="compound">StdString::EqualsMatcher</ref><sp/>Equals(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>str,<sp/>CaseSensitive::Choice<sp/>caseSensitivity<sp/>=<sp/>CaseSensitive::Yes<sp/>);</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_std_string_1_1_contains_matcher" kindref="compound">StdString::ContainsMatcher</ref><sp/>Contains(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>str,<sp/>CaseSensitive::Choice<sp/>caseSensitivity<sp/>=<sp/>CaseSensitive::Yes<sp/>);</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_std_string_1_1_ends_with_matcher" kindref="compound">StdString::EndsWithMatcher</ref><sp/>EndsWith(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>str,<sp/>CaseSensitive::Choice<sp/>caseSensitivity<sp/>=<sp/>CaseSensitive::Yes<sp/>);</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_std_string_1_1_starts_with_matcher" kindref="compound">StdString::StartsWithMatcher</ref><sp/>StartsWith(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>str,<sp/>CaseSensitive::Choice<sp/>caseSensitivity<sp/>=<sp/>CaseSensitive::Yes<sp/>);</highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_std_string_1_1_regex_matcher" kindref="compound">StdString::RegexMatcher</ref><sp/>Matches(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>regex,<sp/>CaseSensitive::Choice<sp/>caseSensitivity<sp/>=<sp/>CaseSensitive::Yes<sp/>);</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"></highlight></codeline>
<codeline lineno="3592"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Matchers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3593"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3594"><highlight class="normal"></highlight></codeline>
<codeline lineno="3595"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_matchers_string.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3596"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_matchers_vector.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3597"><highlight class="normal"></highlight></codeline>
<codeline lineno="3598"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3599"><highlight class="normal"></highlight></codeline>
<codeline lineno="3600"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Matchers<sp/>{</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"></highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Vector<sp/>{</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Alloc&gt;</highlight></codeline>
<codeline lineno="3605" refid="struct_catch_1_1_matchers_1_1_vector_1_1_contains_element_matcher" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_matchers_1_1_vector_1_1_contains_element_matcher" kindref="compound">ContainsElementMatcher</ref><sp/>:<sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base" kindref="compound">MatcherBase</ref>&lt;std::vector&lt;T,<sp/>Alloc&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="3606"><highlight class="normal"></highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_vector_1_1_contains_element_matcher" kindref="compound">ContainsElementMatcher</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;comparator)<sp/>:<sp/>m_comparator(<sp/>comparator)<sp/>{}</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"></highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match(std::vector&lt;T,<sp/>Alloc&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>el<sp/>:<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(el<sp/>==<sp/>m_comparator)<sp/>{</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"></highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>describe()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Contains:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>::Catch::Detail::stringify(<sp/>m_comparator<sp/>);</highlight></codeline>
<codeline lineno="3620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"></highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>m_comparator;</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3624"><highlight class="normal"></highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AllocComp,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AllocMatch&gt;</highlight></codeline>
<codeline lineno="3626" refid="struct_catch_1_1_matchers_1_1_vector_1_1_contains_matcher" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_matchers_1_1_vector_1_1_contains_matcher" kindref="compound">ContainsMatcher</ref><sp/>:<sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base" kindref="compound">MatcherBase</ref>&lt;std::vector&lt;T,<sp/>AllocMatch&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"></highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_vector_1_1_contains_matcher" kindref="compound">ContainsMatcher</ref>(std::vector&lt;T,<sp/>AllocComp&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;comparator)<sp/>:<sp/>m_comparator(<sp/>comparator<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="3629"><highlight class="normal"></highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match(std::vector&lt;T,<sp/>AllocMatch&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>!TBD:<sp/>see<sp/>note<sp/>in<sp/>EqualsMatcher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_comparator.size()<sp/>&gt;<sp/>v.size())</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>comparator<sp/>:<sp/>m_comparator)<sp/>{</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>present<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>el<sp/>:<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(el<sp/>==<sp/>comparator)<sp/>{</highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>present<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!present)<sp/>{</highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>describe()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Contains:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>::Catch::Detail::stringify(<sp/>m_comparator<sp/>);</highlight></codeline>
<codeline lineno="3650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"></highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;T,<sp/>AllocComp&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>m_comparator;</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"></highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AllocComp,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AllocMatch&gt;</highlight></codeline>
<codeline lineno="3656" refid="struct_catch_1_1_matchers_1_1_vector_1_1_equals_matcher" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_matchers_1_1_vector_1_1_equals_matcher" kindref="compound">EqualsMatcher</ref><sp/>:<sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base" kindref="compound">MatcherBase</ref>&lt;std::vector&lt;T,<sp/>AllocMatch&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"></highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_vector_1_1_equals_matcher" kindref="compound">EqualsMatcher</ref>(std::vector&lt;T,<sp/>AllocComp&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;comparator)<sp/>:<sp/>m_comparator(<sp/>comparator<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"></highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match(std::vector&lt;T,<sp/>AllocMatch&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>!TBD:<sp/>This<sp/>currently<sp/>works<sp/>if<sp/>all<sp/>elements<sp/>can<sp/>be<sp/>compared<sp/>using<sp/>!=</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>a<sp/>more<sp/>general<sp/>approach<sp/>would<sp/>be<sp/>via<sp/>a<sp/>compare<sp/>template<sp/>that<sp/>defaults</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>using<sp/>!=.<sp/>but<sp/>could<sp/>be<sp/>specialised<sp/>for,<sp/>e.g.<sp/>std::vector&lt;T,<sp/>Alloc&gt;<sp/>etc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>then<sp/>just<sp/>call<sp/>that<sp/>directly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_comparator.size()<sp/>!=<sp/>v.size())</highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v.size();<sp/>++i)</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_comparator[i]<sp/>!=<sp/>v[i])</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>describe()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Equals:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>::Catch::Detail::stringify(<sp/>m_comparator<sp/>);</highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;T,<sp/>AllocComp&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>m_comparator;</highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3677"><highlight class="normal"></highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AllocComp,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AllocMatch&gt;</highlight></codeline>
<codeline lineno="3679" refid="struct_catch_1_1_matchers_1_1_vector_1_1_approx_matcher" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_matchers_1_1_vector_1_1_approx_matcher" kindref="compound">ApproxMatcher</ref><sp/>:<sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base" kindref="compound">MatcherBase</ref>&lt;std::vector&lt;T,<sp/>AllocMatch&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"></highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_vector_1_1_approx_matcher" kindref="compound">ApproxMatcher</ref>(std::vector&lt;T,<sp/>AllocComp&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>comparator)<sp/>:<sp/>m_comparator(<sp/>comparator<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"></highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match(std::vector&lt;T,<sp/>AllocMatch&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;v)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_comparator.size()<sp/>!=<sp/>v.size())</highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>v.size();<sp/>++i)</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_comparator[i]<sp/>!=<sp/>approx(v[i]))</highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>describe()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;is<sp/>approx:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>::Catch::Detail::stringify(<sp/>m_comparator<sp/>);</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_constructible&lt;double,<sp/>T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_vector_1_1_approx_matcher" kindref="compound">ApproxMatcher</ref>&amp;<sp/>epsilon(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>newEpsilon<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>approx.epsilon(newEpsilon);</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_constructible&lt;double,<sp/>T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_vector_1_1_approx_matcher" kindref="compound">ApproxMatcher</ref>&amp;<sp/>margin(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>newMargin<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>approx.margin(newMargin);</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>template<sp/>&lt;typename<sp/>=<sp/>typename<sp/>std::enable_if&lt;std::is_constructible&lt;double,<sp/>T&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_vector_1_1_approx_matcher" kindref="compound">ApproxMatcher</ref>&amp;<sp/>scale(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>newScale<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>approx.scale(newScale);</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"></highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;T,<sp/>AllocComp&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>m_comparator;</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Catch::Detail::Approx</ref><sp/>approx<sp/>=<sp/>Catch::Detail::Approx::custom();</highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"></highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AllocComp,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AllocMatch&gt;</highlight></codeline>
<codeline lineno="3715" refid="struct_catch_1_1_matchers_1_1_vector_1_1_unordered_equals_matcher" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_matchers_1_1_vector_1_1_unordered_equals_matcher" kindref="compound">UnorderedEqualsMatcher</ref><sp/>:<sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base" kindref="compound">MatcherBase</ref>&lt;std::vector&lt;T,<sp/>AllocMatch&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_vector_1_1_unordered_equals_matcher" kindref="compound">UnorderedEqualsMatcher</ref>(std::vector&lt;T,<sp/>AllocComp&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>target)<sp/>:<sp/>m_target(target)<sp/>{}</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match(std::vector&lt;T,<sp/>AllocMatch&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structvec" kindref="compound">vec</ref>)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_target.size()<sp/>!=<sp/><ref refid="structvec" kindref="compound">vec</ref>.size())<sp/>{</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::is_permutation(m_target.begin(),<sp/>m_target.end(),<sp/><ref refid="structvec" kindref="compound">vec</ref>.begin());</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"></highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>describe()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;UnorderedEquals:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>::Catch::Detail::stringify(m_target);</highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;T,<sp/>AllocComp&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>m_target;</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3730"><highlight class="normal"></highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3732"><highlight class="normal"></highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>functions<sp/>create<sp/>the<sp/>actual<sp/>matcher<sp/>objects.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>allows<sp/>the<sp/>types<sp/>to<sp/>be<sp/>inferred</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3735"><highlight class="normal"></highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AllocComp<sp/>=<sp/>std::allocator&lt;T&gt;,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AllocMatch<sp/>=<sp/>AllocComp&gt;</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_vector_1_1_contains_matcher" kindref="compound">Vector::ContainsMatcher&lt;T, AllocComp, AllocMatch&gt;</ref><sp/>Contains(<sp/>std::vector&lt;T,<sp/>AllocComp&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>comparator<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_matchers_1_1_vector_1_1_contains_matcher" kindref="compound">Vector::ContainsMatcher&lt;T, AllocComp, AllocMatch&gt;</ref>(<sp/>comparator<sp/>);</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3740"><highlight class="normal"></highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Alloc<sp/>=<sp/>std::allocator&lt;T&gt;&gt;</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_matchers_1_1_vector_1_1_contains_element_matcher" kindref="compound">Vector::ContainsElementMatcher&lt;T, Alloc&gt;</ref><sp/>VectorContains(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>comparator<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_matchers_1_1_vector_1_1_contains_element_matcher" kindref="compound">Vector::ContainsElementMatcher&lt;T, Alloc&gt;</ref>(<sp/>comparator<sp/>);</highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"></highlight></codeline>
<codeline lineno="3746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AllocComp<sp/>=<sp/>std::allocator&lt;T&gt;,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AllocMatch<sp/>=<sp/>AllocComp&gt;</highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector::EqualsMatcher&lt;T,<sp/>AllocComp,<sp/>AllocMatch&gt;<sp/>Equals(<sp/>std::vector&lt;T,<sp/>AllocComp&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>comparator<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Vector::EqualsMatcher&lt;T,<sp/>AllocComp,<sp/>AllocMatch&gt;(<sp/>comparator<sp/>);</highlight></codeline>
<codeline lineno="3749"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3750"><highlight class="normal"></highlight></codeline>
<codeline lineno="3751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AllocComp<sp/>=<sp/>std::allocator&lt;T&gt;,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AllocMatch<sp/>=<sp/>AllocComp&gt;</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector::ApproxMatcher&lt;T,<sp/>AllocComp,<sp/>AllocMatch&gt;<sp/><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref>(<sp/>std::vector&lt;T,<sp/>AllocComp&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>comparator<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Vector::ApproxMatcher&lt;T,<sp/>AllocComp,<sp/>AllocMatch&gt;(<sp/>comparator<sp/>);</highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"></highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AllocComp<sp/>=<sp/>std::allocator&lt;T&gt;,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>AllocMatch<sp/>=<sp/>AllocComp&gt;</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/><sp/><sp/>Vector::UnorderedEqualsMatcher&lt;T,<sp/>AllocComp,<sp/>AllocMatch&gt;<sp/>UnorderedEquals(std::vector&lt;T,<sp/>AllocComp&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>target)<sp/>{</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Vector::UnorderedEqualsMatcher&lt;T,<sp/>AllocComp,<sp/>AllocMatch&gt;(<sp/>target<sp/>);</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"></highlight></codeline>
<codeline lineno="3761"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Matchers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3762"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3763"><highlight class="normal"></highlight></codeline>
<codeline lineno="3764"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_matchers_vector.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3765"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="3766"><highlight class="normal"></highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatcherT&gt;</highlight></codeline>
<codeline lineno="3768" refid="class_catch_1_1_match_expr" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_match_expr" kindref="compound">MatchExpr</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_i_transient_expression" kindref="compound">ITransientExpression</ref><sp/>{</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>m_arg;</highlight></codeline>
<codeline lineno="3770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatcherT<sp/>m_matcher;</highlight></codeline>
<codeline lineno="3771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/>m_matcherString;</highlight></codeline>
<codeline lineno="3772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_match_expr" kindref="compound">MatchExpr</ref>(<sp/>ArgT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>arg,<sp/>MatcherT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>matcher,<sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>matcherString<sp/>)</highlight></codeline>
<codeline lineno="3774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/><ref refid="struct_catch_1_1_i_transient_expression" kindref="compound">ITransientExpression</ref>{<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>matcher.match(<sp/>arg<sp/>)<sp/>},</highlight></codeline>
<codeline lineno="3775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_arg(<sp/>arg<sp/>),</highlight></codeline>
<codeline lineno="3776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_matcher(<sp/>matcher<sp/>),</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_matcherString(<sp/>matcherString<sp/>)</highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"></highlight></codeline>
<codeline lineno="3780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>streamReconstructedExpression(<sp/>std::ostream<sp/>&amp;os<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>matcherAsString<sp/>=<sp/>m_matcher.toString();</highlight></codeline>
<codeline lineno="3782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>Catch::Detail::stringify(<sp/>m_arg<sp/>)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>matcherAsString<sp/>==<sp/>Detail::unprintableString<sp/>)</highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>m_matcherString;</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>matcherAsString;</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"></highlight></codeline>
<codeline lineno="3790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base" kindref="compound">StringMatcher</ref><sp/>=<sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base" kindref="compound">Matchers::Impl::MatcherBase&lt;std::string&gt;</ref>;</highlight></codeline>
<codeline lineno="3791"><highlight class="normal"></highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleExceptionMatchExpr(<sp/><ref refid="class_catch_1_1_assertion_handler" kindref="compound">AssertionHandler</ref>&amp;<sp/>handler,<sp/><ref refid="struct_catch_1_1_matchers_1_1_impl_1_1_matcher_base" kindref="compound">StringMatcher</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>matcher,<sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>matcherString<sp/><sp/>);</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"></highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MatcherT&gt;</highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>makeMatchExpr(<sp/>ArgT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>arg,<sp/>MatcherT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>matcher,<sp/><ref refid="class_catch_1_1_string_ref" kindref="compound">StringRef</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>matcherString<sp/><sp/>)<sp/>-&gt;<sp/><ref refid="class_catch_1_1_match_expr" kindref="compound">MatchExpr&lt;ArgT, MatcherT&gt;</ref><sp/>{</highlight></codeline>
<codeline lineno="3796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_catch_1_1_match_expr" kindref="compound">MatchExpr&lt;ArgT, MatcherT&gt;</ref>(<sp/>arg,<sp/>matcher,<sp/>matcherString<sp/>);</highlight></codeline>
<codeline lineno="3797"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3798"><highlight class="normal"></highlight></codeline>
<codeline lineno="3799"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3800"><highlight class="normal"></highlight></codeline>
<codeline lineno="3802"><highlight class="preprocessor">#define<sp/>INTERNAL_CHECK_THAT(<sp/>macroName,<sp/>matcher,<sp/>resultDisposition,<sp/>arg<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="3803"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="3804"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::AssertionHandler<sp/>catchAssertionHandler(<sp/>macroName##_catch_sr,<sp/>CATCH_INTERNAL_LINEINFO,<sp/>CATCH_INTERNAL_STRINGIFY(arg)<sp/>&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>CATCH_INTERNAL_STRINGIFY(matcher),<sp/>resultDisposition<sp/>);<sp/>\</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_TRY<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>catchAssertionHandler.handleExpr(<sp/>Catch::makeMatchExpr(<sp/>arg,<sp/>matcher,<sp/>#matcher##_catch_sr<sp/>)<sp/>);<sp/>\</highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>INTERNAL_CATCH_CATCH(<sp/>catchAssertionHandler<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="3808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_REACT(<sp/>catchAssertionHandler<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="3809"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>while(<sp/>false<sp/>)</highlight></codeline>
<codeline lineno="3810"><highlight class="normal"></highlight></codeline>
<codeline lineno="3812"><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_THROWS_MATCHES(<sp/>macroName,<sp/>exceptionType,<sp/>resultDisposition,<sp/>matcher,<sp/>...<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="3813"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="3814"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::AssertionHandler<sp/>catchAssertionHandler(<sp/>macroName##_catch_sr,<sp/>CATCH_INTERNAL_LINEINFO,<sp/>CATCH_INTERNAL_STRINGIFY(__VA_ARGS__)<sp/>&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>CATCH_INTERNAL_STRINGIFY(exceptionType)<sp/>&quot;,<sp/>&quot;<sp/>CATCH_INTERNAL_STRINGIFY(matcher),<sp/>resultDisposition<sp/>);<sp/>\</highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(<sp/>catchAssertionHandler.allowThrows()<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="3816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;void&gt;(__VA_ARGS__<sp/>);<sp/>\</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>catchAssertionHandler.handleUnexpectedExceptionNotThrown();<sp/>\</highlight></codeline>
<codeline lineno="3819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="3820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>catch(<sp/>exceptionType<sp/>const&amp;<sp/>ex<sp/>)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="3821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>catchAssertionHandler.handleExpr(<sp/>Catch::makeMatchExpr(<sp/>ex,<sp/>matcher,<sp/>#matcher##_catch_sr<sp/>)<sp/>);<sp/>\</highlight></codeline>
<codeline lineno="3822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="3823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>catch(<sp/>...<sp/>)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="3824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>catchAssertionHandler.handleUnexpectedInflightException();<sp/>\</highlight></codeline>
<codeline lineno="3825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>\</highlight></codeline>
<codeline lineno="3827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>catchAssertionHandler.handleThrowingCallSkipped();<sp/>\</highlight></codeline>
<codeline lineno="3828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_REACT(<sp/>catchAssertionHandler<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="3829"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>while(<sp/>false<sp/>)</highlight></codeline>
<codeline lineno="3830"><highlight class="normal"></highlight></codeline>
<codeline lineno="3831"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_capture_matchers.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3832"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3833"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_generators.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3834"><highlight class="normal"></highlight></codeline>
<codeline lineno="3835"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_interfaces_generatortracker.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3836"><highlight class="normal"></highlight></codeline>
<codeline lineno="3837"><highlight class="normal"></highlight></codeline>
<codeline lineno="3838"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3839"><highlight class="normal"></highlight></codeline>
<codeline lineno="3840"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"></highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Generators<sp/>{</highlight></codeline>
<codeline lineno="3843" refid="class_catch_1_1_generators_1_1_generator_untyped_base" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_generators_1_1_generator_untyped_base" kindref="compound">GeneratorUntypedBase</ref><sp/>{</highlight></codeline>
<codeline lineno="3844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_generators_1_1_generator_untyped_base" kindref="compound">GeneratorUntypedBase</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="class_catch_1_1_generators_1_1_generator_untyped_base" kindref="compound">~GeneratorUntypedBase</ref>();</highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Attempts<sp/>to<sp/>move<sp/>the<sp/>generator<sp/>to<sp/>the<sp/>next<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>move<sp/>succeeded<sp/>(and<sp/>a<sp/>valid<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>retrieved).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>next()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>GeneratorBasePtr<sp/>=<sp/>std::unique_ptr&lt;GeneratorUntypedBase&gt;;</highlight></codeline>
<codeline lineno="3854"><highlight class="normal"></highlight></codeline>
<codeline lineno="3855"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Generators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3856"><highlight class="normal"></highlight></codeline>
<codeline lineno="3857" refid="struct_catch_1_1_i_generator_tracker" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_i_generator_tracker" kindref="compound">IGeneratorTracker</ref><sp/>{</highlight></codeline>
<codeline lineno="3858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_i_generator_tracker" kindref="compound">~IGeneratorTracker</ref>();</highlight></codeline>
<codeline lineno="3859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hasGenerator()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>getGenerator()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/>Generators::GeneratorBasePtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setGenerator(<sp/>Generators::GeneratorBasePtr&amp;&amp;<sp/>generator<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3862"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3863"><highlight class="normal"></highlight></codeline>
<codeline lineno="3864"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3865"><highlight class="normal"></highlight></codeline>
<codeline lineno="3866"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_interfaces_generatortracker.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3867"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_enforce.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3868"><highlight class="normal"></highlight></codeline>
<codeline lineno="3869"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;exception&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3870"><highlight class="normal"></highlight></codeline>
<codeline lineno="3871"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="3872"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Ex&gt;</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/><sp/><sp/>[[noreturn]]</highlight></codeline>
<codeline lineno="3875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>throw_exception(Ex<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>;</highlight></codeline>
<codeline lineno="3877"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3878"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>^^<sp/>Exceptions<sp/>are<sp/>enabled<sp/>//<sp/><sp/>Exceptions<sp/>are<sp/>disabled<sp/>vv</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3879"><highlight class="normal"><sp/><sp/><sp/><sp/>[[noreturn]]</highlight></codeline>
<codeline lineno="3880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>throw_exception(std::exception<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>);</highlight></codeline>
<codeline lineno="3881"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3882"><highlight class="normal"></highlight></codeline>
<codeline lineno="3883"><highlight class="normal"><sp/><sp/><sp/><sp/>[[noreturn]]</highlight></codeline>
<codeline lineno="3884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>throw_logic_error(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>msg);</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"><sp/><sp/><sp/><sp/>[[noreturn]]</highlight></codeline>
<codeline lineno="3886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>throw_domain_error(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>msg);</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/><sp/><sp/>[[noreturn]]</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>throw_runtime_error(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>msg);</highlight></codeline>
<codeline lineno="3889"><highlight class="normal"></highlight></codeline>
<codeline lineno="3890"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3891"><highlight class="normal"></highlight></codeline>
<codeline lineno="3892"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_MAKE_MSG(...)<sp/>\</highlight></codeline>
<codeline lineno="3893"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(Catch::ReusableStringStream()<sp/>&lt;&lt;<sp/>__VA_ARGS__).str()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3894"><highlight class="normal"></highlight></codeline>
<codeline lineno="3895"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_INTERNAL_ERROR(...)<sp/>\</highlight></codeline>
<codeline lineno="3896"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Catch::throw_logic_error(CATCH_MAKE_MSG(<sp/>CATCH_INTERNAL_LINEINFO<sp/>&lt;&lt;<sp/>&quot;:<sp/>Internal<sp/>Catch2<sp/>error:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__VA_ARGS__))</highlight></codeline>
<codeline lineno="3897"><highlight class="normal"></highlight></codeline>
<codeline lineno="3898"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_ERROR(...)<sp/>\</highlight></codeline>
<codeline lineno="3899"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Catch::throw_domain_error(CATCH_MAKE_MSG(<sp/>__VA_ARGS__<sp/>))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3900"><highlight class="normal"></highlight></codeline>
<codeline lineno="3901"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_RUNTIME_ERROR(...)<sp/>\</highlight></codeline>
<codeline lineno="3902"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Catch::throw_runtime_error(CATCH_MAKE_MSG(<sp/>__VA_ARGS__<sp/>))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3903"><highlight class="normal"></highlight></codeline>
<codeline lineno="3904"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_ENFORCE(<sp/>condition,<sp/>...<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="3905"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do{<sp/>if(<sp/>!(condition)<sp/>)<sp/>CATCH_ERROR(<sp/>__VA_ARGS__<sp/>);<sp/>}<sp/>while(false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3906"><highlight class="normal"></highlight></codeline>
<codeline lineno="3907"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_enforce.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3908"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3909"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3910"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3911"><highlight class="normal"></highlight></codeline>
<codeline lineno="3912"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3913"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;exception&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3914"><highlight class="normal"></highlight></codeline>
<codeline lineno="3915"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="3916"><highlight class="normal"></highlight></codeline>
<codeline lineno="3917" refid="class_catch_1_1_generator_exception" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_generator_exception" kindref="compound">GeneratorException</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::exception<sp/>{</highlight></codeline>
<codeline lineno="3918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>m_msg<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3919"><highlight class="normal"></highlight></codeline>
<codeline lineno="3920"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3921"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_generator_exception" kindref="compound">GeneratorException</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>msg):</highlight></codeline>
<codeline lineno="3922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_msg(msg)</highlight></codeline>
<codeline lineno="3923"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="3924"><highlight class="normal"></highlight></codeline>
<codeline lineno="3925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>what()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3926"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3927"><highlight class="normal"></highlight></codeline>
<codeline lineno="3928"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Generators<sp/>{</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"></highlight></codeline>
<codeline lineno="3930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>!TBD<sp/>move<sp/>this<sp/>into<sp/>its<sp/>own<sp/>location?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">pf{</highlight></codeline>
<codeline lineno="3932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="3933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;T&gt;<sp/>make_unique(<sp/>Args&amp;&amp;...<sp/>args<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="3934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;T&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(std::forward&lt;Args&gt;(args)...));</highlight></codeline>
<codeline lineno="3935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3937"><highlight class="normal"></highlight></codeline>
<codeline lineno="3938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3939" refid="struct_catch_1_1_generators_1_1_i_generator" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_generators_1_1_i_generator" kindref="compound">IGenerator</ref><sp/>:<sp/><ref refid="class_catch_1_1_generators_1_1_generator_untyped_base" kindref="compound">GeneratorUntypedBase</ref><sp/>{</highlight></codeline>
<codeline lineno="3940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_generators_1_1_i_generator" kindref="compound">~IGenerator</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3941"><highlight class="normal"></highlight></codeline>
<codeline lineno="3942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>current<sp/>element<sp/>of<sp/>the<sp/>generator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>\Precondition<sp/>The<sp/>generator<sp/>is<sp/>either<sp/>freshly<sp/>constructed,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>the<sp/>last<sp/>call<sp/>to<sp/>`next()`<sp/>returned<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>get()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="3948"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3949"><highlight class="normal"></highlight></codeline>
<codeline lineno="3950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3951" refid="class_catch_1_1_generators_1_1_single_value_generator" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_generators_1_1_single_value_generator" kindref="compound">SingleValueGenerator</ref><sp/>final<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_generators_1_1_i_generator" kindref="compound">IGenerator</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="3952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>m_value;</highlight></codeline>
<codeline lineno="3953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_generators_1_1_single_value_generator" kindref="compound">SingleValueGenerator</ref>(T&amp;&amp;<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>:<sp/>m_value(std::move(<ref refid="classvalue" kindref="compound">value</ref>))<sp/>{}</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"></highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>get()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_value;</highlight></codeline>
<codeline lineno="3958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>next()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3962"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3963"><highlight class="normal"></highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3965" refid="class_catch_1_1_generators_1_1_fixed_values_generator" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_generators_1_1_fixed_values_generator" kindref="compound">FixedValuesGenerator</ref><sp/>final<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_generators_1_1_i_generator" kindref="compound">IGenerator</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(!std::is_same&lt;T,<sp/>bool&gt;::value,</highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FixedValuesGenerator<sp/>does<sp/>not<sp/>support<sp/>bools<sp/>because<sp/>of<sp/>std::vector&lt;bool&gt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;specialization,<sp/>use<sp/>SingleValue<sp/>Generator<sp/>instead.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>m_values;</highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m_idx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_generators_1_1_fixed_values_generator" kindref="compound">FixedValuesGenerator</ref>(<sp/>std::initializer_list&lt;T&gt;<sp/>values<sp/>)<sp/>:<sp/>m_values(<sp/>values<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="3973"><highlight class="normal"></highlight></codeline>
<codeline lineno="3974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>get()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_values[m_idx];</highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>next()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++m_idx;</highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_idx<sp/>&lt;<sp/>m_values.size();</highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3982"><highlight class="normal"></highlight></codeline>
<codeline lineno="3983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3984" refid="class_catch_1_1_generators_1_1_generator_wrapper" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper</ref><sp/>final<sp/>{</highlight></codeline>
<codeline lineno="3985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;IGenerator&lt;T&gt;&gt;<sp/>m_generator;</highlight></codeline>
<codeline lineno="3986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper</ref>(std::unique_ptr&lt;<ref refid="struct_catch_1_1_generators_1_1_i_generator" kindref="compound">IGenerator&lt;T&gt;</ref>&gt;<sp/>generator):</highlight></codeline>
<codeline lineno="3988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_generator(std::move(generator))</highlight></codeline>
<codeline lineno="3989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="3990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>get()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_generator-&gt;get();</highlight></codeline>
<codeline lineno="3992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>next()<sp/>{</highlight></codeline>
<codeline lineno="3994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_generator-&gt;next();</highlight></codeline>
<codeline lineno="3995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3996"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="3997"><highlight class="normal"></highlight></codeline>
<codeline lineno="3998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="3999"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper&lt;T&gt;</ref><sp/><ref refid="classvalue" kindref="compound">value</ref>(T&amp;&amp;<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper&lt;T&gt;</ref>(pf::make_unique&lt;<ref refid="class_catch_1_1_generators_1_1_single_value_generator" kindref="compound">SingleValueGenerator&lt;T&gt;</ref>&gt;(std::forward&lt;T&gt;(<ref refid="classvalue" kindref="compound">value</ref>)));</highlight></codeline>
<codeline lineno="4001"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="4003"><highlight class="normal"><sp/><sp/><sp/><sp/>GeneratorWrapper&lt;T&gt;<sp/>values(std::initializer_list&lt;T&gt;<sp/>values)<sp/>{</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GeneratorWrapper&lt;T&gt;(pf::make_unique&lt;FixedValuesGenerator&lt;T&gt;&gt;(values));</highlight></codeline>
<codeline lineno="4005"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4006"><highlight class="normal"></highlight></codeline>
<codeline lineno="4007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="4008" refid="class_catch_1_1_generators_1_1_generators" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_generators_1_1_generators" kindref="compound">Generators</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_generators_1_1_i_generator" kindref="compound">IGenerator</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="4009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;GeneratorWrapper&lt;T&gt;&gt;<sp/>m_generators;</highlight></codeline>
<codeline lineno="4010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m_current<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4011"><highlight class="normal"></highlight></codeline>
<codeline lineno="4012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>populate(<ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper&lt;T&gt;</ref>&amp;&amp;<sp/>generator)<sp/>{</highlight></codeline>
<codeline lineno="4013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_generators.emplace_back(std::move(generator));</highlight></codeline>
<codeline lineno="4014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>populate(T&amp;&amp;<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="4016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_generators.emplace_back(<ref refid="classvalue" kindref="compound">value</ref>(std::forward&lt;T&gt;(val)));</highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="4019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>populate(U&amp;&amp;<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="4020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>populate(T(std::forward&lt;U&gt;(val)));</highlight></codeline>
<codeline lineno="4021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Gs&gt;</highlight></codeline>
<codeline lineno="4023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>populate(U&amp;&amp;<sp/>valueOrGenerator,<sp/>Gs<sp/>&amp;&amp;...<sp/>moreGenerators)<sp/>{</highlight></codeline>
<codeline lineno="4024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>populate(std::forward&lt;U&gt;(valueOrGenerator));</highlight></codeline>
<codeline lineno="4025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>populate(std::forward&lt;Gs&gt;(moreGenerators)...);</highlight></codeline>
<codeline lineno="4026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4027"><highlight class="normal"></highlight></codeline>
<codeline lineno="4028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Gs&gt;</highlight></codeline>
<codeline lineno="4030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_generators_1_1_generators" kindref="compound">Generators</ref>(Gs<sp/>&amp;&amp;...<sp/>moreGenerators)<sp/>{</highlight></codeline>
<codeline lineno="4031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_generators.reserve(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Gs));</highlight></codeline>
<codeline lineno="4032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>populate(std::forward&lt;Gs&gt;(moreGenerators)...);</highlight></codeline>
<codeline lineno="4033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4034"><highlight class="normal"></highlight></codeline>
<codeline lineno="4035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>get()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_generators[m_current].get();</highlight></codeline>
<codeline lineno="4037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4038"><highlight class="normal"></highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>next()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_current<sp/>&gt;=<sp/>m_generators.size())<sp/>{</highlight></codeline>
<codeline lineno="4041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>current_status<sp/>=<sp/>m_generators[m_current].next();</highlight></codeline>
<codeline lineno="4044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!current_status)<sp/>{</highlight></codeline>
<codeline lineno="4045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++m_current;</highlight></codeline>
<codeline lineno="4046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_current<sp/>&lt;<sp/>m_generators.size();</highlight></codeline>
<codeline lineno="4048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4049"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4050"><highlight class="normal"></highlight></codeline>
<codeline lineno="4051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="4052"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper</ref>&lt;std::tuple&lt;Ts...&gt;&gt;<sp/><ref refid="structtable" kindref="compound">table</ref>(<sp/>std::initializer_list&lt;std::tuple&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::decay&lt;Ts&gt;::type...&gt;&gt;<sp/>tuples<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values&lt;std::tuple&lt;Ts...&gt;&gt;(<sp/>tuples<sp/>);</highlight></codeline>
<codeline lineno="4054"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4055"><highlight class="normal"></highlight></codeline>
<codeline lineno="4056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tag<sp/>type<sp/>to<sp/>signal<sp/>that<sp/>a<sp/>generator<sp/>sequence<sp/>should<sp/>convert<sp/>arguments<sp/>to<sp/>a<sp/>specific<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="4058" refid="struct_catch_1_1_generators_1_1as" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_generators_1_1as" kindref="compound">as</ref><sp/>{};</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"></highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Gs&gt;</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>makeGenerators(<sp/><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper&lt;T&gt;</ref>&amp;&amp;<sp/>generator,<sp/>Gs<sp/>&amp;&amp;...<sp/>moreGenerators<sp/>)<sp/>-&gt;<sp/><ref refid="class_catch_1_1_generators_1_1_generators" kindref="compound">Generators&lt;T&gt;</ref><sp/>{</highlight></codeline>
<codeline lineno="4062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_catch_1_1_generators_1_1_generators" kindref="compound">Generators&lt;T&gt;</ref>(std::move(generator),<sp/>std::forward&lt;Gs&gt;(moreGenerators)...);</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="4065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>makeGenerators(<sp/>GeneratorWrapper&lt;T&gt;&amp;&amp;<sp/>generator<sp/>)<sp/>-&gt;<sp/>Generators&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Generators&lt;T&gt;(std::move(generator));</highlight></codeline>
<codeline lineno="4067"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Gs&gt;</highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>makeGenerators(<sp/>T&amp;&amp;<sp/>val,<sp/>Gs<sp/>&amp;&amp;...<sp/>moreGenerators<sp/>)<sp/>-&gt;<sp/>Generators&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="4070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>makeGenerators(<sp/><ref refid="classvalue" kindref="compound">value</ref>(<sp/>std::forward&lt;T&gt;(<sp/>val<sp/>)<sp/>),<sp/>std::forward&lt;Gs&gt;(<sp/>moreGenerators<sp/>)...<sp/>);</highlight></codeline>
<codeline lineno="4071"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Gs&gt;</highlight></codeline>
<codeline lineno="4073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>makeGenerators(<sp/>as&lt;T&gt;,<sp/>U&amp;&amp;<sp/>val,<sp/>Gs<sp/>&amp;&amp;...<sp/>moreGenerators<sp/>)<sp/>-&gt;<sp/>Generators&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>makeGenerators(<sp/><ref refid="classvalue" kindref="compound">value</ref>(<sp/>T(<sp/>std::forward&lt;U&gt;(<sp/>val<sp/>)<sp/>)<sp/>),<sp/>std::forward&lt;Gs&gt;(<sp/>moreGenerators<sp/>)...<sp/>);</highlight></codeline>
<codeline lineno="4075"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4076"><highlight class="normal"></highlight></codeline>
<codeline lineno="4077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>acquireGeneratorTracker(<sp/>StringRef<sp/>generatorName,<sp/>SourceLineInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lineInfo<sp/>)<sp/>-&gt;<sp/>IGeneratorTracker&amp;;</highlight></codeline>
<codeline lineno="4078"><highlight class="normal"></highlight></codeline>
<codeline lineno="4079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L&gt;</highlight></codeline>
<codeline lineno="4080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>The<sp/>type<sp/>after<sp/>-&gt;<sp/>is<sp/>weird,<sp/>because<sp/>VS2015<sp/>cannot<sp/>parse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>expression<sp/>used<sp/>in<sp/>the<sp/>typedef<sp/>inside,<sp/>when<sp/>it<sp/>is<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>type.<sp/>Yeah.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>generate(<sp/>StringRef<sp/>generatorName,<sp/>SourceLineInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lineInfo,<sp/>L<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>generatorExpression<sp/>)<sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(std::declval&lt;decltype(generatorExpression())&gt;().get())<sp/>{</highlight></codeline>
<codeline lineno="4084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>UnderlyingType<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(generatorExpression())::type;</highlight></codeline>
<codeline lineno="4085"><highlight class="normal"></highlight></codeline>
<codeline lineno="4086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IGeneratorTracker&amp;<sp/>tracker<sp/>=<sp/>acquireGeneratorTracker(<sp/>generatorName,<sp/>lineInfo<sp/>);</highlight></codeline>
<codeline lineno="4087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tracker.hasGenerator())<sp/>{</highlight></codeline>
<codeline lineno="4088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tracker.setGenerator(pf::make_unique&lt;Generators&lt;UnderlyingType&gt;&gt;(generatorExpression()));</highlight></codeline>
<codeline lineno="4089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4090"><highlight class="normal"></highlight></codeline>
<codeline lineno="4091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>generator<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">IGenerator&lt;UnderlyingType&gt;<sp/>const&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>*tracker.getGenerator()<sp/>);</highlight></codeline>
<codeline lineno="4092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>generator.get();</highlight></codeline>
<codeline lineno="4093"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4094"><highlight class="normal"></highlight></codeline>
<codeline lineno="4095"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Generators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4096"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4097"><highlight class="normal"></highlight></codeline>
<codeline lineno="4098"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GENERATE(<sp/>...<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="4099"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Catch::Generators::generate(<sp/>INTERNAL_CATCH_STRINGIZE(INTERNAL_CATCH_UNIQUE_NAME(generator)),<sp/>\</highlight></codeline>
<codeline lineno="4100"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_LINEINFO,<sp/>\</highlight></codeline>
<codeline lineno="4101"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[<sp/>]{<sp/>using<sp/>namespace<sp/>Catch::Generators;<sp/>return<sp/>makeGenerators(<sp/>__VA_ARGS__<sp/>);<sp/>}<sp/>)<sp/></highlight><highlight class="comment">//NOLINT(google-build-using-namespace)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4102"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GENERATE_COPY(<sp/>...<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="4103"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Catch::Generators::generate(<sp/>INTERNAL_CATCH_STRINGIZE(INTERNAL_CATCH_UNIQUE_NAME(generator)),<sp/>\</highlight></codeline>
<codeline lineno="4104"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_LINEINFO,<sp/>\</highlight></codeline>
<codeline lineno="4105"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[=]{<sp/>using<sp/>namespace<sp/>Catch::Generators;<sp/>return<sp/>makeGenerators(<sp/>__VA_ARGS__<sp/>);<sp/>}<sp/>)<sp/></highlight><highlight class="comment">//NOLINT(google-build-using-namespace)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4106"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GENERATE_REF(<sp/>...<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="4107"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Catch::Generators::generate(<sp/>INTERNAL_CATCH_STRINGIZE(INTERNAL_CATCH_UNIQUE_NAME(generator)),<sp/>\</highlight></codeline>
<codeline lineno="4108"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_LINEINFO,<sp/>\</highlight></codeline>
<codeline lineno="4109"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;]{<sp/>using<sp/>namespace<sp/>Catch::Generators;<sp/>return<sp/>makeGenerators(<sp/>__VA_ARGS__<sp/>);<sp/>}<sp/>)<sp/></highlight><highlight class="comment">//NOLINT(google-build-using-namespace)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4110"><highlight class="normal"></highlight></codeline>
<codeline lineno="4111"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_generators.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4112"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_generators_generic.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4113"><highlight class="normal"></highlight></codeline>
<codeline lineno="4114"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="4115"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Generators<sp/>{</highlight></codeline>
<codeline lineno="4116"><highlight class="normal"></highlight></codeline>
<codeline lineno="4117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="4118" refid="class_catch_1_1_generators_1_1_take_generator" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_generators_1_1_take_generator" kindref="compound">TakeGenerator</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_generators_1_1_i_generator" kindref="compound">IGenerator</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper&lt;T&gt;</ref><sp/>m_generator;</highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m_returned<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m_target;</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_generators_1_1_take_generator" kindref="compound">TakeGenerator</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>target,<sp/><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper&lt;T&gt;</ref>&amp;&amp;<sp/>generator):</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_generator(std::move(generator)),</highlight></codeline>
<codeline lineno="4125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_target(target)</highlight></codeline>
<codeline lineno="4126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(target<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Empty<sp/>generators<sp/>are<sp/>not<sp/>allowed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>get()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_generator.get();</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>next()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++m_returned;</highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_returned<sp/>&gt;=<sp/>m_target)<sp/>{</highlight></codeline>
<codeline lineno="4135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4137"><highlight class="normal"></highlight></codeline>
<codeline lineno="4138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>success<sp/>=<sp/>m_generator.next();</highlight></codeline>
<codeline lineno="4139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>underlying<sp/>generator<sp/>does<sp/>not<sp/>contain<sp/>enough<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>we<sp/>cut<sp/>short<sp/>as<sp/>well</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!success)<sp/>{</highlight></codeline>
<codeline lineno="4142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_returned<sp/>=<sp/>m_target;</highlight></codeline>
<codeline lineno="4143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>success;</highlight></codeline>
<codeline lineno="4145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4146"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4147"><highlight class="normal"></highlight></codeline>
<codeline lineno="4148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="4149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper&lt;T&gt;</ref><sp/>take(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>target,<sp/><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper&lt;T&gt;</ref>&amp;&amp;<sp/>generator)<sp/>{</highlight></codeline>
<codeline lineno="4150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper&lt;T&gt;</ref>(pf::make_unique&lt;<ref refid="class_catch_1_1_generators_1_1_take_generator" kindref="compound">TakeGenerator&lt;T&gt;</ref>&gt;(target,<sp/>std::move(generator)));</highlight></codeline>
<codeline lineno="4151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4152"><highlight class="normal"></highlight></codeline>
<codeline lineno="4153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Predicate&gt;</highlight></codeline>
<codeline lineno="4154" refid="class_catch_1_1_generators_1_1_filter_generator" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_generators_1_1_filter_generator" kindref="compound">FilterGenerator</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_generators_1_1_i_generator" kindref="compound">IGenerator</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="4155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper&lt;T&gt;</ref><sp/>m_generator;</highlight></codeline>
<codeline lineno="4156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Predicate<sp/>m_predicate;</highlight></codeline>
<codeline lineno="4157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P<sp/>=<sp/>Predicate&gt;</highlight></codeline>
<codeline lineno="4159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_generators_1_1_filter_generator" kindref="compound">FilterGenerator</ref>(P&amp;&amp;<sp/>pred,<sp/><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper&lt;T&gt;</ref>&amp;&amp;<sp/>generator):</highlight></codeline>
<codeline lineno="4160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_generator(std::move(generator)),</highlight></codeline>
<codeline lineno="4161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_predicate(std::forward&lt;P&gt;(pred))</highlight></codeline>
<codeline lineno="4162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_predicate(m_generator.get()))<sp/>{</highlight></codeline>
<codeline lineno="4164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>might<sp/>happen<sp/>that<sp/>there<sp/>are<sp/>no<sp/>values<sp/>that<sp/>pass<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>filter.<sp/>In<sp/>that<sp/>case<sp/>we<sp/>throw<sp/>an<sp/>exception.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>has_initial_value<sp/>=<sp/>next();</highlight></codeline>
<codeline lineno="4167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!has_initial_value)<sp/>{</highlight></codeline>
<codeline lineno="4168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::throw_exception(<ref refid="class_catch_1_1_generator_exception" kindref="compound">GeneratorException</ref>(</highlight><highlight class="stringliteral">&quot;No<sp/>valid<sp/>value<sp/>found<sp/>in<sp/>filtered<sp/>generator&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4172"><highlight class="normal"></highlight></codeline>
<codeline lineno="4173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>get()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_generator.get();</highlight></codeline>
<codeline lineno="4175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4176"><highlight class="normal"></highlight></codeline>
<codeline lineno="4177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>next()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success<sp/>=<sp/>m_generator.next();</highlight></codeline>
<codeline lineno="4179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!success)<sp/>{</highlight></codeline>
<codeline lineno="4180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!m_predicate(m_generator.get())<sp/>&amp;&amp;<sp/>(success<sp/>=<sp/>m_generator.next())<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>success;</highlight></codeline>
<codeline lineno="4184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4185"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4186"><highlight class="normal"></highlight></codeline>
<codeline lineno="4187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Predicate&gt;</highlight></codeline>
<codeline lineno="4188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper&lt;T&gt;</ref><sp/>filter(Predicate&amp;&amp;<sp/>pred,<sp/><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper&lt;T&gt;</ref>&amp;&amp;<sp/>generator)<sp/>{</highlight></codeline>
<codeline lineno="4189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper&lt;T&gt;</ref>(std::unique_ptr&lt;<ref refid="struct_catch_1_1_generators_1_1_i_generator" kindref="compound">IGenerator&lt;T&gt;</ref>&gt;(pf::make_unique&lt;<ref refid="class_catch_1_1_generators_1_1_filter_generator" kindref="compound">FilterGenerator&lt;T, Predicate&gt;</ref>&gt;(std::forward&lt;Predicate&gt;(pred),<sp/>std::move(generator))));</highlight></codeline>
<codeline lineno="4190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4191"><highlight class="normal"></highlight></codeline>
<codeline lineno="4192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="4193" refid="class_catch_1_1_generators_1_1_repeat_generator" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_generators_1_1_repeat_generator" kindref="compound">RepeatGenerator</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_generators_1_1_i_generator" kindref="compound">IGenerator</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="4194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(!std::is_same&lt;T,<sp/>bool&gt;::value,</highlight></codeline>
<codeline lineno="4195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;RepeatGenerator<sp/>currently<sp/>does<sp/>not<sp/>support<sp/>bools&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;because<sp/>of<sp/>std::vector&lt;bool&gt;<sp/>specialization&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper&lt;T&gt;</ref><sp/>m_generator;</highlight></codeline>
<codeline lineno="4198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;<sp/>m_returned;</highlight></codeline>
<codeline lineno="4199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m_target_repeats;</highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m_current_repeat<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m_repeat_index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_generators_1_1_repeat_generator" kindref="compound">RepeatGenerator</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>repeats,<sp/><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper&lt;T&gt;</ref>&amp;&amp;<sp/>generator):</highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_generator(std::move(generator)),</highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_target_repeats(repeats)</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(m_target_repeats<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Repeat<sp/>generator<sp/>must<sp/>repeat<sp/>at<sp/>least<sp/>once&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4209"><highlight class="normal"></highlight></codeline>
<codeline lineno="4210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>get()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_current_repeat<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_returned.push_back(m_generator.get());</highlight></codeline>
<codeline lineno="4213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_returned.back();</highlight></codeline>
<codeline lineno="4214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_returned[m_repeat_index];</highlight></codeline>
<codeline lineno="4216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4217"><highlight class="normal"></highlight></codeline>
<codeline lineno="4218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>next()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>are<sp/>2<sp/>basic<sp/>cases:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1)<sp/>We<sp/>are<sp/>still<sp/>reading<sp/>the<sp/>generator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2)<sp/>We<sp/>are<sp/>reading<sp/>our<sp/>own<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4222"><highlight class="normal"></highlight></codeline>
<codeline lineno="4223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>first<sp/>case,<sp/>we<sp/>need<sp/>to<sp/>poke<sp/>the<sp/>underlying<sp/>generator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>it<sp/>happily<sp/>moves,<sp/>we<sp/>are<sp/>left<sp/>in<sp/>that<sp/>state,<sp/>otherwise<sp/>it<sp/>is<sp/>time<sp/>to<sp/>start<sp/>reading<sp/>from<sp/>our<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_current_repeat<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>success<sp/>=<sp/>m_generator.next();</highlight></codeline>
<codeline lineno="4227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!success)<sp/>{</highlight></codeline>
<codeline lineno="4228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++m_current_repeat;</highlight></codeline>
<codeline lineno="4229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_current_repeat<sp/>&lt;<sp/>m_target_repeats;</highlight></codeline>
<codeline lineno="4231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4232"><highlight class="normal"></highlight></codeline>
<codeline lineno="4233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>second<sp/>case,<sp/>we<sp/>need<sp/>to<sp/>move<sp/>indices<sp/>forward<sp/>and<sp/>check<sp/>that<sp/>we<sp/>haven&apos;t<sp/>run<sp/>up<sp/>against<sp/>the<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++m_repeat_index;</highlight></codeline>
<codeline lineno="4235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_repeat_index<sp/>==<sp/>m_returned.size())<sp/>{</highlight></codeline>
<codeline lineno="4236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_repeat_index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++m_current_repeat;</highlight></codeline>
<codeline lineno="4238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_current_repeat<sp/>&lt;<sp/>m_target_repeats;</highlight></codeline>
<codeline lineno="4240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4241"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4242"><highlight class="normal"></highlight></codeline>
<codeline lineno="4243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="4244"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper&lt;T&gt;</ref><sp/><ref refid="group__gtx__wrap_1ga809650c6310ea7c42666e918c117fb6f" kindref="member">repeat</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>repeats,<sp/><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper&lt;T&gt;</ref>&amp;&amp;<sp/>generator)<sp/>{</highlight></codeline>
<codeline lineno="4245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper&lt;T&gt;</ref>(pf::make_unique&lt;<ref refid="class_catch_1_1_generators_1_1_repeat_generator" kindref="compound">RepeatGenerator&lt;T&gt;</ref>&gt;(repeats,<sp/>std::move(generator)));</highlight></codeline>
<codeline lineno="4246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4247"><highlight class="normal"></highlight></codeline>
<codeline lineno="4248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func&gt;</highlight></codeline>
<codeline lineno="4249" refid="class_catch_1_1_generators_1_1_map_generator" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_generators_1_1_map_generator" kindref="compound">MapGenerator</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_generators_1_1_i_generator" kindref="compound">IGenerator</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="4250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TBD:<sp/>provide<sp/>static<sp/>assert<sp/>for<sp/>mapping<sp/>function,<sp/>for<sp/>friendly<sp/>error<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper&lt;U&gt;</ref><sp/>m_generator;</highlight></codeline>
<codeline lineno="4252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Func<sp/>m_function;</highlight></codeline>
<codeline lineno="4253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>avoid<sp/>returning<sp/>dangling<sp/>reference,<sp/>we<sp/>have<sp/>to<sp/>save<sp/>the<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>m_cache;</highlight></codeline>
<codeline lineno="4255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F2<sp/>=<sp/>Func&gt;</highlight></codeline>
<codeline lineno="4257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_generators_1_1_map_generator" kindref="compound">MapGenerator</ref>(F2&amp;&amp;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper&lt;U&gt;</ref>&amp;&amp;<sp/>generator)<sp/>:</highlight></codeline>
<codeline lineno="4258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_generator(std::move(generator)),</highlight></codeline>
<codeline lineno="4259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_function(std::forward&lt;F2&gt;(</highlight><highlight class="keyword">function</highlight><highlight class="normal">)),</highlight></codeline>
<codeline lineno="4260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_cache(m_function(m_generator.get()))</highlight></codeline>
<codeline lineno="4261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="4262"><highlight class="normal"></highlight></codeline>
<codeline lineno="4263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>get()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_cache;</highlight></codeline>
<codeline lineno="4265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>next()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>success<sp/>=<sp/>m_generator.next();</highlight></codeline>
<codeline lineno="4268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(success)<sp/>{</highlight></codeline>
<codeline lineno="4269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_cache<sp/>=<sp/>m_function(m_generator.get());</highlight></codeline>
<codeline lineno="4270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>success;</highlight></codeline>
<codeline lineno="4272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4273"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4274"><highlight class="normal"></highlight></codeline>
<codeline lineno="4275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>FunctionReturnType&lt;Func,<sp/>U&gt;&gt;</highlight></codeline>
<codeline lineno="4276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper&lt;T&gt;</ref><sp/>map(Func&amp;&amp;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper&lt;U&gt;</ref>&amp;&amp;<sp/>generator)<sp/>{</highlight></codeline>
<codeline lineno="4277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper&lt;T&gt;</ref>(</highlight></codeline>
<codeline lineno="4278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pf::make_unique&lt;<ref refid="class_catch_1_1_generators_1_1_map_generator" kindref="compound">MapGenerator&lt;T, U, Func&gt;</ref>&gt;(std::forward&lt;Func&gt;(</highlight><highlight class="keyword">function</highlight><highlight class="normal">),<sp/>std::move(generator))</highlight></codeline>
<codeline lineno="4279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="4280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4281"><highlight class="normal"></highlight></codeline>
<codeline lineno="4282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func&gt;</highlight></codeline>
<codeline lineno="4283"><highlight class="normal"><sp/><sp/><sp/><sp/>GeneratorWrapper&lt;T&gt;<sp/>map(Func&amp;&amp;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">,<sp/>GeneratorWrapper&lt;U&gt;&amp;&amp;<sp/>generator)<sp/>{</highlight></codeline>
<codeline lineno="4284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GeneratorWrapper&lt;T&gt;(</highlight></codeline>
<codeline lineno="4285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pf::make_unique&lt;MapGenerator&lt;T,<sp/>U,<sp/>Func&gt;&gt;(std::forward&lt;Func&gt;(</highlight><highlight class="keyword">function</highlight><highlight class="normal">),<sp/>std::move(generator))</highlight></codeline>
<codeline lineno="4286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="4287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4288"><highlight class="normal"></highlight></codeline>
<codeline lineno="4289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="4290" refid="class_catch_1_1_generators_1_1_chunk_generator" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_generators_1_1_chunk_generator" kindref="compound">ChunkGenerator</ref><sp/>final<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_generators_1_1_i_generator" kindref="compound">IGenerator</ref>&lt;std::vector&lt;T&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="4291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>m_chunk;</highlight></codeline>
<codeline lineno="4292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m_chunk_size;</highlight></codeline>
<codeline lineno="4293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper&lt;T&gt;</ref><sp/>m_generator;</highlight></codeline>
<codeline lineno="4294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_used_up<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_generators_1_1_chunk_generator" kindref="compound">ChunkGenerator</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper&lt;T&gt;</ref><sp/>generator)<sp/>:</highlight></codeline>
<codeline lineno="4297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_chunk_size(size),<sp/>m_generator(std::move(generator))</highlight></codeline>
<codeline lineno="4298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_chunk.reserve(m_chunk_size);</highlight></codeline>
<codeline lineno="4300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_chunk_size<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_chunk.push_back(m_generator.get());</highlight></codeline>
<codeline lineno="4302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>m_chunk_size;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="4303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_generator.next())<sp/>{</highlight></codeline>
<codeline lineno="4304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::throw_exception(<ref refid="class_catch_1_1_generator_exception" kindref="compound">GeneratorException</ref>(</highlight><highlight class="stringliteral">&quot;Not<sp/>enough<sp/>values<sp/>to<sp/>initialize<sp/>the<sp/>first<sp/>chunk&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_chunk.push_back(m_generator.get());</highlight></codeline>
<codeline lineno="4307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>get()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_chunk;</highlight></codeline>
<codeline lineno="4312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>next()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_chunk.clear();</highlight></codeline>
<codeline lineno="4315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>m_chunk_size;<sp/>++idx)<sp/>{</highlight></codeline>
<codeline lineno="4316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_generator.next())<sp/>{</highlight></codeline>
<codeline lineno="4317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_chunk.push_back(m_generator.get());</highlight></codeline>
<codeline lineno="4320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4323"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4324"><highlight class="normal"></highlight></codeline>
<codeline lineno="4325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="4326"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper&lt;std::vector&lt;T&gt;</ref>&gt;<sp/><ref refid="structchunk" kindref="compound">chunk</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper&lt;T&gt;</ref>&amp;&amp;<sp/>generator)<sp/>{</highlight></codeline>
<codeline lineno="4327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper&lt;std::vector&lt;T&gt;</ref>&gt;(</highlight></codeline>
<codeline lineno="4328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pf::make_unique&lt;ChunkGenerator&lt;T&gt;&gt;(size,<sp/>std::move(generator))</highlight></codeline>
<codeline lineno="4329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="4330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4331"><highlight class="normal"></highlight></codeline>
<codeline lineno="4332"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Generators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4333"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4334"><highlight class="normal"></highlight></codeline>
<codeline lineno="4335"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_generators_generic.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4336"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_generators_specific.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4337"><highlight class="normal"></highlight></codeline>
<codeline lineno="4338"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_context.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4339"><highlight class="normal"></highlight></codeline>
<codeline lineno="4340"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4341"><highlight class="normal"></highlight></codeline>
<codeline lineno="4342"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="4343"><highlight class="normal"></highlight></codeline>
<codeline lineno="4344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IResultCapture;</highlight></codeline>
<codeline lineno="4345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IRunner;</highlight></codeline>
<codeline lineno="4346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IConfig;</highlight></codeline>
<codeline lineno="4347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IMutableContext;</highlight></codeline>
<codeline lineno="4348"><highlight class="normal"></highlight></codeline>
<codeline lineno="4349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>IConfigPtr<sp/>=<sp/>std::shared_ptr&lt;IConfig<sp/>const&gt;;</highlight></codeline>
<codeline lineno="4350"><highlight class="normal"></highlight></codeline>
<codeline lineno="4351" refid="struct_catch_1_1_i_context" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_i_context" kindref="compound">IContext</ref></highlight></codeline>
<codeline lineno="4352"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_i_context" kindref="compound">~IContext</ref>();</highlight></codeline>
<codeline lineno="4354"><highlight class="normal"></highlight></codeline>
<codeline lineno="4355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_i_result_capture" kindref="compound">IResultCapture</ref>*<sp/>getResultCapture()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_i_runner" kindref="compound">IRunner</ref>*<sp/>getRunner()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>IConfigPtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>getConfig()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4359"><highlight class="normal"></highlight></codeline>
<codeline lineno="4360" refid="struct_catch_1_1_i_mutable_context" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_i_mutable_context" kindref="compound">IMutableContext</ref><sp/>:<sp/><ref refid="struct_catch_1_1_i_context" kindref="compound">IContext</ref></highlight></codeline>
<codeline lineno="4361"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_i_mutable_context" kindref="compound">~IMutableContext</ref>();</highlight></codeline>
<codeline lineno="4363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setResultCapture(<sp/><ref refid="struct_catch_1_1_i_result_capture" kindref="compound">IResultCapture</ref>*<sp/>resultCapture<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setRunner(<sp/><ref refid="struct_catch_1_1_i_runner" kindref="compound">IRunner</ref>*<sp/>runner<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setConfig(<sp/>IConfigPtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4366"><highlight class="normal"></highlight></codeline>
<codeline lineno="4367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_i_mutable_context" kindref="compound">IMutableContext</ref><sp/>*currentContext;</highlight></codeline>
<codeline lineno="4369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_i_mutable_context" kindref="compound">IMutableContext</ref>&amp;<sp/>getCurrentMutableContext();</highlight></codeline>
<codeline lineno="4370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cleanUpContext();</highlight></codeline>
<codeline lineno="4371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>createContext();</highlight></codeline>
<codeline lineno="4372"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4373"><highlight class="normal"></highlight></codeline>
<codeline lineno="4374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_i_mutable_context" kindref="compound">IMutableContext</ref>&amp;<sp/>getCurrentMutableContext()</highlight></codeline>
<codeline lineno="4375"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!IMutableContext::currentContext<sp/>)</highlight></codeline>
<codeline lineno="4377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMutableContext::createContext();</highlight></codeline>
<codeline lineno="4378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINTNEXTLINE(clang-analyzer-core.uninitialized.UndefReturn)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*IMutableContext::currentContext;</highlight></codeline>
<codeline lineno="4380"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4381"><highlight class="normal"></highlight></codeline>
<codeline lineno="4382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>IContext&amp;<sp/>getCurrentContext()</highlight></codeline>
<codeline lineno="4383"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getCurrentMutableContext();</highlight></codeline>
<codeline lineno="4385"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4386"><highlight class="normal"></highlight></codeline>
<codeline lineno="4387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cleanUpContext();</highlight></codeline>
<codeline lineno="4388"><highlight class="normal"></highlight></codeline>
<codeline lineno="4389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SimplePcg32;</highlight></codeline>
<codeline lineno="4390"><highlight class="normal"><sp/><sp/><sp/><sp/>SimplePcg32&amp;<sp/>rng();</highlight></codeline>
<codeline lineno="4391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4392"><highlight class="normal"></highlight></codeline>
<codeline lineno="4393"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_context.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4394"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_interfaces_config.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4395"><highlight class="normal"></highlight></codeline>
<codeline lineno="4396"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_option.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4397"><highlight class="normal"></highlight></codeline>
<codeline lineno="4398"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="4399"><highlight class="normal"></highlight></codeline>
<codeline lineno="4400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>An<sp/>optional<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="4402" refid="class_catch_1_1_option" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_option" kindref="compound">Option</ref><sp/>{</highlight></codeline>
<codeline lineno="4403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_option" kindref="compound">Option</ref>()<sp/>:<sp/>nullableValue(<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="4405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_option" kindref="compound">Option</ref>(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_value<sp/>)</highlight></codeline>
<codeline lineno="4406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>nullableValue(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<sp/>storage<sp/>)<sp/>T(<sp/>_value<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="4407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="4408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_option" kindref="compound">Option</ref>(<sp/><ref refid="class_catch_1_1_option" kindref="compound">Option</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_other<sp/>)</highlight></codeline>
<codeline lineno="4409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>nullableValue(<sp/>_other<sp/>?<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<sp/>storage<sp/>)<sp/>T(<sp/>*_other<sp/>)<sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="4410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="4411"><highlight class="normal"></highlight></codeline>
<codeline lineno="4412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_option" kindref="compound">~Option</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reset();</highlight></codeline>
<codeline lineno="4414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4415"><highlight class="normal"></highlight></codeline>
<codeline lineno="4416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_option" kindref="compound">Option</ref>&amp;<sp/>operator=<sp/>(<sp/><ref refid="class_catch_1_1_option" kindref="compound">Option</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_other<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>&amp;_other<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reset();</highlight></codeline>
<codeline lineno="4419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>_other<sp/>)</highlight></codeline>
<codeline lineno="4420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nullableValue<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<sp/>storage<sp/>)<sp/>T(<sp/>*_other<sp/>);</highlight></codeline>
<codeline lineno="4421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_option" kindref="compound">Option</ref>&amp;<sp/>operator<sp/>=<sp/>(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_value<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reset();</highlight></codeline>
<codeline lineno="4426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nullableValue<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<sp/>storage<sp/>)<sp/>T(<sp/>_value<sp/>);</highlight></codeline>
<codeline lineno="4427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4429"><highlight class="normal"></highlight></codeline>
<codeline lineno="4430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reset()<sp/>{</highlight></codeline>
<codeline lineno="4431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>nullableValue<sp/>)</highlight></codeline>
<codeline lineno="4432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nullableValue-&gt;~T();</highlight></codeline>
<codeline lineno="4433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nullableValue<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4435"><highlight class="normal"></highlight></codeline>
<codeline lineno="4436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T&amp;<sp/>operator*()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*nullableValue;<sp/>}</highlight></codeline>
<codeline lineno="4437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>operator*()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*nullableValue;<sp/>}</highlight></codeline>
<codeline lineno="4438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T*<sp/>operator-&gt;()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nullableValue;<sp/>}</highlight></codeline>
<codeline lineno="4439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>operator-&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nullableValue;<sp/>}</highlight></codeline>
<codeline lineno="4440"><highlight class="normal"></highlight></codeline>
<codeline lineno="4441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>valueOr(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>defaultValue<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nullableValue<sp/>?<sp/>*nullableValue<sp/>:<sp/>defaultValue;</highlight></codeline>
<codeline lineno="4443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4444"><highlight class="normal"></highlight></codeline>
<codeline lineno="4445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>some()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nullableValue<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="4446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>none()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nullableValue<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="4447"><highlight class="normal"></highlight></codeline>
<codeline lineno="4448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>!()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nullableValue<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="4449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>some();</highlight></codeline>
<codeline lineno="4451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4452"><highlight class="normal"></highlight></codeline>
<codeline lineno="4453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>*nullableValue;</highlight></codeline>
<codeline lineno="4455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">alignas</highlight><highlight class="normal">(</highlight><highlight class="keyword">alignof</highlight><highlight class="normal">(T))<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>storage[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)];</highlight></codeline>
<codeline lineno="4456"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4457"><highlight class="normal"></highlight></codeline>
<codeline lineno="4458"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4459"><highlight class="normal"></highlight></codeline>
<codeline lineno="4460"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_option.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4461"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4462"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iosfwd&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4463"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4464"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4465"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4466"><highlight class="normal"></highlight></codeline>
<codeline lineno="4467"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="4468"><highlight class="normal"></highlight></codeline>
<codeline lineno="4469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>Verbosity<sp/>{</highlight></codeline>
<codeline lineno="4470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Quiet<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="4471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Normal,</highlight></codeline>
<codeline lineno="4472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>High</highlight></codeline>
<codeline lineno="4473"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4474"><highlight class="normal"></highlight></codeline>
<codeline lineno="4475" refid="struct_catch_1_1_warn_about" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_warn_about" kindref="compound">WarnAbout</ref><sp/>{<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>What<sp/>{</highlight></codeline>
<codeline lineno="4476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Nothing<sp/>=<sp/>0x00,</highlight></codeline>
<codeline lineno="4477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NoAssertions<sp/>=<sp/>0x01,</highlight></codeline>
<codeline lineno="4478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NoTests<sp/>=<sp/>0x02</highlight></codeline>
<codeline lineno="4479"><highlight class="normal"><sp/><sp/><sp/><sp/>};<sp/>};</highlight></codeline>
<codeline lineno="4480"><highlight class="normal"></highlight></codeline>
<codeline lineno="4481" refid="struct_catch_1_1_show_durations" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_show_durations" kindref="compound">ShowDurations</ref><sp/>{<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>OrNot<sp/>{</highlight></codeline>
<codeline lineno="4482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DefaultForReporter,</highlight></codeline>
<codeline lineno="4483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Always,</highlight></codeline>
<codeline lineno="4484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Never</highlight></codeline>
<codeline lineno="4485"><highlight class="normal"><sp/><sp/><sp/><sp/>};<sp/>};</highlight></codeline>
<codeline lineno="4486" refid="struct_catch_1_1_run_tests" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_run_tests" kindref="compound">RunTests</ref><sp/>{<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>InWhatOrder<sp/>{</highlight></codeline>
<codeline lineno="4487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InDeclarationOrder,</highlight></codeline>
<codeline lineno="4488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InLexicographicalOrder,</highlight></codeline>
<codeline lineno="4489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InRandomOrder</highlight></codeline>
<codeline lineno="4490"><highlight class="normal"><sp/><sp/><sp/><sp/>};<sp/>};</highlight></codeline>
<codeline lineno="4491" refid="struct_catch_1_1_use_colour" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_use_colour" kindref="compound">UseColour</ref><sp/>{<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>YesOrNo<sp/>{</highlight></codeline>
<codeline lineno="4492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Auto,</highlight></codeline>
<codeline lineno="4493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Yes,</highlight></codeline>
<codeline lineno="4494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>No</highlight></codeline>
<codeline lineno="4495"><highlight class="normal"><sp/><sp/><sp/><sp/>};<sp/>};</highlight></codeline>
<codeline lineno="4496" refid="struct_catch_1_1_wait_for_keypress" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_wait_for_keypress" kindref="compound">WaitForKeypress</ref><sp/>{<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>When<sp/>{</highlight></codeline>
<codeline lineno="4497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Never,</highlight></codeline>
<codeline lineno="4498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BeforeStart<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="4499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BeforeExit<sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="4500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BeforeStartAndExit<sp/>=<sp/>BeforeStart<sp/>|<sp/>BeforeExit</highlight></codeline>
<codeline lineno="4501"><highlight class="normal"><sp/><sp/><sp/><sp/>};<sp/>};</highlight></codeline>
<codeline lineno="4502"><highlight class="normal"></highlight></codeline>
<codeline lineno="4503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TestSpec;</highlight></codeline>
<codeline lineno="4504"><highlight class="normal"></highlight></codeline>
<codeline lineno="4505" refid="struct_catch_1_1_i_config" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_i_config" kindref="compound">IConfig</ref><sp/>:<sp/><ref refid="class_catch_1_1_non_copyable" kindref="compound">NonCopyable</ref><sp/>{</highlight></codeline>
<codeline lineno="4506"><highlight class="normal"></highlight></codeline>
<codeline lineno="4507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_i_config" kindref="compound">~IConfig</ref>();</highlight></codeline>
<codeline lineno="4508"><highlight class="normal"></highlight></codeline>
<codeline lineno="4509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allowThrows()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::ostream&amp;<sp/>stream()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/>name()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>includeSuccessfulResults()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shouldDebugBreak()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>warnAboutMissingAssertions()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>warnAboutNoTests()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>abortAfter()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>showInvisibles()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>ShowDurations::OrNot<sp/>showDurations()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minDuration()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>TestSpec<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testSpec()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasTestFilters()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>getTestsOrTags()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>RunTests::InWhatOrder<sp/>runOrder()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rngSeed()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>UseColour::YesOrNo<sp/>useColour()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>getSectionsToRun()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Verbosity<sp/>verbosity()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4528"><highlight class="normal"></highlight></codeline>
<codeline lineno="4529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>benchmarkNoAnalysis()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>benchmarkSamples()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>benchmarkConfidenceInterval()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>benchmarkResamples()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::chrono::milliseconds<sp/>benchmarkWarmupTime()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4534"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4535"><highlight class="normal"></highlight></codeline>
<codeline lineno="4536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>IConfigPtr<sp/>=<sp/>std::shared_ptr&lt;IConfig<sp/>const&gt;;</highlight></codeline>
<codeline lineno="4537"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4538"><highlight class="normal"></highlight></codeline>
<codeline lineno="4539"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_interfaces_config.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4540"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_random_number_generator.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4541"><highlight class="normal"></highlight></codeline>
<codeline lineno="4542"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4543"><highlight class="normal"></highlight></codeline>
<codeline lineno="4544"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="4545"><highlight class="normal"></highlight></codeline>
<codeline lineno="4546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>simple<sp/>implementation<sp/>of<sp/>C++11<sp/>Uniform<sp/>Random<sp/>Number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generator.<sp/>It<sp/>does<sp/>not<sp/>provide<sp/>all<sp/>operators,<sp/>because<sp/>Catch2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>does<sp/>not<sp/>use<sp/>it,<sp/>but<sp/>it<sp/>should<sp/>behave<sp/>as<sp/>expected<sp/>inside<sp/>stdlib&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>distributions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>implementation<sp/>is<sp/>based<sp/>on<sp/>the<sp/>PCG<sp/>family<sp/>(http://pcg-random.org)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4551" refid="class_catch_1_1_simple_pcg32" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_simple_pcg32" kindref="compound">SimplePcg32</ref><sp/>{</highlight></codeline>
<codeline lineno="4552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>state_type<sp/>=<sp/><ref refid="group__gtc__type__precision_1ga058f57c19e1befdcf12498944bd73e69" kindref="member">std::uint64_t</ref>;</highlight></codeline>
<codeline lineno="4553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>result_type<sp/>=<sp/><ref refid="group__gtc__type__precision_1ga822ca53a9ad412504532838906276a99" kindref="member">std::uint32_t</ref>;</highlight></codeline>
<codeline lineno="4555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>result_type<sp/>(min)()<sp/>{</highlight></codeline>
<codeline lineno="4556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>result_type<sp/>(max)()<sp/>{</highlight></codeline>
<codeline lineno="4559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">result_type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(-1);</highlight></codeline>
<codeline lineno="4560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4561"><highlight class="normal"></highlight></codeline>
<codeline lineno="4562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Provide<sp/>some<sp/>default<sp/>initial<sp/>state<sp/>for<sp/>the<sp/>default<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_simple_pcg32" kindref="compound">SimplePcg32</ref>():<ref refid="class_catch_1_1_simple_pcg32" kindref="compound">SimplePcg32</ref>(0xed743cc4U)<sp/>{}</highlight></codeline>
<codeline lineno="4564"><highlight class="normal"></highlight></codeline>
<codeline lineno="4565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="class_catch_1_1_simple_pcg32" kindref="compound">SimplePcg32</ref>(result_type<sp/>seed_);</highlight></codeline>
<codeline lineno="4566"><highlight class="normal"></highlight></codeline>
<codeline lineno="4567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>seed(result_type<sp/>seed_);</highlight></codeline>
<codeline lineno="4568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>discard(uint64_t<sp/>skip);</highlight></codeline>
<codeline lineno="4569"><highlight class="normal"></highlight></codeline>
<codeline lineno="4570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result_type<sp/>operator()();</highlight></codeline>
<codeline lineno="4571"><highlight class="normal"></highlight></codeline>
<codeline lineno="4572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(<ref refid="class_catch_1_1_simple_pcg32" kindref="compound">SimplePcg32</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/><ref refid="class_catch_1_1_simple_pcg32" kindref="compound">SimplePcg32</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="4574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(<ref refid="class_catch_1_1_simple_pcg32" kindref="compound">SimplePcg32</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/><ref refid="class_catch_1_1_simple_pcg32" kindref="compound">SimplePcg32</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="4575"><highlight class="normal"></highlight></codeline>
<codeline lineno="4576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>theory<sp/>we<sp/>also<sp/>need<sp/>operator&lt;&lt;<sp/>and<sp/>operator&gt;&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>practice<sp/>we<sp/>do<sp/>not<sp/>use<sp/>them,<sp/>so<sp/>we<sp/>will<sp/>skip<sp/>them<sp/>for<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4578"><highlight class="normal"></highlight></codeline>
<codeline lineno="4579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__type__precision_1ga058f57c19e1befdcf12498944bd73e69" kindref="member">std::uint64_t</ref><sp/>m_state;</highlight></codeline>
<codeline lineno="4580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>part<sp/>of<sp/>the<sp/>state<sp/>determines<sp/>which<sp/>&quot;stream&quot;<sp/>of<sp/>the<sp/>numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>chosen<sp/>--<sp/>we<sp/>take<sp/>it<sp/>as<sp/>a<sp/>constant<sp/>for<sp/>Catch2,<sp/>so<sp/>we<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>deal<sp/>with<sp/>seeding<sp/>the<sp/>main<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Picked<sp/>by<sp/>reading<sp/>8<sp/>bytes<sp/>from<sp/>`/dev/random`<sp/>:-)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__gtc__type__precision_1ga058f57c19e1befdcf12498944bd73e69" kindref="member">std::uint64_t</ref><sp/>s_inc<sp/>=<sp/>(0x13ed0cc53f939476ULL<sp/>&lt;&lt;<sp/>1ULL)<sp/>|<sp/>1ULL;</highlight></codeline>
<codeline lineno="4585"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4586"><highlight class="normal"></highlight></codeline>
<codeline lineno="4587"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4588"><highlight class="normal"></highlight></codeline>
<codeline lineno="4589"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_random_number_generator.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4590"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;random&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4591"><highlight class="normal"></highlight></codeline>
<codeline lineno="4592"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="4593"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Generators<sp/>{</highlight></codeline>
<codeline lineno="4594"><highlight class="normal"></highlight></codeline>
<codeline lineno="4595"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Float&gt;</highlight></codeline>
<codeline lineno="4596" refid="class_catch_1_1_generators_1_1_random_floating_generator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_generators_1_1_random_floating_generator" kindref="compound">RandomFloatingGenerator</ref><sp/>final<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_generators_1_1_i_generator" kindref="compound">IGenerator</ref>&lt;Float&gt;<sp/>{</highlight></codeline>
<codeline lineno="4597"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_simple_pcg32" kindref="compound">Catch::SimplePcg32</ref>&amp;<sp/>m_rng;</highlight></codeline>
<codeline lineno="4598"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uniform_real_distribution&lt;Float&gt;<sp/>m_dist;</highlight></codeline>
<codeline lineno="4599"><highlight class="normal"><sp/><sp/><sp/><sp/>Float<sp/>m_current_number;</highlight></codeline>
<codeline lineno="4600"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4601"><highlight class="normal"></highlight></codeline>
<codeline lineno="4602"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_generators_1_1_random_floating_generator" kindref="compound">RandomFloatingGenerator</ref>(Float<sp/>a,<sp/>Float<sp/>b):</highlight></codeline>
<codeline lineno="4603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_rng(rng()),</highlight></codeline>
<codeline lineno="4604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_dist(a,<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="4605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(next());</highlight></codeline>
<codeline lineno="4606"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4607"><highlight class="normal"></highlight></codeline>
<codeline lineno="4608"><highlight class="normal"><sp/><sp/><sp/><sp/>Float<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>get()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_current_number;</highlight></codeline>
<codeline lineno="4610"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>next()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_current_number<sp/>=<sp/>m_dist(m_rng);</highlight></codeline>
<codeline lineno="4613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4614"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4615"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4616"><highlight class="normal"></highlight></codeline>
<codeline lineno="4617"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Integer&gt;</highlight></codeline>
<codeline lineno="4618" refid="class_catch_1_1_generators_1_1_random_integer_generator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_generators_1_1_random_integer_generator" kindref="compound">RandomIntegerGenerator</ref><sp/>final<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_generators_1_1_i_generator" kindref="compound">IGenerator</ref>&lt;Integer&gt;<sp/>{</highlight></codeline>
<codeline lineno="4619"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_simple_pcg32" kindref="compound">Catch::SimplePcg32</ref>&amp;<sp/>m_rng;</highlight></codeline>
<codeline lineno="4620"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uniform_int_distribution&lt;Integer&gt;<sp/>m_dist;</highlight></codeline>
<codeline lineno="4621"><highlight class="normal"><sp/><sp/><sp/><sp/>Integer<sp/>m_current_number;</highlight></codeline>
<codeline lineno="4622"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4623"><highlight class="normal"></highlight></codeline>
<codeline lineno="4624"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_generators_1_1_random_integer_generator" kindref="compound">RandomIntegerGenerator</ref>(Integer<sp/>a,<sp/>Integer<sp/>b):</highlight></codeline>
<codeline lineno="4625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_rng(rng()),</highlight></codeline>
<codeline lineno="4626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_dist(a,<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="4627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(next());</highlight></codeline>
<codeline lineno="4628"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4629"><highlight class="normal"></highlight></codeline>
<codeline lineno="4630"><highlight class="normal"><sp/><sp/><sp/><sp/>Integer<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>get()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_current_number;</highlight></codeline>
<codeline lineno="4632"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>next()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_current_number<sp/>=<sp/>m_dist(m_rng);</highlight></codeline>
<codeline lineno="4635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4636"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4637"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4638"><highlight class="normal"></highlight></codeline>
<codeline lineno="4639"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO:<sp/>Ideally<sp/>this<sp/>would<sp/>be<sp/>also<sp/>constrained<sp/>against<sp/>the<sp/>various<sp/>char<sp/>types,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4640"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>but<sp/>I<sp/>don&apos;t<sp/>expect<sp/>users<sp/>to<sp/>run<sp/>into<sp/>that<sp/>in<sp/>practice.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4641"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="4642"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;std::is_integral&lt;T&gt;::value<sp/>&amp;&amp;<sp/>!std::is_same&lt;T,<sp/>bool&gt;::value,</highlight></codeline>
<codeline lineno="4643"><highlight class="normal"><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper&lt;T&gt;</ref>&gt;::type</highlight></codeline>
<codeline lineno="4644"><highlight class="normal">random(T<sp/>a,<sp/>T<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="4645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper&lt;T&gt;</ref>(</highlight></codeline>
<codeline lineno="4646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pf::make_unique&lt;<ref refid="class_catch_1_1_generators_1_1_random_integer_generator" kindref="compound">RandomIntegerGenerator&lt;T&gt;</ref>&gt;(a,<sp/>b)</highlight></codeline>
<codeline lineno="4647"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="4648"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4649"><highlight class="normal"></highlight></codeline>
<codeline lineno="4650"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="4651"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;std::is_floating_point&lt;T&gt;::value,</highlight></codeline>
<codeline lineno="4652"><highlight class="normal">GeneratorWrapper&lt;T&gt;&gt;::type</highlight></codeline>
<codeline lineno="4653"><highlight class="normal">random(T<sp/>a,<sp/>T<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="4654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GeneratorWrapper&lt;T&gt;(</highlight></codeline>
<codeline lineno="4655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pf::make_unique&lt;RandomFloatingGenerator&lt;T&gt;&gt;(a,<sp/>b)</highlight></codeline>
<codeline lineno="4656"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="4657"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4658"><highlight class="normal"></highlight></codeline>
<codeline lineno="4659"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="4660" refid="class_catch_1_1_generators_1_1_range_generator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_generators_1_1_range_generator" kindref="compound">RangeGenerator</ref><sp/>final<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_generators_1_1_i_generator" kindref="compound">IGenerator</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="4661"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>m_current;</highlight></codeline>
<codeline lineno="4662"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>m_end;</highlight></codeline>
<codeline lineno="4663"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>m_step;</highlight></codeline>
<codeline lineno="4664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_positive;</highlight></codeline>
<codeline lineno="4665"><highlight class="normal"></highlight></codeline>
<codeline lineno="4666"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4667"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_generators_1_1_range_generator" kindref="compound">RangeGenerator</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>start,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>end,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>):</highlight></codeline>
<codeline lineno="4668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_current(start),</highlight></codeline>
<codeline lineno="4669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_end(end),</highlight></codeline>
<codeline lineno="4670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_step(<ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>),</highlight></codeline>
<codeline lineno="4671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_positive(m_step<sp/>&gt;<sp/>T(0))</highlight></codeline>
<codeline lineno="4672"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(m_current<sp/>!=<sp/>m_end<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Range<sp/>start<sp/>and<sp/>end<sp/>cannot<sp/>be<sp/>equal&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(m_step<sp/>!=<sp/>T(0)<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Step<sp/>size<sp/>cannot<sp/>be<sp/>zero&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(((m_positive<sp/>&amp;&amp;<sp/>m_current<sp/>&lt;=<sp/>m_end)<sp/>||<sp/>(!m_positive<sp/>&amp;&amp;<sp/>m_current<sp/>&gt;=<sp/>m_end))<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Step<sp/>moves<sp/>away<sp/>from<sp/>end&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4676"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4677"><highlight class="normal"></highlight></codeline>
<codeline lineno="4678"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_generators_1_1_range_generator" kindref="compound">RangeGenerator</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>start,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>end):</highlight></codeline>
<codeline lineno="4679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_generators_1_1_range_generator" kindref="compound">RangeGenerator</ref>(start,<sp/>end,<sp/>(start<sp/>&lt;<sp/>end)<sp/>?<sp/>T(1)<sp/>:<sp/>T(-1))</highlight></codeline>
<codeline lineno="4680"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="4681"><highlight class="normal"></highlight></codeline>
<codeline lineno="4682"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>get()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_current;</highlight></codeline>
<codeline lineno="4684"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4685"><highlight class="normal"></highlight></codeline>
<codeline lineno="4686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>next()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_current<sp/>+=<sp/>m_step;</highlight></codeline>
<codeline lineno="4688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(m_positive)<sp/>?<sp/>(m_current<sp/>&lt;<sp/>m_end)<sp/>:<sp/>(m_current<sp/>&gt;<sp/>m_end);</highlight></codeline>
<codeline lineno="4689"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4690"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4691"><highlight class="normal"></highlight></codeline>
<codeline lineno="4692"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="4693"><highlight class="normal"><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper&lt;T&gt;</ref><sp/>range(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>start,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>end,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_arithmetic&lt;T&gt;::value<sp/>&amp;&amp;<sp/>!std::is_same&lt;T,<sp/>bool&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;Type<sp/>must<sp/>be<sp/>numeric&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper&lt;T&gt;</ref>(pf::make_unique&lt;<ref refid="class_catch_1_1_generators_1_1_range_generator" kindref="compound">RangeGenerator&lt;T&gt;</ref>&gt;(start,<sp/>end,<sp/><ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>));</highlight></codeline>
<codeline lineno="4696"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4697"><highlight class="normal"></highlight></codeline>
<codeline lineno="4698"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="4699"><highlight class="normal">GeneratorWrapper&lt;T&gt;<sp/>range(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>start,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="4700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(std::is_integral&lt;T&gt;::value<sp/>&amp;&amp;<sp/>!std::is_same&lt;T,<sp/>bool&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;Type<sp/>must<sp/>be<sp/>an<sp/>integer&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GeneratorWrapper&lt;T&gt;(pf::make_unique&lt;RangeGenerator&lt;T&gt;&gt;(start,<sp/>end));</highlight></codeline>
<codeline lineno="4702"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4703"><highlight class="normal"></highlight></codeline>
<codeline lineno="4704"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="4705" refid="class_catch_1_1_generators_1_1_iterator_generator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_generators_1_1_iterator_generator" kindref="compound">IteratorGenerator</ref><sp/>final<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_generators_1_1_i_generator" kindref="compound">IGenerator</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="4706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(!std::is_same&lt;T,<sp/>bool&gt;::value,</highlight></codeline>
<codeline lineno="4707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;IteratorGenerator<sp/>currently<sp/>does<sp/>not<sp/>support<sp/>bools&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;because<sp/>of<sp/>std::vector&lt;bool&gt;<sp/>specialization&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4709"><highlight class="normal"></highlight></codeline>
<codeline lineno="4710"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>m_elems;</highlight></codeline>
<codeline lineno="4711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m_current<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4712"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIterator,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputSentinel&gt;</highlight></codeline>
<codeline lineno="4714"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_generators_1_1_iterator_generator" kindref="compound">IteratorGenerator</ref>(InputIterator<sp/>first,<sp/>InputSentinel<sp/>last):m_elems(first,<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="4715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_elems.empty())<sp/>{</highlight></codeline>
<codeline lineno="4716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::throw_exception(<ref refid="class_catch_1_1_generator_exception" kindref="compound">GeneratorException</ref>(</highlight><highlight class="stringliteral">&quot;IteratorGenerator<sp/>received<sp/>no<sp/>valid<sp/>values&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="4717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4718"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4719"><highlight class="normal"></highlight></codeline>
<codeline lineno="4720"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>get()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_elems[m_current];</highlight></codeline>
<codeline lineno="4722"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4723"><highlight class="normal"></highlight></codeline>
<codeline lineno="4724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>next()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++m_current;</highlight></codeline>
<codeline lineno="4726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_current<sp/>!=<sp/>m_elems.size();</highlight></codeline>
<codeline lineno="4727"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4728"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4729"><highlight class="normal"></highlight></codeline>
<codeline lineno="4730"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIterator,</highlight></codeline>
<codeline lineno="4731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputSentinel,</highlight></codeline>
<codeline lineno="4732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultType<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;InputIterator&gt;::value_type&gt;</highlight></codeline>
<codeline lineno="4733"><highlight class="normal"><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper&lt;ResultType&gt;</ref><sp/>from_range(InputIterator<sp/>from,<sp/>InputSentinel<sp/>to)<sp/>{</highlight></codeline>
<codeline lineno="4734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_catch_1_1_generators_1_1_generator_wrapper" kindref="compound">GeneratorWrapper&lt;ResultType&gt;</ref>(pf::make_unique&lt;<ref refid="class_catch_1_1_generators_1_1_iterator_generator" kindref="compound">IteratorGenerator&lt;ResultType&gt;</ref>&gt;(from,<sp/>to));</highlight></codeline>
<codeline lineno="4735"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4736"><highlight class="normal"></highlight></codeline>
<codeline lineno="4737"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container,</highlight></codeline>
<codeline lineno="4738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ResultType<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container::value_type&gt;</highlight></codeline>
<codeline lineno="4739"><highlight class="normal">GeneratorWrapper&lt;ResultType&gt;<sp/>from_range(Container<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>cnt)<sp/>{</highlight></codeline>
<codeline lineno="4740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GeneratorWrapper&lt;ResultType&gt;(pf::make_unique&lt;IteratorGenerator&lt;ResultType&gt;&gt;(cnt.begin(),<sp/>cnt.end()));</highlight></codeline>
<codeline lineno="4741"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4742"><highlight class="normal"></highlight></codeline>
<codeline lineno="4743"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Generators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4744"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4745"><highlight class="normal"></highlight></codeline>
<codeline lineno="4746"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_generators_specific.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4747"><highlight class="normal"></highlight></codeline>
<codeline lineno="4748"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>files<sp/>are<sp/>included<sp/>here<sp/>so<sp/>the<sp/>single_include<sp/>script<sp/>doesn&apos;t<sp/>put<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4749"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>conditionally<sp/>compiled<sp/>sections</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4750"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_test_case_info.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4751"><highlight class="normal"></highlight></codeline>
<codeline lineno="4752"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4753"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4754"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4755"><highlight class="normal"></highlight></codeline>
<codeline lineno="4756"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4757"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4758"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wpadded&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4759"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4760"><highlight class="normal"></highlight></codeline>
<codeline lineno="4761"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="4762"><highlight class="normal"></highlight></codeline>
<codeline lineno="4763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ITestInvoker;</highlight></codeline>
<codeline lineno="4764"><highlight class="normal"></highlight></codeline>
<codeline lineno="4765" refid="struct_catch_1_1_test_case_info" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_test_case_info" kindref="compound">TestCaseInfo</ref><sp/>{</highlight></codeline>
<codeline lineno="4766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>SpecialProperties{</highlight></codeline>
<codeline lineno="4767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>None<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="4768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IsHidden<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>1,</highlight></codeline>
<codeline lineno="4769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ShouldFail<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>2,</highlight></codeline>
<codeline lineno="4770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MayFail<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>3,</highlight></codeline>
<codeline lineno="4771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Throws<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>4,</highlight></codeline>
<codeline lineno="4772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NonPortable<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>5,</highlight></codeline>
<codeline lineno="4773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Benchmark<sp/>=<sp/>1<sp/>&lt;&lt;<sp/>6</highlight></codeline>
<codeline lineno="4774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4775"><highlight class="normal"></highlight></codeline>
<codeline lineno="4776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_test_case_info" kindref="compound">TestCaseInfo</ref>(<sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_name,</highlight></codeline>
<codeline lineno="4777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_className,</highlight></codeline>
<codeline lineno="4778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_description,</highlight></codeline>
<codeline lineno="4779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_tags,</highlight></codeline>
<codeline lineno="4780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_source_line_info" kindref="compound">SourceLineInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_lineInfo<sp/>);</highlight></codeline>
<codeline lineno="4781"><highlight class="normal"></highlight></codeline>
<codeline lineno="4782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setTags(<sp/><ref refid="struct_catch_1_1_test_case_info" kindref="compound">TestCaseInfo</ref>&amp;<sp/>testCaseInfo,<sp/>std::vector&lt;std::string&gt;<sp/>tags<sp/>);</highlight></codeline>
<codeline lineno="4783"><highlight class="normal"></highlight></codeline>
<codeline lineno="4784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isHidden()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">throws</highlight><highlight class="normal">()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>okToFail()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>expectedToFail()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4788"><highlight class="normal"></highlight></codeline>
<codeline lineno="4789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tagsAsString()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4790"><highlight class="normal"></highlight></codeline>
<codeline lineno="4791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name;</highlight></codeline>
<codeline lineno="4792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>className;</highlight></codeline>
<codeline lineno="4793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>description;</highlight></codeline>
<codeline lineno="4794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>tags;</highlight></codeline>
<codeline lineno="4795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>lcaseTags;</highlight></codeline>
<codeline lineno="4796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_source_line_info" kindref="compound">SourceLineInfo</ref><sp/>lineInfo;</highlight></codeline>
<codeline lineno="4797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SpecialProperties<sp/>properties;</highlight></codeline>
<codeline lineno="4798"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4799"><highlight class="normal"></highlight></codeline>
<codeline lineno="4800" refid="class_catch_1_1_test_case" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_catch_1_1_test_case" kindref="compound">TestCase</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_test_case_info" kindref="compound">TestCaseInfo</ref><sp/>{</highlight></codeline>
<codeline lineno="4801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4802"><highlight class="normal"></highlight></codeline>
<codeline lineno="4803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_test_case" kindref="compound">TestCase</ref>(<sp/><ref refid="struct_catch_1_1_i_test_invoker" kindref="compound">ITestInvoker</ref>*<sp/>testCase,<sp/><ref refid="struct_catch_1_1_test_case_info" kindref="compound">TestCaseInfo</ref>&amp;&amp;<sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>);</highlight></codeline>
<codeline lineno="4804"><highlight class="normal"></highlight></codeline>
<codeline lineno="4805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_test_case" kindref="compound">TestCase</ref><sp/>withName(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_newName<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4806"><highlight class="normal"></highlight></codeline>
<codeline lineno="4807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>invoke()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4808"><highlight class="normal"></highlight></codeline>
<codeline lineno="4809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_test_case_info" kindref="compound">TestCaseInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>getTestCaseInfo()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4810"><highlight class="normal"></highlight></codeline>
<codeline lineno="4811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>==<sp/>(<sp/><ref refid="class_catch_1_1_test_case" kindref="compound">TestCase</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>&lt;<sp/>(<sp/><ref refid="class_catch_1_1_test_case" kindref="compound">TestCase</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4813"><highlight class="normal"></highlight></codeline>
<codeline lineno="4814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;ITestInvoker&gt;<sp/>test;</highlight></codeline>
<codeline lineno="4816"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4817"><highlight class="normal"></highlight></codeline>
<codeline lineno="4818"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_test_case" kindref="compound">TestCase</ref><sp/>makeTestCase(<sp/><sp/><ref refid="struct_catch_1_1_i_test_invoker" kindref="compound">ITestInvoker</ref>*<sp/>testCase,</highlight></codeline>
<codeline lineno="4819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>className,</highlight></codeline>
<codeline lineno="4820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_name_and_tags" kindref="compound">NameAndTags</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>nameAndTags,</highlight></codeline>
<codeline lineno="4821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_catch_1_1_source_line_info" kindref="compound">SourceLineInfo</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lineInfo<sp/>);</highlight></codeline>
<codeline lineno="4822"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4823"><highlight class="normal"></highlight></codeline>
<codeline lineno="4824"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4825"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4826"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4827"><highlight class="normal"></highlight></codeline>
<codeline lineno="4828"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_test_case_info.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4829"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_interfaces_runner.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4830"><highlight class="normal"></highlight></codeline>
<codeline lineno="4831"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="4832"><highlight class="normal"></highlight></codeline>
<codeline lineno="4833" refid="struct_catch_1_1_i_runner" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_catch_1_1_i_runner" kindref="compound">IRunner</ref><sp/>{</highlight></codeline>
<codeline lineno="4834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_i_runner" kindref="compound">~IRunner</ref>();</highlight></codeline>
<codeline lineno="4835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aborting()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4836"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4837"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4838"><highlight class="normal"></highlight></codeline>
<codeline lineno="4839"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_interfaces_runner.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4840"><highlight class="normal"></highlight></codeline>
<codeline lineno="4841"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__OBJC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4842"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_objc.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4843"><highlight class="normal"></highlight></codeline>
<codeline lineno="4844"><highlight class="normal"></highlight><highlight class="preprocessor">#import<sp/>&lt;objc/runtime.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4845"><highlight class="normal"></highlight></codeline>
<codeline lineno="4846"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4847"><highlight class="normal"></highlight></codeline>
<codeline lineno="4848"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NB.<sp/>Any<sp/>general<sp/>catch<sp/>headers<sp/>included<sp/>here<sp/>must<sp/>be<sp/>included</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4849"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>catch.hpp<sp/>first<sp/>to<sp/>make<sp/>sure<sp/>they<sp/>are<sp/>included<sp/>by<sp/>the<sp/>single</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4850"><highlight class="normal"></highlight><highlight class="comment">//<sp/>header<sp/>for<sp/>non<sp/>obj-usage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4851"><highlight class="normal"></highlight></codeline>
<codeline lineno="4853"><highlight class="comment">//<sp/>This<sp/>protocol<sp/>is<sp/>really<sp/>only<sp/>here<sp/>for<sp/>(self)<sp/>documenting<sp/>purposes,<sp/>since</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4854"><highlight class="normal"></highlight><highlight class="comment">//<sp/>all<sp/>its<sp/>methods<sp/>are<sp/>optional.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4855"><highlight class="normal"></highlight><highlight class="keyword">@protocol<sp/></highlight><highlight class="normal">OcFixture</highlight></codeline>
<codeline lineno="4856"><highlight class="normal"></highlight></codeline>
<codeline lineno="4857"><highlight class="normal"></highlight><highlight class="keyword">@optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4858"><highlight class="normal"></highlight></codeline>
<codeline lineno="4859"><highlight class="normal">-(void)<sp/>setUp;</highlight></codeline>
<codeline lineno="4860"><highlight class="normal">-(void)<sp/>tearDown;</highlight></codeline>
<codeline lineno="4861"><highlight class="normal"></highlight></codeline>
<codeline lineno="4862"><highlight class="normal"></highlight><highlight class="keyword">@end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4863"><highlight class="normal"></highlight></codeline>
<codeline lineno="4864"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="4865"><highlight class="normal"></highlight></codeline>
<codeline lineno="4866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">OcMethod<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ITestInvoker<sp/>{</highlight></codeline>
<codeline lineno="4867"><highlight class="normal"></highlight></codeline>
<codeline lineno="4868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OcMethod(<sp/><ref refid="struct_class" kindref="compound">Class</ref><sp/>cls,<sp/></highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal"><sp/>sel<sp/>)<sp/>:<sp/>m_cls(<sp/>cls<sp/>),<sp/>m_sel(<sp/>sel<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="4870"><highlight class="normal"></highlight></codeline>
<codeline lineno="4871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>invoke()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>obj<sp/>=<sp/>[[m_cls<sp/>alloc]<sp/>init];</highlight></codeline>
<codeline lineno="4873"><highlight class="normal"></highlight></codeline>
<codeline lineno="4874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>performOptionalSelector(<sp/>obj,<sp/></highlight><highlight class="keyword">@selector</highlight><highlight class="normal">(setUp)<sp/><sp/>);</highlight></codeline>
<codeline lineno="4875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>performOptionalSelector(<sp/>obj,<sp/>m_sel<sp/>);</highlight></codeline>
<codeline lineno="4876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>performOptionalSelector(<sp/>obj,<sp/></highlight><highlight class="keyword">@selector</highlight><highlight class="normal">(tearDown)<sp/><sp/>);</highlight></codeline>
<codeline lineno="4877"><highlight class="normal"></highlight></codeline>
<codeline lineno="4878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arcSafeRelease(<sp/>obj<sp/>);</highlight></codeline>
<codeline lineno="4879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~OcMethod()<sp/>{}</highlight></codeline>
<codeline lineno="4882"><highlight class="normal"></highlight></codeline>
<codeline lineno="4883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_class" kindref="compound">Class</ref><sp/>m_cls;</highlight></codeline>
<codeline lineno="4884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal"><sp/>m_sel;</highlight></codeline>
<codeline lineno="4885"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4886"><highlight class="normal"></highlight></codeline>
<codeline lineno="4887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Detail{</highlight></codeline>
<codeline lineno="4888"><highlight class="normal"></highlight></codeline>
<codeline lineno="4889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/>getAnnotation(<sp/><sp/><sp/><ref refid="struct_class" kindref="compound">Class</ref><sp/>cls,</highlight></codeline>
<codeline lineno="4890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>annotationName,</highlight></codeline>
<codeline lineno="4891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCaseName<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NSString*<sp/>selStr<sp/>=<sp/>[[NSString<sp/>alloc]<sp/>initWithFormat:@&quot;Catch_%s_%s&quot;,<sp/>annotationName.c_str(),<sp/>testCaseName.c_str()];</highlight></codeline>
<codeline lineno="4893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal"><sp/>sel<sp/>=<sp/>NSSelectorFromString(<sp/>selStr<sp/>);</highlight></codeline>
<codeline lineno="4894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arcSafeRelease(<sp/>selStr<sp/>);</highlight></codeline>
<codeline lineno="4895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>=<sp/>performOptionalSelector(<sp/>cls,<sp/>sel<sp/>);</highlight></codeline>
<codeline lineno="4896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>)</highlight></codeline>
<codeline lineno="4897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[(NSString*)<ref refid="classvalue" kindref="compound">value</ref><sp/>UTF8String];</highlight></codeline>
<codeline lineno="4898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4900"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4901"><highlight class="normal"></highlight></codeline>
<codeline lineno="4902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::size_t<sp/>registerTestMethods()<sp/>{</highlight></codeline>
<codeline lineno="4903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>noTestMethods<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>noClasses<sp/>=<sp/>objc_getClassList(<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="4905"><highlight class="normal"></highlight></codeline>
<codeline lineno="4906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_class" kindref="compound">Class</ref>*<sp/>classes<sp/>=<sp/>(CATCH_UNSAFE_UNRETAINED<sp/><ref refid="struct_class" kindref="compound">Class</ref><sp/>*)malloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_class" kindref="compound">Class</ref>)<sp/>*<sp/>noClasses);</highlight></codeline>
<codeline lineno="4907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>objc_getClassList(<sp/>classes,<sp/>noClasses<sp/>);</highlight></codeline>
<codeline lineno="4908"><highlight class="normal"></highlight></codeline>
<codeline lineno="4909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>noClasses;<sp/>c++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_class" kindref="compound">Class</ref><sp/>cls<sp/>=<sp/>classes[c];</highlight></codeline>
<codeline lineno="4911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u_int<sp/>count;</highlight></codeline>
<codeline lineno="4913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Method*<sp/>methods<sp/>=<sp/>class_copyMethodList(<sp/>cls,<sp/>&amp;count<sp/>);</highlight></codeline>
<codeline lineno="4914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>u_int<sp/>m<sp/>=<sp/>0;<sp/>m<sp/>&lt;<sp/>count<sp/>;<sp/>m++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">SEL</highlight><highlight class="normal"><sp/>selector<sp/>=<sp/>method_getName(methods[m]);</highlight></codeline>
<codeline lineno="4916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>methodName<sp/>=<sp/>sel_getName(selector);</highlight></codeline>
<codeline lineno="4917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>startsWith(<sp/>methodName,<sp/></highlight><highlight class="stringliteral">&quot;Catch_TestCase_&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>testCaseName<sp/>=<sp/>methodName.substr(<sp/>15<sp/>);</highlight></codeline>
<codeline lineno="4919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/>Detail::getAnnotation(<sp/>cls,<sp/></highlight><highlight class="stringliteral">&quot;Name&quot;</highlight><highlight class="normal">,<sp/>testCaseName<sp/>);</highlight></codeline>
<codeline lineno="4920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>desc<sp/>=<sp/>Detail::getAnnotation(<sp/>cls,<sp/></highlight><highlight class="stringliteral">&quot;Description&quot;</highlight><highlight class="normal">,<sp/>testCaseName<sp/>);</highlight></codeline>
<codeline lineno="4921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>className<sp/>=<sp/>class_getName(<sp/>cls<sp/>);</highlight></codeline>
<codeline lineno="4922"><highlight class="normal"></highlight></codeline>
<codeline lineno="4923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getMutableRegistryHub().registerTest(<sp/>makeTestCase(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>OcMethod(<sp/>cls,<sp/>selector<sp/>),<sp/>className,<sp/>NameAndTags(<sp/>name.c_str(),<sp/>desc.c_str()<sp/>),<sp/>SourceLineInfo(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,0)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noTestMethods++;</highlight></codeline>
<codeline lineno="4925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(methods);</highlight></codeline>
<codeline lineno="4928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>noTestMethods;</highlight></codeline>
<codeline lineno="4931"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4932"><highlight class="normal"></highlight></codeline>
<codeline lineno="4933"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_CONFIG_DISABLE_MATCHERS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4934"><highlight class="normal"></highlight></codeline>
<codeline lineno="4935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Matchers<sp/>{</highlight></codeline>
<codeline lineno="4936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Impl<sp/>{</highlight></codeline>
<codeline lineno="4937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">NSStringMatchers<sp/>{</highlight></codeline>
<codeline lineno="4938"><highlight class="normal"></highlight></codeline>
<codeline lineno="4939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">StringHolder<sp/>:<sp/>MatcherBase&lt;NSString*&gt;{</highlight></codeline>
<codeline lineno="4940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringHolder(<sp/>NSString*<sp/>substr<sp/>)<sp/>:<sp/>m_substr(<sp/>[substr<sp/>copy]<sp/>){}</highlight></codeline>
<codeline lineno="4941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringHolder(<sp/>StringHolder<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other<sp/>)<sp/>:<sp/>m_substr(<sp/>[other.m_substr<sp/>copy]<sp/>){}</highlight></codeline>
<codeline lineno="4942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringHolder()<sp/>{</highlight></codeline>
<codeline lineno="4943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arcSafeRelease(<sp/>m_substr<sp/>);</highlight></codeline>
<codeline lineno="4944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4945"><highlight class="normal"></highlight></codeline>
<codeline lineno="4946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match(<sp/>NSString*<sp/>str<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4949"><highlight class="normal"></highlight></codeline>
<codeline lineno="4950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NSString*<sp/>CATCH_ARC_STRONG<sp/>m_substr;</highlight></codeline>
<codeline lineno="4951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4952"><highlight class="normal"></highlight></codeline>
<codeline lineno="4953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Equals<sp/>:<sp/>StringHolder<sp/>{</highlight></codeline>
<codeline lineno="4954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Equals(<sp/>NSString*<sp/>substr<sp/>)<sp/>:<sp/>StringHolder(<sp/>substr<sp/>){}</highlight></codeline>
<codeline lineno="4955"><highlight class="normal"></highlight></codeline>
<codeline lineno="4956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match(<sp/>NSString*<sp/>str<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>(str<sp/>!=<sp/>nil<sp/>||<sp/>m_substr<sp/>==<sp/>nil<sp/>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[str<sp/>isEqualToString:m_substr];</highlight></codeline>
<codeline lineno="4959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4960"><highlight class="normal"></highlight></codeline>
<codeline lineno="4961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>describe()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;equals<sp/>string:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>Catch::Detail::stringify(<sp/>m_substr<sp/>);</highlight></codeline>
<codeline lineno="4963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4965"><highlight class="normal"></highlight></codeline>
<codeline lineno="4966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Contains<sp/>:<sp/>StringHolder<sp/>{</highlight></codeline>
<codeline lineno="4967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Contains(<sp/>NSString*<sp/>substr<sp/>)<sp/>:<sp/>StringHolder(<sp/>substr<sp/>){}</highlight></codeline>
<codeline lineno="4968"><highlight class="normal"></highlight></codeline>
<codeline lineno="4969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match(<sp/>NSString*<sp/>str<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>(str<sp/>!=<sp/>nil<sp/>||<sp/>m_substr<sp/>==<sp/>nil<sp/>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[str<sp/>rangeOfString:m_substr].location<sp/>!=<sp/>NSNotFound;</highlight></codeline>
<codeline lineno="4972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4973"><highlight class="normal"></highlight></codeline>
<codeline lineno="4974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>describe()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;contains<sp/>string:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>Catch::Detail::stringify(<sp/>m_substr<sp/>);</highlight></codeline>
<codeline lineno="4976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4978"><highlight class="normal"></highlight></codeline>
<codeline lineno="4979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">StartsWith<sp/>:<sp/>StringHolder<sp/>{</highlight></codeline>
<codeline lineno="4980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StartsWith(<sp/>NSString*<sp/>substr<sp/>)<sp/>:<sp/>StringHolder(<sp/>substr<sp/>){}</highlight></codeline>
<codeline lineno="4981"><highlight class="normal"></highlight></codeline>
<codeline lineno="4982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match(<sp/>NSString*<sp/>str<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>(str<sp/>!=<sp/>nil<sp/>||<sp/>m_substr<sp/>==<sp/>nil<sp/>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[str<sp/>rangeOfString:m_substr].location<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="4985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4986"><highlight class="normal"></highlight></codeline>
<codeline lineno="4987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>describe()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;starts<sp/>with:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>Catch::Detail::stringify(<sp/>m_substr<sp/>);</highlight></codeline>
<codeline lineno="4989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="4991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">EndsWith<sp/>:<sp/>StringHolder<sp/>{</highlight></codeline>
<codeline lineno="4992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EndsWith(<sp/>NSString*<sp/>substr<sp/>)<sp/>:<sp/>StringHolder(<sp/>substr<sp/>){}</highlight></codeline>
<codeline lineno="4993"><highlight class="normal"></highlight></codeline>
<codeline lineno="4994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>match(<sp/>NSString*<sp/>str<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="4995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>(str<sp/>!=<sp/>nil<sp/>||<sp/>m_substr<sp/>==<sp/>nil<sp/>)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="4996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[str<sp/>rangeOfString:m_substr].location<sp/>==<sp/>[str<sp/>length]<sp/>-<sp/>[m_substr<sp/>length];</highlight></codeline>
<codeline lineno="4997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4998"><highlight class="normal"></highlight></codeline>
<codeline lineno="4999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>describe()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ends<sp/>with:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>Catch::Detail::stringify(<sp/>m_substr<sp/>);</highlight></codeline>
<codeline lineno="5001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5003"><highlight class="normal"></highlight></codeline>
<codeline lineno="5004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>NSStringMatchers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Impl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5006"><highlight class="normal"></highlight></codeline>
<codeline lineno="5007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Impl::NSStringMatchers::Equals</highlight></codeline>
<codeline lineno="5008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Equals(<sp/>NSString*<sp/>substr<sp/>){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::NSStringMatchers::Equals(<sp/>substr<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="5009"><highlight class="normal"></highlight></codeline>
<codeline lineno="5010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Impl::NSStringMatchers::Contains</highlight></codeline>
<codeline lineno="5011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Contains(<sp/>NSString*<sp/>substr<sp/>){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::NSStringMatchers::Contains(<sp/>substr<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="5012"><highlight class="normal"></highlight></codeline>
<codeline lineno="5013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Impl::NSStringMatchers::StartsWith</highlight></codeline>
<codeline lineno="5014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StartsWith(<sp/>NSString*<sp/>substr<sp/>){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::NSStringMatchers::StartsWith(<sp/>substr<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="5015"><highlight class="normal"></highlight></codeline>
<codeline lineno="5016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Impl::NSStringMatchers::EndsWith</highlight></codeline>
<codeline lineno="5017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EndsWith(<sp/>NSString*<sp/>substr<sp/>){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Impl::NSStringMatchers::EndsWith(<sp/>substr<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="5018"><highlight class="normal"></highlight></codeline>
<codeline lineno="5019"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Matchers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5020"><highlight class="normal"></highlight></codeline>
<codeline lineno="5021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Matchers;</highlight></codeline>
<codeline lineno="5022"><highlight class="normal"></highlight></codeline>
<codeline lineno="5023"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_DISABLE_MATCHERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5024"><highlight class="normal"></highlight></codeline>
<codeline lineno="5025"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5026"><highlight class="normal"></highlight></codeline>
<codeline lineno="5028"><highlight class="preprocessor">#define<sp/>OC_MAKE_UNIQUE_NAME(<sp/>root,<sp/>uniqueSuffix<sp/>)<sp/>root##uniqueSuffix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5029"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OC_TEST_CASE2(<sp/>name,<sp/>desc,<sp/>uniqueSuffix<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="5030"><highlight class="preprocessor">+(NSString*)<sp/>OC_MAKE_UNIQUE_NAME(<sp/>Catch_Name_test_,<sp/>uniqueSuffix<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="5031"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="5032"><highlight class="preprocessor">return<sp/>@<sp/>name;<sp/>\</highlight></codeline>
<codeline lineno="5033"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="5034"><highlight class="preprocessor">+(NSString*)<sp/>OC_MAKE_UNIQUE_NAME(<sp/>Catch_Description_test_,<sp/>uniqueSuffix<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="5035"><highlight class="preprocessor">{<sp/>\</highlight></codeline>
<codeline lineno="5036"><highlight class="preprocessor">return<sp/>@<sp/>desc;<sp/>\</highlight></codeline>
<codeline lineno="5037"><highlight class="preprocessor">}<sp/>\</highlight></codeline>
<codeline lineno="5038"><highlight class="preprocessor">-(void)<sp/>OC_MAKE_UNIQUE_NAME(<sp/>Catch_TestCase_test_,<sp/>uniqueSuffix<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5039"><highlight class="normal"></highlight></codeline>
<codeline lineno="5040"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OC_TEST_CASE(<sp/>name,<sp/>desc<sp/>)<sp/>OC_TEST_CASE2(<sp/>name,<sp/>desc,<sp/>__LINE__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5041"><highlight class="normal"></highlight></codeline>
<codeline lineno="5042"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_objc.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5043"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5044"><highlight class="normal"></highlight></codeline>
<codeline lineno="5045"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Benchmarking<sp/>needs<sp/>the<sp/>externally-facing<sp/>parts<sp/>of<sp/>reporters<sp/>to<sp/>work</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5046"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_EXTERNAL_INTERFACES)<sp/>||<sp/>defined(CATCH_CONFIG_ENABLE_BENCHMARKING)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5047"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_external_interfaces.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5048"><highlight class="normal"></highlight></codeline>
<codeline lineno="5049"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_reporter_bases.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5050"><highlight class="normal"></highlight></codeline>
<codeline lineno="5051"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_interfaces_reporter.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5052"><highlight class="normal"></highlight></codeline>
<codeline lineno="5053"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_config.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5054"><highlight class="normal"></highlight></codeline>
<codeline lineno="5055"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_test_spec_parser.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5056"><highlight class="normal"></highlight></codeline>
<codeline lineno="5057"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5058"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5059"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wpadded&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5060"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5061"><highlight class="normal"></highlight></codeline>
<codeline lineno="5062"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_test_spec.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5063"><highlight class="normal"></highlight></codeline>
<codeline lineno="5064"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5065"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5066"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wpadded&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5067"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5068"><highlight class="normal"></highlight></codeline>
<codeline lineno="5069"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_wildcard_pattern.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5070"><highlight class="normal"></highlight></codeline>
<codeline lineno="5071"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch</highlight></codeline>
<codeline lineno="5072"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">WildcardPattern<sp/>{</highlight></codeline>
<codeline lineno="5074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>WildcardPosition<sp/>{</highlight></codeline>
<codeline lineno="5075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NoWildcard<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="5076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WildcardAtStart<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="5077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WildcardAtEnd<sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="5078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WildcardAtBothEnds<sp/>=<sp/>WildcardAtStart<sp/>|<sp/>WildcardAtEnd</highlight></codeline>
<codeline lineno="5079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5080"><highlight class="normal"></highlight></codeline>
<codeline lineno="5081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5082"><highlight class="normal"></highlight></codeline>
<codeline lineno="5083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WildcardPattern(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>pattern,<sp/>CaseSensitive::Choice<sp/>caseSensitivity<sp/>);</highlight></codeline>
<codeline lineno="5084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~WildcardPattern()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>matches(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>str<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5086"><highlight class="normal"></highlight></codeline>
<codeline lineno="5087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>normaliseString(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>str<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CaseSensitive::Choice<sp/>m_caseSensitivity;</highlight></codeline>
<codeline lineno="5090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WildcardPosition<sp/>m_wildcard<sp/>=<sp/>NoWildcard;</highlight></codeline>
<codeline lineno="5091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>m_pattern;</highlight></codeline>
<codeline lineno="5092"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5093"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5094"><highlight class="normal"></highlight></codeline>
<codeline lineno="5095"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_wildcard_pattern.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5096"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5097"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5098"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5099"><highlight class="normal"></highlight></codeline>
<codeline lineno="5100"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="5101"><highlight class="normal"></highlight></codeline>
<codeline lineno="5102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IConfig;</highlight></codeline>
<codeline lineno="5103"><highlight class="normal"></highlight></codeline>
<codeline lineno="5104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TestSpec<sp/>{</highlight></codeline>
<codeline lineno="5105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Pattern<sp/>{</highlight></codeline>
<codeline lineno="5106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Pattern(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name<sp/>);</highlight></codeline>
<codeline lineno="5108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~Pattern();</highlight></codeline>
<codeline lineno="5109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>matches(<sp/>TestCaseInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCase<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>m_name;</highlight></codeline>
<codeline lineno="5113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>PatternPtr<sp/>=<sp/>std::shared_ptr&lt;Pattern&gt;;</highlight></codeline>
<codeline lineno="5115"><highlight class="normal"></highlight></codeline>
<codeline lineno="5116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">NamePattern<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Pattern<sp/>{</highlight></codeline>
<codeline lineno="5117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>NamePattern(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>filterString<sp/>);</highlight></codeline>
<codeline lineno="5119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>matches(<sp/>TestCaseInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCase<sp/>)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WildcardPattern<sp/>m_wildcardPattern;</highlight></codeline>
<codeline lineno="5122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5123"><highlight class="normal"></highlight></codeline>
<codeline lineno="5124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TagPattern<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Pattern<sp/>{</highlight></codeline>
<codeline lineno="5125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>TagPattern(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>tag,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>filterString<sp/>);</highlight></codeline>
<codeline lineno="5127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>matches(<sp/>TestCaseInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCase<sp/>)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>m_tag;</highlight></codeline>
<codeline lineno="5130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5131"><highlight class="normal"></highlight></codeline>
<codeline lineno="5132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ExcludedPattern<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Pattern<sp/>{</highlight></codeline>
<codeline lineno="5133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ExcludedPattern(<sp/>PatternPtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>underlyingPattern<sp/>);</highlight></codeline>
<codeline lineno="5135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>matches(<sp/>TestCaseInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCase<sp/>)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PatternPtr<sp/>m_underlyingPattern;</highlight></codeline>
<codeline lineno="5138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5139"><highlight class="normal"></highlight></codeline>
<codeline lineno="5140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Filter<sp/>{</highlight></codeline>
<codeline lineno="5141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;PatternPtr&gt;<sp/>m_patterns;</highlight></codeline>
<codeline lineno="5142"><highlight class="normal"></highlight></codeline>
<codeline lineno="5143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>matches(<sp/>TestCaseInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCase<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5146"><highlight class="normal"></highlight></codeline>
<codeline lineno="5147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">FilterMatch<sp/>{</highlight></codeline>
<codeline lineno="5149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name;</highlight></codeline>
<codeline lineno="5150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;TestCase<sp/>const*&gt;<sp/>tests;</highlight></codeline>
<codeline lineno="5151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Matches<sp/>=<sp/>std::vector&lt;FilterMatch&gt;;</highlight></codeline>
<codeline lineno="5153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>vectorStrings<sp/>=<sp/>std::vector&lt;std::string&gt;;</highlight></codeline>
<codeline lineno="5154"><highlight class="normal"></highlight></codeline>
<codeline lineno="5155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasFilters()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>matches(<sp/>TestCaseInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCase<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matches<sp/>matchesByFilter(<sp/>std::vector&lt;TestCase&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCases,<sp/>IConfig<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vectorStrings<sp/>&amp;<sp/>getInvalidArgs()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5159"><highlight class="normal"></highlight></codeline>
<codeline lineno="5160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Filter&gt;<sp/>m_filters;</highlight></codeline>
<codeline lineno="5162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>m_invalidArgs;</highlight></codeline>
<codeline lineno="5163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TestSpecParser;</highlight></codeline>
<codeline lineno="5164"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5166"><highlight class="normal"></highlight></codeline>
<codeline lineno="5167"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5168"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5169"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5170"><highlight class="normal"></highlight></codeline>
<codeline lineno="5171"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_test_spec.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_interfaces_tag_alias_registry.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5173"><highlight class="normal"></highlight></codeline>
<codeline lineno="5174"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5175"><highlight class="normal"></highlight></codeline>
<codeline lineno="5176"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="5177"><highlight class="normal"></highlight></codeline>
<codeline lineno="5178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TagAlias;</highlight></codeline>
<codeline lineno="5179"><highlight class="normal"></highlight></codeline>
<codeline lineno="5180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ITagAliasRegistry<sp/>{</highlight></codeline>
<codeline lineno="5181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~ITagAliasRegistry();</highlight></codeline>
<codeline lineno="5182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nullptr<sp/>if<sp/>not<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>TagAlias<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>find(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>alias<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/>expandAliases(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>unexpandedTestSpec<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5185"><highlight class="normal"></highlight></codeline>
<codeline lineno="5186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ITagAliasRegistry<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>get();</highlight></codeline>
<codeline lineno="5187"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5188"><highlight class="normal"></highlight></codeline>
<codeline lineno="5189"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5190"><highlight class="normal"></highlight></codeline>
<codeline lineno="5191"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_interfaces_tag_alias_registry.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5192"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="5193"><highlight class="normal"></highlight></codeline>
<codeline lineno="5194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TestSpecParser<sp/>{</highlight></codeline>
<codeline lineno="5195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="struct_mode" kindref="compound">Mode</ref>{<sp/>None,<sp/>Name,<sp/>QuotedName,<sp/>Tag,<sp/>EscapedName<sp/>};</highlight></codeline>
<codeline lineno="5196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_mode" kindref="compound">Mode</ref><sp/>m_mode<sp/>=<sp/>None;</highlight></codeline>
<codeline lineno="5197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_mode" kindref="compound">Mode</ref><sp/>lastMode<sp/>=<sp/>None;</highlight></codeline>
<codeline lineno="5198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_exclusion<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>m_pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>m_realPatternPos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>m_arg;</highlight></codeline>
<codeline lineno="5202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>m_substring;</highlight></codeline>
<codeline lineno="5203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>m_patternName;</highlight></codeline>
<codeline lineno="5204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::size_t&gt;<sp/>m_escapeChars;</highlight></codeline>
<codeline lineno="5205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestSpec::Filter<sp/>m_currentFilter;</highlight></codeline>
<codeline lineno="5206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestSpec<sp/>m_testSpec;</highlight></codeline>
<codeline lineno="5207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ITagAliasRegistry<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>m_tagAliases<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5208"><highlight class="normal"></highlight></codeline>
<codeline lineno="5209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestSpecParser(<sp/>ITagAliasRegistry<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>tagAliases<sp/>);</highlight></codeline>
<codeline lineno="5211"><highlight class="normal"></highlight></codeline>
<codeline lineno="5212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestSpecParser&amp;<sp/>parse(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>arg<sp/>);</highlight></codeline>
<codeline lineno="5213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestSpec<sp/>testSpec();</highlight></codeline>
<codeline lineno="5214"><highlight class="normal"></highlight></codeline>
<codeline lineno="5215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>visitChar(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>);</highlight></codeline>
<codeline lineno="5217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>startNewMode(<sp/><ref refid="struct_mode" kindref="compound">Mode</ref><sp/>mode<sp/>);</highlight></codeline>
<codeline lineno="5218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>processNoneChar(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>);</highlight></codeline>
<codeline lineno="5219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>processNameChar(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>);</highlight></codeline>
<codeline lineno="5220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>processOtherChar(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>);</highlight></codeline>
<codeline lineno="5221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>endMode();</highlight></codeline>
<codeline lineno="5222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>escape();</highlight></codeline>
<codeline lineno="5223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isControlChar(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>saveLastMode();</highlight></codeline>
<codeline lineno="5225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>revertBackToLastMode();</highlight></codeline>
<codeline lineno="5226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addFilter();</highlight></codeline>
<codeline lineno="5227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>separate();</highlight></codeline>
<codeline lineno="5228"><highlight class="normal"></highlight></codeline>
<codeline lineno="5229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handles<sp/>common<sp/>preprocessing<sp/>of<sp/>the<sp/>pattern<sp/>for<sp/>name/tag<sp/>patterns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>preprocessPattern();</highlight></codeline>
<codeline lineno="5231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Adds<sp/>the<sp/>current<sp/>pattern<sp/>as<sp/>a<sp/>test<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addNamePattern();</highlight></codeline>
<codeline lineno="5233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Adds<sp/>the<sp/>current<sp/>pattern<sp/>as<sp/>a<sp/>tag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addTagPattern();</highlight></codeline>
<codeline lineno="5235"><highlight class="normal"></highlight></codeline>
<codeline lineno="5236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addCharToPattern(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="5237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_substring<sp/>+=<sp/>c;</highlight></codeline>
<codeline lineno="5238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_patternName<sp/>+=<sp/>c;</highlight></codeline>
<codeline lineno="5239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_realPatternPos++;</highlight></codeline>
<codeline lineno="5240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5241"><highlight class="normal"></highlight></codeline>
<codeline lineno="5242"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5243"><highlight class="normal"><sp/><sp/><sp/><sp/>TestSpec<sp/>parseTestSpec(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>arg<sp/>);</highlight></codeline>
<codeline lineno="5244"><highlight class="normal"></highlight></codeline>
<codeline lineno="5245"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5246"><highlight class="normal"></highlight></codeline>
<codeline lineno="5247"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5248"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5249"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5250"><highlight class="normal"></highlight></codeline>
<codeline lineno="5251"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_test_spec_parser.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5252"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Libstdc++<sp/>doesn&apos;t<sp/>like<sp/>incomplete<sp/>classes<sp/>for<sp/>unique_ptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5253"><highlight class="normal"></highlight></codeline>
<codeline lineno="5254"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5255"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5256"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5257"><highlight class="normal"></highlight></codeline>
<codeline lineno="5258"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CATCH_CONFIG_CONSOLE_WIDTH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5259"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CONFIG_CONSOLE_WIDTH<sp/>80</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5260"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5261"><highlight class="normal"></highlight></codeline>
<codeline lineno="5262"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="5263"><highlight class="normal"></highlight></codeline>
<codeline lineno="5264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IStream;</highlight></codeline>
<codeline lineno="5265"><highlight class="normal"></highlight></codeline>
<codeline lineno="5266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ConfigData<sp/>{</highlight></codeline>
<codeline lineno="5267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>listTests<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>listTags<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>listReporters<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>listTestNamesOnly<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5271"><highlight class="normal"></highlight></codeline>
<codeline lineno="5272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>showSuccessfulTests<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shouldDebugBreak<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>noThrow<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>showHelp<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>showInvisibles<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>filenamesAsTags<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>libIdentify<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5279"><highlight class="normal"></highlight></codeline>
<codeline lineno="5280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>abortAfter<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="5281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rngSeed<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5282"><highlight class="normal"></highlight></codeline>
<codeline lineno="5283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>benchmarkNoAnalysis<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>benchmarkSamples<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="5285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>benchmarkConfidenceInterval<sp/>=<sp/>0.95;</highlight></codeline>
<codeline lineno="5286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>benchmarkResamples<sp/>=<sp/>100000;</highlight></codeline>
<codeline lineno="5287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::milliseconds::rep<sp/>benchmarkWarmupTime<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="5288"><highlight class="normal"></highlight></codeline>
<codeline lineno="5289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Verbosity<sp/>verbosity<sp/>=<sp/>Verbosity::Normal;</highlight></codeline>
<codeline lineno="5290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WarnAbout::What<sp/>warnings<sp/>=<sp/>WarnAbout::Nothing;</highlight></codeline>
<codeline lineno="5291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ShowDurations::OrNot<sp/>showDurations<sp/>=<sp/>ShowDurations::DefaultForReporter;</highlight></codeline>
<codeline lineno="5292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minDuration<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="5293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RunTests::InWhatOrder<sp/>runOrder<sp/>=<sp/>RunTests::InDeclarationOrder;</highlight></codeline>
<codeline lineno="5294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UseColour::YesOrNo<sp/>useColour<sp/>=<sp/>UseColour::Auto;</highlight></codeline>
<codeline lineno="5295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WaitForKeypress::When<sp/>waitForKeypress<sp/>=<sp/>WaitForKeypress::Never;</highlight></codeline>
<codeline lineno="5296"><highlight class="normal"></highlight></codeline>
<codeline lineno="5297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>outputFilename;</highlight></codeline>
<codeline lineno="5298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name;</highlight></codeline>
<codeline lineno="5299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>processName;</highlight></codeline>
<codeline lineno="5300"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CATCH_CONFIG_DEFAULT_REPORTER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5301"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CONFIG_DEFAULT_REPORTER<sp/>&quot;console&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5302"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>reporterName<sp/>=<sp/>CATCH_CONFIG_DEFAULT_REPORTER;</highlight></codeline>
<codeline lineno="5304"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>CATCH_CONFIG_DEFAULT_REPORTER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5305"><highlight class="normal"></highlight></codeline>
<codeline lineno="5306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>testsOrTags;</highlight></codeline>
<codeline lineno="5307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>sectionsToRun;</highlight></codeline>
<codeline lineno="5308"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5309"><highlight class="normal"></highlight></codeline>
<codeline lineno="5310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Config<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>IConfig<sp/>{</highlight></codeline>
<codeline lineno="5311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5312"><highlight class="normal"></highlight></codeline>
<codeline lineno="5313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Config()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Config(<sp/>ConfigData<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>data<sp/>);</highlight></codeline>
<codeline lineno="5315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~Config()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5316"><highlight class="normal"></highlight></codeline>
<codeline lineno="5317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>getFilename()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5318"><highlight class="normal"></highlight></codeline>
<codeline lineno="5319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>listTests()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>listTestNamesOnly()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>listTags()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>listReporters()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5323"><highlight class="normal"></highlight></codeline>
<codeline lineno="5324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>getProcessName()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>getReporterName()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5326"><highlight class="normal"></highlight></codeline>
<codeline lineno="5327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>getTestsOrTags()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>getSectionsToRun()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5329"><highlight class="normal"></highlight></codeline>
<codeline lineno="5330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestSpec<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testSpec()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasTestFilters()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5332"><highlight class="normal"></highlight></codeline>
<codeline lineno="5333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>showHelp()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5334"><highlight class="normal"></highlight></codeline>
<codeline lineno="5335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>IConfig<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allowThrows()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/>stream()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>includeSuccessfulResults()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>warnAboutMissingAssertions()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>warnAboutNoTests()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ShowDurations::OrNot<sp/>showDurations()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minDuration()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RunTests::InWhatOrder<sp/>runOrder()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rngSeed()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UseColour::YesOrNo<sp/>useColour()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shouldDebugBreak()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>abortAfter()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>showInvisibles()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Verbosity<sp/>verbosity()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>benchmarkNoAnalysis()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>benchmarkSamples()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>benchmarkConfidenceInterval()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>benchmarkResamples()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::milliseconds<sp/>benchmarkWarmupTime()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5356"><highlight class="normal"></highlight></codeline>
<codeline lineno="5357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5358"><highlight class="normal"></highlight></codeline>
<codeline lineno="5359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IStream<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>openStream();</highlight></codeline>
<codeline lineno="5360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ConfigData<sp/>m_data;</highlight></codeline>
<codeline lineno="5361"><highlight class="normal"></highlight></codeline>
<codeline lineno="5362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;IStream<sp/>const&gt;<sp/>m_stream;</highlight></codeline>
<codeline lineno="5363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestSpec<sp/>m_testSpec;</highlight></codeline>
<codeline lineno="5364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_hasTestFilters<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5365"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5366"><highlight class="normal"></highlight></codeline>
<codeline lineno="5367"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5368"><highlight class="normal"></highlight></codeline>
<codeline lineno="5369"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_config.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5370"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_assertionresult.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5371"><highlight class="normal"></highlight></codeline>
<codeline lineno="5372"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5373"><highlight class="normal"></highlight></codeline>
<codeline lineno="5374"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="5375"><highlight class="normal"></highlight></codeline>
<codeline lineno="5376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">AssertionResultData</highlight></codeline>
<codeline lineno="5377"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionResultData()<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5379"><highlight class="normal"></highlight></codeline>
<codeline lineno="5380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionResultData(<sp/>ResultWas::OfType<sp/>_resultType,<sp/>LazyExpression<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_lazyExpression<sp/>);</highlight></codeline>
<codeline lineno="5381"><highlight class="normal"></highlight></codeline>
<codeline lineno="5382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>message;</highlight></codeline>
<codeline lineno="5383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>std::string<sp/>reconstructedExpression;</highlight></codeline>
<codeline lineno="5384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LazyExpression<sp/>lazyExpression;</highlight></codeline>
<codeline lineno="5385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultWas::OfType<sp/>resultType;</highlight></codeline>
<codeline lineno="5386"><highlight class="normal"></highlight></codeline>
<codeline lineno="5387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>reconstructExpression()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5388"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5389"><highlight class="normal"></highlight></codeline>
<codeline lineno="5390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AssertionResult<sp/>{</highlight></codeline>
<codeline lineno="5391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionResult()<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionResult(<sp/>AssertionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structinfo" kindref="compound">info</ref>,<sp/>AssertionResultData<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>data<sp/>);</highlight></codeline>
<codeline lineno="5394"><highlight class="normal"></highlight></codeline>
<codeline lineno="5395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isOk()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>succeeded()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultWas::OfType<sp/>getResultType()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasExpression()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasMessage()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>getExpression()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>getExpressionInMacro()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasExpandedExpression()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>getExpandedExpression()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>getMessage()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SourceLineInfo<sp/>getSourceInfo()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringRef<sp/>getTestMacroName()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5407"><highlight class="normal"></highlight></codeline>
<codeline lineno="5408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//protected:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionInfo<sp/>m_info;</highlight></codeline>
<codeline lineno="5410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionResultData<sp/>m_resultData;</highlight></codeline>
<codeline lineno="5411"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5412"><highlight class="normal"></highlight></codeline>
<codeline lineno="5413"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5414"><highlight class="normal"></highlight></codeline>
<codeline lineno="5415"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_assertionresult.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5416"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_ENABLE_BENCHMARKING)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5417"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_estimate.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5418"><highlight class="normal"></highlight></codeline>
<codeline lineno="5419"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Statistics<sp/>estimates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5420"><highlight class="normal"></highlight></codeline>
<codeline lineno="5421"><highlight class="normal"></highlight></codeline>
<codeline lineno="5422"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="5423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Benchmark<sp/>{</highlight></codeline>
<codeline lineno="5424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Duration&gt;</highlight></codeline>
<codeline lineno="5425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Estimate<sp/>{</highlight></codeline>
<codeline lineno="5426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Duration<sp/>point;</highlight></codeline>
<codeline lineno="5427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Duration<sp/>lower_bound;</highlight></codeline>
<codeline lineno="5428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Duration<sp/>upper_bound;</highlight></codeline>
<codeline lineno="5429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>confidence_interval;</highlight></codeline>
<codeline lineno="5430"><highlight class="normal"></highlight></codeline>
<codeline lineno="5431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Duration2&gt;</highlight></codeline>
<codeline lineno="5432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>Estimate&lt;Duration2&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>point,<sp/>lower_bound,<sp/>upper_bound,<sp/>confidence_interval<sp/>};</highlight></codeline>
<codeline lineno="5434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5436"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Benchmark</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5437"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5438"><highlight class="normal"></highlight></codeline>
<codeline lineno="5439"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_estimate.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5440"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_outlier_classification.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5441"><highlight class="normal"></highlight></codeline>
<codeline lineno="5442"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Outlier<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5443"><highlight class="normal"></highlight></codeline>
<codeline lineno="5444"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="5445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Benchmark<sp/>{</highlight></codeline>
<codeline lineno="5446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">OutlierClassification<sp/>{</highlight></codeline>
<codeline lineno="5447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>samples_seen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>low_severe<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>more<sp/>than<sp/>3<sp/>times<sp/>IQR<sp/>below<sp/>Q1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>low_mild<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1.5<sp/>to<sp/>3<sp/>times<sp/>IQR<sp/>below<sp/>Q1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>high_mild<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1.5<sp/>to<sp/>3<sp/>times<sp/>IQR<sp/>above<sp/>Q3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>high_severe<sp/>=<sp/>0;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>more<sp/>than<sp/>3<sp/>times<sp/>IQR<sp/>above<sp/>Q3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5452"><highlight class="normal"></highlight></codeline>
<codeline lineno="5453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>low_severe<sp/>+<sp/>low_mild<sp/>+<sp/>high_mild<sp/>+<sp/>high_severe;</highlight></codeline>
<codeline lineno="5455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5457"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Benchmark</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5458"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5459"><highlight class="normal"></highlight></codeline>
<codeline lineno="5460"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_outlier_classification.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5461"><highlight class="normal"></highlight></codeline>
<codeline lineno="5462"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5463"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_ENABLE_BENCHMARKING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5464"><highlight class="normal"></highlight></codeline>
<codeline lineno="5465"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5466"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iosfwd&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5467"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5468"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5469"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5470"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5471"><highlight class="normal"></highlight></codeline>
<codeline lineno="5472"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="5473"><highlight class="normal"></highlight></codeline>
<codeline lineno="5474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ReporterConfig<sp/>{</highlight></codeline>
<codeline lineno="5475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ReporterConfig(<sp/>IConfigPtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_fullConfig<sp/>);</highlight></codeline>
<codeline lineno="5476"><highlight class="normal"></highlight></codeline>
<codeline lineno="5477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReporterConfig(<sp/>IConfigPtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_fullConfig,<sp/>std::ostream&amp;<sp/>_stream<sp/>);</highlight></codeline>
<codeline lineno="5478"><highlight class="normal"></highlight></codeline>
<codeline lineno="5479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/>stream()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IConfigPtr<sp/>fullConfig()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5481"><highlight class="normal"></highlight></codeline>
<codeline lineno="5482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostream*<sp/>m_stream;</highlight></codeline>
<codeline lineno="5484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IConfigPtr<sp/>m_fullConfig;</highlight></codeline>
<codeline lineno="5485"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5486"><highlight class="normal"></highlight></codeline>
<codeline lineno="5487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ReporterPreferences<sp/>{</highlight></codeline>
<codeline lineno="5488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shouldRedirectStdOut<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shouldReportAllAssertions<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5490"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5491"><highlight class="normal"></highlight></codeline>
<codeline lineno="5492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="5493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">LazyStat<sp/>:<sp/>Option&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="5494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LazyStat&amp;<sp/>operator=(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_value<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Option&lt;T&gt;::operator=(<sp/>_value<sp/>);</highlight></codeline>
<codeline lineno="5496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>used<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reset()<sp/>{</highlight></codeline>
<codeline lineno="5500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Option&lt;T&gt;::reset();</highlight></codeline>
<codeline lineno="5501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>used<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>used<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5504"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5505"><highlight class="normal"></highlight></codeline>
<codeline lineno="5506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TestRunInfo<sp/>{</highlight></codeline>
<codeline lineno="5507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestRunInfo(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_name<sp/>);</highlight></codeline>
<codeline lineno="5508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name;</highlight></codeline>
<codeline lineno="5509"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">GroupInfo<sp/>{</highlight></codeline>
<codeline lineno="5511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GroupInfo(<sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_name,</highlight></codeline>
<codeline lineno="5512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>_groupIndex,</highlight></codeline>
<codeline lineno="5513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>_groupsCount<sp/>);</highlight></codeline>
<codeline lineno="5514"><highlight class="normal"></highlight></codeline>
<codeline lineno="5515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name;</highlight></codeline>
<codeline lineno="5516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>groupIndex;</highlight></codeline>
<codeline lineno="5517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>groupsCounts;</highlight></codeline>
<codeline lineno="5518"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5519"><highlight class="normal"></highlight></codeline>
<codeline lineno="5520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">AssertionStats<sp/>{</highlight></codeline>
<codeline lineno="5521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionStats(<sp/>AssertionResult<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_assertionResult,</highlight></codeline>
<codeline lineno="5522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;MessageInfo&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_infoMessages,</highlight></codeline>
<codeline lineno="5523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Totals<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_totals<sp/>);</highlight></codeline>
<codeline lineno="5524"><highlight class="normal"></highlight></codeline>
<codeline lineno="5525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionStats(<sp/>AssertionStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionStats(<sp/>AssertionStats<sp/>&amp;&amp;<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionStats&amp;<sp/>operator<sp/>=<sp/>(<sp/>AssertionStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionStats&amp;<sp/>operator<sp/>=<sp/>(<sp/>AssertionStats<sp/>&amp;&amp;<sp/>)<sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~AssertionStats();</highlight></codeline>
<codeline lineno="5530"><highlight class="normal"></highlight></codeline>
<codeline lineno="5531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionResult<sp/>assertionResult;</highlight></codeline>
<codeline lineno="5532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;MessageInfo&gt;<sp/>infoMessages;</highlight></codeline>
<codeline lineno="5533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Totals<sp/>totals;</highlight></codeline>
<codeline lineno="5534"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5535"><highlight class="normal"></highlight></codeline>
<codeline lineno="5536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SectionStats<sp/>{</highlight></codeline>
<codeline lineno="5537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SectionStats(<sp/><sp/><sp/>SectionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_sectionInfo,</highlight></codeline>
<codeline lineno="5538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Counts<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_assertions,</highlight></codeline>
<codeline lineno="5539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>_durationInSeconds,</highlight></codeline>
<codeline lineno="5540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_missingAssertions<sp/>);</highlight></codeline>
<codeline lineno="5541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SectionStats(<sp/>SectionStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SectionStats(<sp/>SectionStats<sp/>&amp;&amp;<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SectionStats&amp;<sp/>operator<sp/>=<sp/>(<sp/>SectionStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SectionStats&amp;<sp/>operator<sp/>=<sp/>(<sp/>SectionStats<sp/>&amp;&amp;<sp/>)<sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~SectionStats();</highlight></codeline>
<codeline lineno="5546"><highlight class="normal"></highlight></codeline>
<codeline lineno="5547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SectionInfo<sp/>sectionInfo;</highlight></codeline>
<codeline lineno="5548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Counts<sp/>assertions;</highlight></codeline>
<codeline lineno="5549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>durationInSeconds;</highlight></codeline>
<codeline lineno="5550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>missingAssertions;</highlight></codeline>
<codeline lineno="5551"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5552"><highlight class="normal"></highlight></codeline>
<codeline lineno="5553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TestCaseStats<sp/>{</highlight></codeline>
<codeline lineno="5554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestCaseStats(<sp/><sp/>TestCaseInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_testInfo,</highlight></codeline>
<codeline lineno="5555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Totals<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_totals,</highlight></codeline>
<codeline lineno="5556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_stdOut,</highlight></codeline>
<codeline lineno="5557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_stdErr,</highlight></codeline>
<codeline lineno="5558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_aborting<sp/>);</highlight></codeline>
<codeline lineno="5559"><highlight class="normal"></highlight></codeline>
<codeline lineno="5560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestCaseStats(<sp/>TestCaseStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestCaseStats(<sp/>TestCaseStats<sp/>&amp;&amp;<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestCaseStats&amp;<sp/>operator<sp/>=<sp/>(<sp/>TestCaseStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestCaseStats&amp;<sp/>operator<sp/>=<sp/>(<sp/>TestCaseStats<sp/>&amp;&amp;<sp/>)<sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~TestCaseStats();</highlight></codeline>
<codeline lineno="5565"><highlight class="normal"></highlight></codeline>
<codeline lineno="5566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestCaseInfo<sp/>testInfo;</highlight></codeline>
<codeline lineno="5567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Totals<sp/>totals;</highlight></codeline>
<codeline lineno="5568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>stdOut;</highlight></codeline>
<codeline lineno="5569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>stdErr;</highlight></codeline>
<codeline lineno="5570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aborting;</highlight></codeline>
<codeline lineno="5571"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5572"><highlight class="normal"></highlight></codeline>
<codeline lineno="5573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TestGroupStats<sp/>{</highlight></codeline>
<codeline lineno="5574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestGroupStats(<sp/>GroupInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_groupInfo,</highlight></codeline>
<codeline lineno="5575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Totals<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_totals,</highlight></codeline>
<codeline lineno="5576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_aborting<sp/>);</highlight></codeline>
<codeline lineno="5577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestGroupStats(<sp/>GroupInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_groupInfo<sp/>);</highlight></codeline>
<codeline lineno="5578"><highlight class="normal"></highlight></codeline>
<codeline lineno="5579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestGroupStats(<sp/>TestGroupStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestGroupStats(<sp/>TestGroupStats<sp/>&amp;&amp;<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestGroupStats&amp;<sp/>operator<sp/>=<sp/>(<sp/>TestGroupStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestGroupStats&amp;<sp/>operator<sp/>=<sp/>(<sp/>TestGroupStats<sp/>&amp;&amp;<sp/>)<sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~TestGroupStats();</highlight></codeline>
<codeline lineno="5584"><highlight class="normal"></highlight></codeline>
<codeline lineno="5585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GroupInfo<sp/>groupInfo;</highlight></codeline>
<codeline lineno="5586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Totals<sp/>totals;</highlight></codeline>
<codeline lineno="5587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aborting;</highlight></codeline>
<codeline lineno="5588"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5589"><highlight class="normal"></highlight></codeline>
<codeline lineno="5590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TestRunStats<sp/>{</highlight></codeline>
<codeline lineno="5591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestRunStats(<sp/><sp/><sp/>TestRunInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_runInfo,</highlight></codeline>
<codeline lineno="5592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Totals<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_totals,</highlight></codeline>
<codeline lineno="5593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_aborting<sp/>);</highlight></codeline>
<codeline lineno="5594"><highlight class="normal"></highlight></codeline>
<codeline lineno="5595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestRunStats(<sp/>TestRunStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestRunStats(<sp/>TestRunStats<sp/>&amp;&amp;<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestRunStats&amp;<sp/>operator<sp/>=<sp/>(<sp/>TestRunStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestRunStats&amp;<sp/>operator<sp/>=<sp/>(<sp/>TestRunStats<sp/>&amp;&amp;<sp/>)<sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~TestRunStats();</highlight></codeline>
<codeline lineno="5600"><highlight class="normal"></highlight></codeline>
<codeline lineno="5601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestRunInfo<sp/>runInfo;</highlight></codeline>
<codeline lineno="5602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Totals<sp/>totals;</highlight></codeline>
<codeline lineno="5603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aborting;</highlight></codeline>
<codeline lineno="5604"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5605"><highlight class="normal"></highlight></codeline>
<codeline lineno="5606"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_ENABLE_BENCHMARKING)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">BenchmarkInfo<sp/>{</highlight></codeline>
<codeline lineno="5608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name;</highlight></codeline>
<codeline lineno="5609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>estimatedDuration;</highlight></codeline>
<codeline lineno="5610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iterations;</highlight></codeline>
<codeline lineno="5611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>samples;</highlight></codeline>
<codeline lineno="5612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>resamples;</highlight></codeline>
<codeline lineno="5613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>clockResolution;</highlight></codeline>
<codeline lineno="5614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>clockCost;</highlight></codeline>
<codeline lineno="5615"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5616"><highlight class="normal"></highlight></codeline>
<codeline lineno="5617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Duration&gt;</highlight></codeline>
<codeline lineno="5618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">BenchmarkStats<sp/>{</highlight></codeline>
<codeline lineno="5619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BenchmarkInfo<sp/><ref refid="structinfo" kindref="compound">info</ref>;</highlight></codeline>
<codeline lineno="5620"><highlight class="normal"></highlight></codeline>
<codeline lineno="5621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Duration&gt;<sp/>samples;</highlight></codeline>
<codeline lineno="5622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Benchmark::Estimate&lt;Duration&gt;<sp/>mean;</highlight></codeline>
<codeline lineno="5623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Benchmark::Estimate&lt;Duration&gt;<sp/>standardDeviation;</highlight></codeline>
<codeline lineno="5624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Benchmark::OutlierClassification<sp/>outliers;</highlight></codeline>
<codeline lineno="5625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>outlierVariance;</highlight></codeline>
<codeline lineno="5626"><highlight class="normal"></highlight></codeline>
<codeline lineno="5627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Duration2&gt;</highlight></codeline>
<codeline lineno="5628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>BenchmarkStats&lt;Duration2&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Duration2&gt;<sp/>samples2;</highlight></codeline>
<codeline lineno="5630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>samples2.reserve(samples.size());</highlight></codeline>
<codeline lineno="5631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(samples.begin(),<sp/>samples.end(),<sp/>std::back_inserter(samples2),<sp/>[](Duration<sp/>d)<sp/>{<sp/>return<sp/>Duration2(d);<sp/>});</highlight></codeline>
<codeline lineno="5632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>,</highlight></codeline>
<codeline lineno="5634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(samples2),</highlight></codeline>
<codeline lineno="5635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mean,</highlight></codeline>
<codeline lineno="5636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>standardDeviation,</highlight></codeline>
<codeline lineno="5637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outliers,</highlight></codeline>
<codeline lineno="5638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outlierVariance,</highlight></codeline>
<codeline lineno="5639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5641"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5642"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_ENABLE_BENCHMARKING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5643"><highlight class="normal"></highlight></codeline>
<codeline lineno="5644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IStreamingReporter<sp/>{</highlight></codeline>
<codeline lineno="5645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~IStreamingReporter()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5646"><highlight class="normal"></highlight></codeline>
<codeline lineno="5647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Implementing<sp/>class<sp/>must<sp/>also<sp/>provide<sp/>the<sp/>following<sp/>static<sp/>methods:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>static<sp/>std::string<sp/>getDescription();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>static<sp/>std::set&lt;Verbosity&gt;<sp/>getSupportedVerbosities()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5650"><highlight class="normal"></highlight></codeline>
<codeline lineno="5651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>ReporterPreferences<sp/>getPreferences()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5652"><highlight class="normal"></highlight></codeline>
<codeline lineno="5653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>noMatchingTestCases(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>spec<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5654"><highlight class="normal"></highlight></codeline>
<codeline lineno="5655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reportInvalidArguments(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/>{}</highlight></codeline>
<codeline lineno="5656"><highlight class="normal"></highlight></codeline>
<codeline lineno="5657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testRunStarting(<sp/>TestRunInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testRunInfo<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testGroupStarting(<sp/>GroupInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>groupInfo<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5659"><highlight class="normal"></highlight></codeline>
<codeline lineno="5660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testCaseStarting(<sp/>TestCaseInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testInfo<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sectionStarting(<sp/>SectionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>sectionInfo<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5662"><highlight class="normal"></highlight></codeline>
<codeline lineno="5663"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_ENABLE_BENCHMARKING)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>benchmarkPreparing(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="5665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>benchmarkStarting(<sp/>BenchmarkInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="5666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>benchmarkEnded(<sp/>BenchmarkStats&lt;&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="5667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>benchmarkFailed(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="5668"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_ENABLE_BENCHMARKING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5669"><highlight class="normal"></highlight></codeline>
<codeline lineno="5670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assertionStarting(<sp/>AssertionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>assertionInfo<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5671"><highlight class="normal"></highlight></codeline>
<codeline lineno="5672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>return<sp/>value<sp/>indicates<sp/>if<sp/>the<sp/>messages<sp/>buffer<sp/>should<sp/>be<sp/>cleared:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>assertionEnded(<sp/>AssertionStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>assertionStats<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5674"><highlight class="normal"></highlight></codeline>
<codeline lineno="5675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sectionEnded(<sp/>SectionStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>sectionStats<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testCaseEnded(<sp/>TestCaseStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCaseStats<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testGroupEnded(<sp/>TestGroupStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testGroupStats<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testRunEnded(<sp/>TestRunStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testRunStats<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5679"><highlight class="normal"></highlight></codeline>
<codeline lineno="5680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>skipTest(<sp/>TestCaseInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testInfo<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5681"><highlight class="normal"></highlight></codeline>
<codeline lineno="5682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>empty<sp/>implementation<sp/>provided</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fatalErrorEncountered(<sp/>StringRef<sp/>name<sp/>);</highlight></codeline>
<codeline lineno="5684"><highlight class="normal"></highlight></codeline>
<codeline lineno="5685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isMulti()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5686"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>IStreamingReporterPtr<sp/>=<sp/>std::unique_ptr&lt;IStreamingReporter&gt;;</highlight></codeline>
<codeline lineno="5688"><highlight class="normal"></highlight></codeline>
<codeline lineno="5689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IReporterFactory<sp/>{</highlight></codeline>
<codeline lineno="5690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~IReporterFactory();</highlight></codeline>
<codeline lineno="5691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>IStreamingReporterPtr<sp/>create(<sp/>ReporterConfig<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/>getDescription()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5693"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>IReporterFactoryPtr<sp/>=<sp/>std::shared_ptr&lt;IReporterFactory&gt;;</highlight></codeline>
<codeline lineno="5695"><highlight class="normal"></highlight></codeline>
<codeline lineno="5696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IReporterRegistry<sp/>{</highlight></codeline>
<codeline lineno="5697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>FactoryMap<sp/>=<sp/>std::map&lt;std::string,<sp/>IReporterFactoryPtr&gt;;</highlight></codeline>
<codeline lineno="5698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Listeners<sp/>=<sp/>std::vector&lt;IReporterFactoryPtr&gt;;</highlight></codeline>
<codeline lineno="5699"><highlight class="normal"></highlight></codeline>
<codeline lineno="5700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~IReporterRegistry();</highlight></codeline>
<codeline lineno="5701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>IStreamingReporterPtr<sp/>create(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name,<sp/>IConfigPtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>FactoryMap<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>getFactories()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Listeners<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>getListeners()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5704"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5705"><highlight class="normal"></highlight></codeline>
<codeline lineno="5706"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5707"><highlight class="normal"></highlight></codeline>
<codeline lineno="5708"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_interfaces_reporter.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5709"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5710"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5711"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cfloat&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5712"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5713"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5714"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5715"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5716"><highlight class="normal"></highlight></codeline>
<codeline lineno="5717"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="5718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>prepareExpandedExpression(AssertionResult&amp;<sp/><ref refid="structresult" kindref="compound">result</ref>);</highlight></codeline>
<codeline lineno="5719"><highlight class="normal"></highlight></codeline>
<codeline lineno="5720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>double<sp/>formatted<sp/>as<sp/>%.3f<sp/>(format<sp/>expected<sp/>on<sp/>output)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5721"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>getFormattedDuration(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>duration<sp/>);</highlight></codeline>
<codeline lineno="5722"><highlight class="normal"></highlight></codeline>
<codeline lineno="5724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shouldShowDuration(<sp/>IConfig<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>duration<sp/>);</highlight></codeline>
<codeline lineno="5725"><highlight class="normal"></highlight></codeline>
<codeline lineno="5726"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>serializeFilters(<sp/>std::vector&lt;std::string&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>container<sp/>);</highlight></codeline>
<codeline lineno="5727"><highlight class="normal"></highlight></codeline>
<codeline lineno="5728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DerivedT&gt;</highlight></codeline>
<codeline lineno="5729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">StreamingReporterBase<sp/>:<sp/>IStreamingReporter<sp/>{</highlight></codeline>
<codeline lineno="5730"><highlight class="normal"></highlight></codeline>
<codeline lineno="5731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StreamingReporterBase(<sp/>ReporterConfig<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_config<sp/>)</highlight></codeline>
<codeline lineno="5732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>m_config(<sp/>_config.fullConfig()<sp/>),</highlight></codeline>
<codeline lineno="5733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream(<sp/>_config.stream()<sp/>)</highlight></codeline>
<codeline lineno="5734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporterPrefs.shouldRedirectStdOut<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!DerivedT::getSupportedVerbosities().count(<sp/>m_config-&gt;verbosity()<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="5737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;Verbosity<sp/>level<sp/>not<sp/>supported<sp/>by<sp/>this<sp/>reporter&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="5738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5739"><highlight class="normal"></highlight></codeline>
<codeline lineno="5740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReporterPreferences<sp/>getPreferences()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_reporterPrefs;</highlight></codeline>
<codeline lineno="5742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5743"><highlight class="normal"></highlight></codeline>
<codeline lineno="5744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::set&lt;Verbosity&gt;<sp/>getSupportedVerbosities()<sp/>{</highlight></codeline>
<codeline lineno="5745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>Verbosity::Normal<sp/>};</highlight></codeline>
<codeline lineno="5746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5747"><highlight class="normal"></highlight></codeline>
<codeline lineno="5748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~StreamingReporterBase()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5749"><highlight class="normal"></highlight></codeline>
<codeline lineno="5750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>noMatchingTestCases(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="5751"><highlight class="normal"></highlight></codeline>
<codeline lineno="5752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reportInvalidArguments(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="5753"><highlight class="normal"></highlight></codeline>
<codeline lineno="5754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testRunStarting(TestRunInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_testRunInfo)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentTestRunInfo<sp/>=<sp/>_testRunInfo;</highlight></codeline>
<codeline lineno="5756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5757"><highlight class="normal"></highlight></codeline>
<codeline lineno="5758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testGroupStarting(GroupInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_groupInfo)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentGroupInfo<sp/>=<sp/>_groupInfo;</highlight></codeline>
<codeline lineno="5760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5761"><highlight class="normal"></highlight></codeline>
<codeline lineno="5762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testCaseStarting(TestCaseInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_testInfo)</highlight><highlight class="keyword"><sp/>override<sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentTestCaseInfo<sp/>=<sp/>_testInfo;</highlight></codeline>
<codeline lineno="5764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sectionStarting(SectionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_sectionInfo)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_sectionStack.push_back(_sectionInfo);</highlight></codeline>
<codeline lineno="5767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5768"><highlight class="normal"></highlight></codeline>
<codeline lineno="5769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sectionEnded(SectionStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/></highlight><highlight class="comment">/*<sp/>_sectionStats<sp/>*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_sectionStack.pop_back();</highlight></codeline>
<codeline lineno="5771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testCaseEnded(TestCaseStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/></highlight><highlight class="comment">/*<sp/>_testCaseStats<sp/>*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentTestCaseInfo.reset();</highlight></codeline>
<codeline lineno="5774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testGroupEnded(TestGroupStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/></highlight><highlight class="comment">/*<sp/>_testGroupStats<sp/>*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentGroupInfo.reset();</highlight></codeline>
<codeline lineno="5777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testRunEnded(TestRunStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/></highlight><highlight class="comment">/*<sp/>_testRunStats<sp/>*/</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentTestCaseInfo.reset();</highlight></codeline>
<codeline lineno="5780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentGroupInfo.reset();</highlight></codeline>
<codeline lineno="5781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentTestRunInfo.reset();</highlight></codeline>
<codeline lineno="5782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5783"><highlight class="normal"></highlight></codeline>
<codeline lineno="5784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>skipTest(TestCaseInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>do<sp/>anything<sp/>with<sp/>this<sp/>by<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>can<sp/>optionally<sp/>be<sp/>overridden<sp/>in<sp/>the<sp/>derived<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5788"><highlight class="normal"></highlight></codeline>
<codeline lineno="5789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IConfigPtr<sp/>m_config;</highlight></codeline>
<codeline lineno="5790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/>stream;</highlight></codeline>
<codeline lineno="5791"><highlight class="normal"></highlight></codeline>
<codeline lineno="5792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LazyStat&lt;TestRunInfo&gt;<sp/>currentTestRunInfo;</highlight></codeline>
<codeline lineno="5793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LazyStat&lt;GroupInfo&gt;<sp/>currentGroupInfo;</highlight></codeline>
<codeline lineno="5794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LazyStat&lt;TestCaseInfo&gt;<sp/>currentTestCaseInfo;</highlight></codeline>
<codeline lineno="5795"><highlight class="normal"></highlight></codeline>
<codeline lineno="5796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SectionInfo&gt;<sp/>m_sectionStack;</highlight></codeline>
<codeline lineno="5797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReporterPreferences<sp/>m_reporterPrefs;</highlight></codeline>
<codeline lineno="5798"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5799"><highlight class="normal"></highlight></codeline>
<codeline lineno="5800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DerivedT&gt;</highlight></codeline>
<codeline lineno="5801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">CumulativeReporterBase<sp/>:<sp/>IStreamingReporter<sp/>{</highlight></codeline>
<codeline lineno="5802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ChildNodeT&gt;</highlight></codeline>
<codeline lineno="5803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Node<sp/>{</highlight></codeline>
<codeline lineno="5804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Node(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_value<sp/>)<sp/>:<sp/><ref refid="classvalue" kindref="compound">value</ref>(<sp/>_value<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="5805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~Node()<sp/>{}</highlight></codeline>
<codeline lineno="5806"><highlight class="normal"></highlight></codeline>
<codeline lineno="5807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ChildNodes<sp/>=<sp/>std::vector&lt;std::shared_ptr&lt;ChildNodeT&gt;&gt;;</highlight></codeline>
<codeline lineno="5808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="5809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ChildNodes<sp/>children;</highlight></codeline>
<codeline lineno="5810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SectionNode<sp/>{</highlight></codeline>
<codeline lineno="5812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>SectionNode(SectionStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_stats)<sp/>:<sp/>stats(_stats)<sp/>{}</highlight></codeline>
<codeline lineno="5813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~SectionNode()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5814"><highlight class="normal"></highlight></codeline>
<codeline lineno="5815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>==<sp/>(SectionNode<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stats.sectionInfo.lineInfo<sp/>==<sp/>other.stats.sectionInfo.lineInfo;</highlight></codeline>
<codeline lineno="5817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator<sp/>==<sp/>(std::shared_ptr&lt;SectionNode&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>operator==(*other);</highlight></codeline>
<codeline lineno="5820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5821"><highlight class="normal"></highlight></codeline>
<codeline lineno="5822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SectionStats<sp/>stats;</highlight></codeline>
<codeline lineno="5823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ChildSections<sp/>=<sp/>std::vector&lt;std::shared_ptr&lt;SectionNode&gt;&gt;;</highlight></codeline>
<codeline lineno="5824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Assertions<sp/>=<sp/>std::vector&lt;AssertionStats&gt;;</highlight></codeline>
<codeline lineno="5825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ChildSections<sp/>childSections;</highlight></codeline>
<codeline lineno="5826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Assertions<sp/>assertions;</highlight></codeline>
<codeline lineno="5827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>stdOut;</highlight></codeline>
<codeline lineno="5828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>stdErr;</highlight></codeline>
<codeline lineno="5829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5830"><highlight class="normal"></highlight></codeline>
<codeline lineno="5831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">BySectionInfo<sp/>{</highlight></codeline>
<codeline lineno="5832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BySectionInfo(<sp/>SectionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other<sp/>)<sp/>:<sp/>m_other(<sp/>other<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="5833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BySectionInfo(<sp/>BySectionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other<sp/>)<sp/>:<sp/>m_other(<sp/>other.m_other<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="5834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()<sp/>(std::shared_ptr&lt;SectionNode&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>node)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((node-&gt;stats.sectionInfo.name<sp/>==<sp/>m_other.name)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="5836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(node-&gt;stats.sectionInfo.lineInfo<sp/>==<sp/>m_other.lineInfo));</highlight></codeline>
<codeline lineno="5837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator=(BySectionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5839"><highlight class="normal"></highlight></codeline>
<codeline lineno="5840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SectionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>m_other;</highlight></codeline>
<codeline lineno="5842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5843"><highlight class="normal"></highlight></codeline>
<codeline lineno="5844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TestCaseNode<sp/>=<sp/>Node&lt;TestCaseStats,<sp/>SectionNode&gt;;</highlight></codeline>
<codeline lineno="5845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TestGroupNode<sp/>=<sp/>Node&lt;TestGroupStats,<sp/>TestCaseNode&gt;;</highlight></codeline>
<codeline lineno="5846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TestRunNode<sp/>=<sp/>Node&lt;TestRunStats,<sp/>TestGroupNode&gt;;</highlight></codeline>
<codeline lineno="5847"><highlight class="normal"></highlight></codeline>
<codeline lineno="5848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CumulativeReporterBase(<sp/>ReporterConfig<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_config<sp/>)</highlight></codeline>
<codeline lineno="5849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>m_config(<sp/>_config.fullConfig()<sp/>),</highlight></codeline>
<codeline lineno="5850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream(<sp/>_config.stream()<sp/>)</highlight></codeline>
<codeline lineno="5851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporterPrefs.shouldRedirectStdOut<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!DerivedT::getSupportedVerbosities().count(<sp/>m_config-&gt;verbosity()<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="5854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;Verbosity<sp/>level<sp/>not<sp/>supported<sp/>by<sp/>this<sp/>reporter&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="5855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~CumulativeReporterBase()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5857"><highlight class="normal"></highlight></codeline>
<codeline lineno="5858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReporterPreferences<sp/>getPreferences()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_reporterPrefs;</highlight></codeline>
<codeline lineno="5860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5861"><highlight class="normal"></highlight></codeline>
<codeline lineno="5862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::set&lt;Verbosity&gt;<sp/>getSupportedVerbosities()<sp/>{</highlight></codeline>
<codeline lineno="5863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>Verbosity::Normal<sp/>};</highlight></codeline>
<codeline lineno="5864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5865"><highlight class="normal"></highlight></codeline>
<codeline lineno="5866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testRunStarting(<sp/>TestRunInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="5867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testGroupStarting(<sp/>GroupInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="5868"><highlight class="normal"></highlight></codeline>
<codeline lineno="5869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testCaseStarting(<sp/>TestCaseInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="5870"><highlight class="normal"></highlight></codeline>
<codeline lineno="5871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sectionStarting(<sp/>SectionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>sectionInfo<sp/>)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SectionStats<sp/>incompleteStats(<sp/>sectionInfo,<sp/>Counts(),<sp/>0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="5873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;SectionNode&gt;<sp/>node;</highlight></codeline>
<codeline lineno="5874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_sectionStack.empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!m_rootSection<sp/>)</highlight></codeline>
<codeline lineno="5876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_rootSection<sp/>=<sp/>std::make_shared&lt;SectionNode&gt;(<sp/>incompleteStats<sp/>);</highlight></codeline>
<codeline lineno="5877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>m_rootSection;</highlight></codeline>
<codeline lineno="5878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SectionNode&amp;<sp/>parentNode<sp/>=<sp/>*m_sectionStack.back();</highlight></codeline>
<codeline lineno="5881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=</highlight></codeline>
<codeline lineno="5882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::find_if(<sp/><sp/><sp/>parentNode.childSections.begin(),</highlight></codeline>
<codeline lineno="5883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parentNode.childSections.end(),</highlight></codeline>
<codeline lineno="5884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BySectionInfo(<sp/>sectionInfo<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>it<sp/>==<sp/>parentNode.childSections.end()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>std::make_shared&lt;SectionNode&gt;(<sp/>incompleteStats<sp/>);</highlight></codeline>
<codeline lineno="5887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parentNode.childSections.push_back(<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="5888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="5891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_sectionStack.push_back(<sp/>node<sp/>);</highlight></codeline>
<codeline lineno="5893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_deepestSection<sp/>=<sp/>std::move(node);</highlight></codeline>
<codeline lineno="5894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5895"><highlight class="normal"></highlight></codeline>
<codeline lineno="5896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assertionStarting(AssertionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="5897"><highlight class="normal"></highlight></codeline>
<codeline lineno="5898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>assertionEnded(AssertionStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>assertionStats)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(!m_sectionStack.empty());</highlight></codeline>
<codeline lineno="5900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AssertionResult<sp/>holds<sp/>a<sp/>pointer<sp/>to<sp/>a<sp/>temporary<sp/>DecomposedExpression,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>getExpandedExpression()<sp/>calls<sp/>to<sp/>build<sp/>the<sp/>expression<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Our<sp/>section<sp/>stack<sp/>copy<sp/>of<sp/>the<sp/>assertionResult<sp/>will<sp/>likely<sp/>outlive<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>temporary,<sp/>so<sp/>it<sp/>must<sp/>be<sp/>expanded<sp/>or<sp/>discarded<sp/>now<sp/>to<sp/>avoid<sp/>calling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>destroyed<sp/>object<sp/>later.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prepareExpandedExpression(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">AssertionResult&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>assertionStats.assertionResult<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SectionNode&amp;<sp/>sectionNode<sp/>=<sp/>*m_sectionStack.back();</highlight></codeline>
<codeline lineno="5907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sectionNode.assertions.push_back(assertionStats);</highlight></codeline>
<codeline lineno="5908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sectionEnded(SectionStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>sectionStats)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(!m_sectionStack.empty());</highlight></codeline>
<codeline lineno="5912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SectionNode&amp;<sp/>node<sp/>=<sp/>*m_sectionStack.back();</highlight></codeline>
<codeline lineno="5913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node.stats<sp/>=<sp/>sectionStats;</highlight></codeline>
<codeline lineno="5914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_sectionStack.pop_back();</highlight></codeline>
<codeline lineno="5915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testCaseEnded(TestCaseStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCaseStats)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>node<sp/>=<sp/>std::make_shared&lt;TestCaseNode&gt;(testCaseStats);</highlight></codeline>
<codeline lineno="5918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(m_sectionStack.size()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="5919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;children.push_back(m_rootSection);</highlight></codeline>
<codeline lineno="5920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_testCases.push_back(node);</highlight></codeline>
<codeline lineno="5921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_rootSection.reset();</highlight></codeline>
<codeline lineno="5922"><highlight class="normal"></highlight></codeline>
<codeline lineno="5923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(m_deepestSection);</highlight></codeline>
<codeline lineno="5924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_deepestSection-&gt;stdOut<sp/>=<sp/>testCaseStats.stdOut;</highlight></codeline>
<codeline lineno="5925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_deepestSection-&gt;stdErr<sp/>=<sp/>testCaseStats.stdErr;</highlight></codeline>
<codeline lineno="5926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testGroupEnded(TestGroupStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testGroupStats)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>node<sp/>=<sp/>std::make_shared&lt;TestGroupNode&gt;(testGroupStats);</highlight></codeline>
<codeline lineno="5929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;children.swap(m_testCases);</highlight></codeline>
<codeline lineno="5930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_testGroups.push_back(node);</highlight></codeline>
<codeline lineno="5931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testRunEnded(TestRunStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testRunStats)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="5933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>node<sp/>=<sp/>std::make_shared&lt;TestRunNode&gt;(testRunStats);</highlight></codeline>
<codeline lineno="5934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;children.swap(m_testGroups);</highlight></codeline>
<codeline lineno="5935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_testRuns.push_back(node);</highlight></codeline>
<codeline lineno="5936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testRunEndedCumulative();</highlight></codeline>
<codeline lineno="5937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testRunEndedCumulative()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5939"><highlight class="normal"></highlight></codeline>
<codeline lineno="5940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>skipTest(TestCaseInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="5941"><highlight class="normal"></highlight></codeline>
<codeline lineno="5942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IConfigPtr<sp/>m_config;</highlight></codeline>
<codeline lineno="5943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/>stream;</highlight></codeline>
<codeline lineno="5944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;AssertionStats&gt;<sp/>m_assertions;</highlight></codeline>
<codeline lineno="5945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;std::shared_ptr&lt;SectionNode&gt;&gt;&gt;<sp/>m_sections;</highlight></codeline>
<codeline lineno="5946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;TestCaseNode&gt;&gt;<sp/>m_testCases;</highlight></codeline>
<codeline lineno="5947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;TestGroupNode&gt;&gt;<sp/>m_testGroups;</highlight></codeline>
<codeline lineno="5948"><highlight class="normal"></highlight></codeline>
<codeline lineno="5949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;TestRunNode&gt;&gt;<sp/>m_testRuns;</highlight></codeline>
<codeline lineno="5950"><highlight class="normal"></highlight></codeline>
<codeline lineno="5951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;SectionNode&gt;<sp/>m_rootSection;</highlight></codeline>
<codeline lineno="5952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;SectionNode&gt;<sp/>m_deepestSection;</highlight></codeline>
<codeline lineno="5953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;SectionNode&gt;&gt;<sp/>m_sectionStack;</highlight></codeline>
<codeline lineno="5954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReporterPreferences<sp/>m_reporterPrefs;</highlight></codeline>
<codeline lineno="5955"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5956"><highlight class="normal"></highlight></codeline>
<codeline lineno="5957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="5958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>getLineOfChars()<sp/>{</highlight></codeline>
<codeline lineno="5959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>line[CATCH_CONFIG_CONSOLE_WIDTH]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="5960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!*line<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="5961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::memset(<sp/>line,<sp/>C,<sp/>CATCH_CONFIG_CONSOLE_WIDTH-1<sp/>);</highlight></codeline>
<codeline lineno="5962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line[CATCH_CONFIG_CONSOLE_WIDTH-1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="5963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>line;</highlight></codeline>
<codeline lineno="5965"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5966"><highlight class="normal"></highlight></codeline>
<codeline lineno="5967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TestEventListenerBase<sp/>:<sp/>StreamingReporterBase&lt;TestEventListenerBase&gt;<sp/>{</highlight></codeline>
<codeline lineno="5968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestEventListenerBase(<sp/>ReporterConfig<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_config<sp/>);</highlight></codeline>
<codeline lineno="5969"><highlight class="normal"></highlight></codeline>
<codeline lineno="5970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::set&lt;Verbosity&gt;<sp/>getSupportedVerbosities();</highlight></codeline>
<codeline lineno="5971"><highlight class="normal"></highlight></codeline>
<codeline lineno="5972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assertionStarting(AssertionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>assertionEnded(AssertionStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5974"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="5975"><highlight class="normal"></highlight></codeline>
<codeline lineno="5976"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5977"><highlight class="normal"></highlight></codeline>
<codeline lineno="5978"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_reporter_bases.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5979"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_console_colour.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5980"><highlight class="normal"></highlight></codeline>
<codeline lineno="5981"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="5982"><highlight class="normal"></highlight></codeline>
<codeline lineno="5983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Colour<sp/>{</highlight></codeline>
<codeline lineno="5984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>Code<sp/>{</highlight></codeline>
<codeline lineno="5985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>None<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="5986"><highlight class="normal"></highlight></codeline>
<codeline lineno="5987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>White,</highlight></codeline>
<codeline lineno="5988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Red,</highlight></codeline>
<codeline lineno="5989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Green,</highlight></codeline>
<codeline lineno="5990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Blue,</highlight></codeline>
<codeline lineno="5991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Cyan,</highlight></codeline>
<codeline lineno="5992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Yellow,</highlight></codeline>
<codeline lineno="5993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Grey,</highlight></codeline>
<codeline lineno="5994"><highlight class="normal"></highlight></codeline>
<codeline lineno="5995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bright<sp/>=<sp/>0x10,</highlight></codeline>
<codeline lineno="5996"><highlight class="normal"></highlight></codeline>
<codeline lineno="5997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BrightRed<sp/>=<sp/>Bright<sp/>|<sp/>Red,</highlight></codeline>
<codeline lineno="5998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BrightGreen<sp/>=<sp/>Bright<sp/>|<sp/>Green,</highlight></codeline>
<codeline lineno="5999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LightGrey<sp/>=<sp/>Bright<sp/>|<sp/>Grey,</highlight></codeline>
<codeline lineno="6000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BrightWhite<sp/>=<sp/>Bright<sp/>|<sp/>White,</highlight></codeline>
<codeline lineno="6001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BrightYellow<sp/>=<sp/>Bright<sp/>|<sp/>Yellow,</highlight></codeline>
<codeline lineno="6002"><highlight class="normal"></highlight></codeline>
<codeline lineno="6003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>By<sp/>intention</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FileName<sp/>=<sp/>LightGrey,</highlight></codeline>
<codeline lineno="6005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Warning<sp/>=<sp/>BrightYellow,</highlight></codeline>
<codeline lineno="6006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultError<sp/>=<sp/>BrightRed,</highlight></codeline>
<codeline lineno="6007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultSuccess<sp/>=<sp/>BrightGreen,</highlight></codeline>
<codeline lineno="6008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultExpectedFailure<sp/>=<sp/>Warning,</highlight></codeline>
<codeline lineno="6009"><highlight class="normal"></highlight></codeline>
<codeline lineno="6010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Error<sp/>=<sp/>BrightRed,</highlight></codeline>
<codeline lineno="6011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Success<sp/>=<sp/>Green,</highlight></codeline>
<codeline lineno="6012"><highlight class="normal"></highlight></codeline>
<codeline lineno="6013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OriginalExpression<sp/>=<sp/>Cyan,</highlight></codeline>
<codeline lineno="6014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReconstructedExpression<sp/>=<sp/>BrightYellow,</highlight></codeline>
<codeline lineno="6015"><highlight class="normal"></highlight></codeline>
<codeline lineno="6016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SecondaryText<sp/>=<sp/>LightGrey,</highlight></codeline>
<codeline lineno="6017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Headers<sp/>=<sp/>White</highlight></codeline>
<codeline lineno="6018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6019"><highlight class="normal"></highlight></codeline>
<codeline lineno="6020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>constructed<sp/>object<sp/>for<sp/>RAII<sp/>guard</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Colour(<sp/>Code<sp/>_colourCode<sp/>);</highlight></codeline>
<codeline lineno="6022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Colour(<sp/>Colour&amp;&amp;<sp/>other<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Colour&amp;<sp/>operator=(<sp/>Colour&amp;&amp;<sp/>other<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~Colour();</highlight></codeline>
<codeline lineno="6025"><highlight class="normal"></highlight></codeline>
<codeline lineno="6026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>static<sp/>method<sp/>for<sp/>one-shot<sp/>changes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>use(<sp/>Code<sp/>_colourCode<sp/>);</highlight></codeline>
<codeline lineno="6028"><highlight class="normal"></highlight></codeline>
<codeline lineno="6029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_moved<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6031"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6032"><highlight class="normal"></highlight></codeline>
<codeline lineno="6033"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/>operator<sp/>&lt;&lt;<sp/>(<sp/>std::ostream&amp;<sp/>os,<sp/>Colour<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>);</highlight></codeline>
<codeline lineno="6034"><highlight class="normal"></highlight></codeline>
<codeline lineno="6035"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6036"><highlight class="normal"></highlight></codeline>
<codeline lineno="6037"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_console_colour.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6038"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_reporter_registrars.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6039"><highlight class="normal"></highlight></codeline>
<codeline lineno="6040"><highlight class="normal"></highlight></codeline>
<codeline lineno="6041"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="6042"><highlight class="normal"></highlight></codeline>
<codeline lineno="6043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="6044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ReporterRegistrar<sp/>{</highlight></codeline>
<codeline lineno="6045"><highlight class="normal"></highlight></codeline>
<codeline lineno="6046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ReporterFactory<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>IReporterFactory<sp/>{</highlight></codeline>
<codeline lineno="6047"><highlight class="normal"></highlight></codeline>
<codeline lineno="6048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IStreamingReporterPtr<sp/>create(<sp/>ReporterConfig<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;T&gt;(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(<sp/>config<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="6050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6051"><highlight class="normal"></highlight></codeline>
<codeline lineno="6052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>getDescription()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>T::getDescription();</highlight></codeline>
<codeline lineno="6054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6056"><highlight class="normal"></highlight></codeline>
<codeline lineno="6057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6058"><highlight class="normal"></highlight></codeline>
<codeline lineno="6059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ReporterRegistrar(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getMutableRegistryHub().registerReporter(<sp/>name,<sp/>std::make_shared&lt;ReporterFactory&gt;()<sp/>);</highlight></codeline>
<codeline lineno="6061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6062"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6063"><highlight class="normal"></highlight></codeline>
<codeline lineno="6064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="6065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ListenerRegistrar<sp/>{</highlight></codeline>
<codeline lineno="6066"><highlight class="normal"></highlight></codeline>
<codeline lineno="6067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ListenerFactory<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>IReporterFactory<sp/>{</highlight></codeline>
<codeline lineno="6068"><highlight class="normal"></highlight></codeline>
<codeline lineno="6069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IStreamingReporterPtr<sp/>create(<sp/>ReporterConfig<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;T&gt;(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T(<sp/>config<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="6071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>getDescription()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string();</highlight></codeline>
<codeline lineno="6074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6076"><highlight class="normal"></highlight></codeline>
<codeline lineno="6077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6078"><highlight class="normal"></highlight></codeline>
<codeline lineno="6079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ListenerRegistrar()<sp/>{</highlight></codeline>
<codeline lineno="6080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getMutableRegistryHub().registerListener(<sp/>std::make_shared&lt;ListenerFactory&gt;()<sp/>);</highlight></codeline>
<codeline lineno="6081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6082"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6083"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6084"><highlight class="normal"></highlight></codeline>
<codeline lineno="6085"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_CONFIG_DISABLE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6086"><highlight class="normal"></highlight></codeline>
<codeline lineno="6087"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REGISTER_REPORTER(<sp/>name,<sp/>reporterType<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="6088"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CATCH_INTERNAL_START_WARNINGS_SUPPRESSION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6089"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6090"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>namespace{<sp/>Catch::ReporterRegistrar&lt;reporterType&gt;<sp/>catch_internal_RegistrarFor##reporterType(<sp/>name<sp/>);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="6091"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6092"><highlight class="normal"></highlight></codeline>
<codeline lineno="6093"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REGISTER_LISTENER(<sp/>listenerType<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="6094"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CATCH_INTERNAL_START_WARNINGS_SUPPRESSION<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6095"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6096"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>namespace{<sp/>Catch::ListenerRegistrar&lt;listenerType&gt;<sp/>catch_internal_RegistrarFor##listenerType;<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="6097"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6098"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_DISABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6099"><highlight class="normal"></highlight></codeline>
<codeline lineno="6100"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REGISTER_REPORTER(name,<sp/>reporterType)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6101"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REGISTER_LISTENER(listenerType)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6102"><highlight class="normal"></highlight></codeline>
<codeline lineno="6103"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_DISABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6104"><highlight class="normal"></highlight></codeline>
<codeline lineno="6105"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_reporter_registrars.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6106"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Allow<sp/>users<sp/>to<sp/>base<sp/>their<sp/>work<sp/>off<sp/>existing<sp/>reporters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6107"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_reporter_compact.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6108"><highlight class="normal"></highlight></codeline>
<codeline lineno="6109"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="6110"><highlight class="normal"></highlight></codeline>
<codeline lineno="6111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">CompactReporter<sp/>:<sp/>StreamingReporterBase&lt;CompactReporter&gt;<sp/>{</highlight></codeline>
<codeline lineno="6112"><highlight class="normal"></highlight></codeline>
<codeline lineno="6113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>StreamingReporterBase::StreamingReporterBase;</highlight></codeline>
<codeline lineno="6114"><highlight class="normal"></highlight></codeline>
<codeline lineno="6115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~CompactReporter()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6116"><highlight class="normal"></highlight></codeline>
<codeline lineno="6117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>getDescription();</highlight></codeline>
<codeline lineno="6118"><highlight class="normal"></highlight></codeline>
<codeline lineno="6119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>noMatchingTestCases(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>spec)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6120"><highlight class="normal"></highlight></codeline>
<codeline lineno="6121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assertionStarting(AssertionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6122"><highlight class="normal"></highlight></codeline>
<codeline lineno="6123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>assertionEnded(AssertionStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_assertionStats)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6124"><highlight class="normal"></highlight></codeline>
<codeline lineno="6125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sectionEnded(SectionStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_sectionStats)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6126"><highlight class="normal"></highlight></codeline>
<codeline lineno="6127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testRunEnded(TestRunStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_testRunStats)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6128"><highlight class="normal"></highlight></codeline>
<codeline lineno="6129"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6130"><highlight class="normal"></highlight></codeline>
<codeline lineno="6131"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6132"><highlight class="normal"></highlight></codeline>
<codeline lineno="6133"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_reporter_compact.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6134"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_reporter_console.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6135"><highlight class="normal"></highlight></codeline>
<codeline lineno="6136"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6137"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(push)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6138"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(disable:4061)<sp/></highlight><highlight class="comment">//<sp/>Not<sp/>all<sp/>labels<sp/>are<sp/>EXPLICITLY<sp/>handled<sp/>in<sp/>switch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>4062<sp/>(not<sp/>all<sp/>labels<sp/>are<sp/>handled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>default<sp/>is<sp/>missing)<sp/>is<sp/>enabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6141"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6142"><highlight class="normal"></highlight></codeline>
<codeline lineno="6143"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="6144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fwd<sp/>decls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SummaryColumn;</highlight></codeline>
<codeline lineno="6146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TablePrinter;</highlight></codeline>
<codeline lineno="6147"><highlight class="normal"></highlight></codeline>
<codeline lineno="6148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ConsoleReporter<sp/>:<sp/>StreamingReporterBase&lt;ConsoleReporter&gt;<sp/>{</highlight></codeline>
<codeline lineno="6149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;TablePrinter&gt;<sp/>m_tablePrinter;</highlight></codeline>
<codeline lineno="6150"><highlight class="normal"></highlight></codeline>
<codeline lineno="6151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ConsoleReporter(ReporterConfig<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config);</highlight></codeline>
<codeline lineno="6152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~ConsoleReporter()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>getDescription();</highlight></codeline>
<codeline lineno="6154"><highlight class="normal"></highlight></codeline>
<codeline lineno="6155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>noMatchingTestCases(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>spec)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6156"><highlight class="normal"></highlight></codeline>
<codeline lineno="6157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reportInvalidArguments(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;arg)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6158"><highlight class="normal"></highlight></codeline>
<codeline lineno="6159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assertionStarting(AssertionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6160"><highlight class="normal"></highlight></codeline>
<codeline lineno="6161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>assertionEnded(AssertionStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_assertionStats)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6162"><highlight class="normal"></highlight></codeline>
<codeline lineno="6163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sectionStarting(SectionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_sectionInfo)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sectionEnded(SectionStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_sectionStats)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6165"><highlight class="normal"></highlight></codeline>
<codeline lineno="6166"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_ENABLE_BENCHMARKING)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>benchmarkPreparing(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>benchmarkStarting(BenchmarkInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structinfo" kindref="compound">info</ref>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>benchmarkEnded(BenchmarkStats&lt;&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>stats)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>benchmarkFailed(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>error)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6171"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_ENABLE_BENCHMARKING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6172"><highlight class="normal"></highlight></codeline>
<codeline lineno="6173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testCaseEnded(TestCaseStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_testCaseStats)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testGroupEnded(TestGroupStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_testGroupStats)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testRunEnded(TestRunStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_testRunStats)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testRunStarting(TestRunInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_testRunInfo)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6178"><highlight class="normal"></highlight></codeline>
<codeline lineno="6179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lazyPrint();</highlight></codeline>
<codeline lineno="6180"><highlight class="normal"></highlight></codeline>
<codeline lineno="6181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lazyPrintWithoutClosingBenchmarkTable();</highlight></codeline>
<codeline lineno="6182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lazyPrintRunInfo();</highlight></codeline>
<codeline lineno="6183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lazyPrintGroupInfo();</highlight></codeline>
<codeline lineno="6184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printTestCaseAndSectionHeader();</highlight></codeline>
<codeline lineno="6185"><highlight class="normal"></highlight></codeline>
<codeline lineno="6186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printClosedHeader(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_name);</highlight></codeline>
<codeline lineno="6187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printOpenHeader(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_name);</highlight></codeline>
<codeline lineno="6188"><highlight class="normal"></highlight></codeline>
<codeline lineno="6189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>string<sp/>has<sp/>a<sp/>:<sp/>in<sp/>first<sp/>line<sp/>will<sp/>set<sp/>indent<sp/>to<sp/>follow<sp/>it<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>subsequent<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printHeaderString(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_string,<sp/>std::size_t<sp/>indent<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="6192"><highlight class="normal"></highlight></codeline>
<codeline lineno="6193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printTotals(Totals<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>totals);</highlight></codeline>
<codeline lineno="6194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printSummaryRow(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>label,<sp/>std::vector&lt;SummaryColumn&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>cols,<sp/>std::size_t<sp/>row);</highlight></codeline>
<codeline lineno="6195"><highlight class="normal"></highlight></codeline>
<codeline lineno="6196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printTotalsDivider(Totals<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>totals);</highlight></codeline>
<codeline lineno="6197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printSummaryDivider();</highlight></codeline>
<codeline lineno="6198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printTestFilters();</highlight></codeline>
<codeline lineno="6199"><highlight class="normal"></highlight></codeline>
<codeline lineno="6200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_headerPrinted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6202"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6203"><highlight class="normal"></highlight></codeline>
<codeline lineno="6204"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6205"><highlight class="normal"></highlight></codeline>
<codeline lineno="6206"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6207"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(pop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6208"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6209"><highlight class="normal"></highlight></codeline>
<codeline lineno="6210"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_reporter_console.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6211"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_reporter_junit.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6212"><highlight class="normal"></highlight></codeline>
<codeline lineno="6213"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_xmlwriter.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6214"><highlight class="normal"></highlight></codeline>
<codeline lineno="6215"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6216"><highlight class="normal"></highlight></codeline>
<codeline lineno="6217"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="6218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>XmlFormatting<sp/>{</highlight></codeline>
<codeline lineno="6219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>None<sp/>=<sp/>0x00,</highlight></codeline>
<codeline lineno="6220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Indent<sp/>=<sp/>0x01,</highlight></codeline>
<codeline lineno="6221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Newline<sp/>=<sp/>0x02,</highlight></codeline>
<codeline lineno="6222"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6223"><highlight class="normal"></highlight></codeline>
<codeline lineno="6224"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlFormatting<sp/>operator<sp/>|<sp/>(XmlFormatting<sp/>lhs,<sp/>XmlFormatting<sp/>rhs);</highlight></codeline>
<codeline lineno="6225"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlFormatting<sp/>operator<sp/>&amp;<sp/>(XmlFormatting<sp/>lhs,<sp/>XmlFormatting<sp/>rhs);</highlight></codeline>
<codeline lineno="6226"><highlight class="normal"></highlight></codeline>
<codeline lineno="6227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">XmlEncode<sp/>{</highlight></codeline>
<codeline lineno="6228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>ForWhat<sp/>{<sp/>ForTextNodes,<sp/>ForAttributes<sp/>};</highlight></codeline>
<codeline lineno="6230"><highlight class="normal"></highlight></codeline>
<codeline lineno="6231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlEncode(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>str,<sp/>ForWhat<sp/>forWhat<sp/>=<sp/>ForTextNodes<sp/>);</highlight></codeline>
<codeline lineno="6232"><highlight class="normal"></highlight></codeline>
<codeline lineno="6233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>encodeTo(<sp/>std::ostream&amp;<sp/>os<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6234"><highlight class="normal"></highlight></codeline>
<codeline lineno="6235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>std::ostream&amp;<sp/>operator<sp/>&lt;&lt;<sp/>(<sp/>std::ostream&amp;<sp/>os,<sp/>XmlEncode<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>xmlEncode<sp/>);</highlight></codeline>
<codeline lineno="6236"><highlight class="normal"></highlight></codeline>
<codeline lineno="6237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>m_str;</highlight></codeline>
<codeline lineno="6239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ForWhat<sp/>m_forWhat;</highlight></codeline>
<codeline lineno="6240"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6241"><highlight class="normal"></highlight></codeline>
<codeline lineno="6242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">XmlWriter<sp/>{</highlight></codeline>
<codeline lineno="6243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6244"><highlight class="normal"></highlight></codeline>
<codeline lineno="6245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ScopedElement<sp/>{</highlight></codeline>
<codeline lineno="6246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScopedElement(<sp/>XmlWriter*<sp/>writer,<sp/>XmlFormatting<sp/>fmt<sp/>);</highlight></codeline>
<codeline lineno="6248"><highlight class="normal"></highlight></codeline>
<codeline lineno="6249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScopedElement(<sp/>ScopedElement&amp;&amp;<sp/>other<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScopedElement&amp;<sp/>operator=(<sp/>ScopedElement&amp;&amp;<sp/>other<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6251"><highlight class="normal"></highlight></codeline>
<codeline lineno="6252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~ScopedElement();</highlight></codeline>
<codeline lineno="6253"><highlight class="normal"></highlight></codeline>
<codeline lineno="6254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScopedElement&amp;<sp/>writeText(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>text,<sp/>XmlFormatting<sp/>fmt<sp/>=<sp/>XmlFormatting::Newline<sp/>|<sp/>XmlFormatting::Indent<sp/>);</highlight></codeline>
<codeline lineno="6255"><highlight class="normal"></highlight></codeline>
<codeline lineno="6256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="6257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScopedElement&amp;<sp/>writeAttribute(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>attribute<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_writer-&gt;writeAttribute(<sp/>name,<sp/>attribute<sp/>);</highlight></codeline>
<codeline lineno="6259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6261"><highlight class="normal"></highlight></codeline>
<codeline lineno="6262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>XmlWriter*<sp/>m_writer<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlFormatting<sp/>m_fmt;</highlight></codeline>
<codeline lineno="6265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6266"><highlight class="normal"></highlight></codeline>
<codeline lineno="6267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlWriter(<sp/>std::ostream&amp;<sp/>os<sp/>=<sp/>Catch::cout()<sp/>);</highlight></codeline>
<codeline lineno="6268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~XmlWriter();</highlight></codeline>
<codeline lineno="6269"><highlight class="normal"></highlight></codeline>
<codeline lineno="6270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlWriter(<sp/>XmlWriter<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlWriter&amp;<sp/>operator=(<sp/>XmlWriter<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6272"><highlight class="normal"></highlight></codeline>
<codeline lineno="6273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlWriter&amp;<sp/>startElement(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name,<sp/>XmlFormatting<sp/>fmt<sp/>=<sp/>XmlFormatting::Newline<sp/>|<sp/>XmlFormatting::Indent);</highlight></codeline>
<codeline lineno="6274"><highlight class="normal"></highlight></codeline>
<codeline lineno="6275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScopedElement<sp/>scopedElement(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name,<sp/>XmlFormatting<sp/>fmt<sp/>=<sp/>XmlFormatting::Newline<sp/>|<sp/>XmlFormatting::Indent);</highlight></codeline>
<codeline lineno="6276"><highlight class="normal"></highlight></codeline>
<codeline lineno="6277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlWriter&amp;<sp/>endElement(XmlFormatting<sp/>fmt<sp/>=<sp/>XmlFormatting::Newline<sp/>|<sp/>XmlFormatting::Indent);</highlight></codeline>
<codeline lineno="6278"><highlight class="normal"></highlight></codeline>
<codeline lineno="6279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlWriter&amp;<sp/>writeAttribute(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>attribute<sp/>);</highlight></codeline>
<codeline lineno="6280"><highlight class="normal"></highlight></codeline>
<codeline lineno="6281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlWriter&amp;<sp/>writeAttribute(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>attribute<sp/>);</highlight></codeline>
<codeline lineno="6282"><highlight class="normal"></highlight></codeline>
<codeline lineno="6283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="6284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlWriter&amp;<sp/>writeAttribute(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>attribute<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="6285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReusableStringStream<sp/>rss;</highlight></codeline>
<codeline lineno="6286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/>attribute;</highlight></codeline>
<codeline lineno="6287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>writeAttribute(<sp/>name,<sp/>rss.str()<sp/>);</highlight></codeline>
<codeline lineno="6288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6289"><highlight class="normal"></highlight></codeline>
<codeline lineno="6290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlWriter&amp;<sp/>writeText(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>text,<sp/>XmlFormatting<sp/>fmt<sp/>=<sp/>XmlFormatting::Newline<sp/>|<sp/>XmlFormatting::Indent);</highlight></codeline>
<codeline lineno="6291"><highlight class="normal"></highlight></codeline>
<codeline lineno="6292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlWriter&amp;<sp/>writeComment(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>text,<sp/>XmlFormatting<sp/>fmt<sp/>=<sp/>XmlFormatting::Newline<sp/>|<sp/>XmlFormatting::Indent);</highlight></codeline>
<codeline lineno="6293"><highlight class="normal"></highlight></codeline>
<codeline lineno="6294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeStylesheetRef(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>url<sp/>);</highlight></codeline>
<codeline lineno="6295"><highlight class="normal"></highlight></codeline>
<codeline lineno="6296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlWriter&amp;<sp/>writeBlankLine();</highlight></codeline>
<codeline lineno="6297"><highlight class="normal"></highlight></codeline>
<codeline lineno="6298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ensureTagClosed();</highlight></codeline>
<codeline lineno="6299"><highlight class="normal"></highlight></codeline>
<codeline lineno="6300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6301"><highlight class="normal"></highlight></codeline>
<codeline lineno="6302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>applyFormatting(XmlFormatting<sp/>fmt);</highlight></codeline>
<codeline lineno="6303"><highlight class="normal"></highlight></codeline>
<codeline lineno="6304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeDeclaration();</highlight></codeline>
<codeline lineno="6305"><highlight class="normal"></highlight></codeline>
<codeline lineno="6306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>newlineIfNecessary();</highlight></codeline>
<codeline lineno="6307"><highlight class="normal"></highlight></codeline>
<codeline lineno="6308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_tagIsOpen<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_needsNewline<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>m_tags;</highlight></codeline>
<codeline lineno="6311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>m_indent;</highlight></codeline>
<codeline lineno="6312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/>m_os;</highlight></codeline>
<codeline lineno="6313"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6314"><highlight class="normal"></highlight></codeline>
<codeline lineno="6315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="6316"><highlight class="normal"></highlight></codeline>
<codeline lineno="6317"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_xmlwriter.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6318"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="6319"><highlight class="normal"></highlight></codeline>
<codeline lineno="6320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">JunitReporter<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>CumulativeReporterBase&lt;JunitReporter&gt;<sp/>{</highlight></codeline>
<codeline lineno="6321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JunitReporter(ReporterConfig<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_config);</highlight></codeline>
<codeline lineno="6323"><highlight class="normal"></highlight></codeline>
<codeline lineno="6324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~JunitReporter()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6325"><highlight class="normal"></highlight></codeline>
<codeline lineno="6326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>getDescription();</highlight></codeline>
<codeline lineno="6327"><highlight class="normal"></highlight></codeline>
<codeline lineno="6328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>noMatchingTestCases(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/></highlight><highlight class="comment">/*spec*/</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6329"><highlight class="normal"></highlight></codeline>
<codeline lineno="6330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testRunStarting(TestRunInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>runInfo)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6331"><highlight class="normal"></highlight></codeline>
<codeline lineno="6332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testGroupStarting(GroupInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>groupInfo)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6333"><highlight class="normal"></highlight></codeline>
<codeline lineno="6334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testCaseStarting(TestCaseInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCaseInfo)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>assertionEnded(AssertionStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>assertionStats)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6336"><highlight class="normal"></highlight></codeline>
<codeline lineno="6337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testCaseEnded(TestCaseStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCaseStats)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6338"><highlight class="normal"></highlight></codeline>
<codeline lineno="6339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testGroupEnded(TestGroupStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testGroupStats)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6340"><highlight class="normal"></highlight></codeline>
<codeline lineno="6341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testRunEndedCumulative()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6342"><highlight class="normal"></highlight></codeline>
<codeline lineno="6343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeGroup(TestGroupNode<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>groupNode,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>suiteTime);</highlight></codeline>
<codeline lineno="6344"><highlight class="normal"></highlight></codeline>
<codeline lineno="6345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeTestCase(TestCaseNode<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCaseNode);</highlight></codeline>
<codeline lineno="6346"><highlight class="normal"></highlight></codeline>
<codeline lineno="6347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeSection(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>className,</highlight></codeline>
<codeline lineno="6348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rootName,</highlight></codeline>
<codeline lineno="6349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SectionNode<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>sectionNode,</highlight></codeline>
<codeline lineno="6350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>testOkToFail<sp/>);</highlight></codeline>
<codeline lineno="6351"><highlight class="normal"></highlight></codeline>
<codeline lineno="6352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeAssertions(SectionNode<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>sectionNode);</highlight></codeline>
<codeline lineno="6353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeAssertion(AssertionStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>stats);</highlight></codeline>
<codeline lineno="6354"><highlight class="normal"></highlight></codeline>
<codeline lineno="6355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlWriter<sp/>xml;</highlight></codeline>
<codeline lineno="6356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_timer" kindref="compound">Timer</ref><sp/>suiteTimer;</highlight></codeline>
<codeline lineno="6357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>stdOutForSuite;</highlight></codeline>
<codeline lineno="6358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>stdErrForSuite;</highlight></codeline>
<codeline lineno="6359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unexpectedExceptions<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_okToFail<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6361"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6362"><highlight class="normal"></highlight></codeline>
<codeline lineno="6363"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6364"><highlight class="normal"></highlight></codeline>
<codeline lineno="6365"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_reporter_junit.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6366"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_reporter_xml.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6367"><highlight class="normal"></highlight></codeline>
<codeline lineno="6368"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="6369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">XmlReporter<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>StreamingReporterBase&lt;XmlReporter&gt;<sp/>{</highlight></codeline>
<codeline lineno="6370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlReporter(ReporterConfig<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_config);</highlight></codeline>
<codeline lineno="6372"><highlight class="normal"></highlight></codeline>
<codeline lineno="6373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~XmlReporter()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6374"><highlight class="normal"></highlight></codeline>
<codeline lineno="6375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>getDescription();</highlight></codeline>
<codeline lineno="6376"><highlight class="normal"></highlight></codeline>
<codeline lineno="6377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/>getStylesheetRef()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6378"><highlight class="normal"></highlight></codeline>
<codeline lineno="6379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeSourceInfo(SourceLineInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>sourceInfo);</highlight></codeline>
<codeline lineno="6380"><highlight class="normal"></highlight></codeline>
<codeline lineno="6381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>StreamingReporterBase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6382"><highlight class="normal"></highlight></codeline>
<codeline lineno="6383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>noMatchingTestCases(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>s)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6384"><highlight class="normal"></highlight></codeline>
<codeline lineno="6385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testRunStarting(TestRunInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testInfo)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6386"><highlight class="normal"></highlight></codeline>
<codeline lineno="6387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testGroupStarting(GroupInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>groupInfo)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6388"><highlight class="normal"></highlight></codeline>
<codeline lineno="6389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testCaseStarting(TestCaseInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testInfo)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6390"><highlight class="normal"></highlight></codeline>
<codeline lineno="6391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sectionStarting(SectionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>sectionInfo)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6392"><highlight class="normal"></highlight></codeline>
<codeline lineno="6393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assertionStarting(AssertionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6394"><highlight class="normal"></highlight></codeline>
<codeline lineno="6395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>assertionEnded(AssertionStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>assertionStats)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6396"><highlight class="normal"></highlight></codeline>
<codeline lineno="6397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sectionEnded(SectionStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>sectionStats)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6398"><highlight class="normal"></highlight></codeline>
<codeline lineno="6399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testCaseEnded(TestCaseStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCaseStats)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6400"><highlight class="normal"></highlight></codeline>
<codeline lineno="6401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testGroupEnded(TestGroupStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testGroupStats)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6402"><highlight class="normal"></highlight></codeline>
<codeline lineno="6403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testRunEnded(TestRunStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testRunStats)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6404"><highlight class="normal"></highlight></codeline>
<codeline lineno="6405"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_ENABLE_BENCHMARKING)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>benchmarkPreparing(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>benchmarkStarting(BenchmarkInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>benchmarkEnded(BenchmarkStats&lt;&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>benchmarkFailed(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6410"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_ENABLE_BENCHMARKING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6411"><highlight class="normal"></highlight></codeline>
<codeline lineno="6412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_timer" kindref="compound">Timer</ref><sp/>m_testCaseTimer;</highlight></codeline>
<codeline lineno="6414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlWriter<sp/>m_xml;</highlight></codeline>
<codeline lineno="6415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_sectionDepth<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6416"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6417"><highlight class="normal"></highlight></codeline>
<codeline lineno="6418"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6419"><highlight class="normal"></highlight></codeline>
<codeline lineno="6420"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_reporter_xml.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6421"><highlight class="normal"></highlight></codeline>
<codeline lineno="6422"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_external_interfaces.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6423"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6424"><highlight class="normal"></highlight></codeline>
<codeline lineno="6425"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_ENABLE_BENCHMARKING)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6426"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_benchmarking_all.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6427"><highlight class="normal"></highlight></codeline>
<codeline lineno="6428"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>proxy<sp/>header<sp/>that<sp/>includes<sp/>all<sp/>of<sp/>the<sp/>benchmarking<sp/>headers<sp/>to<sp/>allow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6429"><highlight class="normal"></highlight><highlight class="comment">//<sp/>concise<sp/>include<sp/>of<sp/>the<sp/>benchmarking<sp/>features.<sp/>You<sp/>should<sp/>prefer<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6430"><highlight class="normal"></highlight><highlight class="comment">//<sp/>individual<sp/>includes<sp/>in<sp/>standard<sp/>use.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6431"><highlight class="normal"></highlight></codeline>
<codeline lineno="6432"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_benchmark.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6433"><highlight class="normal"></highlight></codeline>
<codeline lineno="6434"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Benchmark</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6435"><highlight class="normal"></highlight></codeline>
<codeline lineno="6436"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_chronometer.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6437"><highlight class="normal"></highlight></codeline>
<codeline lineno="6438"><highlight class="normal"></highlight><highlight class="comment">//<sp/>User-facing<sp/>chronometer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6439"><highlight class="normal"></highlight></codeline>
<codeline lineno="6440"><highlight class="normal"></highlight></codeline>
<codeline lineno="6441"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_clock.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6442"><highlight class="normal"></highlight></codeline>
<codeline lineno="6443"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Clocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6444"><highlight class="normal"></highlight></codeline>
<codeline lineno="6445"><highlight class="normal"></highlight></codeline>
<codeline lineno="6446"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6447"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ratio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6448"><highlight class="normal"></highlight></codeline>
<codeline lineno="6449"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="6450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Benchmark<sp/>{</highlight></codeline>
<codeline lineno="6451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Clock&gt;</highlight></codeline>
<codeline lineno="6452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ClockDuration<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Clock::duration;</highlight></codeline>
<codeline lineno="6453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Clock&gt;</highlight></codeline>
<codeline lineno="6454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>FloatDuration<sp/>=<sp/>std::chrono::duration&lt;double,<sp/>typename<sp/>Clock::period&gt;;</highlight></codeline>
<codeline lineno="6455"><highlight class="normal"></highlight></codeline>
<codeline lineno="6456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Clock&gt;</highlight></codeline>
<codeline lineno="6457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TimePoint<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Clock::time_point;</highlight></codeline>
<codeline lineno="6458"><highlight class="normal"></highlight></codeline>
<codeline lineno="6459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>default_clock<sp/>=<sp/>std::chrono::steady_clock;</highlight></codeline>
<codeline lineno="6460"><highlight class="normal"></highlight></codeline>
<codeline lineno="6461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Clock&gt;</highlight></codeline>
<codeline lineno="6462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">now<sp/>{</highlight></codeline>
<codeline lineno="6463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimePoint&lt;Clock&gt;<sp/>operator()()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Clock::now();</highlight></codeline>
<codeline lineno="6465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6467"><highlight class="normal"></highlight></codeline>
<codeline lineno="6468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>fp_seconds<sp/>=<sp/>std::chrono::duration&lt;double,<sp/>std::ratio&lt;1&gt;&gt;;</highlight></codeline>
<codeline lineno="6469"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Benchmark</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6470"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6471"><highlight class="normal"></highlight></codeline>
<codeline lineno="6472"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_clock.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6473"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_optimizer.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6474"><highlight class="normal"></highlight></codeline>
<codeline lineno="6475"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Hinting<sp/>the<sp/>optimizer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6476"><highlight class="normal"></highlight></codeline>
<codeline lineno="6477"><highlight class="normal"></highlight></codeline>
<codeline lineno="6478"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6479"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>include<sp/>&lt;atomic&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>atomic_thread_fence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6480"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6481"><highlight class="normal"></highlight></codeline>
<codeline lineno="6482"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="6483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Benchmark<sp/>{</highlight></codeline>
<codeline lineno="6484"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUC__)<sp/>||<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="6486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>keep_memory(T*<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="6487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">asm</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;g&quot;</highlight><highlight class="normal">(p)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>keep_memory()<sp/>{</highlight></codeline>
<codeline lineno="6490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">asm</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6492"><highlight class="normal"></highlight></codeline>
<codeline lineno="6493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Detail<sp/>{</highlight></codeline>
<codeline lineno="6494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>optimizer_barrier()<sp/>{<sp/>keep_memory();<sp/>}</highlight></codeline>
<codeline lineno="6495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6496"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6497"><highlight class="normal"></highlight></codeline>
<codeline lineno="6498"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>optimize(&quot;&quot;</highlight><highlight class="normal">,<sp/>off)</highlight></codeline>
<codeline lineno="6499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="6500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>keep_memory(T*<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="6501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>thanks<sp/>@milleniumbug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>volatile*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(p)<sp/>=<sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">volatile*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(p);</highlight></codeline>
<codeline lineno="6503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>equivalent<sp/>keep_memory()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6505"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>optimize(&quot;&quot;</highlight><highlight class="normal">,<sp/>on)</highlight></codeline>
<codeline lineno="6506"><highlight class="normal"></highlight></codeline>
<codeline lineno="6507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Detail<sp/>{</highlight></codeline>
<codeline lineno="6508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>optimizer_barrier()<sp/>{</highlight></codeline>
<codeline lineno="6509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::atomic_thread_fence(std::memory_order_seq_cst);</highlight></codeline>
<codeline lineno="6510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6512"><highlight class="normal"></highlight></codeline>
<codeline lineno="6513"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6514"><highlight class="normal"></highlight></codeline>
<codeline lineno="6515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="6516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deoptimize_value(T&amp;&amp;<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="6517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keep_memory(&amp;x);</highlight></codeline>
<codeline lineno="6518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6519"><highlight class="normal"></highlight></codeline>
<codeline lineno="6520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Fn,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="6521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>invoke_deoptimized(Fn&amp;&amp;<sp/>fn,<sp/>Args&amp;&amp;...<sp/>args)<sp/>-&gt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;!std::is_same&lt;void,<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(fn(args...))&gt;::<ref refid="classvalue" kindref="compound">value</ref>&gt;::type<sp/>{</highlight></codeline>
<codeline lineno="6522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deoptimize_value(std::forward&lt;Fn&gt;(fn)<sp/>(std::forward&lt;Args...&gt;(args...)));</highlight></codeline>
<codeline lineno="6523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6524"><highlight class="normal"></highlight></codeline>
<codeline lineno="6525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Fn,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="6526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>invoke_deoptimized(Fn&amp;&amp;<sp/>fn,<sp/>Args&amp;&amp;...<sp/>args)<sp/>-&gt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;std::is_same&lt;void,<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(fn(args...))&gt;::<ref refid="classvalue" kindref="compound">value</ref>&gt;::type<sp/>{</highlight></codeline>
<codeline lineno="6527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;Fn&gt;(fn)<sp/>(std::forward&lt;Args...&gt;(args...));</highlight></codeline>
<codeline lineno="6528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6529"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Benchmark</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6530"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6531"><highlight class="normal"></highlight></codeline>
<codeline lineno="6532"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_optimizer.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6533"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_complete_invoke.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6534"><highlight class="normal"></highlight></codeline>
<codeline lineno="6535"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Invoke<sp/>with<sp/>a<sp/>special<sp/>case<sp/>for<sp/>void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6536"><highlight class="normal"></highlight></codeline>
<codeline lineno="6537"><highlight class="normal"></highlight></codeline>
<codeline lineno="6538"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6539"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6540"><highlight class="normal"></highlight></codeline>
<codeline lineno="6541"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="6542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Benchmark<sp/>{</highlight></codeline>
<codeline lineno="6543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Detail<sp/>{</highlight></codeline>
<codeline lineno="6544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="6545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">CompleteType<sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>T;<sp/>};</highlight></codeline>
<codeline lineno="6546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="6547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">CompleteType&lt;void&gt;<sp/>{<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">type<sp/>{};<sp/>};</highlight></codeline>
<codeline lineno="6548"><highlight class="normal"></highlight></codeline>
<codeline lineno="6549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="6550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>CompleteType_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CompleteType&lt;T&gt;::type;</highlight></codeline>
<codeline lineno="6551"><highlight class="normal"></highlight></codeline>
<codeline lineno="6552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Result&gt;</highlight></codeline>
<codeline lineno="6553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">CompleteInvoker<sp/>{</highlight></codeline>
<codeline lineno="6554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Fun,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="6555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Result<sp/>invoke(Fun&amp;&amp;<sp/>fun,<sp/>Args&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="6556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::forward&lt;Fun&gt;(fun)(std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="6557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="6560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">CompleteInvoker&lt;void&gt;<sp/>{</highlight></codeline>
<codeline lineno="6561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Fun,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="6562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CompleteType_t&lt;void&gt;<sp/>invoke(Fun&amp;&amp;<sp/>fun,<sp/>Args&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="6563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;Fun&gt;(fun)(std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="6564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="6565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6567"><highlight class="normal"></highlight></codeline>
<codeline lineno="6568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>invoke<sp/>and<sp/>not<sp/>return<sp/>void<sp/>:(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Fun,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="6570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CompleteType_t&lt;FunctionReturnType&lt;Fun,<sp/>Args...&gt;&gt;<sp/>complete_invoke(Fun&amp;&amp;<sp/>fun,<sp/>Args&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="6571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CompleteInvoker&lt;FunctionReturnType&lt;Fun,<sp/>Args...&gt;&gt;::invoke(std::forward&lt;Fun&gt;(fun),<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="6572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6573"><highlight class="normal"></highlight></codeline>
<codeline lineno="6574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>benchmarkErrorMsg<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;a<sp/>benchmark<sp/>failed<sp/>to<sp/>run<sp/>successfully&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6576"><highlight class="normal"></highlight></codeline>
<codeline lineno="6577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Fun&gt;</highlight></codeline>
<codeline lineno="6578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Detail::CompleteType_t&lt;FunctionReturnType&lt;Fun&gt;&gt;<sp/>user_code(Fun&amp;&amp;<sp/>fun)<sp/>{</highlight></codeline>
<codeline lineno="6579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_TRY{</highlight></codeline>
<codeline lineno="6580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Detail::complete_invoke(std::forward&lt;Fun&gt;(fun));</highlight></codeline>
<codeline lineno="6581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>CATCH_CATCH_ALL{</highlight></codeline>
<codeline lineno="6582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getResultCapture().benchmarkFailed(translateActiveException());</highlight></codeline>
<codeline lineno="6583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_RUNTIME_ERROR(Detail::benchmarkErrorMsg);</highlight></codeline>
<codeline lineno="6584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6586"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Benchmark</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6587"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6588"><highlight class="normal"></highlight></codeline>
<codeline lineno="6589"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_complete_invoke.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6590"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="6591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Benchmark<sp/>{</highlight></codeline>
<codeline lineno="6592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Detail<sp/>{</highlight></codeline>
<codeline lineno="6593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ChronometerConcept<sp/>{</highlight></codeline>
<codeline lineno="6594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>start()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>finish()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~ChronometerConcept()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Clock&gt;</highlight></codeline>
<codeline lineno="6599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ChronometerModel<sp/>final<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ChronometerConcept<sp/>{</highlight></codeline>
<codeline lineno="6600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>start()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/>started<sp/>=<sp/>Clock::now();<sp/>}</highlight></codeline>
<codeline lineno="6601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>finish()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/>finished<sp/>=<sp/>Clock::now();<sp/>}</highlight></codeline>
<codeline lineno="6602"><highlight class="normal"></highlight></codeline>
<codeline lineno="6603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ClockDuration&lt;Clock&gt;<sp/>elapsed()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>finished<sp/>-<sp/>started;<sp/>}</highlight></codeline>
<codeline lineno="6604"><highlight class="normal"></highlight></codeline>
<codeline lineno="6605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimePoint&lt;Clock&gt;<sp/>started;</highlight></codeline>
<codeline lineno="6606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimePoint&lt;Clock&gt;<sp/>finished;</highlight></codeline>
<codeline lineno="6607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6609"><highlight class="normal"></highlight></codeline>
<codeline lineno="6610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Chronometer<sp/>{</highlight></codeline>
<codeline lineno="6611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Fun&gt;</highlight></codeline>
<codeline lineno="6613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>measure(Fun&amp;&amp;<sp/>fun)<sp/>{<sp/>measure(std::forward&lt;Fun&gt;(fun),<sp/>is_callable&lt;Fun(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)&gt;());<sp/>}</highlight></codeline>
<codeline lineno="6614"><highlight class="normal"></highlight></codeline>
<codeline lineno="6615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>runs()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>k;<sp/>}</highlight></codeline>
<codeline lineno="6616"><highlight class="normal"></highlight></codeline>
<codeline lineno="6617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Chronometer(Detail::ChronometerConcept&amp;<sp/>meter,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k)</highlight></codeline>
<codeline lineno="6618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>impl(&amp;meter)</highlight></codeline>
<codeline lineno="6619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>k(k)<sp/>{}</highlight></codeline>
<codeline lineno="6620"><highlight class="normal"></highlight></codeline>
<codeline lineno="6621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Fun&gt;</highlight></codeline>
<codeline lineno="6623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>measure(Fun&amp;&amp;<sp/>fun,<sp/>std::false_type)<sp/>{</highlight></codeline>
<codeline lineno="6624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>measure([&amp;fun](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fun();<sp/>},<sp/>std::true_type());</highlight></codeline>
<codeline lineno="6625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6626"><highlight class="normal"></highlight></codeline>
<codeline lineno="6627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Fun&gt;</highlight></codeline>
<codeline lineno="6628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>measure(Fun&amp;&amp;<sp/>fun,<sp/>std::true_type)<sp/>{</highlight></codeline>
<codeline lineno="6629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Detail::optimizer_barrier();</highlight></codeline>
<codeline lineno="6630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>impl-&gt;start();</highlight></codeline>
<codeline lineno="6631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>k;<sp/>++i)<sp/>invoke_deoptimized(fun,<sp/>i);</highlight></codeline>
<codeline lineno="6632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>impl-&gt;finish();</highlight></codeline>
<codeline lineno="6633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Detail::optimizer_barrier();</highlight></codeline>
<codeline lineno="6634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6635"><highlight class="normal"></highlight></codeline>
<codeline lineno="6636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Detail::ChronometerConcept*<sp/>impl;</highlight></codeline>
<codeline lineno="6637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="6638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6639"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Benchmark</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6640"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6641"><highlight class="normal"></highlight></codeline>
<codeline lineno="6642"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_chronometer.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6643"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_environment.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6644"><highlight class="normal"></highlight></codeline>
<codeline lineno="6645"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Environment<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6646"><highlight class="normal"></highlight></codeline>
<codeline lineno="6647"><highlight class="normal"></highlight></codeline>
<codeline lineno="6648"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="6649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Benchmark<sp/>{</highlight></codeline>
<codeline lineno="6650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Duration&gt;</highlight></codeline>
<codeline lineno="6651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">EnvironmentEstimate<sp/>{</highlight></codeline>
<codeline lineno="6652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Duration<sp/>mean;</highlight></codeline>
<codeline lineno="6653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutlierClassification<sp/>outliers;</highlight></codeline>
<codeline lineno="6654"><highlight class="normal"></highlight></codeline>
<codeline lineno="6655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Duration2&gt;</highlight></codeline>
<codeline lineno="6656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>EnvironmentEstimate&lt;Duration2&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>mean,<sp/>outliers<sp/>};</highlight></codeline>
<codeline lineno="6658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Clock&gt;</highlight></codeline>
<codeline lineno="6661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Environment<sp/>{</highlight></codeline>
<codeline lineno="6662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>clock_type<sp/>=<sp/>Clock;</highlight></codeline>
<codeline lineno="6663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EnvironmentEstimate&lt;FloatDuration&lt;Clock&gt;&gt;<sp/>clock_resolution;</highlight></codeline>
<codeline lineno="6664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EnvironmentEstimate&lt;FloatDuration&lt;Clock&gt;&gt;<sp/>clock_cost;</highlight></codeline>
<codeline lineno="6665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6666"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Benchmark</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6667"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6668"><highlight class="normal"></highlight></codeline>
<codeline lineno="6669"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_environment.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6670"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_execution_plan.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6671"><highlight class="normal"></highlight></codeline>
<codeline lineno="6672"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Execution<sp/>plan</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6673"><highlight class="normal"></highlight></codeline>
<codeline lineno="6674"><highlight class="normal"></highlight></codeline>
<codeline lineno="6675"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_benchmark_function.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6676"><highlight class="normal"></highlight></codeline>
<codeline lineno="6677"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Dumb<sp/>std::function<sp/>implementation<sp/>for<sp/>consistent<sp/>call<sp/>overhead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6678"><highlight class="normal"></highlight></codeline>
<codeline lineno="6679"><highlight class="normal"></highlight></codeline>
<codeline lineno="6680"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6681"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6682"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6683"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6684"><highlight class="normal"></highlight></codeline>
<codeline lineno="6685"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="6686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Benchmark<sp/>{</highlight></codeline>
<codeline lineno="6687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Detail<sp/>{</highlight></codeline>
<codeline lineno="6688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="6689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Decay<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::decay&lt;T&gt;::type;</highlight></codeline>
<codeline lineno="6690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="6691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_related</highlight></codeline>
<codeline lineno="6692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>std::is_same&lt;Decay&lt;T&gt;,<sp/>Decay&lt;U&gt;&gt;<sp/>{};</highlight></codeline>
<codeline lineno="6693"><highlight class="normal"></highlight></codeline>
<codeline lineno="6701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">BenchmarkFunction<sp/>{</highlight></codeline>
<codeline lineno="6702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">callable<sp/>{</highlight></codeline>
<codeline lineno="6704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>call(Chronometer<sp/>meter)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>callable*<sp/>clone()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="6706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~callable()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Fun&gt;</highlight></codeline>
<codeline lineno="6709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">model<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>callable<sp/>{</highlight></codeline>
<codeline lineno="6710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model(Fun&amp;&amp;<sp/>fun)<sp/>:<sp/>fun(std::move(fun))<sp/>{}</highlight></codeline>
<codeline lineno="6711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model(Fun<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>fun)<sp/>:<sp/>fun(fun)<sp/>{}</highlight></codeline>
<codeline lineno="6712"><highlight class="normal"></highlight></codeline>
<codeline lineno="6713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>model&lt;Fun&gt;*<sp/>clone()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>model&lt;Fun&gt;(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="6714"><highlight class="normal"></highlight></codeline>
<codeline lineno="6715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>call(Chronometer<sp/>meter)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>call(meter,<sp/>is_callable&lt;Fun(Chronometer)&gt;());</highlight></codeline>
<codeline lineno="6717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>call(Chronometer<sp/>meter,<sp/>std::true_type)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fun(meter);</highlight></codeline>
<codeline lineno="6720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>call(Chronometer<sp/>meter,<sp/>std::false_type)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>meter.measure(fun);</highlight></codeline>
<codeline lineno="6723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6724"><highlight class="normal"></highlight></codeline>
<codeline lineno="6725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fun<sp/>fun;</highlight></codeline>
<codeline lineno="6726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6727"><highlight class="normal"></highlight></codeline>
<codeline lineno="6728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">do_nothing<sp/>{<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{}<sp/>};</highlight></codeline>
<codeline lineno="6729"><highlight class="normal"></highlight></codeline>
<codeline lineno="6730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="6731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BenchmarkFunction(model&lt;T&gt;*<sp/>c)<sp/>:<sp/>f(c)<sp/>{}</highlight></codeline>
<codeline lineno="6732"><highlight class="normal"></highlight></codeline>
<codeline lineno="6733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BenchmarkFunction()</highlight></codeline>
<codeline lineno="6735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>f(new<sp/>model&lt;do_nothing&gt;{<sp/>{}<sp/>})<sp/>{}</highlight></codeline>
<codeline lineno="6736"><highlight class="normal"></highlight></codeline>
<codeline lineno="6737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Fun,</highlight></codeline>
<codeline lineno="6738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;!is_related&lt;Fun,<sp/>BenchmarkFunction&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;::type<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="6739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BenchmarkFunction(Fun&amp;&amp;<sp/>fun)</highlight></codeline>
<codeline lineno="6740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>f(new<sp/>model&lt;typename<sp/>std::decay&lt;Fun&gt;::type&gt;(std::forward&lt;Fun&gt;(fun)))<sp/>{}</highlight></codeline>
<codeline lineno="6741"><highlight class="normal"></highlight></codeline>
<codeline lineno="6742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BenchmarkFunction(BenchmarkFunction&amp;&amp;<sp/>that)</highlight></codeline>
<codeline lineno="6743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>f(std::move(that.f))<sp/>{}</highlight></codeline>
<codeline lineno="6744"><highlight class="normal"></highlight></codeline>
<codeline lineno="6745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BenchmarkFunction(BenchmarkFunction<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>that)</highlight></codeline>
<codeline lineno="6746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>f(that.f-&gt;clone())<sp/>{}</highlight></codeline>
<codeline lineno="6747"><highlight class="normal"></highlight></codeline>
<codeline lineno="6748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BenchmarkFunction&amp;<sp/>operator=(BenchmarkFunction&amp;&amp;<sp/>that)<sp/>{</highlight></codeline>
<codeline lineno="6749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>std::move(that.f);</highlight></codeline>
<codeline lineno="6750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6752"><highlight class="normal"></highlight></codeline>
<codeline lineno="6753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BenchmarkFunction&amp;<sp/>operator=(BenchmarkFunction<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>that)<sp/>{</highlight></codeline>
<codeline lineno="6754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f.reset(that.f-&gt;clone());</highlight></codeline>
<codeline lineno="6755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6757"><highlight class="normal"></highlight></codeline>
<codeline lineno="6758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(Chronometer<sp/>meter)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>f-&gt;call(meter);<sp/>}</highlight></codeline>
<codeline lineno="6759"><highlight class="normal"></highlight></codeline>
<codeline lineno="6760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="6761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;callable&gt;<sp/>f;</highlight></codeline>
<codeline lineno="6762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6764"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Benchmark</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6765"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6766"><highlight class="normal"></highlight></codeline>
<codeline lineno="6767"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_benchmark_function.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6768"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_repeat.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6769"><highlight class="normal"></highlight></codeline>
<codeline lineno="6770"><highlight class="normal"></highlight><highlight class="comment">//<sp/>repeat<sp/>algorithm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6771"><highlight class="normal"></highlight></codeline>
<codeline lineno="6772"><highlight class="normal"></highlight></codeline>
<codeline lineno="6773"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6774"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6775"><highlight class="normal"></highlight></codeline>
<codeline lineno="6776"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="6777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Benchmark<sp/>{</highlight></codeline>
<codeline lineno="6778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Detail<sp/>{</highlight></codeline>
<codeline lineno="6779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Fun&gt;</highlight></codeline>
<codeline lineno="6780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">repeater<sp/>{</highlight></codeline>
<codeline lineno="6781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>k;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="6783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fun();</highlight></codeline>
<codeline lineno="6784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fun<sp/>fun;</highlight></codeline>
<codeline lineno="6787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Fun&gt;</highlight></codeline>
<codeline lineno="6789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>repeater&lt;typename<sp/>std::decay&lt;Fun&gt;::type&gt;<sp/><ref refid="group__gtx__wrap_1ga809650c6310ea7c42666e918c117fb6f" kindref="member">repeat</ref>(Fun&amp;&amp;<sp/>fun)<sp/>{</highlight></codeline>
<codeline lineno="6790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>std::forward&lt;Fun&gt;(fun)<sp/>};</highlight></codeline>
<codeline lineno="6791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6793"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Benchmark</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6794"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6795"><highlight class="normal"></highlight></codeline>
<codeline lineno="6796"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_repeat.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6797"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_run_for_at_least.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6798"><highlight class="normal"></highlight></codeline>
<codeline lineno="6799"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Run<sp/>a<sp/>function<sp/>for<sp/>a<sp/>minimum<sp/>amount<sp/>of<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6800"><highlight class="normal"></highlight></codeline>
<codeline lineno="6801"><highlight class="normal"></highlight></codeline>
<codeline lineno="6802"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_measure.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6803"><highlight class="normal"></highlight></codeline>
<codeline lineno="6804"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Measure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6805"><highlight class="normal"></highlight></codeline>
<codeline lineno="6806"><highlight class="normal"></highlight></codeline>
<codeline lineno="6807"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_timing.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6808"><highlight class="normal"></highlight></codeline>
<codeline lineno="6809"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Timing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6810"><highlight class="normal"></highlight></codeline>
<codeline lineno="6811"><highlight class="normal"></highlight></codeline>
<codeline lineno="6812"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6813"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6814"><highlight class="normal"></highlight></codeline>
<codeline lineno="6815"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="6816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Benchmark<sp/>{</highlight></codeline>
<codeline lineno="6817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Duration,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Result&gt;</highlight></codeline>
<codeline lineno="6818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Timing<sp/>{</highlight></codeline>
<codeline lineno="6819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Duration<sp/>elapsed;</highlight></codeline>
<codeline lineno="6820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="6821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iterations;</highlight></codeline>
<codeline lineno="6822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Clock,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="6824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TimingOf<sp/>=<sp/>Timing&lt;ClockDuration&lt;Clock&gt;,<sp/>Detail::CompleteType_t&lt;FunctionReturnType&lt;Func,<sp/>Args...&gt;&gt;&gt;;</highlight></codeline>
<codeline lineno="6825"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Benchmark</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6826"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6827"><highlight class="normal"></highlight></codeline>
<codeline lineno="6828"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_timing.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6829"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6830"><highlight class="normal"></highlight></codeline>
<codeline lineno="6831"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="6832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Benchmark<sp/>{</highlight></codeline>
<codeline lineno="6833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Detail<sp/>{</highlight></codeline>
<codeline lineno="6834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Clock,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Fun,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="6835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimingOf&lt;Clock,<sp/>Fun,<sp/>Args...&gt;<sp/>measure(Fun&amp;&amp;<sp/>fun,<sp/>Args&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="6836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>Clock::now();</highlight></codeline>
<codeline lineno="6837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>r<sp/>=<sp/>Detail::complete_invoke(fun,<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="6838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>Clock::now();</highlight></codeline>
<codeline lineno="6839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>delta<sp/>=<sp/>end<sp/>-<sp/>start;</highlight></codeline>
<codeline lineno="6840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>delta,<sp/>std::forward&lt;decltype(r)&gt;(r),<sp/>1<sp/>};</highlight></codeline>
<codeline lineno="6841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6843"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Benchmark</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6844"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6845"><highlight class="normal"></highlight></codeline>
<codeline lineno="6846"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_measure.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6847"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6848"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6849"><highlight class="normal"></highlight></codeline>
<codeline lineno="6850"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="6851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Benchmark<sp/>{</highlight></codeline>
<codeline lineno="6852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Detail<sp/>{</highlight></codeline>
<codeline lineno="6853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Clock,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Fun&gt;</highlight></codeline>
<codeline lineno="6854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimingOf&lt;Clock,<sp/>Fun,<sp/>int&gt;<sp/>measure_one(Fun&amp;&amp;<sp/>fun,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iters,<sp/>std::false_type)<sp/>{</highlight></codeline>
<codeline lineno="6855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Detail::measure&lt;Clock&gt;(fun,<sp/>iters);</highlight></codeline>
<codeline lineno="6856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Clock,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Fun&gt;</highlight></codeline>
<codeline lineno="6858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimingOf&lt;Clock,<sp/>Fun,<sp/>Chronometer&gt;<sp/>measure_one(Fun&amp;&amp;<sp/>fun,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iters,<sp/>std::true_type)<sp/>{</highlight></codeline>
<codeline lineno="6859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Detail::ChronometerModel&lt;Clock&gt;<sp/>meter;</highlight></codeline>
<codeline lineno="6860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>Detail::complete_invoke(fun,<sp/>Chronometer(meter,<sp/>iters));</highlight></codeline>
<codeline lineno="6861"><highlight class="normal"></highlight></codeline>
<codeline lineno="6862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>meter.elapsed(),<sp/>std::move(<ref refid="structresult" kindref="compound">result</ref>),<sp/>iters<sp/>};</highlight></codeline>
<codeline lineno="6863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6864"><highlight class="normal"></highlight></codeline>
<codeline lineno="6865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Clock,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Fun&gt;</highlight></codeline>
<codeline lineno="6866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>run_for_at_least_argument_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::conditional&lt;is_callable&lt;Fun(Chronometer)&gt;<ref refid="classvalue" kindref="compound">::value</ref>,<sp/>Chronometer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;::type;</highlight></codeline>
<codeline lineno="6867"><highlight class="normal"></highlight></codeline>
<codeline lineno="6868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">optimized_away_error<sp/>:<sp/>std::exception<sp/>{</highlight></codeline>
<codeline lineno="6869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>what()<sp/>const<sp/>noexcept</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;could<sp/>not<sp/>measure<sp/>benchmark,<sp/>maybe<sp/>it<sp/>was<sp/>optimized<sp/>away&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="6871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6873"><highlight class="normal"></highlight></codeline>
<codeline lineno="6874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Clock,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Fun&gt;</highlight></codeline>
<codeline lineno="6875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TimingOf&lt;Clock,<sp/>Fun,<sp/>run_for_at_least_argument_t&lt;Clock,<sp/>Fun&gt;&gt;<sp/>run_for_at_least(ClockDuration&lt;Clock&gt;<sp/>how_long,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>seed,<sp/>Fun&amp;&amp;<sp/>fun)<sp/>{</highlight></codeline>
<codeline lineno="6876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iters<sp/>=<sp/>seed;</highlight></codeline>
<codeline lineno="6877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(iters<sp/>&lt;<sp/>(1<sp/>&lt;&lt;<sp/>30))<sp/>{</highlight></codeline>
<codeline lineno="6878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>Timing<sp/>=<sp/>measure_one&lt;Clock&gt;(fun,<sp/>iters,<sp/>is_callable&lt;Fun(Chronometer)&gt;());</highlight></codeline>
<codeline lineno="6879"><highlight class="normal"></highlight></codeline>
<codeline lineno="6880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Timing.elapsed<sp/>&gt;=<sp/>how_long)<sp/>{</highlight></codeline>
<codeline lineno="6881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>Timing.elapsed,<sp/>std::move(Timing.result),<sp/>iters<sp/>};</highlight></codeline>
<codeline lineno="6882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iters<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="6884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::throw_exception(optimized_away_error{});</highlight></codeline>
<codeline lineno="6886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6888"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Benchmark</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6889"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6890"><highlight class="normal"></highlight></codeline>
<codeline lineno="6891"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_run_for_at_least.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6892"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6893"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6894"><highlight class="normal"></highlight></codeline>
<codeline lineno="6895"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="6896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Benchmark<sp/>{</highlight></codeline>
<codeline lineno="6897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Duration&gt;</highlight></codeline>
<codeline lineno="6898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ExecutionPlan<sp/>{</highlight></codeline>
<codeline lineno="6899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iterations_per_sample;</highlight></codeline>
<codeline lineno="6900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Duration<sp/>estimated_duration;</highlight></codeline>
<codeline lineno="6901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Detail::BenchmarkFunction<sp/>benchmark;</highlight></codeline>
<codeline lineno="6902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Duration<sp/>warmup_time;</highlight></codeline>
<codeline lineno="6903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>warmup_iterations;</highlight></codeline>
<codeline lineno="6904"><highlight class="normal"></highlight></codeline>
<codeline lineno="6905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Duration2&gt;</highlight></codeline>
<codeline lineno="6906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>ExecutionPlan&lt;Duration2&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>iterations_per_sample,<sp/>estimated_duration,<sp/>benchmark,<sp/>warmup_time,<sp/>warmup_iterations<sp/>};</highlight></codeline>
<codeline lineno="6908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6909"><highlight class="normal"></highlight></codeline>
<codeline lineno="6910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Clock&gt;</highlight></codeline>
<codeline lineno="6911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;FloatDuration&lt;Clock&gt;&gt;<sp/>run(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IConfig<sp/>&amp;cfg,<sp/>Environment&lt;FloatDuration&lt;Clock&gt;&gt;<sp/>env)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="6912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>warmup<sp/>a<sp/>bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Detail::run_for_at_least&lt;Clock&gt;(std::chrono::duration_cast&lt;ClockDuration&lt;Clock&gt;&gt;(warmup_time),<sp/>warmup_iterations,<sp/><ref refid="group__gtx__wrap_1ga809650c6310ea7c42666e918c117fb6f" kindref="member">Detail::repeat</ref>(now&lt;Clock&gt;{}));</highlight></codeline>
<codeline lineno="6914"><highlight class="normal"></highlight></codeline>
<codeline lineno="6915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;FloatDuration&lt;Clock&gt;&gt;<sp/>times;</highlight></codeline>
<codeline lineno="6916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>times.reserve(cfg.benchmarkSamples());</highlight></codeline>
<codeline lineno="6917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::generate_n(std::back_inserter(times),<sp/>cfg.benchmarkSamples(),<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>env]<sp/>{</highlight></codeline>
<codeline lineno="6918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Detail::ChronometerModel&lt;Clock&gt;<sp/>model;</highlight></codeline>
<codeline lineno="6919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;benchmark(Chronometer(model,<sp/>iterations_per_sample));</highlight></codeline>
<codeline lineno="6920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>sample_time<sp/>=<sp/>model.elapsed()<sp/>-<sp/>env.clock_cost.mean;</highlight></codeline>
<codeline lineno="6921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(sample_time<sp/>&lt;<sp/>FloatDuration&lt;Clock&gt;::zero())<sp/>sample_time<sp/>=<sp/>FloatDuration&lt;Clock&gt;::zero();</highlight></codeline>
<codeline lineno="6922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>sample_time<sp/>/<sp/>iterations_per_sample;</highlight></codeline>
<codeline lineno="6923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="6924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>times;</highlight></codeline>
<codeline lineno="6925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="6927"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Benchmark</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6928"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6929"><highlight class="normal"></highlight></codeline>
<codeline lineno="6930"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_execution_plan.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6931"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_estimate_clock.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6932"><highlight class="normal"></highlight></codeline>
<codeline lineno="6933"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Environment<sp/>measurement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6934"><highlight class="normal"></highlight></codeline>
<codeline lineno="6935"><highlight class="normal"></highlight></codeline>
<codeline lineno="6936"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_stats.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6937"><highlight class="normal"></highlight></codeline>
<codeline lineno="6938"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Statistical<sp/>analysis<sp/>tools</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6939"><highlight class="normal"></highlight></codeline>
<codeline lineno="6940"><highlight class="normal"></highlight></codeline>
<codeline lineno="6941"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6942"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6943"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6944"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6945"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6946"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6947"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6948"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6949"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6950"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;random&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6951"><highlight class="normal"></highlight></codeline>
<codeline lineno="6952"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="6953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Benchmark<sp/>{</highlight></codeline>
<codeline lineno="6954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Detail<sp/>{</highlight></codeline>
<codeline lineno="6955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>sample<sp/>=<sp/>std::vector&lt;double&gt;;</highlight></codeline>
<codeline lineno="6956"><highlight class="normal"></highlight></codeline>
<codeline lineno="6957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>weighted_average_quantile(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>q,<sp/>std::vector&lt;double&gt;::iterator<sp/>first,<sp/>std::vector&lt;double&gt;::iterator<sp/>last);</highlight></codeline>
<codeline lineno="6958"><highlight class="normal"></highlight></codeline>
<codeline lineno="6959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iterator&gt;</highlight></codeline>
<codeline lineno="6960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutlierClassification<sp/>classify_outliers(Iterator<sp/>first,<sp/>Iterator<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="6961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>copy(first,<sp/>last);</highlight></codeline>
<codeline lineno="6962"><highlight class="normal"></highlight></codeline>
<codeline lineno="6963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>q1<sp/>=<sp/>weighted_average_quantile(1,<sp/>4,<sp/>copy.begin(),<sp/>copy.end());</highlight></codeline>
<codeline lineno="6964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>q3<sp/>=<sp/>weighted_average_quantile(3,<sp/>4,<sp/>copy.begin(),<sp/>copy.end());</highlight></codeline>
<codeline lineno="6965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iqr<sp/>=<sp/>q3<sp/>-<sp/>q1;</highlight></codeline>
<codeline lineno="6966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>los<sp/>=<sp/>q1<sp/>-<sp/>(iqr<sp/>*<sp/>3.);</highlight></codeline>
<codeline lineno="6967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lom<sp/>=<sp/>q1<sp/>-<sp/>(iqr<sp/>*<sp/>1.5);</highlight></codeline>
<codeline lineno="6968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>him<sp/>=<sp/>q3<sp/>+<sp/>(iqr<sp/>*<sp/>1.5);</highlight></codeline>
<codeline lineno="6969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>his<sp/>=<sp/>q3<sp/>+<sp/>(iqr<sp/>*<sp/>3.);</highlight></codeline>
<codeline lineno="6970"><highlight class="normal"></highlight></codeline>
<codeline lineno="6971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutlierClassification<sp/>o;</highlight></codeline>
<codeline lineno="6972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>first<sp/>!=<sp/>last;<sp/>++first)<sp/>{</highlight></codeline>
<codeline lineno="6973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>t<sp/>=<sp/>*first;</highlight></codeline>
<codeline lineno="6974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&lt;<sp/>los)<sp/>++o.low_severe;</highlight></codeline>
<codeline lineno="6975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>if<sp/>(t<sp/>&lt;<sp/>lom)<sp/>++o.low_mild;</highlight></codeline>
<codeline lineno="6976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>if<sp/>(t<sp/>&gt;<sp/>his)<sp/>++o.high_severe;</highlight></codeline>
<codeline lineno="6977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>if<sp/>(t<sp/>&gt;<sp/>him)<sp/>++o.high_mild;</highlight></codeline>
<codeline lineno="6978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++o.samples_seen;</highlight></codeline>
<codeline lineno="6979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>o;</highlight></codeline>
<codeline lineno="6981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6982"><highlight class="normal"></highlight></codeline>
<codeline lineno="6983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iterator&gt;</highlight></codeline>
<codeline lineno="6984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mean(Iterator<sp/>first,<sp/>Iterator<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="6985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>last<sp/>-<sp/>first;</highlight></codeline>
<codeline lineno="6986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>std::accumulate(first,<sp/>last,<sp/>0.);</highlight></codeline>
<codeline lineno="6987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum<sp/>/<sp/>count;</highlight></codeline>
<codeline lineno="6988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="6989"><highlight class="normal"></highlight></codeline>
<codeline lineno="6990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>URng,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iterator,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Estimator&gt;</highlight></codeline>
<codeline lineno="6991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sample<sp/>resample(URng&amp;<sp/>rng,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>resamples,<sp/>Iterator<sp/>first,<sp/>Iterator<sp/>last,<sp/>Estimator&amp;<sp/>estimator)<sp/>{</highlight></codeline>
<codeline lineno="6992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>last<sp/>-<sp/>first;</highlight></codeline>
<codeline lineno="6993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::uniform_int_distribution&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(n)&gt;<sp/>dist(0,<sp/>n<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="6994"><highlight class="normal"></highlight></codeline>
<codeline lineno="6995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sample<sp/>out;</highlight></codeline>
<codeline lineno="6996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.reserve(resamples);</highlight></codeline>
<codeline lineno="6997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::generate_n(std::back_inserter(out),<sp/>resamples,<sp/>[n,<sp/>first,<sp/>&amp;estimator,<sp/>&amp;dist,<sp/>&amp;rng]<sp/>{</highlight></codeline>
<codeline lineno="6998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>resampled;</highlight></codeline>
<codeline lineno="6999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resampled.reserve(n);</highlight></codeline>
<codeline lineno="7000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::generate_n(std::back_inserter(resampled),<sp/>n,<sp/>[first,<sp/>&amp;dist,<sp/>&amp;rng]<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>first[dist(rng)];<sp/>});</highlight></codeline>
<codeline lineno="7001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>estimator(resampled.begin(),<sp/>resampled.end());</highlight></codeline>
<codeline lineno="7002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="7003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sort(out.begin(),<sp/>out.end());</highlight></codeline>
<codeline lineno="7004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="7005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7006"><highlight class="normal"></highlight></codeline>
<codeline lineno="7007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Estimator,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iterator&gt;</highlight></codeline>
<codeline lineno="7008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sample<sp/>jackknife(Estimator&amp;&amp;<sp/>estimator,<sp/>Iterator<sp/>first,<sp/>Iterator<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="7009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>last<sp/>-<sp/>first;</highlight></codeline>
<codeline lineno="7010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>second<sp/>=<sp/>std::next(first);</highlight></codeline>
<codeline lineno="7011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sample<sp/>results;</highlight></codeline>
<codeline lineno="7012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results.reserve(n);</highlight></codeline>
<codeline lineno="7013"><highlight class="normal"></highlight></codeline>
<codeline lineno="7014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>first;<sp/>it<sp/>!=<sp/>last;<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="7015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::iter_swap(it,<sp/>first);</highlight></codeline>
<codeline lineno="7016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results.push_back(estimator(second,<sp/>last));</highlight></codeline>
<codeline lineno="7017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7018"><highlight class="normal"></highlight></codeline>
<codeline lineno="7019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>results;</highlight></codeline>
<codeline lineno="7020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7021"><highlight class="normal"></highlight></codeline>
<codeline lineno="7022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>normal_cdf(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="7023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::erfc(-x<sp/>/<sp/><ref refid="group__core__func__exponential_1ga1f904e09827e939a56e4158f45ca8ede" kindref="member">std::sqrt</ref>(2.0))<sp/>/<sp/>2.0;</highlight></codeline>
<codeline lineno="7024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7025"><highlight class="normal"></highlight></codeline>
<codeline lineno="7026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>erfc_inv(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
<codeline lineno="7027"><highlight class="normal"></highlight></codeline>
<codeline lineno="7028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>normal_quantile(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p);</highlight></codeline>
<codeline lineno="7029"><highlight class="normal"></highlight></codeline>
<codeline lineno="7030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iterator,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Estimator&gt;</highlight></codeline>
<codeline lineno="7031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Estimate&lt;double&gt;<sp/>bootstrap(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>confidence_level,<sp/>Iterator<sp/>first,<sp/>Iterator<sp/>last,<sp/>sample<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>resample,<sp/>Estimator&amp;&amp;<sp/>estimator)<sp/>{</highlight></codeline>
<codeline lineno="7032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n_samples<sp/>=<sp/>last<sp/>-<sp/>first;</highlight></codeline>
<codeline lineno="7033"><highlight class="normal"></highlight></codeline>
<codeline lineno="7034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>point<sp/>=<sp/>estimator(first,<sp/>last);</highlight></codeline>
<codeline lineno="7035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Degenerate<sp/>case<sp/>with<sp/>a<sp/>single<sp/>sample</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_samples<sp/>==<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>point,<sp/>point,<sp/>point,<sp/>confidence_level<sp/>};</highlight></codeline>
<codeline lineno="7037"><highlight class="normal"></highlight></codeline>
<codeline lineno="7038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sample<sp/>jack<sp/>=<sp/>jackknife(estimator,<sp/>first,<sp/>last);</highlight></codeline>
<codeline lineno="7039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>jack_mean<sp/>=<sp/>mean(jack.begin(),<sp/>jack.end());</highlight></codeline>
<codeline lineno="7040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum_squares,<sp/>sum_cubes;</highlight></codeline>
<codeline lineno="7041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tie(sum_squares,<sp/>sum_cubes)<sp/>=<sp/>std::accumulate(jack.begin(),<sp/>jack.end(),<sp/>std::make_pair(0.,<sp/>0.),<sp/>[jack_mean](std::pair&lt;double,<sp/>double&gt;<sp/>sqcb,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)<sp/>-&gt;<sp/>std::pair&lt;double,<sp/>double&gt;<sp/>{</highlight></codeline>
<codeline lineno="7042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>d<sp/>=<sp/>jack_mean<sp/>-<sp/>x;</highlight></codeline>
<codeline lineno="7043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>d2<sp/>=<sp/>d<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="7044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>d3<sp/>=<sp/>d2<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="7045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>{<sp/>sqcb.first<sp/>+<sp/>d2,<sp/>sqcb.second<sp/>+<sp/>d3<sp/>};</highlight></codeline>
<codeline lineno="7046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="7047"><highlight class="normal"></highlight></codeline>
<codeline lineno="7048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>accel<sp/>=<sp/>sum_cubes<sp/>/<sp/>(6<sp/>*<sp/><ref refid="group__core__func__exponential_1ga717a43207fffc8b5e8e66cf56ded5ace" kindref="member">std::pow</ref>(sum_squares,<sp/>1.5));</highlight></codeline>
<codeline lineno="7049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(resample.size());</highlight></codeline>
<codeline lineno="7050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>prob_n<sp/>=<sp/>std::count_if(resample.begin(),<sp/>resample.end(),<sp/>[point](</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/>return<sp/>x<sp/>&lt;<sp/>point;<sp/>})<sp/>/<sp/>(double)n;</highlight></codeline>
<codeline lineno="7051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>degenerate<sp/>case<sp/>with<sp/>uniform<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prob_n<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>point,<sp/>point,<sp/>point,<sp/>confidence_level<sp/>};</highlight></codeline>
<codeline lineno="7053"><highlight class="normal"></highlight></codeline>
<codeline lineno="7054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bias<sp/>=<sp/>normal_quantile(prob_n);</highlight></codeline>
<codeline lineno="7055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z1<sp/>=<sp/>normal_quantile((1.<sp/>-<sp/>confidence_level)<sp/>/<sp/>2.);</highlight></codeline>
<codeline lineno="7056"><highlight class="normal"></highlight></codeline>
<codeline lineno="7057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cumn<sp/>=<sp/>[n](</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::lround(normal_cdf(x)<sp/>*<sp/>n);<sp/>};</highlight></codeline>
<codeline lineno="7059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>[bias,<sp/>accel](</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bias<sp/>+<sp/>b<sp/>/<sp/>(1.<sp/>-<sp/>accel<sp/>*<sp/>b);<sp/>};</highlight></codeline>
<codeline lineno="7060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b1<sp/>=<sp/>bias<sp/>+<sp/>z1;</highlight></codeline>
<codeline lineno="7061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b2<sp/>=<sp/>bias<sp/>-<sp/>z1;</highlight></codeline>
<codeline lineno="7062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a1<sp/>=<sp/>a(b1);</highlight></codeline>
<codeline lineno="7063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a2<sp/>=<sp/>a(b2);</highlight></codeline>
<codeline lineno="7064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lo<sp/>=<sp/>(<ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">std::max</ref>)(cumn(a1),<sp/>0);</highlight></codeline>
<codeline lineno="7065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hi<sp/>=<sp/>(<ref refid="group__core__func__common_1ga2c2bde1cec025b7ddff83c74a1113719" kindref="member">std::min</ref>)(cumn(a2),<sp/>n<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="7066"><highlight class="normal"></highlight></codeline>
<codeline lineno="7067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>point,<sp/>resample[lo],<sp/>resample[hi],<sp/>confidence_level<sp/>};</highlight></codeline>
<codeline lineno="7068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7069"><highlight class="normal"></highlight></codeline>
<codeline lineno="7070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>outlier_variance(Estimate&lt;double&gt;<sp/>mean,<sp/>Estimate&lt;double&gt;<sp/>stddev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="7071"><highlight class="normal"></highlight></codeline>
<codeline lineno="7072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">bootstrap_analysis<sp/>{</highlight></codeline>
<codeline lineno="7073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Estimate&lt;double&gt;<sp/>mean;</highlight></codeline>
<codeline lineno="7074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Estimate&lt;double&gt;<sp/>standard_deviation;</highlight></codeline>
<codeline lineno="7075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>outlier_variance;</highlight></codeline>
<codeline lineno="7076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="7077"><highlight class="normal"></highlight></codeline>
<codeline lineno="7078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bootstrap_analysis<sp/>analyse_samples(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>confidence_level,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_resamples,<sp/>std::vector&lt;double&gt;::iterator<sp/>first,<sp/>std::vector&lt;double&gt;::iterator<sp/>last);</highlight></codeline>
<codeline lineno="7079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7080"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Benchmark</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7081"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7082"><highlight class="normal"></highlight></codeline>
<codeline lineno="7083"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_stats.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7084"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7085"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7086"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7087"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7088"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7089"><highlight class="normal"></highlight></codeline>
<codeline lineno="7090"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="7091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Benchmark<sp/>{</highlight></codeline>
<codeline lineno="7092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Detail<sp/>{</highlight></codeline>
<codeline lineno="7093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Clock&gt;</highlight></codeline>
<codeline lineno="7094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>resolution(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="7095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;TimePoint&lt;Clock&gt;&gt;<sp/>times;</highlight></codeline>
<codeline lineno="7096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>times.reserve(k<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="7097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::generate_n(std::back_inserter(times),<sp/>k<sp/>+<sp/>1,<sp/>now&lt;Clock&gt;{});</highlight></codeline>
<codeline lineno="7098"><highlight class="normal"></highlight></codeline>
<codeline lineno="7099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>deltas;</highlight></codeline>
<codeline lineno="7100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltas.reserve(k);</highlight></codeline>
<codeline lineno="7101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(std::next(times.begin()),<sp/>times.end(),<sp/>times.begin(),</highlight></codeline>
<codeline lineno="7102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::back_inserter(deltas),</highlight></codeline>
<codeline lineno="7103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](TimePoint&lt;Clock&gt;<sp/>a,<sp/>TimePoint&lt;Clock&gt;<sp/>b)<sp/>{<sp/>return<sp/>static_cast&lt;double&gt;((a<sp/>-<sp/>b).count());<sp/>});</highlight></codeline>
<codeline lineno="7104"><highlight class="normal"></highlight></codeline>
<codeline lineno="7105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>deltas;</highlight></codeline>
<codeline lineno="7106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7107"><highlight class="normal"></highlight></codeline>
<codeline lineno="7108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>warmup_iterations<sp/>=<sp/>10000;</highlight></codeline>
<codeline lineno="7109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>warmup_time<sp/>=<sp/>std::chrono::milliseconds(100);</highlight></codeline>
<codeline lineno="7110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>minimum_ticks<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="7111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>warmup_seed<sp/>=<sp/>10000;</highlight></codeline>
<codeline lineno="7112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>clock_resolution_estimation_time<sp/>=<sp/>std::chrono::milliseconds(500);</highlight></codeline>
<codeline lineno="7113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>clock_cost_estimation_time_limit<sp/>=<sp/>std::chrono::seconds(1);</highlight></codeline>
<codeline lineno="7114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>clock_cost_estimation_tick_limit<sp/>=<sp/>100000;</highlight></codeline>
<codeline lineno="7115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>clock_cost_estimation_time<sp/>=<sp/>std::chrono::milliseconds(10);</highlight></codeline>
<codeline lineno="7116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>clock_cost_estimation_iterations<sp/>=<sp/>10000;</highlight></codeline>
<codeline lineno="7117"><highlight class="normal"></highlight></codeline>
<codeline lineno="7118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Clock&gt;</highlight></codeline>
<codeline lineno="7119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>warmup()<sp/>{</highlight></codeline>
<codeline lineno="7120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>run_for_at_least&lt;Clock&gt;(std::chrono::duration_cast&lt;ClockDuration&lt;Clock&gt;&gt;(warmup_time),<sp/>warmup_seed,<sp/>&amp;resolution&lt;Clock&gt;)</highlight></codeline>
<codeline lineno="7121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.iterations;</highlight></codeline>
<codeline lineno="7122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Clock&gt;</highlight></codeline>
<codeline lineno="7124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EnvironmentEstimate&lt;FloatDuration&lt;Clock&gt;&gt;<sp/>estimate_clock_resolution(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iterations)<sp/>{</highlight></codeline>
<codeline lineno="7125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>run_for_at_least&lt;Clock&gt;(std::chrono::duration_cast&lt;ClockDuration&lt;Clock&gt;&gt;(clock_resolution_estimation_time),<sp/>iterations,<sp/>&amp;resolution&lt;Clock&gt;)</highlight></codeline>
<codeline lineno="7126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.result;</highlight></codeline>
<codeline lineno="7127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FloatDuration&lt;Clock&gt;(mean(r.begin(),<sp/>r.end())),</highlight></codeline>
<codeline lineno="7129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>classify_outliers(r.begin(),<sp/>r.end()),</highlight></codeline>
<codeline lineno="7130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="7131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Clock&gt;</highlight></codeline>
<codeline lineno="7133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EnvironmentEstimate&lt;FloatDuration&lt;Clock&gt;&gt;<sp/>estimate_clock_cost(FloatDuration&lt;Clock&gt;<sp/>resolution)<sp/>{</highlight></codeline>
<codeline lineno="7134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>time_limit<sp/>=<sp/>(<ref refid="group__core__func__common_1ga2c2bde1cec025b7ddff83c74a1113719" kindref="member">std::min</ref>)(</highlight></codeline>
<codeline lineno="7135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resolution<sp/>*<sp/>clock_cost_estimation_tick_limit,</highlight></codeline>
<codeline lineno="7136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FloatDuration&lt;Clock&gt;(clock_cost_estimation_time_limit));</highlight></codeline>
<codeline lineno="7137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>time_clock<sp/>=<sp/>[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="7138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Detail::measure&lt;Clock&gt;([k]<sp/>{</highlight></codeline>
<codeline lineno="7139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>k;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ignored<sp/>=<sp/>Clock::now();</highlight></codeline>
<codeline lineno="7141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)ignored;</highlight></codeline>
<codeline lineno="7142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}).elapsed;</highlight></codeline>
<codeline lineno="7144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="7145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_clock(1);</highlight></codeline>
<codeline lineno="7146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iters<sp/>=<sp/>clock_cost_estimation_iterations;</highlight></codeline>
<codeline lineno="7147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>r<sp/>=<sp/>run_for_at_least&lt;Clock&gt;(std::chrono::duration_cast&lt;ClockDuration&lt;Clock&gt;&gt;(clock_cost_estimation_time),<sp/>iters,<sp/>time_clock);</highlight></codeline>
<codeline lineno="7148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>times;</highlight></codeline>
<codeline lineno="7149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nsamples<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="group__core__func__common_1ga7a508730e49e5cec65af435d92ee4baf" kindref="member">std::ceil</ref>(time_limit<sp/>/<sp/>r.elapsed));</highlight></codeline>
<codeline lineno="7150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>times.reserve(nsamples);</highlight></codeline>
<codeline lineno="7151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::generate_n(std::back_inserter(times),<sp/>nsamples,<sp/>[time_clock,<sp/>&amp;r]<sp/>{</highlight></codeline>
<codeline lineno="7152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((time_clock(r.iterations)<sp/>/<sp/>r.iterations).count());</highlight></codeline>
<codeline lineno="7153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="7154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FloatDuration&lt;Clock&gt;(mean(times.begin(),<sp/>times.end())),</highlight></codeline>
<codeline lineno="7156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>classify_outliers(times.begin(),<sp/>times.end()),</highlight></codeline>
<codeline lineno="7157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="7158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7159"><highlight class="normal"></highlight></codeline>
<codeline lineno="7160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Clock&gt;</highlight></codeline>
<codeline lineno="7161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Environment&lt;FloatDuration&lt;Clock&gt;&gt;<sp/>measure_environment()<sp/>{</highlight></codeline>
<codeline lineno="7162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Environment&lt;FloatDuration&lt;Clock&gt;&gt;*<sp/>env<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(env)<sp/>{</highlight></codeline>
<codeline lineno="7164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*env;</highlight></codeline>
<codeline lineno="7165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7166"><highlight class="normal"></highlight></codeline>
<codeline lineno="7167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iters<sp/>=<sp/>Detail::warmup&lt;Clock&gt;();</highlight></codeline>
<codeline lineno="7168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>resolution<sp/>=<sp/>Detail::estimate_clock_resolution&lt;Clock&gt;(iters);</highlight></codeline>
<codeline lineno="7169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cost<sp/>=<sp/>Detail::estimate_clock_cost&lt;Clock&gt;(resolution.mean);</highlight></codeline>
<codeline lineno="7170"><highlight class="normal"></highlight></codeline>
<codeline lineno="7171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Environment&lt;FloatDuration&lt;Clock&gt;&gt;{<sp/>resolution,<sp/>cost<sp/>};</highlight></codeline>
<codeline lineno="7172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*env;</highlight></codeline>
<codeline lineno="7173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7175"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Benchmark</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7176"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7177"><highlight class="normal"></highlight></codeline>
<codeline lineno="7178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_estimate_clock.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_analyse.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7180"><highlight class="normal"></highlight></codeline>
<codeline lineno="7181"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Run<sp/>and<sp/>analyse<sp/>one<sp/>benchmark</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7182"><highlight class="normal"></highlight></codeline>
<codeline lineno="7183"><highlight class="normal"></highlight></codeline>
<codeline lineno="7184"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_sample_analysis.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7185"><highlight class="normal"></highlight></codeline>
<codeline lineno="7186"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Benchmark<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7187"><highlight class="normal"></highlight></codeline>
<codeline lineno="7188"><highlight class="normal"></highlight></codeline>
<codeline lineno="7189"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7190"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7191"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7192"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7193"><highlight class="normal"></highlight></codeline>
<codeline lineno="7194"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="7195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Benchmark<sp/>{</highlight></codeline>
<codeline lineno="7196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Duration&gt;</highlight></codeline>
<codeline lineno="7197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SampleAnalysis<sp/>{</highlight></codeline>
<codeline lineno="7198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Duration&gt;<sp/>samples;</highlight></codeline>
<codeline lineno="7199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Estimate&lt;Duration&gt;<sp/>mean;</highlight></codeline>
<codeline lineno="7200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Estimate&lt;Duration&gt;<sp/>standard_deviation;</highlight></codeline>
<codeline lineno="7201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutlierClassification<sp/>outliers;</highlight></codeline>
<codeline lineno="7202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>outlier_variance;</highlight></codeline>
<codeline lineno="7203"><highlight class="normal"></highlight></codeline>
<codeline lineno="7204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Duration2&gt;</highlight></codeline>
<codeline lineno="7205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>SampleAnalysis&lt;Duration2&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Duration2&gt;<sp/>samples2;</highlight></codeline>
<codeline lineno="7207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>samples2.reserve(samples.size());</highlight></codeline>
<codeline lineno="7208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(samples.begin(),<sp/>samples.end(),<sp/>std::back_inserter(samples2),<sp/>[](Duration<sp/>d)<sp/>{<sp/>return<sp/>Duration2(d);<sp/>});</highlight></codeline>
<codeline lineno="7209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(samples2),</highlight></codeline>
<codeline lineno="7211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mean,</highlight></codeline>
<codeline lineno="7212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>standard_deviation,</highlight></codeline>
<codeline lineno="7213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outliers,</highlight></codeline>
<codeline lineno="7214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outlier_variance,</highlight></codeline>
<codeline lineno="7215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="7216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="7218"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Benchmark</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7219"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7220"><highlight class="normal"></highlight></codeline>
<codeline lineno="7221"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_sample_analysis.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7222"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7223"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7224"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7225"><highlight class="normal"></highlight></codeline>
<codeline lineno="7226"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="7227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Benchmark<sp/>{</highlight></codeline>
<codeline lineno="7228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Detail<sp/>{</highlight></codeline>
<codeline lineno="7229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Duration,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Iterator&gt;</highlight></codeline>
<codeline lineno="7230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SampleAnalysis&lt;Duration&gt;<sp/>analyse(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IConfig<sp/>&amp;cfg,<sp/>Environment&lt;Duration&gt;,<sp/>Iterator<sp/>first,<sp/>Iterator<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="7231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cfg.benchmarkNoAnalysis())<sp/>{</highlight></codeline>
<codeline lineno="7232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>samples;</highlight></codeline>
<codeline lineno="7233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>samples.reserve(last<sp/>-<sp/>first);</highlight></codeline>
<codeline lineno="7234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(first,<sp/>last,<sp/>std::back_inserter(samples),<sp/>[](Duration<sp/>d)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d.count();<sp/>});</highlight></codeline>
<codeline lineno="7235"><highlight class="normal"></highlight></codeline>
<codeline lineno="7236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>analysis<sp/>=<sp/>Catch::Benchmark::Detail::analyse_samples(cfg.benchmarkConfidenceInterval(),<sp/>cfg.benchmarkResamples(),<sp/>samples.begin(),<sp/>samples.end());</highlight></codeline>
<codeline lineno="7237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>outliers<sp/>=<sp/>Catch::Benchmark::Detail::classify_outliers(samples.begin(),<sp/>samples.end());</highlight></codeline>
<codeline lineno="7238"><highlight class="normal"></highlight></codeline>
<codeline lineno="7239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>wrap_estimate<sp/>=<sp/>[](Estimate&lt;double&gt;<sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Estimate&lt;Duration&gt;<sp/>{</highlight></codeline>
<codeline lineno="7241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Duration(<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>.point),</highlight></codeline>
<codeline lineno="7242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Duration(<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>.lower_bound),</highlight></codeline>
<codeline lineno="7243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Duration(<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>.upper_bound),</highlight></codeline>
<codeline lineno="7244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>.confidence_interval,</highlight></codeline>
<codeline lineno="7245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="7246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="7247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Duration&gt;<sp/>samples2;</highlight></codeline>
<codeline lineno="7248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>samples2.reserve(samples.size());</highlight></codeline>
<codeline lineno="7249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(samples.begin(),<sp/>samples.end(),<sp/>std::back_inserter(samples2),<sp/>[](</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d)<sp/>{<sp/>return<sp/>Duration(d);<sp/>});</highlight></codeline>
<codeline lineno="7250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(samples2),</highlight></codeline>
<codeline lineno="7252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrap_estimate(analysis.mean),</highlight></codeline>
<codeline lineno="7253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrap_estimate(analysis.standard_deviation),</highlight></codeline>
<codeline lineno="7254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outliers,</highlight></codeline>
<codeline lineno="7255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>analysis.outlier_variance,</highlight></codeline>
<codeline lineno="7256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="7257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Duration&gt;<sp/>samples;</highlight></codeline>
<codeline lineno="7259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>samples.reserve(last<sp/>-<sp/>first);</highlight></codeline>
<codeline lineno="7260"><highlight class="normal"></highlight></codeline>
<codeline lineno="7261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Duration<sp/>mean<sp/>=<sp/>Duration(0);</highlight></codeline>
<codeline lineno="7262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>first;<sp/>it<sp/>&lt;<sp/>last;<sp/>++it,<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="7264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>samples.push_back(Duration(*it));</highlight></codeline>
<codeline lineno="7265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mean<sp/>+=<sp/>Duration(*it);</highlight></codeline>
<codeline lineno="7266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mean<sp/>/=<sp/>i;</highlight></codeline>
<codeline lineno="7268"><highlight class="normal"></highlight></codeline>
<codeline lineno="7269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(samples),</highlight></codeline>
<codeline lineno="7271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Estimate&lt;Duration&gt;{mean,<sp/>mean,<sp/>mean,<sp/>0.0},</highlight></codeline>
<codeline lineno="7272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Estimate&lt;Duration&gt;{Duration(0),<sp/>Duration(0),<sp/>Duration(0),<sp/>0.0},</highlight></codeline>
<codeline lineno="7273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutlierClassification{},</highlight></codeline>
<codeline lineno="7274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0</highlight></codeline>
<codeline lineno="7275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="7276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7279"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Benchmark</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7280"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7281"><highlight class="normal"></highlight></codeline>
<codeline lineno="7282"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_analyse.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7283"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7284"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7285"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7286"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7287"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7288"><highlight class="normal"></highlight></codeline>
<codeline lineno="7289"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="7290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Benchmark<sp/>{</highlight></codeline>
<codeline lineno="7291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Benchmark<sp/>{</highlight></codeline>
<codeline lineno="7292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Benchmark(std::string<sp/>&amp;&amp;name)</highlight></codeline>
<codeline lineno="7293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>name(std::move(name))<sp/>{}</highlight></codeline>
<codeline lineno="7294"><highlight class="normal"></highlight></codeline>
<codeline lineno="7295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>FUN&gt;</highlight></codeline>
<codeline lineno="7296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Benchmark(std::string<sp/>&amp;&amp;name,<sp/>FUN<sp/>&amp;&amp;func)</highlight></codeline>
<codeline lineno="7297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>fun(std::move(func)),<sp/>name(std::move(name))<sp/>{}</highlight></codeline>
<codeline lineno="7298"><highlight class="normal"></highlight></codeline>
<codeline lineno="7299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Clock&gt;</highlight></codeline>
<codeline lineno="7300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExecutionPlan&lt;FloatDuration&lt;Clock&gt;&gt;<sp/>prepare(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IConfig<sp/>&amp;cfg,<sp/>Environment&lt;FloatDuration&lt;Clock&gt;&gt;<sp/>env)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>min_time<sp/>=<sp/>env.clock_resolution.mean<sp/>*<sp/>Detail::minimum_ticks;</highlight></codeline>
<codeline lineno="7302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>run_time<sp/>=<sp/><ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">std::max</ref>(min_time,<sp/>std::chrono::duration_cast&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(min_time)&gt;(cfg.benchmarkWarmupTime()));</highlight></codeline>
<codeline lineno="7303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>test<sp/>=<sp/>Detail::run_for_at_least&lt;Clock&gt;(std::chrono::duration_cast&lt;ClockDuration&lt;Clock&gt;&gt;(run_time),<sp/>1,<sp/>fun);</highlight></codeline>
<codeline lineno="7304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_iters<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="group__core__func__common_1ga7a508730e49e5cec65af435d92ee4baf" kindref="member">std::ceil</ref>(min_time<sp/>*<sp/>test.iterations<sp/>/<sp/>test.elapsed));</highlight></codeline>
<codeline lineno="7305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>new_iters,<sp/>test.elapsed<sp/>/<sp/>test.iterations<sp/>*<sp/>new_iters<sp/>*<sp/>cfg.benchmarkSamples(),<sp/>fun,<sp/>std::chrono::duration_cast&lt;FloatDuration&lt;Clock&gt;&gt;(cfg.benchmarkWarmupTime()),<sp/>Detail::warmup_iterations<sp/>};</highlight></codeline>
<codeline lineno="7306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7307"><highlight class="normal"></highlight></codeline>
<codeline lineno="7308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Clock<sp/>=<sp/>default_clock&gt;</highlight></codeline>
<codeline lineno="7309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>run()<sp/>{</highlight></codeline>
<codeline lineno="7310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IConfigPtr<sp/>cfg<sp/>=<sp/>getCurrentContext().getConfig();</highlight></codeline>
<codeline lineno="7311"><highlight class="normal"></highlight></codeline>
<codeline lineno="7312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>env<sp/>=<sp/>Detail::measure_environment&lt;Clock&gt;();</highlight></codeline>
<codeline lineno="7313"><highlight class="normal"></highlight></codeline>
<codeline lineno="7314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getResultCapture().benchmarkPreparing(name);</highlight></codeline>
<codeline lineno="7315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_TRY{</highlight></codeline>
<codeline lineno="7316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>plan<sp/>=<sp/>user_code([&amp;]<sp/>{</highlight></codeline>
<codeline lineno="7317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>prepare&lt;Clock&gt;(*cfg,<sp/>env);</highlight></codeline>
<codeline lineno="7318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="7319"><highlight class="normal"></highlight></codeline>
<codeline lineno="7320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BenchmarkInfo<sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>{</highlight></codeline>
<codeline lineno="7321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name,</highlight></codeline>
<codeline lineno="7322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plan.estimated_duration.count(),</highlight></codeline>
<codeline lineno="7323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>plan.iterations_per_sample,</highlight></codeline>
<codeline lineno="7324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfg-&gt;benchmarkSamples(),</highlight></codeline>
<codeline lineno="7325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfg-&gt;benchmarkResamples(),</highlight></codeline>
<codeline lineno="7326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env.clock_resolution.mean.count(),</highlight></codeline>
<codeline lineno="7327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env.clock_cost.mean.count()</highlight></codeline>
<codeline lineno="7328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="7329"><highlight class="normal"></highlight></codeline>
<codeline lineno="7330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getResultCapture().benchmarkStarting(<ref refid="structinfo" kindref="compound">info</ref>);</highlight></codeline>
<codeline lineno="7331"><highlight class="normal"></highlight></codeline>
<codeline lineno="7332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>samples<sp/>=<sp/>user_code([&amp;]<sp/>{</highlight></codeline>
<codeline lineno="7333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>plan.template<sp/>run&lt;Clock&gt;(*cfg,<sp/>env);</highlight></codeline>
<codeline lineno="7334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="7335"><highlight class="normal"></highlight></codeline>
<codeline lineno="7336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>analysis<sp/>=<sp/>Detail::analyse(*cfg,<sp/>env,<sp/>samples.begin(),<sp/>samples.end());</highlight></codeline>
<codeline lineno="7337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BenchmarkStats&lt;FloatDuration&lt;Clock&gt;&gt;<sp/>stats{<sp/><ref refid="structinfo" kindref="compound">info</ref>,<sp/>analysis.samples,<sp/>analysis.mean,<sp/>analysis.standard_deviation,<sp/>analysis.outliers,<sp/>analysis.outlier_variance<sp/>};</highlight></codeline>
<codeline lineno="7338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getResultCapture().benchmarkEnded(stats);</highlight></codeline>
<codeline lineno="7339"><highlight class="normal"></highlight></codeline>
<codeline lineno="7340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>CATCH_CATCH_ALL{</highlight></codeline>
<codeline lineno="7341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(translateActiveException()<sp/>!=<sp/>Detail::benchmarkErrorMsg)<sp/></highlight><highlight class="comment">//<sp/>benchmark<sp/>errors<sp/>have<sp/>been<sp/>reported,<sp/>otherwise<sp/>rethrow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::rethrow_exception(std::current_exception());</highlight></codeline>
<codeline lineno="7343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7345"><highlight class="normal"></highlight></codeline>
<codeline lineno="7346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sets<sp/>lambda<sp/>to<sp/>be<sp/>used<sp/>in<sp/>fun<sp/>*and*<sp/>executes<sp/>benchmark!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Fun,</highlight></codeline>
<codeline lineno="7348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;!Detail::is_related&lt;Fun,<sp/>Benchmark&gt;::value,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;::type<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="7349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Benchmark<sp/>&amp;<sp/>operator=(Fun<sp/>func)<sp/>{</highlight></codeline>
<codeline lineno="7350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fun<sp/>=<sp/>Detail::BenchmarkFunction(func);</highlight></codeline>
<codeline lineno="7351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>run();</highlight></codeline>
<codeline lineno="7352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7354"><highlight class="normal"></highlight></codeline>
<codeline lineno="7355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()<sp/>{</highlight></codeline>
<codeline lineno="7356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7358"><highlight class="normal"></highlight></codeline>
<codeline lineno="7359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Detail::BenchmarkFunction<sp/>fun;</highlight></codeline>
<codeline lineno="7361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name;</highlight></codeline>
<codeline lineno="7362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="7363"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7364"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7365"><highlight class="normal"></highlight></codeline>
<codeline lineno="7366"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_GET_1_ARG(arg1,<sp/>arg2,<sp/>...)<sp/>arg1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7367"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_GET_2_ARG(arg1,<sp/>arg2,<sp/>...)<sp/>arg2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7368"><highlight class="normal"></highlight></codeline>
<codeline lineno="7369"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_BENCHMARK(BenchmarkName,<sp/>name,<sp/>benchmarkIndex)\</highlight></codeline>
<codeline lineno="7370"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if(<sp/>Catch::Benchmark::Benchmark<sp/>BenchmarkName{name}<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="7371"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BenchmarkName<sp/>=<sp/>[&amp;](int<sp/>benchmarkIndex)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7372"><highlight class="normal"></highlight></codeline>
<codeline lineno="7373"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERNAL_CATCH_BENCHMARK_ADVANCED(BenchmarkName,<sp/>name)\</highlight></codeline>
<codeline lineno="7374"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if(<sp/>Catch::Benchmark::Benchmark<sp/>BenchmarkName{name}<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="7375"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BenchmarkName<sp/>=<sp/>[&amp;]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7376"><highlight class="normal"></highlight></codeline>
<codeline lineno="7377"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_benchmark.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7378"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_constructor.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7379"><highlight class="normal"></highlight></codeline>
<codeline lineno="7380"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constructor<sp/>and<sp/>destructor<sp/>helpers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7381"><highlight class="normal"></highlight></codeline>
<codeline lineno="7382"><highlight class="normal"></highlight></codeline>
<codeline lineno="7383"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7384"><highlight class="normal"></highlight></codeline>
<codeline lineno="7385"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="7386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Benchmark<sp/>{</highlight></codeline>
<codeline lineno="7387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Detail<sp/>{</highlight></codeline>
<codeline lineno="7388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Destruct&gt;</highlight></codeline>
<codeline lineno="7389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ObjectStorage</highlight></codeline>
<codeline lineno="7390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TStorage<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::aligned_storage&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T),<sp/>std::alignment_of&lt;T&gt;::value&gt;::type;</highlight></codeline>
<codeline lineno="7392"><highlight class="normal"></highlight></codeline>
<codeline lineno="7393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ObjectStorage()<sp/>:<sp/>data()<sp/>{}</highlight></codeline>
<codeline lineno="7394"><highlight class="normal"></highlight></codeline>
<codeline lineno="7395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ObjectStorage(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ObjectStorage&amp;<sp/>other)</highlight></codeline>
<codeline lineno="7396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(&amp;data)<sp/>T(other.stored_object());</highlight></codeline>
<codeline lineno="7398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7399"><highlight class="normal"></highlight></codeline>
<codeline lineno="7400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ObjectStorage(ObjectStorage&amp;&amp;<sp/>other)</highlight></codeline>
<codeline lineno="7401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(&amp;data)<sp/>T(std::move(other.stored_object()));</highlight></codeline>
<codeline lineno="7403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7404"><highlight class="normal"></highlight></codeline>
<codeline lineno="7405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~ObjectStorage()<sp/>{<sp/>destruct_on_exit&lt;T&gt;();<sp/>}</highlight></codeline>
<codeline lineno="7406"><highlight class="normal"></highlight></codeline>
<codeline lineno="7407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="7408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>construct(Args&amp;&amp;...<sp/>args)</highlight></codeline>
<codeline lineno="7409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(&amp;data)<sp/>T(std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="7411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7412"><highlight class="normal"></highlight></codeline>
<codeline lineno="7413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>AllowManualDestruction<sp/>=<sp/>!Destruct&gt;</highlight></codeline>
<codeline lineno="7414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;AllowManualDestruction&gt;::type<sp/>destruct()</highlight></codeline>
<codeline lineno="7415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stored_object().~T();</highlight></codeline>
<codeline lineno="7417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7418"><highlight class="normal"></highlight></codeline>
<codeline lineno="7419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>is<sp/>a<sp/>constructor<sp/>benchmark,<sp/>destruct<sp/>the<sp/>underlying<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="7422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>destruct_on_exit(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;Destruct,<sp/>U&gt;::type*<sp/>=<sp/>0)<sp/>{<sp/>destruct&lt;true&gt;();<sp/>}</highlight></codeline>
<codeline lineno="7423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>don&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="7425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>destruct_on_exit(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;!Destruct,<sp/>U&gt;::type*<sp/>=<sp/>0)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="7426"><highlight class="normal"></highlight></codeline>
<codeline lineno="7427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T&amp;<sp/>stored_object()<sp/>{</highlight></codeline>
<codeline lineno="7428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;data));</highlight></codeline>
<codeline lineno="7429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7430"><highlight class="normal"></highlight></codeline>
<codeline lineno="7431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>stored_object()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;data));</highlight></codeline>
<codeline lineno="7433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7434"><highlight class="normal"></highlight></codeline>
<codeline lineno="7435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TStorage<sp/>data;</highlight></codeline>
<codeline lineno="7436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="7437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7438"><highlight class="normal"></highlight></codeline>
<codeline lineno="7439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="7440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>storage_for<sp/>=<sp/>Detail::ObjectStorage&lt;T,<sp/>true&gt;;</highlight></codeline>
<codeline lineno="7441"><highlight class="normal"></highlight></codeline>
<codeline lineno="7442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="7443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>destructable_object<sp/>=<sp/>Detail::ObjectStorage&lt;T,<sp/>false&gt;;</highlight></codeline>
<codeline lineno="7444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7446"><highlight class="normal"></highlight></codeline>
<codeline lineno="7447"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_constructor.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7448"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_benchmarking_all.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7449"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7450"><highlight class="normal"></highlight></codeline>
<codeline lineno="7451"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>!<sp/>CATCH_CONFIG_IMPL_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7452"><highlight class="normal"></highlight></codeline>
<codeline lineno="7453"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CATCH_IMPL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7454"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_impl.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7455"><highlight class="normal"></highlight></codeline>
<codeline lineno="7456"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7457"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7458"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wweak-vtables&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7459"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7460"><highlight class="normal"></highlight></codeline>
<codeline lineno="7461"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Keep<sp/>these<sp/>here<sp/>for<sp/>external<sp/>reporters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7462"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_test_case_tracker.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7463"><highlight class="normal"></highlight></codeline>
<codeline lineno="7464"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7465"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7466"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7467"><highlight class="normal"></highlight></codeline>
<codeline lineno="7468"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="7469"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">TestCaseTracking<sp/>{</highlight></codeline>
<codeline lineno="7470"><highlight class="normal"></highlight></codeline>
<codeline lineno="7471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">NameAndLocation<sp/>{</highlight></codeline>
<codeline lineno="7472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name;</highlight></codeline>
<codeline lineno="7473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SourceLineInfo<sp/>location;</highlight></codeline>
<codeline lineno="7474"><highlight class="normal"></highlight></codeline>
<codeline lineno="7475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NameAndLocation(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_name,<sp/>SourceLineInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_location<sp/>);</highlight></codeline>
<codeline lineno="7476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(NameAndLocation<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/>NameAndLocation<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="7477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.name<sp/>==<sp/>rhs.name</highlight></codeline>
<codeline lineno="7478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>lhs.location<sp/>==<sp/>rhs.location;</highlight></codeline>
<codeline lineno="7479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7480"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="7481"><highlight class="normal"></highlight></codeline>
<codeline lineno="7482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ITracker;</highlight></codeline>
<codeline lineno="7483"><highlight class="normal"></highlight></codeline>
<codeline lineno="7484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ITrackerPtr<sp/>=<sp/>std::shared_ptr&lt;ITracker&gt;;</highlight></codeline>
<codeline lineno="7485"><highlight class="normal"></highlight></codeline>
<codeline lineno="7486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/><sp/></highlight><highlight class="normal">ITracker<sp/>{</highlight></codeline>
<codeline lineno="7487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NameAndLocation<sp/>m_nameAndLocation;</highlight></codeline>
<codeline lineno="7488"><highlight class="normal"></highlight></codeline>
<codeline lineno="7489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ITracker(NameAndLocation<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>nameAndLoc)<sp/>:</highlight></codeline>
<codeline lineno="7491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_nameAndLocation(nameAndLoc)</highlight></codeline>
<codeline lineno="7492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="7493"><highlight class="normal"></highlight></codeline>
<codeline lineno="7494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>static<sp/>queries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NameAndLocation<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>nameAndLocation()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_nameAndLocation;</highlight></codeline>
<codeline lineno="7497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7498"><highlight class="normal"></highlight></codeline>
<codeline lineno="7499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~ITracker();</highlight></codeline>
<codeline lineno="7500"><highlight class="normal"></highlight></codeline>
<codeline lineno="7501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dynamic<sp/>queries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isComplete()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Successfully<sp/>completed<sp/>or<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isSuccessfullyCompleted()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isOpen()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Started<sp/>but<sp/>not<sp/>complete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasChildren()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasStarted()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7507"><highlight class="normal"></highlight></codeline>
<codeline lineno="7508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>ITracker&amp;<sp/>parent()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7509"><highlight class="normal"></highlight></codeline>
<codeline lineno="7510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>actions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>close()<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Successfully<sp/>complete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fail()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>markAsNeedingAnotherRun()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7514"><highlight class="normal"></highlight></codeline>
<codeline lineno="7515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addChild(<sp/>ITrackerPtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>child<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>ITrackerPtr<sp/>findChild(<sp/>NameAndLocation<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>nameAndLocation<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>openChild()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7518"><highlight class="normal"></highlight></codeline>
<codeline lineno="7519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Debug/<sp/>checking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isSectionTracker()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isGeneratorTracker()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="7522"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="7523"><highlight class="normal"></highlight></codeline>
<codeline lineno="7524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TrackerContext<sp/>{</highlight></codeline>
<codeline lineno="7525"><highlight class="normal"></highlight></codeline>
<codeline lineno="7526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>RunState<sp/>{</highlight></codeline>
<codeline lineno="7527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NotStarted,</highlight></codeline>
<codeline lineno="7528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Executing,</highlight></codeline>
<codeline lineno="7529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CompletedCycle</highlight></codeline>
<codeline lineno="7530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="7531"><highlight class="normal"></highlight></codeline>
<codeline lineno="7532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ITrackerPtr<sp/>m_rootTracker;</highlight></codeline>
<codeline lineno="7533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ITracker*<sp/>m_currentTracker<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RunState<sp/>m_runState<sp/>=<sp/>NotStarted;</highlight></codeline>
<codeline lineno="7535"><highlight class="normal"></highlight></codeline>
<codeline lineno="7536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7537"><highlight class="normal"></highlight></codeline>
<codeline lineno="7538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ITracker&amp;<sp/>startRun();</highlight></codeline>
<codeline lineno="7539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>endRun();</highlight></codeline>
<codeline lineno="7540"><highlight class="normal"></highlight></codeline>
<codeline lineno="7541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>startCycle();</highlight></codeline>
<codeline lineno="7542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>completeCycle();</highlight></codeline>
<codeline lineno="7543"><highlight class="normal"></highlight></codeline>
<codeline lineno="7544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>completedCycle()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ITracker&amp;<sp/>currentTracker();</highlight></codeline>
<codeline lineno="7546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setCurrentTracker(<sp/>ITracker*<sp/>tracker<sp/>);</highlight></codeline>
<codeline lineno="7547"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="7548"><highlight class="normal"></highlight></codeline>
<codeline lineno="7549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TrackerBase<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ITracker<sp/>{</highlight></codeline>
<codeline lineno="7550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>CycleState<sp/>{</highlight></codeline>
<codeline lineno="7552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NotStarted,</highlight></codeline>
<codeline lineno="7553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Executing,</highlight></codeline>
<codeline lineno="7554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExecutingChildren,</highlight></codeline>
<codeline lineno="7555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NeedsAnotherRun,</highlight></codeline>
<codeline lineno="7556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CompletedSuccessfully,</highlight></codeline>
<codeline lineno="7557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Failed</highlight></codeline>
<codeline lineno="7558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="7559"><highlight class="normal"></highlight></codeline>
<codeline lineno="7560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Children<sp/>=<sp/>std::vector&lt;ITrackerPtr&gt;;</highlight></codeline>
<codeline lineno="7561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TrackerContext&amp;<sp/>m_ctx;</highlight></codeline>
<codeline lineno="7562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ITracker*<sp/>m_parent;</highlight></codeline>
<codeline lineno="7563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Children<sp/>m_children;</highlight></codeline>
<codeline lineno="7564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CycleState<sp/>m_runState<sp/>=<sp/>NotStarted;</highlight></codeline>
<codeline lineno="7565"><highlight class="normal"></highlight></codeline>
<codeline lineno="7566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TrackerBase(<sp/>NameAndLocation<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>nameAndLocation,<sp/>TrackerContext&amp;<sp/>ctx,<sp/>ITracker*<sp/>parent<sp/>);</highlight></codeline>
<codeline lineno="7568"><highlight class="normal"></highlight></codeline>
<codeline lineno="7569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isComplete()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isSuccessfullyCompleted()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isOpen()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasChildren()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasStarted()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_runState<sp/>!=<sp/>NotStarted;</highlight></codeline>
<codeline lineno="7575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7576"><highlight class="normal"></highlight></codeline>
<codeline lineno="7577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addChild(<sp/>ITrackerPtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>child<sp/>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7578"><highlight class="normal"></highlight></codeline>
<codeline lineno="7579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ITrackerPtr<sp/>findChild(<sp/>NameAndLocation<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>nameAndLocation<sp/>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ITracker&amp;<sp/>parent()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7581"><highlight class="normal"></highlight></codeline>
<codeline lineno="7582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>openChild()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7583"><highlight class="normal"></highlight></codeline>
<codeline lineno="7584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isSectionTracker()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isGeneratorTracker()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7586"><highlight class="normal"></highlight></codeline>
<codeline lineno="7587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>open();</highlight></codeline>
<codeline lineno="7588"><highlight class="normal"></highlight></codeline>
<codeline lineno="7589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>close()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fail()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>markAsNeedingAnotherRun()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7592"><highlight class="normal"></highlight></codeline>
<codeline lineno="7593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>moveToParent();</highlight></codeline>
<codeline lineno="7595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>moveToThis();</highlight></codeline>
<codeline lineno="7596"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="7597"><highlight class="normal"></highlight></codeline>
<codeline lineno="7598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SectionTracker<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>TrackerBase<sp/>{</highlight></codeline>
<codeline lineno="7599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>m_filters;</highlight></codeline>
<codeline lineno="7600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>m_trimmed_name;</highlight></codeline>
<codeline lineno="7601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="7602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SectionTracker(<sp/>NameAndLocation<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>nameAndLocation,<sp/>TrackerContext&amp;<sp/>ctx,<sp/>ITracker*<sp/>parent<sp/>);</highlight></codeline>
<codeline lineno="7603"><highlight class="normal"></highlight></codeline>
<codeline lineno="7604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isSectionTracker()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7605"><highlight class="normal"></highlight></codeline>
<codeline lineno="7606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isComplete()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7607"><highlight class="normal"></highlight></codeline>
<codeline lineno="7608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>SectionTracker&amp;<sp/>acquire(<sp/>TrackerContext&amp;<sp/>ctx,<sp/>NameAndLocation<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>nameAndLocation<sp/>);</highlight></codeline>
<codeline lineno="7609"><highlight class="normal"></highlight></codeline>
<codeline lineno="7610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>tryOpen();</highlight></codeline>
<codeline lineno="7611"><highlight class="normal"></highlight></codeline>
<codeline lineno="7612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addInitialFilters(<sp/>std::vector&lt;std::string&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>filters<sp/>);</highlight></codeline>
<codeline lineno="7613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addNextFilters(<sp/>std::vector&lt;std::string&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>filters<sp/>);</highlight></codeline>
<codeline lineno="7615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>getFilters()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>trimmedName()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7618"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="7619"><highlight class="normal"></highlight></codeline>
<codeline lineno="7620"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>TestCaseTracking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7621"><highlight class="normal"></highlight></codeline>
<codeline lineno="7622"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TestCaseTracking::ITracker;</highlight></codeline>
<codeline lineno="7623"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TestCaseTracking::TrackerContext;</highlight></codeline>
<codeline lineno="7624"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TestCaseTracking::SectionTracker;</highlight></codeline>
<codeline lineno="7625"><highlight class="normal"></highlight></codeline>
<codeline lineno="7626"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7627"><highlight class="normal"></highlight></codeline>
<codeline lineno="7628"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_test_case_tracker.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7629"><highlight class="normal"></highlight></codeline>
<codeline lineno="7630"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_leak_detector.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7631"><highlight class="normal"></highlight></codeline>
<codeline lineno="7632"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="7633"><highlight class="normal"></highlight></codeline>
<codeline lineno="7634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">LeakDetector<sp/>{</highlight></codeline>
<codeline lineno="7635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LeakDetector();</highlight></codeline>
<codeline lineno="7636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~LeakDetector();</highlight></codeline>
<codeline lineno="7637"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="7638"><highlight class="normal"></highlight></codeline>
<codeline lineno="7639"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7640"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_leak_detector.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7641"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Cpp<sp/>files<sp/>will<sp/>be<sp/>included<sp/>in<sp/>the<sp/>single-header<sp/>file<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7642"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_stats.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7643"><highlight class="normal"></highlight></codeline>
<codeline lineno="7644"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Statistical<sp/>analysis<sp/>tools</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7645"><highlight class="normal"></highlight></codeline>
<codeline lineno="7646"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_ENABLE_BENCHMARKING)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7647"><highlight class="normal"></highlight></codeline>
<codeline lineno="7648"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7649"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;random&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7650"><highlight class="normal"></highlight></codeline>
<codeline lineno="7651"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_USE_ASYNC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7652"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;future&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7653"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7654"><highlight class="normal"></highlight></codeline>
<codeline lineno="7655"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>erf_inv(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="7657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Code<sp/>accompanying<sp/>the<sp/>article<sp/>&quot;Approximating<sp/>the<sp/>erfinv<sp/>function&quot;<sp/>in<sp/>GPU<sp/>Computing<sp/>Gems,<sp/>Volume<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>w,<sp/>p;</highlight></codeline>
<codeline lineno="7659"><highlight class="normal"></highlight></codeline>
<codeline lineno="7660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>-<ref refid="group__core__func__exponential_1gad26901b9f2fdd30612867a8dcfa73fbc" kindref="member">log</ref>((1.0<sp/>-<sp/>x)<sp/>*<sp/>(1.0<sp/>+<sp/>x));</highlight></codeline>
<codeline lineno="7661"><highlight class="normal"></highlight></codeline>
<codeline lineno="7662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(w<sp/>&lt;<sp/>6.250000)<sp/>{</highlight></codeline>
<codeline lineno="7663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>w<sp/>-<sp/>3.125000;</highlight></codeline>
<codeline lineno="7664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>-3.6444120640178196996<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-21;</highlight></codeline>
<codeline lineno="7665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>-1.685059138182016589<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-19<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>1.2858480715256400167e-18<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>1.115787767802518096e-17<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>-1.333171662854620906<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-16<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>2.0972767875968561637e-17<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>6.6376381343583238325e-15<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>-4.0545662729752068639<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-14<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>-8.1519341976054721522<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-14<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>2.6335093153082322977e-12<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>-1.2975133253453532498<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-11<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>-5.4154120542946279317<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-11<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>1.051212273321532285e-09<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>-4.1126339803469836976<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-09<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>-2.9070369957882005086<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-08<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>4.2347877827932403518e-07<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>-1.3654692000834678645<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-06<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>-1.3882523362786468719<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-05<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>0.0001867342080340571352<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>-0.00074070253416626697512<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>-0.0060336708714301490533<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>0.24015818242558961693<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>1.6536545626831027356<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(w<sp/>&lt;<sp/>16.000000)<sp/>{</highlight></codeline>
<codeline lineno="7688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/><ref refid="group__core__func__exponential_1ga1f904e09827e939a56e4158f45ca8ede" kindref="member">sqrt</ref>(w)<sp/>-<sp/>3.250000;</highlight></codeline>
<codeline lineno="7689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>2.2137376921775787049e-09;</highlight></codeline>
<codeline lineno="7690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>9.0756561938885390979e-08<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>-2.7517406297064545428<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-07<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>1.8239629214389227755e-08<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>1.5027403968909827627e-06<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>-4.013867526981545969<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-06<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>2.9234449089955446044e-06<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>1.2475304481671778723e-05<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>-4.7318229009055733981<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-05<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>6.8284851459573175448e-05<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>2.4031110387097893999e-05<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>-0.0003550375203628474796<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>0.00095328937973738049703<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>-0.0016882755560235047313<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>0.0024914420961078508066<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>-0.0037512085075692412107<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>0.005370914553590063617<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>1.0052589676941592334<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>3.0838856104922207635<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/><ref refid="group__core__func__exponential_1ga1f904e09827e939a56e4158f45ca8ede" kindref="member">sqrt</ref>(w)<sp/>-<sp/>5.000000;</highlight></codeline>
<codeline lineno="7710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>-2.7109920616438573243<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-11;</highlight></codeline>
<codeline lineno="7711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>-2.5556418169965252055<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-10<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>1.5076572693500548083e-09<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>-3.7894654401267369937<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-09<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>7.6157012080783393804e-09<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>-1.4960026627149240478<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-08<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>2.9147953450901080826e-08<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>-6.7711997758452339498<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-08<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>2.2900482228026654717e-07<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>-9.9298272942317002539<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-07<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>4.5260625972231537039e-06<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>-1.9681778105531670567<ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>-05<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>7.5995277030017761139e-05<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>-0.00021503011930044477347<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>-0.00013871931833623122026<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>1.0103004648645343977<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>4.8499064014085844221<sp/>+<sp/>p<sp/>*<sp/>w;</highlight></codeline>
<codeline lineno="7727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p<sp/>*<sp/>x;</highlight></codeline>
<codeline lineno="7729"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7730"><highlight class="normal"></highlight></codeline>
<codeline lineno="7731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>standard_deviation(std::vector&lt;double&gt;::iterator<sp/>first,<sp/>std::vector&lt;double&gt;::iterator<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="7732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>Catch::Benchmark::Detail::mean(first,<sp/>last);</highlight></codeline>
<codeline lineno="7733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>variance<sp/>=<sp/>std::accumulate(first,<sp/>last,<sp/>0.,<sp/>[m](</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="7734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>diff<sp/>=<sp/>b<sp/>-<sp/>m;</highlight></codeline>
<codeline lineno="7735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>+<sp/>diff<sp/>*<sp/>diff;</highlight></codeline>
<codeline lineno="7736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})<sp/>/<sp/>(last<sp/>-<sp/>first);</highlight></codeline>
<codeline lineno="7737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__core__func__exponential_1ga1f904e09827e939a56e4158f45ca8ede" kindref="member">std::sqrt</ref>(variance);</highlight></codeline>
<codeline lineno="7738"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7739"><highlight class="normal"></highlight></codeline>
<codeline lineno="7740"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7741"><highlight class="normal"></highlight></codeline>
<codeline lineno="7742"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="7743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Benchmark<sp/>{</highlight></codeline>
<codeline lineno="7744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Detail<sp/>{</highlight></codeline>
<codeline lineno="7745"><highlight class="normal"></highlight></codeline>
<codeline lineno="7746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>weighted_average_quantile(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>q,<sp/>std::vector&lt;double&gt;::iterator<sp/>first,<sp/>std::vector&lt;double&gt;::iterator<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="7747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>last<sp/>-<sp/>first;</highlight></codeline>
<codeline lineno="7748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>(count<sp/>-<sp/>1)<sp/>*<sp/>k<sp/>/<sp/>static_cast&lt;double&gt;(q);</highlight></codeline>
<codeline lineno="7749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(idx);</highlight></codeline>
<codeline lineno="7750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>g<sp/>=<sp/>idx<sp/>-<sp/>j;</highlight></codeline>
<codeline lineno="7751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::nth_element(first,<sp/>first<sp/>+<sp/>j,<sp/>last);</highlight></codeline>
<codeline lineno="7752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>xj<sp/>=<sp/>first[j];</highlight></codeline>
<codeline lineno="7753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xj;</highlight></codeline>
<codeline lineno="7754"><highlight class="normal"></highlight></codeline>
<codeline lineno="7755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>xj1<sp/>=<sp/>*std::min_element(first<sp/>+<sp/>(j<sp/>+<sp/>1),<sp/>last);</highlight></codeline>
<codeline lineno="7756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xj<sp/>+<sp/>g<sp/>*<sp/>(xj1<sp/>-<sp/>xj);</highlight></codeline>
<codeline lineno="7757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7758"><highlight class="normal"></highlight></codeline>
<codeline lineno="7759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>erfc_inv(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="7760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>erf_inv(1.0<sp/>-<sp/>x);</highlight></codeline>
<codeline lineno="7761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7762"><highlight class="normal"></highlight></codeline>
<codeline lineno="7763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>normal_quantile(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="7764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ROOT_TWO<sp/>=<sp/><ref refid="group__core__func__exponential_1ga1f904e09827e939a56e4158f45ca8ede" kindref="member">std::sqrt</ref>(2.0);</highlight></codeline>
<codeline lineno="7765"><highlight class="normal"></highlight></codeline>
<codeline lineno="7766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="7767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(p<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>p<sp/>&lt;=<sp/>1);</highlight></codeline>
<codeline lineno="7768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>&lt;<sp/>0<sp/>||<sp/>p<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="7769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="7770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7771"><highlight class="normal"></highlight></codeline>
<codeline lineno="7772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>-erfc_inv(2.0<sp/>*<sp/>p);</highlight></codeline>
<codeline lineno="7773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>result<sp/>*=<sp/>normal<sp/>distribution<sp/>standard<sp/>deviation<sp/>(1.0)<sp/>*<sp/>sqrt(2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>*=<sp/></highlight><highlight class="comment">/*sd<sp/>*<sp/>*/</highlight><highlight class="normal"><sp/>ROOT_TWO;</highlight></codeline>
<codeline lineno="7775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>result<sp/>+=<sp/>normal<sp/>disttribution<sp/>mean<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="7777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7778"><highlight class="normal"></highlight></codeline>
<codeline lineno="7779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>outlier_variance(Estimate&lt;double&gt;<sp/>mean,<sp/>Estimate&lt;double&gt;<sp/>stddev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="7780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sb<sp/>=<sp/>stddev.point;</highlight></codeline>
<codeline lineno="7781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mn<sp/>=<sp/>mean.point<sp/>/<sp/>n;</highlight></codeline>
<codeline lineno="7782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mg_min<sp/>=<sp/>mn<sp/>/<sp/>2.;</highlight></codeline>
<codeline lineno="7783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sg<sp/>=<sp/>(<ref refid="group__core__func__common_1ga2c2bde1cec025b7ddff83c74a1113719" kindref="member">std::min</ref>)(mg_min<sp/>/<sp/>4.,<sp/>sb<sp/>/<sp/><ref refid="group__core__func__exponential_1ga1f904e09827e939a56e4158f45ca8ede" kindref="member">std::sqrt</ref>(n));</highlight></codeline>
<codeline lineno="7784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sg2<sp/>=<sp/>sg<sp/>*<sp/>sg;</highlight></codeline>
<codeline lineno="7785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sb2<sp/>=<sp/>sb<sp/>*<sp/>sb;</highlight></codeline>
<codeline lineno="7786"><highlight class="normal"></highlight></codeline>
<codeline lineno="7787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c_max<sp/>=<sp/>[n,<sp/>mn,<sp/>sb2,<sp/>sg2](</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="7788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>mn<sp/>-<sp/>x;</highlight></codeline>
<codeline lineno="7789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>k<sp/>*<sp/>k;</highlight></codeline>
<codeline lineno="7790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nd<sp/>=<sp/>n<sp/>*<sp/>d;</highlight></codeline>
<codeline lineno="7791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>k0<sp/>=<sp/>-n<sp/>*<sp/>nd;</highlight></codeline>
<codeline lineno="7792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>k1<sp/>=<sp/>sb2<sp/>-<sp/>n<sp/>*<sp/>sg2<sp/>+<sp/>nd;</highlight></codeline>
<codeline lineno="7793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>det<sp/>=<sp/>k1<sp/>*<sp/>k1<sp/>-<sp/>4<sp/>*<sp/>sg2<sp/>*<sp/>k0;</highlight></codeline>
<codeline lineno="7794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(-2.<sp/>*<sp/>k0<sp/>/<sp/>(k1<sp/>+<sp/>std::sqrt(det)));</highlight></codeline>
<codeline lineno="7795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="7796"><highlight class="normal"></highlight></codeline>
<codeline lineno="7797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>var_out<sp/>=<sp/>[n,<sp/>sb2,<sp/>sg2](</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="7798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nc<sp/>=<sp/>n<sp/>-<sp/>c;</highlight></codeline>
<codeline lineno="7799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(nc<sp/>/<sp/>n)<sp/>*<sp/>(sb2<sp/>-<sp/>nc<sp/>*<sp/>sg2);</highlight></codeline>
<codeline lineno="7800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="7801"><highlight class="normal"></highlight></codeline>
<codeline lineno="7802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__core__func__common_1ga2c2bde1cec025b7ddff83c74a1113719" kindref="member">std::min</ref>)(var_out(1),<sp/>var_out((<ref refid="group__core__func__common_1ga2c2bde1cec025b7ddff83c74a1113719" kindref="member">std::min</ref>)(c_max(0.),<sp/>c_max(mg_min))))<sp/>/<sp/>sb2;</highlight></codeline>
<codeline lineno="7803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7804"><highlight class="normal"></highlight></codeline>
<codeline lineno="7805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bootstrap_analysis<sp/>analyse_samples(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>confidence_level,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_resamples,<sp/>std::vector&lt;double&gt;::iterator<sp/>first,<sp/>std::vector&lt;double&gt;::iterator<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="7806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_START_WARNINGS_SUPPRESSION</highlight></codeline>
<codeline lineno="7807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS</highlight></codeline>
<codeline lineno="7808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::random_device<sp/>entropy;</highlight></codeline>
<codeline lineno="7809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION</highlight></codeline>
<codeline lineno="7810"><highlight class="normal"></highlight></codeline>
<codeline lineno="7811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(last<sp/>-<sp/>first);<sp/></highlight><highlight class="comment">//<sp/>seriously,<sp/>one<sp/>can&apos;t<sp/>use<sp/>integral<sp/>types<sp/>without<sp/>hell<sp/>in<sp/>C++</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7812"><highlight class="normal"></highlight></codeline>
<codeline lineno="7813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mean<sp/>=<sp/>&amp;Detail::mean&lt;std::vector&lt;double&gt;::iterator&gt;;</highlight></codeline>
<codeline lineno="7814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stddev<sp/>=<sp/>&amp;standard_deviation;</highlight></codeline>
<codeline lineno="7815"><highlight class="normal"></highlight></codeline>
<codeline lineno="7816"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_USE_ASYNC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>Estimate<sp/>=<sp/>[=](double(*f)(std::vector&lt;double&gt;::iterator,<sp/>std::vector&lt;double&gt;::iterator))<sp/>{</highlight></codeline>
<codeline lineno="7818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>seed<sp/>=<sp/>entropy();</highlight></codeline>
<codeline lineno="7819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::async(std::launch::async,<sp/>[=]<sp/>{</highlight></codeline>
<codeline lineno="7820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::mt19937<sp/>rng(seed);</highlight></codeline>
<codeline lineno="7821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>resampled<sp/>=<sp/>resample(rng,<sp/>n_resamples,<sp/>first,<sp/>last,<sp/>f);</highlight></codeline>
<codeline lineno="7822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bootstrap(confidence_level,<sp/>first,<sp/>last,<sp/>resampled,<sp/>f);</highlight></codeline>
<codeline lineno="7823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="7824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="7825"><highlight class="normal"></highlight></codeline>
<codeline lineno="7826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mean_future<sp/>=<sp/>Estimate(mean);</highlight></codeline>
<codeline lineno="7827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stddev_future<sp/>=<sp/>Estimate(stddev);</highlight></codeline>
<codeline lineno="7828"><highlight class="normal"></highlight></codeline>
<codeline lineno="7829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mean_estimate<sp/>=<sp/>mean_future.get();</highlight></codeline>
<codeline lineno="7830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stddev_estimate<sp/>=<sp/>stddev_future.get();</highlight></codeline>
<codeline lineno="7831"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>Estimate<sp/>=<sp/>[=](double(*f)(std::vector&lt;double&gt;::iterator,<sp/>std::vector&lt;double&gt;::iterator))<sp/>{</highlight></codeline>
<codeline lineno="7833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>seed<sp/>=<sp/>entropy();</highlight></codeline>
<codeline lineno="7834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::mt19937<sp/>rng(seed);</highlight></codeline>
<codeline lineno="7835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>resampled<sp/>=<sp/>resample(rng,<sp/>n_resamples,<sp/>first,<sp/>last,<sp/>f);</highlight></codeline>
<codeline lineno="7836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bootstrap(confidence_level,<sp/>first,<sp/>last,<sp/>resampled,<sp/>f);</highlight></codeline>
<codeline lineno="7837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="7838"><highlight class="normal"></highlight></codeline>
<codeline lineno="7839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mean_estimate<sp/>=<sp/>Estimate(mean);</highlight></codeline>
<codeline lineno="7840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>stddev_estimate<sp/>=<sp/>Estimate(stddev);</highlight></codeline>
<codeline lineno="7841"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_USE_ASYNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7842"><highlight class="normal"></highlight></codeline>
<codeline lineno="7843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>outlier_variance<sp/>=<sp/>Detail::outlier_variance(mean_estimate,<sp/>stddev_estimate,<sp/>n);</highlight></codeline>
<codeline lineno="7844"><highlight class="normal"></highlight></codeline>
<codeline lineno="7845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>mean_estimate,<sp/>stddev_estimate,<sp/>outlier_variance<sp/>};</highlight></codeline>
<codeline lineno="7846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7848"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Benchmark</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7849"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7850"><highlight class="normal"></highlight></codeline>
<codeline lineno="7851"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_ENABLE_BENCHMARKING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7852"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_stats.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7853"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_approx.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7854"><highlight class="normal"></highlight></codeline>
<codeline lineno="7855"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7856"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7857"><highlight class="normal"></highlight></codeline>
<codeline lineno="7858"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7859"><highlight class="normal"></highlight></codeline>
<codeline lineno="7860"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Performs<sp/>equivalent<sp/>check<sp/>of<sp/>std::fabs(lhs<sp/>-<sp/>rhs)<sp/>&lt;=<sp/>margin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7861"><highlight class="normal"></highlight><highlight class="comment">//<sp/>But<sp/>without<sp/>the<sp/>subtraction<sp/>to<sp/>allow<sp/>for<sp/>INFINITY<sp/>in<sp/>comparison</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7862"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>marginComparison(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lhs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>margin)<sp/>{</highlight></codeline>
<codeline lineno="7863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(lhs<sp/>+<sp/>margin<sp/>&gt;=<sp/>rhs)<sp/>&amp;&amp;<sp/>(rhs<sp/>+<sp/>margin<sp/>&gt;=<sp/>lhs);</highlight></codeline>
<codeline lineno="7864"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7865"><highlight class="normal"></highlight></codeline>
<codeline lineno="7866"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7867"><highlight class="normal"></highlight></codeline>
<codeline lineno="7868"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="7869"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Detail<sp/>{</highlight></codeline>
<codeline lineno="7870"><highlight class="normal"></highlight></codeline>
<codeline lineno="7871"><highlight class="normal"><sp/><sp/><sp/><sp/>Approx::Approx<sp/>(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>)</highlight></codeline>
<codeline lineno="7872"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>m_epsilon(<sp/>std::numeric_limits&lt;float&gt;::<ref refid="group__gtc__constants_1ga2a1e57fc5592b69cfae84174cbfc9429" kindref="member">epsilon</ref>()*100<sp/>),</highlight></codeline>
<codeline lineno="7873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_margin(<sp/>0.0<sp/>),</highlight></codeline>
<codeline lineno="7874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_scale(<sp/>0.0<sp/>),</highlight></codeline>
<codeline lineno="7875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_value(<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>)</highlight></codeline>
<codeline lineno="7876"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="7877"><highlight class="normal"></highlight></codeline>
<codeline lineno="7878"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref><sp/>Approx::custom()<sp/>{</highlight></codeline>
<codeline lineno="7879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref>(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="7880"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7881"><highlight class="normal"></highlight></codeline>
<codeline lineno="7882"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Approx</ref><sp/>Approx::operator-()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>temp(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp.m_value<sp/>=<sp/>-temp.m_value;</highlight></codeline>
<codeline lineno="7885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>temp;</highlight></codeline>
<codeline lineno="7886"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7887"><highlight class="normal"></highlight></codeline>
<codeline lineno="7888"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>Approx::toString()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReusableStringStream<sp/>rss;</highlight></codeline>
<codeline lineno="7890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Approx(<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>::Catch::Detail::stringify(<sp/>m_value<sp/>)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="7891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rss.str();</highlight></codeline>
<codeline lineno="7892"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7893"><highlight class="normal"></highlight></codeline>
<codeline lineno="7894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Approx::equalityComparisonImpl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="7895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>try<sp/>with<sp/>fixed<sp/>margin,<sp/>then<sp/>compute<sp/>margin<sp/>based<sp/>on<sp/>epsilon,<sp/>scale<sp/>and<sp/>Approx&apos;s<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Thanks<sp/>to<sp/>Richard<sp/>Harris<sp/>for<sp/>his<sp/>help<sp/>refining<sp/>the<sp/>scaled<sp/>margin<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>marginComparison(m_value,<sp/>other,<sp/>m_margin)</highlight></codeline>
<codeline lineno="7898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>marginComparison(m_value,<sp/>other,<sp/>m_epsilon<sp/>*<sp/>(m_scale<sp/>+<sp/>std::fabs(<ref refid="group__core__func__common_1ga6dfda49bcedffb43ffe5d85307d732fa" kindref="member">std::isinf</ref>(m_value)?<sp/>0<sp/>:<sp/>m_value)));</highlight></codeline>
<codeline lineno="7899"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7900"><highlight class="normal"></highlight></codeline>
<codeline lineno="7901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Approx::setMargin(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>newMargin)<sp/>{</highlight></codeline>
<codeline lineno="7902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_ENFORCE(newMargin<sp/>&gt;=<sp/>0,</highlight></codeline>
<codeline lineno="7903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>Approx::margin:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>newMargin<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Approx::Margin<sp/>has<sp/>to<sp/>be<sp/>non-negative.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_margin<sp/>=<sp/>newMargin;</highlight></codeline>
<codeline lineno="7906"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7907"><highlight class="normal"></highlight></codeline>
<codeline lineno="7908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Approx::setEpsilon(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>newEpsilon)<sp/>{</highlight></codeline>
<codeline lineno="7909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_ENFORCE(newEpsilon<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>newEpsilon<sp/>&lt;=<sp/>1.0,</highlight></codeline>
<codeline lineno="7910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>Approx::epsilon:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>newEpsilon<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Approx::epsilon<sp/>has<sp/>to<sp/>be<sp/>in<sp/>[0,<sp/>1]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="7912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_epsilon<sp/>=<sp/>newEpsilon;</highlight></codeline>
<codeline lineno="7913"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7914"><highlight class="normal"></highlight></codeline>
<codeline lineno="7915"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7916"><highlight class="normal"></highlight></codeline>
<codeline lineno="7917"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">literals<sp/>{</highlight></codeline>
<codeline lineno="7918"><highlight class="normal"><sp/><sp/><sp/><sp/>Detail::Approx<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>_a(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="7919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Detail::Approx(val);</highlight></codeline>
<codeline lineno="7920"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7921"><highlight class="normal"><sp/><sp/><sp/><sp/>Detail::Approx<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>_a(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="7922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Detail::Approx(val);</highlight></codeline>
<codeline lineno="7923"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="7924"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>literals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7925"><highlight class="normal"></highlight></codeline>
<codeline lineno="7926"><highlight class="normal">std::string<sp/>StringMaker&lt;Catch::Detail::Approx&gt;::convert(<ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Catch::Detail::Approx</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="7927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>.toString();</highlight></codeline>
<codeline lineno="7928"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7929"><highlight class="normal"></highlight></codeline>
<codeline lineno="7930"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7931"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_approx.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7932"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_assertionhandler.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7933"><highlight class="normal"></highlight></codeline>
<codeline lineno="7934"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_debugger.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7935"><highlight class="normal"></highlight></codeline>
<codeline lineno="7936"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="7937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isDebuggerActive();</highlight></codeline>
<codeline lineno="7938"><highlight class="normal">}</highlight></codeline>
<codeline lineno="7939"><highlight class="normal"></highlight></codeline>
<codeline lineno="7940"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CATCH_PLATFORM_MAC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7941"><highlight class="normal"></highlight></codeline>
<codeline lineno="7942"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>defined(__i386__)<sp/>||<sp/>defined(__x86_64__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7943"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>CATCH_TRAP()<sp/>__asm__(&quot;int<sp/>$3\n&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/>)<sp/></highlight><highlight class="comment">/*<sp/>NOLINT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7944"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#elif<sp/>defined(__aarch64__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7945"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>CATCH_TRAP()<sp/><sp/>__asm__(&quot;.inst<sp/>0xd4200000&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="7946"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7947"><highlight class="normal"></highlight></codeline>
<codeline lineno="7948"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(CATCH_PLATFORM_IPHONE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7949"><highlight class="normal"></highlight></codeline>
<codeline lineno="7950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>inline<sp/>assembler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7951"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>defined(__i386__)<sp/>||<sp/>defined(__x86_64__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7952"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>CATCH_TRAP()<sp/><sp/>__asm__(&quot;int<sp/>$3&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="7953"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#elif<sp/>defined(__aarch64__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7954"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>CATCH_TRAP()<sp/><sp/>__asm__(&quot;.inst<sp/>0xd4200000&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="7955"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#elif<sp/>defined(__arm__)<sp/>&amp;&amp;<sp/>!defined(__thumb__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7956"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>CATCH_TRAP()<sp/><sp/>__asm__(&quot;.inst<sp/>0xe7f001f0&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="7957"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#elif<sp/>defined(__arm__)<sp/>&amp;&amp;<sp/><sp/>defined(__thumb__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7958"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>CATCH_TRAP()<sp/><sp/>__asm__(&quot;.inst<sp/>0xde01&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="7959"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7960"><highlight class="normal"></highlight></codeline>
<codeline lineno="7961"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(CATCH_PLATFORM_LINUX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>can<sp/>use<sp/>inline<sp/>assembler,<sp/>do<sp/>it<sp/>because<sp/>this<sp/>allows<sp/>us<sp/>to<sp/>break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>directly<sp/>at<sp/>the<sp/>location<sp/>of<sp/>the<sp/>failing<sp/>check<sp/>instead<sp/>of<sp/>breaking<sp/>inside</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>raise()<sp/>called<sp/>from<sp/>it,<sp/>i.e.<sp/>one<sp/>stack<sp/>frame<sp/>below.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7965"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>defined(__GNUC__)<sp/>&amp;&amp;<sp/>(defined(__i386)<sp/>||<sp/>defined(__x86_64))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7966"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>CATCH_TRAP()<sp/>asm<sp/>volatile<sp/>(&quot;int<sp/>$3&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="comment">/*<sp/>NOLINT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7967"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else<sp/></highlight><highlight class="comment">//<sp/>Fall<sp/>back<sp/>to<sp/>the<sp/>generic<sp/>way.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7968"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7969"><highlight class="normal"></highlight></codeline>
<codeline lineno="7970"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>CATCH_TRAP()<sp/>raise(SIGTRAP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7971"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7972"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7973"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CATCH_TRAP()<sp/>__debugbreak()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7974"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__MINGW32__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>__declspec(dllimport)<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__stdcall<sp/>DebugBreak();</highlight></codeline>
<codeline lineno="7976"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>CATCH_TRAP()<sp/>DebugBreak()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7977"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7978"><highlight class="normal"></highlight></codeline>
<codeline lineno="7979"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CATCH_BREAK_INTO_DEBUGGER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7980"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>CATCH_TRAP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7981"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>CATCH_BREAK_INTO_DEBUGGER()<sp/>[]{<sp/>if(<sp/>Catch::isDebuggerActive()<sp/>)<sp/>{<sp/>CATCH_TRAP();<sp/>}<sp/>}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7982"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7983"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>CATCH_BREAK_INTO_DEBUGGER()<sp/>[]{}()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7984"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7985"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7986"><highlight class="normal"></highlight></codeline>
<codeline lineno="7987"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_debugger.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7988"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_run_context.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7989"><highlight class="normal"></highlight></codeline>
<codeline lineno="7990"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_fatal_condition.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7991"><highlight class="normal"></highlight></codeline>
<codeline lineno="7992"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7993"><highlight class="normal"></highlight></codeline>
<codeline lineno="7994"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="7995"><highlight class="normal"></highlight></codeline>
<codeline lineno="7996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wrapper<sp/>for<sp/>platform-specific<sp/>fatal<sp/>error<sp/>(signals/SEH)<sp/>handlers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tries<sp/>to<sp/>be<sp/>cooperative<sp/>with<sp/>other<sp/>handlers,<sp/>and<sp/>not<sp/>step<sp/>over</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>other<sp/>handlers.<sp/>This<sp/>means<sp/>that<sp/>unknown<sp/>structured<sp/>exceptions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>passed<sp/>on,<sp/>previous<sp/>signal<sp/>handlers<sp/>are<sp/>called,<sp/>and<sp/>so<sp/>on.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Can<sp/>only<sp/>be<sp/>instantiated<sp/>once,<sp/>and<sp/>assumes<sp/>that<sp/>once<sp/>a<sp/>signal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>caught,<sp/>the<sp/>binary<sp/>will<sp/>end<sp/>up<sp/>terminating.<sp/>Thus,<sp/>there</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">FatalConditionHandler<sp/>{</highlight></codeline>
<codeline lineno="8005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_started<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8006"><highlight class="normal"></highlight></codeline>
<codeline lineno="8007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Install/disengage<sp/>implementation<sp/>for<sp/>specific<sp/>platform.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Should<sp/>be<sp/>if-defed<sp/>to<sp/>work<sp/>on<sp/>current<sp/>platform,<sp/>can<sp/>assume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>engage-disengage<sp/>1:1<sp/>pairing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>engage_platform();</highlight></codeline>
<codeline lineno="8011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>disengage_platform();</highlight></codeline>
<codeline lineno="8012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Should<sp/>also<sp/>have<sp/>platform-specific<sp/>implementations<sp/>as<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FatalConditionHandler();</highlight></codeline>
<codeline lineno="8015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~FatalConditionHandler();</highlight></codeline>
<codeline lineno="8016"><highlight class="normal"></highlight></codeline>
<codeline lineno="8017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>engage()<sp/>{</highlight></codeline>
<codeline lineno="8018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(!m_started<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Handler<sp/>cannot<sp/>be<sp/>installed<sp/>twice.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_started<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>engage_platform();</highlight></codeline>
<codeline lineno="8021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8022"><highlight class="normal"></highlight></codeline>
<codeline lineno="8023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>disengage()<sp/>{</highlight></codeline>
<codeline lineno="8024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(m_started<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Handler<sp/>cannot<sp/>be<sp/>uninstalled<sp/>without<sp/>being<sp/>installed<sp/>first&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_started<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>disengage_platform();</highlight></codeline>
<codeline lineno="8027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8028"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="8029"><highlight class="normal"></highlight></codeline>
<codeline lineno="8031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">FatalConditionHandlerGuard<sp/>{</highlight></codeline>
<codeline lineno="8032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FatalConditionHandler*<sp/>m_handler;</highlight></codeline>
<codeline lineno="8033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FatalConditionHandlerGuard(FatalConditionHandler*<sp/>handler):</highlight></codeline>
<codeline lineno="8035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_handler(handler)<sp/>{</highlight></codeline>
<codeline lineno="8036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_handler-&gt;engage();</highlight></codeline>
<codeline lineno="8037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~FatalConditionHandlerGuard()<sp/>{</highlight></codeline>
<codeline lineno="8039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_handler-&gt;disengage();</highlight></codeline>
<codeline lineno="8040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8041"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="8042"><highlight class="normal"></highlight></codeline>
<codeline lineno="8043"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8044"><highlight class="normal"></highlight></codeline>
<codeline lineno="8045"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_fatal_condition.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8046"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8047"><highlight class="normal"></highlight></codeline>
<codeline lineno="8048"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="8049"><highlight class="normal"></highlight></codeline>
<codeline lineno="8050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IMutableContext;</highlight></codeline>
<codeline lineno="8051"><highlight class="normal"></highlight></codeline>
<codeline lineno="8053"><highlight class="normal"></highlight></codeline>
<codeline lineno="8054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">RunContext<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>IResultCapture,<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>IRunner<sp/>{</highlight></codeline>
<codeline lineno="8055"><highlight class="normal"></highlight></codeline>
<codeline lineno="8056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RunContext(<sp/>RunContext<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RunContext&amp;<sp/>operator<sp/>=(<sp/>RunContext<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8059"><highlight class="normal"></highlight></codeline>
<codeline lineno="8060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>RunContext(<sp/>IConfigPtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_config,<sp/>IStreamingReporterPtr&amp;&amp;<sp/>reporter<sp/>);</highlight></codeline>
<codeline lineno="8061"><highlight class="normal"></highlight></codeline>
<codeline lineno="8062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~RunContext()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8063"><highlight class="normal"></highlight></codeline>
<codeline lineno="8064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testGroupStarting(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testSpec,<sp/>std::size_t<sp/>groupIndex,<sp/>std::size_t<sp/>groupsCount<sp/>);</highlight></codeline>
<codeline lineno="8065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testGroupEnded(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testSpec,<sp/>Totals<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>totals,<sp/>std::size_t<sp/>groupIndex,<sp/>std::size_t<sp/>groupsCount<sp/>);</highlight></codeline>
<codeline lineno="8066"><highlight class="normal"></highlight></codeline>
<codeline lineno="8067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Totals<sp/>runTest(TestCase<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCase);</highlight></codeline>
<codeline lineno="8068"><highlight class="normal"></highlight></codeline>
<codeline lineno="8069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IConfigPtr<sp/>config()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IStreamingReporter&amp;<sp/>reporter()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8071"><highlight class="normal"></highlight></codeline>
<codeline lineno="8072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>IResultCapture</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8073"><highlight class="normal"></highlight></codeline>
<codeline lineno="8074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assertion<sp/>handlers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleExpr</highlight></codeline>
<codeline lineno="8076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/><sp/><sp/>AssertionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structinfo" kindref="compound">info</ref>,</highlight></codeline>
<codeline lineno="8077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ITransientExpression<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>expr,</highlight></codeline>
<codeline lineno="8078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionReaction&amp;<sp/>reaction<sp/>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleMessage</highlight></codeline>
<codeline lineno="8080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/><sp/><sp/>AssertionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structinfo" kindref="compound">info</ref>,</highlight></codeline>
<codeline lineno="8081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultWas::OfType<sp/>resultType,</highlight></codeline>
<codeline lineno="8082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringRef<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>message,</highlight></codeline>
<codeline lineno="8083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionReaction&amp;<sp/>reaction<sp/>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleUnexpectedExceptionNotThrown</highlight></codeline>
<codeline lineno="8085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/><sp/><sp/>AssertionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structinfo" kindref="compound">info</ref>,</highlight></codeline>
<codeline lineno="8086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionReaction&amp;<sp/>reaction<sp/>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleUnexpectedInflightException</highlight></codeline>
<codeline lineno="8088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/><sp/><sp/>AssertionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structinfo" kindref="compound">info</ref>,</highlight></codeline>
<codeline lineno="8089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>message,</highlight></codeline>
<codeline lineno="8090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionReaction&amp;<sp/>reaction<sp/>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleIncomplete</highlight></codeline>
<codeline lineno="8092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/><sp/><sp/>AssertionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleNonExpr</highlight></codeline>
<codeline lineno="8094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/><sp/><sp/>AssertionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<ref refid="structinfo" kindref="compound">info</ref>,</highlight></codeline>
<codeline lineno="8095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultWas::OfType<sp/>resultType,</highlight></codeline>
<codeline lineno="8096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionReaction<sp/>&amp;reaction<sp/>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8097"><highlight class="normal"></highlight></codeline>
<codeline lineno="8098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sectionStarted(<sp/>SectionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>sectionInfo,<sp/>Counts&amp;<sp/>assertions<sp/>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8099"><highlight class="normal"></highlight></codeline>
<codeline lineno="8100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sectionEnded(<sp/>SectionEndInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>endInfo<sp/>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sectionEndedEarly(<sp/>SectionEndInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>endInfo<sp/>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8102"><highlight class="normal"></highlight></codeline>
<codeline lineno="8103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>acquireGeneratorTracker(<sp/>StringRef<sp/>generatorName,<sp/>SourceLineInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lineInfo<sp/>)<sp/>-&gt;<sp/>IGeneratorTracker&amp;<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8104"><highlight class="normal"></highlight></codeline>
<codeline lineno="8105"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_ENABLE_BENCHMARKING)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>benchmarkPreparing(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name<sp/>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>benchmarkStarting(<sp/>BenchmarkInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>benchmarkEnded(<sp/>BenchmarkStats&lt;&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>stats<sp/>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>benchmarkFailed(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>error<sp/>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8110"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_ENABLE_BENCHMARKING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8111"><highlight class="normal"></highlight></codeline>
<codeline lineno="8112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pushScopedMessage(<sp/>MessageInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>message<sp/>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>popScopedMessage(<sp/>MessageInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>message<sp/>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8114"><highlight class="normal"></highlight></codeline>
<codeline lineno="8115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>emplaceUnscopedMessage(<sp/>MessageBuilder<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>builder<sp/>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8116"><highlight class="normal"></highlight></codeline>
<codeline lineno="8117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>getCurrentTestName()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8118"><highlight class="normal"></highlight></codeline>
<codeline lineno="8119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AssertionResult*<sp/>getLastResult()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8120"><highlight class="normal"></highlight></codeline>
<codeline lineno="8121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>exceptionEarlyReported()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8122"><highlight class="normal"></highlight></codeline>
<codeline lineno="8123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleFatalErrorCondition(<sp/>StringRef<sp/>message<sp/>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8124"><highlight class="normal"></highlight></codeline>
<codeline lineno="8125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lastAssertionPassed()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8126"><highlight class="normal"></highlight></codeline>
<codeline lineno="8127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assertionPassed()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8128"><highlight class="normal"></highlight></codeline>
<codeline lineno="8129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>!TBD<sp/>We<sp/>need<sp/>to<sp/>do<sp/>this<sp/>another<sp/>way!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aborting()<sp/>const<sp/>final;</highlight></codeline>
<codeline lineno="8132"><highlight class="normal"></highlight></codeline>
<codeline lineno="8133"><highlight class="normal"><sp/><sp/><sp/><sp/>private:</highlight></codeline>
<codeline lineno="8134"><highlight class="normal"></highlight></codeline>
<codeline lineno="8135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>runCurrentTest(<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>redirectedCout,<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>redirectedCerr<sp/>);</highlight></codeline>
<codeline lineno="8136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>invokeActiveTestCase();</highlight></codeline>
<codeline lineno="8137"><highlight class="normal"></highlight></codeline>
<codeline lineno="8138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resetAssertionInfo();</highlight></codeline>
<codeline lineno="8139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>testForMissingAssertions(<sp/>Counts&amp;<sp/>assertions<sp/>);</highlight></codeline>
<codeline lineno="8140"><highlight class="normal"></highlight></codeline>
<codeline lineno="8141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assertionEnded(<sp/>AssertionResult<sp/>const&amp;<sp/><ref refid="structresult" kindref="compound">result</ref><sp/>);</highlight></codeline>
<codeline lineno="8142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reportExpr</highlight></codeline>
<codeline lineno="8143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/><sp/><sp/>AssertionInfo<sp/>const<sp/>&amp;<ref refid="structinfo" kindref="compound">info</ref>,</highlight></codeline>
<codeline lineno="8144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultWas::OfType<sp/>resultType,</highlight></codeline>
<codeline lineno="8145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ITransientExpression<sp/>const<sp/>*expr,</highlight></codeline>
<codeline lineno="8146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>negated<sp/>);</highlight></codeline>
<codeline lineno="8147"><highlight class="normal"></highlight></codeline>
<codeline lineno="8148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>populateReaction(<sp/>AssertionReaction&amp;<sp/>reaction<sp/>);</highlight></codeline>
<codeline lineno="8149"><highlight class="normal"></highlight></codeline>
<codeline lineno="8150"><highlight class="normal"><sp/><sp/><sp/><sp/>private:</highlight></codeline>
<codeline lineno="8151"><highlight class="normal"></highlight></codeline>
<codeline lineno="8152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleUnfinishedSections();</highlight></codeline>
<codeline lineno="8153"><highlight class="normal"></highlight></codeline>
<codeline lineno="8154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestRunInfo<sp/>m_runInfo;</highlight></codeline>
<codeline lineno="8155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMutableContext&amp;<sp/>m_context;</highlight></codeline>
<codeline lineno="8156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestCase<sp/>const*<sp/>m_activeTestCase<sp/>=<sp/></highlight><highlight class="keywordtype">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ITracker*<sp/>m_testCaseTracker<sp/>=<sp/></highlight><highlight class="keywordtype">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Option&lt;AssertionResult&gt;<sp/>m_lastResult;</highlight></codeline>
<codeline lineno="8159"><highlight class="normal"></highlight></codeline>
<codeline lineno="8160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IConfigPtr<sp/>m_config;</highlight></codeline>
<codeline lineno="8161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Totals<sp/>m_totals;</highlight></codeline>
<codeline lineno="8162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IStreamingReporterPtr<sp/>m_reporter;</highlight></codeline>
<codeline lineno="8163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;MessageInfo&gt;<sp/>m_messages;</highlight></codeline>
<codeline lineno="8164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;ScopedMessage&gt;<sp/>m_messageScopes;<sp/></highlight><highlight class="comment">/*<sp/>Keeps<sp/>owners<sp/>of<sp/>so-called<sp/>unscoped<sp/>messages.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionInfo<sp/>m_lastAssertionInfo;</highlight></codeline>
<codeline lineno="8166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SectionEndInfo&gt;<sp/>m_unfinishedSections;</highlight></codeline>
<codeline lineno="8167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;ITracker*&gt;<sp/>m_activeSections;</highlight></codeline>
<codeline lineno="8168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TrackerContext<sp/>m_trackerContext;</highlight></codeline>
<codeline lineno="8169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FatalConditionHandler<sp/>m_fatalConditionhandler;</highlight></codeline>
<codeline lineno="8170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_lastAssertionPassed<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="8171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_shouldReportUnexpected<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="8172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_includeSuccessfulResults;</highlight></codeline>
<codeline lineno="8173"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="8174"><highlight class="normal"></highlight></codeline>
<codeline lineno="8175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>seedRng(IConfig<sp/>const&amp;<sp/>config);</highlight></codeline>
<codeline lineno="8176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rngSeed();</highlight></codeline>
<codeline lineno="8177"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8178"><highlight class="normal"></highlight></codeline>
<codeline lineno="8179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_run_context.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8180"><highlight class="normal">namespace<sp/>Catch<sp/>{</highlight></codeline>
<codeline lineno="8181"><highlight class="normal"></highlight></codeline>
<codeline lineno="8182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="8183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>&lt;&lt;(<sp/>std::ostream&amp;<sp/>os,<sp/>ITransientExpression<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>expr<sp/>)<sp/>-&gt;<sp/>std::ostream&amp;<sp/>{</highlight></codeline>
<codeline lineno="8184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr.streamReconstructedExpression(<sp/>os<sp/>);</highlight></codeline>
<codeline lineno="8185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="8186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8188"><highlight class="normal"></highlight></codeline>
<codeline lineno="8189"><highlight class="normal"><sp/><sp/><sp/><sp/>LazyExpression::LazyExpression(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isNegated<sp/>)</highlight></codeline>
<codeline lineno="8190"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>m_isNegated(<sp/>isNegated<sp/>)</highlight></codeline>
<codeline lineno="8191"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="8192"><highlight class="normal"></highlight></codeline>
<codeline lineno="8193"><highlight class="normal"><sp/><sp/><sp/><sp/>LazyExpression::LazyExpression(<sp/>LazyExpression<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other<sp/>)<sp/>:<sp/>m_isNegated(<sp/>other.m_isNegated<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="8194"><highlight class="normal"></highlight></codeline>
<codeline lineno="8195"><highlight class="normal"><sp/><sp/><sp/><sp/>LazyExpression::operator<sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="8196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_transientExpression<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8198"><highlight class="normal"></highlight></codeline>
<codeline lineno="8199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>&lt;&lt;<sp/>(<sp/>std::ostream&amp;<sp/>os,<sp/>LazyExpression<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lazyExpr<sp/>)<sp/>-&gt;<sp/>std::ostream&amp;<sp/>{</highlight></codeline>
<codeline lineno="8200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>lazyExpr.m_isNegated<sp/>)</highlight></codeline>
<codeline lineno="8201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;!&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8202"><highlight class="normal"></highlight></codeline>
<codeline lineno="8203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>lazyExpr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="8204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>lazyExpr.m_isNegated<sp/>&amp;&amp;<sp/>lazyExpr.m_transientExpression-&gt;isBinaryExpression()<sp/>)</highlight></codeline>
<codeline lineno="8205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*lazyExpr.m_transientExpression<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>*lazyExpr.m_transientExpression;</highlight></codeline>
<codeline lineno="8208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;{**<sp/>error<sp/>-<sp/>unchecked<sp/>empty<sp/>expression<sp/>requested<sp/>**}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="8213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8214"><highlight class="normal"></highlight></codeline>
<codeline lineno="8215"><highlight class="normal"><sp/><sp/><sp/><sp/>AssertionHandler::AssertionHandler</highlight></codeline>
<codeline lineno="8216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/><sp/><sp/>StringRef<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>macroName,</highlight></codeline>
<codeline lineno="8217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SourceLineInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lineInfo,</highlight></codeline>
<codeline lineno="8218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringRef<sp/>capturedExpression,</highlight></codeline>
<codeline lineno="8219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultDisposition::Flags<sp/>resultDisposition<sp/>)</highlight></codeline>
<codeline lineno="8220"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>m_assertionInfo{<sp/>macroName,<sp/>lineInfo,<sp/>capturedExpression,<sp/>resultDisposition<sp/>},</highlight></codeline>
<codeline lineno="8221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_resultCapture(<sp/>getResultCapture()<sp/>)</highlight></codeline>
<codeline lineno="8222"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="8223"><highlight class="normal"></highlight></codeline>
<codeline lineno="8224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AssertionHandler::handleExpr(<sp/>ITransientExpression<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>expr<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="8225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_resultCapture.handleExpr(<sp/>m_assertionInfo,<sp/>expr,<sp/>m_reaction<sp/>);</highlight></codeline>
<codeline lineno="8226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AssertionHandler::handleMessage(ResultWas::OfType<sp/>resultType,<sp/>StringRef<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="8228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_resultCapture.handleMessage(<sp/>m_assertionInfo,<sp/>resultType,<sp/>message,<sp/>m_reaction<sp/>);</highlight></codeline>
<codeline lineno="8229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8230"><highlight class="normal"></highlight></codeline>
<codeline lineno="8231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>AssertionHandler::allowThrows()<sp/>const<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getCurrentContext().getConfig()-&gt;allowThrows();</highlight></codeline>
<codeline lineno="8233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8234"><highlight class="normal"></highlight></codeline>
<codeline lineno="8235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AssertionHandler::complete()<sp/>{</highlight></codeline>
<codeline lineno="8236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setCompleted();</highlight></codeline>
<codeline lineno="8237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_reaction.shouldDebugBreak<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="8238"><highlight class="normal"></highlight></codeline>
<codeline lineno="8239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>you<sp/>find<sp/>your<sp/>debugger<sp/>stopping<sp/>you<sp/>here<sp/>then<sp/>go<sp/>one<sp/>level<sp/>up<sp/>on<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>call-stack<sp/>for<sp/>the<sp/>code<sp/>that<sp/>caused<sp/>it<sp/>(typically<sp/>a<sp/>failed<sp/>assertion)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8241"><highlight class="normal"></highlight></codeline>
<codeline lineno="8242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(To<sp/>go<sp/>back<sp/>to<sp/>the<sp/>test<sp/>and<sp/>change<sp/>execution,<sp/>jump<sp/>over<sp/>the<sp/>throw,<sp/>next)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_BREAK_INTO_DEBUGGER();</highlight></codeline>
<codeline lineno="8244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_reaction.shouldThrow)<sp/>{</highlight></codeline>
<codeline lineno="8246"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="struct_catch_1_1_test_failure_exception" kindref="compound">Catch::TestFailureException</ref>();</highlight></codeline>
<codeline lineno="8248"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;Test<sp/>failure<sp/>requires<sp/>aborting<sp/>test!&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="8250"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AssertionHandler::setCompleted()<sp/>{</highlight></codeline>
<codeline lineno="8254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_completed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8256"><highlight class="normal"></highlight></codeline>
<codeline lineno="8257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AssertionHandler::handleUnexpectedInflightException()<sp/>{</highlight></codeline>
<codeline lineno="8258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_resultCapture.handleUnexpectedInflightException(<sp/>m_assertionInfo,<sp/>Catch::translateActiveException(),<sp/>m_reaction<sp/>);</highlight></codeline>
<codeline lineno="8259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8260"><highlight class="normal"></highlight></codeline>
<codeline lineno="8261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AssertionHandler::handleExceptionThrownAsExpected()<sp/>{</highlight></codeline>
<codeline lineno="8262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_resultCapture.handleNonExpr(m_assertionInfo,<sp/>ResultWas::Ok,<sp/>m_reaction);</highlight></codeline>
<codeline lineno="8263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AssertionHandler::handleExceptionNotThrownAsExpected()<sp/>{</highlight></codeline>
<codeline lineno="8265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_resultCapture.handleNonExpr(m_assertionInfo,<sp/>ResultWas::Ok,<sp/>m_reaction);</highlight></codeline>
<codeline lineno="8266"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8267"><highlight class="normal"></highlight></codeline>
<codeline lineno="8268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AssertionHandler::handleUnexpectedExceptionNotThrown()<sp/>{</highlight></codeline>
<codeline lineno="8269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_resultCapture.handleUnexpectedExceptionNotThrown(<sp/>m_assertionInfo,<sp/>m_reaction<sp/>);</highlight></codeline>
<codeline lineno="8270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8271"><highlight class="normal"></highlight></codeline>
<codeline lineno="8272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AssertionHandler::handleThrowingCallSkipped()<sp/>{</highlight></codeline>
<codeline lineno="8273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_resultCapture.handleNonExpr(m_assertionInfo,<sp/>ResultWas::Ok,<sp/>m_reaction);</highlight></codeline>
<codeline lineno="8274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8275"><highlight class="normal"></highlight></codeline>
<codeline lineno="8276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>overload<sp/>that<sp/>takes<sp/>a<sp/>string<sp/>and<sp/>infers<sp/>the<sp/>Equals<sp/>matcher<sp/>from<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>more<sp/>general<sp/>overload,<sp/>that<sp/>takes<sp/>any<sp/>string<sp/>matcher,<sp/>is<sp/>in<sp/>catch_capture_matchers.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleExceptionMatchExpr(<sp/>AssertionHandler&amp;<sp/>handler,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>str,<sp/>StringRef<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>matcherString<sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="8279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handleExceptionMatchExpr(<sp/>handler,<sp/>Matchers::Equals(<sp/>str<sp/>),<sp/>matcherString<sp/>);</highlight></codeline>
<codeline lineno="8280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8281"><highlight class="normal"></highlight></codeline>
<codeline lineno="8282"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8283"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_assertionhandler.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8284"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_assertionresult.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8285"><highlight class="normal"></highlight></codeline>
<codeline lineno="8286"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="8287"><highlight class="normal"><sp/><sp/><sp/><sp/>AssertionResultData::AssertionResultData(ResultWas::OfType<sp/>_resultType,<sp/>LazyExpression<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>_lazyExpression):</highlight></codeline>
<codeline lineno="8288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lazyExpression(_lazyExpression),</highlight></codeline>
<codeline lineno="8289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resultType(_resultType)<sp/>{}</highlight></codeline>
<codeline lineno="8290"><highlight class="normal"></highlight></codeline>
<codeline lineno="8291"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>AssertionResultData::reconstructExpression()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="8292"><highlight class="normal"></highlight></codeline>
<codeline lineno="8293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>reconstructedExpression.empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="8294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>lazyExpression<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="8295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReusableStringStream<sp/>rss;</highlight></codeline>
<codeline lineno="8296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/>lazyExpression;</highlight></codeline>
<codeline lineno="8297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reconstructedExpression<sp/>=<sp/>rss.str();</highlight></codeline>
<codeline lineno="8298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reconstructedExpression;</highlight></codeline>
<codeline lineno="8301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8302"><highlight class="normal"></highlight></codeline>
<codeline lineno="8303"><highlight class="normal"><sp/><sp/><sp/><sp/>AssertionResult::AssertionResult(<sp/>AssertionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structinfo" kindref="compound">info</ref>,<sp/>AssertionResultData<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>data<sp/>)</highlight></codeline>
<codeline lineno="8304"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>m_info(<sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>),</highlight></codeline>
<codeline lineno="8305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_resultData(<sp/>data<sp/>)</highlight></codeline>
<codeline lineno="8306"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="8307"><highlight class="normal"></highlight></codeline>
<codeline lineno="8308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Result<sp/>was<sp/>a<sp/>success</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>AssertionResult::succeeded()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="8310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Catch::isOk(<sp/>m_resultData.resultType<sp/>);</highlight></codeline>
<codeline lineno="8311"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8312"><highlight class="normal"></highlight></codeline>
<codeline lineno="8313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Result<sp/>was<sp/>a<sp/>success,<sp/>or<sp/>failure<sp/>is<sp/>suppressed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>AssertionResult::isOk()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="8315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Catch::isOk(<sp/>m_resultData.resultType<sp/>)<sp/>||<sp/>shouldSuppressFailure(<sp/>m_info.resultDisposition<sp/>);</highlight></codeline>
<codeline lineno="8316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8317"><highlight class="normal"></highlight></codeline>
<codeline lineno="8318"><highlight class="normal"><sp/><sp/><sp/><sp/>ResultWas::OfType<sp/>AssertionResult::getResultType()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="8319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_resultData.resultType;</highlight></codeline>
<codeline lineno="8320"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8321"><highlight class="normal"></highlight></codeline>
<codeline lineno="8322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>AssertionResult::hasExpression()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="8323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!m_info.capturedExpression.empty();</highlight></codeline>
<codeline lineno="8324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8325"><highlight class="normal"></highlight></codeline>
<codeline lineno="8326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>AssertionResult::hasMessage()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="8327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!m_resultData.message.empty();</highlight></codeline>
<codeline lineno="8328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8329"><highlight class="normal"></highlight></codeline>
<codeline lineno="8330"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>AssertionResult::getExpression()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="8331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Possibly<sp/>overallocating<sp/>by<sp/>3<sp/>characters<sp/>should<sp/>be<sp/>basically<sp/>free</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>expr;<sp/>expr.reserve(m_info.capturedExpression.size()<sp/>+<sp/>3);</highlight></codeline>
<codeline lineno="8333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isFalseTest(m_info.resultDisposition))<sp/>{</highlight></codeline>
<codeline lineno="8334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/>+=<sp/>&quot;!(&quot;;</highlight></codeline>
<codeline lineno="8335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/>+=<sp/>m_info.capturedExpression;</highlight></codeline>
<codeline lineno="8337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isFalseTest(m_info.resultDisposition))<sp/>{</highlight></codeline>
<codeline lineno="8338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/>+=<sp/>&apos;)&apos;;</highlight></codeline>
<codeline lineno="8339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>expr;</highlight></codeline>
<codeline lineno="8341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8342"><highlight class="normal"></highlight></codeline>
<codeline lineno="8343"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>AssertionResult::getExpressionInMacro()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="8344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>expr;</highlight></codeline>
<codeline lineno="8345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_info.macroName.empty()<sp/>)</highlight></codeline>
<codeline lineno="8346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::string</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_info.capturedExpression);</highlight></codeline>
<codeline lineno="8347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr.reserve(<sp/>m_info.macroName.size()<sp/>+<sp/>m_info.capturedExpression.size()<sp/>+<sp/>4<sp/>);</highlight></codeline>
<codeline lineno="8349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/>+=<sp/>m_info.macroName;</highlight></codeline>
<codeline lineno="8350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/>+=<sp/>&quot;(<sp/>&quot;;</highlight></codeline>
<codeline lineno="8351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/>+=<sp/>m_info.capturedExpression;</highlight></codeline>
<codeline lineno="8352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expr<sp/>+=<sp/>&quot;<sp/>)&quot;;</highlight></codeline>
<codeline lineno="8353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>expr;</highlight></codeline>
<codeline lineno="8355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8356"><highlight class="normal"></highlight></codeline>
<codeline lineno="8357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>AssertionResult::hasExpandedExpression()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="8358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hasExpression()<sp/>&amp;&amp;<sp/>getExpandedExpression()<sp/>!=<sp/>getExpression();</highlight></codeline>
<codeline lineno="8359"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8360"><highlight class="normal"></highlight></codeline>
<codeline lineno="8361"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>AssertionResult::getExpandedExpression()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="8362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>expr<sp/>=<sp/>m_resultData.reconstructExpression();</highlight></codeline>
<codeline lineno="8363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>expr.empty()</highlight></codeline>
<codeline lineno="8364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>getExpression()</highlight></codeline>
<codeline lineno="8365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>expr;</highlight></codeline>
<codeline lineno="8366"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8367"><highlight class="normal"></highlight></codeline>
<codeline lineno="8368"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>AssertionResult::getMessage()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="8369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_resultData.message;</highlight></codeline>
<codeline lineno="8370"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8371"><highlight class="normal"><sp/><sp/><sp/><sp/>SourceLineInfo<sp/>AssertionResult::getSourceInfo()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="8372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_info.lineInfo;</highlight></codeline>
<codeline lineno="8373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8374"><highlight class="normal"></highlight></codeline>
<codeline lineno="8375"><highlight class="normal"><sp/><sp/><sp/><sp/>StringRef<sp/>AssertionResult::getTestMacroName()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="8376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_info.macroName;</highlight></codeline>
<codeline lineno="8377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8378"><highlight class="normal"></highlight></codeline>
<codeline lineno="8379"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8380"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_assertionresult.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8381"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_capture_matchers.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8382"><highlight class="normal"></highlight></codeline>
<codeline lineno="8383"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="8384"><highlight class="normal"></highlight></codeline>
<codeline lineno="8385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>StringMatcher<sp/>=<sp/>Matchers::Impl::MatcherBase&lt;std::string&gt;;</highlight></codeline>
<codeline lineno="8386"><highlight class="normal"></highlight></codeline>
<codeline lineno="8387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>general<sp/>overload<sp/>that<sp/>takes<sp/>a<sp/>any<sp/>string<sp/>matcher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>is<sp/>another<sp/>overload,<sp/>in<sp/>catch_assertionhandler.h/.cpp,<sp/>that<sp/>only<sp/>takes<sp/>a<sp/>string<sp/>and<sp/>infers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>Equals<sp/>matcher<sp/>(so<sp/>the<sp/>header<sp/>does<sp/>not<sp/>mention<sp/>matchers)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleExceptionMatchExpr(<sp/>AssertionHandler&amp;<sp/>handler,<sp/>StringMatcher<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>matcher,<sp/>StringRef<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>matcherString<sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="8391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>exceptionMessage<sp/>=<sp/>Catch::translateActiveException();</highlight></codeline>
<codeline lineno="8392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatchExpr&lt;std::string,<sp/>StringMatcher<sp/>const&amp;&gt;<sp/>expr(<sp/>exceptionMessage,<sp/>matcher,<sp/>matcherString<sp/>);</highlight></codeline>
<codeline lineno="8393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handler.handleExpr(<sp/>expr<sp/>);</highlight></codeline>
<codeline lineno="8394"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8395"><highlight class="normal"></highlight></codeline>
<codeline lineno="8396"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8397"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_capture_matchers.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8398"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_commandline.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8399"><highlight class="normal"></highlight></codeline>
<codeline lineno="8400"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_commandline.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8401"><highlight class="normal"></highlight></codeline>
<codeline lineno="8402"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_clara.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8403"><highlight class="normal"></highlight></codeline>
<codeline lineno="8404"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>Catch&apos;s<sp/>value<sp/>for<sp/>console<sp/>width<sp/>(store<sp/>Clara&apos;s<sp/>off<sp/>to<sp/>the<sp/>side,<sp/>if<sp/>present)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8405"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CLARA_CONFIG_CONSOLE_WIDTH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8406"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH<sp/>CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8407"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8408"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8409"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH<sp/>CATCH_CONFIG_CONSOLE_WIDTH-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8410"><highlight class="normal"></highlight></codeline>
<codeline lineno="8411"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8412"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8413"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wweak-vtables&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8414"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wexit-time-destructors&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8415"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wshadow&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8416"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8417"><highlight class="normal"></highlight></codeline>
<codeline lineno="8418"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>clara.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8419"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>2017<sp/>Two<sp/>Blue<sp/>Cubes<sp/>Ltd.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8420"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8421"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.<sp/>(See<sp/>accompanying</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8422"><highlight class="normal"></highlight><highlight class="comment">//<sp/>file<sp/>LICENSE_1_0.txt<sp/>or<sp/>copy<sp/>at<sp/>http://www.boost.org/LICENSE_1_0.txt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8423"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8424"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>https://github.com/philsquared/Clara<sp/>for<sp/>more<sp/>details</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8425"><highlight class="normal"></highlight></codeline>
<codeline lineno="8426"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Clara<sp/>v1.1.5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8427"><highlight class="normal"></highlight></codeline>
<codeline lineno="8428"><highlight class="normal"></highlight></codeline>
<codeline lineno="8429"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CATCH_CLARA_CONFIG_CONSOLE_WIDTH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8430"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CLARA_CONFIG_CONSOLE_WIDTH<sp/>80</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8431"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8432"><highlight class="normal"></highlight></codeline>
<codeline lineno="8433"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8434"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH<sp/>CATCH_CLARA_CONFIG_CONSOLE_WIDTH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8435"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8436"><highlight class="normal"></highlight></codeline>
<codeline lineno="8437"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CLARA_CONFIG_OPTIONAL_TYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8438"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__has_include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8439"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__has_include(&lt;optional&gt;)<sp/>&amp;&amp;<sp/>__cplusplus<sp/>&gt;=<sp/>201703L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8440"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;optional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8441"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLARA_CONFIG_OPTIONAL_TYPE<sp/>std::optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8442"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8443"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8444"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8445"><highlight class="normal"></highlight></codeline>
<codeline lineno="8446"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-----------<sp/>#included<sp/>from<sp/>clara_textflow.hpp<sp/>-----------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8447"><highlight class="normal"></highlight></codeline>
<codeline lineno="8448"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TextFlowCpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8449"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8450"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>single-header<sp/>library<sp/>for<sp/>wrapping<sp/>and<sp/>laying<sp/>out<sp/>basic<sp/>text,<sp/>by<sp/>Phil<sp/>Nash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8451"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8452"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.<sp/>(See<sp/>accompanying</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8453"><highlight class="normal"></highlight><highlight class="comment">//<sp/>file<sp/>LICENSE.txt<sp/>or<sp/>copy<sp/>at<sp/>http://www.boost.org/LICENSE_1_0.txt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8454"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8455"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>project<sp/>is<sp/>hosted<sp/>at<sp/>https://github.com/philsquared/textflowcpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8456"><highlight class="normal"></highlight></codeline>
<codeline lineno="8457"><highlight class="normal"></highlight></codeline>
<codeline lineno="8458"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8459"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8460"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8461"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8462"><highlight class="normal"></highlight></codeline>
<codeline lineno="8463"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8464"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH<sp/>80</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8465"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8466"><highlight class="normal"></highlight></codeline>
<codeline lineno="8467"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="8468"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">clara<sp/>{</highlight></codeline>
<codeline lineno="8469"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">TextFlow<sp/>{</highlight></codeline>
<codeline lineno="8470"><highlight class="normal"></highlight></codeline>
<codeline lineno="8471"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>isWhitespace(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>chars<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>\t\n\r&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>chars.find(c)<sp/>!=<sp/>std::string::npos;</highlight></codeline>
<codeline lineno="8474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8475"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>isBreakableBefore(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>chars<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;[({&lt;|&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>chars.find(c)<sp/>!=<sp/>std::string::npos;</highlight></codeline>
<codeline lineno="8478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8479"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>isBreakableAfter(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>chars<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;])}&gt;.,:;*+-=&amp;/\\&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>chars.find(c)<sp/>!=<sp/>std::string::npos;</highlight></codeline>
<codeline lineno="8482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8483"><highlight class="normal"></highlight></codeline>
<codeline lineno="8484"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Columns;</highlight></codeline>
<codeline lineno="8485"><highlight class="normal"></highlight></codeline>
<codeline lineno="8486"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Column<sp/>{</highlight></codeline>
<codeline lineno="8487"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>m_strings;</highlight></codeline>
<codeline lineno="8488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m_width<sp/>=<sp/>CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH;</highlight></codeline>
<codeline lineno="8489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m_indent<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="8490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m_initialIndent<sp/>=<sp/>std::string::npos;</highlight></codeline>
<codeline lineno="8491"><highlight class="normal"></highlight></codeline>
<codeline lineno="8492"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">iterator<sp/>{</highlight></codeline>
<codeline lineno="8494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>Column;</highlight></codeline>
<codeline lineno="8495"><highlight class="normal"></highlight></codeline>
<codeline lineno="8496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Column<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>m_column;</highlight></codeline>
<codeline lineno="8497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m_stringIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="8498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m_pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="8499"><highlight class="normal"></highlight></codeline>
<codeline lineno="8500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m_len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="8501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m_end<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="8502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_suffix<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8503"><highlight class="normal"></highlight></codeline>
<codeline lineno="8504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterator(Column<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>column,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>stringIndex)</highlight></codeline>
<codeline lineno="8505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_column(column),</highlight></codeline>
<codeline lineno="8506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_stringIndex(stringIndex)<sp/>{}</highlight></codeline>
<codeline lineno="8507"><highlight class="normal"></highlight></codeline>
<codeline lineno="8508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>line()<sp/>const<sp/>-&gt;<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>const&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_column.m_strings[m_stringIndex];<sp/>}</highlight></codeline>
<codeline lineno="8509"><highlight class="normal"></highlight></codeline>
<codeline lineno="8510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>isBoundary(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>at)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(at<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="8512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(at<sp/>&lt;=<sp/>line().size());</highlight></codeline>
<codeline lineno="8513"><highlight class="normal"></highlight></codeline>
<codeline lineno="8514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>at<sp/>==<sp/>line().size()<sp/>||</highlight></codeline>
<codeline lineno="8515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(isWhitespace(line()[at])<sp/>&amp;&amp;<sp/>!isWhitespace(line()[at<sp/>-<sp/>1]))<sp/>||</highlight></codeline>
<codeline lineno="8516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isBreakableBefore(line()[at])<sp/>||</highlight></codeline>
<codeline lineno="8517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isBreakableAfter(line()[at<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="8518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8519"><highlight class="normal"></highlight></codeline>
<codeline lineno="8520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>calcLength()<sp/>{</highlight></codeline>
<codeline lineno="8521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(m_stringIndex<sp/>&lt;<sp/>m_column.m_strings.size());</highlight></codeline>
<codeline lineno="8522"><highlight class="normal"></highlight></codeline>
<codeline lineno="8523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_suffix<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>m_column.m_width<sp/>-<sp/>indent();</highlight></codeline>
<codeline lineno="8525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_end<sp/>=<sp/>m_pos;</highlight></codeline>
<codeline lineno="8526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line()[m_pos]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="8527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++m_end;</highlight></codeline>
<codeline lineno="8528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(m_end<sp/>&lt;<sp/>line().size()<sp/>&amp;&amp;<sp/>line()[m_end]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="8530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++m_end;</highlight></codeline>
<codeline lineno="8531"><highlight class="normal"></highlight></codeline>
<codeline lineno="8532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_end<sp/>&lt;<sp/>m_pos<sp/>+<sp/>width)<sp/>{</highlight></codeline>
<codeline lineno="8533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_len<sp/>=<sp/>m_end<sp/>-<sp/>m_pos;</highlight></codeline>
<codeline lineno="8534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>width;</highlight></codeline>
<codeline lineno="8536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>!isBoundary(m_pos<sp/>+<sp/>len))</highlight></codeline>
<codeline lineno="8537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--len;</highlight></codeline>
<codeline lineno="8538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>isWhitespace(line()[m_pos<sp/>+<sp/>len<sp/>-<sp/>1]))</highlight></codeline>
<codeline lineno="8539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--len;</highlight></codeline>
<codeline lineno="8540"><highlight class="normal"></highlight></codeline>
<codeline lineno="8541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="8542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_len<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="8543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_suffix<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_len<sp/>=<sp/>width<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="8546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8549"><highlight class="normal"></highlight></codeline>
<codeline lineno="8550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>indent()<sp/>const<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>initial<sp/>=<sp/>m_pos<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>m_stringIndex<sp/>==<sp/>0<sp/>?<sp/>m_column.m_initialIndent<sp/>:<sp/>std::string::npos;</highlight></codeline>
<codeline lineno="8552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>initial<sp/>==<sp/>std::string::npos<sp/>?<sp/>m_column.m_indent<sp/>:<sp/>initial;</highlight></codeline>
<codeline lineno="8553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8554"><highlight class="normal"></highlight></codeline>
<codeline lineno="8555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>addIndentAndSuffix(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;plain)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/>std::string<sp/>{</highlight></codeline>
<codeline lineno="8556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(indent(),<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>+<sp/>(m_suffix<sp/>?<sp/>plain<sp/>+<sp/>&quot;-&quot;<sp/>:<sp/>plain);</highlight></codeline>
<codeline lineno="8557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8558"><highlight class="normal"></highlight></codeline>
<codeline lineno="8559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>difference_type<sp/>=<sp/>std::ptrdiff_t;</highlight></codeline>
<codeline lineno="8561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>value_type<sp/>=<sp/>std::string;</highlight></codeline>
<codeline lineno="8562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>pointer<sp/>=<sp/>value_type<sp/>*<sp/>;</highlight></codeline>
<codeline lineno="8563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>reference<sp/>=<sp/>value_type<sp/>&amp;<sp/>;</highlight></codeline>
<codeline lineno="8564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>iterator_category<sp/>=<sp/>std::forward_iterator_tag;</highlight></codeline>
<codeline lineno="8565"><highlight class="normal"></highlight></codeline>
<codeline lineno="8566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>iterator(Column<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>column)<sp/>:<sp/>m_column(column)<sp/>{</highlight></codeline>
<codeline lineno="8567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(m_column.m_width<sp/>&gt;<sp/>m_column.m_indent);</highlight></codeline>
<codeline lineno="8568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(m_column.m_initialIndent<sp/>==<sp/>std::string::npos<sp/>||<sp/>m_column.m_width<sp/>&gt;<sp/>m_column.m_initialIndent);</highlight></codeline>
<codeline lineno="8569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calcLength();</highlight></codeline>
<codeline lineno="8570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_len<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="8571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_stringIndex++;<sp/></highlight><highlight class="comment">//<sp/>Empty<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8573"><highlight class="normal"></highlight></codeline>
<codeline lineno="8574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>*()<sp/>const<sp/>-&gt;<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(m_stringIndex<sp/>&lt;<sp/>m_column.m_strings.size());</highlight></codeline>
<codeline lineno="8576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(m_pos<sp/>&lt;=<sp/>m_end);</highlight></codeline>
<codeline lineno="8577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>addIndentAndSuffix(line().substr(m_pos,<sp/>m_len));</highlight></codeline>
<codeline lineno="8578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8579"><highlight class="normal"></highlight></codeline>
<codeline lineno="8580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>++()<sp/>-&gt;<sp/>iterator&amp;<sp/>{</highlight></codeline>
<codeline lineno="8581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_pos<sp/>+=<sp/>m_len;</highlight></codeline>
<codeline lineno="8582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_pos<sp/>&lt;<sp/>line().size()<sp/>&amp;&amp;<sp/>line()[m_pos]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="8583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_pos<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="8584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(m_pos<sp/>&lt;<sp/>line().size()<sp/>&amp;&amp;<sp/>isWhitespace(line()[m_pos]))</highlight></codeline>
<codeline lineno="8586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++m_pos;</highlight></codeline>
<codeline lineno="8587"><highlight class="normal"></highlight></codeline>
<codeline lineno="8588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_pos<sp/>==<sp/>line().size())<sp/>{</highlight></codeline>
<codeline lineno="8589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="8590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++m_stringIndex;</highlight></codeline>
<codeline lineno="8591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_stringIndex<sp/>&lt;<sp/>m_column.m_strings.size())</highlight></codeline>
<codeline lineno="8593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calcLength();</highlight></codeline>
<codeline lineno="8594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>++(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>-&gt;<sp/>iterator<sp/>{</highlight></codeline>
<codeline lineno="8597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterator<sp/>prev(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator++();</highlight></codeline>
<codeline lineno="8599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>prev;</highlight></codeline>
<codeline lineno="8600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8601"><highlight class="normal"></highlight></codeline>
<codeline lineno="8602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>==(iterator<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_pos<sp/>==<sp/>other.m_pos<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="8605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_stringIndex<sp/>==<sp/>other.m_stringIndex<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="8606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;m_column<sp/>==<sp/>&amp;other.m_column;</highlight></codeline>
<codeline lineno="8607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>!=(iterator<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!operator==(other);</highlight></codeline>
<codeline lineno="8610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8611"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="8612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>const_iterator<sp/>=<sp/>iterator;</highlight></codeline>
<codeline lineno="8613"><highlight class="normal"></highlight></codeline>
<codeline lineno="8614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Column(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>text)<sp/>{<sp/>m_strings.push_back(text);<sp/>}</highlight></codeline>
<codeline lineno="8615"><highlight class="normal"></highlight></codeline>
<codeline lineno="8616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>width(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newWidth)<sp/>-&gt;<sp/>Column&amp;<sp/>{</highlight></codeline>
<codeline lineno="8617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(newWidth<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="8618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_width<sp/>=<sp/>newWidth;</highlight></codeline>
<codeline lineno="8619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8620"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>indent(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newIndent)<sp/>-&gt;<sp/>Column&amp;<sp/>{</highlight></codeline>
<codeline lineno="8622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_indent<sp/>=<sp/>newIndent;</highlight></codeline>
<codeline lineno="8623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8624"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>initialIndent(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newIndent)<sp/>-&gt;<sp/>Column&amp;<sp/>{</highlight></codeline>
<codeline lineno="8626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_initialIndent<sp/>=<sp/>newIndent;</highlight></codeline>
<codeline lineno="8627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8628"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8629"><highlight class="normal"></highlight></codeline>
<codeline lineno="8630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>width()<sp/>const<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_width;<sp/>}</highlight></codeline>
<codeline lineno="8631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>begin()<sp/>const<sp/>-&gt;<sp/>iterator<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iterator(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="8632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end()<sp/>const<sp/>-&gt;<sp/>iterator<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>m_strings.size()<sp/>};<sp/>}</highlight></codeline>
<codeline lineno="8633"><highlight class="normal"></highlight></codeline>
<codeline lineno="8634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>std::ostream&amp;<sp/>operator<sp/>&lt;&lt;<sp/>(std::ostream&amp;<sp/>os,<sp/>Column<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>col)<sp/>{</highlight></codeline>
<codeline lineno="8635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>line<sp/>:<sp/>col)<sp/>{</highlight></codeline>
<codeline lineno="8637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)</highlight></codeline>
<codeline lineno="8638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>line;</highlight></codeline>
<codeline lineno="8642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="8644"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8645"><highlight class="normal"></highlight></codeline>
<codeline lineno="8646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>+<sp/>(Column<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other)-&gt;Columns;</highlight></codeline>
<codeline lineno="8647"><highlight class="normal"></highlight></codeline>
<codeline lineno="8648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>toString()<sp/>const<sp/>-&gt;<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>oss;</highlight></codeline>
<codeline lineno="8650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oss<sp/>&lt;&lt;<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oss.str();</highlight></codeline>
<codeline lineno="8652"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8653"><highlight class="normal">};</highlight></codeline>
<codeline lineno="8654"><highlight class="normal"></highlight></codeline>
<codeline lineno="8655"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Spacer<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Column<sp/>{</highlight></codeline>
<codeline lineno="8656"><highlight class="normal"></highlight></codeline>
<codeline lineno="8657"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Spacer(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>spaceWidth)<sp/>:<sp/>Column(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="8659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width(spaceWidth);</highlight></codeline>
<codeline lineno="8660"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8661"><highlight class="normal">};</highlight></codeline>
<codeline lineno="8662"><highlight class="normal"></highlight></codeline>
<codeline lineno="8663"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Columns<sp/>{</highlight></codeline>
<codeline lineno="8664"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Column&gt;<sp/>m_columns;</highlight></codeline>
<codeline lineno="8665"><highlight class="normal"></highlight></codeline>
<codeline lineno="8666"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8667"><highlight class="normal"></highlight></codeline>
<codeline lineno="8668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">iterator<sp/>{</highlight></codeline>
<codeline lineno="8669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>Columns;</highlight></codeline>
<codeline lineno="8670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">EndTag<sp/>{};</highlight></codeline>
<codeline lineno="8671"><highlight class="normal"></highlight></codeline>
<codeline lineno="8672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Column&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>m_columns;</highlight></codeline>
<codeline lineno="8673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Column::iterator&gt;<sp/>m_iterators;</highlight></codeline>
<codeline lineno="8674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>m_activeIterators;</highlight></codeline>
<codeline lineno="8675"><highlight class="normal"></highlight></codeline>
<codeline lineno="8676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterator(Columns<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>columns,<sp/>EndTag)</highlight></codeline>
<codeline lineno="8677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_columns(columns.m_columns),</highlight></codeline>
<codeline lineno="8678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_activeIterators(0)<sp/>{</highlight></codeline>
<codeline lineno="8679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_iterators.reserve(m_columns.size());</highlight></codeline>
<codeline lineno="8680"><highlight class="normal"></highlight></codeline>
<codeline lineno="8681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>col<sp/>:<sp/>m_columns)</highlight></codeline>
<codeline lineno="8682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_iterators.push_back(col.end());</highlight></codeline>
<codeline lineno="8683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8684"><highlight class="normal"></highlight></codeline>
<codeline lineno="8685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>difference_type<sp/>=<sp/>std::ptrdiff_t;</highlight></codeline>
<codeline lineno="8687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>value_type<sp/>=<sp/>std::string;</highlight></codeline>
<codeline lineno="8688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>pointer<sp/>=<sp/>value_type<sp/>*<sp/>;</highlight></codeline>
<codeline lineno="8689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>reference<sp/>=<sp/>value_type<sp/>&amp;<sp/>;</highlight></codeline>
<codeline lineno="8690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>iterator_category<sp/>=<sp/>std::forward_iterator_tag;</highlight></codeline>
<codeline lineno="8691"><highlight class="normal"></highlight></codeline>
<codeline lineno="8692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>iterator(Columns<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>columns)</highlight></codeline>
<codeline lineno="8693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_columns(columns.m_columns),</highlight></codeline>
<codeline lineno="8694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_activeIterators(m_columns.size())<sp/>{</highlight></codeline>
<codeline lineno="8695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_iterators.reserve(m_columns.size());</highlight></codeline>
<codeline lineno="8696"><highlight class="normal"></highlight></codeline>
<codeline lineno="8697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>col<sp/>:<sp/>m_columns)</highlight></codeline>
<codeline lineno="8698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_iterators.push_back(col.begin());</highlight></codeline>
<codeline lineno="8699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8700"><highlight class="normal"></highlight></codeline>
<codeline lineno="8701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>==(iterator<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_iterators<sp/>==<sp/>other.m_iterators;</highlight></codeline>
<codeline lineno="8703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>!=(iterator<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_iterators<sp/>!=<sp/>other.m_iterators;</highlight></codeline>
<codeline lineno="8706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>*()<sp/>const<sp/>-&gt;<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="group__gtc__matrix__access_1ga259e5ebd0f31ec3f83440f8cae7f5dba" kindref="member">row</ref>,<sp/>padding;</highlight></codeline>
<codeline lineno="8709"><highlight class="normal"></highlight></codeline>
<codeline lineno="8710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m_columns.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="8711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>m_columns[i].width();</highlight></codeline>
<codeline lineno="8712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_iterators[i]<sp/>!=<sp/>m_columns[i].end())<sp/>{</highlight></codeline>
<codeline lineno="8713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>col<sp/>=<sp/>*m_iterators[i];</highlight></codeline>
<codeline lineno="8714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/>+=<sp/>padding<sp/>+<sp/>col;</highlight></codeline>
<codeline lineno="8715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(col.size()<sp/>&lt;<sp/>width)</highlight></codeline>
<codeline lineno="8716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>padding<sp/>=<sp/>std::string(width<sp/>-<sp/>col.size(),<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>padding<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>padding<sp/>+=<sp/>std::string(width,<sp/>&apos;<sp/>&apos;);</highlight></codeline>
<codeline lineno="8721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtc__matrix__access_1ga259e5ebd0f31ec3f83440f8cae7f5dba" kindref="member">row</ref>;</highlight></codeline>
<codeline lineno="8724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>++()<sp/>-&gt;<sp/>iterator&amp;<sp/>{</highlight></codeline>
<codeline lineno="8726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m_columns.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="8727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_iterators[i]<sp/>!=<sp/>m_columns[i].end())</highlight></codeline>
<codeline lineno="8728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++m_iterators[i];</highlight></codeline>
<codeline lineno="8729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>++(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>-&gt;<sp/>iterator<sp/>{</highlight></codeline>
<codeline lineno="8733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterator<sp/>prev(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator++();</highlight></codeline>
<codeline lineno="8735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>prev;</highlight></codeline>
<codeline lineno="8736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8737"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="8738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>const_iterator<sp/>=<sp/>iterator;</highlight></codeline>
<codeline lineno="8739"><highlight class="normal"></highlight></codeline>
<codeline lineno="8740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>begin()<sp/>const<sp/>-&gt;<sp/>iterator<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iterator(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="8741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end()<sp/>const<sp/>-&gt;<sp/>iterator<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>iterator::EndTag()<sp/>};<sp/>}</highlight></codeline>
<codeline lineno="8742"><highlight class="normal"></highlight></codeline>
<codeline lineno="8743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>+=<sp/>(Column<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>col)<sp/>-&gt;<sp/>Columns&amp;<sp/>{</highlight></codeline>
<codeline lineno="8744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_columns.push_back(col);</highlight></codeline>
<codeline lineno="8745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8746"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>+<sp/>(Column<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>col)<sp/>-&gt;<sp/>Columns<sp/>{</highlight></codeline>
<codeline lineno="8748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Columns<sp/>combined<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combined<sp/>+=<sp/>col;</highlight></codeline>
<codeline lineno="8750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>combined;</highlight></codeline>
<codeline lineno="8751"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8752"><highlight class="normal"></highlight></codeline>
<codeline lineno="8753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>std::ostream&amp;<sp/>operator<sp/>&lt;&lt;<sp/>(std::ostream&amp;<sp/>os,<sp/>Columns<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>cols)<sp/>{</highlight></codeline>
<codeline lineno="8754"><highlight class="normal"></highlight></codeline>
<codeline lineno="8755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>line<sp/>:<sp/>cols)<sp/>{</highlight></codeline>
<codeline lineno="8757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)</highlight></codeline>
<codeline lineno="8758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>line;</highlight></codeline>
<codeline lineno="8762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="8764"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8765"><highlight class="normal"></highlight></codeline>
<codeline lineno="8766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>toString()<sp/>const<sp/>-&gt;<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>oss;</highlight></codeline>
<codeline lineno="8768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oss<sp/>&lt;&lt;<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oss.str();</highlight></codeline>
<codeline lineno="8770"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8771"><highlight class="normal">};</highlight></codeline>
<codeline lineno="8772"><highlight class="normal"></highlight></codeline>
<codeline lineno="8773"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>Column::operator<sp/>+<sp/>(Column<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other)<sp/>-&gt;<sp/>Columns<sp/>{</highlight></codeline>
<codeline lineno="8774"><highlight class="normal"><sp/><sp/><sp/><sp/>Columns<sp/>cols;</highlight></codeline>
<codeline lineno="8775"><highlight class="normal"><sp/><sp/><sp/><sp/>cols<sp/>+=<sp/>*this;</highlight></codeline>
<codeline lineno="8776"><highlight class="normal"><sp/><sp/><sp/><sp/>cols<sp/>+=<sp/>other;</highlight></codeline>
<codeline lineno="8777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cols;</highlight></codeline>
<codeline lineno="8778"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8779"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8780"><highlight class="normal"></highlight></codeline>
<codeline lineno="8781"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8782"><highlight class="normal">}</highlight></codeline>
<codeline lineno="8783"><highlight class="normal"></highlight></codeline>
<codeline lineno="8784"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-----------<sp/>end<sp/>of<sp/>#include<sp/>from<sp/>clara_textflow.hpp<sp/>-----------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8785"><highlight class="normal"></highlight><highlight class="comment">//<sp/>...........<sp/>back<sp/>in<sp/>clara.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8786"><highlight class="normal"></highlight></codeline>
<codeline lineno="8787"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cctype&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8788"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8789"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8790"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8791"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8792"><highlight class="normal"></highlight></codeline>
<codeline lineno="8793"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_PLATFORM_WINDOWS)<sp/>&amp;&amp;<sp/>(<sp/>defined(WIN32)<sp/>||<sp/>defined(__WIN32__)<sp/>||<sp/>defined(_WIN32)<sp/>||<sp/>defined(_MSC_VER)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8794"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_PLATFORM_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8795"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8796"><highlight class="normal"></highlight></codeline>
<codeline lineno="8797"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">clara<sp/>{</highlight></codeline>
<codeline lineno="8798"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="8799"><highlight class="normal"></highlight></codeline>
<codeline lineno="8800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Traits<sp/>for<sp/>extracting<sp/>arg<sp/>and<sp/>return<sp/>type<sp/>of<sp/>lambdas<sp/>(for<sp/>single<sp/>argument<sp/>lambdas)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L&gt;</highlight></codeline>
<codeline lineno="8802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">UnaryLambdaTraits<sp/>:<sp/>UnaryLambdaTraits&lt;decltype(<sp/>&amp;L::operator()<sp/>)&gt;<sp/>{};</highlight></codeline>
<codeline lineno="8803"><highlight class="normal"></highlight></codeline>
<codeline lineno="8804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ClassT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ReturnT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="8805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">UnaryLambdaTraits&lt;ReturnT(<sp/>ClassT::*<sp/>)(<sp/>Args...<sp/>)<sp/>const&gt;<sp/>{</highlight></codeline>
<codeline lineno="8806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isValid<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8807"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="8808"><highlight class="normal"></highlight></codeline>
<codeline lineno="8809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ClassT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ReturnT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgT&gt;</highlight></codeline>
<codeline lineno="8810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">UnaryLambdaTraits&lt;ReturnT(<sp/>ClassT::*<sp/>)(<sp/>ArgT<sp/>)<sp/>const&gt;<sp/>{</highlight></codeline>
<codeline lineno="8811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isValid<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ArgType<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_const&lt;typename<sp/>std::remove_reference&lt;ArgT&gt;::type&gt;::type;</highlight></codeline>
<codeline lineno="8813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ReturnType<sp/>=<sp/>ReturnT;</highlight></codeline>
<codeline lineno="8814"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="8815"><highlight class="normal"></highlight></codeline>
<codeline lineno="8816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TokenStream;</highlight></codeline>
<codeline lineno="8817"><highlight class="normal"></highlight></codeline>
<codeline lineno="8818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Transport<sp/>for<sp/>raw<sp/>args<sp/>(copied<sp/>from<sp/>main<sp/>args,<sp/>or<sp/>supplied<sp/>via<sp/>init<sp/>list<sp/>for<sp/>testing)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Args<sp/>{</highlight></codeline>
<codeline lineno="8820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>TokenStream;</highlight></codeline>
<codeline lineno="8821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>m_exeName;</highlight></codeline>
<codeline lineno="8822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>m_args;</highlight></codeline>
<codeline lineno="8823"><highlight class="normal"></highlight></codeline>
<codeline lineno="8824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>argv<sp/>)</highlight></codeline>
<codeline lineno="8826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_exeName(argv[0]),</highlight></codeline>
<codeline lineno="8827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_args(argv<sp/>+<sp/>1,<sp/>argv<sp/>+<sp/>argc)<sp/>{}</highlight></codeline>
<codeline lineno="8828"><highlight class="normal"></highlight></codeline>
<codeline lineno="8829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args(<sp/>std::initializer_list&lt;std::string&gt;<sp/>args<sp/>)</highlight></codeline>
<codeline lineno="8830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>m_exeName(<sp/>*args.begin()<sp/>),</highlight></codeline>
<codeline lineno="8831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_args(<sp/>args.begin()+1,<sp/>args.end()<sp/>)</highlight></codeline>
<codeline lineno="8832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="8833"><highlight class="normal"></highlight></codeline>
<codeline lineno="8834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>exeName()<sp/>const<sp/>-&gt;<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_exeName;</highlight></codeline>
<codeline lineno="8836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8837"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="8838"><highlight class="normal"></highlight></codeline>
<codeline lineno="8839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wraps<sp/>a<sp/>token<sp/>coming<sp/>from<sp/>a<sp/>token<sp/>stream.<sp/>These<sp/>may<sp/>not<sp/>directly<sp/>correspond<sp/>to<sp/>strings<sp/>as<sp/>a<sp/>single<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>may<sp/>encode<sp/>an<sp/>option<sp/>+<sp/>its<sp/>argument<sp/>if<sp/>the<sp/>:<sp/>or<sp/>=<sp/>form<sp/>is<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>TokenType<sp/>{</highlight></codeline>
<codeline lineno="8842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Option,<sp/>Argument</highlight></codeline>
<codeline lineno="8843"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="8844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Token<sp/>{</highlight></codeline>
<codeline lineno="8845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TokenType<sp/>type;</highlight></codeline>
<codeline lineno="8846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>token;</highlight></codeline>
<codeline lineno="8847"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="8848"><highlight class="normal"></highlight></codeline>
<codeline lineno="8849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>isOptPrefix(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8851"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CATCH_PLATFORM_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8853"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="8855"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8856"><highlight class="normal"></highlight></codeline>
<codeline lineno="8857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Abstracts<sp/>iterators<sp/>into<sp/>args<sp/>as<sp/>a<sp/>stream<sp/>of<sp/>tokens,<sp/>with<sp/>option<sp/>arguments<sp/>uniformly<sp/>handled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TokenStream<sp/>{</highlight></codeline>
<codeline lineno="8859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Iterator<sp/>=<sp/>std::vector&lt;std::string&gt;::const_iterator;</highlight></codeline>
<codeline lineno="8860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator<sp/>it;</highlight></codeline>
<codeline lineno="8861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Iterator<sp/>itEnd;</highlight></codeline>
<codeline lineno="8862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Token&gt;<sp/>m_tokenBuffer;</highlight></codeline>
<codeline lineno="8863"><highlight class="normal"></highlight></codeline>
<codeline lineno="8864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>loadBuffer()<sp/>{</highlight></codeline>
<codeline lineno="8865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_tokenBuffer.resize(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="8866"><highlight class="normal"></highlight></codeline>
<codeline lineno="8867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>any<sp/>empty<sp/>strings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>it<sp/>!=<sp/>itEnd<sp/>&amp;&amp;<sp/>it-&gt;empty()<sp/>)</highlight></codeline>
<codeline lineno="8869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="8870"><highlight class="normal"></highlight></codeline>
<codeline lineno="8871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>it<sp/>!=<sp/>itEnd<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="8872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;next<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="8873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>isOptPrefix(<sp/>next[0]<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="8874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>delimiterPos<sp/>=<sp/>next.find_first_of(<sp/></highlight><highlight class="stringliteral">&quot;<sp/>:=&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="8875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>delimiterPos<sp/>!=<sp/>std::string::npos<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="8876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_tokenBuffer.push_back(<sp/>{<sp/>TokenType::Option,<sp/>next.substr(<sp/>0,<sp/>delimiterPos<sp/>)<sp/>}<sp/>);</highlight></codeline>
<codeline lineno="8877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_tokenBuffer.push_back(<sp/>{<sp/>TokenType::Argument,<sp/>next.substr(<sp/>delimiterPos<sp/>+<sp/>1<sp/>)<sp/>}<sp/>);</highlight></codeline>
<codeline lineno="8878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>next[1]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>next.size()<sp/>&gt;<sp/>2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="8880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>opt<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>next.size();<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="8882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opt[1]<sp/>=<sp/>next[i];</highlight></codeline>
<codeline lineno="8883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_tokenBuffer.push_back(<sp/>{<sp/>TokenType::Option,<sp/>opt<sp/>}<sp/>);</highlight></codeline>
<codeline lineno="8884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_tokenBuffer.push_back(<sp/>{<sp/>TokenType::Option,<sp/>next<sp/>}<sp/>);</highlight></codeline>
<codeline lineno="8887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_tokenBuffer.push_back(<sp/>{<sp/>TokenType::Argument,<sp/>next<sp/>}<sp/>);</highlight></codeline>
<codeline lineno="8891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8894"><highlight class="normal"></highlight></codeline>
<codeline lineno="8895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>TokenStream(<sp/>Args<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;args<sp/>)<sp/>:<sp/>TokenStream(<sp/>args.m_args.begin(),<sp/>args.m_args.end()<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="8897"><highlight class="normal"></highlight></codeline>
<codeline lineno="8898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TokenStream(<sp/>Iterator<sp/>it,<sp/>Iterator<sp/>itEnd<sp/>)<sp/>:<sp/>it(<sp/>it<sp/>),<sp/>itEnd(<sp/>itEnd<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="8899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loadBuffer();</highlight></codeline>
<codeline lineno="8900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8901"><highlight class="normal"></highlight></codeline>
<codeline lineno="8902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="8903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!m_tokenBuffer.empty()<sp/>||<sp/>it<sp/>!=<sp/>itEnd;</highlight></codeline>
<codeline lineno="8904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8905"><highlight class="normal"></highlight></codeline>
<codeline lineno="8906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>count()<sp/>const<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_tokenBuffer.size()<sp/>+<sp/>(itEnd<sp/>-<sp/>it);<sp/>}</highlight></codeline>
<codeline lineno="8907"><highlight class="normal"></highlight></codeline>
<codeline lineno="8908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator*()<sp/>const<sp/>-&gt;<sp/>Token<sp/>{</highlight></codeline>
<codeline lineno="8909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>!m_tokenBuffer.empty()<sp/>);</highlight></codeline>
<codeline lineno="8910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_tokenBuffer.front();</highlight></codeline>
<codeline lineno="8911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8912"><highlight class="normal"></highlight></codeline>
<codeline lineno="8913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator-&gt;()<sp/>const<sp/>-&gt;<sp/>Token<sp/>const<sp/>*<sp/>{</highlight></codeline>
<codeline lineno="8914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>!m_tokenBuffer.empty()<sp/>);</highlight></codeline>
<codeline lineno="8915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;m_tokenBuffer.front();</highlight></codeline>
<codeline lineno="8916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8917"><highlight class="normal"></highlight></codeline>
<codeline lineno="8918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator++()<sp/>-&gt;<sp/>TokenStream<sp/>&amp;<sp/>{</highlight></codeline>
<codeline lineno="8919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_tokenBuffer.size()<sp/>&gt;=<sp/>2<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="8920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_tokenBuffer.erase(<sp/>m_tokenBuffer.begin()<sp/>);</highlight></codeline>
<codeline lineno="8921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>it<sp/>!=<sp/>itEnd<sp/>)</highlight></codeline>
<codeline lineno="8923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="8924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loadBuffer();</highlight></codeline>
<codeline lineno="8925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8928"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="8929"><highlight class="normal"></highlight></codeline>
<codeline lineno="8930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ResultBase<sp/>{</highlight></codeline>
<codeline lineno="8931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>Type<sp/>{</highlight></codeline>
<codeline lineno="8933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ok,<sp/>LogicError,<sp/>RuntimeError</highlight></codeline>
<codeline lineno="8934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="8935"><highlight class="normal"></highlight></codeline>
<codeline lineno="8936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultBase(<sp/>Type<sp/>type<sp/>)<sp/>:<sp/>m_type(<sp/>type<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="8938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~ResultBase()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8939"><highlight class="normal"></highlight></codeline>
<codeline lineno="8940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>enforceOk()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="8941"><highlight class="normal"></highlight></codeline>
<codeline lineno="8942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Type<sp/>m_type;</highlight></codeline>
<codeline lineno="8943"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="8944"><highlight class="normal"></highlight></codeline>
<codeline lineno="8945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="8946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ResultValueBase<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ResultBase<sp/>{</highlight></codeline>
<codeline lineno="8947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>()<sp/>const<sp/>-&gt;<sp/>T<sp/>const<sp/>&amp;<sp/>{</highlight></codeline>
<codeline lineno="8949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enforceOk();</highlight></codeline>
<codeline lineno="8950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_value;</highlight></codeline>
<codeline lineno="8951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8952"><highlight class="normal"></highlight></codeline>
<codeline lineno="8953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultValueBase(<sp/>Type<sp/>type<sp/>)<sp/>:<sp/>ResultBase(<sp/>type<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="8955"><highlight class="normal"></highlight></codeline>
<codeline lineno="8956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultValueBase(<sp/>ResultValueBase<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;other<sp/>)<sp/>:<sp/>ResultBase(<sp/>other<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="8957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_type<sp/>==<sp/>ResultBase::Ok<sp/>)</highlight></codeline>
<codeline lineno="8958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<sp/>&amp;m_value<sp/>)<sp/>T(<sp/>other.m_value<sp/>);</highlight></codeline>
<codeline lineno="8959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8960"><highlight class="normal"></highlight></codeline>
<codeline lineno="8961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultValueBase(<sp/>Type,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<ref refid="classvalue" kindref="compound">value</ref><sp/>)<sp/>:<sp/>ResultBase(<sp/>Ok<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="8962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<sp/>&amp;m_value<sp/>)<sp/>T(<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>);</highlight></codeline>
<codeline lineno="8963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8964"><highlight class="normal"></highlight></codeline>
<codeline lineno="8965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator=(<sp/>ResultValueBase<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;other<sp/>)<sp/>-&gt;<sp/>ResultValueBase<sp/>&amp;<sp/>{</highlight></codeline>
<codeline lineno="8966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_type<sp/>==<sp/>ResultBase::Ok<sp/>)</highlight></codeline>
<codeline lineno="8967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_value.~T();</highlight></codeline>
<codeline lineno="8968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultBase::operator=(other);</highlight></codeline>
<codeline lineno="8969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_type<sp/>==<sp/>ResultBase::Ok<sp/>)</highlight></codeline>
<codeline lineno="8970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(<sp/>&amp;m_value<sp/>)<sp/>T(<sp/>other.m_value<sp/>);</highlight></codeline>
<codeline lineno="8971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8973"><highlight class="normal"></highlight></codeline>
<codeline lineno="8974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~ResultValueBase()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="8975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_type<sp/>==<sp/>Ok<sp/>)</highlight></codeline>
<codeline lineno="8976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_value.~T();</highlight></codeline>
<codeline lineno="8977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="8978"><highlight class="normal"></highlight></codeline>
<codeline lineno="8979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="8980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>m_value;</highlight></codeline>
<codeline lineno="8981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="8982"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="8983"><highlight class="normal"></highlight></codeline>
<codeline lineno="8984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="8985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ResultValueBase&lt;void&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ResultBase<sp/>{</highlight></codeline>
<codeline lineno="8986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ResultBase::ResultBase;</highlight></codeline>
<codeline lineno="8988"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="8989"><highlight class="normal"></highlight></codeline>
<codeline lineno="8990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="8991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">BasicResult<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ResultValueBase&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="8992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="8993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="8994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>BasicResult(<sp/>BasicResult&lt;U&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;other<sp/>)</highlight></codeline>
<codeline lineno="8995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>ResultValueBase&lt;T&gt;(<sp/>other.type()<sp/>),</highlight></codeline>
<codeline lineno="8996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_errorMessage(<sp/>other.errorMessage()<sp/>)</highlight></codeline>
<codeline lineno="8997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>type()<sp/>!=<sp/>ResultBase::Ok<sp/>);</highlight></codeline>
<codeline lineno="8999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9000"><highlight class="normal"></highlight></codeline>
<codeline lineno="9001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="9002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ok(<sp/>U<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<ref refid="classvalue" kindref="compound">value</ref><sp/>)<sp/>-&gt;<sp/>BasicResult<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>ResultBase::Ok,<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>};<sp/>}</highlight></codeline>
<codeline lineno="9003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ok()<sp/>-&gt;<sp/>BasicResult<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>ResultBase::Ok<sp/>};<sp/>}</highlight></codeline>
<codeline lineno="9004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>logicError(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;message<sp/>)<sp/>-&gt;<sp/>BasicResult<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>ResultBase::LogicError,<sp/>message<sp/>};<sp/>}</highlight></codeline>
<codeline lineno="9005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>runtimeError(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;message<sp/>)<sp/>-&gt;<sp/>BasicResult<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>ResultBase::RuntimeError,<sp/>message<sp/>};<sp/>}</highlight></codeline>
<codeline lineno="9006"><highlight class="normal"></highlight></codeline>
<codeline lineno="9007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_type<sp/>==<sp/>ResultBase::Ok;<sp/>}</highlight></codeline>
<codeline lineno="9008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>type()<sp/>const<sp/>-&gt;<sp/>ResultBase::Type<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_type;<sp/>}</highlight></codeline>
<codeline lineno="9009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>errorMessage()<sp/>const<sp/>-&gt;<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_errorMessage;<sp/>}</highlight></codeline>
<codeline lineno="9010"><highlight class="normal"></highlight></codeline>
<codeline lineno="9011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>enforceOk()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="9013"><highlight class="normal"></highlight></codeline>
<codeline lineno="9014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Errors<sp/>shouldn&apos;t<sp/>reach<sp/>this<sp/>point,<sp/>but<sp/>if<sp/>they<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>actual<sp/>error<sp/>message<sp/>will<sp/>be<sp/>in<sp/>m_errorMessage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>m_type<sp/>!=<sp/>ResultBase::LogicError<sp/>);</highlight></codeline>
<codeline lineno="9017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>m_type<sp/>!=<sp/>ResultBase::RuntimeError<sp/>);</highlight></codeline>
<codeline lineno="9018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_type<sp/>!=<sp/>ResultBase::Ok<sp/>)</highlight></codeline>
<codeline lineno="9019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::abort();</highlight></codeline>
<codeline lineno="9020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9021"><highlight class="normal"></highlight></codeline>
<codeline lineno="9022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>m_errorMessage;<sp/></highlight><highlight class="comment">//<sp/>Only<sp/>populated<sp/>if<sp/>resultType<sp/>is<sp/>an<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9023"><highlight class="normal"></highlight></codeline>
<codeline lineno="9024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BasicResult(<sp/>ResultBase::Type<sp/>type,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;message<sp/>)</highlight></codeline>
<codeline lineno="9025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>ResultValueBase&lt;T&gt;(type),</highlight></codeline>
<codeline lineno="9026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_errorMessage(message)</highlight></codeline>
<codeline lineno="9027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>m_type<sp/>!=<sp/>ResultBase::Ok<sp/>);</highlight></codeline>
<codeline lineno="9029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9030"><highlight class="normal"></highlight></codeline>
<codeline lineno="9031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ResultValueBase&lt;T&gt;::ResultValueBase;</highlight></codeline>
<codeline lineno="9032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ResultBase::m_type;</highlight></codeline>
<codeline lineno="9033"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="9034"><highlight class="normal"></highlight></codeline>
<codeline lineno="9035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>ParseResultType<sp/>{</highlight></codeline>
<codeline lineno="9036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matched,<sp/>NoMatch,<sp/>ShortCircuitAll,<sp/>ShortCircuitSame</highlight></codeline>
<codeline lineno="9037"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="9038"><highlight class="normal"></highlight></codeline>
<codeline lineno="9039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ParseState<sp/>{</highlight></codeline>
<codeline lineno="9040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9041"><highlight class="normal"></highlight></codeline>
<codeline lineno="9042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParseState(<sp/>ParseResultType<sp/>type,<sp/>TokenStream<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;remainingTokens<sp/>)</highlight></codeline>
<codeline lineno="9043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_type(type),</highlight></codeline>
<codeline lineno="9044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_remainingTokens(<sp/>remainingTokens<sp/>)</highlight></codeline>
<codeline lineno="9045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="9046"><highlight class="normal"></highlight></codeline>
<codeline lineno="9047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>type()<sp/>const<sp/>-&gt;<sp/>ParseResultType<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_type;<sp/>}</highlight></codeline>
<codeline lineno="9048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>remainingTokens()<sp/>const<sp/>-&gt;<sp/>TokenStream<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_remainingTokens;<sp/>}</highlight></codeline>
<codeline lineno="9049"><highlight class="normal"></highlight></codeline>
<codeline lineno="9050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParseResultType<sp/>m_type;</highlight></codeline>
<codeline lineno="9052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TokenStream<sp/>m_remainingTokens;</highlight></codeline>
<codeline lineno="9053"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="9054"><highlight class="normal"></highlight></codeline>
<codeline lineno="9055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Result<sp/>=<sp/>BasicResult&lt;void&gt;;</highlight></codeline>
<codeline lineno="9056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ParserResult<sp/>=<sp/>BasicResult&lt;ParseResultType&gt;;</highlight></codeline>
<codeline lineno="9057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>InternalParseResult<sp/>=<sp/>BasicResult&lt;ParseState&gt;;</highlight></codeline>
<codeline lineno="9058"><highlight class="normal"></highlight></codeline>
<codeline lineno="9059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">HelpColumns<sp/>{</highlight></codeline>
<codeline lineno="9060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>left;</highlight></codeline>
<codeline lineno="9061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>right;</highlight></codeline>
<codeline lineno="9062"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="9063"><highlight class="normal"></highlight></codeline>
<codeline lineno="9064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="9065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>convertInto(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;source,<sp/>T&amp;<sp/>target<sp/>)<sp/>-&gt;<sp/>ParserResult<sp/>{</highlight></codeline>
<codeline lineno="9066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="9067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>source;</highlight></codeline>
<codeline lineno="9068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&gt;&gt;<sp/>target;</highlight></codeline>
<codeline lineno="9069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>ss.fail()<sp/>)</highlight></codeline>
<codeline lineno="9070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ParserResult::runtimeError(<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>convert<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>source<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>to<sp/>destination<sp/>type&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="9071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ParserResult::ok(<sp/>ParseResultType::Matched<sp/>);</highlight></codeline>
<codeline lineno="9073"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>convertInto(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;source,<sp/>std::string&amp;<sp/>target<sp/>)<sp/>-&gt;<sp/>ParserResult<sp/>{</highlight></codeline>
<codeline lineno="9075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target<sp/>=<sp/>source;</highlight></codeline>
<codeline lineno="9076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ParserResult::ok(<sp/>ParseResultType::Matched<sp/>);</highlight></codeline>
<codeline lineno="9077"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>convertInto(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;source,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;target<sp/>)<sp/>-&gt;<sp/>ParserResult<sp/>{</highlight></codeline>
<codeline lineno="9079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>srcLC<sp/>=<sp/>source;</highlight></codeline>
<codeline lineno="9080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(<sp/>srcLC.begin(),<sp/>srcLC.end(),<sp/>srcLC.begin(),<sp/>[](<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>)<sp/>{<sp/>return<sp/>static_cast&lt;char&gt;(<sp/>std::tolower(c)<sp/>);<sp/>}<sp/>);</highlight></codeline>
<codeline lineno="9081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcLC<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal"><sp/>||<sp/>srcLC<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal"><sp/>||<sp/>srcLC<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>||<sp/>srcLC<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal"><sp/>||<sp/>srcLC<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;on&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="9082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcLC<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;n&quot;</highlight><highlight class="normal"><sp/>||<sp/>srcLC<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>||<sp/>srcLC<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal"><sp/>||<sp/>srcLC<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal"><sp/>||<sp/>srcLC<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;off&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="9084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ParserResult::runtimeError(<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>a<sp/>boolean<sp/>value<sp/>but<sp/>did<sp/>not<sp/>recognise:<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>source<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="9087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ParserResult::ok(<sp/>ParseResultType::Matched<sp/>);</highlight></codeline>
<codeline lineno="9088"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9089"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CLARA_CONFIG_OPTIONAL_TYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="9091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>convertInto(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;source,<sp/>CLARA_CONFIG_OPTIONAL_TYPE&lt;T&gt;&amp;<sp/>target<sp/>)<sp/>-&gt;<sp/>ParserResult<sp/>{</highlight></codeline>
<codeline lineno="9092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>temp;</highlight></codeline>
<codeline lineno="9093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>convertInto(<sp/>source,<sp/>temp<sp/>);</highlight></codeline>
<codeline lineno="9094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="structresult" kindref="compound">result</ref><sp/>)</highlight></codeline>
<codeline lineno="9095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target<sp/>=<sp/>std::move(temp);</highlight></codeline>
<codeline lineno="9096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="9097"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9098"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CLARA_CONFIG_OPTIONAL_TYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9099"><highlight class="normal"></highlight></codeline>
<codeline lineno="9100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">NonCopyable<sp/>{</highlight></codeline>
<codeline lineno="9101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NonCopyable()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NonCopyable(<sp/>NonCopyable<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NonCopyable(<sp/>NonCopyable<sp/>&amp;&amp;<sp/>)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NonCopyable<sp/>&amp;operator=(<sp/>NonCopyable<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NonCopyable<sp/>&amp;operator=(<sp/>NonCopyable<sp/>&amp;&amp;<sp/>)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9106"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="9107"><highlight class="normal"></highlight></codeline>
<codeline lineno="9108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">BoundRef<sp/>:<sp/>NonCopyable<sp/>{</highlight></codeline>
<codeline lineno="9109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~BoundRef()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>isContainer()<sp/>const<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="9111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>isFlag()<sp/>const<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="9112"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="9113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">BoundValueRefBase<sp/>:<sp/>BoundRef<sp/>{</highlight></codeline>
<codeline lineno="9114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>setValue(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg<sp/>)<sp/>-&gt;<sp/>ParserResult<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9115"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="9116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">BoundFlagRefBase<sp/>:<sp/>BoundRef<sp/>{</highlight></codeline>
<codeline lineno="9117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>setFlag(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flag<sp/>)<sp/>-&gt;<sp/>ParserResult<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>isFlag()<sp/>const<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="9119"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="9120"><highlight class="normal"></highlight></codeline>
<codeline lineno="9121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="9122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">BoundValueRef<sp/>:<sp/>BoundValueRefBase<sp/>{</highlight></codeline>
<codeline lineno="9123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>&amp;m_ref;</highlight></codeline>
<codeline lineno="9124"><highlight class="normal"></highlight></codeline>
<codeline lineno="9125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>BoundValueRef(<sp/>T<sp/>&amp;ref<sp/>)<sp/>:<sp/>m_ref(<sp/>ref<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="9126"><highlight class="normal"></highlight></codeline>
<codeline lineno="9127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>setValue(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg<sp/>)<sp/>-&gt;<sp/>ParserResult<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>convertInto(<sp/>arg,<sp/>m_ref<sp/>);</highlight></codeline>
<codeline lineno="9129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9130"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="9131"><highlight class="normal"></highlight></codeline>
<codeline lineno="9132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="9133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">BoundValueRef&lt;std::vector&lt;T&gt;&gt;<sp/>:<sp/>BoundValueRefBase<sp/>{</highlight></codeline>
<codeline lineno="9134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>&amp;m_ref;</highlight></codeline>
<codeline lineno="9135"><highlight class="normal"></highlight></codeline>
<codeline lineno="9136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>BoundValueRef(<sp/>std::vector&lt;T&gt;<sp/>&amp;ref<sp/>)<sp/>:<sp/>m_ref(<sp/>ref<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="9137"><highlight class="normal"></highlight></codeline>
<codeline lineno="9138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>isContainer()<sp/>const<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="9139"><highlight class="normal"></highlight></codeline>
<codeline lineno="9140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>setValue(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg<sp/>)<sp/>-&gt;<sp/>ParserResult<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>temp;</highlight></codeline>
<codeline lineno="9142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>convertInto(<sp/>arg,<sp/>temp<sp/>);</highlight></codeline>
<codeline lineno="9143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="structresult" kindref="compound">result</ref><sp/>)</highlight></codeline>
<codeline lineno="9144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_ref.push_back(<sp/>temp<sp/>);</highlight></codeline>
<codeline lineno="9145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="9146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9147"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="9148"><highlight class="normal"></highlight></codeline>
<codeline lineno="9149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">BoundFlagRef<sp/>:<sp/>BoundFlagRefBase<sp/>{</highlight></codeline>
<codeline lineno="9150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;m_ref;</highlight></codeline>
<codeline lineno="9151"><highlight class="normal"></highlight></codeline>
<codeline lineno="9152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>BoundFlagRef(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;ref<sp/>)<sp/>:<sp/>m_ref(<sp/>ref<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="9153"><highlight class="normal"></highlight></codeline>
<codeline lineno="9154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>setFlag(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flag<sp/>)<sp/>-&gt;<sp/>ParserResult<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_ref<sp/>=<sp/>flag;</highlight></codeline>
<codeline lineno="9156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ParserResult::ok(<sp/>ParseResultType::Matched<sp/>);</highlight></codeline>
<codeline lineno="9157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9158"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="9159"><highlight class="normal"></highlight></codeline>
<codeline lineno="9160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ReturnType&gt;</highlight></codeline>
<codeline lineno="9161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">LambdaInvoker<sp/>{</highlight></codeline>
<codeline lineno="9162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<sp/>std::is_same&lt;ReturnType,<sp/>ParserResult&gt;::value,<sp/></highlight><highlight class="stringliteral">&quot;Lambda<sp/>must<sp/>return<sp/>void<sp/>or<sp/>clara::ParserResult&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="9163"><highlight class="normal"></highlight></codeline>
<codeline lineno="9164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgType&gt;</highlight></codeline>
<codeline lineno="9165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>invoke(<sp/>L<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;lambda,<sp/>ArgType<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg<sp/>)<sp/>-&gt;<sp/>ParserResult<sp/>{</highlight></codeline>
<codeline lineno="9166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lambda(<sp/>arg<sp/>);</highlight></codeline>
<codeline lineno="9167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9168"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="9169"><highlight class="normal"></highlight></codeline>
<codeline lineno="9170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="9171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">LambdaInvoker&lt;void&gt;<sp/>{</highlight></codeline>
<codeline lineno="9172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgType&gt;</highlight></codeline>
<codeline lineno="9173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>invoke(<sp/>L<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;lambda,<sp/>ArgType<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg<sp/>)<sp/>-&gt;<sp/>ParserResult<sp/>{</highlight></codeline>
<codeline lineno="9174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lambda(<sp/>arg<sp/>);</highlight></codeline>
<codeline lineno="9175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ParserResult::ok(<sp/>ParseResultType::Matched<sp/>);</highlight></codeline>
<codeline lineno="9176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9177"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="9178"><highlight class="normal"></highlight></codeline>
<codeline lineno="9179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ArgType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L&gt;</highlight></codeline>
<codeline lineno="9180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>invokeLambda(<sp/>L<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;lambda,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg<sp/>)<sp/>-&gt;<sp/>ParserResult<sp/>{</highlight></codeline>
<codeline lineno="9181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ArgType<sp/>temp{};</highlight></codeline>
<codeline lineno="9182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>convertInto(<sp/>arg,<sp/>temp<sp/>);</highlight></codeline>
<codeline lineno="9183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<ref refid="structresult" kindref="compound">result</ref></highlight></codeline>
<codeline lineno="9184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/><ref refid="structresult" kindref="compound">result</ref></highlight></codeline>
<codeline lineno="9185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>LambdaInvoker&lt;typename<sp/>UnaryLambdaTraits&lt;L&gt;::ReturnType&gt;::invoke(<sp/>lambda,<sp/>temp<sp/>);</highlight></codeline>
<codeline lineno="9186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9187"><highlight class="normal"></highlight></codeline>
<codeline lineno="9188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L&gt;</highlight></codeline>
<codeline lineno="9189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">BoundLambda<sp/>:<sp/>BoundValueRefBase<sp/>{</highlight></codeline>
<codeline lineno="9190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>m_lambda;</highlight></codeline>
<codeline lineno="9191"><highlight class="normal"></highlight></codeline>
<codeline lineno="9192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<sp/>UnaryLambdaTraits&lt;L&gt;::isValid,<sp/></highlight><highlight class="stringliteral">&quot;Supplied<sp/>lambda<sp/>must<sp/>take<sp/>exactly<sp/>one<sp/>argument&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="9193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>BoundLambda(<sp/>L<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;lambda<sp/>)<sp/>:<sp/>m_lambda(<sp/>lambda<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="9194"><highlight class="normal"></highlight></codeline>
<codeline lineno="9195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>setValue(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg<sp/>)<sp/>-&gt;<sp/>ParserResult<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>invokeLambda&lt;typename<sp/>UnaryLambdaTraits&lt;L&gt;::ArgType&gt;(<sp/>m_lambda,<sp/>arg<sp/>);</highlight></codeline>
<codeline lineno="9197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9198"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="9199"><highlight class="normal"></highlight></codeline>
<codeline lineno="9200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>L&gt;</highlight></codeline>
<codeline lineno="9201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">BoundFlagLambda<sp/>:<sp/>BoundFlagRefBase<sp/>{</highlight></codeline>
<codeline lineno="9202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>m_lambda;</highlight></codeline>
<codeline lineno="9203"><highlight class="normal"></highlight></codeline>
<codeline lineno="9204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<sp/>UnaryLambdaTraits&lt;L&gt;::isValid,<sp/></highlight><highlight class="stringliteral">&quot;Supplied<sp/>lambda<sp/>must<sp/>take<sp/>exactly<sp/>one<sp/>argument&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="9205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<sp/>std::is_same&lt;typename<sp/>UnaryLambdaTraits&lt;L&gt;::ArgType,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;<ref refid="classvalue" kindref="compound">::value</ref>,<sp/></highlight><highlight class="stringliteral">&quot;flags<sp/>must<sp/>be<sp/>boolean&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="9206"><highlight class="normal"></highlight></codeline>
<codeline lineno="9207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>BoundFlagLambda(<sp/>L<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;lambda<sp/>)<sp/>:<sp/>m_lambda(<sp/>lambda<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="9208"><highlight class="normal"></highlight></codeline>
<codeline lineno="9209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>setFlag(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flag<sp/>)<sp/>-&gt;<sp/>ParserResult<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LambdaInvoker&lt;typename<sp/>UnaryLambdaTraits&lt;L&gt;::ReturnType&gt;::invoke(<sp/>m_lambda,<sp/>flag<sp/>);</highlight></codeline>
<codeline lineno="9211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9212"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="9213"><highlight class="normal"></highlight></codeline>
<codeline lineno="9214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>Optionality<sp/>{<sp/>Optional,<sp/>Required<sp/>};</highlight></codeline>
<codeline lineno="9215"><highlight class="normal"></highlight></codeline>
<codeline lineno="9216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Parser;</highlight></codeline>
<codeline lineno="9217"><highlight class="normal"></highlight></codeline>
<codeline lineno="9218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ParserBase<sp/>{</highlight></codeline>
<codeline lineno="9219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~ParserBase()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>validate()<sp/>const<sp/>-&gt;<sp/>Result<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result::ok();<sp/>}</highlight></codeline>
<codeline lineno="9222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parse(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>exeName,<sp/>TokenStream<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;tokens)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/>InternalParseResult<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cardinality()<sp/>const<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="9224"><highlight class="normal"></highlight></codeline>
<codeline lineno="9225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parse(<sp/>Args<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;args<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/>InternalParseResult<sp/>{</highlight></codeline>
<codeline lineno="9226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parse(<sp/>args.exeName(),<sp/>TokenStream(<sp/>args<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="9227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9228"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="9229"><highlight class="normal"></highlight></codeline>
<codeline lineno="9230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DerivedT&gt;</highlight></codeline>
<codeline lineno="9231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ComposableParserImpl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ParserBase<sp/>{</highlight></codeline>
<codeline lineno="9232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="9234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator|(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;other<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/>Parser;</highlight></codeline>
<codeline lineno="9235"><highlight class="normal"></highlight></codeline>
<codeline lineno="9236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="9237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator+(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;other<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/>Parser;</highlight></codeline>
<codeline lineno="9238"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="9239"><highlight class="normal"></highlight></codeline>
<codeline lineno="9240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Common<sp/>code<sp/>and<sp/>state<sp/>for<sp/>Args<sp/>and<sp/>Opts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DerivedT&gt;</highlight></codeline>
<codeline lineno="9242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ParserRefImpl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ComposableParserImpl&lt;DerivedT&gt;<sp/>{</highlight></codeline>
<codeline lineno="9243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Optionality<sp/>m_optionality<sp/>=<sp/>Optionality::Optional;</highlight></codeline>
<codeline lineno="9245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;BoundRef&gt;<sp/>m_ref;</highlight></codeline>
<codeline lineno="9246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>m_hint;</highlight></codeline>
<codeline lineno="9247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>m_description;</highlight></codeline>
<codeline lineno="9248"><highlight class="normal"></highlight></codeline>
<codeline lineno="9249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ParserRefImpl(<sp/>std::shared_ptr&lt;BoundRef&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;ref<sp/>)<sp/>:<sp/>m_ref(<sp/>ref<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="9250"><highlight class="normal"></highlight></codeline>
<codeline lineno="9251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="9253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParserRefImpl(<sp/>T<sp/>&amp;ref,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;hint<sp/>)</highlight></codeline>
<codeline lineno="9254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>m_ref(<sp/>std::make_shared&lt;BoundValueRef&lt;T&gt;&gt;(<sp/>ref<sp/>)<sp/>),</highlight></codeline>
<codeline lineno="9255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_hint(<sp/>hint<sp/>)</highlight></codeline>
<codeline lineno="9256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="9257"><highlight class="normal"></highlight></codeline>
<codeline lineno="9258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LambdaT&gt;</highlight></codeline>
<codeline lineno="9259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParserRefImpl(<sp/>LambdaT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;ref,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;hint<sp/>)</highlight></codeline>
<codeline lineno="9260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>m_ref(<sp/>std::make_shared&lt;BoundLambda&lt;LambdaT&gt;&gt;(<sp/>ref<sp/>)<sp/>),</highlight></codeline>
<codeline lineno="9261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_hint(hint)</highlight></codeline>
<codeline lineno="9262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="9263"><highlight class="normal"></highlight></codeline>
<codeline lineno="9264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;description<sp/>)<sp/>-&gt;<sp/>DerivedT<sp/>&amp;<sp/>{</highlight></codeline>
<codeline lineno="9265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_description<sp/>=<sp/>description;</highlight></codeline>
<codeline lineno="9266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">DerivedT<sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>*this<sp/>);</highlight></codeline>
<codeline lineno="9267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9268"><highlight class="normal"></highlight></codeline>
<codeline lineno="9269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>optional()<sp/>-&gt;<sp/>DerivedT<sp/>&amp;<sp/>{</highlight></codeline>
<codeline lineno="9270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_optionality<sp/>=<sp/>Optionality::Optional;</highlight></codeline>
<codeline lineno="9271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">DerivedT<sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>*this<sp/>);</highlight></codeline>
<codeline lineno="9272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="9273"><highlight class="normal"></highlight></codeline>
<codeline lineno="9274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>required()<sp/>-&gt;<sp/>DerivedT<sp/>&amp;<sp/>{</highlight></codeline>
<codeline lineno="9275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_optionality<sp/>=<sp/>Optionality::Required;</highlight></codeline>
<codeline lineno="9276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">DerivedT<sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>*this<sp/>);</highlight></codeline>
<codeline lineno="9277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="9278"><highlight class="normal"></highlight></codeline>
<codeline lineno="9279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>isOptional()<sp/>const<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_optionality<sp/>==<sp/>Optionality::Optional;</highlight></codeline>
<codeline lineno="9281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9282"><highlight class="normal"></highlight></codeline>
<codeline lineno="9283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cardinality()<sp/>const<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="9284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_ref-&gt;isContainer()<sp/>)</highlight></codeline>
<codeline lineno="9285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="9286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="9288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9289"><highlight class="normal"></highlight></codeline>
<codeline lineno="9290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hint()<sp/>const<sp/>-&gt;<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_hint;<sp/>}</highlight></codeline>
<codeline lineno="9291"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="9292"><highlight class="normal"></highlight></codeline>
<codeline lineno="9293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ExeName<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ComposableParserImpl&lt;ExeName&gt;<sp/>{</highlight></codeline>
<codeline lineno="9294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;std::string&gt;<sp/>m_name;</highlight></codeline>
<codeline lineno="9295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;BoundValueRefBase&gt;<sp/>m_ref;</highlight></codeline>
<codeline lineno="9296"><highlight class="normal"></highlight></codeline>
<codeline lineno="9297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LambdaT&gt;</highlight></codeline>
<codeline lineno="9298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>makeRef(LambdaT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;lambda)<sp/>-&gt;<sp/>std::shared_ptr&lt;BoundValueRefBase&gt;<sp/>{</highlight></codeline>
<codeline lineno="9299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;BoundLambda&lt;LambdaT&gt;&gt;(<sp/>lambda)<sp/>;</highlight></codeline>
<codeline lineno="9300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9301"><highlight class="normal"></highlight></codeline>
<codeline lineno="9302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExeName()<sp/>:<sp/>m_name(<sp/>std::make_shared&lt;std::string&gt;(<sp/></highlight><highlight class="stringliteral">&quot;&lt;executable&gt;&quot;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="9304"><highlight class="normal"></highlight></codeline>
<codeline lineno="9305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ExeName(<sp/>std::string<sp/>&amp;ref<sp/>)<sp/>:<sp/>ExeName()<sp/>{</highlight></codeline>
<codeline lineno="9306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_ref<sp/>=<sp/>std::make_shared&lt;BoundValueRef&lt;std::string&gt;&gt;(<sp/>ref<sp/>);</highlight></codeline>
<codeline lineno="9307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9308"><highlight class="normal"></highlight></codeline>
<codeline lineno="9309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LambdaT&gt;</highlight></codeline>
<codeline lineno="9310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ExeName(<sp/>LambdaT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lambda<sp/>)<sp/>:<sp/>ExeName()<sp/>{</highlight></codeline>
<codeline lineno="9311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_ref<sp/>=<sp/>std::make_shared&lt;BoundLambda&lt;LambdaT&gt;&gt;(<sp/>lambda<sp/>);</highlight></codeline>
<codeline lineno="9312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9313"><highlight class="normal"></highlight></codeline>
<codeline lineno="9314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>exe<sp/>name<sp/>is<sp/>not<sp/>parsed<sp/>out<sp/>of<sp/>the<sp/>normal<sp/>tokens,<sp/>but<sp/>is<sp/>handled<sp/>specially</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parse(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/>TokenStream<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;tokens<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/>InternalParseResult<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>InternalParseResult::ok(<sp/>ParseState(<sp/>ParseResultType::NoMatch,<sp/>tokens<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="9317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9318"><highlight class="normal"></highlight></codeline>
<codeline lineno="9319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>name()<sp/>const<sp/>-&gt;<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*m_name;<sp/>}</highlight></codeline>
<codeline lineno="9320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>set(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>newName<sp/>)<sp/>-&gt;<sp/>ParserResult<sp/>{</highlight></codeline>
<codeline lineno="9321"><highlight class="normal"></highlight></codeline>
<codeline lineno="9322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lastSlash<sp/>=<sp/>newName.find_last_of(<sp/></highlight><highlight class="stringliteral">&quot;\\/&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="9323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>filename<sp/>=<sp/>(<sp/>lastSlash<sp/>==<sp/>std::string::npos<sp/>)</highlight></codeline>
<codeline lineno="9324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>newName</highlight></codeline>
<codeline lineno="9325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>newName.substr(<sp/>lastSlash+1<sp/>);</highlight></codeline>
<codeline lineno="9326"><highlight class="normal"></highlight></codeline>
<codeline lineno="9327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*m_name<sp/>=<sp/>filename;</highlight></codeline>
<codeline lineno="9328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_ref<sp/>)</highlight></codeline>
<codeline lineno="9329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ref-&gt;setValue(<sp/>filename<sp/>);</highlight></codeline>
<codeline lineno="9330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ParserResult::ok(<sp/>ParseResultType::Matched<sp/>);</highlight></codeline>
<codeline lineno="9332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9333"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="9334"><highlight class="normal"></highlight></codeline>
<codeline lineno="9335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Arg<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ParserRefImpl&lt;Arg&gt;<sp/>{</highlight></codeline>
<codeline lineno="9336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ParserRefImpl::ParserRefImpl;</highlight></codeline>
<codeline lineno="9338"><highlight class="normal"></highlight></codeline>
<codeline lineno="9339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parse(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;,<sp/>TokenStream<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;tokens<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/>InternalParseResult<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>validationResult<sp/>=<sp/>validate();</highlight></codeline>
<codeline lineno="9341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!validationResult<sp/>)</highlight></codeline>
<codeline lineno="9342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>InternalParseResult(<sp/>validationResult<sp/>);</highlight></codeline>
<codeline lineno="9343"><highlight class="normal"></highlight></codeline>
<codeline lineno="9344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>remainingTokens<sp/>=<sp/>tokens;</highlight></codeline>
<codeline lineno="9345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;token<sp/>=<sp/>*remainingTokens;</highlight></codeline>
<codeline lineno="9346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>token.type<sp/>!=<sp/>TokenType::Argument<sp/>)</highlight></codeline>
<codeline lineno="9347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>InternalParseResult::ok(<sp/>ParseState(<sp/>ParseResultType::NoMatch,<sp/>remainingTokens<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="9348"><highlight class="normal"></highlight></codeline>
<codeline lineno="9349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>!m_ref-&gt;isFlag()<sp/>);</highlight></codeline>
<codeline lineno="9350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>valueRef<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">detail::BoundValueRefBase*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>m_ref.get()<sp/>);</highlight></codeline>
<codeline lineno="9351"><highlight class="normal"></highlight></codeline>
<codeline lineno="9352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>valueRef-&gt;setValue(<sp/>remainingTokens-&gt;token<sp/>);</highlight></codeline>
<codeline lineno="9353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<ref refid="structresult" kindref="compound">result</ref><sp/>)</highlight></codeline>
<codeline lineno="9354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>InternalParseResult(<sp/><ref refid="structresult" kindref="compound">result</ref><sp/>);</highlight></codeline>
<codeline lineno="9355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>InternalParseResult::ok(<sp/>ParseState(<sp/>ParseResultType::Matched,<sp/>++remainingTokens<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="9357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9358"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="9359"><highlight class="normal"></highlight></codeline>
<codeline lineno="9360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>normaliseOpt(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;optName<sp/>)<sp/>-&gt;<sp/>std::string<sp/>{</highlight></codeline>
<codeline lineno="9361"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CATCH_PLATFORM_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>optName[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal"><sp/>+<sp/>optName.substr(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="9364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9365"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>optName;</highlight></codeline>
<codeline lineno="9367"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9368"><highlight class="normal"></highlight></codeline>
<codeline lineno="9369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Opt<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ParserRefImpl&lt;Opt&gt;<sp/>{</highlight></codeline>
<codeline lineno="9370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>m_optNames;</highlight></codeline>
<codeline lineno="9372"><highlight class="normal"></highlight></codeline>
<codeline lineno="9373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="9374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LambdaT&gt;</highlight></codeline>
<codeline lineno="9375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Opt(<sp/>LambdaT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;ref<sp/>)<sp/>:<sp/>ParserRefImpl(<sp/>std::make_shared&lt;BoundFlagLambda&lt;LambdaT&gt;&gt;(<sp/>ref<sp/>)<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="9376"><highlight class="normal"></highlight></codeline>
<codeline lineno="9377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Opt(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;ref<sp/>)<sp/>:<sp/>ParserRefImpl(<sp/>std::make_shared&lt;BoundFlagRef&gt;(<sp/>ref<sp/>)<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="9378"><highlight class="normal"></highlight></codeline>
<codeline lineno="9379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>LambdaT&gt;</highlight></codeline>
<codeline lineno="9380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Opt(<sp/>LambdaT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;ref,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;hint<sp/>)<sp/>:<sp/>ParserRefImpl(<sp/>ref,<sp/>hint<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="9381"><highlight class="normal"></highlight></codeline>
<codeline lineno="9382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="9383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Opt(<sp/>T<sp/>&amp;ref,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;hint<sp/>)<sp/>:<sp/>ParserRefImpl(<sp/>ref,<sp/>hint<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="9384"><highlight class="normal"></highlight></codeline>
<codeline lineno="9385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator[](<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;optName<sp/>)<sp/>-&gt;<sp/>Opt<sp/>&amp;<sp/>{</highlight></codeline>
<codeline lineno="9386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_optNames.push_back(<sp/>optName<sp/>);</highlight></codeline>
<codeline lineno="9387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9389"><highlight class="normal"></highlight></codeline>
<codeline lineno="9390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>getHelpColumns()<sp/>const<sp/>-&gt;<sp/>std::vector&lt;HelpColumns&gt;<sp/>{</highlight></codeline>
<codeline lineno="9391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>oss;</highlight></codeline>
<codeline lineno="9392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;opt<sp/>:<sp/>m_optNames<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="9394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)</highlight></codeline>
<codeline lineno="9395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oss<sp/>&lt;&lt;<sp/>opt;</highlight></codeline>
<codeline lineno="9399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!m_hint.empty()<sp/>)</highlight></codeline>
<codeline lineno="9401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_hint<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{<sp/>{<sp/>oss.str(),<sp/>m_description<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="9403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9404"><highlight class="normal"></highlight></codeline>
<codeline lineno="9405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>isMatch(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;optToken<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>normalisedToken<sp/>=<sp/>normaliseOpt(<sp/>optToken<sp/>);</highlight></codeline>
<codeline lineno="9407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;name<sp/>:<sp/>m_optNames<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="9408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>normaliseOpt(<sp/>name<sp/>)<sp/>==<sp/>normalisedToken<sp/>)</highlight></codeline>
<codeline lineno="9409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9413"><highlight class="normal"></highlight></codeline>
<codeline lineno="9414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ParserBase::parse;</highlight></codeline>
<codeline lineno="9415"><highlight class="normal"></highlight></codeline>
<codeline lineno="9416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parse(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/>TokenStream<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;tokens<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/>InternalParseResult<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>validationResult<sp/>=<sp/>validate();</highlight></codeline>
<codeline lineno="9418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!validationResult<sp/>)</highlight></codeline>
<codeline lineno="9419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>InternalParseResult(<sp/>validationResult<sp/>);</highlight></codeline>
<codeline lineno="9420"><highlight class="normal"></highlight></codeline>
<codeline lineno="9421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>remainingTokens<sp/>=<sp/>tokens;</highlight></codeline>
<codeline lineno="9422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>remainingTokens<sp/>&amp;&amp;<sp/>remainingTokens-&gt;type<sp/>==<sp/>TokenType::Option<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="9423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;token<sp/>=<sp/>*remainingTokens;</highlight></codeline>
<codeline lineno="9424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>isMatch(token.token<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="9425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_ref-&gt;isFlag()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="9426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>flagRef<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">detail::BoundFlagRefBase*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>m_ref.get()<sp/>);</highlight></codeline>
<codeline lineno="9427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>flagRef-&gt;setFlag(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="9428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<ref refid="structresult" kindref="compound">result</ref><sp/>)</highlight></codeline>
<codeline lineno="9429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>InternalParseResult(<sp/><ref refid="structresult" kindref="compound">result</ref><sp/>);</highlight></codeline>
<codeline lineno="9430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="structresult" kindref="compound">result</ref>.value()<sp/>==<sp/>ParseResultType::ShortCircuitAll<sp/>)</highlight></codeline>
<codeline lineno="9431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>InternalParseResult::ok(<sp/>ParseState(<sp/><ref refid="structresult" kindref="compound">result</ref>.value(),<sp/>remainingTokens<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="9432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>valueRef<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">detail::BoundValueRefBase*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>m_ref.get()<sp/>);</highlight></codeline>
<codeline lineno="9434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++remainingTokens;</highlight></codeline>
<codeline lineno="9435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!remainingTokens<sp/>)</highlight></codeline>
<codeline lineno="9436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>InternalParseResult::runtimeError(<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>argument<sp/>following<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>token.token<sp/>);</highlight></codeline>
<codeline lineno="9437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;argToken<sp/>=<sp/>*remainingTokens;</highlight></codeline>
<codeline lineno="9438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>argToken.type<sp/>!=<sp/>TokenType::Argument<sp/>)</highlight></codeline>
<codeline lineno="9439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>InternalParseResult::runtimeError(<sp/></highlight><highlight class="stringliteral">&quot;Expected<sp/>argument<sp/>following<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>token.token<sp/>);</highlight></codeline>
<codeline lineno="9440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>valueRef-&gt;setValue(<sp/>argToken.token<sp/>);</highlight></codeline>
<codeline lineno="9441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<ref refid="structresult" kindref="compound">result</ref><sp/>)</highlight></codeline>
<codeline lineno="9442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>InternalParseResult(<sp/><ref refid="structresult" kindref="compound">result</ref><sp/>);</highlight></codeline>
<codeline lineno="9443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="structresult" kindref="compound">result</ref>.value()<sp/>==<sp/>ParseResultType::ShortCircuitAll<sp/>)</highlight></codeline>
<codeline lineno="9444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>InternalParseResult::ok(<sp/>ParseState(<sp/><ref refid="structresult" kindref="compound">result</ref>.value(),<sp/>remainingTokens<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="9445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>InternalParseResult::ok(<sp/>ParseState(<sp/>ParseResultType::Matched,<sp/>++remainingTokens<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="9447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>InternalParseResult::ok(<sp/>ParseState(<sp/>ParseResultType::NoMatch,<sp/>remainingTokens<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="9450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9451"><highlight class="normal"></highlight></codeline>
<codeline lineno="9452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>validate()<sp/>const<sp/>-&gt;<sp/>Result</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="9453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_optNames.empty()<sp/>)</highlight></codeline>
<codeline lineno="9454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result::logicError(<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>options<sp/>supplied<sp/>to<sp/>Opt&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="9455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;name<sp/>:<sp/>m_optNames<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="9456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>name.empty()<sp/>)</highlight></codeline>
<codeline lineno="9457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result::logicError(<sp/></highlight><highlight class="stringliteral">&quot;Option<sp/>name<sp/>cannot<sp/>be<sp/>empty&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="9458"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CATCH_PLATFORM_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>name[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>name[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result::logicError(<sp/></highlight><highlight class="stringliteral">&quot;Option<sp/>name<sp/>must<sp/>begin<sp/>with<sp/>&apos;-&apos;<sp/>or<sp/>&apos;/&apos;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="9461"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>name[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result::logicError(<sp/></highlight><highlight class="stringliteral">&quot;Option<sp/>name<sp/>must<sp/>begin<sp/>with<sp/>&apos;-&apos;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="9464"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ParserRefImpl::validate();</highlight></codeline>
<codeline lineno="9467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9468"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="9469"><highlight class="normal"></highlight></codeline>
<codeline lineno="9470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Help<sp/>:<sp/>Opt<sp/>{</highlight></codeline>
<codeline lineno="9471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Help(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;showHelpFlag<sp/>)</highlight></codeline>
<codeline lineno="9472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>Opt([&amp;](<sp/>bool<sp/>flag<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="9473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>showHelpFlag<sp/>=<sp/>flag;</highlight></codeline>
<codeline lineno="9474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ParserResult::ok(<sp/>ParseResultType::ShortCircuitAll<sp/>);</highlight></codeline>
<codeline lineno="9475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="9476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Opt<sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>*this<sp/>)</highlight></codeline>
<codeline lineno="9478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="stringliteral">&quot;display<sp/>usage<sp/>information&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="9479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&quot;-?&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;-h&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;--help&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="9480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.optional();</highlight></codeline>
<codeline lineno="9481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9482"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="9483"><highlight class="normal"></highlight></codeline>
<codeline lineno="9484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Parser<sp/>:<sp/>ParserBase<sp/>{</highlight></codeline>
<codeline lineno="9485"><highlight class="normal"></highlight></codeline>
<codeline lineno="9486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>ExeName<sp/>m_exeName;</highlight></codeline>
<codeline lineno="9487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Opt&gt;<sp/>m_options;</highlight></codeline>
<codeline lineno="9488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Arg&gt;<sp/>m_args;</highlight></codeline>
<codeline lineno="9489"><highlight class="normal"></highlight></codeline>
<codeline lineno="9490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator|=(<sp/>ExeName<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;exeName<sp/>)<sp/>-&gt;<sp/>Parser<sp/>&amp;<sp/>{</highlight></codeline>
<codeline lineno="9491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_exeName<sp/>=<sp/>exeName;</highlight></codeline>
<codeline lineno="9492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9494"><highlight class="normal"></highlight></codeline>
<codeline lineno="9495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator|=(<sp/>Arg<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg<sp/>)<sp/>-&gt;<sp/>Parser<sp/>&amp;<sp/>{</highlight></codeline>
<codeline lineno="9496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_args.push_back(arg);</highlight></codeline>
<codeline lineno="9497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9499"><highlight class="normal"></highlight></codeline>
<codeline lineno="9500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator|=(<sp/>Opt<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;opt<sp/>)<sp/>-&gt;<sp/>Parser<sp/>&amp;<sp/>{</highlight></codeline>
<codeline lineno="9501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_options.push_back(opt);</highlight></codeline>
<codeline lineno="9502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9504"><highlight class="normal"></highlight></codeline>
<codeline lineno="9505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator|=(<sp/>Parser<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;other<sp/>)<sp/>-&gt;<sp/>Parser<sp/>&amp;<sp/>{</highlight></codeline>
<codeline lineno="9506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_options.insert(m_options.end(),<sp/>other.m_options.begin(),<sp/>other.m_options.end());</highlight></codeline>
<codeline lineno="9507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_args.insert(m_args.end(),<sp/>other.m_args.begin(),<sp/>other.m_args.end());</highlight></codeline>
<codeline lineno="9508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9510"><highlight class="normal"></highlight></codeline>
<codeline lineno="9511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="9512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator|(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;other<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/>Parser<sp/>{</highlight></codeline>
<codeline lineno="9513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser(<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>)<sp/>|=<sp/>other;</highlight></codeline>
<codeline lineno="9514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9515"><highlight class="normal"></highlight></codeline>
<codeline lineno="9516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Forward<sp/>deprecated<sp/>interface<sp/>with<sp/>&apos;+&apos;<sp/>instead<sp/>of<sp/>&apos;|&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="9518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator+=(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;other<sp/>)<sp/>-&gt;<sp/>Parser<sp/>&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>operator|=(<sp/>other<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="9519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="9520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator+(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;other<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/>Parser<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>operator|(<sp/>other<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="9521"><highlight class="normal"></highlight></codeline>
<codeline lineno="9522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>getHelpColumns()<sp/>const<sp/>-&gt;<sp/>std::vector&lt;HelpColumns&gt;<sp/>{</highlight></codeline>
<codeline lineno="9523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;HelpColumns&gt;<sp/>cols;</highlight></codeline>
<codeline lineno="9524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;o<sp/>:<sp/>m_options)<sp/>{</highlight></codeline>
<codeline lineno="9525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>childCols<sp/>=<sp/>o.getHelpColumns();</highlight></codeline>
<codeline lineno="9526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cols.insert(<sp/>cols.end(),<sp/>childCols.begin(),<sp/>childCols.end()<sp/>);</highlight></codeline>
<codeline lineno="9527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cols;</highlight></codeline>
<codeline lineno="9529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9530"><highlight class="normal"></highlight></codeline>
<codeline lineno="9531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeToStream(<sp/>std::ostream<sp/>&amp;os<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="9532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_exeName.name().empty())<sp/>{</highlight></codeline>
<codeline lineno="9533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;usage:\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_exeName.name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>required<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>first<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg<sp/>:<sp/>m_args<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="9536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first)</highlight></codeline>
<codeline lineno="9537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>arg.isOptional()<sp/>&amp;&amp;<sp/>required<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="9541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>required<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>arg.hint()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>arg.cardinality()<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="9546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>...<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!required<sp/>)</highlight></codeline>
<codeline lineno="9549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!m_options.empty()<sp/>)</highlight></codeline>
<codeline lineno="9551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>options&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\nwhere<sp/>options<sp/>are:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="9553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9554"><highlight class="normal"></highlight></codeline>
<codeline lineno="9555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rows<sp/>=<sp/>getHelpColumns();</highlight></codeline>
<codeline lineno="9556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>consoleWidth<sp/>=<sp/>CATCH_CLARA_CONFIG_CONSOLE_WIDTH;</highlight></codeline>
<codeline lineno="9557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>optWidth<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;cols<sp/>:<sp/>rows<sp/>)</highlight></codeline>
<codeline lineno="9559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optWidth<sp/>=<sp/>(<ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">std::max</ref>)(optWidth,<sp/>cols.left.size()<sp/>+<sp/>2);</highlight></codeline>
<codeline lineno="9560"><highlight class="normal"></highlight></codeline>
<codeline lineno="9561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optWidth<sp/>=<sp/>(<ref refid="group__core__func__common_1ga2c2bde1cec025b7ddff83c74a1113719" kindref="member">std::min</ref>)(optWidth,<sp/>consoleWidth/2);</highlight></codeline>
<codeline lineno="9562"><highlight class="normal"></highlight></codeline>
<codeline lineno="9563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;cols<sp/>:<sp/>rows<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="9564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>row<sp/>=</highlight></codeline>
<codeline lineno="9565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TextFlow::Column(<sp/>cols.left<sp/>).width(<sp/>optWidth<sp/>).indent(<sp/>2<sp/>)<sp/>+</highlight></codeline>
<codeline lineno="9566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TextFlow::Spacer(4)<sp/>+</highlight></codeline>
<codeline lineno="9567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TextFlow::Column(<sp/>cols.right<sp/>).width(<sp/>consoleWidth<sp/>-<sp/>7<sp/>-<sp/>optWidth<sp/>);</highlight></codeline>
<codeline lineno="9568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>row<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="9569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9571"><highlight class="normal"></highlight></codeline>
<codeline lineno="9572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator&lt;&lt;(<sp/>std::ostream<sp/>&amp;os,<sp/>Parser<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;parser<sp/>)<sp/>-&gt;<sp/>std::ostream&amp;<sp/>{</highlight></codeline>
<codeline lineno="9573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.writeToStream(<sp/>os<sp/>);</highlight></codeline>
<codeline lineno="9574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="9575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9576"><highlight class="normal"></highlight></codeline>
<codeline lineno="9577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>validate()<sp/>const<sp/>-&gt;<sp/>Result</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="9578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;opt<sp/>:<sp/>m_options<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="9579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>opt.validate();</highlight></codeline>
<codeline lineno="9580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<ref refid="structresult" kindref="compound">result</ref><sp/>)</highlight></codeline>
<codeline lineno="9581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="9582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg<sp/>:<sp/>m_args<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="9584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>arg.validate();</highlight></codeline>
<codeline lineno="9585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<ref refid="structresult" kindref="compound">result</ref><sp/>)</highlight></codeline>
<codeline lineno="9586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="9587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result::ok();</highlight></codeline>
<codeline lineno="9589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9590"><highlight class="normal"></highlight></codeline>
<codeline lineno="9591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ParserBase::parse;</highlight></codeline>
<codeline lineno="9592"><highlight class="normal"></highlight></codeline>
<codeline lineno="9593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parse(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>exeName,<sp/>TokenStream<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;tokens<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/>InternalParseResult<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9594"><highlight class="normal"></highlight></codeline>
<codeline lineno="9595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ParserInfo<sp/>{</highlight></codeline>
<codeline lineno="9596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParserBase<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>parser<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="9599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>totalParsers<sp/>=<sp/>m_options.size()<sp/>+<sp/>m_args.size();</highlight></codeline>
<codeline lineno="9600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>totalParsers<sp/>&lt;<sp/>512<sp/>);</highlight></codeline>
<codeline lineno="9601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ParserInfo<sp/>parseInfos[totalParsers];<sp/>//<sp/>&lt;--<sp/>this<sp/>is<sp/>what<sp/>we<sp/>really<sp/>want<sp/>to<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParserInfo<sp/>parseInfos[512];</highlight></codeline>
<codeline lineno="9603"><highlight class="normal"></highlight></codeline>
<codeline lineno="9604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="9606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;opt<sp/>:<sp/>m_options)<sp/>parseInfos[i++].parser<sp/>=<sp/>&amp;opt;</highlight></codeline>
<codeline lineno="9607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;arg<sp/>:<sp/>m_args)<sp/>parseInfos[i++].parser<sp/>=<sp/>&amp;arg;</highlight></codeline>
<codeline lineno="9608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9609"><highlight class="normal"></highlight></codeline>
<codeline lineno="9610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_exeName.set(<sp/>exeName<sp/>);</highlight></codeline>
<codeline lineno="9611"><highlight class="normal"></highlight></codeline>
<codeline lineno="9612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>InternalParseResult::ok(<sp/>ParseState(<sp/>ParseResultType::NoMatch,<sp/>tokens<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="9613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/><ref refid="structresult" kindref="compound">result</ref>.value().remainingTokens()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="9614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>tokenParsed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9615"><highlight class="normal"></highlight></codeline>
<codeline lineno="9616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>totalParsers;<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="9617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><sp/>parseInfo<sp/>=<sp/>parseInfos[i];</highlight></codeline>
<codeline lineno="9618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>parseInfo.parser-&gt;cardinality()<sp/>==<sp/>0<sp/>||<sp/>parseInfo.count<sp/>&lt;<sp/>parseInfo.parser-&gt;cardinality()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="9619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>parseInfo.parser-&gt;parse(exeName,<sp/>result.value().remainingTokens());</highlight></codeline>
<codeline lineno="9620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!result)</highlight></codeline>
<codeline lineno="9621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline lineno="9622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(result.value().type()<sp/>!=<sp/>ParseResultType::NoMatch)<sp/>{</highlight></codeline>
<codeline lineno="9623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tokenParsed<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="9624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++parseInfo.count;</highlight></codeline>
<codeline lineno="9625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="9626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9629"><highlight class="normal"></highlight></codeline>
<codeline lineno="9630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="structresult" kindref="compound">result</ref>.value().type()<sp/>==<sp/>ParseResultType::ShortCircuitAll<sp/>)</highlight></codeline>
<codeline lineno="9631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="9632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!tokenParsed<sp/>)</highlight></codeline>
<codeline lineno="9633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>InternalParseResult::runtimeError(<sp/></highlight><highlight class="stringliteral">&quot;Unrecognised<sp/>token:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="structresult" kindref="compound">result</ref>.value().remainingTokens()-&gt;token<sp/>);</highlight></codeline>
<codeline lineno="9634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>!TBD<sp/>Check<sp/>missing<sp/>required<sp/>options</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="9637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9638"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="9639"><highlight class="normal"></highlight></codeline>
<codeline lineno="9640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DerivedT&gt;</highlight></codeline>
<codeline lineno="9641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="9642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ComposableParserImpl&lt;DerivedT&gt;::operator|(<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;other<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/>Parser<sp/>{</highlight></codeline>
<codeline lineno="9643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Parser()<sp/>|<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">DerivedT<sp/></highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>*this<sp/>)<sp/>|<sp/>other;</highlight></codeline>
<codeline lineno="9644"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9645"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9646"><highlight class="normal"></highlight></codeline>
<codeline lineno="9647"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>Combined<sp/>parser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9648"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>detail::Parser;</highlight></codeline>
<codeline lineno="9649"><highlight class="normal"></highlight></codeline>
<codeline lineno="9650"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>parser<sp/>for<sp/>options</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9651"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>detail::Opt;</highlight></codeline>
<codeline lineno="9652"><highlight class="normal"></highlight></codeline>
<codeline lineno="9653"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>parser<sp/>for<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9654"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>detail::Arg;</highlight></codeline>
<codeline lineno="9655"><highlight class="normal"></highlight></codeline>
<codeline lineno="9656"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Wrapper<sp/>for<sp/>argc,<sp/>argv<sp/>from<sp/>main()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9657"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>detail::Args;</highlight></codeline>
<codeline lineno="9658"><highlight class="normal"></highlight></codeline>
<codeline lineno="9659"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specifies<sp/>the<sp/>name<sp/>of<sp/>the<sp/>executable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9660"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>detail::ExeName;</highlight></codeline>
<codeline lineno="9661"><highlight class="normal"></highlight></codeline>
<codeline lineno="9662"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Convenience<sp/>wrapper<sp/>for<sp/>option<sp/>parser<sp/>that<sp/>specifies<sp/>the<sp/>help<sp/>option</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9663"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>detail::Help;</highlight></codeline>
<codeline lineno="9664"><highlight class="normal"></highlight></codeline>
<codeline lineno="9665"><highlight class="normal"></highlight><highlight class="comment">//<sp/>enum<sp/>of<sp/>result<sp/>types<sp/>from<sp/>a<sp/>parse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9666"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>detail::ParseResultType;</highlight></codeline>
<codeline lineno="9667"><highlight class="normal"></highlight></codeline>
<codeline lineno="9668"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Result<sp/>type<sp/>for<sp/>parser<sp/>operation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9669"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>detail::ParserResult;</highlight></codeline>
<codeline lineno="9670"><highlight class="normal"></highlight></codeline>
<codeline lineno="9671"><highlight class="normal">}}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch::clara</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9672"><highlight class="normal"></highlight></codeline>
<codeline lineno="9673"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>clara.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9674"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9675"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9676"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9677"><highlight class="normal"></highlight></codeline>
<codeline lineno="9678"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Restore<sp/>Clara&apos;s<sp/>value<sp/>for<sp/>console<sp/>width,<sp/>if<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9679"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9680"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CLARA_TEXTFLOW_CONFIG_CONSOLE_WIDTH<sp/>CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9681"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9682"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9683"><highlight class="normal"></highlight></codeline>
<codeline lineno="9684"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_clara.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9685"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="9686"><highlight class="normal"></highlight></codeline>
<codeline lineno="9687"><highlight class="normal"><sp/><sp/><sp/><sp/>clara::Parser<sp/>makeCommandLineParser(<sp/>ConfigData&amp;<sp/>config<sp/>);</highlight></codeline>
<codeline lineno="9688"><highlight class="normal"></highlight></codeline>
<codeline lineno="9689"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9690"><highlight class="normal"></highlight></codeline>
<codeline lineno="9691"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_commandline.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9692"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9693"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctime&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9694"><highlight class="normal"></highlight></codeline>
<codeline lineno="9695"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="9696"><highlight class="normal"></highlight></codeline>
<codeline lineno="9697"><highlight class="normal"><sp/><sp/><sp/><sp/>clara::Parser<sp/>makeCommandLineParser(<sp/>ConfigData&amp;<sp/>config<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="9698"><highlight class="normal"></highlight></codeline>
<codeline lineno="9699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">clara;</highlight></codeline>
<codeline lineno="9700"><highlight class="normal"></highlight></codeline>
<codeline lineno="9701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>setWarning<sp/>=<sp/>[&amp;](<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>warning<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="9702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>warningSet<sp/>=<sp/>[&amp;]()<sp/>{</highlight></codeline>
<codeline lineno="9703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>warning<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;NoAssertions&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>WarnAbout::NoAssertions;</highlight></codeline>
<codeline lineno="9705"><highlight class="normal"></highlight></codeline>
<codeline lineno="9706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>warning<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;NoTests&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>WarnAbout::NoTests;</highlight></codeline>
<codeline lineno="9708"><highlight class="normal"></highlight></codeline>
<codeline lineno="9709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>WarnAbout::Nothing;</highlight></codeline>
<codeline lineno="9710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}();</highlight></codeline>
<codeline lineno="9711"><highlight class="normal"></highlight></codeline>
<codeline lineno="9712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(warningSet<sp/>==<sp/>WarnAbout::Nothing)</highlight></codeline>
<codeline lineno="9713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ParserResult::runtimeError(<sp/></highlight><highlight class="stringliteral">&quot;Unrecognised<sp/>warning:<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>warning<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="9714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.warnings<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">WarnAbout::What</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>config.warnings<sp/>|<sp/>warningSet<sp/>);</highlight></codeline>
<codeline lineno="9715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ParserResult::ok(<sp/>ParseResultType::Matched<sp/>);</highlight></codeline>
<codeline lineno="9716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="9717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>loadTestNamesFromFile<sp/>=<sp/>[&amp;](<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>filename<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="9718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ifstream<sp/>f(<sp/>filename.c_str()<sp/>);</highlight></codeline>
<codeline lineno="9719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!f.is_open()<sp/>)</highlight></codeline>
<codeline lineno="9720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ParserResult::runtimeError(<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>load<sp/>input<sp/>file:<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>filename<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="9721"><highlight class="normal"></highlight></codeline>
<codeline lineno="9722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>line;</highlight></codeline>
<codeline lineno="9723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>std::getline(<sp/>f,<sp/>line<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="9724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line<sp/>=<sp/>trim(line);</highlight></codeline>
<codeline lineno="9725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!line.empty()<sp/>&amp;&amp;<sp/>!startsWith(<sp/>line,<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="9726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!startsWith(<sp/>line,<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal"><sp/>)<sp/>)</highlight></codeline>
<codeline lineno="9727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line<sp/>=<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal"><sp/>+<sp/>line<sp/>+<sp/>&apos;&quot;&apos;;</highlight></codeline>
<codeline lineno="9728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.testsOrTags.push_back(<sp/>line<sp/>);</highlight></codeline>
<codeline lineno="9729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.testsOrTags.emplace_back(<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="9730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Remove<sp/>comma<sp/>in<sp/>the<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!config.testsOrTags.empty())</highlight></codeline>
<codeline lineno="9734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.testsOrTags.erase(<sp/>config.testsOrTags.end()-1<sp/>);</highlight></codeline>
<codeline lineno="9735"><highlight class="normal"></highlight></codeline>
<codeline lineno="9736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ParserResult::ok(<sp/>ParseResultType::Matched<sp/>);</highlight></codeline>
<codeline lineno="9737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="9738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>setTestOrder<sp/>=<sp/>[&amp;](<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>order<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="9739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>startsWith(<sp/></highlight><highlight class="stringliteral">&quot;declared&quot;</highlight><highlight class="normal">,<sp/>order<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="9740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.runOrder<sp/>=<sp/>RunTests::InDeclarationOrder;</highlight></codeline>
<codeline lineno="9741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>startsWith(<sp/></highlight><highlight class="stringliteral">&quot;lexical&quot;</highlight><highlight class="normal">,<sp/>order<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="9742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.runOrder<sp/>=<sp/>RunTests::InLexicographicalOrder;</highlight></codeline>
<codeline lineno="9743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>startsWith(<sp/></highlight><highlight class="stringliteral">&quot;random&quot;</highlight><highlight class="normal">,<sp/>order<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="9744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.runOrder<sp/>=<sp/>RunTests::InRandomOrder;</highlight></codeline>
<codeline lineno="9745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>clara::ParserResult::runtimeError(<sp/></highlight><highlight class="stringliteral">&quot;Unrecognised<sp/>ordering:<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>order<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="9747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ParserResult::ok(<sp/>ParseResultType::Matched<sp/>);</highlight></codeline>
<codeline lineno="9748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="9749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>setRngSeed<sp/>=<sp/>[&amp;](<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>seed<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="9750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>seed<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>clara::detail::convertInto(<sp/>seed,<sp/>config.rngSeed<sp/>);</highlight></codeline>
<codeline lineno="9752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.rngSeed<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>std::time(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>);</highlight></codeline>
<codeline lineno="9753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ParserResult::ok(<sp/>ParseResultType::Matched<sp/>);</highlight></codeline>
<codeline lineno="9754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="9755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>setColourUsage<sp/>=<sp/>[&amp;](<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>useColour<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="9756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mode<sp/>=<sp/>toLower(<sp/>useColour<sp/>);</highlight></codeline>
<codeline lineno="9757"><highlight class="normal"></highlight></codeline>
<codeline lineno="9758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>mode<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.useColour<sp/>=<sp/>UseColour::Yes;</highlight></codeline>
<codeline lineno="9760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>mode<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.useColour<sp/>=<sp/>UseColour::No;</highlight></codeline>
<codeline lineno="9762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>mode<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;auto&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.useColour<sp/>=<sp/>UseColour::Auto;</highlight></codeline>
<codeline lineno="9764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ParserResult::runtimeError(<sp/></highlight><highlight class="stringliteral">&quot;colour<sp/>mode<sp/>must<sp/>be<sp/>one<sp/>of:<sp/>auto,<sp/>yes<sp/>or<sp/>no.<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>useColour<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>not<sp/>recognised&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="9766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ParserResult::ok(<sp/>ParseResultType::Matched<sp/>);</highlight></codeline>
<codeline lineno="9767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="9768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>setWaitForKeypress<sp/>=<sp/>[&amp;](<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>keypress<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="9769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>keypressLc<sp/>=<sp/>toLower(<sp/>keypress<sp/>);</highlight></codeline>
<codeline lineno="9770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(keypressLc<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;never&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="9771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.waitForKeypress<sp/>=<sp/>WaitForKeypress::Never;</highlight></codeline>
<codeline lineno="9772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>keypressLc<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;start&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.waitForKeypress<sp/>=<sp/>WaitForKeypress::BeforeStart;</highlight></codeline>
<codeline lineno="9774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>keypressLc<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;exit&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.waitForKeypress<sp/>=<sp/>WaitForKeypress::BeforeExit;</highlight></codeline>
<codeline lineno="9776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>keypressLc<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;both&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.waitForKeypress<sp/>=<sp/>WaitForKeypress::BeforeStartAndExit;</highlight></codeline>
<codeline lineno="9778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ParserResult::runtimeError(<sp/></highlight><highlight class="stringliteral">&quot;keypress<sp/>argument<sp/>must<sp/>be<sp/>one<sp/>of:<sp/>never,<sp/>start,<sp/>exit<sp/>or<sp/>both.<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>keypress<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>not<sp/>recognised&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="9780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ParserResult::ok(<sp/>ParseResultType::Matched<sp/>);</highlight></codeline>
<codeline lineno="9781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="9782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>setVerbosity<sp/>=<sp/>[&amp;](<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>verbosity<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="9783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lcVerbosity<sp/>=<sp/>toLower(<sp/>verbosity<sp/>);</highlight></codeline>
<codeline lineno="9784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>lcVerbosity<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;quiet&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.verbosity<sp/>=<sp/>Verbosity::Quiet;</highlight></codeline>
<codeline lineno="9786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>lcVerbosity<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;normal&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.verbosity<sp/>=<sp/>Verbosity::Normal;</highlight></codeline>
<codeline lineno="9788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>lcVerbosity<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;high&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.verbosity<sp/>=<sp/>Verbosity::High;</highlight></codeline>
<codeline lineno="9790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ParserResult::runtimeError(<sp/></highlight><highlight class="stringliteral">&quot;Unrecognised<sp/>verbosity,<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>verbosity<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="9792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ParserResult::ok(<sp/>ParseResultType::Matched<sp/>);</highlight></codeline>
<codeline lineno="9793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="9794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>setReporter<sp/>=<sp/>[&amp;](<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>reporter<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="9795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IReporterRegistry::FactoryMap<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>factories<sp/>=<sp/>getRegistryHub().getReporterRegistry().getFactories();</highlight></codeline>
<codeline lineno="9796"><highlight class="normal"></highlight></codeline>
<codeline lineno="9797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lcReporter<sp/>=<sp/>toLower(<sp/>reporter<sp/>);</highlight></codeline>
<codeline lineno="9798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>factories.find(<sp/>lcReporter<sp/>);</highlight></codeline>
<codeline lineno="9799"><highlight class="normal"></highlight></codeline>
<codeline lineno="9800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>factories.end()<sp/>!=<sp/><ref refid="structresult" kindref="compound">result</ref><sp/>)</highlight></codeline>
<codeline lineno="9801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.reporterName<sp/>=<sp/>lcReporter;</highlight></codeline>
<codeline lineno="9802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ParserResult::runtimeError(<sp/></highlight><highlight class="stringliteral">&quot;Unrecognized<sp/>reporter,<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>+<sp/>reporter<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;&apos;.<sp/>Check<sp/>available<sp/>with<sp/>--list-reporters&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="9804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ParserResult::ok(<sp/>ParseResultType::Matched<sp/>);</highlight></codeline>
<codeline lineno="9805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="9806"><highlight class="normal"></highlight></codeline>
<codeline lineno="9807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cli</highlight></codeline>
<codeline lineno="9808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ExeName(<sp/>config.processName<sp/>)</highlight></codeline>
<codeline lineno="9809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Help(<sp/>config.showHelp<sp/>)</highlight></codeline>
<codeline lineno="9810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Opt(<sp/>config.listTests<sp/>)</highlight></codeline>
<codeline lineno="9811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&quot;-l&quot;][&quot;--list-tests&quot;]</highlight></codeline>
<codeline lineno="9812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;list<sp/>all/matching<sp/>test<sp/>cases&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Opt(<sp/>config.listTags<sp/>)</highlight></codeline>
<codeline lineno="9814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&quot;-t&quot;][&quot;--list-tags&quot;]</highlight></codeline>
<codeline lineno="9815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;list<sp/>all/matching<sp/>tags&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Opt(<sp/>config.showSuccessfulTests<sp/>)</highlight></codeline>
<codeline lineno="9817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&quot;-s&quot;][&quot;--success&quot;]</highlight></codeline>
<codeline lineno="9818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;include<sp/>successful<sp/>tests<sp/>in<sp/>output&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Opt(<sp/>config.shouldDebugBreak<sp/>)</highlight></codeline>
<codeline lineno="9820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&quot;-b&quot;][&quot;--break&quot;]</highlight></codeline>
<codeline lineno="9821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;break<sp/>into<sp/>debugger<sp/>on<sp/>failure&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Opt(<sp/>config.noThrow<sp/>)</highlight></codeline>
<codeline lineno="9823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&quot;-e&quot;][&quot;--nothrow&quot;]</highlight></codeline>
<codeline lineno="9824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;skip<sp/>exception<sp/>tests&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Opt(<sp/>config.showInvisibles<sp/>)</highlight></codeline>
<codeline lineno="9826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&quot;-i&quot;][&quot;--invisibles&quot;]</highlight></codeline>
<codeline lineno="9827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;show<sp/>invisibles<sp/>(tabs,<sp/>newlines)&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Opt(<sp/>config.outputFilename,<sp/></highlight><highlight class="stringliteral">&quot;filename&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&quot;-o&quot;][&quot;--out&quot;]</highlight></codeline>
<codeline lineno="9830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;output<sp/>filename&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Opt(<sp/>setReporter,<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&quot;-r&quot;][&quot;--reporter&quot;]</highlight></codeline>
<codeline lineno="9833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;reporter<sp/>to<sp/>use<sp/>(defaults<sp/>to<sp/>console)&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Opt(<sp/>config.name,<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&quot;-n&quot;][&quot;--name&quot;]</highlight></codeline>
<codeline lineno="9836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;suite<sp/>name&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Opt(<sp/>[&amp;](<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>){<sp/>config.abortAfter<sp/>=<sp/>1;<sp/>}<sp/>)</highlight></codeline>
<codeline lineno="9838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&quot;-a&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;--abort&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="9839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;abort<sp/>at<sp/>first<sp/>failure&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Opt(<sp/>[&amp;](<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>){<sp/>config.abortAfter<sp/>=<sp/>x;<sp/>},<sp/></highlight><highlight class="stringliteral">&quot;no.<sp/>failures&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&quot;-x&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;--abortx&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="9842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;abort<sp/>after<sp/>x<sp/>failures&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Opt(<sp/>setWarning,<sp/></highlight><highlight class="stringliteral">&quot;warning<sp/>name&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&quot;-w&quot;][&quot;--warn&quot;]</highlight></codeline>
<codeline lineno="9845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;enable<sp/>warnings&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Opt(<sp/>[&amp;](<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>flag<sp/>)<sp/>{<sp/>config.showDurations<sp/>=<sp/>flag<sp/>?<sp/>ShowDurations::Always<sp/>:<sp/>ShowDurations::Never;<sp/>},<sp/></highlight><highlight class="stringliteral">&quot;yes|no&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="stringliteral">&quot;-d&quot;</highlight><highlight class="normal">][</highlight><highlight class="stringliteral">&quot;--durations&quot;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="9848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;show<sp/>test<sp/>durations&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Opt(<sp/>config.minDuration,<sp/></highlight><highlight class="stringliteral">&quot;seconds&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&quot;-D&quot;][&quot;--min-duration&quot;]</highlight></codeline>
<codeline lineno="9851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;show<sp/>test<sp/>durations<sp/>for<sp/>tests<sp/>taking<sp/>at<sp/>least<sp/>the<sp/>given<sp/>number<sp/>of<sp/>seconds&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Opt(<sp/>loadTestNamesFromFile,<sp/></highlight><highlight class="stringliteral">&quot;filename&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&quot;-f&quot;][&quot;--input-file&quot;]</highlight></codeline>
<codeline lineno="9854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;load<sp/>test<sp/>names<sp/>to<sp/>run<sp/>from<sp/>a<sp/>file&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Opt(<sp/>config.filenamesAsTags<sp/>)</highlight></codeline>
<codeline lineno="9856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&quot;-#&quot;][&quot;--filenames-as-tags&quot;]</highlight></codeline>
<codeline lineno="9857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;adds<sp/>a<sp/>tag<sp/>for<sp/>the<sp/>filename&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Opt(<sp/>config.sectionsToRun,<sp/></highlight><highlight class="stringliteral">&quot;section<sp/>name&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&quot;-c&quot;][&quot;--section&quot;]</highlight></codeline>
<codeline lineno="9860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;specify<sp/>section<sp/>to<sp/>run&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Opt(<sp/>setVerbosity,<sp/></highlight><highlight class="stringliteral">&quot;quiet|normal|high&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&quot;-v&quot;][&quot;--verbosity&quot;]</highlight></codeline>
<codeline lineno="9863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;set<sp/>output<sp/>verbosity&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Opt(<sp/>config.listTestNamesOnly<sp/>)</highlight></codeline>
<codeline lineno="9865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&quot;--list-test-names-only&quot;]</highlight></codeline>
<codeline lineno="9866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;list<sp/>all/matching<sp/>test<sp/>cases<sp/>names<sp/>only&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Opt(<sp/>config.listReporters<sp/>)</highlight></codeline>
<codeline lineno="9868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&quot;--list-reporters&quot;]</highlight></codeline>
<codeline lineno="9869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;list<sp/>all<sp/>reporters&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Opt(<sp/>setTestOrder,<sp/></highlight><highlight class="stringliteral">&quot;decl|lex|rand&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&quot;--order&quot;]</highlight></codeline>
<codeline lineno="9872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;test<sp/>case<sp/>order<sp/>(defaults<sp/>to<sp/>decl)&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Opt(<sp/>setRngSeed,<sp/></highlight><highlight class="stringliteral">&quot;&apos;time&apos;|number&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&quot;--rng-seed&quot;]</highlight></codeline>
<codeline lineno="9875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;set<sp/>a<sp/>specific<sp/>seed<sp/>for<sp/>random<sp/>numbers&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Opt(<sp/>setColourUsage,<sp/></highlight><highlight class="stringliteral">&quot;yes|no&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&quot;--use-colour&quot;]</highlight></codeline>
<codeline lineno="9878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;should<sp/>output<sp/>be<sp/>colourised&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Opt(<sp/>config.libIdentify<sp/>)</highlight></codeline>
<codeline lineno="9880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&quot;--libidentify&quot;]</highlight></codeline>
<codeline lineno="9881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;report<sp/>name<sp/>and<sp/>version<sp/>according<sp/>to<sp/>libidentify<sp/>standard&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Opt(<sp/>setWaitForKeypress,<sp/></highlight><highlight class="stringliteral">&quot;never|start|exit|both&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&quot;--wait-for-keypress&quot;]</highlight></codeline>
<codeline lineno="9884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;waits<sp/>for<sp/>a<sp/>keypress<sp/>before<sp/>exiting&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Opt(<sp/>config.benchmarkSamples,<sp/></highlight><highlight class="stringliteral">&quot;samples&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&quot;--benchmark-samples&quot;]</highlight></codeline>
<codeline lineno="9887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;number<sp/>of<sp/>samples<sp/>to<sp/>collect<sp/>(default:<sp/>100)&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Opt(<sp/>config.benchmarkResamples,<sp/></highlight><highlight class="stringliteral">&quot;resamples&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&quot;--benchmark-resamples&quot;]</highlight></codeline>
<codeline lineno="9890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;number<sp/>of<sp/>resamples<sp/>for<sp/>the<sp/>bootstrap<sp/>(default:<sp/>100000)&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Opt(<sp/>config.benchmarkConfidenceInterval,<sp/></highlight><highlight class="stringliteral">&quot;confidence<sp/>interval&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&quot;--benchmark-confidence-interval&quot;]</highlight></codeline>
<codeline lineno="9893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;confidence<sp/>interval<sp/>for<sp/>the<sp/>bootstrap<sp/>(between<sp/>0<sp/>and<sp/>1,<sp/>default:<sp/>0.95)&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Opt(<sp/>config.benchmarkNoAnalysis<sp/>)</highlight></codeline>
<codeline lineno="9895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&quot;--benchmark-no-analysis&quot;]</highlight></codeline>
<codeline lineno="9896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;perform<sp/>only<sp/>measurements;<sp/>do<sp/>not<sp/>perform<sp/>any<sp/>analysis&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Opt(<sp/>config.benchmarkWarmupTime,<sp/></highlight><highlight class="stringliteral">&quot;benchmarkWarmupTime&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&quot;--benchmark-warmup-time&quot;]</highlight></codeline>
<codeline lineno="9899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;amount<sp/>of<sp/>time<sp/>in<sp/>milliseconds<sp/>spent<sp/>on<sp/>warming<sp/>up<sp/>each<sp/>test<sp/>(default:<sp/>100)&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Arg(<sp/>config.testsOrTags,<sp/></highlight><highlight class="stringliteral">&quot;test<sp/>name|pattern|tags&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="9901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="stringliteral">&quot;which<sp/>test<sp/>or<sp/>tests<sp/>to<sp/>use&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="9902"><highlight class="normal"></highlight></codeline>
<codeline lineno="9903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cli;</highlight></codeline>
<codeline lineno="9904"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9905"><highlight class="normal"></highlight></codeline>
<codeline lineno="9906"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9907"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_commandline.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9908"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_common.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9909"><highlight class="normal"></highlight></codeline>
<codeline lineno="9910"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9911"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9912"><highlight class="normal"></highlight></codeline>
<codeline lineno="9913"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="9914"><highlight class="normal"></highlight></codeline>
<codeline lineno="9915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SourceLineInfo::operator<sp/>==<sp/>(<sp/>SourceLineInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>line<sp/>==<sp/>other.line<sp/>&amp;&amp;<sp/>(file<sp/>==<sp/>other.file<sp/>||<sp/>std::strcmp(file,<sp/>other.file)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="9917"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SourceLineInfo::operator<sp/>&lt;<sp/>(<sp/>SourceLineInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="9919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>assume<sp/>that<sp/>the<sp/>same<sp/>file<sp/>will<sp/>usually<sp/>have<sp/>the<sp/>same<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Thus,<sp/>if<sp/>the<sp/>pointers<sp/>are<sp/>the<sp/>same,<sp/>there<sp/>is<sp/>no<sp/>point<sp/>in<sp/>calling<sp/>the<sp/>strcmp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>line<sp/>&lt;<sp/>other.line<sp/>||<sp/>(<sp/>line<sp/>==<sp/>other.line<sp/>&amp;&amp;<sp/>file<sp/>!=<sp/>other.file<sp/>&amp;&amp;<sp/>(std::strcmp(file,<sp/>other.file)<sp/>&lt;<sp/>0));</highlight></codeline>
<codeline lineno="9922"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9923"><highlight class="normal"></highlight></codeline>
<codeline lineno="9924"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/>operator<sp/>&lt;&lt;<sp/>(<sp/>std::ostream&amp;<sp/>os,<sp/>SourceLineInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="9925"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__GNUG__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/><ref refid="structinfo" kindref="compound">info</ref>.file<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="structinfo" kindref="compound">info</ref>.line<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9927"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/><ref refid="structinfo" kindref="compound">info</ref>.file<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="structinfo" kindref="compound">info</ref>.line;</highlight></codeline>
<codeline lineno="9929"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="9931"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9932"><highlight class="normal"></highlight></codeline>
<codeline lineno="9933"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>StreamEndStop::operator+()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="9934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string();</highlight></codeline>
<codeline lineno="9935"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9936"><highlight class="normal"></highlight></codeline>
<codeline lineno="9937"><highlight class="normal"><sp/><sp/><sp/><sp/>NonCopyable::NonCopyable()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9938"><highlight class="normal"><sp/><sp/><sp/><sp/>NonCopyable::~NonCopyable()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9939"><highlight class="normal"></highlight></codeline>
<codeline lineno="9940"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9941"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_common.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9942"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_config.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9943"><highlight class="normal"></highlight></codeline>
<codeline lineno="9944"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="9945"><highlight class="normal"></highlight></codeline>
<codeline lineno="9946"><highlight class="normal"><sp/><sp/><sp/><sp/>Config::Config(<sp/>ConfigData<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>data<sp/>)</highlight></codeline>
<codeline lineno="9947"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>m_data(<sp/>data<sp/>),</highlight></codeline>
<codeline lineno="9948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_stream(<sp/>openStream()<sp/>)</highlight></codeline>
<codeline lineno="9949"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>to<sp/>trim<sp/>filter<sp/>specs<sp/>to<sp/>avoid<sp/>trouble<sp/>with<sp/>superfluous</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>whitespace<sp/>(esp.<sp/>important<sp/>for<sp/>bdd<sp/>macros,<sp/>as<sp/>those<sp/>are<sp/>manually</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>aligned<sp/>with<sp/>whitespace).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9953"><highlight class="normal"></highlight></codeline>
<codeline lineno="9954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>elem<sp/>:<sp/>m_data.testsOrTags)<sp/>{</highlight></codeline>
<codeline lineno="9955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elem<sp/>=<sp/>trim(elem);</highlight></codeline>
<codeline lineno="9956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>elem<sp/>:<sp/>m_data.sectionsToRun)<sp/>{</highlight></codeline>
<codeline lineno="9958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elem<sp/>=<sp/>trim(elem);</highlight></codeline>
<codeline lineno="9959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9960"><highlight class="normal"></highlight></codeline>
<codeline lineno="9961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestSpecParser<sp/>parser(ITagAliasRegistry::get());</highlight></codeline>
<codeline lineno="9962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_data.testsOrTags.empty())<sp/>{</highlight></codeline>
<codeline lineno="9963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_hasTestFilters<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testOrTags<sp/>:<sp/>m_data.testsOrTags)<sp/>{</highlight></codeline>
<codeline lineno="9965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parser.parse(testOrTags);</highlight></codeline>
<codeline lineno="9966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_testSpec<sp/>=<sp/>parser.testSpec();</highlight></codeline>
<codeline lineno="9969"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9970"><highlight class="normal"></highlight></codeline>
<codeline lineno="9971"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Config::getFilename()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="9972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_data.outputFilename<sp/>;</highlight></codeline>
<codeline lineno="9973"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="9974"><highlight class="normal"></highlight></codeline>
<codeline lineno="9975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Config::listTests()</highlight><highlight class="keyword"><sp/>const<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_data.listTests;<sp/>}</highlight></codeline>
<codeline lineno="9976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Config::listTestNamesOnly()</highlight><highlight class="keyword"><sp/>const<sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_data.listTestNamesOnly;<sp/>}</highlight></codeline>
<codeline lineno="9977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Config::listTags()</highlight><highlight class="keyword"><sp/>const<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_data.listTags;<sp/>}</highlight></codeline>
<codeline lineno="9978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Config::listReporters()</highlight><highlight class="keyword"><sp/>const<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_data.listReporters;<sp/>}</highlight></codeline>
<codeline lineno="9979"><highlight class="normal"></highlight></codeline>
<codeline lineno="9980"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>Config::getProcessName()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_data.processName;<sp/>}</highlight></codeline>
<codeline lineno="9981"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Config::getReporterName()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_data.reporterName;<sp/>}</highlight></codeline>
<codeline lineno="9982"><highlight class="normal"></highlight></codeline>
<codeline lineno="9983"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Config::getTestsOrTags()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_data.testsOrTags;<sp/>}</highlight></codeline>
<codeline lineno="9984"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Config::getSectionsToRun()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_data.sectionsToRun;<sp/>}</highlight></codeline>
<codeline lineno="9985"><highlight class="normal"></highlight></codeline>
<codeline lineno="9986"><highlight class="normal"><sp/><sp/><sp/><sp/>TestSpec<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Config::testSpec()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_testSpec;<sp/>}</highlight></codeline>
<codeline lineno="9987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Config::hasTestFilters()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_hasTestFilters;<sp/>}</highlight></codeline>
<codeline lineno="9988"><highlight class="normal"></highlight></codeline>
<codeline lineno="9989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Config::showHelp()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_data.showHelp;<sp/>}</highlight></codeline>
<codeline lineno="9990"><highlight class="normal"></highlight></codeline>
<codeline lineno="9991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>IConfig<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Config::allowThrows()</highlight><highlight class="keyword"><sp/>const<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!m_data.noThrow;<sp/>}</highlight></codeline>
<codeline lineno="9993"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/>Config::stream()</highlight><highlight class="keyword"><sp/>const<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_stream-&gt;stream();<sp/>}</highlight></codeline>
<codeline lineno="9994"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>Config::name()</highlight><highlight class="keyword"><sp/>const<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_data.name.empty()<sp/>?<sp/>m_data.processName<sp/>:<sp/>m_data.name;<sp/>}</highlight></codeline>
<codeline lineno="9995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Config::includeSuccessfulResults()</highlight><highlight class="keyword"><sp/>const<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_data.showSuccessfulTests;<sp/>}</highlight></codeline>
<codeline lineno="9996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Config::warnAboutMissingAssertions()</highlight><highlight class="keyword"><sp/>const<sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!!(m_data.warnings<sp/>&amp;<sp/>WarnAbout::NoAssertions);<sp/>}</highlight></codeline>
<codeline lineno="9997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Config::warnAboutNoTests()</highlight><highlight class="keyword"><sp/>const<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!!(m_data.warnings<sp/>&amp;<sp/>WarnAbout::NoTests);<sp/>}</highlight></codeline>
<codeline lineno="9998"><highlight class="normal"><sp/><sp/><sp/><sp/>ShowDurations::OrNot<sp/>Config::showDurations()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_data.showDurations;<sp/>}</highlight></codeline>
<codeline lineno="9999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Config::minDuration()</highlight><highlight class="keyword"><sp/>const<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_data.minDuration;<sp/>}</highlight></codeline>
<codeline lineno="10000"><highlight class="normal"><sp/><sp/><sp/><sp/>RunTests::InWhatOrder<sp/>Config::runOrder()</highlight><highlight class="keyword"><sp/>const<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_data.runOrder;<sp/>}</highlight></codeline>
<codeline lineno="10001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Config::rngSeed()</highlight><highlight class="keyword"><sp/>const<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_data.rngSeed;<sp/>}</highlight></codeline>
<codeline lineno="10002"><highlight class="normal"><sp/><sp/><sp/><sp/>UseColour::YesOrNo<sp/>Config::useColour()</highlight><highlight class="keyword"><sp/>const<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_data.useColour;<sp/>}</highlight></codeline>
<codeline lineno="10003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Config::shouldDebugBreak()</highlight><highlight class="keyword"><sp/>const<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_data.shouldDebugBreak;<sp/>}</highlight></codeline>
<codeline lineno="10004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Config::abortAfter()</highlight><highlight class="keyword"><sp/>const<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_data.abortAfter;<sp/>}</highlight></codeline>
<codeline lineno="10005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Config::showInvisibles()</highlight><highlight class="keyword"><sp/>const<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_data.showInvisibles;<sp/>}</highlight></codeline>
<codeline lineno="10006"><highlight class="normal"><sp/><sp/><sp/><sp/>Verbosity<sp/>Config::verbosity()</highlight><highlight class="keyword"><sp/>const<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_data.verbosity;<sp/>}</highlight></codeline>
<codeline lineno="10007"><highlight class="normal"></highlight></codeline>
<codeline lineno="10008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Config::benchmarkNoAnalysis()</highlight><highlight class="keyword"><sp/>const<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_data.benchmarkNoAnalysis;<sp/>}</highlight></codeline>
<codeline lineno="10009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Config::benchmarkSamples()</highlight><highlight class="keyword"><sp/>const<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_data.benchmarkSamples;<sp/>}</highlight></codeline>
<codeline lineno="10010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Config::benchmarkConfidenceInterval()</highlight><highlight class="keyword"><sp/>const<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_data.benchmarkConfidenceInterval;<sp/>}</highlight></codeline>
<codeline lineno="10011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Config::benchmarkResamples()</highlight><highlight class="keyword"><sp/>const<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_data.benchmarkResamples;<sp/>}</highlight></codeline>
<codeline lineno="10012"><highlight class="normal"><sp/><sp/><sp/><sp/>std::chrono::milliseconds<sp/>Config::benchmarkWarmupTime()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::chrono::milliseconds(m_data.benchmarkWarmupTime);<sp/>}</highlight></codeline>
<codeline lineno="10013"><highlight class="normal"></highlight></codeline>
<codeline lineno="10014"><highlight class="normal"><sp/><sp/><sp/><sp/>IStream<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>Config::openStream()<sp/>{</highlight></codeline>
<codeline lineno="10015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Catch::makeStream(m_data.outputFilename);</highlight></codeline>
<codeline lineno="10016"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10017"><highlight class="normal"></highlight></codeline>
<codeline lineno="10018"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10019"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_config.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10020"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_console_colour.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10021"><highlight class="normal"></highlight></codeline>
<codeline lineno="10022"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10023"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>clang<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10024"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wexit-time-destructors&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10025"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10026"><highlight class="normal"></highlight></codeline>
<codeline lineno="10027"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_errno_guard.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10028"><highlight class="normal"></highlight></codeline>
<codeline lineno="10029"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="10030"><highlight class="normal"></highlight></codeline>
<codeline lineno="10031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ErrnoGuard<sp/>{</highlight></codeline>
<codeline lineno="10032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="10033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ErrnoGuard();</highlight></codeline>
<codeline lineno="10034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~ErrnoGuard();</highlight></codeline>
<codeline lineno="10035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="10036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_oldErrno;</highlight></codeline>
<codeline lineno="10037"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="10038"><highlight class="normal"></highlight></codeline>
<codeline lineno="10039"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10040"><highlight class="normal"></highlight></codeline>
<codeline lineno="10041"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_errno_guard.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10042"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_windows_h_proxy.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10043"><highlight class="normal"></highlight></codeline>
<codeline lineno="10044"><highlight class="normal"></highlight></codeline>
<codeline lineno="10045"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_PLATFORM_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10046"><highlight class="normal"></highlight></codeline>
<codeline lineno="10047"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(NOMINMAX)<sp/>&amp;&amp;<sp/>!defined(CATCH_CONFIG_NO_NOMINMAX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10048"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CATCH_DEFINED_NOMINMAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10049"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>NOMINMAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10050"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10051"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(WIN32_LEAN_AND_MEAN)<sp/>&amp;&amp;<sp/>!defined(CATCH_CONFIG_NO_WIN32_LEAN_AND_MEAN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10052"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CATCH_DEFINED_WIN32_LEAN_AND_MEAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10053"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>WIN32_LEAN_AND_MEAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10054"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10055"><highlight class="normal"></highlight></codeline>
<codeline lineno="10056"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__AFXDLL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10057"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;AfxWin.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10058"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10059"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10060"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10061"><highlight class="normal"></highlight></codeline>
<codeline lineno="10062"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CATCH_DEFINED_NOMINMAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10063"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/>NOMINMAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10064"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10065"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CATCH_DEFINED_WIN32_LEAN_AND_MEAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10066"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/>WIN32_LEAN_AND_MEAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10067"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10068"><highlight class="normal"></highlight></codeline>
<codeline lineno="10069"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(CATCH_PLATFORM_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10070"><highlight class="normal"></highlight></codeline>
<codeline lineno="10071"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_windows_h_proxy.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10072"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10073"><highlight class="normal"></highlight></codeline>
<codeline lineno="10074"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="10075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="10076"><highlight class="normal"></highlight></codeline>
<codeline lineno="10077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IColourImpl<sp/>{</highlight></codeline>
<codeline lineno="10078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~IColourImpl()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>use(<sp/>Colour::Code<sp/>_colourCode<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="10080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="10081"><highlight class="normal"></highlight></codeline>
<codeline lineno="10082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">NoColourImpl<sp/>:<sp/>IColourImpl<sp/>{</highlight></codeline>
<codeline lineno="10083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>use(<sp/>Colour::Code<sp/>)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="10084"><highlight class="normal"></highlight></codeline>
<codeline lineno="10085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>IColourImpl*<sp/>instance()<sp/>{</highlight></codeline>
<codeline lineno="10086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>NoColourImpl<sp/>s_instance;</highlight></codeline>
<codeline lineno="10087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;s_instance;</highlight></codeline>
<codeline lineno="10088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="10090"><highlight class="normal"></highlight></codeline>
<codeline lineno="10091"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>anon<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10092"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10093"><highlight class="normal"></highlight></codeline>
<codeline lineno="10094"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(<sp/>CATCH_CONFIG_COLOUR_NONE<sp/>)<sp/>&amp;&amp;<sp/>!defined(<sp/>CATCH_CONFIG_COLOUR_WINDOWS<sp/>)<sp/>&amp;&amp;<sp/>!defined(<sp/>CATCH_CONFIG_COLOUR_ANSI<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10095"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>ifdef<sp/>CATCH_PLATFORM_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10096"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>CATCH_CONFIG_COLOUR_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10097"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10098"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>CATCH_CONFIG_COLOUR_ANSI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10099"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10100"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10101"><highlight class="normal"></highlight></codeline>
<codeline lineno="10102"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(<sp/>CATCH_CONFIG_COLOUR_WINDOWS<sp/>)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10103"><highlight class="normal"></highlight></codeline>
<codeline lineno="10104"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="10105"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="10106"><highlight class="normal"></highlight></codeline>
<codeline lineno="10107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Win32ColourImpl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>IColourImpl<sp/>{</highlight></codeline>
<codeline lineno="10108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="10109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Win32ColourImpl()<sp/>:<sp/>stdoutHandle(<sp/>GetStdHandle(STD_OUTPUT_HANDLE)<sp/>)</highlight></codeline>
<codeline lineno="10110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CONSOLE_SCREEN_BUFFER_INFO<sp/>csbiInfo;</highlight></codeline>
<codeline lineno="10112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetConsoleScreenBufferInfo(<sp/>stdoutHandle,<sp/>&amp;csbiInfo<sp/>);</highlight></codeline>
<codeline lineno="10113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>originalForegroundAttributes<sp/>=<sp/>csbiInfo.wAttributes<sp/>&amp;<sp/>~(<sp/>BACKGROUND_GREEN<sp/>|<sp/>BACKGROUND_RED<sp/>|<sp/>BACKGROUND_BLUE<sp/>|<sp/>BACKGROUND_INTENSITY<sp/>);</highlight></codeline>
<codeline lineno="10114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>originalBackgroundAttributes<sp/>=<sp/>csbiInfo.wAttributes<sp/>&amp;<sp/>~(<sp/>FOREGROUND_GREEN<sp/>|<sp/>FOREGROUND_RED<sp/>|<sp/>FOREGROUND_BLUE<sp/>|<sp/>FOREGROUND_INTENSITY<sp/>);</highlight></codeline>
<codeline lineno="10115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10116"><highlight class="normal"></highlight></codeline>
<codeline lineno="10117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>use(<sp/>Colour::Code<sp/>_colourCode<sp/>)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="10118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>_colourCode<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="10119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Colour::None:<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setTextAttribute(<sp/>originalForegroundAttributes<sp/>);</highlight></codeline>
<codeline lineno="10120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Colour::White:<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setTextAttribute(<sp/>FOREGROUND_GREEN<sp/>|<sp/>FOREGROUND_RED<sp/>|<sp/>FOREGROUND_BLUE<sp/>);</highlight></codeline>
<codeline lineno="10121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Colour::Red:<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setTextAttribute(<sp/>FOREGROUND_RED<sp/>);</highlight></codeline>
<codeline lineno="10122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Colour::Green:<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setTextAttribute(<sp/>FOREGROUND_GREEN<sp/>);</highlight></codeline>
<codeline lineno="10123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Colour::Blue:<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setTextAttribute(<sp/>FOREGROUND_BLUE<sp/>);</highlight></codeline>
<codeline lineno="10124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Colour::Cyan:<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setTextAttribute(<sp/>FOREGROUND_BLUE<sp/>|<sp/>FOREGROUND_GREEN<sp/>);</highlight></codeline>
<codeline lineno="10125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Colour::Yellow:<sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setTextAttribute(<sp/>FOREGROUND_RED<sp/>|<sp/>FOREGROUND_GREEN<sp/>);</highlight></codeline>
<codeline lineno="10126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Colour::Grey:<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setTextAttribute(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="10127"><highlight class="normal"></highlight></codeline>
<codeline lineno="10128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Colour::LightGrey:<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setTextAttribute(<sp/>FOREGROUND_INTENSITY<sp/>);</highlight></codeline>
<codeline lineno="10129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Colour::BrightRed:<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setTextAttribute(<sp/>FOREGROUND_INTENSITY<sp/>|<sp/>FOREGROUND_RED<sp/>);</highlight></codeline>
<codeline lineno="10130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Colour::BrightGreen:<sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setTextAttribute(<sp/>FOREGROUND_INTENSITY<sp/>|<sp/>FOREGROUND_GREEN<sp/>);</highlight></codeline>
<codeline lineno="10131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Colour::BrightWhite:<sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setTextAttribute(<sp/>FOREGROUND_INTENSITY<sp/>|<sp/>FOREGROUND_GREEN<sp/>|<sp/>FOREGROUND_RED<sp/>|<sp/>FOREGROUND_BLUE<sp/>);</highlight></codeline>
<codeline lineno="10132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Colour::BrightYellow:<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setTextAttribute(<sp/>FOREGROUND_INTENSITY<sp/>|<sp/>FOREGROUND_RED<sp/>|<sp/>FOREGROUND_GREEN<sp/>);</highlight></codeline>
<codeline lineno="10133"><highlight class="normal"></highlight></codeline>
<codeline lineno="10134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Colour::Bright:<sp/>CATCH_INTERNAL_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;not<sp/>a<sp/>colour&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="10135"><highlight class="normal"></highlight></codeline>
<codeline lineno="10136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="10137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>colour<sp/>requested&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="10138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10140"><highlight class="normal"></highlight></codeline>
<codeline lineno="10141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="10142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setTextAttribute(<sp/>WORD<sp/>_textAttribute<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="10143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetConsoleTextAttribute(<sp/>stdoutHandle,<sp/>_textAttribute<sp/>|<sp/>originalBackgroundAttributes<sp/>);</highlight></codeline>
<codeline lineno="10144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE<sp/>stdoutHandle;</highlight></codeline>
<codeline lineno="10146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WORD<sp/>originalForegroundAttributes;</highlight></codeline>
<codeline lineno="10147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WORD<sp/>originalBackgroundAttributes;</highlight></codeline>
<codeline lineno="10148"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="10149"><highlight class="normal"></highlight></codeline>
<codeline lineno="10150"><highlight class="normal"><sp/><sp/><sp/><sp/>IColourImpl*<sp/>platformColourInstance()<sp/>{</highlight></codeline>
<codeline lineno="10151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Win32ColourImpl<sp/>s_instance;</highlight></codeline>
<codeline lineno="10152"><highlight class="normal"></highlight></codeline>
<codeline lineno="10153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IConfigPtr<sp/>config<sp/>=<sp/>getCurrentContext().getConfig();</highlight></codeline>
<codeline lineno="10154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UseColour::YesOrNo<sp/>colourMode<sp/>=<sp/>config</highlight></codeline>
<codeline lineno="10155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>config-&gt;useColour()</highlight></codeline>
<codeline lineno="10156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>UseColour::Auto;</highlight></codeline>
<codeline lineno="10157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>colourMode<sp/>==<sp/>UseColour::Auto<sp/>)</highlight></codeline>
<codeline lineno="10158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colourMode<sp/>=<sp/>UseColour::Yes;</highlight></codeline>
<codeline lineno="10159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>colourMode<sp/>==<sp/>UseColour::Yes</highlight></codeline>
<codeline lineno="10160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>&amp;s_instance</highlight></codeline>
<codeline lineno="10161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>NoColourImpl::instance();</highlight></codeline>
<codeline lineno="10162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10163"><highlight class="normal"></highlight></codeline>
<codeline lineno="10164"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>anon<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10165"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10166"><highlight class="normal"></highlight></codeline>
<codeline lineno="10167"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(<sp/>CATCH_CONFIG_COLOUR_ANSI<sp/>)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10168"><highlight class="normal"></highlight></codeline>
<codeline lineno="10169"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10170"><highlight class="normal"></highlight></codeline>
<codeline lineno="10171"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="10172"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="10173"><highlight class="normal"></highlight></codeline>
<codeline lineno="10174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>POSIX/<sp/>ANSI<sp/>console<sp/>terminal<sp/>codes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Thanks<sp/>to<sp/>Adam<sp/>Strzelecki<sp/>for<sp/>original<sp/>contribution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(http://github.com/nanoant)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>https://github.com/philsquared/Catch/pull/131</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PosixColourImpl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>IColourImpl<sp/>{</highlight></codeline>
<codeline lineno="10179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="10180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>use(<sp/>Colour::Code<sp/>_colourCode<sp/>)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="10181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>_colourCode<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="10182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Colour::None:</highlight></codeline>
<codeline lineno="10183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Colour::White:<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setColour(<sp/></highlight><highlight class="stringliteral">&quot;[0m&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="10184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Colour::Red:<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setColour(<sp/></highlight><highlight class="stringliteral">&quot;[0;31m&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="10185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Colour::Green:<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setColour(<sp/></highlight><highlight class="stringliteral">&quot;[0;32m&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="10186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Colour::Blue:<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setColour(<sp/></highlight><highlight class="stringliteral">&quot;[0;34m&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="10187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Colour::Cyan:<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setColour(<sp/></highlight><highlight class="stringliteral">&quot;[0;36m&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="10188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Colour::Yellow:<sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setColour(<sp/></highlight><highlight class="stringliteral">&quot;[0;33m&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="10189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Colour::Grey:<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setColour(<sp/></highlight><highlight class="stringliteral">&quot;[1;30m&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="10190"><highlight class="normal"></highlight></codeline>
<codeline lineno="10191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Colour::LightGrey:<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setColour(<sp/></highlight><highlight class="stringliteral">&quot;[0;37m&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="10192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Colour::BrightRed:<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setColour(<sp/></highlight><highlight class="stringliteral">&quot;[1;31m&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="10193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Colour::BrightGreen:<sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setColour(<sp/></highlight><highlight class="stringliteral">&quot;[1;32m&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="10194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Colour::BrightWhite:<sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setColour(<sp/></highlight><highlight class="stringliteral">&quot;[1;37m&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="10195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Colour::BrightYellow:<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setColour(<sp/></highlight><highlight class="stringliteral">&quot;[1;33m&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="10196"><highlight class="normal"></highlight></codeline>
<codeline lineno="10197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Colour::Bright:<sp/>CATCH_INTERNAL_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;not<sp/>a<sp/>colour&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="10198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>CATCH_INTERNAL_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>colour<sp/>requested&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="10199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>IColourImpl*<sp/>instance()<sp/>{</highlight></codeline>
<codeline lineno="10202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PosixColourImpl<sp/>s_instance;</highlight></codeline>
<codeline lineno="10203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;s_instance;</highlight></codeline>
<codeline lineno="10204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10205"><highlight class="normal"></highlight></codeline>
<codeline lineno="10206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="10207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setColour(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>_escapeCode<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="10208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getCurrentContext().getConfig()-&gt;stream()</highlight></codeline>
<codeline lineno="10209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\033&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>_escapeCode;</highlight></codeline>
<codeline lineno="10210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10211"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="10212"><highlight class="normal"></highlight></codeline>
<codeline lineno="10213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>useColourOnPlatform()<sp/>{</highlight></codeline>
<codeline lineno="10214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10215"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_PLATFORM_MAC)<sp/>||<sp/>defined(CATCH_PLATFORM_IPHONE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!isDebuggerActive()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="10217"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10218"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!(defined(__DJGPP__)<sp/>&amp;&amp;<sp/>defined(__STRICT_ANSI__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isatty(STDOUT_FILENO)</highlight></codeline>
<codeline lineno="10220"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10222"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="10224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10225"><highlight class="normal"><sp/><sp/><sp/><sp/>IColourImpl*<sp/>platformColourInstance()<sp/>{</highlight></codeline>
<codeline lineno="10226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ErrnoGuard<sp/>guard;</highlight></codeline>
<codeline lineno="10227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IConfigPtr<sp/>config<sp/>=<sp/>getCurrentContext().getConfig();</highlight></codeline>
<codeline lineno="10228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UseColour::YesOrNo<sp/>colourMode<sp/>=<sp/>config</highlight></codeline>
<codeline lineno="10229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>config-&gt;useColour()</highlight></codeline>
<codeline lineno="10230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>UseColour::Auto;</highlight></codeline>
<codeline lineno="10231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>colourMode<sp/>==<sp/>UseColour::Auto<sp/>)</highlight></codeline>
<codeline lineno="10232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colourMode<sp/>=<sp/>useColourOnPlatform()</highlight></codeline>
<codeline lineno="10233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>UseColour::Yes</highlight></codeline>
<codeline lineno="10234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>UseColour::No;</highlight></codeline>
<codeline lineno="10235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>colourMode<sp/>==<sp/>UseColour::Yes</highlight></codeline>
<codeline lineno="10236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>PosixColourImpl::instance()</highlight></codeline>
<codeline lineno="10237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>NoColourImpl::instance();</highlight></codeline>
<codeline lineno="10238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10239"><highlight class="normal"></highlight></codeline>
<codeline lineno="10240"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>anon<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10241"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10242"><highlight class="normal"></highlight></codeline>
<codeline lineno="10243"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>Windows<sp/>or<sp/>ANSI<sp/>///////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10244"><highlight class="normal"></highlight></codeline>
<codeline lineno="10245"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="10246"><highlight class="normal"></highlight></codeline>
<codeline lineno="10247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>IColourImpl*<sp/>platformColourInstance()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NoColourImpl::instance();<sp/>}</highlight></codeline>
<codeline lineno="10248"><highlight class="normal"></highlight></codeline>
<codeline lineno="10249"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10250"><highlight class="normal"></highlight></codeline>
<codeline lineno="10251"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>Windows/<sp/>ANSI/<sp/>None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10252"><highlight class="normal"></highlight></codeline>
<codeline lineno="10253"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="10254"><highlight class="normal"></highlight></codeline>
<codeline lineno="10255"><highlight class="normal"><sp/><sp/><sp/><sp/>Colour::Colour(<sp/>Code<sp/>_colourCode<sp/>)<sp/>{<sp/>use(<sp/>_colourCode<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="10256"><highlight class="normal"><sp/><sp/><sp/><sp/>Colour::Colour(<sp/>Colour&amp;&amp;<sp/>other<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="10257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_moved<sp/>=<sp/>other.m_moved;</highlight></codeline>
<codeline lineno="10258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.m_moved<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10260"><highlight class="normal"><sp/><sp/><sp/><sp/>Colour&amp;<sp/>Colour::operator=(<sp/>Colour&amp;&amp;<sp/>other<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="10261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_moved<sp/>=<sp/>other.m_moved;</highlight></codeline>
<codeline lineno="10262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.m_moved<sp/><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10265"><highlight class="normal"></highlight></codeline>
<codeline lineno="10266"><highlight class="normal"><sp/><sp/><sp/><sp/>Colour::~Colour(){<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!m_moved<sp/>)<sp/>use(<sp/>None<sp/>);<sp/>}</highlight></codeline>
<codeline lineno="10267"><highlight class="normal"></highlight></codeline>
<codeline lineno="10268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Colour::use(<sp/>Code<sp/>_colourCode<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="10269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>IColourImpl*<sp/>impl<sp/>=<sp/>platformColourInstance();</highlight></codeline>
<codeline lineno="10270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Strictly<sp/>speaking,<sp/>this<sp/>cannot<sp/>possibly<sp/>happen.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>However,<sp/>under<sp/>some<sp/>conditions<sp/>it<sp/>does<sp/>happen<sp/>(see<sp/>#1626),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>this<sp/>change<sp/>is<sp/>small<sp/>enough<sp/>that<sp/>we<sp/>can<sp/>let<sp/>practicality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>triumph<sp/>over<sp/>purity<sp/>in<sp/>this<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(impl<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="10275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>impl-&gt;use(<sp/>_colourCode<sp/>);</highlight></codeline>
<codeline lineno="10276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10278"><highlight class="normal"></highlight></codeline>
<codeline lineno="10279"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/>operator<sp/>&lt;&lt;<sp/>(<sp/>std::ostream&amp;<sp/>os,<sp/>Colour<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="10280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="10281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10282"><highlight class="normal"></highlight></codeline>
<codeline lineno="10283"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10284"><highlight class="normal"></highlight></codeline>
<codeline lineno="10285"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10286"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>clang<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10287"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10288"><highlight class="normal"></highlight></codeline>
<codeline lineno="10289"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_console_colour.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10290"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_context.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10291"><highlight class="normal"></highlight></codeline>
<codeline lineno="10292"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="10293"><highlight class="normal"></highlight></codeline>
<codeline lineno="10294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Context<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>IMutableContext,<sp/>NonCopyable<sp/>{</highlight></codeline>
<codeline lineno="10295"><highlight class="normal"></highlight></codeline>
<codeline lineno="10296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>IContext</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IResultCapture*<sp/>getResultCapture()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="10298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_resultCapture;</highlight></codeline>
<codeline lineno="10299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IRunner*<sp/>getRunner()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="10301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_runner;</highlight></codeline>
<codeline lineno="10302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10303"><highlight class="normal"></highlight></codeline>
<codeline lineno="10304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IConfigPtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>getConfig()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="10305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_config;</highlight></codeline>
<codeline lineno="10306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10307"><highlight class="normal"></highlight></codeline>
<codeline lineno="10308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~Context()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10309"><highlight class="normal"></highlight></codeline>
<codeline lineno="10310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>IMutableContext</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setResultCapture(<sp/>IResultCapture*<sp/>resultCapture<sp/>)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="10312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_resultCapture<sp/>=<sp/>resultCapture;</highlight></codeline>
<codeline lineno="10313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setRunner(<sp/>IRunner*<sp/>runner<sp/>)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="10315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_runner<sp/>=<sp/>runner;</highlight></codeline>
<codeline lineno="10316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setConfig(<sp/>IConfigPtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config<sp/>)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="10318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_config<sp/>=<sp/>config;</highlight></codeline>
<codeline lineno="10319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10320"><highlight class="normal"></highlight></codeline>
<codeline lineno="10321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>IMutableContext&amp;<sp/>getCurrentMutableContext();</highlight></codeline>
<codeline lineno="10322"><highlight class="normal"></highlight></codeline>
<codeline lineno="10323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="10324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IConfigPtr<sp/>m_config;</highlight></codeline>
<codeline lineno="10325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IRunner*<sp/>m_runner<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IResultCapture*<sp/>m_resultCapture<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10327"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="10328"><highlight class="normal"></highlight></codeline>
<codeline lineno="10329"><highlight class="normal"><sp/><sp/><sp/><sp/>IMutableContext<sp/>*IMutableContext::currentContext<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10330"><highlight class="normal"></highlight></codeline>
<codeline lineno="10331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>IMutableContext::createContext()</highlight></codeline>
<codeline lineno="10332"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentContext<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Context();</highlight></codeline>
<codeline lineno="10334"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10335"><highlight class="normal"></highlight></codeline>
<codeline lineno="10336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cleanUpContext()<sp/>{</highlight></codeline>
<codeline lineno="10337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>IMutableContext::currentContext;</highlight></codeline>
<codeline lineno="10338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMutableContext::currentContext<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10339"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10340"><highlight class="normal"><sp/><sp/><sp/><sp/>IContext::~IContext()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10341"><highlight class="normal"><sp/><sp/><sp/><sp/>IMutableContext::~IMutableContext()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10342"><highlight class="normal"><sp/><sp/><sp/><sp/>Context::~Context()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10343"><highlight class="normal"></highlight></codeline>
<codeline lineno="10344"><highlight class="normal"><sp/><sp/><sp/><sp/>SimplePcg32&amp;<sp/>rng()<sp/>{</highlight></codeline>
<codeline lineno="10345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>SimplePcg32<sp/>s_rng;</highlight></codeline>
<codeline lineno="10346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_rng;</highlight></codeline>
<codeline lineno="10347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10348"><highlight class="normal"></highlight></codeline>
<codeline lineno="10349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10350"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_context.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10351"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_debug_console.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10352"><highlight class="normal"></highlight></codeline>
<codeline lineno="10353"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_debug_console.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10354"><highlight class="normal"></highlight></codeline>
<codeline lineno="10355"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10356"><highlight class="normal"></highlight></codeline>
<codeline lineno="10357"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="10358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeToDebugConsole(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>text<sp/>);</highlight></codeline>
<codeline lineno="10359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10360"><highlight class="normal"></highlight></codeline>
<codeline lineno="10361"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_debug_console.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10362"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_ANDROID_LOGWRITE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10363"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;android/log.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10364"><highlight class="normal"></highlight></codeline>
<codeline lineno="10365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="10366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeToDebugConsole(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>text<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="10367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__android_log_write(<sp/>ANDROID_LOG_DEBUG,<sp/></highlight><highlight class="stringliteral">&quot;Catch&quot;</highlight><highlight class="normal">,<sp/>text.c_str()<sp/>);</highlight></codeline>
<codeline lineno="10368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10370"><highlight class="normal"></highlight></codeline>
<codeline lineno="10371"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(CATCH_PLATFORM_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10372"><highlight class="normal"></highlight></codeline>
<codeline lineno="10373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="10374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeToDebugConsole(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>text<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="10375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::OutputDebugStringA(<sp/>text.c_str()<sp/>);</highlight></codeline>
<codeline lineno="10376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10378"><highlight class="normal"></highlight></codeline>
<codeline lineno="10379"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10380"><highlight class="normal"></highlight></codeline>
<codeline lineno="10381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="10382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeToDebugConsole(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>text<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="10383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>!TBD:<sp/>Need<sp/>a<sp/>version<sp/>for<sp/>Mac/<sp/>XCode<sp/>and<sp/>other<sp/>IDEs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::cout()<sp/>&lt;&lt;<sp/>text;</highlight></codeline>
<codeline lineno="10385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10386"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10387"><highlight class="normal"></highlight></codeline>
<codeline lineno="10388"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>Platform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10389"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_debug_console.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10390"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_debugger.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10391"><highlight class="normal"></highlight></codeline>
<codeline lineno="10392"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_PLATFORM_MAC)<sp/>||<sp/>defined(CATCH_PLATFORM_IPHONE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10393"><highlight class="normal"></highlight></codeline>
<codeline lineno="10394"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10395"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10396"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10397"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10398"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10399"><highlight class="normal"></highlight></codeline>
<codeline lineno="10400"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__apple_build_version__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>headers<sp/>will<sp/>only<sp/>compile<sp/>with<sp/>AppleClang<sp/>(XCode)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>other<sp/>compilers<sp/>(Clang,<sp/>GCC,<sp/>...<sp/>)<sp/>we<sp/>need<sp/>to<sp/>exclude<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10403"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;sys/sysctl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10404"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10405"><highlight class="normal"></highlight></codeline>
<codeline lineno="10406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="10407"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>__apple_build_version__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>function<sp/>is<sp/>taken<sp/>directly<sp/>from<sp/>the<sp/>following<sp/>technical<sp/>note:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>https://developer.apple.com/library/archive/qa/qa1361/_index.html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10410"><highlight class="normal"></highlight></codeline>
<codeline lineno="10411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>the<sp/>current<sp/>process<sp/>is<sp/>being<sp/>debugged<sp/>(either</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>running<sp/>under<sp/>the<sp/>debugger<sp/>or<sp/>has<sp/>a<sp/>debugger<sp/>attached<sp/>post<sp/>facto).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isDebuggerActive(){</highlight></codeline>
<codeline lineno="10414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mib[4];</highlight></codeline>
<codeline lineno="10415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">kinfo_proc<sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>;</highlight></codeline>
<codeline lineno="10416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size;</highlight></codeline>
<codeline lineno="10417"><highlight class="normal"></highlight></codeline>
<codeline lineno="10418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>flags<sp/>so<sp/>that,<sp/>if<sp/>sysctl<sp/>fails<sp/>for<sp/>some<sp/>bizarre</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reason,<sp/>we<sp/>get<sp/>a<sp/>predictable<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10420"><highlight class="normal"></highlight></codeline>
<codeline lineno="10421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.kp_proc.p_flag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="10422"><highlight class="normal"></highlight></codeline>
<codeline lineno="10423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>mib,<sp/>which<sp/>tells<sp/>sysctl<sp/>the<sp/>info<sp/>we<sp/>want,<sp/>in<sp/>this<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we&apos;re<sp/>looking<sp/>for<sp/>information<sp/>about<sp/>a<sp/>specific<sp/>process<sp/>ID.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10425"><highlight class="normal"></highlight></codeline>
<codeline lineno="10426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mib[0]<sp/>=<sp/>CTL_KERN;</highlight></codeline>
<codeline lineno="10427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mib[1]<sp/>=<sp/>KERN_PROC;</highlight></codeline>
<codeline lineno="10428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mib[2]<sp/>=<sp/>KERN_PROC_PID;</highlight></codeline>
<codeline lineno="10429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mib[3]<sp/>=<sp/>getpid();</highlight></codeline>
<codeline lineno="10430"><highlight class="normal"></highlight></codeline>
<codeline lineno="10431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>sysctl.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10432"><highlight class="normal"></highlight></codeline>
<codeline lineno="10433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structinfo" kindref="compound">info</ref>);</highlight></codeline>
<codeline lineno="10434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>sysctl(mib,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mib)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*mib),<sp/>&amp;<ref refid="structinfo" kindref="compound">info</ref>,<sp/>&amp;size,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>0)<sp/>!=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="10435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::cerr()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n**<sp/>Call<sp/>to<sp/>sysctl<sp/>failed<sp/>-<sp/>unable<sp/>to<sp/>determine<sp/>if<sp/>debugger<sp/>is<sp/>active<sp/>**\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="10436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10438"><highlight class="normal"></highlight></codeline>
<codeline lineno="10439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;re<sp/>being<sp/>debugged<sp/>if<sp/>the<sp/>P_TRACED<sp/>flag<sp/>is<sp/>set.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10440"><highlight class="normal"></highlight></codeline>
<codeline lineno="10441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>(<ref refid="structinfo" kindref="compound">info</ref>.kp_proc.p_flag<sp/>&amp;<sp/>P_TRACED)<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="10442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10443"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isDebuggerActive()<sp/>{</highlight></codeline>
<codeline lineno="10445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>to<sp/>find<sp/>another<sp/>way<sp/>to<sp/>determine<sp/>this<sp/>for<sp/>non-appleclang<sp/>compilers<sp/>on<sp/>macOS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10448"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10449"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10450"><highlight class="normal"></highlight></codeline>
<codeline lineno="10451"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(CATCH_PLATFORM_LINUX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10452"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10453"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10454"><highlight class="normal"></highlight></codeline>
<codeline lineno="10455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch{</highlight></codeline>
<codeline lineno="10456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>standard<sp/>POSIX<sp/>way<sp/>of<sp/>detecting<sp/>a<sp/>debugger<sp/>is<sp/>to<sp/>attempt<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ptrace()<sp/>the<sp/>process,<sp/>but<sp/>this<sp/>needs<sp/>to<sp/>be<sp/>done<sp/>from<sp/>a<sp/>child<sp/>and<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>process<sp/>itself<sp/>to<sp/>still<sp/>allow<sp/>attaching<sp/>to<sp/>this<sp/>process<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>wanted,<sp/>so<sp/>is<sp/>rather<sp/>heavy.<sp/>Under<sp/>Linux<sp/>we<sp/>have<sp/>the<sp/>PID<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;debugger&quot;<sp/>(which<sp/>doesn&apos;t<sp/>need<sp/>to<sp/>be<sp/>gdb,<sp/>of<sp/>course,<sp/>it<sp/>could<sp/>also</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>strace,<sp/>for<sp/>example)<sp/>in<sp/>/proc/$PID/status,<sp/>so<sp/>just<sp/>get<sp/>it<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>there<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isDebuggerActive(){</highlight></codeline>
<codeline lineno="10464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Libstdc++<sp/>has<sp/>a<sp/>bug,<sp/>where<sp/>std::ifstream<sp/>sets<sp/>errno<sp/>to<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>way<sp/>our<sp/>users<sp/>can<sp/>properly<sp/>assert<sp/>over<sp/>errno<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ErrnoGuard<sp/>guard;</highlight></codeline>
<codeline lineno="10467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ifstream<sp/>in(</highlight><highlight class="stringliteral">&quot;/proc/self/status&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>std::string<sp/>line;<sp/>std::getline(in,<sp/>line);<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="10469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PREFIX_LEN<sp/>=<sp/>11;</highlight></codeline>
<codeline lineno="10470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>line.compare(0,<sp/>PREFIX_LEN,<sp/></highlight><highlight class="stringliteral">&quot;TracerPid:\t&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="10471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;re<sp/>traced<sp/>if<sp/>the<sp/>PID<sp/>is<sp/>not<sp/>0<sp/>and<sp/>no<sp/>other<sp/>PID<sp/>starts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>0<sp/>digit,<sp/>so<sp/>it&apos;s<sp/>enough<sp/>to<sp/>check<sp/>for<sp/>just<sp/>a<sp/>single</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>line.length()<sp/>&gt;<sp/>PREFIX_LEN<sp/>&amp;&amp;<sp/>line[PREFIX_LEN]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10477"><highlight class="normal"></highlight></codeline>
<codeline lineno="10478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10480"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10481"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>__declspec(dllimport)<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__stdcall<sp/>IsDebuggerPresent();</highlight></codeline>
<codeline lineno="10483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="10484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isDebuggerActive()<sp/>{</highlight></codeline>
<codeline lineno="10485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsDebuggerPresent()<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="10486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10487"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10488"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__MINGW32__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>__declspec(dllimport)<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__stdcall<sp/>IsDebuggerPresent();</highlight></codeline>
<codeline lineno="10490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="10491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isDebuggerActive()<sp/>{</highlight></codeline>
<codeline lineno="10492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsDebuggerPresent()<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="10493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10494"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10495"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="10497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isDebuggerActive()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="10498"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10499"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>Platform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10500"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_debugger.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10501"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_decomposer.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10502"><highlight class="normal"></highlight></codeline>
<codeline lineno="10503"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="10504"><highlight class="normal"></highlight></codeline>
<codeline lineno="10505"><highlight class="normal"><sp/><sp/><sp/><sp/>ITransientExpression::~ITransientExpression()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10506"><highlight class="normal"></highlight></codeline>
<codeline lineno="10507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>formatReconstructedExpression(<sp/>std::ostream<sp/>&amp;os,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/>StringRef<sp/>op,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="10508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>lhs.size()<sp/>+<sp/>rhs.size()<sp/>&lt;<sp/>40<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="10509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lhs.find(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>==<sp/>std::string::npos<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="10510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs.find(</highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>==<sp/>std::string::npos<sp/>)</highlight></codeline>
<codeline lineno="10511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>lhs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>op<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rhs;</highlight></codeline>
<codeline lineno="10512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>lhs<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>op<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rhs;</highlight></codeline>
<codeline lineno="10514"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10515"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10516"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_decomposer.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10517"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_enforce.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10518"><highlight class="normal"></highlight></codeline>
<codeline lineno="10519"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10520"><highlight class="normal"></highlight></codeline>
<codeline lineno="10521"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="10522"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)<sp/>&amp;&amp;<sp/>!defined(CATCH_CONFIG_DISABLE_EXCEPTIONS_CUSTOM_HANDLER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10523"><highlight class="normal"><sp/><sp/><sp/><sp/>[[noreturn]]</highlight></codeline>
<codeline lineno="10524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>throw_exception(std::exception<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>)<sp/>{</highlight></codeline>
<codeline lineno="10525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::cerr()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Catch<sp/>will<sp/>terminate<sp/>because<sp/>it<sp/>needed<sp/>to<sp/>throw<sp/>an<sp/>exception.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>message<sp/>was:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>.what()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::terminate();</highlight></codeline>
<codeline lineno="10528"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10529"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10530"><highlight class="normal"></highlight></codeline>
<codeline lineno="10531"><highlight class="normal"><sp/><sp/><sp/><sp/>[[noreturn]]</highlight></codeline>
<codeline lineno="10532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>throw_logic_error(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>msg)<sp/>{</highlight></codeline>
<codeline lineno="10533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw_exception(std::logic_error(msg));</highlight></codeline>
<codeline lineno="10534"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10535"><highlight class="normal"></highlight></codeline>
<codeline lineno="10536"><highlight class="normal"><sp/><sp/><sp/><sp/>[[noreturn]]</highlight></codeline>
<codeline lineno="10537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>throw_domain_error(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>msg)<sp/>{</highlight></codeline>
<codeline lineno="10538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw_exception(std::domain_error(msg));</highlight></codeline>
<codeline lineno="10539"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10540"><highlight class="normal"></highlight></codeline>
<codeline lineno="10541"><highlight class="normal"><sp/><sp/><sp/><sp/>[[noreturn]]</highlight></codeline>
<codeline lineno="10542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>throw_runtime_error(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>msg)<sp/>{</highlight></codeline>
<codeline lineno="10543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw_exception(std::runtime_error(msg));</highlight></codeline>
<codeline lineno="10544"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10545"><highlight class="normal"></highlight></codeline>
<codeline lineno="10546"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10547"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_enforce.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10548"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_enum_values_registry.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10549"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_enum_values_registry.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10550"><highlight class="normal"></highlight></codeline>
<codeline lineno="10551"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10552"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10553"><highlight class="normal"></highlight></codeline>
<codeline lineno="10554"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="10555"><highlight class="normal"></highlight></codeline>
<codeline lineno="10556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Detail<sp/>{</highlight></codeline>
<codeline lineno="10557"><highlight class="normal"></highlight></codeline>
<codeline lineno="10558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;EnumInfo&gt;<sp/>makeEnumInfo(<sp/>StringRef<sp/>enumName,<sp/>StringRef<sp/>allValueNames,<sp/>std::vector&lt;int&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>values<sp/>);</highlight></codeline>
<codeline lineno="10559"><highlight class="normal"></highlight></codeline>
<codeline lineno="10560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">EnumValuesRegistry<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>IMutableEnumValuesRegistry<sp/>{</highlight></codeline>
<codeline lineno="10561"><highlight class="normal"></highlight></codeline>
<codeline lineno="10562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::unique_ptr&lt;EnumInfo&gt;&gt;<sp/>m_enumInfos;</highlight></codeline>
<codeline lineno="10563"><highlight class="normal"></highlight></codeline>
<codeline lineno="10564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EnumInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>registerEnum(<sp/>StringRef<sp/>enumName,<sp/>StringRef<sp/>allEnums,<sp/>std::vector&lt;int&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>values)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="10566"><highlight class="normal"></highlight></codeline>
<codeline lineno="10567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;StringRef&gt;<sp/>parseEnums(<sp/>StringRef<sp/>enums<sp/>);</highlight></codeline>
<codeline lineno="10568"><highlight class="normal"></highlight></codeline>
<codeline lineno="10569"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>Detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10570"><highlight class="normal"></highlight></codeline>
<codeline lineno="10571"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10572"><highlight class="normal"></highlight></codeline>
<codeline lineno="10573"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_enum_values_registry.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10574"><highlight class="normal"></highlight></codeline>
<codeline lineno="10575"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10576"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10577"><highlight class="normal"></highlight></codeline>
<codeline lineno="10578"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="10579"><highlight class="normal"></highlight></codeline>
<codeline lineno="10580"><highlight class="normal"><sp/><sp/><sp/><sp/>IMutableEnumValuesRegistry::~IMutableEnumValuesRegistry()<sp/>{}</highlight></codeline>
<codeline lineno="10581"><highlight class="normal"></highlight></codeline>
<codeline lineno="10582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Detail<sp/>{</highlight></codeline>
<codeline lineno="10583"><highlight class="normal"></highlight></codeline>
<codeline lineno="10584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="10585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extracts<sp/>the<sp/>actual<sp/>name<sp/>part<sp/>of<sp/>an<sp/>enum<sp/>instance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>other<sp/>words,<sp/>it<sp/>returns<sp/>the<sp/>Blue<sp/>part<sp/>of<sp/>Bikeshed::Colour::Blue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringRef<sp/>extractInstanceName(StringRef<sp/>enumInstance)<sp/>{</highlight></codeline>
<codeline lineno="10588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>last<sp/>occurrence<sp/>of<sp/>&quot;:&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>name_start<sp/>=<sp/>enumInstance.size();</highlight></codeline>
<codeline lineno="10590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(name_start<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>enumInstance[name_start<sp/>-<sp/>1]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="10591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--name_start;</highlight></codeline>
<codeline lineno="10592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>enumInstance.substr(name_start,<sp/>enumInstance.size()<sp/>-<sp/>name_start);</highlight></codeline>
<codeline lineno="10594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10596"><highlight class="normal"></highlight></codeline>
<codeline lineno="10597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;StringRef&gt;<sp/>parseEnums(<sp/>StringRef<sp/>enums<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="10598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>enumValues<sp/>=<sp/>splitStringRef(<sp/>enums,<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="10599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;StringRef&gt;<sp/>parsed;</highlight></codeline>
<codeline lineno="10600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parsed.reserve(<sp/>enumValues.size()<sp/>);</highlight></codeline>
<codeline lineno="10601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>enumValue<sp/>:<sp/>enumValues<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="10602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parsed.push_back(trim(extractInstanceName(enumValue)));</highlight></codeline>
<codeline lineno="10603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parsed;</highlight></codeline>
<codeline lineno="10605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10606"><highlight class="normal"></highlight></codeline>
<codeline lineno="10607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EnumInfo::~EnumInfo()<sp/>{}</highlight></codeline>
<codeline lineno="10608"><highlight class="normal"></highlight></codeline>
<codeline lineno="10609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringRef<sp/>EnumInfo::lookup(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="10610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>valueToName<sp/>:<sp/>m_values<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="10611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>valueToName.first<sp/>==<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>)</highlight></codeline>
<codeline lineno="10612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>valueToName.second;</highlight></codeline>
<codeline lineno="10613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;{**<sp/>unexpected<sp/>enum<sp/>value<sp/>**}&quot;</highlight><highlight class="normal">_sr;</highlight></codeline>
<codeline lineno="10615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10616"><highlight class="normal"></highlight></codeline>
<codeline lineno="10617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;EnumInfo&gt;<sp/>makeEnumInfo(<sp/>StringRef<sp/>enumName,<sp/>StringRef<sp/>allValueNames,<sp/>std::vector&lt;int&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>values<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="10618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;EnumInfo&gt;<sp/>enumInfo(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>EnumInfo<sp/>);</highlight></codeline>
<codeline lineno="10619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enumInfo-&gt;m_name<sp/>=<sp/>enumName;</highlight></codeline>
<codeline lineno="10620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enumInfo-&gt;m_values.reserve(<sp/>values.size()<sp/>);</highlight></codeline>
<codeline lineno="10621"><highlight class="normal"></highlight></codeline>
<codeline lineno="10622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>valueNames<sp/>=<sp/>Catch::Detail::parseEnums(<sp/>allValueNames<sp/>);</highlight></codeline>
<codeline lineno="10623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>valueNames.size()<sp/>==<sp/>values.size()<sp/>);</highlight></codeline>
<codeline lineno="10624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="10625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>:<sp/>values<sp/>)</highlight></codeline>
<codeline lineno="10626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enumInfo-&gt;m_values.emplace_back(<ref refid="classvalue" kindref="compound">value</ref>,<sp/>valueNames[i++]);</highlight></codeline>
<codeline lineno="10627"><highlight class="normal"></highlight></codeline>
<codeline lineno="10628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>enumInfo;</highlight></codeline>
<codeline lineno="10629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10630"><highlight class="normal"></highlight></codeline>
<codeline lineno="10631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EnumInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>EnumValuesRegistry::registerEnum(<sp/>StringRef<sp/>enumName,<sp/>StringRef<sp/>allValueNames,<sp/>std::vector&lt;int&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>values<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="10632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_enumInfos.push_back(makeEnumInfo(enumName,<sp/>allValueNames,<sp/>values));</highlight></codeline>
<codeline lineno="10633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*m_enumInfos.back();</highlight></codeline>
<codeline lineno="10634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10635"><highlight class="normal"></highlight></codeline>
<codeline lineno="10636"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>Detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10637"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10638"><highlight class="normal"></highlight></codeline>
<codeline lineno="10639"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_enum_values_registry.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10640"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_errno_guard.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10641"><highlight class="normal"></highlight></codeline>
<codeline lineno="10642"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cerrno&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10643"><highlight class="normal"></highlight></codeline>
<codeline lineno="10644"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="10645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ErrnoGuard::ErrnoGuard():m_oldErrno(errno){}</highlight></codeline>
<codeline lineno="10646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ErrnoGuard::~ErrnoGuard()<sp/>{<sp/>errno<sp/>=<sp/>m_oldErrno;<sp/>}</highlight></codeline>
<codeline lineno="10647"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10648"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_errno_guard.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10649"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_exception_translator_registry.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10650"><highlight class="normal"></highlight></codeline>
<codeline lineno="10651"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_exception_translator_registry.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10652"><highlight class="normal"></highlight></codeline>
<codeline lineno="10653"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10654"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10655"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10656"><highlight class="normal"></highlight></codeline>
<codeline lineno="10657"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="10658"><highlight class="normal"></highlight></codeline>
<codeline lineno="10659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ExceptionTranslatorRegistry<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>IExceptionTranslatorRegistry<sp/>{</highlight></codeline>
<codeline lineno="10660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="10661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~ExceptionTranslatorRegistry();</highlight></codeline>
<codeline lineno="10662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>registerTranslator(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IExceptionTranslator*<sp/>translator<sp/>);</highlight></codeline>
<codeline lineno="10663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>translateActiveException()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tryTranslators()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10665"><highlight class="normal"></highlight></codeline>
<codeline lineno="10666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="10667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::unique_ptr&lt;IExceptionTranslator<sp/>const&gt;&gt;<sp/>m_translators;</highlight></codeline>
<codeline lineno="10668"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="10669"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10670"><highlight class="normal"></highlight></codeline>
<codeline lineno="10671"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_exception_translator_registry.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10672"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__OBJC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10673"><highlight class="normal"></highlight><highlight class="preprocessor">#import<sp/>&quot;Foundation/Foundation.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10674"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10675"><highlight class="normal"></highlight></codeline>
<codeline lineno="10676"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="10677"><highlight class="normal"></highlight></codeline>
<codeline lineno="10678"><highlight class="normal"><sp/><sp/><sp/><sp/>ExceptionTranslatorRegistry::~ExceptionTranslatorRegistry()<sp/>{</highlight></codeline>
<codeline lineno="10679"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10680"><highlight class="normal"></highlight></codeline>
<codeline lineno="10681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ExceptionTranslatorRegistry::registerTranslator(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IExceptionTranslator*<sp/>translator<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="10682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_translators.push_back(<sp/>std::unique_ptr&lt;const<sp/>IExceptionTranslator&gt;(<sp/>translator<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="10683"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10684"><highlight class="normal"></highlight></codeline>
<codeline lineno="10685"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10686"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>ExceptionTranslatorRegistry::translateActiveException()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="10687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="10688"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__OBJC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>Objective-C<sp/>try<sp/>objective-c<sp/>exceptions<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">@try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="10691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tryTranslators();</highlight></codeline>
<codeline lineno="10692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">@catch</highlight><highlight class="normal"><sp/>(NSException<sp/>*exception)<sp/>{</highlight></codeline>
<codeline lineno="10694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Catch::Detail::stringify(<sp/>[exception<sp/>description]<sp/>);</highlight></codeline>
<codeline lineno="10695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10696"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compiling<sp/>a<sp/>mixed<sp/>mode<sp/>project<sp/>with<sp/>MSVC<sp/>means<sp/>that<sp/>CLR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>exceptions<sp/>will<sp/>be<sp/>caught<sp/>in<sp/>(...)<sp/>as<sp/>well.<sp/>However,<sp/>these</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>not<sp/>fill-in<sp/>std::current_exception<sp/>and<sp/>thus<sp/>lead<sp/>to<sp/>crash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>attempting<sp/>rethrow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>/EHa<sp/>switch<sp/>also<sp/>causes<sp/>structured<sp/>exceptions<sp/>to<sp/>be<sp/>caught</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>here,<sp/>but<sp/>they<sp/>fill-in<sp/>current_exception<sp/>properly,<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>at<sp/>worst<sp/>the<sp/>output<sp/>should<sp/>be<sp/>a<sp/>little<sp/>weird,<sp/>instead<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>causing<sp/>a<sp/>crash.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::current_exception()<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="10706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Non<sp/>C++<sp/>exception.<sp/>Possibly<sp/>a<sp/>CLR<sp/>exception.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tryTranslators();</highlight></codeline>
<codeline lineno="10709"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(<sp/>TestFailureException&amp;<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="10712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::rethrow_exception(std::current_exception());</highlight></codeline>
<codeline lineno="10713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(<sp/>std::exception&amp;<sp/>ex<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="10715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ex.what();</highlight></codeline>
<codeline lineno="10716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(<sp/>std::string&amp;<sp/>msg<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="10718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>msg;</highlight></codeline>
<codeline lineno="10719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>msg<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="10721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>msg;</highlight></codeline>
<codeline lineno="10722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(...)<sp/>{</highlight></codeline>
<codeline lineno="10724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>exception&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10726"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10727"><highlight class="normal"></highlight></codeline>
<codeline lineno="10728"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>ExceptionTranslatorRegistry::tryTranslators()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="10729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_translators.empty())<sp/>{</highlight></codeline>
<codeline lineno="10730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::rethrow_exception(std::current_exception());</highlight></codeline>
<codeline lineno="10731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="10732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_translators[0]-&gt;translate(m_translators.begin()<sp/>+<sp/>1,<sp/>m_translators.end());</highlight></codeline>
<codeline lineno="10733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10734"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10735"><highlight class="normal"></highlight></codeline>
<codeline lineno="10736"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>^^<sp/>Exceptions<sp/>are<sp/>enabled<sp/>//<sp/>Exceptions<sp/>are<sp/>disabled<sp/>vv</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10737"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>ExceptionTranslatorRegistry::translateActiveException()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="10738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_ERROR(</highlight><highlight class="stringliteral">&quot;Attempted<sp/>to<sp/>translate<sp/>active<sp/>exception<sp/>under<sp/>CATCH_CONFIG_DISABLE_EXCEPTIONS!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10739"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10740"><highlight class="normal"></highlight></codeline>
<codeline lineno="10741"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>ExceptionTranslatorRegistry::tryTranslators()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="10742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_ERROR(</highlight><highlight class="stringliteral">&quot;Attempted<sp/>to<sp/>use<sp/>exception<sp/>translators<sp/>under<sp/>CATCH_CONFIG_DISABLE_EXCEPTIONS!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10743"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10744"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10745"><highlight class="normal"></highlight></codeline>
<codeline lineno="10746"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10747"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_exception_translator_registry.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10748"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_fatal_condition.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10749"><highlight class="normal"></highlight></codeline>
<codeline lineno="10750"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10751"><highlight class="normal"></highlight></codeline>
<codeline lineno="10752"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(<sp/>CATCH_CONFIG_WINDOWS_SEH<sp/>)<sp/>&amp;&amp;<sp/>!defined(<sp/>CATCH_CONFIG_POSIX_SIGNALS<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10753"><highlight class="normal"></highlight></codeline>
<codeline lineno="10754"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="10755"><highlight class="normal"></highlight></codeline>
<codeline lineno="10756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>neither<sp/>SEH<sp/>nor<sp/>signal<sp/>handling<sp/>is<sp/>required,<sp/>the<sp/>handler<sp/>impls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>not<sp/>have<sp/>to<sp/>do<sp/>anything,<sp/>and<sp/>can<sp/>be<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FatalConditionHandler::engage_platform()<sp/>{}</highlight></codeline>
<codeline lineno="10759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FatalConditionHandler::disengage_platform()<sp/>{}</highlight></codeline>
<codeline lineno="10760"><highlight class="normal"><sp/><sp/><sp/><sp/>FatalConditionHandler::FatalConditionHandler()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10761"><highlight class="normal"><sp/><sp/><sp/><sp/>FatalConditionHandler::~FatalConditionHandler()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10762"><highlight class="normal"></highlight></codeline>
<codeline lineno="10763"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10764"><highlight class="normal"></highlight></codeline>
<codeline lineno="10765"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>!CATCH_CONFIG_WINDOWS_SEH<sp/>&amp;&amp;<sp/>!CATCH_CONFIG_POSIX_SIGNALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10766"><highlight class="normal"></highlight></codeline>
<codeline lineno="10767"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(<sp/>CATCH_CONFIG_WINDOWS_SEH<sp/>)<sp/>&amp;&amp;<sp/>defined(<sp/>CATCH_CONFIG_POSIX_SIGNALS<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10768"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;Inconsistent<sp/>configuration:<sp/>Windows&apos;<sp/>SEH<sp/>handling<sp/>and<sp/>POSIX<sp/>signals<sp/>cannot<sp/>be<sp/>enabled<sp/>at<sp/>the<sp/>same<sp/>time&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10769"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_WINDOWS_SEH<sp/>&amp;&amp;<sp/>CATCH_CONFIG_POSIX_SIGNALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10770"><highlight class="normal"></highlight></codeline>
<codeline lineno="10771"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(<sp/>CATCH_CONFIG_WINDOWS_SEH<sp/>)<sp/>||<sp/>defined(<sp/>CATCH_CONFIG_POSIX_SIGNALS<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10772"><highlight class="normal"></highlight></codeline>
<codeline lineno="10773"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="10775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reportFatal(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>message<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="10776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::getCurrentContext().getResultCapture()-&gt;handleFatalErrorCondition(<sp/>message<sp/>);</highlight></codeline>
<codeline lineno="10777"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10778"><highlight class="normal"></highlight></codeline>
<codeline lineno="10782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>std::size_t<sp/>minStackSizeForErrors<sp/>=<sp/>32<sp/>*<sp/>1024;</highlight></codeline>
<codeline lineno="10783"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>unnamed<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10784"><highlight class="normal"></highlight></codeline>
<codeline lineno="10785"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_WINDOWS_SEH<sp/>||<sp/>CATCH_CONFIG_POSIX_SIGNALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10786"><highlight class="normal"></highlight></codeline>
<codeline lineno="10787"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(<sp/>CATCH_CONFIG_WINDOWS_SEH<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10788"><highlight class="normal"></highlight></codeline>
<codeline lineno="10789"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="10790"><highlight class="normal"></highlight></codeline>
<codeline lineno="10791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SignalDefs<sp/>{<sp/>DWORD<sp/>id;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name;<sp/>};</highlight></codeline>
<codeline lineno="10792"><highlight class="normal"></highlight></codeline>
<codeline lineno="10793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>is<sp/>no<sp/>1-1<sp/>mapping<sp/>between<sp/>signals<sp/>and<sp/>windows<sp/>exceptions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Windows<sp/>can<sp/>easily<sp/>distinguish<sp/>between<sp/>SO<sp/>and<sp/>SigSegV,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>SigInt,<sp/>SigTerm,<sp/>etc<sp/>are<sp/>handled<sp/>differently.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>SignalDefs<sp/>signalDefs[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="10797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">DWORD</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(EXCEPTION_ILLEGAL_INSTRUCTION),<sp/><sp/></highlight><highlight class="stringliteral">&quot;SIGILL<sp/>-<sp/>Illegal<sp/>instruction<sp/>signal&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="10798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">DWORD</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(EXCEPTION_STACK_OVERFLOW),<sp/></highlight><highlight class="stringliteral">&quot;SIGSEGV<sp/>-<sp/>Stack<sp/>overflow&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="10799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">DWORD</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(EXCEPTION_ACCESS_VIOLATION),<sp/></highlight><highlight class="stringliteral">&quot;SIGSEGV<sp/>-<sp/>Segmentation<sp/>violation<sp/>signal&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="10800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">DWORD</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(EXCEPTION_INT_DIVIDE_BY_ZERO),<sp/></highlight><highlight class="stringliteral">&quot;Divide<sp/>by<sp/>zero<sp/>error&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="10801"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="10802"><highlight class="normal"></highlight></codeline>
<codeline lineno="10803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>LONG<sp/>CALLBACK<sp/>handleVectoredException(PEXCEPTION_POINTERS<sp/>ExceptionInfo)<sp/>{</highlight></codeline>
<codeline lineno="10804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>def<sp/>:<sp/>signalDefs)<sp/>{</highlight></codeline>
<codeline lineno="10805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ExceptionInfo-&gt;ExceptionRecord-&gt;ExceptionCode<sp/>==<sp/>def.id)<sp/>{</highlight></codeline>
<codeline lineno="10806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reportFatal(def.name);</highlight></codeline>
<codeline lineno="10807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>its<sp/>not<sp/>an<sp/>exception<sp/>we<sp/>care<sp/>about,<sp/>pass<sp/>it<sp/>along.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>stops<sp/>us<sp/>from<sp/>eating<sp/>debugger<sp/>breaks<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXCEPTION_CONTINUE_SEARCH;</highlight></codeline>
<codeline lineno="10812"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10813"><highlight class="normal"></highlight></codeline>
<codeline lineno="10814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>we<sp/>do<sp/>not<sp/>support<sp/>multiple<sp/>instantiations,<sp/>we<sp/>put<sp/>these</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>into<sp/>global<sp/>variables<sp/>and<sp/>rely<sp/>on<sp/>cleaning<sp/>them<sp/>up<sp/>in<sp/>outlined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>constructors/destructors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PVOID<sp/>exceptionHandlerHandle<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10818"><highlight class="normal"></highlight></codeline>
<codeline lineno="10819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>MSVC,<sp/>we<sp/>reserve<sp/>part<sp/>of<sp/>the<sp/>stack<sp/>memory<sp/>for<sp/>handling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>memory<sp/>overflow<sp/>structured<sp/>exception.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10821"><highlight class="normal"><sp/><sp/><sp/><sp/>FatalConditionHandler::FatalConditionHandler()<sp/>{</highlight></codeline>
<codeline lineno="10822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ULONG<sp/>guaranteeSize<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">ULONG</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(minStackSizeForErrors);</highlight></codeline>
<codeline lineno="10823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!SetThreadStackGuarantee(&amp;guaranteeSize))<sp/>{</highlight></codeline>
<codeline lineno="10824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>do<sp/>not<sp/>want<sp/>to<sp/>fully<sp/>error<sp/>out,<sp/>because<sp/>needing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>stack<sp/>reserve<sp/>should<sp/>be<sp/>rare<sp/>enough<sp/>anyway.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::cerr()</highlight></codeline>
<codeline lineno="10827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>reserve<sp/>piece<sp/>of<sp/>stack.&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Stack<sp/>overflows<sp/>will<sp/>not<sp/>be<sp/>reported<sp/>successfully.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10830"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10831"><highlight class="normal"></highlight></codeline>
<codeline lineno="10832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>do<sp/>not<sp/>attempt<sp/>to<sp/>unset<sp/>the<sp/>stack<sp/>guarantee,<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Windows<sp/>does<sp/>not<sp/>support<sp/>lowering<sp/>the<sp/>stack<sp/>size<sp/>guarantee.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10834"><highlight class="normal"><sp/><sp/><sp/><sp/>FatalConditionHandler::~FatalConditionHandler()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10835"><highlight class="normal"></highlight></codeline>
<codeline lineno="10836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FatalConditionHandler::engage_platform()<sp/>{</highlight></codeline>
<codeline lineno="10837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>as<sp/>first<sp/>handler<sp/>in<sp/>current<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exceptionHandlerHandle<sp/>=<sp/>AddVectoredExceptionHandler(1,<sp/>handleVectoredException);</highlight></codeline>
<codeline lineno="10839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!exceptionHandlerHandle)<sp/>{</highlight></codeline>
<codeline lineno="10840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_RUNTIME_ERROR(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>register<sp/>vectored<sp/>exception<sp/>handler&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10842"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10843"><highlight class="normal"></highlight></codeline>
<codeline lineno="10844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FatalConditionHandler::disengage_platform()<sp/>{</highlight></codeline>
<codeline lineno="10845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!RemoveVectoredExceptionHandler(exceptionHandlerHandle))<sp/>{</highlight></codeline>
<codeline lineno="10846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_RUNTIME_ERROR(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>unregister<sp/>vectored<sp/>exception<sp/>handler&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exceptionHandlerHandle<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10849"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10850"><highlight class="normal"></highlight></codeline>
<codeline lineno="10851"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10852"><highlight class="normal"></highlight></codeline>
<codeline lineno="10853"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_WINDOWS_SEH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10854"><highlight class="normal"></highlight></codeline>
<codeline lineno="10855"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(<sp/>CATCH_CONFIG_POSIX_SIGNALS<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10856"><highlight class="normal"></highlight></codeline>
<codeline lineno="10857"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10858"><highlight class="normal"></highlight></codeline>
<codeline lineno="10859"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="10860"><highlight class="normal"></highlight></codeline>
<codeline lineno="10861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SignalDefs<sp/>{</highlight></codeline>
<codeline lineno="10862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="10863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name;</highlight></codeline>
<codeline lineno="10864"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="10865"><highlight class="normal"></highlight></codeline>
<codeline lineno="10866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>SignalDefs<sp/>signalDefs[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="10867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>SIGINT,<sp/><sp/></highlight><highlight class="stringliteral">&quot;SIGINT<sp/>-<sp/>Terminal<sp/>interrupt<sp/>signal&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="10868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>SIGILL,<sp/><sp/></highlight><highlight class="stringliteral">&quot;SIGILL<sp/>-<sp/>Illegal<sp/>instruction<sp/>signal&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="10869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>SIGFPE,<sp/><sp/></highlight><highlight class="stringliteral">&quot;SIGFPE<sp/>-<sp/>Floating<sp/>point<sp/>error<sp/>signal&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="10870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>SIGSEGV,<sp/></highlight><highlight class="stringliteral">&quot;SIGSEGV<sp/>-<sp/>Segmentation<sp/>violation<sp/>signal&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="10871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>SIGTERM,<sp/></highlight><highlight class="stringliteral">&quot;SIGTERM<sp/>-<sp/>Termination<sp/>request<sp/>signal&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="10872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>SIGABRT,<sp/></highlight><highlight class="stringliteral">&quot;SIGABRT<sp/>-<sp/>Abort<sp/>(abnormal<sp/>termination)<sp/>signal&quot;</highlight><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="10873"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="10874"><highlight class="normal"></highlight></codeline>
<codeline lineno="10875"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Older<sp/>GCCs<sp/>trigger<sp/>-Wmissing-field-initializers<sp/>for<sp/>T<sp/>foo<sp/>=<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10876"><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>is<sp/>zero<sp/>initialization,<sp/>but<sp/>not<sp/>explicit.<sp/>We<sp/>want<sp/>to<sp/>avoid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10877"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10878"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10879"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10880"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wmissing-field-initializers&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10881"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10882"><highlight class="normal"></highlight></codeline>
<codeline lineno="10883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>altStackMem<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::size_t<sp/>altStackSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="10885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>stack_t<sp/>oldSigStack{};</highlight></codeline>
<codeline lineno="10886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sigaction<sp/>oldSigActions[sizeof(signalDefs)<sp/>/<sp/>sizeof(SignalDefs)]{};</highlight></codeline>
<codeline lineno="10887"><highlight class="normal"></highlight></codeline>
<codeline lineno="10888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>restorePreviousSignalHandlers()<sp/>{</highlight></codeline>
<codeline lineno="10889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>set<sp/>signal<sp/>handlers<sp/>back<sp/>to<sp/>the<sp/>previous<sp/>ones.<sp/>Hopefully</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>nobody<sp/>overwrote<sp/>them<sp/>in<sp/>the<sp/>meantime,<sp/>and<sp/>doesn&apos;t<sp/>expect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>their<sp/>signal<sp/>handlers<sp/>to<sp/>live<sp/>past<sp/>ours<sp/>given<sp/>that<sp/>they</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>installed<sp/>them<sp/>after<sp/>ours..</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(signalDefs)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(SignalDefs);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="10894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigaction(signalDefs[i].</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>&amp;oldSigActions[i],<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>old<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigaltstack(&amp;oldSigStack,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10898"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10899"><highlight class="normal"></highlight></codeline>
<codeline lineno="10900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>handleSignal(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sig<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="10901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&lt;unknown<sp/>signal&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>def<sp/>:<sp/>signalDefs)<sp/>{</highlight></codeline>
<codeline lineno="10903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sig<sp/>==<sp/>def.id)<sp/>{</highlight></codeline>
<codeline lineno="10904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>def.name;</highlight></codeline>
<codeline lineno="10905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>to<sp/>restore<sp/>previous<sp/>signal<sp/>handlers<sp/>and<sp/>let<sp/>them<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>their<sp/>thing,<sp/>so<sp/>that<sp/>the<sp/>users<sp/>can<sp/>have<sp/>the<sp/>debugger<sp/>break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>a<sp/>signal<sp/>is<sp/>raised,<sp/>and<sp/>so<sp/>on.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>restorePreviousSignalHandlers();</highlight></codeline>
<codeline lineno="10912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reportFatal(<sp/>name<sp/>);</highlight></codeline>
<codeline lineno="10913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">raise</highlight><highlight class="normal">(<sp/>sig<sp/>);</highlight></codeline>
<codeline lineno="10914"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10915"><highlight class="normal"></highlight></codeline>
<codeline lineno="10916"><highlight class="normal"><sp/><sp/><sp/><sp/>FatalConditionHandler::FatalConditionHandler()<sp/>{</highlight></codeline>
<codeline lineno="10917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(!altStackMem<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>initialize<sp/>POSIX<sp/>signal<sp/>handler<sp/>when<sp/>one<sp/>already<sp/>exists&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(altStackSize<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="10919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>altStackSize<sp/>=<sp/><ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">std::max</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(SIGSTKSZ),<sp/>minStackSizeForErrors);</highlight></codeline>
<codeline lineno="10920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>altStackMem<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[altStackSize]();</highlight></codeline>
<codeline lineno="10922"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10923"><highlight class="normal"></highlight></codeline>
<codeline lineno="10924"><highlight class="normal"><sp/><sp/><sp/><sp/>FatalConditionHandler::~FatalConditionHandler()<sp/>{</highlight></codeline>
<codeline lineno="10925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>altStackMem;</highlight></codeline>
<codeline lineno="10926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>signal<sp/>that<sp/>another<sp/>instance<sp/>can<sp/>be<sp/>constructed<sp/>by<sp/>zeroing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>out<sp/>the<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>altStackMem<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10929"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10930"><highlight class="normal"></highlight></codeline>
<codeline lineno="10931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FatalConditionHandler::engage_platform()<sp/>{</highlight></codeline>
<codeline lineno="10932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack_t<sp/>sigStack;</highlight></codeline>
<codeline lineno="10933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigStack.ss_sp<sp/>=<sp/>altStackMem;</highlight></codeline>
<codeline lineno="10934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigStack.ss_size<sp/>=<sp/>altStackSize;</highlight></codeline>
<codeline lineno="10935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigStack.ss_flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="10936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigaltstack(&amp;sigStack,<sp/>&amp;oldSigStack);</highlight></codeline>
<codeline lineno="10937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sigaction<sp/>sa<sp/>=<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="10938"><highlight class="normal"></highlight></codeline>
<codeline lineno="10939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sa.sa_handler<sp/>=<sp/>handleSignal;</highlight></codeline>
<codeline lineno="10940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sa.sa_flags<sp/>=<sp/>SA_ONSTACK;</highlight></codeline>
<codeline lineno="10941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(signalDefs)/</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(SignalDefs);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="10942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigaction(signalDefs[i].</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>&amp;sa,<sp/>&amp;oldSigActions[i]);</highlight></codeline>
<codeline lineno="10943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10944"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10945"><highlight class="normal"></highlight></codeline>
<codeline lineno="10946"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10947"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10948"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10949"><highlight class="normal"></highlight></codeline>
<codeline lineno="10950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FatalConditionHandler::disengage_platform()<sp/>{</highlight></codeline>
<codeline lineno="10951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>restorePreviousSignalHandlers();</highlight></codeline>
<codeline lineno="10952"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10953"><highlight class="normal"></highlight></codeline>
<codeline lineno="10954"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10955"><highlight class="normal"></highlight></codeline>
<codeline lineno="10956"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_POSIX_SIGNALS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10957"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_fatal_condition.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10958"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_generators.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10959"><highlight class="normal"></highlight></codeline>
<codeline lineno="10960"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10961"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10962"><highlight class="normal"></highlight></codeline>
<codeline lineno="10963"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="10964"><highlight class="normal"></highlight></codeline>
<codeline lineno="10965"><highlight class="normal">IGeneratorTracker::~IGeneratorTracker()<sp/>{}</highlight></codeline>
<codeline lineno="10966"><highlight class="normal"></highlight></codeline>
<codeline lineno="10967"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>GeneratorException::what()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="10968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_msg;</highlight></codeline>
<codeline lineno="10969"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10970"><highlight class="normal"></highlight></codeline>
<codeline lineno="10971"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Generators<sp/>{</highlight></codeline>
<codeline lineno="10972"><highlight class="normal"></highlight></codeline>
<codeline lineno="10973"><highlight class="normal"><sp/><sp/><sp/><sp/>GeneratorUntypedBase::~GeneratorUntypedBase()<sp/>{}</highlight></codeline>
<codeline lineno="10974"><highlight class="normal"></highlight></codeline>
<codeline lineno="10975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>acquireGeneratorTracker(<sp/>StringRef<sp/>generatorName,<sp/>SourceLineInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lineInfo<sp/>)<sp/>-&gt;<sp/>IGeneratorTracker&amp;<sp/>{</highlight></codeline>
<codeline lineno="10976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getResultCapture().acquireGeneratorTracker(<sp/>generatorName,<sp/>lineInfo<sp/>);</highlight></codeline>
<codeline lineno="10977"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="10978"><highlight class="normal"></highlight></codeline>
<codeline lineno="10979"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Generators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10980"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10981"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_generators.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10982"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_interfaces_capture.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10983"><highlight class="normal"></highlight></codeline>
<codeline lineno="10984"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="10985"><highlight class="normal"><sp/><sp/><sp/><sp/>IResultCapture::~IResultCapture()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10986"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10987"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_interfaces_capture.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10988"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_interfaces_config.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10989"><highlight class="normal"></highlight></codeline>
<codeline lineno="10990"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="10991"><highlight class="normal"><sp/><sp/><sp/><sp/>IConfig::~IConfig()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10992"><highlight class="normal">}</highlight></codeline>
<codeline lineno="10993"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_interfaces_config.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10994"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_interfaces_exception.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10995"><highlight class="normal"></highlight></codeline>
<codeline lineno="10996"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="10997"><highlight class="normal"><sp/><sp/><sp/><sp/>IExceptionTranslator::~IExceptionTranslator()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10998"><highlight class="normal"><sp/><sp/><sp/><sp/>IExceptionTranslatorRegistry::~IExceptionTranslatorRegistry()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="10999"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11000"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_interfaces_exception.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11001"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_interfaces_registry_hub.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11002"><highlight class="normal"></highlight></codeline>
<codeline lineno="11003"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="11004"><highlight class="normal"><sp/><sp/><sp/><sp/>IRegistryHub::~IRegistryHub()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11005"><highlight class="normal"><sp/><sp/><sp/><sp/>IMutableRegistryHub::~IMutableRegistryHub()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11006"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11007"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_interfaces_registry_hub.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11008"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_interfaces_reporter.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11009"><highlight class="normal"></highlight></codeline>
<codeline lineno="11010"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_reporter_listening.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11011"><highlight class="normal"></highlight></codeline>
<codeline lineno="11012"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="11013"><highlight class="normal"></highlight></codeline>
<codeline lineno="11014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ListeningReporter<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>IStreamingReporter<sp/>{</highlight></codeline>
<codeline lineno="11015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Reporters<sp/>=<sp/>std::vector&lt;IStreamingReporterPtr&gt;;</highlight></codeline>
<codeline lineno="11016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reporters<sp/>m_listeners;</highlight></codeline>
<codeline lineno="11017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IStreamingReporterPtr<sp/>m_reporter<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReporterPreferences<sp/>m_preferences;</highlight></codeline>
<codeline lineno="11019"><highlight class="normal"></highlight></codeline>
<codeline lineno="11020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="11021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ListeningReporter();</highlight></codeline>
<codeline lineno="11022"><highlight class="normal"></highlight></codeline>
<codeline lineno="11023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addListener(<sp/>IStreamingReporterPtr&amp;&amp;<sp/>listener<sp/>);</highlight></codeline>
<codeline lineno="11024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addReporter(<sp/>IStreamingReporterPtr&amp;&amp;<sp/>reporter<sp/>);</highlight></codeline>
<codeline lineno="11025"><highlight class="normal"></highlight></codeline>
<codeline lineno="11026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>IStreamingReporter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11027"><highlight class="normal"></highlight></codeline>
<codeline lineno="11028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReporterPreferences<sp/>getPreferences()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11029"><highlight class="normal"></highlight></codeline>
<codeline lineno="11030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>noMatchingTestCases(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>spec<sp/>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11031"><highlight class="normal"></highlight></codeline>
<codeline lineno="11032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reportInvalidArguments(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;arg)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11033"><highlight class="normal"></highlight></codeline>
<codeline lineno="11034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::set&lt;Verbosity&gt;<sp/>getSupportedVerbosities();</highlight></codeline>
<codeline lineno="11035"><highlight class="normal"></highlight></codeline>
<codeline lineno="11036"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_ENABLE_BENCHMARKING)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>benchmarkPreparing(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>benchmarkStarting(<sp/>BenchmarkInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>benchmarkInfo<sp/>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>benchmarkEnded(<sp/>BenchmarkStats&lt;&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>benchmarkStats<sp/>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>benchmarkFailed(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11041"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_ENABLE_BENCHMARKING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11042"><highlight class="normal"></highlight></codeline>
<codeline lineno="11043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testRunStarting(<sp/>TestRunInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testRunInfo<sp/>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testGroupStarting(<sp/>GroupInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>groupInfo<sp/>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testCaseStarting(<sp/>TestCaseInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testInfo<sp/>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sectionStarting(<sp/>SectionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>sectionInfo<sp/>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assertionStarting(<sp/>AssertionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>assertionInfo<sp/>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11048"><highlight class="normal"></highlight></codeline>
<codeline lineno="11049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>return<sp/>value<sp/>indicates<sp/>if<sp/>the<sp/>messages<sp/>buffer<sp/>should<sp/>be<sp/>cleared:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>assertionEnded(<sp/>AssertionStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>assertionStats<sp/>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>sectionEnded(<sp/>SectionStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>sectionStats<sp/>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testCaseEnded(<sp/>TestCaseStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCaseStats<sp/>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testGroupEnded(<sp/>TestGroupStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testGroupStats<sp/>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testRunEnded(<sp/>TestRunStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testRunStats<sp/>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11055"><highlight class="normal"></highlight></codeline>
<codeline lineno="11056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>skipTest(<sp/>TestCaseInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testInfo<sp/>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isMulti()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11058"><highlight class="normal"></highlight></codeline>
<codeline lineno="11059"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="11060"><highlight class="normal"></highlight></codeline>
<codeline lineno="11061"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11062"><highlight class="normal"></highlight></codeline>
<codeline lineno="11063"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_reporter_listening.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11064"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="11065"><highlight class="normal"></highlight></codeline>
<codeline lineno="11066"><highlight class="normal"><sp/><sp/><sp/><sp/>ReporterConfig::ReporterConfig(<sp/>IConfigPtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_fullConfig<sp/>)</highlight></codeline>
<codeline lineno="11067"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>m_stream(<sp/>&amp;_fullConfig-&gt;stream()<sp/>),<sp/>m_fullConfig(<sp/>_fullConfig<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="11068"><highlight class="normal"></highlight></codeline>
<codeline lineno="11069"><highlight class="normal"><sp/><sp/><sp/><sp/>ReporterConfig::ReporterConfig(<sp/>IConfigPtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_fullConfig,<sp/>std::ostream&amp;<sp/>_stream<sp/>)</highlight></codeline>
<codeline lineno="11070"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>m_stream(<sp/>&amp;_stream<sp/>),<sp/>m_fullConfig(<sp/>_fullConfig<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="11071"><highlight class="normal"></highlight></codeline>
<codeline lineno="11072"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/>ReporterConfig::stream()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*m_stream;<sp/>}</highlight></codeline>
<codeline lineno="11073"><highlight class="normal"><sp/><sp/><sp/><sp/>IConfigPtr<sp/>ReporterConfig::fullConfig()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_fullConfig;<sp/>}</highlight></codeline>
<codeline lineno="11074"><highlight class="normal"></highlight></codeline>
<codeline lineno="11075"><highlight class="normal"><sp/><sp/><sp/><sp/>TestRunInfo::TestRunInfo(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_name<sp/>)<sp/>:<sp/>name(<sp/>_name<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="11076"><highlight class="normal"></highlight></codeline>
<codeline lineno="11077"><highlight class="normal"><sp/><sp/><sp/><sp/>GroupInfo::GroupInfo(<sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_name,</highlight></codeline>
<codeline lineno="11078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>_groupIndex,</highlight></codeline>
<codeline lineno="11079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>_groupsCount<sp/>)</highlight></codeline>
<codeline lineno="11080"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>name(<sp/>_name<sp/>),</highlight></codeline>
<codeline lineno="11081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>groupIndex(<sp/>_groupIndex<sp/>),</highlight></codeline>
<codeline lineno="11082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>groupsCounts(<sp/>_groupsCount<sp/>)</highlight></codeline>
<codeline lineno="11083"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="11084"><highlight class="normal"></highlight></codeline>
<codeline lineno="11085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>AssertionStats::AssertionStats(<sp/>AssertionResult<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_assertionResult,</highlight></codeline>
<codeline lineno="11086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;MessageInfo&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_infoMessages,</highlight></codeline>
<codeline lineno="11087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Totals<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_totals<sp/>)</highlight></codeline>
<codeline lineno="11088"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>assertionResult(<sp/>_assertionResult<sp/>),</highlight></codeline>
<codeline lineno="11089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>infoMessages(<sp/>_infoMessages<sp/>),</highlight></codeline>
<codeline lineno="11090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totals(<sp/>_totals<sp/>)</highlight></codeline>
<codeline lineno="11091"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="11092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assertionResult.m_resultData.lazyExpression.m_transientExpression<sp/>=<sp/>_assertionResult.m_resultData.lazyExpression.m_transientExpression;</highlight></codeline>
<codeline lineno="11093"><highlight class="normal"></highlight></codeline>
<codeline lineno="11094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>assertionResult.hasMessage()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="11095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>message<sp/>into<sp/>messages<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>!TBD<sp/>This<sp/>should<sp/>have<sp/>been<sp/>done<sp/>earlier,<sp/>somewhere</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MessageBuilder<sp/>builder(<sp/>assertionResult.getTestMacroName(),<sp/>assertionResult.getSourceInfo(),<sp/>assertionResult.getResultType()<sp/>);</highlight></codeline>
<codeline lineno="11098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builder<sp/>&lt;&lt;<sp/>assertionResult.getMessage();</highlight></codeline>
<codeline lineno="11099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>builder.m_info.message<sp/>=<sp/>builder.m_stream.str();</highlight></codeline>
<codeline lineno="11100"><highlight class="normal"></highlight></codeline>
<codeline lineno="11101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>infoMessages.push_back(<sp/>builder.m_info<sp/>);</highlight></codeline>
<codeline lineno="11102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11104"><highlight class="normal"></highlight></codeline>
<codeline lineno="11105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>AssertionStats::~AssertionStats()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11106"><highlight class="normal"></highlight></codeline>
<codeline lineno="11107"><highlight class="normal"><sp/><sp/><sp/><sp/>SectionStats::SectionStats(<sp/><sp/>SectionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_sectionInfo,</highlight></codeline>
<codeline lineno="11108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Counts<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_assertions,</highlight></codeline>
<codeline lineno="11109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>_durationInSeconds,</highlight></codeline>
<codeline lineno="11110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_missingAssertions<sp/>)</highlight></codeline>
<codeline lineno="11111"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>sectionInfo(<sp/>_sectionInfo<sp/>),</highlight></codeline>
<codeline lineno="11112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assertions(<sp/>_assertions<sp/>),</highlight></codeline>
<codeline lineno="11113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>durationInSeconds(<sp/>_durationInSeconds<sp/>),</highlight></codeline>
<codeline lineno="11114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>missingAssertions(<sp/>_missingAssertions<sp/>)</highlight></codeline>
<codeline lineno="11115"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="11116"><highlight class="normal"></highlight></codeline>
<codeline lineno="11117"><highlight class="normal"><sp/><sp/><sp/><sp/>SectionStats::~SectionStats()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11118"><highlight class="normal"></highlight></codeline>
<codeline lineno="11119"><highlight class="normal"><sp/><sp/><sp/><sp/>TestCaseStats::TestCaseStats(<sp/><sp/>TestCaseInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_testInfo,</highlight></codeline>
<codeline lineno="11120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Totals<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_totals,</highlight></codeline>
<codeline lineno="11121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_stdOut,</highlight></codeline>
<codeline lineno="11122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_stdErr,</highlight></codeline>
<codeline lineno="11123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_aborting<sp/>)</highlight></codeline>
<codeline lineno="11124"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>testInfo(<sp/>_testInfo<sp/>),</highlight></codeline>
<codeline lineno="11125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totals(<sp/>_totals<sp/>),</highlight></codeline>
<codeline lineno="11126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stdOut(<sp/>_stdOut<sp/>),</highlight></codeline>
<codeline lineno="11127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stdErr(<sp/>_stdErr<sp/>),</highlight></codeline>
<codeline lineno="11128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aborting(<sp/>_aborting<sp/>)</highlight></codeline>
<codeline lineno="11129"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="11130"><highlight class="normal"></highlight></codeline>
<codeline lineno="11131"><highlight class="normal"><sp/><sp/><sp/><sp/>TestCaseStats::~TestCaseStats()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11132"><highlight class="normal"></highlight></codeline>
<codeline lineno="11133"><highlight class="normal"><sp/><sp/><sp/><sp/>TestGroupStats::TestGroupStats(<sp/>GroupInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_groupInfo,</highlight></codeline>
<codeline lineno="11134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Totals<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_totals,</highlight></codeline>
<codeline lineno="11135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_aborting<sp/>)</highlight></codeline>
<codeline lineno="11136"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>groupInfo(<sp/>_groupInfo<sp/>),</highlight></codeline>
<codeline lineno="11137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totals(<sp/>_totals<sp/>),</highlight></codeline>
<codeline lineno="11138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aborting(<sp/>_aborting<sp/>)</highlight></codeline>
<codeline lineno="11139"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="11140"><highlight class="normal"></highlight></codeline>
<codeline lineno="11141"><highlight class="normal"><sp/><sp/><sp/><sp/>TestGroupStats::TestGroupStats(<sp/>GroupInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_groupInfo<sp/>)</highlight></codeline>
<codeline lineno="11142"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>groupInfo(<sp/>_groupInfo<sp/>),</highlight></codeline>
<codeline lineno="11143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aborting(<sp/>false<sp/>)</highlight></codeline>
<codeline lineno="11144"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="11145"><highlight class="normal"></highlight></codeline>
<codeline lineno="11146"><highlight class="normal"><sp/><sp/><sp/><sp/>TestGroupStats::~TestGroupStats()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11147"><highlight class="normal"></highlight></codeline>
<codeline lineno="11148"><highlight class="normal"><sp/><sp/><sp/><sp/>TestRunStats::TestRunStats(<sp/><sp/><sp/>TestRunInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_runInfo,</highlight></codeline>
<codeline lineno="11149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Totals<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_totals,</highlight></codeline>
<codeline lineno="11150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_aborting<sp/>)</highlight></codeline>
<codeline lineno="11151"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>runInfo(<sp/>_runInfo<sp/>),</highlight></codeline>
<codeline lineno="11152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totals(<sp/>_totals<sp/>),</highlight></codeline>
<codeline lineno="11153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aborting(<sp/>_aborting<sp/>)</highlight></codeline>
<codeline lineno="11154"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="11155"><highlight class="normal"></highlight></codeline>
<codeline lineno="11156"><highlight class="normal"><sp/><sp/><sp/><sp/>TestRunStats::~TestRunStats()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11157"><highlight class="normal"></highlight></codeline>
<codeline lineno="11158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>IStreamingReporter::fatalErrorEncountered(<sp/>StringRef<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="11159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IStreamingReporter::isMulti()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="11160"><highlight class="normal"></highlight></codeline>
<codeline lineno="11161"><highlight class="normal"><sp/><sp/><sp/><sp/>IReporterFactory::~IReporterFactory()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11162"><highlight class="normal"><sp/><sp/><sp/><sp/>IReporterRegistry::~IReporterRegistry()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11163"><highlight class="normal"></highlight></codeline>
<codeline lineno="11164"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11165"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_interfaces_reporter.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11166"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_interfaces_runner.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11167"><highlight class="normal"></highlight></codeline>
<codeline lineno="11168"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="11169"><highlight class="normal"><sp/><sp/><sp/><sp/>IRunner::~IRunner()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11171"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_interfaces_runner.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_interfaces_testcase.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11173"><highlight class="normal"></highlight></codeline>
<codeline lineno="11174"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="11175"><highlight class="normal"><sp/><sp/><sp/><sp/>ITestInvoker::~ITestInvoker()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11176"><highlight class="normal"><sp/><sp/><sp/><sp/>ITestCaseRegistry::~ITestCaseRegistry()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_interfaces_testcase.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_leak_detector.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11180"><highlight class="normal"></highlight></codeline>
<codeline lineno="11181"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CATCH_CONFIG_WINDOWS_CRTDBG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11182"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;crtdbg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11183"><highlight class="normal"></highlight></codeline>
<codeline lineno="11184"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="11185"><highlight class="normal"></highlight></codeline>
<codeline lineno="11186"><highlight class="normal"><sp/><sp/><sp/><sp/>LeakDetector::LeakDetector()<sp/>{</highlight></codeline>
<codeline lineno="11187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag<sp/>=<sp/>_CrtSetDbgFlag(_CRTDBG_REPORT_FLAG);</highlight></codeline>
<codeline lineno="11188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>|=<sp/>_CRTDBG_LEAK_CHECK_DF;</highlight></codeline>
<codeline lineno="11189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flag<sp/>|=<sp/>_CRTDBG_ALLOC_MEM_DF;</highlight></codeline>
<codeline lineno="11190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_CrtSetDbgFlag(flag);</highlight></codeline>
<codeline lineno="11191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_CrtSetReportMode(_CRT_WARN,<sp/>_CRTDBG_MODE_FILE<sp/>|<sp/>_CRTDBG_MODE_DEBUG);</highlight></codeline>
<codeline lineno="11192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_CrtSetReportFile(_CRT_WARN,<sp/>_CRTDBG_FILE_STDERR);</highlight></codeline>
<codeline lineno="11193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Change<sp/>this<sp/>to<sp/>leaking<sp/>allocation&apos;s<sp/>number<sp/>to<sp/>break<sp/>there</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_CrtSetBreakAlloc(-1);</highlight></codeline>
<codeline lineno="11195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11197"><highlight class="normal"></highlight></codeline>
<codeline lineno="11198"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11199"><highlight class="normal"></highlight></codeline>
<codeline lineno="11200"><highlight class="normal"><sp/><sp/><sp/><sp/>Catch::LeakDetector::LeakDetector()<sp/>{}</highlight></codeline>
<codeline lineno="11201"><highlight class="normal"></highlight></codeline>
<codeline lineno="11202"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11203"><highlight class="normal"></highlight></codeline>
<codeline lineno="11204"><highlight class="normal">Catch::LeakDetector::~LeakDetector()<sp/>{</highlight></codeline>
<codeline lineno="11205"><highlight class="normal"><sp/><sp/><sp/><sp/>Catch::cleanUp();</highlight></codeline>
<codeline lineno="11206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11207"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_leak_detector.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11208"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_list.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11209"><highlight class="normal"></highlight></codeline>
<codeline lineno="11210"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_list.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11211"><highlight class="normal"></highlight></codeline>
<codeline lineno="11212"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11213"><highlight class="normal"></highlight></codeline>
<codeline lineno="11214"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="11215"><highlight class="normal"></highlight></codeline>
<codeline lineno="11216"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>listTests(<sp/>Config<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config<sp/>);</highlight></codeline>
<codeline lineno="11217"><highlight class="normal"></highlight></codeline>
<codeline lineno="11218"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>listTestsNamesOnly(<sp/>Config<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config<sp/>);</highlight></codeline>
<codeline lineno="11219"><highlight class="normal"></highlight></codeline>
<codeline lineno="11220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TagInfo<sp/>{</highlight></codeline>
<codeline lineno="11221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>spelling<sp/>);</highlight></codeline>
<codeline lineno="11222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="group__core__func__vector__relational_1gab5af106b2d5675d51af84815d937384d" kindref="member">all</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11223"><highlight class="normal"></highlight></codeline>
<codeline lineno="11224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;std::string&gt;<sp/>spellings;</highlight></codeline>
<codeline lineno="11225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="11226"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="11227"><highlight class="normal"></highlight></codeline>
<codeline lineno="11228"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>listTags(<sp/>Config<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config<sp/>);</highlight></codeline>
<codeline lineno="11229"><highlight class="normal"></highlight></codeline>
<codeline lineno="11230"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>listReporters();</highlight></codeline>
<codeline lineno="11231"><highlight class="normal"></highlight></codeline>
<codeline lineno="11232"><highlight class="normal"><sp/><sp/><sp/><sp/>Option&lt;std::size_t&gt;<sp/>list(<sp/>std::shared_ptr&lt;Config&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config<sp/>);</highlight></codeline>
<codeline lineno="11233"><highlight class="normal"></highlight></codeline>
<codeline lineno="11234"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11235"><highlight class="normal"></highlight></codeline>
<codeline lineno="11236"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_list.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11237"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_text.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11238"><highlight class="normal"></highlight></codeline>
<codeline lineno="11239"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="11240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">clara::TextFlow;</highlight></codeline>
<codeline lineno="11241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11242"><highlight class="normal"></highlight></codeline>
<codeline lineno="11243"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_text.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11244"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11245"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11246"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11247"><highlight class="normal"></highlight></codeline>
<codeline lineno="11248"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="11249"><highlight class="normal"></highlight></codeline>
<codeline lineno="11250"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>listTests(<sp/>Config<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="11251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestSpec<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testSpec<sp/>=<sp/>config.testSpec();</highlight></codeline>
<codeline lineno="11252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>config.hasTestFilters()<sp/>)</highlight></codeline>
<codeline lineno="11253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::cout()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Matching<sp/>test<sp/>cases:\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="11255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::cout()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;All<sp/>available<sp/>test<sp/>cases:\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11257"><highlight class="normal"></highlight></codeline>
<codeline lineno="11258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>matchedTestCases<sp/>=<sp/>filterTests(<sp/>getAllTestCasesSorted(<sp/>config<sp/>),<sp/>testSpec,<sp/>config<sp/>);</highlight></codeline>
<codeline lineno="11259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCaseInfo<sp/>:<sp/>matchedTestCases<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="11260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Colour::Code<sp/>colour<sp/>=<sp/>testCaseInfo.isHidden()</highlight></codeline>
<codeline lineno="11261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>Colour::SecondaryText</highlight></codeline>
<codeline lineno="11262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>Colour::None;</highlight></codeline>
<codeline lineno="11263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Colour<sp/>colourGuard(<sp/>colour<sp/>);</highlight></codeline>
<codeline lineno="11264"><highlight class="normal"></highlight></codeline>
<codeline lineno="11265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::cout()<sp/>&lt;&lt;<sp/>Column(<sp/>testCaseInfo.name<sp/>).initialIndent(<sp/>2<sp/>).indent(<sp/>4<sp/>)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>config.verbosity()<sp/>&gt;=<sp/>Verbosity::High<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="11267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::cout()<sp/>&lt;&lt;<sp/>Column(<sp/>Catch::Detail::stringify(<sp/>testCaseInfo.lineInfo<sp/>)<sp/>).indent(4)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="11268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>description<sp/>=<sp/>testCaseInfo.description;</highlight></codeline>
<codeline lineno="11269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>description.empty()<sp/>)</highlight></codeline>
<codeline lineno="11270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>description<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;(NO<sp/>DESCRIPTION)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::cout()<sp/>&lt;&lt;<sp/>Column(<sp/>description<sp/>).indent(4)<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="11272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!testCaseInfo.tags.empty()<sp/>)</highlight></codeline>
<codeline lineno="11274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::cout()<sp/>&lt;&lt;<sp/>Column(<sp/>testCaseInfo.tagsAsString()<sp/>).indent(<sp/>6<sp/>)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11276"><highlight class="normal"></highlight></codeline>
<codeline lineno="11277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!config.hasTestFilters()<sp/>)</highlight></codeline>
<codeline lineno="11278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::cout()<sp/>&lt;&lt;<sp/>pluralise(<sp/>matchedTestCases.size(),<sp/></highlight><highlight class="stringliteral">&quot;test<sp/>case&quot;</highlight><highlight class="normal"><sp/>)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="11279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::cout()<sp/>&lt;&lt;<sp/>pluralise(<sp/>matchedTestCases.size(),<sp/></highlight><highlight class="stringliteral">&quot;matching<sp/>test<sp/>case&quot;</highlight><highlight class="normal"><sp/>)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="11281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matchedTestCases.size();</highlight></codeline>
<codeline lineno="11282"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11283"><highlight class="normal"></highlight></codeline>
<codeline lineno="11284"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>listTestsNamesOnly(<sp/>Config<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="11285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestSpec<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testSpec<sp/>=<sp/>config.testSpec();</highlight></codeline>
<codeline lineno="11286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>matchedTests<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="11287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;TestCase&gt;<sp/>matchedTestCases<sp/>=<sp/>filterTests(<sp/>getAllTestCasesSorted(<sp/>config<sp/>),<sp/>testSpec,<sp/>config<sp/>);</highlight></codeline>
<codeline lineno="11288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCaseInfo<sp/>:<sp/>matchedTestCases<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="11289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>matchedTests++;</highlight></codeline>
<codeline lineno="11290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>startsWith(<sp/>testCaseInfo.name,<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal"><sp/>)<sp/>)</highlight></codeline>
<codeline lineno="11291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::cout()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>testCaseInfo.name<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::cout()<sp/>&lt;&lt;<sp/>testCaseInfo.name;</highlight></codeline>
<codeline lineno="11294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>config.verbosity()<sp/>&gt;=<sp/>Verbosity::High<sp/>)</highlight></codeline>
<codeline lineno="11295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::cout()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\t@&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>testCaseInfo.lineInfo;</highlight></codeline>
<codeline lineno="11296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::cout()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="11297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matchedTests;</highlight></codeline>
<codeline lineno="11299"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11300"><highlight class="normal"></highlight></codeline>
<codeline lineno="11301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TagInfo::add(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>spelling<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="11302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++count;</highlight></codeline>
<codeline lineno="11303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spellings.insert(<sp/>spelling<sp/>);</highlight></codeline>
<codeline lineno="11304"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11305"><highlight class="normal"></highlight></codeline>
<codeline lineno="11306"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="group__core__func__vector__relational_1gab5af106b2d5675d51af84815d937384d" kindref="member">TagInfo::all</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="11307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="11308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>spelling<sp/>:<sp/>spellings)<sp/>{</highlight></codeline>
<codeline lineno="11309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>2<sp/>for<sp/>the<sp/>brackes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>+=<sp/>spelling.size()<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="11311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11312"><highlight class="normal"></highlight></codeline>
<codeline lineno="11313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>out;<sp/>out.reserve(size);</highlight></codeline>
<codeline lineno="11314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>spelling<sp/>:<sp/>spellings)<sp/>{</highlight></codeline>
<codeline lineno="11315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>+=<sp/>&apos;[&apos;;</highlight></codeline>
<codeline lineno="11316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>+=<sp/>spelling;</highlight></codeline>
<codeline lineno="11317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>+=<sp/>&apos;]&apos;;</highlight></codeline>
<codeline lineno="11318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="11320"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11321"><highlight class="normal"></highlight></codeline>
<codeline lineno="11322"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>listTags(<sp/>Config<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="11323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestSpec<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testSpec<sp/>=<sp/>config.testSpec();</highlight></codeline>
<codeline lineno="11324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>config.hasTestFilters()<sp/>)</highlight></codeline>
<codeline lineno="11325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::cout()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Tags<sp/>for<sp/>matching<sp/>test<sp/>cases:\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="11327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::cout()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;All<sp/>available<sp/>tags:\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11329"><highlight class="normal"></highlight></codeline>
<codeline lineno="11330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>TagInfo&gt;<sp/>tagCounts;</highlight></codeline>
<codeline lineno="11331"><highlight class="normal"></highlight></codeline>
<codeline lineno="11332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;TestCase&gt;<sp/>matchedTestCases<sp/>=<sp/>filterTests(<sp/>getAllTestCasesSorted(<sp/>config<sp/>),<sp/>testSpec,<sp/>config<sp/>);</highlight></codeline>
<codeline lineno="11333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCase<sp/>:<sp/>matchedTestCases<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="11334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>tagName<sp/>:<sp/>testCase.getTestCaseInfo().tags<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="11335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>lcaseTagName<sp/>=<sp/>toLower(<sp/>tagName<sp/>);</highlight></codeline>
<codeline lineno="11336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>countIt<sp/>=<sp/>tagCounts.find(<sp/>lcaseTagName<sp/>);</highlight></codeline>
<codeline lineno="11337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>countIt<sp/>==<sp/>tagCounts.end()<sp/>)</highlight></codeline>
<codeline lineno="11338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>countIt<sp/>=<sp/>tagCounts.insert(<sp/>std::make_pair(<sp/>lcaseTagName,<sp/>TagInfo()<sp/>)<sp/>).first;</highlight></codeline>
<codeline lineno="11339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>countIt-&gt;second.add(<sp/>tagName<sp/>);</highlight></codeline>
<codeline lineno="11340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11342"><highlight class="normal"></highlight></codeline>
<codeline lineno="11343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>tagCount<sp/>:<sp/>tagCounts<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="11344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReusableStringStream<sp/>rss;</highlight></codeline>
<codeline lineno="11345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::setw(2)<sp/>&lt;&lt;<sp/>tagCount.second.count<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>str<sp/>=<sp/>rss.str();</highlight></codeline>
<codeline lineno="11347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>wrapper<sp/>=<sp/>Column(<sp/>tagCount.second.all()<sp/>)</highlight></codeline>
<codeline lineno="11348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.initialIndent(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="11349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.indent(<sp/>str.size()<sp/>)</highlight></codeline>
<codeline lineno="11350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.width(<sp/>CATCH_CONFIG_CONSOLE_WIDTH-10<sp/>);</highlight></codeline>
<codeline lineno="11351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::cout()<sp/>&lt;&lt;<sp/>str<sp/>&lt;&lt;<sp/>wrapper<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::cout()<sp/>&lt;&lt;<sp/>pluralise(<sp/>tagCounts.size(),<sp/></highlight><highlight class="stringliteral">&quot;tag&quot;</highlight><highlight class="normal"><sp/>)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="11354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tagCounts.size();</highlight></codeline>
<codeline lineno="11355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11356"><highlight class="normal"></highlight></codeline>
<codeline lineno="11357"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>listReporters()<sp/>{</highlight></codeline>
<codeline lineno="11358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::cout()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Available<sp/>reporters:\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IReporterRegistry::FactoryMap<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>factories<sp/>=<sp/>getRegistryHub().getReporterRegistry().getFactories();</highlight></codeline>
<codeline lineno="11360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>maxNameLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="11361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>factoryKvp<sp/>:<sp/>factories<sp/>)</highlight></codeline>
<codeline lineno="11362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxNameLen<sp/>=<sp/>(<ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">std::max</ref>)(<sp/>maxNameLen,<sp/>factoryKvp.first.size()<sp/>);</highlight></codeline>
<codeline lineno="11363"><highlight class="normal"></highlight></codeline>
<codeline lineno="11364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>factoryKvp<sp/>:<sp/>factories<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="11365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::cout()</highlight></codeline>
<codeline lineno="11366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Column(<sp/>factoryKvp.first<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="11367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.indent(2)</highlight></codeline>
<codeline lineno="11368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.width(<sp/>5+maxNameLen<sp/>)</highlight></codeline>
<codeline lineno="11369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/><sp/>Column(<sp/>factoryKvp.second-&gt;getDescription()<sp/>)</highlight></codeline>
<codeline lineno="11370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.initialIndent(0)</highlight></codeline>
<codeline lineno="11371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.indent(2)</highlight></codeline>
<codeline lineno="11372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.width(<sp/>CATCH_CONFIG_CONSOLE_WIDTH<sp/>-<sp/>maxNameLen-8<sp/>)</highlight></codeline>
<codeline lineno="11373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;\n&quot;;</highlight></codeline>
<codeline lineno="11374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::cout()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="11376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>factories.size();</highlight></codeline>
<codeline lineno="11377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11378"><highlight class="normal"></highlight></codeline>
<codeline lineno="11379"><highlight class="normal"><sp/><sp/><sp/><sp/>Option&lt;std::size_t&gt;<sp/>list(<sp/>std::shared_ptr&lt;Config&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="11380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Option&lt;std::size_t&gt;<sp/>listedCount;</highlight></codeline>
<codeline lineno="11381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getCurrentMutableContext().setConfig(<sp/>config<sp/>);</highlight></codeline>
<codeline lineno="11382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>config-&gt;listTests()<sp/>)</highlight></codeline>
<codeline lineno="11383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listedCount<sp/>=<sp/>listedCount.valueOr(0)<sp/>+<sp/>listTests(<sp/>*config<sp/>);</highlight></codeline>
<codeline lineno="11384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>config-&gt;listTestNamesOnly()<sp/>)</highlight></codeline>
<codeline lineno="11385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listedCount<sp/>=<sp/>listedCount.valueOr(0)<sp/>+<sp/>listTestsNamesOnly(<sp/>*config<sp/>);</highlight></codeline>
<codeline lineno="11386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>config-&gt;listTags()<sp/>)</highlight></codeline>
<codeline lineno="11387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listedCount<sp/>=<sp/>listedCount.valueOr(0)<sp/>+<sp/>listTags(<sp/>*config<sp/>);</highlight></codeline>
<codeline lineno="11388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>config-&gt;listReporters()<sp/>)</highlight></codeline>
<codeline lineno="11389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listedCount<sp/>=<sp/>listedCount.valueOr(0)<sp/>+<sp/>listReporters();</highlight></codeline>
<codeline lineno="11390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>listedCount;</highlight></codeline>
<codeline lineno="11391"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11392"><highlight class="normal"></highlight></codeline>
<codeline lineno="11393"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11394"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_list.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11395"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_matchers.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11396"><highlight class="normal"></highlight></codeline>
<codeline lineno="11397"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="11398"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Matchers<sp/>{</highlight></codeline>
<codeline lineno="11399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Impl<sp/>{</highlight></codeline>
<codeline lineno="11400"><highlight class="normal"></highlight></codeline>
<codeline lineno="11401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>MatcherUntypedBase::toString()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="11402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_cachedToString.empty()<sp/>)</highlight></codeline>
<codeline lineno="11403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_cachedToString<sp/>=<sp/>describe();</highlight></codeline>
<codeline lineno="11404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_cachedToString;</highlight></codeline>
<codeline lineno="11405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11406"><highlight class="normal"></highlight></codeline>
<codeline lineno="11407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MatcherUntypedBase::~MatcherUntypedBase()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11408"><highlight class="normal"></highlight></codeline>
<codeline lineno="11409"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Impl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11410"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Matchers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11411"><highlight class="normal"></highlight></codeline>
<codeline lineno="11412"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Matchers;</highlight></codeline>
<codeline lineno="11413"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Matchers::Impl::MatcherBase;</highlight></codeline>
<codeline lineno="11414"><highlight class="normal"></highlight></codeline>
<codeline lineno="11415"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11416"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_matchers.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11417"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_matchers_exception.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11418"><highlight class="normal"></highlight></codeline>
<codeline lineno="11419"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="11420"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Matchers<sp/>{</highlight></codeline>
<codeline lineno="11421"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Exception<sp/>{</highlight></codeline>
<codeline lineno="11422"><highlight class="normal"></highlight></codeline>
<codeline lineno="11423"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ExceptionMessageMatcher::match(std::exception<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>ex)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="11424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ex.what()<sp/>==<sp/>m_message;</highlight></codeline>
<codeline lineno="11425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11426"><highlight class="normal"></highlight></codeline>
<codeline lineno="11427"><highlight class="normal">std::string<sp/>ExceptionMessageMatcher::describe()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="11428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;exception<sp/>message<sp/>matches<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>m_message<sp/>+<sp/>&quot;\&quot;&quot;;</highlight></codeline>
<codeline lineno="11429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11430"><highlight class="normal"></highlight></codeline>
<codeline lineno="11431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11432"><highlight class="normal">Exception::ExceptionMessageMatcher<sp/>Message(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="11433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Exception::ExceptionMessageMatcher(message);</highlight></codeline>
<codeline lineno="11434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11435"><highlight class="normal"></highlight></codeline>
<codeline lineno="11436"><highlight class="normal"></highlight><highlight class="comment">//<sp/>namespace<sp/>Exception</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11437"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Matchers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11438"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11439"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_matchers_exception.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11440"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_matchers_floating.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11441"><highlight class="normal"></highlight></codeline>
<codeline lineno="11442"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_polyfills.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11443"><highlight class="normal"></highlight></codeline>
<codeline lineno="11444"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="11445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__core__func__common_1ga81f85e3c56f1f559034422b357c37e21" kindref="member">isnan</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f);</highlight></codeline>
<codeline lineno="11446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__core__func__common_1ga81f85e3c56f1f559034422b357c37e21" kindref="member">isnan</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d);</highlight></codeline>
<codeline lineno="11447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11448"><highlight class="normal"></highlight></codeline>
<codeline lineno="11449"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_polyfills.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11450"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_to_string.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11451"><highlight class="normal"></highlight></codeline>
<codeline lineno="11452"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11453"><highlight class="normal"></highlight></codeline>
<codeline lineno="11454"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="11455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="11456"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="group__gtx__string__cast_1ga8f0dced1fd45e67e2d77e80ab93c7af5" kindref="member">to_string</ref>(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="11457"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_CPP11_TO_STRING)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtx__string__cast_1ga8f0dced1fd45e67e2d77e80ab93c7af5" kindref="member">std::to_string</ref>(t);</highlight></codeline>
<codeline lineno="11459"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReusableStringStream<sp/>rss;</highlight></codeline>
<codeline lineno="11461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/>t;</highlight></codeline>
<codeline lineno="11462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rss.str();</highlight></codeline>
<codeline lineno="11463"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11464"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11465"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11466"><highlight class="normal"></highlight></codeline>
<codeline lineno="11467"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_to_string.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11468"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11469"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11470"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11471"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11472"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11473"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11474"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11475"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11476"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11477"><highlight class="normal"></highlight></codeline>
<codeline lineno="11478"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="11479"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="11480"><highlight class="normal"></highlight></codeline>
<codeline lineno="11481"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>convert(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="11482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32_t),<sp/></highlight><highlight class="stringliteral">&quot;Important<sp/>ULP<sp/>matcher<sp/>assumption<sp/>violated&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>i;</highlight></codeline>
<codeline lineno="11484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::memcpy(&amp;i,<sp/>&amp;f,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(f));</highlight></codeline>
<codeline lineno="11485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="11486"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11487"><highlight class="normal"></highlight></codeline>
<codeline lineno="11488"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>convert(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d)<sp/>{</highlight></codeline>
<codeline lineno="11489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(double)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int64_t),<sp/></highlight><highlight class="stringliteral">&quot;Important<sp/>ULP<sp/>matcher<sp/>assumption<sp/>violated&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>i;</highlight></codeline>
<codeline lineno="11491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::memcpy(&amp;i,<sp/>&amp;d,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(d));</highlight></codeline>
<codeline lineno="11492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="11493"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11494"><highlight class="normal"></highlight></codeline>
<codeline lineno="11495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FP&gt;</highlight></codeline>
<codeline lineno="11496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>almostEqualUlps(FP<sp/>lhs,<sp/>FP<sp/>rhs,<sp/>uint64_t<sp/>maxUlpDiff)<sp/>{</highlight></codeline>
<codeline lineno="11497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Comparison<sp/>with<sp/>NaN<sp/>should<sp/>always<sp/>be<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>way<sp/>we<sp/>can<sp/>rule<sp/>it<sp/>out<sp/>before<sp/>getting<sp/>into<sp/>the<sp/>ugly<sp/>details</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__core__func__common_1ga81f85e3c56f1f559034422b357c37e21" kindref="member">Catch::isnan</ref>(lhs)<sp/>||<sp/><ref refid="group__core__func__common_1ga81f85e3c56f1f559034422b357c37e21" kindref="member">Catch::isnan</ref>(rhs))<sp/>{</highlight></codeline>
<codeline lineno="11500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11502"><highlight class="normal"></highlight></codeline>
<codeline lineno="11503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lc<sp/>=<sp/>convert(lhs);</highlight></codeline>
<codeline lineno="11504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rc<sp/>=<sp/>convert(rhs);</highlight></codeline>
<codeline lineno="11505"><highlight class="normal"></highlight></codeline>
<codeline lineno="11506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((lc<sp/>&lt;<sp/>0)<sp/>!=<sp/>(rc<sp/>&lt;<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="11507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Potentially<sp/>we<sp/>can<sp/>have<sp/>+0<sp/>and<sp/>-0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs<sp/>==<sp/>rhs;</highlight></codeline>
<codeline lineno="11509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11510"><highlight class="normal"></highlight></codeline>
<codeline lineno="11511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>static<sp/>cast<sp/>as<sp/>a<sp/>workaround<sp/>for<sp/>IBM<sp/>XLC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ulpDiff<sp/>=<sp/><ref refid="group__core__func__common_1ga693d77696ff36572a0da79efec965acd" kindref="member">std::abs</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">FP</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lc<sp/>-<sp/>rc));</highlight></codeline>
<codeline lineno="11513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ulpDiff)<sp/>&lt;=<sp/>maxUlpDiff;</highlight></codeline>
<codeline lineno="11514"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11515"><highlight class="normal"></highlight></codeline>
<codeline lineno="11516"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_GLOBAL_NEXTAFTER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11517"><highlight class="normal"></highlight></codeline>
<codeline lineno="11518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>nextafter(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="11519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>::nextafterf(x,<sp/>y);</highlight></codeline>
<codeline lineno="11520"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11521"><highlight class="normal"></highlight></codeline>
<codeline lineno="11522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nextafter(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="11523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>::nextafter(x,<sp/>y);</highlight></codeline>
<codeline lineno="11524"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11525"><highlight class="normal"></highlight></codeline>
<codeline lineno="11526"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>^^^<sp/>CATCH_CONFIG_GLOBAL_NEXTAFTER<sp/>^^^</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11527"><highlight class="normal"></highlight></codeline>
<codeline lineno="11528"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FP&gt;</highlight></codeline>
<codeline lineno="11529"><highlight class="normal">FP<sp/><ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>(FP<sp/>start,<sp/>FP<sp/>direction,<sp/>uint64_t<sp/>steps)<sp/>{</highlight></codeline>
<codeline lineno="11530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>steps;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="11531"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_GLOBAL_NEXTAFTER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>Catch::nextafter(start,<sp/>direction);</highlight></codeline>
<codeline lineno="11533"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>std::nextafter(start,<sp/>direction);</highlight></codeline>
<codeline lineno="11535"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11536"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>start;</highlight></codeline>
<codeline lineno="11538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11539"><highlight class="normal"></highlight></codeline>
<codeline lineno="11540"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Performs<sp/>equivalent<sp/>check<sp/>of<sp/>std::fabs(lhs<sp/>-<sp/>rhs)<sp/>&lt;=<sp/>margin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11541"><highlight class="normal"></highlight><highlight class="comment">//<sp/>But<sp/>without<sp/>the<sp/>subtraction<sp/>to<sp/>allow<sp/>for<sp/>INFINITY<sp/>in<sp/>comparison</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11542"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>marginComparison(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lhs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>margin)<sp/>{</highlight></codeline>
<codeline lineno="11543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(lhs<sp/>+<sp/>margin<sp/>&gt;=<sp/>rhs)<sp/>&amp;&amp;<sp/>(rhs<sp/>+<sp/>margin<sp/>&gt;=<sp/>lhs);</highlight></codeline>
<codeline lineno="11544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11545"><highlight class="normal"></highlight></codeline>
<codeline lineno="11546"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FloatingPo</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="11547"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write(std::ostream&amp;<sp/>out,<sp/>FloatingPoint<sp/>num)<sp/>{</highlight></codeline>
<codeline lineno="11548"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>std::scientific</highlight></codeline>
<codeline lineno="11549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::setprecision(std::numeric_limits&lt;FloatingPoint&gt;::max_digits10<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="11550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>num;</highlight></codeline>
<codeline lineno="11551"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11552"><highlight class="normal"></highlight></codeline>
<codeline lineno="11553"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>anonymous<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11554"><highlight class="normal"></highlight></codeline>
<codeline lineno="11555"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Matchers<sp/>{</highlight></codeline>
<codeline lineno="11556"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Floating<sp/>{</highlight></codeline>
<codeline lineno="11557"><highlight class="normal"></highlight></codeline>
<codeline lineno="11558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>FloatingPointKind<sp/>:<sp/>uint8_t<sp/>{</highlight></codeline>
<codeline lineno="11559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Float,</highlight></codeline>
<codeline lineno="11560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Double</highlight></codeline>
<codeline lineno="11561"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="11562"><highlight class="normal"></highlight></codeline>
<codeline lineno="11563"><highlight class="normal"><sp/><sp/><sp/><sp/>WithinAbsMatcher::WithinAbsMatcher(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>target,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>margin)</highlight></codeline>
<codeline lineno="11564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:m_target{<sp/>target<sp/>},<sp/>m_margin{<sp/>margin<sp/>}<sp/>{</highlight></codeline>
<codeline lineno="11565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_ENFORCE(margin<sp/>&gt;=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>margin:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>margin<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Margin<sp/>has<sp/>to<sp/>be<sp/>non-negative.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11567"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11568"><highlight class="normal"></highlight></codeline>
<codeline lineno="11569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Performs<sp/>equivalent<sp/>check<sp/>of<sp/>std::fabs(lhs<sp/>-<sp/>rhs)<sp/>&lt;=<sp/>margin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>But<sp/>without<sp/>the<sp/>subtraction<sp/>to<sp/>allow<sp/>for<sp/>INFINITY<sp/>in<sp/>comparison</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>WithinAbsMatcher::match(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>matchee)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="11572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(matchee<sp/>+<sp/>m_margin<sp/>&gt;=<sp/>m_target)<sp/>&amp;&amp;<sp/>(m_target<sp/>+<sp/>m_margin<sp/>&gt;=<sp/>matchee);</highlight></codeline>
<codeline lineno="11573"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11574"><highlight class="normal"></highlight></codeline>
<codeline lineno="11575"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>WithinAbsMatcher::describe()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="11576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;is<sp/>within<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>::Catch::Detail::stringify(m_margin)<sp/>+<sp/>&quot;<sp/>of<sp/>&quot;<sp/>+<sp/>::Catch::Detail::stringify(m_target);</highlight></codeline>
<codeline lineno="11577"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11578"><highlight class="normal"></highlight></codeline>
<codeline lineno="11579"><highlight class="normal"><sp/><sp/><sp/><sp/>WithinUlpsMatcher::WithinUlpsMatcher(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>target,<sp/>uint64_t<sp/>ulps,<sp/>FloatingPointKind<sp/>baseType)</highlight></codeline>
<codeline lineno="11580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:m_target{<sp/>target<sp/>},<sp/>m_ulps{<sp/>ulps<sp/>},<sp/>m_type{<sp/>baseType<sp/>}<sp/>{</highlight></codeline>
<codeline lineno="11581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_ENFORCE(m_type<sp/>==<sp/>FloatingPointKind::Double</highlight></codeline>
<codeline lineno="11582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>m_ulps<sp/>&lt;<sp/>(<ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">std::numeric_limits&lt;uint32_t&gt;::max</ref>)(),</highlight></codeline>
<codeline lineno="11583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Provided<sp/>ULP<sp/>is<sp/>impossibly<sp/>large<sp/>for<sp/>a<sp/>float<sp/>comparison.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11584"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11585"><highlight class="normal"></highlight></codeline>
<codeline lineno="11586"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11587"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11588"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Clang<sp/>&lt;3.5<sp/>reports<sp/>on<sp/>the<sp/>default<sp/>branch<sp/>in<sp/>the<sp/>switch<sp/>below</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11589"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wunreachable-code&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11590"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11591"><highlight class="normal"></highlight></codeline>
<codeline lineno="11592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>WithinUlpsMatcher::match(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>matchee)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="11593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(m_type)<sp/>{</highlight></codeline>
<codeline lineno="11594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>FloatingPointKind::Float:</highlight></codeline>
<codeline lineno="11595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>almostEqualUlps&lt;float&gt;(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(matchee),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_target),<sp/>m_ulps);</highlight></codeline>
<codeline lineno="11596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>FloatingPointKind::Double:</highlight></codeline>
<codeline lineno="11597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>almostEqualUlps&lt;double&gt;(matchee,<sp/>m_target,<sp/>m_ulps);</highlight></codeline>
<codeline lineno="11598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="11599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>FloatingPointKind<sp/>value&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="11600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11601"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11602"><highlight class="normal"></highlight></codeline>
<codeline lineno="11603"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11604"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11605"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11606"><highlight class="normal"></highlight></codeline>
<codeline lineno="11607"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>WithinUlpsMatcher::describe()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="11608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>ret;</highlight></codeline>
<codeline lineno="11609"><highlight class="normal"></highlight></codeline>
<codeline lineno="11610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;is<sp/>within<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_ulps<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>ULPs<sp/>of<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11611"><highlight class="normal"></highlight></codeline>
<codeline lineno="11612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_type<sp/>==<sp/>FloatingPointKind::Float)<sp/>{</highlight></codeline>
<codeline lineno="11613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write(ret,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_target));</highlight></codeline>
<codeline lineno="11614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="11616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write(ret,<sp/>m_target);</highlight></codeline>
<codeline lineno="11617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11618"><highlight class="normal"></highlight></codeline>
<codeline lineno="11619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>([&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_type<sp/>==<sp/>FloatingPointKind::Double)<sp/>{</highlight></codeline>
<codeline lineno="11621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write(ret,<sp/><ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>(m_target,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(-INFINITY),<sp/>m_ulps));</highlight></codeline>
<codeline lineno="11622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write(ret,<sp/><ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>(m_target,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>INFINITY),<sp/>m_ulps));</highlight></codeline>
<codeline lineno="11624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="11625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>to<sp/>cast<sp/>INFINITY<sp/>to<sp/>float<sp/>because<sp/>of<sp/>MinGW,<sp/>see<sp/>#1782</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write(ret,<sp/><ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_target),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(-INFINITY),<sp/>m_ulps));</highlight></codeline>
<codeline lineno="11627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write(ret,<sp/><ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_target),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>INFINITY),<sp/>m_ulps));</highlight></codeline>
<codeline lineno="11629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;])&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11631"><highlight class="normal"></highlight></codeline>
<codeline lineno="11632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret.str();</highlight></codeline>
<codeline lineno="11633"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11634"><highlight class="normal"></highlight></codeline>
<codeline lineno="11635"><highlight class="normal"><sp/><sp/><sp/><sp/>WithinRelMatcher::WithinRelMatcher(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>target,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga2a1e57fc5592b69cfae84174cbfc9429" kindref="member">epsilon</ref>):</highlight></codeline>
<codeline lineno="11636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_target(target),</highlight></codeline>
<codeline lineno="11637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_epsilon(<ref refid="group__gtc__constants_1ga2a1e57fc5592b69cfae84174cbfc9429" kindref="member">epsilon</ref>){</highlight></codeline>
<codeline lineno="11638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_ENFORCE(m_epsilon<sp/>&gt;=<sp/>0.,<sp/></highlight><highlight class="stringliteral">&quot;Relative<sp/>comparison<sp/>with<sp/>epsilon<sp/>&lt;<sp/><sp/>0<sp/>does<sp/>not<sp/>make<sp/>sense.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_ENFORCE(m_epsilon<sp/><sp/>&lt;<sp/>1.,<sp/>&quot;Relative<sp/>comparison<sp/>with<sp/>epsilon<sp/>&gt;=<sp/>1<sp/>does<sp/>not<sp/>make<sp/>sense.</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline lineno="11640"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11641"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="11642"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>bool<sp/>WithinRelMatcher::match(double<sp/>const&amp;<sp/>matchee)<sp/>const<sp/>{</highlight></codeline>
<codeline lineno="11643"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>relMargin<sp/>=<sp/>m_epsilon<sp/>*<sp/>(std::max)(std::fabs(matchee),<sp/>std::fabs(m_target));</highlight></codeline>
<codeline lineno="11644"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>marginComparison(matchee,<sp/>m_target,</highlight></codeline>
<codeline lineno="11645"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::isinf(relMargin)?<sp/>0<sp/>:<sp/>relMargin);</highlight></codeline>
<codeline lineno="11646"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11647"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="11648"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>std::string<sp/>WithinRelMatcher::describe()<sp/>const<sp/>{</highlight></codeline>
<codeline lineno="11649"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::ReusableStringStream<sp/>sstr;</highlight></codeline>
<codeline lineno="11650"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sstr<sp/>&lt;&lt;<sp/>&quot;</highlight><highlight class="normal">and<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;&lt;<sp/>m_target<sp/>&lt;&lt;<sp/>&quot;</highlight><highlight class="normal"><sp/>are<sp/>within<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;&lt;<sp/>m_epsilon<sp/>*<sp/>100.<sp/>&lt;&lt;<sp/>&quot;</highlight><highlight class="normal">%<sp/>of<sp/>each<sp/>other</highlight><highlight class="stringliteral">&quot;;</highlight></codeline>
<codeline lineno="11651"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>sstr.str();</highlight></codeline>
<codeline lineno="11652"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11653"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="11654"><highlight class="stringliteral">}//<sp/>namespace<sp/>Floating</highlight></codeline>
<codeline lineno="11655"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="11656"><highlight class="stringliteral">Floating::WithinUlpsMatcher<sp/>WithinULP(double<sp/>target,<sp/>uint64_t<sp/>maxUlpDiff)<sp/>{</highlight></codeline>
<codeline lineno="11657"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>Floating::WithinUlpsMatcher(target,<sp/>maxUlpDiff,<sp/>Floating::FloatingPointKind::Double);</highlight></codeline>
<codeline lineno="11658"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="11659"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="11660"><highlight class="stringliteral">Floating::WithinUlpsMatcher<sp/>WithinULP(float<sp/>target,<sp/>uint64_t<sp/>maxUlpDiff)<sp/>{</highlight></codeline>
<codeline lineno="11661"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>Floating::WithinUlpsMatcher(target,<sp/>maxUlpDiff,<sp/>Floating::FloatingPointKind::Float);</highlight></codeline>
<codeline lineno="11662"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="11663"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="11664"><highlight class="stringliteral">Floating::WithinAbsMatcher<sp/>WithinAbs(double<sp/>target,<sp/>double<sp/>margin)<sp/>{</highlight></codeline>
<codeline lineno="11665"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>Floating::WithinAbsMatcher(target,<sp/>margin);</highlight></codeline>
<codeline lineno="11666"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="11667"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="11668"><highlight class="stringliteral">Floating::WithinRelMatcher<sp/>WithinRel(double<sp/>target,<sp/>double<sp/>eps)<sp/>{</highlight></codeline>
<codeline lineno="11669"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>Floating::WithinRelMatcher(target,<sp/>eps);</highlight></codeline>
<codeline lineno="11670"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="11671"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="11672"><highlight class="stringliteral">Floating::WithinRelMatcher<sp/>WithinRel(double<sp/>target)<sp/>{</highlight></codeline>
<codeline lineno="11673"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>Floating::WithinRelMatcher(target,<sp/>std::numeric_limits&lt;double&gt;::epsilon()<sp/>*<sp/>100);</highlight></codeline>
<codeline lineno="11674"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="11675"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="11676"><highlight class="stringliteral">Floating::WithinRelMatcher<sp/>WithinRel(float<sp/>target,<sp/>float<sp/>eps)<sp/>{</highlight></codeline>
<codeline lineno="11677"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>Floating::WithinRelMatcher(target,<sp/>eps);</highlight></codeline>
<codeline lineno="11678"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="11679"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="11680"><highlight class="stringliteral">Floating::WithinRelMatcher<sp/>WithinRel(float<sp/>target)<sp/>{</highlight></codeline>
<codeline lineno="11681"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>return<sp/>Floating::WithinRelMatcher(target,<sp/>std::numeric_limits&lt;float&gt;::epsilon()<sp/>*<sp/>100);</highlight></codeline>
<codeline lineno="11682"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="11683"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="11684"><highlight class="stringliteral">}<sp/>//<sp/>namespace<sp/>Matchers</highlight></codeline>
<codeline lineno="11685"><highlight class="stringliteral">}<sp/>//<sp/>namespace<sp/>Catch</highlight></codeline>
<codeline lineno="11686"><highlight class="stringliteral">//<sp/>end<sp/>catch_matchers_floating.cpp</highlight></codeline>
<codeline lineno="11687"><highlight class="stringliteral">//<sp/>start<sp/>catch_matchers_generic.cpp</highlight></codeline>
<codeline lineno="11688"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="11689"><highlight class="stringliteral">std::string<sp/>Catch::Matchers::Generic::Detail::finalizeDescription(const<sp/>std::string&amp;<sp/>desc)<sp/>{</highlight></codeline>
<codeline lineno="11690"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(desc.empty())<sp/>{</highlight></codeline>
<codeline lineno="11691"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>&quot;</highlight><highlight class="normal">matches<sp/>undescribed<sp/>predicate</highlight><highlight class="stringliteral">&quot;;</highlight></codeline>
<codeline lineno="11692"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="11693"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>&quot;</highlight><highlight class="normal">matches<sp/>predicate:<sp/>\</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>+<sp/>desc<sp/>+<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11694"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11695"><highlight class="normal">}</highlight></codeline>
<codeline lineno="11696"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_matchers_generic.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11697"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_matchers_string.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11698"><highlight class="normal"></highlight></codeline>
<codeline lineno="11699"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;regex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11700"><highlight class="normal"></highlight></codeline>
<codeline lineno="11701"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="11702"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Matchers<sp/>{</highlight></codeline>
<codeline lineno="11703"><highlight class="normal"></highlight></codeline>
<codeline lineno="11704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">StdString<sp/>{</highlight></codeline>
<codeline lineno="11705"><highlight class="normal"></highlight></codeline>
<codeline lineno="11706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CasedString::CasedString(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>str,<sp/>CaseSensitive::Choice<sp/>caseSensitivity<sp/>)</highlight></codeline>
<codeline lineno="11707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>m_caseSensitivity(<sp/>caseSensitivity<sp/>),</highlight></codeline>
<codeline lineno="11708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_str(<sp/>adjustString(<sp/>str<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="11709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="11710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>CasedString::adjustString(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>str<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="11711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_caseSensitivity<sp/>==<sp/>CaseSensitive::No</highlight></codeline>
<codeline lineno="11712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>toLower(<sp/>str<sp/>)</highlight></codeline>
<codeline lineno="11713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>str;</highlight></codeline>
<codeline lineno="11714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>CasedString::caseSensitivitySuffix()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="11716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_caseSensitivity<sp/>==<sp/>CaseSensitive::No</highlight></codeline>
<codeline lineno="11717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(case<sp/>insensitive)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>std::string();</highlight></codeline>
<codeline lineno="11719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11720"><highlight class="normal"></highlight></codeline>
<codeline lineno="11721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringMatcherBase::StringMatcherBase(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>operation,<sp/>CasedString<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>comparator<sp/>)</highlight></codeline>
<codeline lineno="11722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_comparator(<sp/>comparator<sp/>),</highlight></codeline>
<codeline lineno="11723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_operation(<sp/>operation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="11724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11725"><highlight class="normal"></highlight></codeline>
<codeline lineno="11726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>StringMatcherBase::describe()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="11727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>description;</highlight></codeline>
<codeline lineno="11728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>description.reserve(5<sp/>+<sp/>m_operation.size()<sp/>+<sp/>m_comparator.m_str.size()<sp/>+</highlight></codeline>
<codeline lineno="11729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_comparator.caseSensitivitySuffix().size());</highlight></codeline>
<codeline lineno="11730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>description<sp/>+=<sp/>m_operation;</highlight></codeline>
<codeline lineno="11731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>description<sp/>+=<sp/>&quot;:<sp/>\&quot;&quot;;</highlight></codeline>
<codeline lineno="11732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>description<sp/>+=<sp/>m_comparator.m_str;</highlight></codeline>
<codeline lineno="11733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>description<sp/>+=<sp/>&quot;\&quot;&quot;;</highlight></codeline>
<codeline lineno="11734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>description<sp/>+=<sp/>m_comparator.caseSensitivitySuffix();</highlight></codeline>
<codeline lineno="11735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>description;</highlight></codeline>
<codeline lineno="11736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11737"><highlight class="normal"></highlight></codeline>
<codeline lineno="11738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EqualsMatcher::EqualsMatcher(<sp/>CasedString<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>comparator<sp/>)<sp/>:<sp/>StringMatcherBase(<sp/></highlight><highlight class="stringliteral">&quot;equals&quot;</highlight><highlight class="normal">,<sp/>comparator<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="11739"><highlight class="normal"></highlight></codeline>
<codeline lineno="11740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EqualsMatcher::match(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>source<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="11741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_comparator.adjustString(<sp/>source<sp/>)<sp/>==<sp/>m_comparator.m_str;</highlight></codeline>
<codeline lineno="11742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11743"><highlight class="normal"></highlight></codeline>
<codeline lineno="11744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ContainsMatcher::ContainsMatcher(<sp/>CasedString<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>comparator<sp/>)<sp/>:<sp/>StringMatcherBase(<sp/></highlight><highlight class="stringliteral">&quot;contains&quot;</highlight><highlight class="normal">,<sp/>comparator<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="11745"><highlight class="normal"></highlight></codeline>
<codeline lineno="11746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ContainsMatcher::match(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>source<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="11747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>contains(<sp/>m_comparator.adjustString(<sp/>source<sp/>),<sp/>m_comparator.m_str<sp/>);</highlight></codeline>
<codeline lineno="11748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11749"><highlight class="normal"></highlight></codeline>
<codeline lineno="11750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StartsWithMatcher::StartsWithMatcher(<sp/>CasedString<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>comparator<sp/>)<sp/>:<sp/>StringMatcherBase(<sp/></highlight><highlight class="stringliteral">&quot;starts<sp/>with&quot;</highlight><highlight class="normal">,<sp/>comparator<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="11751"><highlight class="normal"></highlight></codeline>
<codeline lineno="11752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>StartsWithMatcher::match(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>source<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="11753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>startsWith(<sp/>m_comparator.adjustString(<sp/>source<sp/>),<sp/>m_comparator.m_str<sp/>);</highlight></codeline>
<codeline lineno="11754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11755"><highlight class="normal"></highlight></codeline>
<codeline lineno="11756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EndsWithMatcher::EndsWithMatcher(<sp/>CasedString<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>comparator<sp/>)<sp/>:<sp/>StringMatcherBase(<sp/></highlight><highlight class="stringliteral">&quot;ends<sp/>with&quot;</highlight><highlight class="normal">,<sp/>comparator<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="11757"><highlight class="normal"></highlight></codeline>
<codeline lineno="11758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EndsWithMatcher::match(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>source<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="11759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>endsWith(<sp/>m_comparator.adjustString(<sp/>source<sp/>),<sp/>m_comparator.m_str<sp/>);</highlight></codeline>
<codeline lineno="11760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11761"><highlight class="normal"></highlight></codeline>
<codeline lineno="11762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RegexMatcher::RegexMatcher(std::string<sp/>regex,<sp/>CaseSensitive::Choice<sp/>caseSensitivity):<sp/>m_regex(std::move(regex)),<sp/>m_caseSensitivity(caseSensitivity)<sp/>{}</highlight></codeline>
<codeline lineno="11763"><highlight class="normal"></highlight></codeline>
<codeline lineno="11764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>RegexMatcher::match(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>matchee)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="11765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>flags<sp/>=<sp/>std::regex::ECMAScript;<sp/></highlight><highlight class="comment">//<sp/>ECMAScript<sp/>is<sp/>the<sp/>default<sp/>syntax<sp/>option<sp/>anyway</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_caseSensitivity<sp/>==<sp/>CaseSensitive::Choice::No)<sp/>{</highlight></codeline>
<codeline lineno="11767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags<sp/>|=<sp/>std::regex::icase;</highlight></codeline>
<codeline lineno="11768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>reg<sp/>=<sp/>std::regex(m_regex,<sp/>flags);</highlight></codeline>
<codeline lineno="11770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::regex_match(matchee,<sp/>reg);</highlight></codeline>
<codeline lineno="11771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11772"><highlight class="normal"></highlight></codeline>
<codeline lineno="11773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>RegexMatcher::describe()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="11774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;matches<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>::Catch::Detail::stringify(m_regex)<sp/>+<sp/>((m_caseSensitivity<sp/>==<sp/>CaseSensitive::Choice::Yes)?<sp/>&quot;<sp/>case<sp/>sensitively&quot;<sp/>:<sp/>&quot;<sp/>case<sp/>insensitively&quot;);</highlight></codeline>
<codeline lineno="11775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11776"><highlight class="normal"></highlight></codeline>
<codeline lineno="11777"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>StdString</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11778"><highlight class="normal"></highlight></codeline>
<codeline lineno="11779"><highlight class="normal"><sp/><sp/><sp/><sp/>StdString::EqualsMatcher<sp/>Equals(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>str,<sp/>CaseSensitive::Choice<sp/>caseSensitivity<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="11780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StdString::EqualsMatcher(<sp/>StdString::CasedString(<sp/>str,<sp/>caseSensitivity)<sp/>);</highlight></codeline>
<codeline lineno="11781"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11782"><highlight class="normal"><sp/><sp/><sp/><sp/>StdString::ContainsMatcher<sp/>Contains(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>str,<sp/>CaseSensitive::Choice<sp/>caseSensitivity<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="11783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StdString::ContainsMatcher(<sp/>StdString::CasedString(<sp/>str,<sp/>caseSensitivity)<sp/>);</highlight></codeline>
<codeline lineno="11784"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11785"><highlight class="normal"><sp/><sp/><sp/><sp/>StdString::EndsWithMatcher<sp/>EndsWith(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>str,<sp/>CaseSensitive::Choice<sp/>caseSensitivity<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="11786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StdString::EndsWithMatcher(<sp/>StdString::CasedString(<sp/>str,<sp/>caseSensitivity)<sp/>);</highlight></codeline>
<codeline lineno="11787"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11788"><highlight class="normal"><sp/><sp/><sp/><sp/>StdString::StartsWithMatcher<sp/>StartsWith(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>str,<sp/>CaseSensitive::Choice<sp/>caseSensitivity<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="11789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StdString::StartsWithMatcher(<sp/>StdString::CasedString(<sp/>str,<sp/>caseSensitivity)<sp/>);</highlight></codeline>
<codeline lineno="11790"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11791"><highlight class="normal"></highlight></codeline>
<codeline lineno="11792"><highlight class="normal"><sp/><sp/><sp/><sp/>StdString::RegexMatcher<sp/>Matches(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>regex,<sp/>CaseSensitive::Choice<sp/>caseSensitivity)<sp/>{</highlight></codeline>
<codeline lineno="11793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StdString::RegexMatcher(regex,<sp/>caseSensitivity);</highlight></codeline>
<codeline lineno="11794"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11795"><highlight class="normal"></highlight></codeline>
<codeline lineno="11796"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Matchers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11797"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11798"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_matchers_string.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11799"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_message.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11800"><highlight class="normal"></highlight></codeline>
<codeline lineno="11801"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_uncaught_exceptions.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11802"><highlight class="normal"></highlight></codeline>
<codeline lineno="11803"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="11804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>uncaught_exceptions();</highlight></codeline>
<codeline lineno="11805"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11806"><highlight class="normal"></highlight></codeline>
<codeline lineno="11807"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_uncaught_exceptions.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11808"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11809"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stack&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11810"><highlight class="normal"></highlight></codeline>
<codeline lineno="11811"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="11812"><highlight class="normal"></highlight></codeline>
<codeline lineno="11813"><highlight class="normal"><sp/><sp/><sp/><sp/>MessageInfo::MessageInfo(<sp/><sp/><sp/>StringRef<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_macroName,</highlight></codeline>
<codeline lineno="11814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SourceLineInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_lineInfo,</highlight></codeline>
<codeline lineno="11815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultWas::OfType<sp/>_type<sp/>)</highlight></codeline>
<codeline lineno="11816"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>macroName(<sp/>_macroName<sp/>),</highlight></codeline>
<codeline lineno="11817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lineInfo(<sp/>_lineInfo<sp/>),</highlight></codeline>
<codeline lineno="11818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type(<sp/>_type<sp/>),</highlight></codeline>
<codeline lineno="11819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sequence(<sp/>++globalCount<sp/>)</highlight></codeline>
<codeline lineno="11820"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="11821"><highlight class="normal"></highlight></codeline>
<codeline lineno="11822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MessageInfo::operator==(<sp/>MessageInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="11823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sequence<sp/>==<sp/>other.sequence;</highlight></codeline>
<codeline lineno="11824"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11825"><highlight class="normal"></highlight></codeline>
<codeline lineno="11826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>MessageInfo::operator&lt;(<sp/>MessageInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="11827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sequence<sp/>&lt;<sp/>other.sequence;</highlight></codeline>
<codeline lineno="11828"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11829"><highlight class="normal"></highlight></codeline>
<codeline lineno="11830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>may<sp/>need<sp/>protecting<sp/>if<sp/>threading<sp/>support<sp/>is<sp/>added</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MessageInfo::globalCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="11832"><highlight class="normal"></highlight></codeline>
<codeline lineno="11834"><highlight class="normal"></highlight></codeline>
<codeline lineno="11835"><highlight class="normal"><sp/><sp/><sp/><sp/>Catch::MessageBuilder::MessageBuilder(<sp/>StringRef<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>macroName,</highlight></codeline>
<codeline lineno="11836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SourceLineInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lineInfo,</highlight></codeline>
<codeline lineno="11837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultWas::OfType<sp/>type<sp/>)</highlight></codeline>
<codeline lineno="11838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:m_info(macroName,<sp/>lineInfo,<sp/>type)<sp/>{}</highlight></codeline>
<codeline lineno="11839"><highlight class="normal"></highlight></codeline>
<codeline lineno="11841"><highlight class="normal"></highlight></codeline>
<codeline lineno="11842"><highlight class="normal"><sp/><sp/><sp/><sp/>ScopedMessage::ScopedMessage(<sp/>MessageBuilder<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>builder<sp/>)</highlight></codeline>
<codeline lineno="11843"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_info(<sp/>builder.m_info<sp/>),<sp/>m_moved()</highlight></codeline>
<codeline lineno="11844"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="11845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_info.message<sp/>=<sp/>builder.m_stream.str();</highlight></codeline>
<codeline lineno="11846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getResultCapture().pushScopedMessage(<sp/>m_info<sp/>);</highlight></codeline>
<codeline lineno="11847"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11848"><highlight class="normal"></highlight></codeline>
<codeline lineno="11849"><highlight class="normal"><sp/><sp/><sp/><sp/>ScopedMessage::ScopedMessage(<sp/>ScopedMessage&amp;&amp;<sp/>old<sp/>)</highlight></codeline>
<codeline lineno="11850"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_info(<sp/>old.m_info<sp/>),<sp/>m_moved()</highlight></codeline>
<codeline lineno="11851"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="11852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>old.m_moved<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11853"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11854"><highlight class="normal"></highlight></codeline>
<codeline lineno="11855"><highlight class="normal"><sp/><sp/><sp/><sp/>ScopedMessage::~ScopedMessage()<sp/>{</highlight></codeline>
<codeline lineno="11856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!uncaught_exceptions()<sp/>&amp;&amp;<sp/>!m_moved<sp/>){</highlight></codeline>
<codeline lineno="11857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getResultCapture().popScopedMessage(m_info);</highlight></codeline>
<codeline lineno="11858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11859"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11860"><highlight class="normal"></highlight></codeline>
<codeline lineno="11861"><highlight class="normal"><sp/><sp/><sp/><sp/>Capturer::Capturer(<sp/>StringRef<sp/>macroName,<sp/>SourceLineInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lineInfo,<sp/>ResultWas::OfType<sp/>resultType,<sp/>StringRef<sp/>names<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="11862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>trimmed<sp/>=<sp/>[&amp;]<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="11863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(names[start]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal"><sp/>||<sp/>isspace(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(names[start])))<sp/>{</highlight></codeline>
<codeline lineno="11864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++start;</highlight></codeline>
<codeline lineno="11865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(names[end]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal"><sp/>||<sp/>isspace(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(names[end])))<sp/>{</highlight></codeline>
<codeline lineno="11867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--end;</highlight></codeline>
<codeline lineno="11868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>names.substr(start,<sp/>end<sp/>-<sp/>start<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="11870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="11871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>skipq<sp/>=<sp/>[&amp;]<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>quote)<sp/>{</highlight></codeline>
<codeline lineno="11872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>start<sp/>+<sp/>1;<sp/>i<sp/>&lt;<sp/>names.size()<sp/>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="11873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(names[i]<sp/>==<sp/>quote)</highlight></codeline>
<codeline lineno="11874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="11875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(names[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="11876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="11877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_ERROR(</highlight><highlight class="stringliteral">&quot;CAPTURE<sp/>parsing<sp/>encountered<sp/>unmatched<sp/>quote&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="11880"><highlight class="normal"></highlight></codeline>
<codeline lineno="11881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="11882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stack&lt;char&gt;<sp/>openings;</highlight></codeline>
<codeline lineno="11883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>0;<sp/>pos<sp/>&lt;<sp/>names.size();<sp/>++pos)<sp/>{</highlight></codeline>
<codeline lineno="11884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>names[pos];</highlight></codeline>
<codeline lineno="11885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(c)<sp/>{</highlight></codeline>
<codeline lineno="11886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="11887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="11888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="11889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>basically<sp/>impossible<sp/>to<sp/>disambiguate<sp/>between</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>comparison<sp/>and<sp/>start<sp/>of<sp/>template<sp/>args<sp/>in<sp/>this<sp/>context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11891"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>&apos;&lt;&apos;:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openings.push(c);</highlight></codeline>
<codeline lineno="11893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="11895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="11896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="11897"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>&apos;&gt;&apos;:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>openings.pop();</highlight></codeline>
<codeline lineno="11899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="11901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="11902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>skipq(pos,<sp/>c);</highlight></codeline>
<codeline lineno="11903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="11905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start<sp/>!=<sp/>pos<sp/>&amp;&amp;<sp/>openings.empty())<sp/>{</highlight></codeline>
<codeline lineno="11906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_messages.emplace_back(macroName,<sp/>lineInfo,<sp/>resultType);</highlight></codeline>
<codeline lineno="11907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_messages.back().message<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::string</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(trimmed(start,<sp/>pos));</highlight></codeline>
<codeline lineno="11908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_messages.back().message<sp/>+=<sp/>&quot;<sp/>:=<sp/>&quot;;</highlight></codeline>
<codeline lineno="11909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>pos;</highlight></codeline>
<codeline lineno="11910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(openings.empty()<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Mismatched<sp/>openings&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_messages.emplace_back(macroName,<sp/>lineInfo,<sp/>resultType);</highlight></codeline>
<codeline lineno="11915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_messages.back().message<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::string</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(trimmed(start,<sp/>names.size()<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="11916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_messages.back().message<sp/>+=<sp/>&quot;<sp/>:=<sp/>&quot;;</highlight></codeline>
<codeline lineno="11917"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11918"><highlight class="normal"><sp/><sp/><sp/><sp/>Capturer::~Capturer()<sp/>{</highlight></codeline>
<codeline lineno="11919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!uncaught_exceptions()<sp/>){</highlight></codeline>
<codeline lineno="11920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>m_captured<sp/>==<sp/>m_messages.size()<sp/>);</highlight></codeline>
<codeline lineno="11921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m_captured;<sp/>++i<sp/><sp/>)</highlight></codeline>
<codeline lineno="11922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_resultCapture.popScopedMessage(<sp/>m_messages[i]<sp/>);</highlight></codeline>
<codeline lineno="11923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11924"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11925"><highlight class="normal"></highlight></codeline>
<codeline lineno="11926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Capturer::captureValue(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="11927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>index<sp/>&lt;<sp/>m_messages.size()<sp/>);</highlight></codeline>
<codeline lineno="11928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_messages[index].message<sp/>+=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="11929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_resultCapture.pushScopedMessage(<sp/>m_messages[index]<sp/>);</highlight></codeline>
<codeline lineno="11930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_captured++;</highlight></codeline>
<codeline lineno="11931"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11932"><highlight class="normal"></highlight></codeline>
<codeline lineno="11933"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11934"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_message.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11935"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_output_redirect.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11936"><highlight class="normal"></highlight></codeline>
<codeline lineno="11937"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_output_redirect.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11938"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>TWOBLUECUBES_CATCH_OUTPUT_REDIRECT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11939"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TWOBLUECUBES_CATCH_OUTPUT_REDIRECT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11940"><highlight class="normal"></highlight></codeline>
<codeline lineno="11941"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11942"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iosfwd&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11943"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11944"><highlight class="normal"></highlight></codeline>
<codeline lineno="11945"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="11946"><highlight class="normal"></highlight></codeline>
<codeline lineno="11947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">RedirectedStream<sp/>{</highlight></codeline>
<codeline lineno="11948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/>m_originalStream;</highlight></codeline>
<codeline lineno="11949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/>m_redirectionStream;</highlight></codeline>
<codeline lineno="11950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::streambuf*<sp/>m_prevBuf;</highlight></codeline>
<codeline lineno="11951"><highlight class="normal"></highlight></codeline>
<codeline lineno="11952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="11953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RedirectedStream(<sp/>std::ostream&amp;<sp/>originalStream,<sp/>std::ostream&amp;<sp/>redirectionStream<sp/>);</highlight></codeline>
<codeline lineno="11954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~RedirectedStream();</highlight></codeline>
<codeline lineno="11955"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="11956"><highlight class="normal"></highlight></codeline>
<codeline lineno="11957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">RedirectedStdOut<sp/>{</highlight></codeline>
<codeline lineno="11958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReusableStringStream<sp/>m_rss;</highlight></codeline>
<codeline lineno="11959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RedirectedStream<sp/>m_cout;</highlight></codeline>
<codeline lineno="11960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="11961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RedirectedStdOut();</highlight></codeline>
<codeline lineno="11962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>str()<sp/>const<sp/>-&gt;<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11963"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="11964"><highlight class="normal"></highlight></codeline>
<codeline lineno="11965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>StdErr<sp/>has<sp/>two<sp/>constituent<sp/>streams<sp/>in<sp/>C++,<sp/>std::cerr<sp/>and<sp/>std::clog</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>means<sp/>that<sp/>we<sp/>need<sp/>to<sp/>redirect<sp/>2<sp/>streams<sp/>into<sp/>1<sp/>to<sp/>keep<sp/>proper</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>order<sp/>of<sp/>writes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11968"><highlight class="normal"><sp/><sp/><sp/><sp/>class<sp/>RedirectedStdErr<sp/>{</highlight></codeline>
<codeline lineno="11969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReusableStringStream<sp/>m_rss;</highlight></codeline>
<codeline lineno="11970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RedirectedStream<sp/>m_cerr;</highlight></codeline>
<codeline lineno="11971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RedirectedStream<sp/>m_clog;</highlight></codeline>
<codeline lineno="11972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="11973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RedirectedStdErr();</highlight></codeline>
<codeline lineno="11974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>str()<sp/>const<sp/>-&gt;<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11975"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="11976"><highlight class="normal"></highlight></codeline>
<codeline lineno="11977"><highlight class="normal"><sp/><sp/><sp/><sp/>class<sp/>RedirectedStreams<sp/>{</highlight></codeline>
<codeline lineno="11978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="11979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RedirectedStreams(RedirectedStreams<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RedirectedStreams&amp;<sp/>operator=(RedirectedStreams<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RedirectedStreams(RedirectedStreams&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RedirectedStreams&amp;<sp/>operator=(RedirectedStreams&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11983"><highlight class="normal"></highlight></codeline>
<codeline lineno="11984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RedirectedStreams(std::string&amp;<sp/>redirectedCout,<sp/>std::string&amp;<sp/>redirectedCerr);</highlight></codeline>
<codeline lineno="11985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~RedirectedStreams();</highlight></codeline>
<codeline lineno="11986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="11987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string&amp;<sp/>m_redirectedCout;</highlight></codeline>
<codeline lineno="11988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string&amp;<sp/>m_redirectedCerr;</highlight></codeline>
<codeline lineno="11989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RedirectedStdOut<sp/>m_redirectedStdOut;</highlight></codeline>
<codeline lineno="11990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RedirectedStdErr<sp/>m_redirectedStdErr;</highlight></codeline>
<codeline lineno="11991"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="11992"><highlight class="normal"></highlight></codeline>
<codeline lineno="11993"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_NEW_CAPTURE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11994"><highlight class="normal"></highlight></codeline>
<codeline lineno="11995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Windows&apos;s<sp/>implementation<sp/>of<sp/>std::tmpfile<sp/>is<sp/>terrible<sp/>(it<sp/>tries</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>create<sp/>a<sp/>file<sp/>inside<sp/>system<sp/>folder,<sp/>thus<sp/>requiring<sp/>elevated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>privileges<sp/>for<sp/>the<sp/>binary),<sp/>so<sp/>we<sp/>have<sp/>to<sp/>use<sp/>tmpnam(_s)<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>the<sp/>file<sp/>ourselves<sp/>there.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TempFile<sp/>{</highlight></codeline>
<codeline lineno="12000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="12001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TempFile(TempFile<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TempFile&amp;<sp/>operator=(TempFile<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TempFile(TempFile&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TempFile&amp;<sp/>operator=(TempFile&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12005"><highlight class="normal"></highlight></codeline>
<codeline lineno="12006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TempFile();</highlight></codeline>
<codeline lineno="12007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~TempFile();</highlight></codeline>
<codeline lineno="12008"><highlight class="normal"></highlight></codeline>
<codeline lineno="12009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::FILE*<sp/>getFile();</highlight></codeline>
<codeline lineno="12010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>getContents();</highlight></codeline>
<codeline lineno="12011"><highlight class="normal"></highlight></codeline>
<codeline lineno="12012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="12013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::FILE*<sp/>m_file<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12014"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>m_buffer[L_tmpnam]<sp/>=<sp/>{<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="12016"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12017"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="12018"><highlight class="normal"></highlight></codeline>
<codeline lineno="12019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">OutputRedirect<sp/>{</highlight></codeline>
<codeline lineno="12020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="12021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutputRedirect(OutputRedirect<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutputRedirect&amp;<sp/>operator=(OutputRedirect<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutputRedirect(OutputRedirect&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutputRedirect&amp;<sp/>operator=(OutputRedirect&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12025"><highlight class="normal"></highlight></codeline>
<codeline lineno="12026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutputRedirect(std::string&amp;<sp/>stdout_dest,<sp/>std::string&amp;<sp/>stderr_dest);</highlight></codeline>
<codeline lineno="12027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~OutputRedirect();</highlight></codeline>
<codeline lineno="12028"><highlight class="normal"></highlight></codeline>
<codeline lineno="12029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="12030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_originalStdout<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="12031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_originalStderr<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="12032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TempFile<sp/>m_stdoutFile;</highlight></codeline>
<codeline lineno="12033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TempFile<sp/>m_stderrFile;</highlight></codeline>
<codeline lineno="12034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string&amp;<sp/>m_stdoutDest;</highlight></codeline>
<codeline lineno="12035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string&amp;<sp/>m_stderrDest;</highlight></codeline>
<codeline lineno="12036"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="12037"><highlight class="normal"></highlight></codeline>
<codeline lineno="12038"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12039"><highlight class="normal"></highlight></codeline>
<codeline lineno="12040"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12041"><highlight class="normal"></highlight></codeline>
<codeline lineno="12042"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>TWOBLUECUBES_CATCH_OUTPUT_REDIRECT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12043"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_output_redirect.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12044"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12045"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12046"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12047"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12048"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12049"><highlight class="normal"></highlight></codeline>
<codeline lineno="12050"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_NEW_CAPTURE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12051"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12052"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;io.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//_dup<sp/>and<sp/>_dup2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12053"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>dup<sp/>_dup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12054"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>dup2<sp/>_dup2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12055"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>fileno<sp/>_fileno</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12056"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12057"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>dup<sp/>and<sp/>dup2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12058"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12059"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12060"><highlight class="normal"></highlight></codeline>
<codeline lineno="12061"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="12062"><highlight class="normal"></highlight></codeline>
<codeline lineno="12063"><highlight class="normal"><sp/><sp/><sp/><sp/>RedirectedStream::RedirectedStream(<sp/>std::ostream&amp;<sp/>originalStream,<sp/>std::ostream&amp;<sp/>redirectionStream<sp/>)</highlight></codeline>
<codeline lineno="12064"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>m_originalStream(<sp/>originalStream<sp/>),</highlight></codeline>
<codeline lineno="12065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_redirectionStream(<sp/>redirectionStream<sp/>),</highlight></codeline>
<codeline lineno="12066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_prevBuf(<sp/>m_originalStream.rdbuf()<sp/>)</highlight></codeline>
<codeline lineno="12067"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="12068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_originalStream.rdbuf(<sp/>m_redirectionStream.rdbuf()<sp/>);</highlight></codeline>
<codeline lineno="12069"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12070"><highlight class="normal"></highlight></codeline>
<codeline lineno="12071"><highlight class="normal"><sp/><sp/><sp/><sp/>RedirectedStream::~RedirectedStream()<sp/>{</highlight></codeline>
<codeline lineno="12072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_originalStream.rdbuf(<sp/>m_prevBuf<sp/>);</highlight></codeline>
<codeline lineno="12073"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12074"><highlight class="normal"></highlight></codeline>
<codeline lineno="12075"><highlight class="normal"><sp/><sp/><sp/><sp/>RedirectedStdOut::RedirectedStdOut()<sp/>:<sp/>m_cout(<sp/>Catch::cout(),<sp/>m_rss.get()<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="12076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>RedirectedStdOut::str()<sp/>const<sp/>-&gt;<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_rss.str();<sp/>}</highlight></codeline>
<codeline lineno="12077"><highlight class="normal"></highlight></codeline>
<codeline lineno="12078"><highlight class="normal"><sp/><sp/><sp/><sp/>RedirectedStdErr::RedirectedStdErr()</highlight></codeline>
<codeline lineno="12079"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>m_cerr(<sp/>Catch::cerr(),<sp/>m_rss.get()<sp/>),</highlight></codeline>
<codeline lineno="12080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_clog(<sp/>Catch::clog(),<sp/>m_rss.get()<sp/>)</highlight></codeline>
<codeline lineno="12081"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="12082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>RedirectedStdErr::str()<sp/>const<sp/>-&gt;<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_rss.str();<sp/>}</highlight></codeline>
<codeline lineno="12083"><highlight class="normal"></highlight></codeline>
<codeline lineno="12084"><highlight class="normal"><sp/><sp/><sp/><sp/>RedirectedStreams::RedirectedStreams(std::string&amp;<sp/>redirectedCout,<sp/>std::string&amp;<sp/>redirectedCerr)</highlight></codeline>
<codeline lineno="12085"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>m_redirectedCout(redirectedCout),</highlight></codeline>
<codeline lineno="12086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_redirectedCerr(redirectedCerr)</highlight></codeline>
<codeline lineno="12087"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="12088"><highlight class="normal"></highlight></codeline>
<codeline lineno="12089"><highlight class="normal"><sp/><sp/><sp/><sp/>RedirectedStreams::~RedirectedStreams()<sp/>{</highlight></codeline>
<codeline lineno="12090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_redirectedCout<sp/>+=<sp/>m_redirectedStdOut.str();</highlight></codeline>
<codeline lineno="12091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_redirectedCerr<sp/>+=<sp/>m_redirectedStdErr.str();</highlight></codeline>
<codeline lineno="12092"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12093"><highlight class="normal"></highlight></codeline>
<codeline lineno="12094"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_NEW_CAPTURE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12095"><highlight class="normal"></highlight></codeline>
<codeline lineno="12096"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12097"><highlight class="normal"><sp/><sp/><sp/><sp/>TempFile::TempFile()<sp/>{</highlight></codeline>
<codeline lineno="12098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmpnam_s(m_buffer))<sp/>{</highlight></codeline>
<codeline lineno="12099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_RUNTIME_ERROR(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>get<sp/>a<sp/>temp<sp/>filename&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fopen_s(&amp;m_file,<sp/>m_buffer,<sp/></highlight><highlight class="stringliteral">&quot;w+&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="12102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[100];</highlight></codeline>
<codeline lineno="12103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strerror_s(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>errno))<sp/>{</highlight></codeline>
<codeline lineno="12104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_RUNTIME_ERROR(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>translate<sp/>errno<sp/>to<sp/>a<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_RUNTIME_ERROR(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>open<sp/>the<sp/>temp<sp/>file:<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_buffer<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>because:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>);</highlight></codeline>
<codeline lineno="12107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12109"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12110"><highlight class="normal"><sp/><sp/><sp/><sp/>TempFile::TempFile()<sp/>{</highlight></codeline>
<codeline lineno="12111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_file<sp/>=<sp/>std::tmpfile();</highlight></codeline>
<codeline lineno="12112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_file)<sp/>{</highlight></codeline>
<codeline lineno="12113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_RUNTIME_ERROR(</highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>create<sp/>a<sp/>temp<sp/>file.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12116"><highlight class="normal"></highlight></codeline>
<codeline lineno="12117"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12118"><highlight class="normal"></highlight></codeline>
<codeline lineno="12119"><highlight class="normal"><sp/><sp/><sp/><sp/>TempFile::~TempFile()<sp/>{</highlight></codeline>
<codeline lineno="12120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TBD:<sp/>What<sp/>to<sp/>do<sp/>about<sp/>errors<sp/>here?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fclose(m_file);</highlight></codeline>
<codeline lineno="12122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>manually<sp/>create<sp/>the<sp/>file<sp/>on<sp/>Windows<sp/>only,<sp/>on<sp/>Linux</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>will<sp/>be<sp/>autodeleted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12124"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::remove(m_buffer);</highlight></codeline>
<codeline lineno="12126"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12128"><highlight class="normal"></highlight></codeline>
<codeline lineno="12129"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/>TempFile::getFile()<sp/>{</highlight></codeline>
<codeline lineno="12130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_file;</highlight></codeline>
<codeline lineno="12131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12132"><highlight class="normal"></highlight></codeline>
<codeline lineno="12133"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>TempFile::getContents()<sp/>{</highlight></codeline>
<codeline lineno="12134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>sstr;</highlight></codeline>
<codeline lineno="12135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[100]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="12136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::rewind(m_file);</highlight></codeline>
<codeline lineno="12137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(std::fgets(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classbuffer" kindref="compound">buffer</ref>),<sp/>m_file))<sp/>{</highlight></codeline>
<codeline lineno="12138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sstr<sp/>&lt;&lt;<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>;</highlight></codeline>
<codeline lineno="12139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sstr.str();</highlight></codeline>
<codeline lineno="12141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12142"><highlight class="normal"></highlight></codeline>
<codeline lineno="12143"><highlight class="normal"><sp/><sp/><sp/><sp/>OutputRedirect::OutputRedirect(std::string&amp;<sp/>stdout_dest,<sp/>std::string&amp;<sp/>stderr_dest)<sp/>:</highlight></codeline>
<codeline lineno="12144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_originalStdout(dup(1)),</highlight></codeline>
<codeline lineno="12145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_originalStderr(dup(2)),</highlight></codeline>
<codeline lineno="12146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_stdoutDest(stdout_dest),</highlight></codeline>
<codeline lineno="12147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_stderrDest(stderr_dest)<sp/>{</highlight></codeline>
<codeline lineno="12148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dup2(fileno(m_stdoutFile.getFile()),<sp/>1);</highlight></codeline>
<codeline lineno="12149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dup2(fileno(m_stderrFile.getFile()),<sp/>2);</highlight></codeline>
<codeline lineno="12150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12151"><highlight class="normal"></highlight></codeline>
<codeline lineno="12152"><highlight class="normal"><sp/><sp/><sp/><sp/>OutputRedirect::~OutputRedirect()<sp/>{</highlight></codeline>
<codeline lineno="12153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::cout()<sp/>&lt;&lt;<sp/>std::flush;</highlight></codeline>
<codeline lineno="12154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="12155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>we<sp/>support<sp/>overriding<sp/>these<sp/>streams,<sp/>we<sp/>flush<sp/>cerr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>even<sp/>though<sp/>std::cerr<sp/>is<sp/>unbuffered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::cerr()<sp/>&lt;&lt;<sp/>std::flush;</highlight></codeline>
<codeline lineno="12158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::clog()<sp/>&lt;&lt;<sp/>std::flush;</highlight></codeline>
<codeline lineno="12159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fflush(stderr);</highlight></codeline>
<codeline lineno="12160"><highlight class="normal"></highlight></codeline>
<codeline lineno="12161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dup2(m_originalStdout,<sp/>1);</highlight></codeline>
<codeline lineno="12162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dup2(m_originalStderr,<sp/>2);</highlight></codeline>
<codeline lineno="12163"><highlight class="normal"></highlight></codeline>
<codeline lineno="12164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_stdoutDest<sp/>+=<sp/>m_stdoutFile.getContents();</highlight></codeline>
<codeline lineno="12165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_stderrDest<sp/>+=<sp/>m_stderrFile.getContents();</highlight></codeline>
<codeline lineno="12166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12167"><highlight class="normal"></highlight></codeline>
<codeline lineno="12168"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_NEW_CAPTURE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12169"><highlight class="normal"></highlight></codeline>
<codeline lineno="12170"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12171"><highlight class="normal"></highlight></codeline>
<codeline lineno="12172"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_NEW_CAPTURE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12173"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12174"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#undef<sp/>dup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12175"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#undef<sp/>dup2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12176"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#undef<sp/>fileno</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12177"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12178"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_output_redirect.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12180"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_polyfills.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12181"><highlight class="normal"></highlight></codeline>
<codeline lineno="12182"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12183"><highlight class="normal"></highlight></codeline>
<codeline lineno="12184"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="12185"><highlight class="normal"></highlight></codeline>
<codeline lineno="12186"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_CONFIG_POLYFILL_ISNAN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__core__func__common_1ga81f85e3c56f1f559034422b357c37e21" kindref="member">isnan</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="12188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__core__func__common_1ga81f85e3c56f1f559034422b357c37e21" kindref="member">std::isnan</ref>(f);</highlight></codeline>
<codeline lineno="12189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__core__func__common_1ga81f85e3c56f1f559034422b357c37e21" kindref="member">isnan</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d)<sp/>{</highlight></codeline>
<codeline lineno="12191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__core__func__common_1ga81f85e3c56f1f559034422b357c37e21" kindref="member">std::isnan</ref>(d);</highlight></codeline>
<codeline lineno="12192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12193"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>now<sp/>we<sp/>only<sp/>use<sp/>this<sp/>for<sp/>embarcadero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__core__func__common_1ga81f85e3c56f1f559034422b357c37e21" kindref="member">isnan</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="12196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::_isnan(f);</highlight></codeline>
<codeline lineno="12197"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__core__func__common_1ga81f85e3c56f1f559034422b357c37e21" kindref="member">isnan</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d)<sp/>{</highlight></codeline>
<codeline lineno="12199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::_isnan(d);</highlight></codeline>
<codeline lineno="12200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12201"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12202"><highlight class="normal"></highlight></codeline>
<codeline lineno="12203"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12204"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_polyfills.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12205"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_random_number_generator.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12206"><highlight class="normal"></highlight></codeline>
<codeline lineno="12207"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="12208"><highlight class="normal"></highlight></codeline>
<codeline lineno="12209"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="12210"><highlight class="normal"></highlight></codeline>
<codeline lineno="12211"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12212"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(push)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12213"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(disable:4146)<sp/></highlight><highlight class="comment">//<sp/>we<sp/>negate<sp/>uint32<sp/>during<sp/>the<sp/>rotate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12214"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Safe<sp/>rotr<sp/>implementation<sp/>thanks<sp/>to<sp/>John<sp/>Regehr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>rotate_right(uint32_t<sp/>val,<sp/>uint32_t<sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="12217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="structmask" kindref="compound">mask</ref><sp/>=<sp/>31;</highlight></codeline>
<codeline lineno="12218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>&amp;=<sp/><ref refid="structmask" kindref="compound">mask</ref>;</highlight></codeline>
<codeline lineno="12219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(val<sp/>&gt;&gt;<sp/>count)<sp/>|<sp/>(val<sp/>&lt;&lt;<sp/>(-count<sp/>&amp;<sp/><ref refid="structmask" kindref="compound">mask</ref>));</highlight></codeline>
<codeline lineno="12220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12221"><highlight class="normal"></highlight></codeline>
<codeline lineno="12222"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12223"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(pop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12224"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12225"><highlight class="normal"></highlight></codeline>
<codeline lineno="12226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12227"><highlight class="normal"></highlight></codeline>
<codeline lineno="12228"><highlight class="normal"><sp/><sp/><sp/><sp/>SimplePcg32::SimplePcg32(result_type<sp/>seed_)<sp/>{</highlight></codeline>
<codeline lineno="12229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed(seed_);</highlight></codeline>
<codeline lineno="12230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12231"><highlight class="normal"></highlight></codeline>
<codeline lineno="12232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SimplePcg32::seed(result_type<sp/>seed_)<sp/>{</highlight></codeline>
<codeline lineno="12233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_state<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="12234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)();</highlight></codeline>
<codeline lineno="12235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_state<sp/>+=<sp/>seed_;</highlight></codeline>
<codeline lineno="12236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this)();</highlight></codeline>
<codeline lineno="12237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12238"><highlight class="normal"></highlight></codeline>
<codeline lineno="12239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SimplePcg32::discard(uint64_t<sp/>skip)<sp/>{</highlight></codeline>
<codeline lineno="12240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>could<sp/>implement<sp/>this<sp/>to<sp/>run<sp/>in<sp/>O(log<sp/>n)<sp/>steps,<sp/>but<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>suffice<sp/>for<sp/>our<sp/>use<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>s<sp/>=<sp/>0;<sp/>s<sp/>&lt;<sp/>skip;<sp/>++s)<sp/>{</highlight></codeline>
<codeline lineno="12243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((*this)());</highlight></codeline>
<codeline lineno="12244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12245"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12246"><highlight class="normal"></highlight></codeline>
<codeline lineno="12247"><highlight class="normal"><sp/><sp/><sp/><sp/>SimplePcg32::result_type<sp/>SimplePcg32::operator()()<sp/>{</highlight></codeline>
<codeline lineno="12248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>prepare<sp/>the<sp/>output<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>xorshifted<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(((m_state<sp/>&gt;&gt;<sp/>18u)<sp/>^<sp/>m_state)<sp/>&gt;&gt;<sp/>27u);</highlight></codeline>
<codeline lineno="12250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structoutput" kindref="compound">output</ref><sp/>=<sp/>rotate_right(xorshifted,<sp/>m_state<sp/>&gt;&gt;<sp/>59u);</highlight></codeline>
<codeline lineno="12251"><highlight class="normal"></highlight></codeline>
<codeline lineno="12252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>advance<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_state<sp/>=<sp/>m_state<sp/>*<sp/>6364136223846793005ULL<sp/>+<sp/>s_inc;</highlight></codeline>
<codeline lineno="12254"><highlight class="normal"></highlight></codeline>
<codeline lineno="12255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structoutput" kindref="compound">output</ref>;</highlight></codeline>
<codeline lineno="12256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12257"><highlight class="normal"></highlight></codeline>
<codeline lineno="12258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(SimplePcg32<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/>SimplePcg32<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="12259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.m_state<sp/>==<sp/>rhs.m_state;</highlight></codeline>
<codeline lineno="12260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12261"><highlight class="normal"></highlight></codeline>
<codeline lineno="12262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(SimplePcg32<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/>SimplePcg32<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="12263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.m_state<sp/>!=<sp/>rhs.m_state;</highlight></codeline>
<codeline lineno="12264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12266"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_random_number_generator.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12267"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_registry_hub.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12268"><highlight class="normal"></highlight></codeline>
<codeline lineno="12269"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_test_case_registry_impl.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12270"><highlight class="normal"></highlight></codeline>
<codeline lineno="12271"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12272"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12273"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12274"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ios&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12275"><highlight class="normal"></highlight></codeline>
<codeline lineno="12276"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="12277"><highlight class="normal"></highlight></codeline>
<codeline lineno="12278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TestCase;</highlight></codeline>
<codeline lineno="12279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IConfig;</highlight></codeline>
<codeline lineno="12280"><highlight class="normal"></highlight></codeline>
<codeline lineno="12281"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;TestCase&gt;<sp/>sortTests(<sp/>IConfig<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config,<sp/>std::vector&lt;TestCase&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>unsortedTestCases<sp/>);</highlight></codeline>
<codeline lineno="12282"><highlight class="normal"></highlight></codeline>
<codeline lineno="12283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isThrowSafe(<sp/>TestCase<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCase,<sp/>IConfig<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config<sp/>);</highlight></codeline>
<codeline lineno="12284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>matchTest(<sp/>TestCase<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCase,<sp/>TestSpec<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testSpec,<sp/>IConfig<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config<sp/>);</highlight></codeline>
<codeline lineno="12285"><highlight class="normal"></highlight></codeline>
<codeline lineno="12286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>enforceNoDuplicateTestCases(<sp/>std::vector&lt;TestCase&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>functions<sp/>);</highlight></codeline>
<codeline lineno="12287"><highlight class="normal"></highlight></codeline>
<codeline lineno="12288"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;TestCase&gt;<sp/>filterTests(<sp/>std::vector&lt;TestCase&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCases,<sp/>TestSpec<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testSpec,<sp/>IConfig<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config<sp/>);</highlight></codeline>
<codeline lineno="12289"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;TestCase&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>getAllTestCasesSorted(<sp/>IConfig<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config<sp/>);</highlight></codeline>
<codeline lineno="12290"><highlight class="normal"></highlight></codeline>
<codeline lineno="12291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TestRegistry<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ITestCaseRegistry<sp/>{</highlight></codeline>
<codeline lineno="12292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="12293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~TestRegistry()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12294"><highlight class="normal"></highlight></codeline>
<codeline lineno="12295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>registerTest(<sp/>TestCase<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCase<sp/>);</highlight></codeline>
<codeline lineno="12296"><highlight class="normal"></highlight></codeline>
<codeline lineno="12297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;TestCase&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>getAllTests()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;TestCase&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>getAllTestsSorted(<sp/>IConfig<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config<sp/>)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12299"><highlight class="normal"></highlight></codeline>
<codeline lineno="12300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="12301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;TestCase&gt;<sp/>m_functions;</highlight></codeline>
<codeline lineno="12302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>RunTests::InWhatOrder<sp/>m_currentSortOrder<sp/>=<sp/>RunTests::InDeclarationOrder;</highlight></codeline>
<codeline lineno="12303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>std::vector&lt;TestCase&gt;<sp/>m_sortedFunctions;</highlight></codeline>
<codeline lineno="12304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>m_unnamedCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="12305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ios_base::Init<sp/>m_ostreamInit;<sp/></highlight><highlight class="comment">//<sp/>Forces<sp/>cout/<sp/>cerr<sp/>to<sp/>be<sp/>initialised</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12306"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="12307"><highlight class="normal"></highlight></codeline>
<codeline lineno="12309"><highlight class="normal"></highlight></codeline>
<codeline lineno="12310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TestInvokerAsFunction<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ITestInvoker<sp/>{</highlight></codeline>
<codeline lineno="12311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void(*m_testAsFunction)();</highlight></codeline>
<codeline lineno="12312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="12313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestInvokerAsFunction(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(*testAsFunction)()<sp/>)<sp/>noexcept;</highlight></codeline>
<codeline lineno="12314"><highlight class="normal"></highlight></codeline>
<codeline lineno="12315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>invoke()<sp/>const<sp/>override;</highlight></codeline>
<codeline lineno="12316"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="12317"><highlight class="normal"></highlight></codeline>
<codeline lineno="12318"><highlight class="normal"><sp/><sp/><sp/><sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>extractClassName(<sp/>StringRef<sp/>const&amp;<sp/>classOrQualifiedMethodName<sp/>);</highlight></codeline>
<codeline lineno="12319"><highlight class="normal"></highlight></codeline>
<codeline lineno="12321"><highlight class="normal"></highlight></codeline>
<codeline lineno="12322"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12323"><highlight class="normal"></highlight></codeline>
<codeline lineno="12324"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_test_case_registry_impl.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12325"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_reporter_registry.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12326"><highlight class="normal"></highlight></codeline>
<codeline lineno="12327"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12328"><highlight class="normal"></highlight></codeline>
<codeline lineno="12329"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="12330"><highlight class="normal"></highlight></codeline>
<codeline lineno="12331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ReporterRegistry<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>IReporterRegistry<sp/>{</highlight></codeline>
<codeline lineno="12332"><highlight class="normal"></highlight></codeline>
<codeline lineno="12333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="12334"><highlight class="normal"></highlight></codeline>
<codeline lineno="12335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~ReporterRegistry()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12336"><highlight class="normal"></highlight></codeline>
<codeline lineno="12337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IStreamingReporterPtr<sp/>create(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name,<sp/>IConfigPtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config<sp/>)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12338"><highlight class="normal"></highlight></codeline>
<codeline lineno="12339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>registerReporter(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name,<sp/>IReporterFactoryPtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>factory<sp/>);</highlight></codeline>
<codeline lineno="12340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>registerListener(<sp/>IReporterFactoryPtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>factory<sp/>);</highlight></codeline>
<codeline lineno="12341"><highlight class="normal"></highlight></codeline>
<codeline lineno="12342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FactoryMap<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>getFactories()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Listeners<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>getListeners()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12344"><highlight class="normal"></highlight></codeline>
<codeline lineno="12345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="12346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FactoryMap<sp/>m_factories;</highlight></codeline>
<codeline lineno="12347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Listeners<sp/>m_listeners;</highlight></codeline>
<codeline lineno="12348"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="12349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12350"><highlight class="normal"></highlight></codeline>
<codeline lineno="12351"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_reporter_registry.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12352"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_tag_alias_registry.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12353"><highlight class="normal"></highlight></codeline>
<codeline lineno="12354"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_tag_alias.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12355"><highlight class="normal"></highlight></codeline>
<codeline lineno="12356"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12357"><highlight class="normal"></highlight></codeline>
<codeline lineno="12358"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="12359"><highlight class="normal"></highlight></codeline>
<codeline lineno="12360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TagAlias<sp/>{</highlight></codeline>
<codeline lineno="12361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TagAlias(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_tag,<sp/>SourceLineInfo<sp/>_lineInfo);</highlight></codeline>
<codeline lineno="12362"><highlight class="normal"></highlight></codeline>
<codeline lineno="12363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>tag;</highlight></codeline>
<codeline lineno="12364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SourceLineInfo<sp/>lineInfo;</highlight></codeline>
<codeline lineno="12365"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="12366"><highlight class="normal"></highlight></codeline>
<codeline lineno="12367"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12368"><highlight class="normal"></highlight></codeline>
<codeline lineno="12369"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_tag_alias.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12370"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12371"><highlight class="normal"></highlight></codeline>
<codeline lineno="12372"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="12373"><highlight class="normal"></highlight></codeline>
<codeline lineno="12374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TagAliasRegistry<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ITagAliasRegistry<sp/>{</highlight></codeline>
<codeline lineno="12375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="12376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~TagAliasRegistry()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TagAlias<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>find(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>alias<sp/>)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>expandAliases(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>unexpandedTestSpec<sp/>)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>alias,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>tag,<sp/>SourceLineInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lineInfo<sp/>);</highlight></codeline>
<codeline lineno="12380"><highlight class="normal"></highlight></codeline>
<codeline lineno="12381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="12382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>TagAlias&gt;<sp/>m_registry;</highlight></codeline>
<codeline lineno="12383"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="12384"><highlight class="normal"></highlight></codeline>
<codeline lineno="12385"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12386"><highlight class="normal"></highlight></codeline>
<codeline lineno="12387"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_tag_alias_registry.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12388"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_startup_exception_registry.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12389"><highlight class="normal"></highlight></codeline>
<codeline lineno="12390"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12391"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;exception&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12392"><highlight class="normal"></highlight></codeline>
<codeline lineno="12393"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="12394"><highlight class="normal"></highlight></codeline>
<codeline lineno="12395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">StartupExceptionRegistry<sp/>{</highlight></codeline>
<codeline lineno="12396"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="12398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add(std::exception_ptr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>exception)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::exception_ptr&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>getExceptions()<sp/>const<sp/>noexcept;</highlight></codeline>
<codeline lineno="12400"><highlight class="normal"><sp/><sp/><sp/><sp/>private:</highlight></codeline>
<codeline lineno="12401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::exception_ptr&gt;<sp/>m_exceptions;</highlight></codeline>
<codeline lineno="12402"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12403"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="12404"><highlight class="normal"></highlight></codeline>
<codeline lineno="12405"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12406"><highlight class="normal"></highlight></codeline>
<codeline lineno="12407"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_startup_exception_registry.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12408"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_singletons.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12409"><highlight class="normal"></highlight></codeline>
<codeline lineno="12410"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="12411"><highlight class="normal"></highlight></codeline>
<codeline lineno="12412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ISingleton<sp/>{</highlight></codeline>
<codeline lineno="12413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~ISingleton();</highlight></codeline>
<codeline lineno="12414"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="12415"><highlight class="normal"></highlight></codeline>
<codeline lineno="12416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addSingleton(<sp/>ISingleton*<sp/>singleton<sp/>);</highlight></codeline>
<codeline lineno="12417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cleanupSingletons();</highlight></codeline>
<codeline lineno="12418"><highlight class="normal"></highlight></codeline>
<codeline lineno="12419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SingletonImplT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InterfaceT<sp/>=<sp/>SingletonImplT,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>MutableInterfaceT<sp/>=<sp/>InterfaceT&gt;</highlight></codeline>
<codeline lineno="12420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_singleton" kindref="compound">Singleton</ref><sp/>:<sp/>SingletonImplT,<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ISingleton<sp/>{</highlight></codeline>
<codeline lineno="12421"><highlight class="normal"></highlight></codeline>
<codeline lineno="12422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>getInternal()<sp/>-&gt;<sp/><ref refid="class_singleton" kindref="compound">Singleton</ref>*<sp/>{</highlight></codeline>
<codeline lineno="12423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_singleton" kindref="compound">Singleton</ref>*<sp/>s_instance<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!s_instance<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="12425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s_instance<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_singleton" kindref="compound">Singleton</ref>;</highlight></codeline>
<codeline lineno="12426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addSingleton(<sp/>s_instance<sp/>);</highlight></codeline>
<codeline lineno="12427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_instance;</highlight></codeline>
<codeline lineno="12429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12430"><highlight class="normal"></highlight></codeline>
<codeline lineno="12431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="12432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get()<sp/>-&gt;<sp/>InterfaceT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>{</highlight></codeline>
<codeline lineno="12433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*getInternal();</highlight></codeline>
<codeline lineno="12434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>getMutable()<sp/>-&gt;<sp/>MutableInterfaceT&amp;<sp/>{</highlight></codeline>
<codeline lineno="12436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*getInternal();</highlight></codeline>
<codeline lineno="12437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12438"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="12439"><highlight class="normal"></highlight></codeline>
<codeline lineno="12440"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12441"><highlight class="normal"></highlight></codeline>
<codeline lineno="12442"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_singletons.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12443"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="12444"><highlight class="normal"></highlight></codeline>
<codeline lineno="12445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="12446"><highlight class="normal"></highlight></codeline>
<codeline lineno="12447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">RegistryHub<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>IRegistryHub,<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>IMutableRegistryHub,</highlight></codeline>
<codeline lineno="12448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>NonCopyable<sp/>{</highlight></codeline>
<codeline lineno="12449"><highlight class="normal"></highlight></codeline>
<codeline lineno="12450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>IRegistryHub</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RegistryHub()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IReporterRegistry<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>getReporterRegistry()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="12453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_reporterRegistry;</highlight></codeline>
<codeline lineno="12454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ITestCaseRegistry<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>getTestCaseRegistry()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="12456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_testCaseRegistry;</highlight></codeline>
<codeline lineno="12457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IExceptionTranslatorRegistry<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>getExceptionTranslatorRegistry()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="12459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_exceptionTranslatorRegistry;</highlight></codeline>
<codeline lineno="12460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ITagAliasRegistry<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>getTagAliasRegistry()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="12462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_tagAliasRegistry;</highlight></codeline>
<codeline lineno="12463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StartupExceptionRegistry<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>getStartupExceptionRegistry()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="12465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_exceptionRegistry;</highlight></codeline>
<codeline lineno="12466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12467"><highlight class="normal"></highlight></codeline>
<codeline lineno="12468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>IMutableRegistryHub</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>registerReporter(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name,<sp/>IReporterFactoryPtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>factory<sp/>)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="12470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporterRegistry.registerReporter(<sp/>name,<sp/>factory<sp/>);</highlight></codeline>
<codeline lineno="12471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>registerListener(<sp/>IReporterFactoryPtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>factory<sp/>)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="12473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporterRegistry.registerListener(<sp/>factory<sp/>);</highlight></codeline>
<codeline lineno="12474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>registerTest(<sp/>TestCase<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testInfo<sp/>)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="12476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_testCaseRegistry.registerTest(<sp/>testInfo<sp/>);</highlight></codeline>
<codeline lineno="12477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>registerTranslator(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IExceptionTranslator*<sp/>translator<sp/>)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="12479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_exceptionTranslatorRegistry.registerTranslator(<sp/>translator<sp/>);</highlight></codeline>
<codeline lineno="12480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>registerTagAlias(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>alias,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>tag,<sp/>SourceLineInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lineInfo<sp/>)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="12482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_tagAliasRegistry.add(<sp/>alias,<sp/>tag,<sp/>lineInfo<sp/>);</highlight></codeline>
<codeline lineno="12483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>registerStartupException()<sp/>noexcept</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="12485"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_exceptionRegistry.add(std::current_exception());</highlight></codeline>
<codeline lineno="12487"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_ERROR(</highlight><highlight class="stringliteral">&quot;Attempted<sp/>to<sp/>register<sp/>active<sp/>exception<sp/>under<sp/>CATCH_CONFIG_DISABLE_EXCEPTIONS!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12489"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IMutableEnumValuesRegistry&amp;<sp/>getMutableEnumValuesRegistry()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="12492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_enumValuesRegistry;</highlight></codeline>
<codeline lineno="12493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12494"><highlight class="normal"></highlight></codeline>
<codeline lineno="12495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="12496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestRegistry<sp/>m_testCaseRegistry;</highlight></codeline>
<codeline lineno="12497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReporterRegistry<sp/>m_reporterRegistry;</highlight></codeline>
<codeline lineno="12498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExceptionTranslatorRegistry<sp/>m_exceptionTranslatorRegistry;</highlight></codeline>
<codeline lineno="12499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TagAliasRegistry<sp/>m_tagAliasRegistry;</highlight></codeline>
<codeline lineno="12500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StartupExceptionRegistry<sp/>m_exceptionRegistry;</highlight></codeline>
<codeline lineno="12501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Detail::EnumValuesRegistry<sp/>m_enumValuesRegistry;</highlight></codeline>
<codeline lineno="12502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="12503"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12504"><highlight class="normal"></highlight></codeline>
<codeline lineno="12505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>RegistryHubSingleton<sp/>=<sp/><ref refid="class_singleton" kindref="compound">Singleton&lt;RegistryHub, IRegistryHub, IMutableRegistryHub&gt;</ref>;</highlight></codeline>
<codeline lineno="12506"><highlight class="normal"></highlight></codeline>
<codeline lineno="12507"><highlight class="normal"><sp/><sp/><sp/><sp/>IRegistryHub<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>getRegistryHub()<sp/>{</highlight></codeline>
<codeline lineno="12508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RegistryHubSingleton::get();</highlight></codeline>
<codeline lineno="12509"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12510"><highlight class="normal"><sp/><sp/><sp/><sp/>IMutableRegistryHub&amp;<sp/>getMutableRegistryHub()<sp/>{</highlight></codeline>
<codeline lineno="12511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RegistryHubSingleton::getMutable();</highlight></codeline>
<codeline lineno="12512"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cleanUp()<sp/>{</highlight></codeline>
<codeline lineno="12514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cleanupSingletons();</highlight></codeline>
<codeline lineno="12515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cleanUpContext();</highlight></codeline>
<codeline lineno="12516"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12517"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>translateActiveException()<sp/>{</highlight></codeline>
<codeline lineno="12518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getRegistryHub().getExceptionTranslatorRegistry().translateActiveException();</highlight></codeline>
<codeline lineno="12519"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12520"><highlight class="normal"></highlight></codeline>
<codeline lineno="12521"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12522"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_registry_hub.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12523"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_reporter_registry.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12524"><highlight class="normal"></highlight></codeline>
<codeline lineno="12525"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="12526"><highlight class="normal"></highlight></codeline>
<codeline lineno="12527"><highlight class="normal"><sp/><sp/><sp/><sp/>ReporterRegistry::~ReporterRegistry()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12528"><highlight class="normal"></highlight></codeline>
<codeline lineno="12529"><highlight class="normal"><sp/><sp/><sp/><sp/>IStreamingReporterPtr<sp/>ReporterRegistry::create(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name,<sp/>IConfigPtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="12530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/><sp/>m_factories.find(<sp/>name<sp/>);</highlight></codeline>
<codeline lineno="12531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>it<sp/>==<sp/>m_factories.end()<sp/>)</highlight></codeline>
<codeline lineno="12532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second-&gt;create(<sp/>ReporterConfig(<sp/>config<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="12534"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12535"><highlight class="normal"></highlight></codeline>
<codeline lineno="12536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReporterRegistry::registerReporter(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name,<sp/>IReporterFactoryPtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>factory<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="12537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_factories.emplace(name,<sp/>factory);</highlight></codeline>
<codeline lineno="12538"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReporterRegistry::registerListener(<sp/>IReporterFactoryPtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>factory<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="12540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_listeners.push_back(<sp/>factory<sp/>);</highlight></codeline>
<codeline lineno="12541"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12542"><highlight class="normal"></highlight></codeline>
<codeline lineno="12543"><highlight class="normal"><sp/><sp/><sp/><sp/>IReporterRegistry::FactoryMap<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>ReporterRegistry::getFactories()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="12544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_factories;</highlight></codeline>
<codeline lineno="12545"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12546"><highlight class="normal"><sp/><sp/><sp/><sp/>IReporterRegistry::Listeners<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>ReporterRegistry::getListeners()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="12547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_listeners;</highlight></codeline>
<codeline lineno="12548"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12549"><highlight class="normal"></highlight></codeline>
<codeline lineno="12550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12551"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_reporter_registry.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12552"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_result_type.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12553"><highlight class="normal"></highlight></codeline>
<codeline lineno="12554"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="12555"><highlight class="normal"></highlight></codeline>
<codeline lineno="12556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isOk(<sp/>ResultWas::OfType<sp/>resultType<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="12557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>resultType<sp/>&amp;<sp/>ResultWas::FailureBit<sp/>)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="12558"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isJustInfo(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="12560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flags<sp/>==<sp/>ResultWas::Info;</highlight></codeline>
<codeline lineno="12561"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12562"><highlight class="normal"></highlight></codeline>
<codeline lineno="12563"><highlight class="normal"><sp/><sp/><sp/><sp/>ResultDisposition::Flags<sp/>operator<sp/>|<sp/>(<sp/>ResultDisposition::Flags<sp/>lhs,<sp/>ResultDisposition::Flags<sp/>rhs<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="12564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">ResultDisposition::Flags</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>lhs<sp/>)<sp/>|<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>rhs<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="12565"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12566"><highlight class="normal"></highlight></codeline>
<codeline lineno="12567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shouldContinueOnFailure(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags<sp/>)<sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>flags<sp/>&amp;<sp/>ResultDisposition::ContinueOnFailure<sp/>)<sp/>!=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="12568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shouldSuppressFailure(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>flags<sp/>&amp;<sp/>ResultDisposition::SuppressFail<sp/>)<sp/>!=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="12569"><highlight class="normal"></highlight></codeline>
<codeline lineno="12570"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12571"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_result_type.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12572"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_run_context.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12573"><highlight class="normal"></highlight></codeline>
<codeline lineno="12574"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12575"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12576"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12577"><highlight class="normal"></highlight></codeline>
<codeline lineno="12578"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="12579"><highlight class="normal"></highlight></codeline>
<codeline lineno="12580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Generators<sp/>{</highlight></codeline>
<codeline lineno="12581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">GeneratorTracker<sp/>:<sp/>TestCaseTracking::TrackerBase,<sp/>IGeneratorTracker<sp/>{</highlight></codeline>
<codeline lineno="12582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GeneratorBasePtr<sp/>m_generator;</highlight></codeline>
<codeline lineno="12583"><highlight class="normal"></highlight></codeline>
<codeline lineno="12584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GeneratorTracker(<sp/>TestCaseTracking::NameAndLocation<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>nameAndLocation,<sp/>TrackerContext&amp;<sp/>ctx,<sp/>ITracker*<sp/>parent<sp/>)</highlight></codeline>
<codeline lineno="12585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>TrackerBase(<sp/>nameAndLocation,<sp/>ctx,<sp/>parent<sp/>)</highlight></codeline>
<codeline lineno="12586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="12587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~GeneratorTracker();</highlight></codeline>
<codeline lineno="12588"><highlight class="normal"></highlight></codeline>
<codeline lineno="12589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GeneratorTracker&amp;<sp/>acquire(<sp/>TrackerContext&amp;<sp/>ctx,<sp/>TestCaseTracking::NameAndLocation<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>nameAndLocation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="12590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;GeneratorTracker&gt;<sp/>tracker;</highlight></codeline>
<codeline lineno="12591"><highlight class="normal"></highlight></codeline>
<codeline lineno="12592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ITracker&amp;<sp/>currentTracker<sp/>=<sp/>ctx.currentTracker();</highlight></codeline>
<codeline lineno="12593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Under<sp/>specific<sp/>circumstances,<sp/>the<sp/>generator<sp/>we<sp/>want</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>acquire<sp/>is<sp/>also<sp/>the<sp/>current<sp/>tracker.<sp/>If<sp/>this<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>case,<sp/>we<sp/>have<sp/>to<sp/>avoid<sp/>looking<sp/>through<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tracker&apos;s<sp/>children,<sp/>and<sp/>instead<sp/>return<sp/>the<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tracker.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>case<sp/>where<sp/>this<sp/>check<sp/>is<sp/>important<sp/>is<sp/>e.g.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>5;<sp/>++i)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>n<sp/>=<sp/>GENERATE(1,<sp/>2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>without<sp/>it,<sp/>the<sp/>code<sp/>above<sp/>creates<sp/>5<sp/>nested<sp/>generators.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentTracker.nameAndLocation()<sp/>==<sp/>nameAndLocation)<sp/>{</highlight></codeline>
<codeline lineno="12605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>thisTracker<sp/>=<sp/>currentTracker.parent().findChild(nameAndLocation);</highlight></codeline>
<codeline lineno="12606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(thisTracker);</highlight></codeline>
<codeline lineno="12607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(thisTracker-&gt;isGeneratorTracker());</highlight></codeline>
<codeline lineno="12608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tracker<sp/>=<sp/>std::static_pointer_cast&lt;GeneratorTracker&gt;(thisTracker);</highlight></codeline>
<codeline lineno="12609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>TestCaseTracking::ITrackerPtr<sp/>childTracker<sp/>=<sp/>currentTracker.findChild(<sp/>nameAndLocation<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="12610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>childTracker<sp/>);</highlight></codeline>
<codeline lineno="12611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>childTracker-&gt;isGeneratorTracker()<sp/>);</highlight></codeline>
<codeline lineno="12612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tracker<sp/>=<sp/>std::static_pointer_cast&lt;GeneratorTracker&gt;(<sp/>childTracker<sp/>);</highlight></codeline>
<codeline lineno="12613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="12614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tracker<sp/>=<sp/>std::make_shared&lt;GeneratorTracker&gt;(<sp/>nameAndLocation,<sp/>ctx,<sp/>&amp;currentTracker<sp/>);</highlight></codeline>
<codeline lineno="12615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentTracker.addChild(<sp/>tracker<sp/>);</highlight></codeline>
<codeline lineno="12616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12617"><highlight class="normal"></highlight></codeline>
<codeline lineno="12618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!tracker-&gt;isComplete()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="12619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tracker-&gt;open();</highlight></codeline>
<codeline lineno="12620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12621"><highlight class="normal"></highlight></codeline>
<codeline lineno="12622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*tracker;</highlight></codeline>
<codeline lineno="12623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12624"><highlight class="normal"></highlight></codeline>
<codeline lineno="12625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TrackerBase<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isGeneratorTracker()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="12627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>hasGenerator()<sp/>const<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="12628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!!m_generator;</highlight></codeline>
<codeline lineno="12629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>close()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="12631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TrackerBase::close();</highlight></codeline>
<codeline lineno="12632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>a<sp/>generator<sp/>has<sp/>a<sp/>child<sp/>(it<sp/>is<sp/>followed<sp/>by<sp/>a<sp/>section)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>none<sp/>of<sp/>its<sp/>children<sp/>have<sp/>started,<sp/>then<sp/>we<sp/>must<sp/>wait</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>until<sp/>later<sp/>to<sp/>start<sp/>consuming<sp/>its<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>catches<sp/>cases<sp/>where<sp/>`GENERATE`<sp/>is<sp/>placed<sp/>between<sp/>two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>`SECTION`s.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>**The<sp/>check<sp/>for<sp/>m_children.empty<sp/>cannot<sp/>be<sp/>removed**.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>doing<sp/>so<sp/>would<sp/>break<sp/>`GENERATE`<sp/>_not_<sp/>followed<sp/>by<sp/>`SECTION`s.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>should_wait_for_child<sp/>=<sp/>[&amp;]()<sp/>{</highlight></codeline>
<codeline lineno="12640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>children<sp/>-&gt;<sp/>nobody<sp/>to<sp/>wait<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m_children.empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="12642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>at<sp/>least<sp/>one<sp/>child<sp/>started<sp/>executing,<sp/>don&apos;t<sp/>wait</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>std::find_if(</highlight></codeline>
<codeline lineno="12646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_children.begin(),</highlight></codeline>
<codeline lineno="12647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_children.end(),</highlight></codeline>
<codeline lineno="12648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<sp/>TestCaseTracking::ITrackerPtr<sp/>tracker<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="12649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>tracker-&gt;hasStarted();</highlight></codeline>
<codeline lineno="12650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>)<sp/>!=<sp/>m_children.end()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="12651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12653"><highlight class="normal"></highlight></codeline>
<codeline lineno="12654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>children<sp/>have<sp/>started.<sp/>We<sp/>need<sp/>to<sp/>check<sp/>if<sp/>they<sp/>_can_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start,<sp/>and<sp/>thus<sp/>we<sp/>should<sp/>wait<sp/>for<sp/>them,<sp/>or<sp/>they<sp/>cannot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>(due<sp/>to<sp/>filters),<sp/>and<sp/>we<sp/>shouldn&apos;t<sp/>wait<sp/>for<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>parent<sp/>=<sp/>m_parent;</highlight></codeline>
<codeline lineno="12658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>safe:<sp/>there<sp/>is<sp/>always<sp/>at<sp/>least<sp/>one<sp/>section</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tracker<sp/>in<sp/>a<sp/>test<sp/>case<sp/>tracking<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>!parent-&gt;isSectionTracker()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="12661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent<sp/>=<sp/>&amp;(<sp/>parent-&gt;parent()<sp/>);</highlight></codeline>
<codeline lineno="12662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>parent<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="12664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Missing<sp/>root<sp/>(test<sp/>case)<sp/>level<sp/>section&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="12665"><highlight class="normal"></highlight></codeline>
<codeline lineno="12666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>parentSection<sp/>=</highlight></codeline>
<codeline lineno="12667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">SectionTracker&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>*parent<sp/>);</highlight></codeline>
<codeline lineno="12668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>filters<sp/>=<sp/>parentSection.getFilters();</highlight></codeline>
<codeline lineno="12669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>filters<sp/>-&gt;<sp/>no<sp/>restrictions<sp/>on<sp/>running<sp/>sections</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>filters.empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="12671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12673"><highlight class="normal"></highlight></codeline>
<codeline lineno="12674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>child<sp/>:<sp/>m_children<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="12675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>child-&gt;isSectionTracker()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="12676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::find(<sp/>filters.begin(),</highlight></codeline>
<codeline lineno="12677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filters.end(),</highlight></codeline>
<codeline lineno="12678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">SectionTracker&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>*child<sp/>)</highlight></codeline>
<codeline lineno="12679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.trimmedName()<sp/>)<sp/>!=</highlight></codeline>
<codeline lineno="12680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filters.end()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="12681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}();</highlight></codeline>
<codeline lineno="12686"><highlight class="normal"></highlight></codeline>
<codeline lineno="12687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>check<sp/>is<sp/>a<sp/>bit<sp/>tricky,<sp/>because<sp/>m_generator-&gt;next()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>has<sp/>a<sp/>side-effect,<sp/>where<sp/>it<sp/>consumes<sp/>generator&apos;s<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>value,<sp/>but<sp/>we<sp/>do<sp/>not<sp/>want<sp/>to<sp/>invoke<sp/>the<sp/>side-effect<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>generator<sp/>is<sp/>still<sp/>waiting<sp/>for<sp/>any<sp/>child<sp/>to<sp/>start.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>should_wait_for_child<sp/>||</highlight></codeline>
<codeline lineno="12692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>m_runState<sp/>==<sp/>CompletedSuccessfully<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="12693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_generator-&gt;next()<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="12694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_children.clear();</highlight></codeline>
<codeline lineno="12695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_runState<sp/>=<sp/>Executing;</highlight></codeline>
<codeline lineno="12696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12698"><highlight class="normal"></highlight></codeline>
<codeline lineno="12699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>IGeneratorTracker<sp/>interface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>getGenerator()<sp/>const<sp/>-&gt;<sp/>GeneratorBasePtr<sp/>const&amp;</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="12701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_generator;</highlight></codeline>
<codeline lineno="12702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setGenerator(<sp/>GeneratorBasePtr&amp;&amp;<sp/>generator<sp/>)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="12704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_generator<sp/>=<sp/>std::move(<sp/>generator<sp/>);</highlight></codeline>
<codeline lineno="12705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="12707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GeneratorTracker::~GeneratorTracker()<sp/>{}</highlight></codeline>
<codeline lineno="12708"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12709"><highlight class="normal"></highlight></codeline>
<codeline lineno="12710"><highlight class="normal"><sp/><sp/><sp/><sp/>RunContext::RunContext(IConfigPtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_config,<sp/>IStreamingReporterPtr&amp;&amp;<sp/>reporter)</highlight></codeline>
<codeline lineno="12711"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>m_runInfo(_config-&gt;name()),</highlight></codeline>
<codeline lineno="12712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_context(getCurrentMutableContext()),</highlight></codeline>
<codeline lineno="12713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_config(_config),</highlight></codeline>
<codeline lineno="12714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter(std::move(reporter)),</highlight></codeline>
<codeline lineno="12715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_lastAssertionInfo{<sp/>StringRef(),<sp/>SourceLineInfo(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,0),<sp/>StringRef(),<sp/>ResultDisposition::Normal<sp/>},</highlight></codeline>
<codeline lineno="12716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_includeSuccessfulResults(<sp/>m_config-&gt;includeSuccessfulResults()<sp/>||<sp/>m_reporter-&gt;getPreferences().shouldReportAllAssertions<sp/>)</highlight></codeline>
<codeline lineno="12717"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="12718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_context.setRunner(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_context.setConfig(m_config);</highlight></codeline>
<codeline lineno="12720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_context.setResultCapture(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter-&gt;testRunStarting(m_runInfo);</highlight></codeline>
<codeline lineno="12722"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12723"><highlight class="normal"></highlight></codeline>
<codeline lineno="12724"><highlight class="normal"><sp/><sp/><sp/><sp/>RunContext::~RunContext()<sp/>{</highlight></codeline>
<codeline lineno="12725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter-&gt;testRunEnded(TestRunStats(m_runInfo,<sp/>m_totals,<sp/>aborting()));</highlight></codeline>
<codeline lineno="12726"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12727"><highlight class="normal"></highlight></codeline>
<codeline lineno="12728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunContext::testGroupStarting(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testSpec,<sp/>std::size_t<sp/>groupIndex,<sp/>std::size_t<sp/>groupsCount)<sp/>{</highlight></codeline>
<codeline lineno="12729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter-&gt;testGroupStarting(GroupInfo(testSpec,<sp/>groupIndex,<sp/>groupsCount));</highlight></codeline>
<codeline lineno="12730"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12731"><highlight class="normal"></highlight></codeline>
<codeline lineno="12732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunContext::testGroupEnded(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testSpec,<sp/>Totals<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>totals,<sp/>std::size_t<sp/>groupIndex,<sp/>std::size_t<sp/>groupsCount)<sp/>{</highlight></codeline>
<codeline lineno="12733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter-&gt;testGroupEnded(TestGroupStats(GroupInfo(testSpec,<sp/>groupIndex,<sp/>groupsCount),<sp/>totals,<sp/>aborting()));</highlight></codeline>
<codeline lineno="12734"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12735"><highlight class="normal"></highlight></codeline>
<codeline lineno="12736"><highlight class="normal"><sp/><sp/><sp/><sp/>Totals<sp/>RunContext::runTest(TestCase<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCase)<sp/>{</highlight></codeline>
<codeline lineno="12737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Totals<sp/>prevTotals<sp/>=<sp/>m_totals;</highlight></codeline>
<codeline lineno="12738"><highlight class="normal"></highlight></codeline>
<codeline lineno="12739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>redirectedCout;</highlight></codeline>
<codeline lineno="12740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>redirectedCerr;</highlight></codeline>
<codeline lineno="12741"><highlight class="normal"></highlight></codeline>
<codeline lineno="12742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testInfo<sp/>=<sp/>testCase.getTestCaseInfo();</highlight></codeline>
<codeline lineno="12743"><highlight class="normal"></highlight></codeline>
<codeline lineno="12744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter-&gt;testCaseStarting(testInfo);</highlight></codeline>
<codeline lineno="12745"><highlight class="normal"></highlight></codeline>
<codeline lineno="12746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_activeTestCase<sp/>=<sp/>&amp;testCase;</highlight></codeline>
<codeline lineno="12747"><highlight class="normal"></highlight></codeline>
<codeline lineno="12748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ITracker&amp;<sp/>rootTracker<sp/>=<sp/>m_trackerContext.startRun();</highlight></codeline>
<codeline lineno="12749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(rootTracker.isSectionTracker());</highlight></codeline>
<codeline lineno="12750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">SectionTracker&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rootTracker).addInitialFilters(m_config-&gt;getSectionsToRun());</highlight></codeline>
<codeline lineno="12751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="12752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_trackerContext.startCycle();</highlight></codeline>
<codeline lineno="12753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_testCaseTracker<sp/>=<sp/>&amp;SectionTracker::acquire(m_trackerContext,<sp/>TestCaseTracking::NameAndLocation(testInfo.name,<sp/>testInfo.lineInfo));</highlight></codeline>
<codeline lineno="12754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>runCurrentTest(redirectedCout,<sp/>redirectedCerr);</highlight></codeline>
<codeline lineno="12755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!m_testCaseTracker-&gt;isSuccessfullyCompleted()<sp/>&amp;&amp;<sp/>!aborting());</highlight></codeline>
<codeline lineno="12756"><highlight class="normal"></highlight></codeline>
<codeline lineno="12757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Totals<sp/>deltaTotals<sp/>=<sp/>m_totals.delta(prevTotals);</highlight></codeline>
<codeline lineno="12758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(testInfo.expectedToFail()<sp/>&amp;&amp;<sp/>deltaTotals.testCases.passed<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="12759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltaTotals.assertions.failed++;</highlight></codeline>
<codeline lineno="12760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltaTotals.testCases.passed--;</highlight></codeline>
<codeline lineno="12761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltaTotals.testCases.failed++;</highlight></codeline>
<codeline lineno="12762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_totals.testCases<sp/>+=<sp/>deltaTotals.testCases;</highlight></codeline>
<codeline lineno="12764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter-&gt;testCaseEnded(TestCaseStats(testInfo,</highlight></codeline>
<codeline lineno="12765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltaTotals,</highlight></codeline>
<codeline lineno="12766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>redirectedCout,</highlight></codeline>
<codeline lineno="12767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>redirectedCerr,</highlight></codeline>
<codeline lineno="12768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aborting()));</highlight></codeline>
<codeline lineno="12769"><highlight class="normal"></highlight></codeline>
<codeline lineno="12770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_activeTestCase<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_testCaseTracker<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12772"><highlight class="normal"></highlight></codeline>
<codeline lineno="12773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>deltaTotals;</highlight></codeline>
<codeline lineno="12774"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12775"><highlight class="normal"></highlight></codeline>
<codeline lineno="12776"><highlight class="normal"><sp/><sp/><sp/><sp/>IConfigPtr<sp/>RunContext::config()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="12777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_config;</highlight></codeline>
<codeline lineno="12778"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12779"><highlight class="normal"></highlight></codeline>
<codeline lineno="12780"><highlight class="normal"><sp/><sp/><sp/><sp/>IStreamingReporter&amp;<sp/>RunContext::reporter()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="12781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*m_reporter;</highlight></codeline>
<codeline lineno="12782"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12783"><highlight class="normal"></highlight></codeline>
<codeline lineno="12784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunContext::assertionEnded(AssertionResult<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="structresult" kindref="compound">result</ref>)<sp/>{</highlight></codeline>
<codeline lineno="12785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structresult" kindref="compound">result</ref>.getResultType()<sp/>==<sp/>ResultWas::Ok)<sp/>{</highlight></codeline>
<codeline lineno="12786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_totals.assertions.passed++;</highlight></codeline>
<codeline lineno="12787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_lastAssertionPassed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="structresult" kindref="compound">result</ref>.isOk())<sp/>{</highlight></codeline>
<codeline lineno="12789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_lastAssertionPassed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_activeTestCase-&gt;getTestCaseInfo().okToFail()<sp/>)</highlight></codeline>
<codeline lineno="12791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_totals.assertions.failedButOk++;</highlight></codeline>
<codeline lineno="12792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_totals.assertions.failed++;</highlight></codeline>
<codeline lineno="12794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="12796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_lastAssertionPassed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12798"><highlight class="normal"></highlight></codeline>
<codeline lineno="12799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>no<sp/>use<sp/>for<sp/>the<sp/>return<sp/>value<sp/>(whether<sp/>messages<sp/>should<sp/>be<sp/>cleared),<sp/>because<sp/>messages<sp/>were<sp/>made<sp/>scoped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>should<sp/>be<sp/>let<sp/>to<sp/>clear<sp/>themselves<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_reporter-&gt;assertionEnded(AssertionStats(<ref refid="structresult" kindref="compound">result</ref>,<sp/>m_messages,<sp/>m_totals)));</highlight></codeline>
<codeline lineno="12802"><highlight class="normal"></highlight></codeline>
<codeline lineno="12803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structresult" kindref="compound">result</ref>.getResultType()<sp/>!=<sp/>ResultWas::Warning)</highlight></codeline>
<codeline lineno="12804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_messageScopes.clear();</highlight></codeline>
<codeline lineno="12805"><highlight class="normal"></highlight></codeline>
<codeline lineno="12806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>working<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resetAssertionInfo();</highlight></codeline>
<codeline lineno="12808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_lastResult<sp/>=<sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="12809"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunContext::resetAssertionInfo()<sp/>{</highlight></codeline>
<codeline lineno="12811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_lastAssertionInfo.macroName<sp/>=<sp/>StringRef();</highlight></codeline>
<codeline lineno="12812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_lastAssertionInfo.capturedExpression<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{Unknown<sp/>expression<sp/>after<sp/>the<sp/>reported<sp/>line}&quot;</highlight><highlight class="normal">_sr;</highlight></codeline>
<codeline lineno="12813"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12814"><highlight class="normal"></highlight></codeline>
<codeline lineno="12815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>RunContext::sectionStarted(SectionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>sectionInfo,<sp/>Counts<sp/>&amp;<sp/>assertions)<sp/>{</highlight></codeline>
<codeline lineno="12816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ITracker&amp;<sp/>sectionTracker<sp/>=<sp/>SectionTracker::acquire(m_trackerContext,<sp/>TestCaseTracking::NameAndLocation(sectionInfo.name,<sp/>sectionInfo.lineInfo));</highlight></codeline>
<codeline lineno="12817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!sectionTracker.isOpen())</highlight></codeline>
<codeline lineno="12818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_activeSections.push_back(&amp;sectionTracker);</highlight></codeline>
<codeline lineno="12820"><highlight class="normal"></highlight></codeline>
<codeline lineno="12821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_lastAssertionInfo.lineInfo<sp/>=<sp/>sectionInfo.lineInfo;</highlight></codeline>
<codeline lineno="12822"><highlight class="normal"></highlight></codeline>
<codeline lineno="12823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter-&gt;sectionStarting(sectionInfo);</highlight></codeline>
<codeline lineno="12824"><highlight class="normal"></highlight></codeline>
<codeline lineno="12825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assertions<sp/>=<sp/>m_totals.assertions;</highlight></codeline>
<codeline lineno="12826"><highlight class="normal"></highlight></codeline>
<codeline lineno="12827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12828"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>RunContext::acquireGeneratorTracker(<sp/>StringRef<sp/>generatorName,<sp/>SourceLineInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lineInfo<sp/>)<sp/>-&gt;<sp/>IGeneratorTracker&amp;<sp/>{</highlight></codeline>
<codeline lineno="12830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Generators;</highlight></codeline>
<codeline lineno="12831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GeneratorTracker&amp;<sp/>tracker<sp/>=<sp/>GeneratorTracker::acquire(m_trackerContext,</highlight></codeline>
<codeline lineno="12832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestCaseTracking::NameAndLocation(<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::string</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(generatorName),<sp/>lineInfo<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="12833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_lastAssertionInfo.lineInfo<sp/>=<sp/>lineInfo;</highlight></codeline>
<codeline lineno="12834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tracker;</highlight></codeline>
<codeline lineno="12835"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12836"><highlight class="normal"></highlight></codeline>
<codeline lineno="12837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>RunContext::testForMissingAssertions(Counts&amp;<sp/>assertions)<sp/>{</highlight></codeline>
<codeline lineno="12838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(assertions.total()<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="12839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_config-&gt;warnAboutMissingAssertions())</highlight></codeline>
<codeline lineno="12841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_trackerContext.currentTracker().hasChildren())</highlight></codeline>
<codeline lineno="12843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_totals.assertions.failed++;</highlight></codeline>
<codeline lineno="12845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assertions.failed++;</highlight></codeline>
<codeline lineno="12846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12847"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12848"><highlight class="normal"></highlight></codeline>
<codeline lineno="12849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunContext::sectionEnded(SectionEndInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>endInfo)<sp/>{</highlight></codeline>
<codeline lineno="12850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Counts<sp/>assertions<sp/>=<sp/>m_totals.assertions<sp/>-<sp/>endInfo.prevAssertions;</highlight></codeline>
<codeline lineno="12851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>missingAssertions<sp/>=<sp/>testForMissingAssertions(assertions);</highlight></codeline>
<codeline lineno="12852"><highlight class="normal"></highlight></codeline>
<codeline lineno="12853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_activeSections.empty())<sp/>{</highlight></codeline>
<codeline lineno="12854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_activeSections.back()-&gt;close();</highlight></codeline>
<codeline lineno="12855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_activeSections.pop_back();</highlight></codeline>
<codeline lineno="12856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12857"><highlight class="normal"></highlight></codeline>
<codeline lineno="12858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter-&gt;sectionEnded(SectionStats(endInfo.sectionInfo,<sp/>assertions,<sp/>endInfo.durationInSeconds,<sp/>missingAssertions));</highlight></codeline>
<codeline lineno="12859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_messages.clear();</highlight></codeline>
<codeline lineno="12860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_messageScopes.clear();</highlight></codeline>
<codeline lineno="12861"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12862"><highlight class="normal"></highlight></codeline>
<codeline lineno="12863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunContext::sectionEndedEarly(SectionEndInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>endInfo)<sp/>{</highlight></codeline>
<codeline lineno="12864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_unfinishedSections.empty())</highlight></codeline>
<codeline lineno="12865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_activeSections.back()-&gt;fail();</highlight></codeline>
<codeline lineno="12866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_activeSections.back()-&gt;close();</highlight></codeline>
<codeline lineno="12868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_activeSections.pop_back();</highlight></codeline>
<codeline lineno="12869"><highlight class="normal"></highlight></codeline>
<codeline lineno="12870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_unfinishedSections.push_back(endInfo);</highlight></codeline>
<codeline lineno="12871"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12872"><highlight class="normal"></highlight></codeline>
<codeline lineno="12873"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_ENABLE_BENCHMARKING)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunContext::benchmarkPreparing(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="12875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter-&gt;benchmarkPreparing(name);</highlight></codeline>
<codeline lineno="12876"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunContext::benchmarkStarting(<sp/>BenchmarkInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="12878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter-&gt;benchmarkStarting(<sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>);</highlight></codeline>
<codeline lineno="12879"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunContext::benchmarkEnded(<sp/>BenchmarkStats&lt;&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>stats<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="12881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter-&gt;benchmarkEnded(<sp/>stats<sp/>);</highlight></codeline>
<codeline lineno="12882"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunContext::benchmarkFailed(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>error)<sp/>{</highlight></codeline>
<codeline lineno="12884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter-&gt;benchmarkFailed(error);</highlight></codeline>
<codeline lineno="12885"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12886"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_ENABLE_BENCHMARKING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12887"><highlight class="normal"></highlight></codeline>
<codeline lineno="12888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunContext::pushScopedMessage(MessageInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="12889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_messages.push_back(message);</highlight></codeline>
<codeline lineno="12890"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12891"><highlight class="normal"></highlight></codeline>
<codeline lineno="12892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunContext::popScopedMessage(MessageInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="12893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_messages.erase(std::remove(m_messages.begin(),<sp/>m_messages.end(),<sp/>message),<sp/>m_messages.end());</highlight></codeline>
<codeline lineno="12894"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12895"><highlight class="normal"></highlight></codeline>
<codeline lineno="12896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunContext::emplaceUnscopedMessage(<sp/>MessageBuilder<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>builder<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="12897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_messageScopes.emplace_back(<sp/>builder<sp/>);</highlight></codeline>
<codeline lineno="12898"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12899"><highlight class="normal"></highlight></codeline>
<codeline lineno="12900"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>RunContext::getCurrentTestName()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="12901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_activeTestCase</highlight></codeline>
<codeline lineno="12902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>m_activeTestCase-&gt;getTestCaseInfo().name</highlight></codeline>
<codeline lineno="12903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>std::string();</highlight></codeline>
<codeline lineno="12904"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12905"><highlight class="normal"></highlight></codeline>
<codeline lineno="12906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>AssertionResult<sp/>*<sp/>RunContext::getLastResult()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="12907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;(*m_lastResult);</highlight></codeline>
<codeline lineno="12908"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12909"><highlight class="normal"></highlight></codeline>
<codeline lineno="12910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunContext::exceptionEarlyReported()<sp/>{</highlight></codeline>
<codeline lineno="12911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_shouldReportUnexpected<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12912"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12913"><highlight class="normal"></highlight></codeline>
<codeline lineno="12914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunContext::handleFatalErrorCondition(<sp/>StringRef<sp/>message<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="12915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>notify<sp/>reporter<sp/>that<sp/>bad<sp/>things<sp/>happened</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter-&gt;fatalErrorEncountered(message);</highlight></codeline>
<codeline lineno="12917"><highlight class="normal"></highlight></codeline>
<codeline lineno="12918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>rebuild<sp/>the<sp/>result<sp/>--<sp/>the<sp/>stringification<sp/>itself<sp/>can<sp/>cause<sp/>more<sp/>fatal<sp/>errors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Instead,<sp/>fake<sp/>a<sp/>result<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionResultData<sp/>tempResult(<sp/>ResultWas::FatalErrorCondition,<sp/>{<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>}<sp/>);</highlight></codeline>
<codeline lineno="12921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempResult.message<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::string</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(message);</highlight></codeline>
<codeline lineno="12922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionResult<sp/><ref refid="structresult" kindref="compound">result</ref>(m_lastAssertionInfo,<sp/>tempResult);</highlight></codeline>
<codeline lineno="12923"><highlight class="normal"></highlight></codeline>
<codeline lineno="12924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assertionEnded(<ref refid="structresult" kindref="compound">result</ref>);</highlight></codeline>
<codeline lineno="12925"><highlight class="normal"></highlight></codeline>
<codeline lineno="12926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handleUnfinishedSections();</highlight></codeline>
<codeline lineno="12927"><highlight class="normal"></highlight></codeline>
<codeline lineno="12928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recreate<sp/>section<sp/>for<sp/>test<sp/>case<sp/>(as<sp/>we<sp/>will<sp/>lose<sp/>the<sp/>one<sp/>that<sp/>was<sp/>in<sp/>scope)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCaseInfo<sp/>=<sp/>m_activeTestCase-&gt;getTestCaseInfo();</highlight></codeline>
<codeline lineno="12930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SectionInfo<sp/>testCaseSection(testCaseInfo.lineInfo,<sp/>testCaseInfo.name);</highlight></codeline>
<codeline lineno="12931"><highlight class="normal"></highlight></codeline>
<codeline lineno="12932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Counts<sp/>assertions;</highlight></codeline>
<codeline lineno="12933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assertions.failed<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="12934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SectionStats<sp/>testCaseSectionStats(testCaseSection,<sp/>assertions,<sp/>0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="12935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter-&gt;sectionEnded(testCaseSectionStats);</highlight></codeline>
<codeline lineno="12936"><highlight class="normal"></highlight></codeline>
<codeline lineno="12937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testInfo<sp/>=<sp/>m_activeTestCase-&gt;getTestCaseInfo();</highlight></codeline>
<codeline lineno="12938"><highlight class="normal"></highlight></codeline>
<codeline lineno="12939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Totals<sp/>deltaTotals;</highlight></codeline>
<codeline lineno="12940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltaTotals.testCases.failed<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="12941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltaTotals.assertions.failed<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="12942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter-&gt;testCaseEnded(TestCaseStats(testInfo,</highlight></codeline>
<codeline lineno="12943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deltaTotals,</highlight></codeline>
<codeline lineno="12944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string(),</highlight></codeline>
<codeline lineno="12945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string(),</highlight></codeline>
<codeline lineno="12946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="12947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_totals.testCases.failed++;</highlight></codeline>
<codeline lineno="12948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testGroupEnded(std::string(),<sp/>m_totals,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="12949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter-&gt;testRunEnded(TestRunStats(m_runInfo,<sp/>m_totals,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="12950"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12951"><highlight class="normal"></highlight></codeline>
<codeline lineno="12952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>RunContext::lastAssertionPassed()<sp/>{</highlight></codeline>
<codeline lineno="12953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_lastAssertionPassed;</highlight></codeline>
<codeline lineno="12954"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12955"><highlight class="normal"></highlight></codeline>
<codeline lineno="12956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunContext::assertionPassed()<sp/>{</highlight></codeline>
<codeline lineno="12957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_lastAssertionPassed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++m_totals.assertions.passed;</highlight></codeline>
<codeline lineno="12959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resetAssertionInfo();</highlight></codeline>
<codeline lineno="12960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_messageScopes.clear();</highlight></codeline>
<codeline lineno="12961"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12962"><highlight class="normal"></highlight></codeline>
<codeline lineno="12963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>RunContext::aborting()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="12964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_totals.assertions.failed<sp/>&gt;=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_config-&gt;abortAfter());</highlight></codeline>
<codeline lineno="12965"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12966"><highlight class="normal"></highlight></codeline>
<codeline lineno="12967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunContext::runCurrentTest(std::string<sp/>&amp;<sp/>redirectedCout,<sp/>std::string<sp/>&amp;<sp/>redirectedCerr)<sp/>{</highlight></codeline>
<codeline lineno="12968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCaseInfo<sp/>=<sp/>m_activeTestCase-&gt;getTestCaseInfo();</highlight></codeline>
<codeline lineno="12969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SectionInfo<sp/>testCaseSection(testCaseInfo.lineInfo,<sp/>testCaseInfo.name);</highlight></codeline>
<codeline lineno="12970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter-&gt;sectionStarting(testCaseSection);</highlight></codeline>
<codeline lineno="12971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Counts<sp/>prevAssertions<sp/>=<sp/>m_totals.assertions;</highlight></codeline>
<codeline lineno="12972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>duration<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="12973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_shouldReportUnexpected<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_lastAssertionInfo<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;TEST_CASE&quot;</highlight><highlight class="normal">_sr,<sp/>testCaseInfo.lineInfo,<sp/>StringRef(),<sp/>ResultDisposition::Normal<sp/>};</highlight></codeline>
<codeline lineno="12975"><highlight class="normal"></highlight></codeline>
<codeline lineno="12976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seedRng(*m_config);</highlight></codeline>
<codeline lineno="12977"><highlight class="normal"></highlight></codeline>
<codeline lineno="12978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_timer" kindref="compound">Timer</ref><sp/>timer;</highlight></codeline>
<codeline lineno="12979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_TRY<sp/>{</highlight></codeline>
<codeline lineno="12980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_reporter-&gt;getPreferences().shouldRedirectStdOut)<sp/>{</highlight></codeline>
<codeline lineno="12981"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_CONFIG_EXPERIMENTAL_REDIRECT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RedirectedStreams<sp/>redirectedStreams(redirectedCout,<sp/>redirectedCerr);</highlight></codeline>
<codeline lineno="12983"><highlight class="normal"></highlight></codeline>
<codeline lineno="12984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer.start();</highlight></codeline>
<codeline lineno="12985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invokeActiveTestCase();</highlight></codeline>
<codeline lineno="12986"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutputRedirect<sp/>r(redirectedCout,<sp/>redirectedCerr);</highlight></codeline>
<codeline lineno="12988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer.start();</highlight></codeline>
<codeline lineno="12989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invokeActiveTestCase();</highlight></codeline>
<codeline lineno="12990"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="12992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timer.start();</highlight></codeline>
<codeline lineno="12993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invokeActiveTestCase();</highlight></codeline>
<codeline lineno="12994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>duration<sp/>=<sp/>timer.getElapsedSeconds();</highlight></codeline>
<codeline lineno="12996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>CATCH_CATCH_ANON<sp/>(TestFailureException&amp;)<sp/>{</highlight></codeline>
<codeline lineno="12997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>just<sp/>means<sp/>the<sp/>test<sp/>was<sp/>aborted<sp/>due<sp/>to<sp/>failure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>CATCH_CATCH_ALL<sp/>{</highlight></codeline>
<codeline lineno="12999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Under<sp/>CATCH_CONFIG_FAST_COMPILE,<sp/>unexpected<sp/>exceptions<sp/>under<sp/>REQUIRE<sp/>assertions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>reported<sp/>without<sp/>translation<sp/>at<sp/>the<sp/>point<sp/>of<sp/>origin.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_shouldReportUnexpected<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionReaction<sp/>dummyReaction;</highlight></codeline>
<codeline lineno="13003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handleUnexpectedInflightException(<sp/>m_lastAssertionInfo,<sp/>translateActiveException(),<sp/>dummyReaction<sp/>);</highlight></codeline>
<codeline lineno="13004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Counts<sp/>assertions<sp/>=<sp/>m_totals.assertions<sp/>-<sp/>prevAssertions;</highlight></codeline>
<codeline lineno="13007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>missingAssertions<sp/>=<sp/>testForMissingAssertions(assertions);</highlight></codeline>
<codeline lineno="13008"><highlight class="normal"></highlight></codeline>
<codeline lineno="13009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_testCaseTracker-&gt;close();</highlight></codeline>
<codeline lineno="13010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handleUnfinishedSections();</highlight></codeline>
<codeline lineno="13011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_messages.clear();</highlight></codeline>
<codeline lineno="13012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_messageScopes.clear();</highlight></codeline>
<codeline lineno="13013"><highlight class="normal"></highlight></codeline>
<codeline lineno="13014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SectionStats<sp/>testCaseSectionStats(testCaseSection,<sp/>assertions,<sp/>duration,<sp/>missingAssertions);</highlight></codeline>
<codeline lineno="13015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter-&gt;sectionEnded(testCaseSectionStats);</highlight></codeline>
<codeline lineno="13016"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13017"><highlight class="normal"></highlight></codeline>
<codeline lineno="13018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunContext::invokeActiveTestCase()<sp/>{</highlight></codeline>
<codeline lineno="13019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FatalConditionHandlerGuard<sp/>_(&amp;m_fatalConditionhandler);</highlight></codeline>
<codeline lineno="13020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_activeTestCase-&gt;invoke();</highlight></codeline>
<codeline lineno="13021"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13022"><highlight class="normal"></highlight></codeline>
<codeline lineno="13023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunContext::handleUnfinishedSections()<sp/>{</highlight></codeline>
<codeline lineno="13024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>sections<sp/>ended<sp/>prematurely<sp/>due<sp/>to<sp/>an<sp/>exception<sp/>we<sp/>stored<sp/>their</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>infos<sp/>here<sp/>so<sp/>we<sp/>can<sp/>tear<sp/>them<sp/>down<sp/>outside<sp/>the<sp/>unwind<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>m_unfinishedSections.rbegin(),</highlight></codeline>
<codeline lineno="13027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itEnd<sp/>=<sp/>m_unfinishedSections.rend();</highlight></codeline>
<codeline lineno="13028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>itEnd;</highlight></codeline>
<codeline lineno="13029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++it)</highlight></codeline>
<codeline lineno="13030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sectionEnded(*it);</highlight></codeline>
<codeline lineno="13031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_unfinishedSections.clear();</highlight></codeline>
<codeline lineno="13032"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13033"><highlight class="normal"></highlight></codeline>
<codeline lineno="13034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunContext::handleExpr(</highlight></codeline>
<codeline lineno="13035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structinfo" kindref="compound">info</ref>,</highlight></codeline>
<codeline lineno="13036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ITransientExpression<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>expr,</highlight></codeline>
<codeline lineno="13037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionReaction&amp;<sp/>reaction</highlight></codeline>
<codeline lineno="13038"><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter-&gt;assertionStarting(<sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>);</highlight></codeline>
<codeline lineno="13040"><highlight class="normal"></highlight></codeline>
<codeline lineno="13041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>negated<sp/>=<sp/>isFalseTest(<sp/><ref refid="structinfo" kindref="compound">info</ref>.resultDisposition<sp/>);</highlight></codeline>
<codeline lineno="13042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>expr.getResult()<sp/>!=<sp/>negated;</highlight></codeline>
<codeline lineno="13043"><highlight class="normal"></highlight></codeline>
<codeline lineno="13044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="structresult" kindref="compound">result</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_includeSuccessfulResults)<sp/>{</highlight></codeline>
<codeline lineno="13046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assertionPassed();</highlight></codeline>
<codeline lineno="13047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="13049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reportExpr(<ref refid="structinfo" kindref="compound">info</ref>,<sp/>ResultWas::Ok,<sp/>&amp;expr,<sp/>negated);</highlight></codeline>
<codeline lineno="13050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="13053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reportExpr(<ref refid="structinfo" kindref="compound">info</ref>,<sp/>ResultWas::ExpressionFailed,<sp/>&amp;expr,<sp/>negated<sp/>);</highlight></codeline>
<codeline lineno="13054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>populateReaction(<sp/>reaction<sp/>);</highlight></codeline>
<codeline lineno="13055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13056"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunContext::reportExpr(</highlight></codeline>
<codeline lineno="13058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<ref refid="structinfo" kindref="compound">info</ref>,</highlight></codeline>
<codeline lineno="13059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultWas::OfType<sp/>resultType,</highlight></codeline>
<codeline lineno="13060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ITransientExpression<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*expr,</highlight></codeline>
<codeline lineno="13061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>negated<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13062"><highlight class="normal"></highlight></codeline>
<codeline lineno="13063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_lastAssertionInfo<sp/>=<sp/><ref refid="structinfo" kindref="compound">info</ref>;</highlight></codeline>
<codeline lineno="13064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionResultData<sp/>data(<sp/>resultType,<sp/>LazyExpression(<sp/>negated<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="13065"><highlight class="normal"></highlight></codeline>
<codeline lineno="13066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionResult<sp/>assertionResult{<sp/><ref refid="structinfo" kindref="compound">info</ref>,<sp/>data<sp/>};</highlight></codeline>
<codeline lineno="13067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assertionResult.m_resultData.lazyExpression.m_transientExpression<sp/>=<sp/>expr;</highlight></codeline>
<codeline lineno="13068"><highlight class="normal"></highlight></codeline>
<codeline lineno="13069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assertionEnded(<sp/>assertionResult<sp/>);</highlight></codeline>
<codeline lineno="13070"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13071"><highlight class="normal"></highlight></codeline>
<codeline lineno="13072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunContext::handleMessage(</highlight></codeline>
<codeline lineno="13073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structinfo" kindref="compound">info</ref>,</highlight></codeline>
<codeline lineno="13074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultWas::OfType<sp/>resultType,</highlight></codeline>
<codeline lineno="13075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringRef<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>message,</highlight></codeline>
<codeline lineno="13076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionReaction&amp;<sp/>reaction</highlight></codeline>
<codeline lineno="13077"><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter-&gt;assertionStarting(<sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>);</highlight></codeline>
<codeline lineno="13079"><highlight class="normal"></highlight></codeline>
<codeline lineno="13080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_lastAssertionInfo<sp/>=<sp/><ref refid="structinfo" kindref="compound">info</ref>;</highlight></codeline>
<codeline lineno="13081"><highlight class="normal"></highlight></codeline>
<codeline lineno="13082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionResultData<sp/>data(<sp/>resultType,<sp/>LazyExpression(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="13083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data.message<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::string</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(message);</highlight></codeline>
<codeline lineno="13084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionResult<sp/>assertionResult{<sp/>m_lastAssertionInfo,<sp/>data<sp/>};</highlight></codeline>
<codeline lineno="13085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assertionEnded(<sp/>assertionResult<sp/>);</highlight></codeline>
<codeline lineno="13086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!assertionResult.isOk()<sp/>)</highlight></codeline>
<codeline lineno="13087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>populateReaction(<sp/>reaction<sp/>);</highlight></codeline>
<codeline lineno="13088"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunContext::handleUnexpectedExceptionNotThrown(</highlight></codeline>
<codeline lineno="13090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structinfo" kindref="compound">info</ref>,</highlight></codeline>
<codeline lineno="13091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionReaction&amp;<sp/>reaction</highlight></codeline>
<codeline lineno="13092"><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handleNonExpr(<ref refid="structinfo" kindref="compound">info</ref>,<sp/>Catch::ResultWas::DidntThrowException,<sp/>reaction);</highlight></codeline>
<codeline lineno="13094"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13095"><highlight class="normal"></highlight></codeline>
<codeline lineno="13096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunContext::handleUnexpectedInflightException(</highlight></codeline>
<codeline lineno="13097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structinfo" kindref="compound">info</ref>,</highlight></codeline>
<codeline lineno="13098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>message,</highlight></codeline>
<codeline lineno="13099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionReaction&amp;<sp/>reaction</highlight></codeline>
<codeline lineno="13100"><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_lastAssertionInfo<sp/>=<sp/><ref refid="structinfo" kindref="compound">info</ref>;</highlight></codeline>
<codeline lineno="13102"><highlight class="normal"></highlight></codeline>
<codeline lineno="13103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionResultData<sp/>data(<sp/>ResultWas::ThrewException,<sp/>LazyExpression(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="13104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data.message<sp/>=<sp/>message;</highlight></codeline>
<codeline lineno="13105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionResult<sp/>assertionResult{<sp/><ref refid="structinfo" kindref="compound">info</ref>,<sp/>data<sp/>};</highlight></codeline>
<codeline lineno="13106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assertionEnded(<sp/>assertionResult<sp/>);</highlight></codeline>
<codeline lineno="13107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>populateReaction(<sp/>reaction<sp/>);</highlight></codeline>
<codeline lineno="13108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13109"><highlight class="normal"></highlight></codeline>
<codeline lineno="13110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunContext::populateReaction(<sp/>AssertionReaction&amp;<sp/>reaction<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reaction.shouldDebugBreak<sp/>=<sp/>m_config-&gt;shouldDebugBreak();</highlight></codeline>
<codeline lineno="13112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reaction.shouldThrow<sp/>=<sp/>aborting()<sp/>||<sp/>(m_lastAssertionInfo.resultDisposition<sp/>&amp;<sp/>ResultDisposition::Normal);</highlight></codeline>
<codeline lineno="13113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13114"><highlight class="normal"></highlight></codeline>
<codeline lineno="13115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunContext::handleIncomplete(</highlight></codeline>
<codeline lineno="13116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structinfo" kindref="compound">info</ref></highlight></codeline>
<codeline lineno="13117"><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_lastAssertionInfo<sp/>=<sp/><ref refid="structinfo" kindref="compound">info</ref>;</highlight></codeline>
<codeline lineno="13119"><highlight class="normal"></highlight></codeline>
<codeline lineno="13120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionResultData<sp/>data(<sp/>ResultWas::ThrewException,<sp/>LazyExpression(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="13121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data.message<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Exception<sp/>translation<sp/>was<sp/>disabled<sp/>by<sp/>CATCH_CONFIG_FAST_COMPILE&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionResult<sp/>assertionResult{<sp/><ref refid="structinfo" kindref="compound">info</ref>,<sp/>data<sp/>};</highlight></codeline>
<codeline lineno="13123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assertionEnded(<sp/>assertionResult<sp/>);</highlight></codeline>
<codeline lineno="13124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunContext::handleNonExpr(</highlight></codeline>
<codeline lineno="13126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<ref refid="structinfo" kindref="compound">info</ref>,</highlight></codeline>
<codeline lineno="13127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultWas::OfType<sp/>resultType,</highlight></codeline>
<codeline lineno="13128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionReaction<sp/>&amp;reaction</highlight></codeline>
<codeline lineno="13129"><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_lastAssertionInfo<sp/>=<sp/><ref refid="structinfo" kindref="compound">info</ref>;</highlight></codeline>
<codeline lineno="13131"><highlight class="normal"></highlight></codeline>
<codeline lineno="13132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionResultData<sp/>data(<sp/>resultType,<sp/>LazyExpression(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="13133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionResult<sp/>assertionResult{<sp/><ref refid="structinfo" kindref="compound">info</ref>,<sp/>data<sp/>};</highlight></codeline>
<codeline lineno="13134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assertionEnded(<sp/>assertionResult<sp/>);</highlight></codeline>
<codeline lineno="13135"><highlight class="normal"></highlight></codeline>
<codeline lineno="13136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!assertionResult.isOk()<sp/>)</highlight></codeline>
<codeline lineno="13137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>populateReaction(<sp/>reaction<sp/>);</highlight></codeline>
<codeline lineno="13138"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13139"><highlight class="normal"></highlight></codeline>
<codeline lineno="13140"><highlight class="normal"><sp/><sp/><sp/><sp/>IResultCapture&amp;<sp/>getResultCapture()<sp/>{</highlight></codeline>
<codeline lineno="13141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>capture<sp/>=<sp/>getCurrentContext().getResultCapture())</highlight></codeline>
<codeline lineno="13142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*capture;</highlight></codeline>
<codeline lineno="13143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_ERROR(</highlight><highlight class="stringliteral">&quot;No<sp/>result<sp/>capture<sp/>instance&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="13145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13146"><highlight class="normal"></highlight></codeline>
<codeline lineno="13147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>seedRng(IConfig<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config)<sp/>{</highlight></codeline>
<codeline lineno="13148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(config.rngSeed()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="13149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::srand(config.rngSeed());</highlight></codeline>
<codeline lineno="13150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rng().seed(config.rngSeed());</highlight></codeline>
<codeline lineno="13151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13153"><highlight class="normal"></highlight></codeline>
<codeline lineno="13154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rngSeed()<sp/>{</highlight></codeline>
<codeline lineno="13155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getCurrentContext().getConfig()-&gt;rngSeed();</highlight></codeline>
<codeline lineno="13156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13157"><highlight class="normal"></highlight></codeline>
<codeline lineno="13158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13159"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_run_context.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13160"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_section.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13161"><highlight class="normal"></highlight></codeline>
<codeline lineno="13162"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="13163"><highlight class="normal"></highlight></codeline>
<codeline lineno="13164"><highlight class="normal"><sp/><sp/><sp/><sp/>Section::Section(<sp/>SectionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>)</highlight></codeline>
<codeline lineno="13165"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>m_info(<sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>),</highlight></codeline>
<codeline lineno="13166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_sectionIncluded(<sp/>getResultCapture().sectionStarted(<sp/>m_info,<sp/>m_assertions<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="13167"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="13168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_timer.start();</highlight></codeline>
<codeline lineno="13169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13170"><highlight class="normal"></highlight></codeline>
<codeline lineno="13171"><highlight class="normal"><sp/><sp/><sp/><sp/>Section::~Section()<sp/>{</highlight></codeline>
<codeline lineno="13172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_sectionIncluded<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SectionEndInfo<sp/>endInfo{<sp/>m_info,<sp/>m_assertions,<sp/>m_timer.getElapsedSeconds()<sp/>};</highlight></codeline>
<codeline lineno="13174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>uncaught_exceptions()<sp/>)</highlight></codeline>
<codeline lineno="13175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getResultCapture().sectionEndedEarly(<sp/>endInfo<sp/>);</highlight></codeline>
<codeline lineno="13176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getResultCapture().sectionEnded(<sp/>endInfo<sp/>);</highlight></codeline>
<codeline lineno="13178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13180"><highlight class="normal"></highlight></codeline>
<codeline lineno="13181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>indicates<sp/>whether<sp/>the<sp/>section<sp/>should<sp/>be<sp/>executed<sp/>or<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13182"><highlight class="normal"><sp/><sp/><sp/><sp/>Section::operator<sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="13183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_sectionIncluded;</highlight></codeline>
<codeline lineno="13184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13185"><highlight class="normal"></highlight></codeline>
<codeline lineno="13186"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13187"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_section.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13188"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_section_info.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13189"><highlight class="normal"></highlight></codeline>
<codeline lineno="13190"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="13191"><highlight class="normal"></highlight></codeline>
<codeline lineno="13192"><highlight class="normal"><sp/><sp/><sp/><sp/>SectionInfo::SectionInfo</highlight></codeline>
<codeline lineno="13193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/><sp/><sp/>SourceLineInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_lineInfo,</highlight></codeline>
<codeline lineno="13194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_name<sp/>)</highlight></codeline>
<codeline lineno="13195"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>name(<sp/>_name<sp/>),</highlight></codeline>
<codeline lineno="13196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lineInfo(<sp/>_lineInfo<sp/>)</highlight></codeline>
<codeline lineno="13197"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="13198"><highlight class="normal"></highlight></codeline>
<codeline lineno="13199"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13200"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_section_info.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13201"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_session.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13202"><highlight class="normal"></highlight></codeline>
<codeline lineno="13203"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_session.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13204"><highlight class="normal"></highlight></codeline>
<codeline lineno="13205"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13206"><highlight class="normal"></highlight></codeline>
<codeline lineno="13207"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="13208"><highlight class="normal"></highlight></codeline>
<codeline lineno="13209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Session<sp/>:<sp/>NonCopyable<sp/>{</highlight></codeline>
<codeline lineno="13210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="13211"><highlight class="normal"></highlight></codeline>
<codeline lineno="13212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Session();</highlight></codeline>
<codeline lineno="13213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~Session()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13214"><highlight class="normal"></highlight></codeline>
<codeline lineno="13215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>showHelp()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>libIdentify();</highlight></codeline>
<codeline lineno="13217"><highlight class="normal"></highlight></codeline>
<codeline lineno="13218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>applyCommandLine(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>argv<sp/>);</highlight></codeline>
<codeline lineno="13219"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>defined(CATCH_CONFIG_WCHAR)<sp/>&amp;&amp;<sp/>defined(_WIN32)<sp/>&amp;&amp;<sp/>defined(UNICODE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>applyCommandLine(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>argv<sp/>);</highlight></codeline>
<codeline lineno="13221"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13222"><highlight class="normal"></highlight></codeline>
<codeline lineno="13223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>useConfigData(<sp/>ConfigData<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>configData<sp/>);</highlight></codeline>
<codeline lineno="13224"><highlight class="normal"></highlight></codeline>
<codeline lineno="13225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharT&gt;</highlight></codeline>
<codeline lineno="13226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>run(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/>CharT<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>argv[])<sp/>{</highlight></codeline>
<codeline lineno="13227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_startupExceptions)</highlight></codeline>
<codeline lineno="13228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="13229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>returnCode<sp/>=<sp/>applyCommandLine(argc,<sp/>argv);</highlight></codeline>
<codeline lineno="13230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(returnCode<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="13231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>returnCode<sp/>=<sp/>run();</highlight></codeline>
<codeline lineno="13232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>returnCode;</highlight></codeline>
<codeline lineno="13233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13234"><highlight class="normal"></highlight></codeline>
<codeline lineno="13235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>run();</highlight></codeline>
<codeline lineno="13236"><highlight class="normal"></highlight></codeline>
<codeline lineno="13237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clara::Parser<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>cli()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cli(<sp/>clara::Parser<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>newParser<sp/>);</highlight></codeline>
<codeline lineno="13239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ConfigData&amp;<sp/>configData();</highlight></codeline>
<codeline lineno="13240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Config&amp;<sp/>config();</highlight></codeline>
<codeline lineno="13241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="13242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>runInternal();</highlight></codeline>
<codeline lineno="13243"><highlight class="normal"></highlight></codeline>
<codeline lineno="13244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clara::Parser<sp/>m_cli;</highlight></codeline>
<codeline lineno="13245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ConfigData<sp/>m_configData;</highlight></codeline>
<codeline lineno="13246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Config&gt;<sp/>m_config;</highlight></codeline>
<codeline lineno="13247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_startupExceptions<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13248"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="13249"><highlight class="normal"></highlight></codeline>
<codeline lineno="13250"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13251"><highlight class="normal"></highlight></codeline>
<codeline lineno="13252"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_session.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13253"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_version.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13254"><highlight class="normal"></highlight></codeline>
<codeline lineno="13255"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iosfwd&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13256"><highlight class="normal"></highlight></codeline>
<codeline lineno="13257"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="13258"><highlight class="normal"></highlight></codeline>
<codeline lineno="13259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Versioning<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Version<sp/>{</highlight></codeline>
<codeline lineno="13261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Version(<sp/>Version<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Version&amp;<sp/>operator=(<sp/>Version<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Version(<sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_majorVersion,</highlight></codeline>
<codeline lineno="13264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_minorVersion,</highlight></codeline>
<codeline lineno="13265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_patchNumber,</highlight></codeline>
<codeline lineno="13266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>_branchName,</highlight></codeline>
<codeline lineno="13267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_buildNumber<sp/>);</highlight></codeline>
<codeline lineno="13268"><highlight class="normal"></highlight></codeline>
<codeline lineno="13269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>majorVersion;</highlight></codeline>
<codeline lineno="13270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>minorVersion;</highlight></codeline>
<codeline lineno="13271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>patchNumber;</highlight></codeline>
<codeline lineno="13272"><highlight class="normal"></highlight></codeline>
<codeline lineno="13273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>buildNumber<sp/>is<sp/>only<sp/>used<sp/>if<sp/>branchName<sp/>is<sp/>not<sp/>null</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>branchName;</highlight></codeline>
<codeline lineno="13275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>buildNumber;</highlight></codeline>
<codeline lineno="13276"><highlight class="normal"></highlight></codeline>
<codeline lineno="13277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>std::ostream&amp;<sp/>operator<sp/>&lt;&lt;<sp/>(<sp/>std::ostream&amp;<sp/>os,<sp/>Version<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>version<sp/>);</highlight></codeline>
<codeline lineno="13278"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="13279"><highlight class="normal"></highlight></codeline>
<codeline lineno="13280"><highlight class="normal"><sp/><sp/><sp/><sp/>Version<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>libraryVersion();</highlight></codeline>
<codeline lineno="13281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13282"><highlight class="normal"></highlight></codeline>
<codeline lineno="13283"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_version.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13284"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13285"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13286"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13287"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13288"><highlight class="normal"></highlight></codeline>
<codeline lineno="13289"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="13290"><highlight class="normal"></highlight></codeline>
<codeline lineno="13291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="13292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MaxExitCode<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="13293"><highlight class="normal"></highlight></codeline>
<codeline lineno="13294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IStreamingReporterPtr<sp/>createReporter(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>reporterName,<sp/>IConfigPtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config)<sp/>{</highlight></codeline>
<codeline lineno="13295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>reporter<sp/>=<sp/>Catch::getRegistryHub().getReporterRegistry().create(reporterName,<sp/>config);</highlight></codeline>
<codeline lineno="13296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_ENFORCE(reporter,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>reporter<sp/>registered<sp/>with<sp/>name:<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>reporterName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="13297"><highlight class="normal"></highlight></codeline>
<codeline lineno="13298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reporter;</highlight></codeline>
<codeline lineno="13299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13300"><highlight class="normal"></highlight></codeline>
<codeline lineno="13301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IStreamingReporterPtr<sp/>makeReporter(std::shared_ptr&lt;Config&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config)<sp/>{</highlight></codeline>
<codeline lineno="13302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Catch::getRegistryHub().getReporterRegistry().getListeners().empty())<sp/>{</highlight></codeline>
<codeline lineno="13303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>createReporter(config-&gt;getReporterName(),<sp/>config);</highlight></codeline>
<codeline lineno="13304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13305"><highlight class="normal"></highlight></codeline>
<codeline lineno="13306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>older<sp/>platforms,<sp/>returning<sp/>std::unique_ptr&lt;ListeningReporter&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>the<sp/>return<sp/>type<sp/>is<sp/>std::unique_ptr&lt;IStreamingReporter&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>doesn&apos;t<sp/>compile<sp/>without<sp/>a<sp/>std::move<sp/>call.<sp/>However,<sp/>this<sp/>causes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>warning<sp/>on<sp/>newer<sp/>platforms.<sp/>Thus,<sp/>we<sp/>have<sp/>to<sp/>work<sp/>around</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>a<sp/>bit<sp/>and<sp/>downcast<sp/>the<sp/>pointer<sp/>manually.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>std::unique_ptr&lt;IStreamingReporter&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ListeningReporter);</highlight></codeline>
<codeline lineno="13312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>multi<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">ListeningReporter&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*ret);</highlight></codeline>
<codeline lineno="13313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>listeners<sp/>=<sp/>Catch::getRegistryHub().getReporterRegistry().getListeners();</highlight></codeline>
<codeline lineno="13314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>listener<sp/>:<sp/>listeners)<sp/>{</highlight></codeline>
<codeline lineno="13315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multi.addListener(listener-&gt;create(Catch::ReporterConfig(config)));</highlight></codeline>
<codeline lineno="13316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multi.addReporter(createReporter(config-&gt;getReporterName(),<sp/>config));</highlight></codeline>
<codeline lineno="13318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="13319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13320"><highlight class="normal"></highlight></codeline>
<codeline lineno="13321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TestGroup<sp/>{</highlight></codeline>
<codeline lineno="13322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="13323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>TestGroup(std::shared_ptr&lt;Config&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config)</highlight></codeline>
<codeline lineno="13324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_config{config}</highlight></codeline>
<codeline lineno="13325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>m_context{config,<sp/>makeReporter(config)}</highlight></codeline>
<codeline lineno="13326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="13327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>allTestCases<sp/>=<sp/>getAllTestCasesSorted(*m_config);</highlight></codeline>
<codeline lineno="13328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_matches<sp/>=<sp/>m_config-&gt;testSpec().matchesByFilter(allTestCases,<sp/>*m_config);</highlight></codeline>
<codeline lineno="13329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>invalidArgs<sp/>=<sp/>m_config-&gt;testSpec().getInvalidArgs();</highlight></codeline>
<codeline lineno="13330"><highlight class="normal"></highlight></codeline>
<codeline lineno="13331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_matches.empty()<sp/>&amp;&amp;<sp/>invalidArgs.empty())<sp/>{</highlight></codeline>
<codeline lineno="13332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>test<sp/>:<sp/>allTestCases)</highlight></codeline>
<codeline lineno="13333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!test.isHidden())</highlight></codeline>
<codeline lineno="13334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_tests.emplace(&amp;test);</highlight></codeline>
<codeline lineno="13335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="13336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>match<sp/>:<sp/>m_matches)</highlight></codeline>
<codeline lineno="13337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_tests.insert(match.tests.begin(),<sp/>match.tests.end());</highlight></codeline>
<codeline lineno="13338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13340"><highlight class="normal"></highlight></codeline>
<codeline lineno="13341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Totals<sp/>execute()<sp/>{</highlight></codeline>
<codeline lineno="13342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>invalidArgs<sp/>=<sp/>m_config-&gt;testSpec().getInvalidArgs();</highlight></codeline>
<codeline lineno="13343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Totals<sp/>totals;</highlight></codeline>
<codeline lineno="13344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_context.testGroupStarting(m_config-&gt;name(),<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="13345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCase<sp/>:<sp/>m_tests)<sp/>{</highlight></codeline>
<codeline lineno="13346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_context.aborting())</highlight></codeline>
<codeline lineno="13347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totals<sp/>+=<sp/>m_context.runTest(*testCase);</highlight></codeline>
<codeline lineno="13348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_context.reporter().skipTest(*testCase);</highlight></codeline>
<codeline lineno="13350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13351"><highlight class="normal"></highlight></codeline>
<codeline lineno="13352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>match<sp/>:<sp/>m_matches)<sp/>{</highlight></codeline>
<codeline lineno="13353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(match.tests.empty())<sp/>{</highlight></codeline>
<codeline lineno="13354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_context.reporter().noMatchingTestCases(match.name);</highlight></codeline>
<codeline lineno="13355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totals.error<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="13356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13358"><highlight class="normal"></highlight></codeline>
<codeline lineno="13359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!invalidArgs.empty())<sp/>{</highlight></codeline>
<codeline lineno="13360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>invalidArg:<sp/>invalidArgs)</highlight></codeline>
<codeline lineno="13361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_context.reporter().reportInvalidArguments(invalidArg);</highlight></codeline>
<codeline lineno="13362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13363"><highlight class="normal"></highlight></codeline>
<codeline lineno="13364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_context.testGroupEnded(m_config-&gt;name(),<sp/>totals,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="13365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>totals;</highlight></codeline>
<codeline lineno="13366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13367"><highlight class="normal"></highlight></codeline>
<codeline lineno="13368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="13369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Tests<sp/>=<sp/>std::set&lt;TestCase<sp/>const*&gt;;</highlight></codeline>
<codeline lineno="13370"><highlight class="normal"></highlight></codeline>
<codeline lineno="13371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Config&gt;<sp/>m_config;</highlight></codeline>
<codeline lineno="13372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RunContext<sp/>m_context;</highlight></codeline>
<codeline lineno="13373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tests<sp/>m_tests;</highlight></codeline>
<codeline lineno="13374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestSpec::Matches<sp/>m_matches;</highlight></codeline>
<codeline lineno="13375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="13376"><highlight class="normal"></highlight></codeline>
<codeline lineno="13377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>applyFilenamesAsTags(<ref refid="struct_catch_1_1_i_config" kindref="compound">Catch::IConfig</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config)<sp/>{</highlight></codeline>
<codeline lineno="13378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>tests<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">std::vector&lt;TestCase&gt;&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(getAllTestCasesSorted(config));</highlight></codeline>
<codeline lineno="13379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>testCase<sp/>:<sp/>tests)<sp/>{</highlight></codeline>
<codeline lineno="13380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tags<sp/>=<sp/>testCase.tags;</highlight></codeline>
<codeline lineno="13381"><highlight class="normal"></highlight></codeline>
<codeline lineno="13382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>filename<sp/>=<sp/>testCase.lineInfo.file;</highlight></codeline>
<codeline lineno="13383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lastSlash<sp/>=<sp/>filename.find_last_of(</highlight><highlight class="stringliteral">&quot;\\/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="13384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lastSlash<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="13385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filename.erase(0,<sp/>lastSlash);</highlight></codeline>
<codeline lineno="13386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filename[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13388"><highlight class="normal"></highlight></codeline>
<codeline lineno="13389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lastDot<sp/>=<sp/>filename.find_last_of(</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="13390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lastDot<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="13391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filename.erase(lastDot);</highlight></codeline>
<codeline lineno="13392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13393"><highlight class="normal"></highlight></codeline>
<codeline lineno="13394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tags.push_back(std::move(filename));</highlight></codeline>
<codeline lineno="13395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setTags(testCase,<sp/>tags);</highlight></codeline>
<codeline lineno="13396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13398"><highlight class="normal"></highlight></codeline>
<codeline lineno="13399"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>anon<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13400"><highlight class="normal"></highlight></codeline>
<codeline lineno="13401"><highlight class="normal"><sp/><sp/><sp/><sp/>Session::Session()<sp/>{</highlight></codeline>
<codeline lineno="13402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>alreadyInstantiated<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>alreadyInstantiated<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_TRY<sp/>{<sp/>CATCH_INTERNAL_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;Only<sp/>one<sp/>instance<sp/>of<sp/>Catch::Session<sp/>can<sp/>ever<sp/>be<sp/>used&quot;</highlight><highlight class="normal"><sp/>);<sp/>}</highlight></codeline>
<codeline lineno="13405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_CATCH_ALL<sp/>{<sp/>getMutableRegistryHub().registerStartupException();<sp/>}</highlight></codeline>
<codeline lineno="13406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13407"><highlight class="normal"></highlight></codeline>
<codeline lineno="13408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>cannot<sp/>be<sp/>exceptions<sp/>at<sp/>startup<sp/>in<sp/>no-exception<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13409"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>exceptions<sp/>=<sp/>getRegistryHub().getStartupExceptionRegistry().getExceptions();</highlight></codeline>
<codeline lineno="13411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!exceptions.empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config();</highlight></codeline>
<codeline lineno="13413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getCurrentMutableContext().setConfig(m_config);</highlight></codeline>
<codeline lineno="13414"><highlight class="normal"></highlight></codeline>
<codeline lineno="13415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_startupExceptions<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Colour<sp/>colourGuard(<sp/>Colour::Red<sp/>);</highlight></codeline>
<codeline lineno="13417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::cerr()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Errors<sp/>occurred<sp/>during<sp/>startup!&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>iterate<sp/>over<sp/>all<sp/>exceptions<sp/>and<sp/>notify<sp/>user</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>ex_ptr<sp/>:<sp/>exceptions<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="13421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::rethrow_exception(ex_ptr);</highlight></codeline>
<codeline lineno="13422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(<sp/>std::exception<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>ex<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::cerr()<sp/>&lt;&lt;<sp/>Column(<sp/>ex.what()<sp/>).indent(2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13427"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13428"><highlight class="normal"></highlight></codeline>
<codeline lineno="13429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alreadyInstantiated<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_cli<sp/>=<sp/>makeCommandLineParser(<sp/>m_configData<sp/>);</highlight></codeline>
<codeline lineno="13431"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13432"><highlight class="normal"><sp/><sp/><sp/><sp/>Session::~Session()<sp/>{</highlight></codeline>
<codeline lineno="13433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::cleanUp();</highlight></codeline>
<codeline lineno="13434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13435"><highlight class="normal"></highlight></codeline>
<codeline lineno="13436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Session::showHelp()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="13437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::cout()</highlight></codeline>
<codeline lineno="13438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nCatch<sp/>v&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>libraryVersion()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>m_cli<sp/>&lt;&lt;<sp/>std::endl</highlight></codeline>
<codeline lineno="13440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;For<sp/>more<sp/>detailed<sp/>usage<sp/>please<sp/>see<sp/>the<sp/>project<sp/>docs\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="13441"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Session::libIdentify()<sp/>{</highlight></codeline>
<codeline lineno="13443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::cout()</highlight></codeline>
<codeline lineno="13444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::left<sp/>&lt;&lt;<sp/>std::setw(16)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;description:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;A<sp/>Catch2<sp/>test<sp/>executable\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::left<sp/>&lt;&lt;<sp/>std::setw(16)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;category:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;testframework\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::left<sp/>&lt;&lt;<sp/>std::setw(16)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;framework:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Catch<sp/>Test\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::left<sp/>&lt;&lt;<sp/>std::setw(16)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;version:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>libraryVersion()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="13448"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13449"><highlight class="normal"></highlight></codeline>
<codeline lineno="13450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Session::applyCommandLine(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>argv<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_startupExceptions<sp/>)</highlight></codeline>
<codeline lineno="13452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="13453"><highlight class="normal"></highlight></codeline>
<codeline lineno="13454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>m_cli.parse(<sp/>clara::Args(<sp/>argc,<sp/>argv<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="13455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<ref refid="structresult" kindref="compound">result</ref><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config();</highlight></codeline>
<codeline lineno="13457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getCurrentMutableContext().setConfig(m_config);</highlight></codeline>
<codeline lineno="13458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::cerr()</highlight></codeline>
<codeline lineno="13459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Colour(<sp/>Colour::Red<sp/>)</highlight></codeline>
<codeline lineno="13460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nError(s)<sp/>in<sp/>input:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Column(<sp/><ref refid="structresult" kindref="compound">result</ref>.errorMessage()<sp/>).indent(<sp/>2<sp/>)</highlight></codeline>
<codeline lineno="13462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::cerr()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Run<sp/>with<sp/>-?<sp/>for<sp/>usage\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="13464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MaxExitCode;</highlight></codeline>
<codeline lineno="13465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13466"><highlight class="normal"></highlight></codeline>
<codeline lineno="13467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_configData.showHelp<sp/>)</highlight></codeline>
<codeline lineno="13468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>showHelp();</highlight></codeline>
<codeline lineno="13469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_configData.libIdentify<sp/>)</highlight></codeline>
<codeline lineno="13470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>libIdentify();</highlight></codeline>
<codeline lineno="13471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_config.reset();</highlight></codeline>
<codeline lineno="13472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="13473"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13474"><highlight class="normal"></highlight></codeline>
<codeline lineno="13475"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_WCHAR)<sp/>&amp;&amp;<sp/>defined(_WIN32)<sp/>&amp;&amp;<sp/>defined(UNICODE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Session::applyCommandLine(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>argv<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13477"><highlight class="normal"></highlight></codeline>
<codeline lineno="13478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**utf8Argv<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*[<sp/>argc<sp/>];</highlight></codeline>
<codeline lineno="13479"><highlight class="normal"></highlight></codeline>
<codeline lineno="13480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>argc;<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bufSize<sp/>=<sp/>WideCharToMultiByte(<sp/>CP_UTF8,<sp/>0,<sp/>argv[i],<sp/>-1,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>0,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="13482"><highlight class="normal"></highlight></codeline>
<codeline lineno="13483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>utf8Argv[<sp/>i<sp/>]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[<sp/>bufSize<sp/>];</highlight></codeline>
<codeline lineno="13484"><highlight class="normal"></highlight></codeline>
<codeline lineno="13485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WideCharToMultiByte(<sp/>CP_UTF8,<sp/>0,<sp/>argv[i],<sp/>-1,<sp/>utf8Argv[i],<sp/>bufSize,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="13486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13487"><highlight class="normal"></highlight></codeline>
<codeline lineno="13488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>returnCode<sp/>=<sp/>applyCommandLine(<sp/>argc,<sp/>utf8Argv<sp/>);</highlight></codeline>
<codeline lineno="13489"><highlight class="normal"></highlight></codeline>
<codeline lineno="13490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>argc;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="13491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delete<sp/>[]<sp/>utf8Argv[<sp/>i<sp/>];</highlight></codeline>
<codeline lineno="13492"><highlight class="normal"></highlight></codeline>
<codeline lineno="13493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>utf8Argv;</highlight></codeline>
<codeline lineno="13494"><highlight class="normal"></highlight></codeline>
<codeline lineno="13495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>returnCode;</highlight></codeline>
<codeline lineno="13496"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13497"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13498"><highlight class="normal"></highlight></codeline>
<codeline lineno="13499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Session::useConfigData(<sp/>ConfigData<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>configData<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_configData<sp/>=<sp/>configData;</highlight></codeline>
<codeline lineno="13501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_config.reset();</highlight></codeline>
<codeline lineno="13502"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13503"><highlight class="normal"></highlight></codeline>
<codeline lineno="13504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Session::run()<sp/>{</highlight></codeline>
<codeline lineno="13505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>m_configData.waitForKeypress<sp/>&amp;<sp/>WaitForKeypress::BeforeStart<sp/>)<sp/>!=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::cout()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;...waiting<sp/>for<sp/>enter/<sp/>return<sp/>before<sp/>starting&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="13507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::getchar());</highlight></codeline>
<codeline lineno="13508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exitCode<sp/>=<sp/>runInternal();</highlight></codeline>
<codeline lineno="13510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>m_configData.waitForKeypress<sp/>&amp;<sp/>WaitForKeypress::BeforeExit<sp/>)<sp/>!=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::cout()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;...waiting<sp/>for<sp/>enter/<sp/>return<sp/>before<sp/>exiting,<sp/>with<sp/>code:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>exitCode<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="13512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::getchar());</highlight></codeline>
<codeline lineno="13513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>exitCode;</highlight></codeline>
<codeline lineno="13515"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13516"><highlight class="normal"></highlight></codeline>
<codeline lineno="13517"><highlight class="normal"><sp/><sp/><sp/><sp/>clara::Parser<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Session::cli()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="13518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_cli;</highlight></codeline>
<codeline lineno="13519"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Session::cli(<sp/>clara::Parser<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>newParser<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_cli<sp/>=<sp/>newParser;</highlight></codeline>
<codeline lineno="13522"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13523"><highlight class="normal"><sp/><sp/><sp/><sp/>ConfigData&amp;<sp/>Session::configData()<sp/>{</highlight></codeline>
<codeline lineno="13524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_configData;</highlight></codeline>
<codeline lineno="13525"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13526"><highlight class="normal"><sp/><sp/><sp/><sp/>Config&amp;<sp/>Session::config()<sp/>{</highlight></codeline>
<codeline lineno="13527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!m_config<sp/>)</highlight></codeline>
<codeline lineno="13528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_config<sp/>=<sp/>std::make_shared&lt;Config&gt;(<sp/>m_configData<sp/>);</highlight></codeline>
<codeline lineno="13529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*m_config;</highlight></codeline>
<codeline lineno="13530"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13531"><highlight class="normal"></highlight></codeline>
<codeline lineno="13532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Session::runInternal()<sp/>{</highlight></codeline>
<codeline lineno="13533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_startupExceptions<sp/>)</highlight></codeline>
<codeline lineno="13534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="13535"><highlight class="normal"></highlight></codeline>
<codeline lineno="13536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_configData.showHelp<sp/>||<sp/>m_configData.libIdentify)<sp/>{</highlight></codeline>
<codeline lineno="13537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="13538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13539"><highlight class="normal"></highlight></codeline>
<codeline lineno="13540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_TRY<sp/>{</highlight></codeline>
<codeline lineno="13541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config();<sp/></highlight><highlight class="comment">//<sp/>Force<sp/>config<sp/>to<sp/>be<sp/>constructed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13542"><highlight class="normal"></highlight></codeline>
<codeline lineno="13543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seedRng(<sp/>*m_config<sp/>);</highlight></codeline>
<codeline lineno="13544"><highlight class="normal"></highlight></codeline>
<codeline lineno="13545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_configData.filenamesAsTags<sp/>)</highlight></codeline>
<codeline lineno="13546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>applyFilenamesAsTags(<sp/>*m_config<sp/>);</highlight></codeline>
<codeline lineno="13547"><highlight class="normal"></highlight></codeline>
<codeline lineno="13548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>list<sp/>request</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>Option&lt;std::size_t&gt;<sp/>listed<sp/>=<sp/>list(<sp/>m_config<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="13550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>*listed<sp/>);</highlight></codeline>
<codeline lineno="13551"><highlight class="normal"></highlight></codeline>
<codeline lineno="13552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestGroup<sp/>tests<sp/>{<sp/>m_config<sp/>};</highlight></codeline>
<codeline lineno="13553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>totals<sp/>=<sp/>tests.execute();</highlight></codeline>
<codeline lineno="13554"><highlight class="normal"></highlight></codeline>
<codeline lineno="13555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_config-&gt;warnAboutNoTests()<sp/>&amp;&amp;<sp/>totals.error<sp/>==<sp/>-1<sp/>)</highlight></codeline>
<codeline lineno="13556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="13557"><highlight class="normal"></highlight></codeline>
<codeline lineno="13558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>on<sp/>unices<sp/>only<sp/>the<sp/>lower<sp/>8<sp/>bits<sp/>are<sp/>usually<sp/>used,<sp/>clamping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>return<sp/>value<sp/>to<sp/>255<sp/>prevents<sp/>false<sp/>negative<sp/>when<sp/>some<sp/>multiple</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>256<sp/>tests<sp/>has<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__core__func__common_1ga2c2bde1cec025b7ddff83c74a1113719" kindref="member">std::min</ref>)<sp/>(MaxExitCode,<sp/>(<ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">std::max</ref>)<sp/>(totals.error,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(totals.assertions.failed)));</highlight></codeline>
<codeline lineno="13562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13563"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(<sp/>std::exception&amp;<sp/>ex<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Catch::cerr()<sp/>&lt;&lt;<sp/>ex.what()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="13566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MaxExitCode;</highlight></codeline>
<codeline lineno="13567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13568"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13569"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13570"><highlight class="normal"></highlight></codeline>
<codeline lineno="13571"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13572"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_session.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13573"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_singletons.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13574"><highlight class="normal"></highlight></codeline>
<codeline lineno="13575"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13576"><highlight class="normal"></highlight></codeline>
<codeline lineno="13577"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="13578"><highlight class="normal"></highlight></codeline>
<codeline lineno="13579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="13580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>getSingletons()<sp/>-&gt;<sp/>std::vector&lt;ISingleton*&gt;*&amp;<sp/>{</highlight></codeline>
<codeline lineno="13581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;ISingleton*&gt;*<sp/>g_singletons<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!g_singletons<sp/>)</highlight></codeline>
<codeline lineno="13583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_singletons<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::vector&lt;ISingleton*&gt;();</highlight></codeline>
<codeline lineno="13584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>g_singletons;</highlight></codeline>
<codeline lineno="13585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13586"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13587"><highlight class="normal"></highlight></codeline>
<codeline lineno="13588"><highlight class="normal"><sp/><sp/><sp/><sp/>ISingleton::~ISingleton()<sp/>{}</highlight></codeline>
<codeline lineno="13589"><highlight class="normal"></highlight></codeline>
<codeline lineno="13590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addSingleton(ISingleton*<sp/>singleton<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getSingletons()-&gt;push_back(<sp/>singleton<sp/>);</highlight></codeline>
<codeline lineno="13592"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cleanupSingletons()<sp/>{</highlight></codeline>
<codeline lineno="13594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>singletons<sp/>=<sp/>getSingletons();</highlight></codeline>
<codeline lineno="13595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>singleton<sp/>:<sp/>*singletons<sp/>)</highlight></codeline>
<codeline lineno="13596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>singleton;</highlight></codeline>
<codeline lineno="13597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>singletons;</highlight></codeline>
<codeline lineno="13598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>singletons<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13599"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13600"><highlight class="normal"></highlight></codeline>
<codeline lineno="13601"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13602"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_singletons.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13603"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_startup_exception_registry.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13604"><highlight class="normal"></highlight></codeline>
<codeline lineno="13605"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13606"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="13607"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StartupExceptionRegistry::add(<sp/>std::exception_ptr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>exception<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="13608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_TRY<sp/>{</highlight></codeline>
<codeline lineno="13609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_exceptions.push_back(exception);</highlight></codeline>
<codeline lineno="13610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>CATCH_CATCH_ALL<sp/>{</highlight></codeline>
<codeline lineno="13611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>run<sp/>out<sp/>of<sp/>memory<sp/>during<sp/>start-up<sp/>there&apos;s<sp/>really<sp/>not<sp/>a<sp/>lot<sp/>more<sp/>we<sp/>can<sp/>do<sp/>about<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::terminate();</highlight></codeline>
<codeline lineno="13613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13614"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13615"><highlight class="normal"></highlight></codeline>
<codeline lineno="13616"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::exception_ptr&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>StartupExceptionRegistry::getExceptions()<sp/>const<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="13617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_exceptions;</highlight></codeline>
<codeline lineno="13618"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13619"><highlight class="normal"></highlight></codeline>
<codeline lineno="13620"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13621"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13622"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_startup_exception_registry.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13623"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_stream.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13624"><highlight class="normal"></highlight></codeline>
<codeline lineno="13625"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13626"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13627"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13628"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13629"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13630"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13631"><highlight class="normal"></highlight></codeline>
<codeline lineno="13632"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="13633"><highlight class="normal"></highlight></codeline>
<codeline lineno="13634"><highlight class="normal"><sp/><sp/><sp/><sp/>Catch::IStream::~IStream()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13635"><highlight class="normal"></highlight></codeline>
<codeline lineno="13636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Detail<sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="13637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>WriterF,<sp/>std::</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bufferSize=256&gt;</highlight></codeline>
<codeline lineno="13638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">StreamBufImpl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::streambuf<sp/>{</highlight></codeline>
<codeline lineno="13639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>data[bufferSize];</highlight></codeline>
<codeline lineno="13640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WriterF<sp/>m_writer;</highlight></codeline>
<codeline lineno="13641"><highlight class="normal"></highlight></codeline>
<codeline lineno="13642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="13643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StreamBufImpl()<sp/>{</highlight></codeline>
<codeline lineno="13644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setp(<sp/>data,<sp/>data<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(data)<sp/>);</highlight></codeline>
<codeline lineno="13645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13646"><highlight class="normal"></highlight></codeline>
<codeline lineno="13647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~StreamBufImpl()<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="13648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StreamBufImpl::sync();</highlight></codeline>
<codeline lineno="13649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13650"><highlight class="normal"></highlight></codeline>
<codeline lineno="13651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="13652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>overflow(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="13653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sync();</highlight></codeline>
<codeline lineno="13654"><highlight class="normal"></highlight></codeline>
<codeline lineno="13655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>c<sp/>!=<sp/>EOF<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pbase()<sp/>==<sp/>epptr()<sp/>)</highlight></codeline>
<codeline lineno="13657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_writer(<sp/>std::string(<sp/>1,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>c<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="13658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sputc(<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>c<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="13660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="13662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13663"><highlight class="normal"></highlight></codeline>
<codeline lineno="13664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sync()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="13665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pbase()<sp/>!=<sp/>pptr()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_writer(<sp/>std::string(<sp/>pbase(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::string::size_type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>pptr()<sp/>-<sp/>pbase()<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="13667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setp(<sp/>pbase(),<sp/>epptr()<sp/>);</highlight></codeline>
<codeline lineno="13668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="13670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="13672"><highlight class="normal"></highlight></codeline>
<codeline lineno="13674"><highlight class="normal"></highlight></codeline>
<codeline lineno="13675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">OutputDebugWriter<sp/>{</highlight></codeline>
<codeline lineno="13676"><highlight class="normal"></highlight></codeline>
<codeline lineno="13677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;str<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeToDebugConsole(<sp/>str<sp/>);</highlight></codeline>
<codeline lineno="13679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="13681"><highlight class="normal"></highlight></codeline>
<codeline lineno="13683"><highlight class="normal"></highlight></codeline>
<codeline lineno="13684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">FileStream<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>IStream<sp/>{</highlight></codeline>
<codeline lineno="13685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>std::ofstream<sp/>m_ofs;</highlight></codeline>
<codeline lineno="13686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="13687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FileStream(<sp/>StringRef<sp/>filename<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_ofs.open(<sp/>filename.c_str()<sp/>);</highlight></codeline>
<codeline lineno="13689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_ENFORCE(<sp/>!m_ofs.fail(),<sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>open<sp/>file:<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>filename<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="13690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~FileStream()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>IStream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/>stream()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="13694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_ofs;</highlight></codeline>
<codeline lineno="13695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="13697"><highlight class="normal"></highlight></codeline>
<codeline lineno="13699"><highlight class="normal"></highlight></codeline>
<codeline lineno="13700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">CoutStream<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>IStream<sp/>{</highlight></codeline>
<codeline lineno="13701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>std::ostream<sp/>m_os;</highlight></codeline>
<codeline lineno="13702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="13703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>the<sp/>streambuf<sp/>from<sp/>cout<sp/>up-front<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cout<sp/>may<sp/>get<sp/>redirected<sp/>when<sp/>running<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CoutStream()<sp/>:<sp/>m_os(<sp/>Catch::cout().rdbuf()<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="13706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~CoutStream()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13707"><highlight class="normal"></highlight></codeline>
<codeline lineno="13708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>IStream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/>stream()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_os;<sp/>}</highlight></codeline>
<codeline lineno="13710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="13711"><highlight class="normal"></highlight></codeline>
<codeline lineno="13713"><highlight class="normal"></highlight></codeline>
<codeline lineno="13714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DebugOutStream<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>IStream<sp/>{</highlight></codeline>
<codeline lineno="13715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;StreamBufImpl&lt;OutputDebugWriter&gt;&gt;<sp/>m_streamBuf;</highlight></codeline>
<codeline lineno="13716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>std::ostream<sp/>m_os;</highlight></codeline>
<codeline lineno="13717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="13718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DebugOutStream()</highlight></codeline>
<codeline lineno="13719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>m_streamBuf(<sp/>new<sp/>StreamBufImpl&lt;OutputDebugWriter&gt;()<sp/>),</highlight></codeline>
<codeline lineno="13720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_os(<sp/>m_streamBuf.get()<sp/>)</highlight></codeline>
<codeline lineno="13721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="13722"><highlight class="normal"></highlight></codeline>
<codeline lineno="13723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~DebugOutStream()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13724"><highlight class="normal"></highlight></codeline>
<codeline lineno="13725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>IStream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/>stream()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_os;<sp/>}</highlight></codeline>
<codeline lineno="13727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="13728"><highlight class="normal"></highlight></codeline>
<codeline lineno="13729"><highlight class="normal"><sp/><sp/><sp/><sp/>}}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>anon::detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13730"><highlight class="normal"></highlight></codeline>
<codeline lineno="13732"><highlight class="normal"></highlight></codeline>
<codeline lineno="13733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>makeStream(<sp/>StringRef<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;filename<sp/>)<sp/>-&gt;<sp/>IStream<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>{</highlight></codeline>
<codeline lineno="13734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>filename.empty()<sp/>)</highlight></codeline>
<codeline lineno="13735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Detail::CoutStream();</highlight></codeline>
<codeline lineno="13736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>filename[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>filename<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;%debug&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="13738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Detail::DebugOutStream();</highlight></codeline>
<codeline lineno="13739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;Unrecognised<sp/>stream:<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>filename<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="13741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Detail::FileStream(<sp/>filename<sp/>);</highlight></codeline>
<codeline lineno="13744"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13745"><highlight class="normal"></highlight></codeline>
<codeline lineno="13746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>class<sp/>encapsulates<sp/>the<sp/>idea<sp/>of<sp/>a<sp/>pool<sp/>of<sp/>ostringstreams<sp/>that<sp/>can<sp/>be<sp/>reused.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">StringStreams<sp/>{</highlight></codeline>
<codeline lineno="13748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::unique_ptr&lt;std::ostringstream&gt;&gt;<sp/>m_streams;</highlight></codeline>
<codeline lineno="13749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::size_t&gt;<sp/>m_unused;</highlight></codeline>
<codeline lineno="13750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>m_referenceStream;<sp/></highlight><highlight class="comment">//<sp/>Used<sp/>for<sp/>copy<sp/>state/<sp/>flags<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13751"><highlight class="normal"></highlight></codeline>
<codeline lineno="13752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>add()<sp/>-&gt;<sp/>std::size_t<sp/>{</highlight></codeline>
<codeline lineno="13753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_unused.empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_streams.push_back(<sp/>std::unique_ptr&lt;std::ostringstream&gt;(<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::ostringstream<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="13755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_streams.size()-1;</highlight></codeline>
<codeline lineno="13756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="13758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>m_unused.back();</highlight></codeline>
<codeline lineno="13759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_unused.pop_back();</highlight></codeline>
<codeline lineno="13760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="13761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13763"><highlight class="normal"></highlight></codeline>
<codeline lineno="13764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>release(<sp/>std::size_t<sp/>index<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_streams[index]-&gt;copyfmt(<sp/>m_referenceStream<sp/>);<sp/></highlight><highlight class="comment">//<sp/>Restore<sp/>initial<sp/>flags<sp/>and<sp/>other<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_unused.push_back(index);</highlight></codeline>
<codeline lineno="13767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13768"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="13769"><highlight class="normal"></highlight></codeline>
<codeline lineno="13770"><highlight class="normal"><sp/><sp/><sp/><sp/>ReusableStringStream::ReusableStringStream()</highlight></codeline>
<codeline lineno="13771"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>m_index(<sp/><ref refid="class_singleton" kindref="compound">Singleton</ref>&lt;StringStreams&gt;::getMutable().add()<sp/>),</highlight></codeline>
<codeline lineno="13772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_oss(<sp/><ref refid="class_singleton" kindref="compound">Singleton</ref>&lt;StringStreams&gt;::getMutable().m_streams[m_index].get()<sp/>)</highlight></codeline>
<codeline lineno="13773"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="13774"><highlight class="normal"></highlight></codeline>
<codeline lineno="13775"><highlight class="normal"><sp/><sp/><sp/><sp/>ReusableStringStream::~ReusableStringStream()<sp/>{</highlight></codeline>
<codeline lineno="13776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::ostringstream*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>m_oss<sp/>)-&gt;str(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="13777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_oss-&gt;clear();</highlight></codeline>
<codeline lineno="13778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_singleton" kindref="compound">Singleton&lt;StringStreams&gt;::getMutable</ref>().release(<sp/>m_index<sp/>);</highlight></codeline>
<codeline lineno="13779"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13780"><highlight class="normal"></highlight></codeline>
<codeline lineno="13781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ReusableStringStream::str()<sp/>const<sp/>-&gt;<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="13782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::ostringstream*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>m_oss<sp/>)-&gt;str();</highlight></codeline>
<codeline lineno="13783"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13784"><highlight class="normal"></highlight></codeline>
<codeline lineno="13786"><highlight class="normal"></highlight></codeline>
<codeline lineno="13787"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CATCH_CONFIG_NOSTDOUT<sp/></highlight><highlight class="comment">//<sp/>If<sp/>you<sp/>#define<sp/>this<sp/>you<sp/>must<sp/>implement<sp/>these<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13788"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/>cout()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::cout;<sp/>}</highlight></codeline>
<codeline lineno="13789"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/>cerr()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::cerr;<sp/>}</highlight></codeline>
<codeline lineno="13790"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/>clog()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::clog;<sp/>}</highlight></codeline>
<codeline lineno="13791"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13792"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13793"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_stream.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13794"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_string_manip.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13795"><highlight class="normal"></highlight></codeline>
<codeline lineno="13796"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13797"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13798"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13799"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cctype&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13800"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13801"><highlight class="normal"></highlight></codeline>
<codeline lineno="13802"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="13803"><highlight class="normal"></highlight></codeline>
<codeline lineno="13804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="13805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>toLowerCh(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="13806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>std::tolower(<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(c)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="13807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13808"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13809"><highlight class="normal"></highlight></codeline>
<codeline lineno="13810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>startsWith(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>s,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>prefix<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s.size()<sp/>&gt;=<sp/>prefix.size()<sp/>&amp;&amp;<sp/><ref refid="group__core__func__vector__relational_1gab560b9b9d01040d082e40edae40edfd1" kindref="member">std::equal</ref>(prefix.begin(),<sp/>prefix.end(),<sp/>s.begin());</highlight></codeline>
<codeline lineno="13812"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>startsWith(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>prefix<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!s.empty()<sp/>&amp;&amp;<sp/>s[0]<sp/>==<sp/>prefix;</highlight></codeline>
<codeline lineno="13815"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>endsWith(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>s,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>suffix<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s.size()<sp/>&gt;=<sp/>suffix.size()<sp/>&amp;&amp;<sp/><ref refid="group__core__func__vector__relational_1gab560b9b9d01040d082e40edae40edfd1" kindref="member">std::equal</ref>(suffix.rbegin(),<sp/>suffix.rend(),<sp/>s.rbegin());</highlight></codeline>
<codeline lineno="13818"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>endsWith(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>s,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>suffix<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!s.empty()<sp/>&amp;&amp;<sp/>s[s.size()-1]<sp/>==<sp/>suffix;</highlight></codeline>
<codeline lineno="13821"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>contains(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>s,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>infix<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s.find(<sp/>infix<sp/>)<sp/>!=<sp/>std::string::npos;</highlight></codeline>
<codeline lineno="13824"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toLowerInPlace(<sp/>std::string&amp;<sp/>s<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(<sp/>s.begin(),<sp/>s.end(),<sp/>s.begin(),<sp/>toLowerCh<sp/>);</highlight></codeline>
<codeline lineno="13827"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13828"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>toLower(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>s<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>lc<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="13830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toLowerInPlace(<sp/>lc<sp/>);</highlight></codeline>
<codeline lineno="13831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lc;</highlight></codeline>
<codeline lineno="13832"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13833"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>trim(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>str<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>whitespaceChars<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\n\r\t<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string::size_type<sp/>start<sp/>=<sp/>str.find_first_not_of(<sp/>whitespaceChars<sp/>);</highlight></codeline>
<codeline lineno="13836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string::size_type<sp/>end<sp/>=<sp/>str.find_last_not_of(<sp/>whitespaceChars<sp/>);</highlight></codeline>
<codeline lineno="13837"><highlight class="normal"></highlight></codeline>
<codeline lineno="13838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>start<sp/>!=<sp/>std::string::npos<sp/>?<sp/>str.substr(<sp/>start,<sp/>1+end-start<sp/>)<sp/>:<sp/>std::string();</highlight></codeline>
<codeline lineno="13839"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13840"><highlight class="normal"></highlight></codeline>
<codeline lineno="13841"><highlight class="normal"><sp/><sp/><sp/><sp/>StringRef<sp/>trim(StringRef<sp/>ref)<sp/>{</highlight></codeline>
<codeline lineno="13842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>is_ws<sp/>=<sp/>[](</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="13843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="13845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>real_begin<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="13846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(real_begin<sp/>&lt;<sp/>ref.size()<sp/>&amp;&amp;<sp/>is_ws(ref[real_begin]))<sp/>{<sp/>++real_begin;<sp/>}</highlight></codeline>
<codeline lineno="13847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>real_end<sp/>=<sp/>ref.size();</highlight></codeline>
<codeline lineno="13848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(real_end<sp/>&gt;<sp/>real_begin<sp/>&amp;&amp;<sp/>is_ws(ref[real_end<sp/>-<sp/>1]))<sp/>{<sp/>--real_end;<sp/>}</highlight></codeline>
<codeline lineno="13849"><highlight class="normal"></highlight></codeline>
<codeline lineno="13850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ref.substr(real_begin,<sp/>real_end<sp/>-<sp/>real_begin);</highlight></codeline>
<codeline lineno="13851"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13852"><highlight class="normal"></highlight></codeline>
<codeline lineno="13853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>replaceInPlace(<sp/>std::string&amp;<sp/>str,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>replaceThis,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>withThis<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>replaced<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>i<sp/>=<sp/>str.find(<sp/>replaceThis<sp/>);</highlight></codeline>
<codeline lineno="13856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>i<sp/>!=<sp/>std::string::npos<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>replaced<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/>str.substr(<sp/>0,<sp/>i<sp/>)<sp/>+<sp/>withThis<sp/>+<sp/>str.substr(<sp/>i+replaceThis.size()<sp/>);</highlight></codeline>
<codeline lineno="13859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>i<sp/>&lt;<sp/>str.size()-withThis.size()<sp/>)</highlight></codeline>
<codeline lineno="13860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>str.find(<sp/>replaceThis,<sp/>i+withThis.size()<sp/>);</highlight></codeline>
<codeline lineno="13861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>std::string::npos;</highlight></codeline>
<codeline lineno="13863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>replaced;</highlight></codeline>
<codeline lineno="13865"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13866"><highlight class="normal"></highlight></codeline>
<codeline lineno="13867"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;StringRef&gt;<sp/>splitStringRef(<sp/>StringRef<sp/>str,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>delimiter<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;StringRef&gt;<sp/>subStrings;</highlight></codeline>
<codeline lineno="13869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="13870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>pos<sp/>=<sp/>0;<sp/>pos<sp/>&lt;<sp/>str.size();<sp/>++pos<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>str[pos]<sp/>==<sp/>delimiter<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pos<sp/>-<sp/>start<sp/>&gt;<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="13873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subStrings.push_back(<sp/>str.substr(<sp/>start,<sp/>pos-start<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="13874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>pos+1;</highlight></codeline>
<codeline lineno="13875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>start<sp/>&lt;<sp/>str.size()<sp/>)</highlight></codeline>
<codeline lineno="13878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subStrings.push_back(<sp/>str.substr(<sp/>start,<sp/>str.size()-start<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="13879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>subStrings;</highlight></codeline>
<codeline lineno="13880"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13881"><highlight class="normal"></highlight></codeline>
<codeline lineno="13882"><highlight class="normal"><sp/><sp/><sp/><sp/>pluralise::pluralise(<sp/>std::size_t<sp/>count,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>label<sp/>)</highlight></codeline>
<codeline lineno="13883"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>m_count(<sp/>count<sp/>),</highlight></codeline>
<codeline lineno="13884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_label(<sp/>label<sp/>)</highlight></codeline>
<codeline lineno="13885"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="13886"><highlight class="normal"></highlight></codeline>
<codeline lineno="13887"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/>operator<sp/>&lt;&lt;<sp/>(<sp/>std::ostream&amp;<sp/>os,<sp/>pluralise<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>pluraliser<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>pluraliser.m_count<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>pluraliser.m_label;</highlight></codeline>
<codeline lineno="13889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pluraliser.m_count<sp/>!=<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="13890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="13892"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13893"><highlight class="normal"></highlight></codeline>
<codeline lineno="13894"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13895"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_string_manip.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13896"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_stringref.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13897"><highlight class="normal"></highlight></codeline>
<codeline lineno="13898"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13899"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13900"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13901"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13902"><highlight class="normal"></highlight></codeline>
<codeline lineno="13903"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="13904"><highlight class="normal"><sp/><sp/><sp/><sp/>StringRef::StringRef(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>rawChars<sp/>)<sp/>noexcept</highlight></codeline>
<codeline lineno="13905"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>StringRef(<sp/>rawChars,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">StringRef::size_type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::strlen(rawChars)<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="13906"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="13907"><highlight class="normal"></highlight></codeline>
<codeline lineno="13908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>StringRef::c_str()<sp/>const<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>const*<sp/>{</highlight></codeline>
<codeline lineno="13909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_ENFORCE(isNullTerminated(),<sp/></highlight><highlight class="stringliteral">&quot;Called<sp/>StringRef::c_str()<sp/>on<sp/>a<sp/>non-null-terminated<sp/>instance&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="13910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_start;</highlight></codeline>
<codeline lineno="13911"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>StringRef::data()<sp/>const<sp/>noexcept<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>const*<sp/>{</highlight></codeline>
<codeline lineno="13913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_start;</highlight></codeline>
<codeline lineno="13914"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13915"><highlight class="normal"></highlight></codeline>
<codeline lineno="13916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>StringRef::substr(<sp/>size_type<sp/>start,<sp/>size_type<sp/>size<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>-&gt;<sp/>StringRef<sp/>{</highlight></codeline>
<codeline lineno="13917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start<sp/>&lt;<sp/>m_size)<sp/>{</highlight></codeline>
<codeline lineno="13918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StringRef(m_start<sp/>+<sp/>start,<sp/>(<ref refid="group__core__func__common_1ga2c2bde1cec025b7ddff83c74a1113719" kindref="member">std::min</ref>)(m_size<sp/>-<sp/>start,<sp/>size));</highlight></codeline>
<codeline lineno="13919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="13920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StringRef();</highlight></codeline>
<codeline lineno="13921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13922"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>StringRef::operator<sp/>==<sp/>(<sp/>StringRef<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="13924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_size<sp/>==<sp/>other.m_size</highlight></codeline>
<codeline lineno="13925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>(std::memcmp(<sp/>m_start,<sp/>other.m_start,<sp/>m_size<sp/>)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="13926"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13927"><highlight class="normal"></highlight></codeline>
<codeline lineno="13928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>&lt;&lt;<sp/>(<sp/>std::ostream&amp;<sp/>os,<sp/>StringRef<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>str<sp/>)<sp/>-&gt;<sp/>std::ostream&amp;<sp/>{</highlight></codeline>
<codeline lineno="13929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os.write(str.data(),<sp/>str.size());</highlight></codeline>
<codeline lineno="13930"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13931"><highlight class="normal"></highlight></codeline>
<codeline lineno="13932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator+=(<sp/>std::string&amp;<sp/>lhs,<sp/>StringRef<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs<sp/>)<sp/>-&gt;<sp/>std::string&amp;<sp/>{</highlight></codeline>
<codeline lineno="13933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lhs.append(rhs.data(),<sp/>rhs.size());</highlight></codeline>
<codeline lineno="13934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs;</highlight></codeline>
<codeline lineno="13935"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13936"><highlight class="normal"></highlight></codeline>
<codeline lineno="13937"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13938"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_stringref.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13939"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_tag_alias.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13940"><highlight class="normal"></highlight></codeline>
<codeline lineno="13941"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="13942"><highlight class="normal"><sp/><sp/><sp/><sp/>TagAlias::TagAlias(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>_tag,<sp/>SourceLineInfo<sp/>_lineInfo):<sp/>tag(_tag),<sp/>lineInfo(_lineInfo)<sp/>{}</highlight></codeline>
<codeline lineno="13943"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13944"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_tag_alias.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13945"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_tag_alias_autoregistrar.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13946"><highlight class="normal"></highlight></codeline>
<codeline lineno="13947"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="13948"><highlight class="normal"></highlight></codeline>
<codeline lineno="13949"><highlight class="normal"><sp/><sp/><sp/><sp/>RegistrarForTagAliases::RegistrarForTagAliases(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>alias,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>tag,<sp/>SourceLineInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lineInfo)<sp/>{</highlight></codeline>
<codeline lineno="13950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_TRY<sp/>{</highlight></codeline>
<codeline lineno="13951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getMutableRegistryHub().registerTagAlias(alias,<sp/>tag,<sp/>lineInfo);</highlight></codeline>
<codeline lineno="13952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>CATCH_CATCH_ALL<sp/>{</highlight></codeline>
<codeline lineno="13953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>throw<sp/>when<sp/>constructing<sp/>global<sp/>objects,<sp/>instead<sp/>register<sp/>the<sp/>exception<sp/>to<sp/>be<sp/>processed<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getMutableRegistryHub().registerStartupException();</highlight></codeline>
<codeline lineno="13955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13956"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13957"><highlight class="normal"></highlight></codeline>
<codeline lineno="13958"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13959"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_tag_alias_autoregistrar.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13960"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_tag_alias_registry.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13961"><highlight class="normal"></highlight></codeline>
<codeline lineno="13962"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13963"><highlight class="normal"></highlight></codeline>
<codeline lineno="13964"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="13965"><highlight class="normal"></highlight></codeline>
<codeline lineno="13966"><highlight class="normal"><sp/><sp/><sp/><sp/>TagAliasRegistry::~TagAliasRegistry()<sp/>{}</highlight></codeline>
<codeline lineno="13967"><highlight class="normal"></highlight></codeline>
<codeline lineno="13968"><highlight class="normal"><sp/><sp/><sp/><sp/>TagAlias<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>TagAliasRegistry::find(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>alias<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="13969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>m_registry.find(<sp/>alias<sp/>);</highlight></codeline>
<codeline lineno="13970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>it<sp/>!=<sp/>m_registry.end()<sp/>)</highlight></codeline>
<codeline lineno="13971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;(it-&gt;second);</highlight></codeline>
<codeline lineno="13972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13974"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13975"><highlight class="normal"></highlight></codeline>
<codeline lineno="13976"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>TagAliasRegistry::expandAliases(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>unexpandedTestSpec<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="13977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>expandedTestSpec<sp/>=<sp/>unexpandedTestSpec;</highlight></codeline>
<codeline lineno="13978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>registryKvp<sp/>:<sp/>m_registry<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>pos<sp/>=<sp/>expandedTestSpec.find(<sp/>registryKvp.first<sp/>);</highlight></codeline>
<codeline lineno="13980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pos<sp/>!=<sp/>std::string::npos<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expandedTestSpec<sp/>=<sp/><sp/>expandedTestSpec.substr(<sp/>0,<sp/>pos<sp/>)<sp/>+</highlight></codeline>
<codeline lineno="13982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>registryKvp.second.tag<sp/>+</highlight></codeline>
<codeline lineno="13983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expandedTestSpec.substr(<sp/>pos<sp/>+<sp/>registryKvp.first.size()<sp/>);</highlight></codeline>
<codeline lineno="13984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>expandedTestSpec;</highlight></codeline>
<codeline lineno="13987"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13988"><highlight class="normal"></highlight></codeline>
<codeline lineno="13989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TagAliasRegistry::add(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>alias,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>tag,<sp/>SourceLineInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lineInfo<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="13990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_ENFORCE(<sp/>startsWith(alias,<sp/></highlight><highlight class="stringliteral">&quot;[@&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>endsWith(alias,<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="13991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;error:<sp/>tag<sp/>alias,<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>alias<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>is<sp/>not<sp/>of<sp/>the<sp/>form<sp/>[@alias<sp/>name].\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>lineInfo<sp/>);</highlight></codeline>
<codeline lineno="13992"><highlight class="normal"></highlight></codeline>
<codeline lineno="13993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_ENFORCE(<sp/>m_registry.insert(std::make_pair(alias,<sp/>TagAlias(tag,<sp/>lineInfo))).second,</highlight></codeline>
<codeline lineno="13994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;error:<sp/>tag<sp/>alias,<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>alias<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>already<sp/>registered.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tFirst<sp/>seen<sp/>at:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>find(alias)-&gt;lineInfo<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tRedefined<sp/>at:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>lineInfo<sp/>);</highlight></codeline>
<codeline lineno="13997"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13998"><highlight class="normal"></highlight></codeline>
<codeline lineno="13999"><highlight class="normal"><sp/><sp/><sp/><sp/>ITagAliasRegistry::~ITagAliasRegistry()<sp/>{}</highlight></codeline>
<codeline lineno="14000"><highlight class="normal"></highlight></codeline>
<codeline lineno="14001"><highlight class="normal"><sp/><sp/><sp/><sp/>ITagAliasRegistry<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>ITagAliasRegistry::get()<sp/>{</highlight></codeline>
<codeline lineno="14002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getRegistryHub().getTagAliasRegistry();</highlight></codeline>
<codeline lineno="14003"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14004"><highlight class="normal"></highlight></codeline>
<codeline lineno="14005"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14006"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_tag_alias_registry.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14007"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_test_case_info.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14008"><highlight class="normal"></highlight></codeline>
<codeline lineno="14009"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cctype&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14010"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;exception&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14011"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14012"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14013"><highlight class="normal"></highlight></codeline>
<codeline lineno="14014"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="14015"><highlight class="normal"></highlight></codeline>
<codeline lineno="14016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestCaseInfo::SpecialProperties<sp/>parseSpecialTag(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>tag<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>startsWith(<sp/>tag,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal"><sp/>)<sp/>||</highlight></codeline>
<codeline lineno="14019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tag<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;!hide&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="14020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TestCaseInfo::IsHidden;</highlight></codeline>
<codeline lineno="14021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>tag<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;!throws&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="14022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TestCaseInfo::Throws;</highlight></codeline>
<codeline lineno="14023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>tag<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;!shouldfail&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="14024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TestCaseInfo::ShouldFail;</highlight></codeline>
<codeline lineno="14025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>tag<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;!mayfail&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="14026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TestCaseInfo::MayFail;</highlight></codeline>
<codeline lineno="14027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>tag<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;!nonportable&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="14028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TestCaseInfo::NonPortable;</highlight></codeline>
<codeline lineno="14029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>tag<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;!benchmark&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="14030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TestCaseInfo::SpecialProperties</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>TestCaseInfo::Benchmark<sp/>|<sp/>TestCaseInfo::IsHidden<sp/>);</highlight></codeline>
<codeline lineno="14031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TestCaseInfo::None;</highlight></codeline>
<codeline lineno="14033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isReservedTag(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>tag<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parseSpecialTag(<sp/>tag<sp/>)<sp/>==<sp/>TestCaseInfo::None<sp/>&amp;&amp;<sp/>tag.size()<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>!std::isalnum(<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(tag[0])<sp/>);</highlight></codeline>
<codeline lineno="14036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>enforceNotReservedTag(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>tag,<sp/>SourceLineInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_lineInfo<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_ENFORCE(<sp/>!isReservedTag(tag),</highlight></codeline>
<codeline lineno="14039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Tag<sp/>name:<sp/>[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tag<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]<sp/>is<sp/>not<sp/>allowed.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Tag<sp/>names<sp/>starting<sp/>with<sp/>non<sp/>alphanumeric<sp/>characters<sp/>are<sp/>reserved\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>_lineInfo<sp/>);</highlight></codeline>
<codeline lineno="14042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14043"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14044"><highlight class="normal"></highlight></codeline>
<codeline lineno="14045"><highlight class="normal"><sp/><sp/><sp/><sp/>TestCase<sp/>makeTestCase(<sp/><sp/>ITestInvoker*<sp/>_testCase,</highlight></codeline>
<codeline lineno="14046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_className,</highlight></codeline>
<codeline lineno="14047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NameAndTags<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>nameAndTags,</highlight></codeline>
<codeline lineno="14048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SourceLineInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_lineInfo<sp/>)</highlight></codeline>
<codeline lineno="14049"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="14050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isHidden<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14051"><highlight class="normal"></highlight></codeline>
<codeline lineno="14052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>out<sp/>tags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>tags;</highlight></codeline>
<codeline lineno="14054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>desc,<sp/>tag;</highlight></codeline>
<codeline lineno="14055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>inTag<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>:<sp/>nameAndTags.tags)<sp/>{</highlight></codeline>
<codeline lineno="14057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!inTag<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="14059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inTag<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc<sp/>+=<sp/>c;</highlight></codeline>
<codeline lineno="14062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="14064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestCaseInfo::SpecialProperties<sp/>prop<sp/>=<sp/>parseSpecialTag(<sp/>tag<sp/>);</highlight></codeline>
<codeline lineno="14066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>prop<sp/>&amp;<sp/>TestCaseInfo::IsHidden<sp/>)<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="14067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isHidden<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>prop<sp/>==<sp/>TestCaseInfo::None<sp/>)</highlight></codeline>
<codeline lineno="14069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enforceNotReservedTag(<sp/>tag,<sp/>_lineInfo<sp/>);</highlight></codeline>
<codeline lineno="14070"><highlight class="normal"></highlight></codeline>
<codeline lineno="14071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Merged<sp/>hide<sp/>tags<sp/>like<sp/>`[.approvals]`<sp/>should<sp/>be<sp/>added<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>`[.][approvals]`.<sp/>The<sp/>`[.]`<sp/>is<sp/>added<sp/>at<sp/>later<sp/>point,<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>only<sp/>strip<sp/>the<sp/>prefix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(startsWith(tag,<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>tag.size()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="14075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tag.erase(0,<sp/>1);</highlight></codeline>
<codeline lineno="14076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tags.push_back(<sp/>tag<sp/>);</highlight></codeline>
<codeline lineno="14078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tag.clear();</highlight></codeline>
<codeline lineno="14079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inTag<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tag<sp/>+=<sp/>c;</highlight></codeline>
<codeline lineno="14083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>isHidden<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>all<sp/>&quot;hidden&quot;<sp/>tags<sp/>to<sp/>make<sp/>them<sp/>behave<sp/>identically</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tags.insert(<sp/>tags.end(),<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;!hide&quot;</highlight><highlight class="normal"><sp/>}<sp/>);</highlight></codeline>
<codeline lineno="14088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14089"><highlight class="normal"></highlight></codeline>
<codeline lineno="14090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestCaseInfo<sp/><ref refid="structinfo" kindref="compound">info</ref>(<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::string</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(nameAndTags.name),<sp/>_className,<sp/>desc,<sp/>tags,<sp/>_lineInfo<sp/>);</highlight></codeline>
<codeline lineno="14091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TestCase(<sp/>_testCase,<sp/>std::move(<ref refid="structinfo" kindref="compound">info</ref>)<sp/>);</highlight></codeline>
<codeline lineno="14092"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14093"><highlight class="normal"></highlight></codeline>
<codeline lineno="14094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setTags(<sp/>TestCaseInfo&amp;<sp/>testCaseInfo,<sp/>std::vector&lt;std::string&gt;<sp/>tags<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sort(begin(tags),<sp/>end(tags));</highlight></codeline>
<codeline lineno="14096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tags.erase(std::unique(begin(tags),<sp/>end(tags)),<sp/>end(tags));</highlight></codeline>
<codeline lineno="14097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testCaseInfo.lcaseTags.clear();</highlight></codeline>
<codeline lineno="14098"><highlight class="normal"></highlight></codeline>
<codeline lineno="14099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>tag<sp/>:<sp/>tags<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>lcaseTag<sp/>=<sp/>toLower(<sp/>tag<sp/>);</highlight></codeline>
<codeline lineno="14101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testCaseInfo.properties<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TestCaseInfo::SpecialProperties</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>testCaseInfo.properties<sp/>|<sp/>parseSpecialTag(<sp/>lcaseTag<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="14102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testCaseInfo.lcaseTags.push_back(<sp/>lcaseTag<sp/>);</highlight></codeline>
<codeline lineno="14103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testCaseInfo.tags<sp/>=<sp/>std::move(tags);</highlight></codeline>
<codeline lineno="14105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14106"><highlight class="normal"></highlight></codeline>
<codeline lineno="14107"><highlight class="normal"><sp/><sp/><sp/><sp/>TestCaseInfo::TestCaseInfo(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_name,</highlight></codeline>
<codeline lineno="14108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_className,</highlight></codeline>
<codeline lineno="14109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_description,</highlight></codeline>
<codeline lineno="14110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_tags,</highlight></codeline>
<codeline lineno="14111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SourceLineInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_lineInfo<sp/>)</highlight></codeline>
<codeline lineno="14112"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>name(<sp/>_name<sp/>),</highlight></codeline>
<codeline lineno="14113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>className(<sp/>_className<sp/>),</highlight></codeline>
<codeline lineno="14114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>description(<sp/>_description<sp/>),</highlight></codeline>
<codeline lineno="14115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lineInfo(<sp/>_lineInfo<sp/>),</highlight></codeline>
<codeline lineno="14116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>properties(<sp/>None<sp/>)</highlight></codeline>
<codeline lineno="14117"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="14118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setTags(<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>_tags<sp/>);</highlight></codeline>
<codeline lineno="14119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14120"><highlight class="normal"></highlight></codeline>
<codeline lineno="14121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TestCaseInfo::isHidden()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>properties<sp/>&amp;<sp/>IsHidden<sp/>)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="14123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TestCaseInfo::throws()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>properties<sp/>&amp;<sp/>Throws<sp/>)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="14126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TestCaseInfo::okToFail()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>properties<sp/>&amp;<sp/>(ShouldFail<sp/>|<sp/>MayFail<sp/>)<sp/>)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="14129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TestCaseInfo::expectedToFail()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>properties<sp/>&amp;<sp/>(ShouldFail<sp/>)<sp/>)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="14132"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14133"><highlight class="normal"></highlight></codeline>
<codeline lineno="14134"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>TestCaseInfo::tagsAsString()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>ret;</highlight></codeline>
<codeline lineno="14136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;[&apos;<sp/>and<sp/>&apos;]&apos;<sp/>per<sp/>tag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>full_size<sp/>=<sp/>2<sp/>*<sp/>tags.size();</highlight></codeline>
<codeline lineno="14138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>tag<sp/>:<sp/>tags)<sp/>{</highlight></codeline>
<codeline lineno="14139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>full_size<sp/>+=<sp/>tag.size();</highlight></codeline>
<codeline lineno="14140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.reserve(full_size);</highlight></codeline>
<codeline lineno="14142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>tag<sp/>:<sp/>tags)<sp/>{</highlight></codeline>
<codeline lineno="14143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.push_back(</highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="14144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.append(tag);</highlight></codeline>
<codeline lineno="14145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.push_back(</highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="14146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14147"><highlight class="normal"></highlight></codeline>
<codeline lineno="14148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="14149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14150"><highlight class="normal"></highlight></codeline>
<codeline lineno="14151"><highlight class="normal"><sp/><sp/><sp/><sp/>TestCase::TestCase(<sp/>ITestInvoker*<sp/>testCase,<sp/>TestCaseInfo&amp;&amp;<sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>)<sp/>:<sp/>TestCaseInfo(<sp/>std::move(<ref refid="structinfo" kindref="compound">info</ref>)<sp/>),<sp/>test(<sp/>testCase<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="14152"><highlight class="normal"></highlight></codeline>
<codeline lineno="14153"><highlight class="normal"><sp/><sp/><sp/><sp/>TestCase<sp/>TestCase::withName(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_newName<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestCase<sp/>other(<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="14155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.name<sp/>=<sp/>_newName;</highlight></codeline>
<codeline lineno="14156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>other;</highlight></codeline>
<codeline lineno="14157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14158"><highlight class="normal"></highlight></codeline>
<codeline lineno="14159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestCase::invoke()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test-&gt;invoke();</highlight></codeline>
<codeline lineno="14161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14162"><highlight class="normal"></highlight></codeline>
<codeline lineno="14163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TestCase::operator<sp/>==<sp/>(<sp/>TestCase<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>test.get()<sp/>==<sp/>other.test.get()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="14165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>==<sp/>other.name<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="14166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>className<sp/>==<sp/>other.className;</highlight></codeline>
<codeline lineno="14167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14168"><highlight class="normal"></highlight></codeline>
<codeline lineno="14169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TestCase::operator<sp/>&lt;<sp/>(<sp/>TestCase<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name<sp/>&lt;<sp/>other.name;</highlight></codeline>
<codeline lineno="14171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14172"><highlight class="normal"></highlight></codeline>
<codeline lineno="14173"><highlight class="normal"><sp/><sp/><sp/><sp/>TestCaseInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>TestCase::getTestCaseInfo()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="14174"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14177"><highlight class="normal"></highlight></codeline>
<codeline lineno="14178"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_test_case_info.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14180"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_test_case_registry_impl.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14181"><highlight class="normal"></highlight></codeline>
<codeline lineno="14182"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14183"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14184"><highlight class="normal"></highlight></codeline>
<codeline lineno="14185"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="14186"><highlight class="normal"></highlight></codeline>
<codeline lineno="14187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TestHasher<sp/>{</highlight></codeline>
<codeline lineno="14189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>hash_t<sp/>=<sp/><ref refid="group__gtc__type__precision_1ga058f57c19e1befdcf12498944bd73e69" kindref="member">uint64_t</ref>;</highlight></codeline>
<codeline lineno="14190"><highlight class="normal"></highlight></codeline>
<codeline lineno="14191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>TestHasher(<sp/>hash_t<sp/>hashSuffix<sp/>):</highlight></codeline>
<codeline lineno="14192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_hashSuffix{<sp/>hashSuffix<sp/>}<sp/>{}</highlight></codeline>
<codeline lineno="14193"><highlight class="normal"></highlight></codeline>
<codeline lineno="14194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>operator()(<sp/>TestCase<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>t<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FNV-1a<sp/>hash<sp/>with<sp/>multiplication<sp/>fold.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>hash_t<sp/>prime<sp/>=<sp/>1099511628211u;</highlight></codeline>
<codeline lineno="14197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash_t<sp/>hash<sp/>=<sp/>14695981039346656037u;</highlight></codeline>
<codeline lineno="14198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>:<sp/>t.name<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash<sp/>^=<sp/>c;</highlight></codeline>
<codeline lineno="14200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash<sp/>*=<sp/>prime;</highlight></codeline>
<codeline lineno="14201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash<sp/>^=<sp/>m_hashSuffix;</highlight></codeline>
<codeline lineno="14203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash<sp/>*=<sp/>prime;</highlight></codeline>
<codeline lineno="14204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>low{<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>hash<sp/>)<sp/>};</highlight></codeline>
<codeline lineno="14205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>high{<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>hash<sp/>&gt;&gt;<sp/>32<sp/>)<sp/>};</highlight></codeline>
<codeline lineno="14206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>low<sp/>*<sp/>high;</highlight></codeline>
<codeline lineno="14207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14208"><highlight class="normal"></highlight></codeline>
<codeline lineno="14209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="14210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash_t<sp/>m_hashSuffix;</highlight></codeline>
<codeline lineno="14211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="14212"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>unnamed<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14213"><highlight class="normal"></highlight></codeline>
<codeline lineno="14214"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;TestCase&gt;<sp/>sortTests(<sp/>IConfig<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config,<sp/>std::vector&lt;TestCase&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>unsortedTestCases<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>config.runOrder()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RunTests::InDeclarationOrder:</highlight></codeline>
<codeline lineno="14217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>already<sp/>in<sp/>declaration<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14219"><highlight class="normal"></highlight></codeline>
<codeline lineno="14220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RunTests::InLexicographicalOrder:<sp/>{</highlight></codeline>
<codeline lineno="14221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;TestCase&gt;<sp/>sorted<sp/>=<sp/>unsortedTestCases;</highlight></codeline>
<codeline lineno="14222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sort(<sp/>sorted.begin(),<sp/>sorted.end()<sp/>);</highlight></codeline>
<codeline lineno="14223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sorted;</highlight></codeline>
<codeline lineno="14224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14225"><highlight class="normal"></highlight></codeline>
<codeline lineno="14226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RunTests::InRandomOrder:<sp/>{</highlight></codeline>
<codeline lineno="14227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seedRng(<sp/>config<sp/>);</highlight></codeline>
<codeline lineno="14228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestHasher<sp/>h{<sp/>config.rngSeed()<sp/>};</highlight></codeline>
<codeline lineno="14229"><highlight class="normal"></highlight></codeline>
<codeline lineno="14230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>hashedTest<sp/>=<sp/>std::pair&lt;TestHasher::hash_t,<sp/>TestCase<sp/>const*&gt;;</highlight></codeline>
<codeline lineno="14231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;hashedTest&gt;<sp/>indexed_tests;</highlight></codeline>
<codeline lineno="14232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexed_tests.reserve(<sp/>unsortedTestCases.size()<sp/>);</highlight></codeline>
<codeline lineno="14233"><highlight class="normal"></highlight></codeline>
<codeline lineno="14234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCase<sp/>:<sp/>unsortedTestCases)<sp/>{</highlight></codeline>
<codeline lineno="14235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indexed_tests.emplace_back(h(testCase),<sp/>&amp;testCase);</highlight></codeline>
<codeline lineno="14236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14237"><highlight class="normal"></highlight></codeline>
<codeline lineno="14238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sort(indexed_tests.begin(),<sp/>indexed_tests.end(),</highlight></codeline>
<codeline lineno="14239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](hashedTest<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lhs,<sp/>hashedTest<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="14240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(lhs.first<sp/>==<sp/>rhs.first)<sp/>{</highlight></codeline>
<codeline lineno="14241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>lhs.second-&gt;name<sp/>&lt;<sp/>rhs.second-&gt;name;</highlight></codeline>
<codeline lineno="14242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.first<sp/>&lt;<sp/>rhs.first;</highlight></codeline>
<codeline lineno="14244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="14245"><highlight class="normal"></highlight></codeline>
<codeline lineno="14246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;TestCase&gt;<sp/>sorted;</highlight></codeline>
<codeline lineno="14247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sorted.reserve(<sp/>indexed_tests.size()<sp/>);</highlight></codeline>
<codeline lineno="14248"><highlight class="normal"></highlight></codeline>
<codeline lineno="14249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>hashed<sp/>:<sp/>indexed_tests)<sp/>{</highlight></codeline>
<codeline lineno="14250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sorted.emplace_back(*hashed.second);</highlight></codeline>
<codeline lineno="14251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14252"><highlight class="normal"></highlight></codeline>
<codeline lineno="14253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sorted;</highlight></codeline>
<codeline lineno="14254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unsortedTestCases;</highlight></codeline>
<codeline lineno="14257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14258"><highlight class="normal"></highlight></codeline>
<codeline lineno="14259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isThrowSafe(<sp/>TestCase<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCase,<sp/>IConfig<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!testCase.throws()<sp/>||<sp/>config.allowThrows();</highlight></codeline>
<codeline lineno="14261"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14262"><highlight class="normal"></highlight></codeline>
<codeline lineno="14263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>matchTest(<sp/>TestCase<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCase,<sp/>TestSpec<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testSpec,<sp/>IConfig<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>testSpec.matches(<sp/>testCase<sp/>)<sp/>&amp;&amp;<sp/>isThrowSafe(<sp/>testCase,<sp/>config<sp/>);</highlight></codeline>
<codeline lineno="14265"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14266"><highlight class="normal"></highlight></codeline>
<codeline lineno="14267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>enforceNoDuplicateTestCases(<sp/>std::vector&lt;TestCase&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>functions<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;TestCase&gt;<sp/>seenFunctions;</highlight></codeline>
<codeline lineno="14269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>:<sp/>functions<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>prev<sp/>=<sp/>seenFunctions.insert(<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="14271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_ENFORCE(<sp/>prev.second,</highlight></codeline>
<codeline lineno="14272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;error:<sp/>TEST_CASE(<sp/>\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">.name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;<sp/>)<sp/>already<sp/>defined.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tFirst<sp/>seen<sp/>at<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>prev.first-&gt;getTestCaseInfo().lineInfo<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\tRedefined<sp/>at<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">.getTestCaseInfo().lineInfo<sp/>);</highlight></codeline>
<codeline lineno="14275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14277"><highlight class="normal"></highlight></codeline>
<codeline lineno="14278"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;TestCase&gt;<sp/>filterTests(<sp/>std::vector&lt;TestCase&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCases,<sp/>TestSpec<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testSpec,<sp/>IConfig<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;TestCase&gt;<sp/>filtered;</highlight></codeline>
<codeline lineno="14280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filtered.reserve(<sp/>testCases.size()<sp/>);</highlight></codeline>
<codeline lineno="14281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCase<sp/>:<sp/>testCases)<sp/>{</highlight></codeline>
<codeline lineno="14282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((!testSpec.hasFilters()<sp/>&amp;&amp;<sp/>!testCase.isHidden())<sp/>||</highlight></codeline>
<codeline lineno="14283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(testSpec.hasFilters()<sp/>&amp;&amp;<sp/>matchTest(testCase,<sp/>testSpec,<sp/>config)))<sp/>{</highlight></codeline>
<codeline lineno="14284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filtered.push_back(testCase);</highlight></codeline>
<codeline lineno="14285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>filtered;</highlight></codeline>
<codeline lineno="14288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14289"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;TestCase&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>getAllTestCasesSorted(<sp/>IConfig<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getRegistryHub().getTestCaseRegistry().getAllTestsSorted(<sp/>config<sp/>);</highlight></codeline>
<codeline lineno="14291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14292"><highlight class="normal"></highlight></codeline>
<codeline lineno="14293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestRegistry::registerTest(<sp/>TestCase<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCase<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/>testCase.getTestCaseInfo().name;</highlight></codeline>
<codeline lineno="14295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>name.empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReusableStringStream<sp/>rss;</highlight></codeline>
<codeline lineno="14297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Anonymous<sp/>test<sp/>case<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>++m_unnamedCount;</highlight></codeline>
<codeline lineno="14298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>registerTest(<sp/>testCase.withName(<sp/>rss.str()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="14299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_functions.push_back(<sp/>testCase<sp/>);</highlight></codeline>
<codeline lineno="14301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14302"><highlight class="normal"></highlight></codeline>
<codeline lineno="14303"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;TestCase&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>TestRegistry::getAllTests()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_functions;</highlight></codeline>
<codeline lineno="14305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14306"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;TestCase&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>TestRegistry::getAllTestsSorted(<sp/>IConfig<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_sortedFunctions.empty()<sp/>)</highlight></codeline>
<codeline lineno="14308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enforceNoDuplicateTestCases(<sp/>m_functions<sp/>);</highlight></codeline>
<codeline lineno="14309"><highlight class="normal"></highlight></codeline>
<codeline lineno="14310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><sp/>m_currentSortOrder<sp/>!=<sp/>config.runOrder()<sp/>||<sp/>m_sortedFunctions.empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_sortedFunctions<sp/>=<sp/>sortTests(<sp/>config,<sp/>m_functions<sp/>);</highlight></codeline>
<codeline lineno="14312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_currentSortOrder<sp/>=<sp/>config.runOrder();</highlight></codeline>
<codeline lineno="14313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_sortedFunctions;</highlight></codeline>
<codeline lineno="14315"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14316"><highlight class="normal"></highlight></codeline>
<codeline lineno="14318"><highlight class="normal"><sp/><sp/><sp/><sp/>TestInvokerAsFunction::TestInvokerAsFunction(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(*testAsFunction)()<sp/>)<sp/>noexcept<sp/>:<sp/>m_testAsFunction(<sp/>testAsFunction<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="14319"><highlight class="normal"></highlight></codeline>
<codeline lineno="14320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestInvokerAsFunction::invoke()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_testAsFunction();</highlight></codeline>
<codeline lineno="14322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14323"><highlight class="normal"></highlight></codeline>
<codeline lineno="14324"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>extractClassName(<sp/>StringRef<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>classOrQualifiedMethodName<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>className(classOrQualifiedMethodName);</highlight></codeline>
<codeline lineno="14326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>startsWith(<sp/>className,<sp/></highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal"><sp/>)<sp/>)</highlight></codeline>
<codeline lineno="14327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="14328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>lastColons<sp/>=<sp/>className.rfind(<sp/></highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="14329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>penultimateColons<sp/>=<sp/>className.rfind(<sp/></highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal">,<sp/>lastColons-1<sp/>);</highlight></codeline>
<codeline lineno="14330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>penultimateColons<sp/>==<sp/>std::string::npos<sp/>)</highlight></codeline>
<codeline lineno="14331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>penultimateColons<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="14332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>className<sp/>=<sp/>className.substr(<sp/>penultimateColons,<sp/>lastColons-penultimateColons<sp/>);</highlight></codeline>
<codeline lineno="14333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>className;</highlight></codeline>
<codeline lineno="14335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14336"><highlight class="normal"></highlight></codeline>
<codeline lineno="14337"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14338"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_test_case_registry_impl.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14339"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_test_case_tracker.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14340"><highlight class="normal"></highlight></codeline>
<codeline lineno="14341"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14342"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14343"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14344"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14345"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14346"><highlight class="normal"></highlight></codeline>
<codeline lineno="14347"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14348"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>clang<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14349"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wexit-time-destructors&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14350"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14351"><highlight class="normal"></highlight></codeline>
<codeline lineno="14352"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="14353"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">TestCaseTracking<sp/>{</highlight></codeline>
<codeline lineno="14354"><highlight class="normal"></highlight></codeline>
<codeline lineno="14355"><highlight class="normal"><sp/><sp/><sp/><sp/>NameAndLocation::NameAndLocation(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_name,<sp/>SourceLineInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_location<sp/>)</highlight></codeline>
<codeline lineno="14356"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>name(<sp/>_name<sp/>),</highlight></codeline>
<codeline lineno="14357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>location(<sp/>_location<sp/>)</highlight></codeline>
<codeline lineno="14358"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="14359"><highlight class="normal"></highlight></codeline>
<codeline lineno="14360"><highlight class="normal"><sp/><sp/><sp/><sp/>ITracker::~ITracker()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14361"><highlight class="normal"></highlight></codeline>
<codeline lineno="14362"><highlight class="normal"><sp/><sp/><sp/><sp/>ITracker&amp;<sp/>TrackerContext::startRun()<sp/>{</highlight></codeline>
<codeline lineno="14363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_rootTracker<sp/>=<sp/>std::make_shared&lt;SectionTracker&gt;(<sp/>NameAndLocation(<sp/></highlight><highlight class="stringliteral">&quot;{root}&quot;</highlight><highlight class="normal">,<sp/>CATCH_INTERNAL_LINEINFO<sp/>),<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="14364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_currentTracker<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_runState<sp/>=<sp/>Executing;</highlight></codeline>
<codeline lineno="14366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*m_rootTracker;</highlight></codeline>
<codeline lineno="14367"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14368"><highlight class="normal"></highlight></codeline>
<codeline lineno="14369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TrackerContext::endRun()<sp/>{</highlight></codeline>
<codeline lineno="14370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_rootTracker.reset();</highlight></codeline>
<codeline lineno="14371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_currentTracker<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_runState<sp/>=<sp/>NotStarted;</highlight></codeline>
<codeline lineno="14373"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14374"><highlight class="normal"></highlight></codeline>
<codeline lineno="14375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TrackerContext::startCycle()<sp/>{</highlight></codeline>
<codeline lineno="14376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_currentTracker<sp/>=<sp/>m_rootTracker.get();</highlight></codeline>
<codeline lineno="14377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_runState<sp/>=<sp/>Executing;</highlight></codeline>
<codeline lineno="14378"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TrackerContext::completeCycle()<sp/>{</highlight></codeline>
<codeline lineno="14380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_runState<sp/>=<sp/>CompletedCycle;</highlight></codeline>
<codeline lineno="14381"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14382"><highlight class="normal"></highlight></codeline>
<codeline lineno="14383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TrackerContext::completedCycle()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_runState<sp/>==<sp/>CompletedCycle;</highlight></codeline>
<codeline lineno="14385"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14386"><highlight class="normal"><sp/><sp/><sp/><sp/>ITracker&amp;<sp/>TrackerContext::currentTracker()<sp/>{</highlight></codeline>
<codeline lineno="14387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*m_currentTracker;</highlight></codeline>
<codeline lineno="14388"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TrackerContext::setCurrentTracker(<sp/>ITracker*<sp/>tracker<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_currentTracker<sp/>=<sp/>tracker;</highlight></codeline>
<codeline lineno="14391"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14392"><highlight class="normal"></highlight></codeline>
<codeline lineno="14393"><highlight class="normal"><sp/><sp/><sp/><sp/>TrackerBase::TrackerBase(<sp/>NameAndLocation<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>nameAndLocation,<sp/>TrackerContext&amp;<sp/>ctx,<sp/>ITracker*<sp/>parent<sp/>):</highlight></codeline>
<codeline lineno="14394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ITracker(nameAndLocation),</highlight></codeline>
<codeline lineno="14395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_ctx(<sp/>ctx<sp/>),</highlight></codeline>
<codeline lineno="14396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_parent(<sp/>parent<sp/>)</highlight></codeline>
<codeline lineno="14397"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="14398"><highlight class="normal"></highlight></codeline>
<codeline lineno="14399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TrackerBase::isComplete()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_runState<sp/>==<sp/>CompletedSuccessfully<sp/>||<sp/>m_runState<sp/>==<sp/>Failed;</highlight></codeline>
<codeline lineno="14401"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TrackerBase::isSuccessfullyCompleted()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_runState<sp/>==<sp/>CompletedSuccessfully;</highlight></codeline>
<codeline lineno="14404"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TrackerBase::isOpen()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_runState<sp/>!=<sp/>NotStarted<sp/>&amp;&amp;<sp/>!isComplete();</highlight></codeline>
<codeline lineno="14407"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TrackerBase::hasChildren()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!m_children.empty();</highlight></codeline>
<codeline lineno="14410"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14411"><highlight class="normal"></highlight></codeline>
<codeline lineno="14412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TrackerBase::addChild(<sp/>ITrackerPtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>child<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_children.push_back(<sp/>child<sp/>);</highlight></codeline>
<codeline lineno="14414"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14415"><highlight class="normal"></highlight></codeline>
<codeline lineno="14416"><highlight class="normal"><sp/><sp/><sp/><sp/>ITrackerPtr<sp/>TrackerBase::findChild(<sp/>NameAndLocation<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>nameAndLocation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::find_if(<sp/>m_children.begin(),<sp/>m_children.end(),</highlight></codeline>
<codeline lineno="14418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;nameAndLocation](<sp/>ITrackerPtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>tracker<sp/>){</highlight></codeline>
<codeline lineno="14419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return</highlight></codeline>
<codeline lineno="14420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tracker-&gt;nameAndLocation().location<sp/>==<sp/>nameAndLocation.location<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="14421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tracker-&gt;nameAndLocation().name<sp/>==<sp/>nameAndLocation.name;</highlight></codeline>
<codeline lineno="14422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>);</highlight></codeline>
<codeline lineno="14423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(<sp/>it<sp/>!=<sp/>m_children.end()<sp/>)</highlight></codeline>
<codeline lineno="14424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>*it</highlight></codeline>
<codeline lineno="14425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14426"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14427"><highlight class="normal"><sp/><sp/><sp/><sp/>ITracker&amp;<sp/>TrackerBase::parent()<sp/>{</highlight></codeline>
<codeline lineno="14428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>m_parent<sp/>);<sp/></highlight><highlight class="comment">//<sp/>Should<sp/>always<sp/>be<sp/>non-null<sp/>except<sp/>for<sp/>root</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*m_parent;</highlight></codeline>
<codeline lineno="14430"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14431"><highlight class="normal"></highlight></codeline>
<codeline lineno="14432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TrackerBase::openChild()<sp/>{</highlight></codeline>
<codeline lineno="14433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_runState<sp/>!=<sp/>ExecutingChildren<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_runState<sp/>=<sp/>ExecutingChildren;</highlight></codeline>
<codeline lineno="14435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_parent<sp/>)</highlight></codeline>
<codeline lineno="14436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_parent-&gt;openChild();</highlight></codeline>
<codeline lineno="14437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14438"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14439"><highlight class="normal"></highlight></codeline>
<codeline lineno="14440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TrackerBase::isSectionTracker()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="14441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TrackerBase::isGeneratorTracker()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="14442"><highlight class="normal"></highlight></codeline>
<codeline lineno="14443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TrackerBase::open()<sp/>{</highlight></codeline>
<codeline lineno="14444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_runState<sp/>=<sp/>Executing;</highlight></codeline>
<codeline lineno="14445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moveToThis();</highlight></codeline>
<codeline lineno="14446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_parent<sp/>)</highlight></codeline>
<codeline lineno="14447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_parent-&gt;openChild();</highlight></codeline>
<codeline lineno="14448"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14449"><highlight class="normal"></highlight></codeline>
<codeline lineno="14450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TrackerBase::close()<sp/>{</highlight></codeline>
<codeline lineno="14451"><highlight class="normal"></highlight></codeline>
<codeline lineno="14452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Close<sp/>any<sp/>still<sp/>open<sp/>children<sp/>(e.g.<sp/>generators)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>&amp;m_ctx.currentTracker()<sp/>!=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="14454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_ctx.currentTracker().close();</highlight></codeline>
<codeline lineno="14455"><highlight class="normal"></highlight></codeline>
<codeline lineno="14456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>m_runState<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NeedsAnotherRun:</highlight></codeline>
<codeline lineno="14458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14459"><highlight class="normal"></highlight></codeline>
<codeline lineno="14460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Executing:</highlight></codeline>
<codeline lineno="14461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_runState<sp/>=<sp/>CompletedSuccessfully;</highlight></codeline>
<codeline lineno="14462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ExecutingChildren:</highlight></codeline>
<codeline lineno="14464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>std::all_of(m_children.begin(),<sp/>m_children.end(),<sp/>[](ITrackerPtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>t){<sp/>return<sp/>t-&gt;isComplete();<sp/>})<sp/>)</highlight></codeline>
<codeline lineno="14465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_runState<sp/>=<sp/>CompletedSuccessfully;</highlight></codeline>
<codeline lineno="14466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14467"><highlight class="normal"></highlight></codeline>
<codeline lineno="14468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NotStarted:</highlight></codeline>
<codeline lineno="14469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CompletedSuccessfully:</highlight></codeline>
<codeline lineno="14470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Failed:</highlight></codeline>
<codeline lineno="14471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;Illogical<sp/>state:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_runState<sp/>);</highlight></codeline>
<codeline lineno="14472"><highlight class="normal"></highlight></codeline>
<codeline lineno="14473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="14474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>state:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_runState<sp/>);</highlight></codeline>
<codeline lineno="14475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moveToParent();</highlight></codeline>
<codeline lineno="14477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_ctx.completeCycle();</highlight></codeline>
<codeline lineno="14478"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TrackerBase::fail()<sp/>{</highlight></codeline>
<codeline lineno="14480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_runState<sp/>=<sp/>Failed;</highlight></codeline>
<codeline lineno="14481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_parent<sp/>)</highlight></codeline>
<codeline lineno="14482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_parent-&gt;markAsNeedingAnotherRun();</highlight></codeline>
<codeline lineno="14483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>moveToParent();</highlight></codeline>
<codeline lineno="14484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_ctx.completeCycle();</highlight></codeline>
<codeline lineno="14485"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TrackerBase::markAsNeedingAnotherRun()<sp/>{</highlight></codeline>
<codeline lineno="14487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_runState<sp/>=<sp/>NeedsAnotherRun;</highlight></codeline>
<codeline lineno="14488"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14489"><highlight class="normal"></highlight></codeline>
<codeline lineno="14490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TrackerBase::moveToParent()<sp/>{</highlight></codeline>
<codeline lineno="14491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>m_parent<sp/>);</highlight></codeline>
<codeline lineno="14492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_ctx.setCurrentTracker(<sp/>m_parent<sp/>);</highlight></codeline>
<codeline lineno="14493"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TrackerBase::moveToThis()<sp/>{</highlight></codeline>
<codeline lineno="14495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_ctx.setCurrentTracker(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="14496"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14497"><highlight class="normal"></highlight></codeline>
<codeline lineno="14498"><highlight class="normal"><sp/><sp/><sp/><sp/>SectionTracker::SectionTracker(<sp/>NameAndLocation<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>nameAndLocation,<sp/>TrackerContext&amp;<sp/>ctx,<sp/>ITracker*<sp/>parent<sp/>)</highlight></codeline>
<codeline lineno="14499"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>TrackerBase(<sp/>nameAndLocation,<sp/>ctx,<sp/>parent<sp/>),</highlight></codeline>
<codeline lineno="14500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_trimmed_name(trim(nameAndLocation.name))</highlight></codeline>
<codeline lineno="14501"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="14502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>parent<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>!parent-&gt;isSectionTracker()<sp/>)</highlight></codeline>
<codeline lineno="14504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent<sp/>=<sp/>&amp;parent-&gt;parent();</highlight></codeline>
<codeline lineno="14505"><highlight class="normal"></highlight></codeline>
<codeline lineno="14506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SectionTracker&amp;<sp/>parentSection<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">SectionTracker&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>*parent<sp/>);</highlight></codeline>
<codeline lineno="14507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addNextFilters(<sp/>parentSection.m_filters<sp/>);</highlight></codeline>
<codeline lineno="14508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14509"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14510"><highlight class="normal"></highlight></codeline>
<codeline lineno="14511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SectionTracker::isComplete()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>complete<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14513"><highlight class="normal"></highlight></codeline>
<codeline lineno="14514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_filters.empty()</highlight></codeline>
<codeline lineno="14515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>m_filters[0]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>std::find(m_filters.begin(),<sp/>m_filters.end(),<sp/>m_trimmed_name)<sp/>!=<sp/>m_filters.end())<sp/>{</highlight></codeline>
<codeline lineno="14517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complete<sp/>=<sp/>TrackerBase::isComplete();</highlight></codeline>
<codeline lineno="14518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>complete;</highlight></codeline>
<codeline lineno="14520"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14521"><highlight class="normal"></highlight></codeline>
<codeline lineno="14522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SectionTracker::isSectionTracker()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="14523"><highlight class="normal"></highlight></codeline>
<codeline lineno="14524"><highlight class="normal"><sp/><sp/><sp/><sp/>SectionTracker&amp;<sp/>SectionTracker::acquire(<sp/>TrackerContext&amp;<sp/>ctx,<sp/>NameAndLocation<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>nameAndLocation<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;SectionTracker&gt;<sp/>section;</highlight></codeline>
<codeline lineno="14526"><highlight class="normal"></highlight></codeline>
<codeline lineno="14527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ITracker&amp;<sp/>currentTracker<sp/>=<sp/>ctx.currentTracker();</highlight></codeline>
<codeline lineno="14528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>ITrackerPtr<sp/>childTracker<sp/>=<sp/>currentTracker.findChild(<sp/>nameAndLocation<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>childTracker<sp/>);</highlight></codeline>
<codeline lineno="14530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>childTracker-&gt;isSectionTracker()<sp/>);</highlight></codeline>
<codeline lineno="14531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>section<sp/>=<sp/>std::static_pointer_cast&lt;SectionTracker&gt;(<sp/>childTracker<sp/>);</highlight></codeline>
<codeline lineno="14532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="14534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>section<sp/>=<sp/>std::make_shared&lt;SectionTracker&gt;(<sp/>nameAndLocation,<sp/>ctx,<sp/>&amp;currentTracker<sp/>);</highlight></codeline>
<codeline lineno="14535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentTracker.addChild(<sp/>section<sp/>);</highlight></codeline>
<codeline lineno="14536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!ctx.completedCycle()<sp/>)</highlight></codeline>
<codeline lineno="14538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>section-&gt;tryOpen();</highlight></codeline>
<codeline lineno="14539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*section;</highlight></codeline>
<codeline lineno="14540"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14541"><highlight class="normal"></highlight></codeline>
<codeline lineno="14542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SectionTracker::tryOpen()<sp/>{</highlight></codeline>
<codeline lineno="14543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!isComplete()<sp/>)</highlight></codeline>
<codeline lineno="14544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>open();</highlight></codeline>
<codeline lineno="14545"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14546"><highlight class="normal"></highlight></codeline>
<codeline lineno="14547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SectionTracker::addInitialFilters(<sp/>std::vector&lt;std::string&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>filters<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!filters.empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_filters.reserve(<sp/>m_filters.size()<sp/>+<sp/>filters.size()<sp/>+<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="14550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_filters.emplace_back(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>Root<sp/>-<sp/>should<sp/>never<sp/>be<sp/>consulted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_filters.emplace_back(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>Test<sp/>Case<sp/>-<sp/>not<sp/>a<sp/>section<sp/>filter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_filters.insert(<sp/>m_filters.end(),<sp/>filters.begin(),<sp/>filters.end()<sp/>);</highlight></codeline>
<codeline lineno="14553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14554"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SectionTracker::addNextFilters(<sp/>std::vector&lt;std::string&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>filters<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>filters.size()<sp/>&gt;<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="14557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_filters.insert(<sp/>m_filters.end(),<sp/>filters.begin()+1,<sp/>filters.end()<sp/>);</highlight></codeline>
<codeline lineno="14558"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14559"><highlight class="normal"></highlight></codeline>
<codeline lineno="14560"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>SectionTracker::getFilters()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_filters;</highlight></codeline>
<codeline lineno="14562"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14563"><highlight class="normal"></highlight></codeline>
<codeline lineno="14564"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>SectionTracker::trimmedName()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_trimmed_name;</highlight></codeline>
<codeline lineno="14566"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14567"><highlight class="normal"></highlight></codeline>
<codeline lineno="14568"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>TestCaseTracking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14569"><highlight class="normal"></highlight></codeline>
<codeline lineno="14570"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TestCaseTracking::ITracker;</highlight></codeline>
<codeline lineno="14571"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TestCaseTracking::TrackerContext;</highlight></codeline>
<codeline lineno="14572"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TestCaseTracking::SectionTracker;</highlight></codeline>
<codeline lineno="14573"><highlight class="normal"></highlight></codeline>
<codeline lineno="14574"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14575"><highlight class="normal"></highlight></codeline>
<codeline lineno="14576"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14577"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>clang<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14578"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14579"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_test_case_tracker.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14580"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_test_registry.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14581"><highlight class="normal"></highlight></codeline>
<codeline lineno="14582"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="14583"><highlight class="normal"></highlight></codeline>
<codeline lineno="14584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>makeTestInvoker(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(*testAsFunction)()<sp/>)<sp/>noexcept<sp/>-&gt;<sp/>ITestInvoker*<sp/>{</highlight></codeline>
<codeline lineno="14585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(std::nothrow)<sp/>TestInvokerAsFunction(<sp/>testAsFunction<sp/>);</highlight></codeline>
<codeline lineno="14586"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14587"><highlight class="normal"></highlight></codeline>
<codeline lineno="14588"><highlight class="normal"><sp/><sp/><sp/><sp/>NameAndTags::NameAndTags(<sp/>StringRef<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name_<sp/>,<sp/>StringRef<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>tags_<sp/>)<sp/>noexcept<sp/>:<sp/>name(<sp/>name_<sp/>),<sp/>tags(<sp/>tags_<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="14589"><highlight class="normal"></highlight></codeline>
<codeline lineno="14590"><highlight class="normal"><sp/><sp/><sp/><sp/>AutoReg::AutoReg(<sp/>ITestInvoker*<sp/>invoker,<sp/>SourceLineInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>lineInfo,<sp/>StringRef<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>classOrMethod,<sp/>NameAndTags<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>nameAndTags<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="14591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_TRY<sp/>{</highlight></codeline>
<codeline lineno="14592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getMutableRegistryHub()</highlight></codeline>
<codeline lineno="14593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.registerTest(</highlight></codeline>
<codeline lineno="14594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>makeTestCase(</highlight></codeline>
<codeline lineno="14595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invoker,</highlight></codeline>
<codeline lineno="14596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extractClassName(<sp/>classOrMethod<sp/>),</highlight></codeline>
<codeline lineno="14597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nameAndTags,</highlight></codeline>
<codeline lineno="14598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lineInfo));</highlight></codeline>
<codeline lineno="14599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>CATCH_CATCH_ALL<sp/>{</highlight></codeline>
<codeline lineno="14600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>throw<sp/>when<sp/>constructing<sp/>global<sp/>objects,<sp/>instead<sp/>register<sp/>the<sp/>exception<sp/>to<sp/>be<sp/>processed<sp/>later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getMutableRegistryHub().registerStartupException();</highlight></codeline>
<codeline lineno="14602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14603"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14604"><highlight class="normal"></highlight></codeline>
<codeline lineno="14605"><highlight class="normal"><sp/><sp/><sp/><sp/>AutoReg::~AutoReg()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14607"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_test_registry.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14608"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_test_spec.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14609"><highlight class="normal"></highlight></codeline>
<codeline lineno="14610"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14611"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14612"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14613"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14614"><highlight class="normal"></highlight></codeline>
<codeline lineno="14615"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="14616"><highlight class="normal"></highlight></codeline>
<codeline lineno="14617"><highlight class="normal"><sp/><sp/><sp/><sp/>TestSpec::Pattern::Pattern(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name<sp/>)</highlight></codeline>
<codeline lineno="14618"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>m_name(<sp/>name<sp/>)</highlight></codeline>
<codeline lineno="14619"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="14620"><highlight class="normal"></highlight></codeline>
<codeline lineno="14621"><highlight class="normal"><sp/><sp/><sp/><sp/>TestSpec::Pattern::~Pattern()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14622"><highlight class="normal"></highlight></codeline>
<codeline lineno="14623"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>TestSpec::Pattern::name()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_name;</highlight></codeline>
<codeline lineno="14625"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14626"><highlight class="normal"></highlight></codeline>
<codeline lineno="14627"><highlight class="normal"><sp/><sp/><sp/><sp/>TestSpec::NamePattern::NamePattern(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>filterString<sp/>)</highlight></codeline>
<codeline lineno="14628"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>Pattern(<sp/>filterString<sp/>)</highlight></codeline>
<codeline lineno="14629"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_wildcardPattern(<sp/>toLower(<sp/>name<sp/>),<sp/>CaseSensitive::No<sp/>)</highlight></codeline>
<codeline lineno="14630"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="14631"><highlight class="normal"></highlight></codeline>
<codeline lineno="14632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TestSpec::NamePattern::matches(<sp/>TestCaseInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCase<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_wildcardPattern.matches(<sp/>testCase.name<sp/>);</highlight></codeline>
<codeline lineno="14634"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14635"><highlight class="normal"></highlight></codeline>
<codeline lineno="14636"><highlight class="normal"><sp/><sp/><sp/><sp/>TestSpec::TagPattern::TagPattern(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>tag,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>filterString<sp/>)</highlight></codeline>
<codeline lineno="14637"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>Pattern(<sp/>filterString<sp/>)</highlight></codeline>
<codeline lineno="14638"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_tag(<sp/>toLower(<sp/>tag<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="14639"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="14640"><highlight class="normal"></highlight></codeline>
<codeline lineno="14641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TestSpec::TagPattern::matches(<sp/>TestCaseInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCase<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::find(begin(testCase.lcaseTags),</highlight></codeline>
<codeline lineno="14643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end(testCase.lcaseTags),</highlight></codeline>
<codeline lineno="14644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_tag)<sp/>!=<sp/>end(testCase.lcaseTags);</highlight></codeline>
<codeline lineno="14645"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14646"><highlight class="normal"></highlight></codeline>
<codeline lineno="14647"><highlight class="normal"><sp/><sp/><sp/><sp/>TestSpec::ExcludedPattern::ExcludedPattern(<sp/>PatternPtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>underlyingPattern<sp/>)</highlight></codeline>
<codeline lineno="14648"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>Pattern(<sp/>underlyingPattern-&gt;name()<sp/>)</highlight></codeline>
<codeline lineno="14649"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>m_underlyingPattern(<sp/>underlyingPattern<sp/>)</highlight></codeline>
<codeline lineno="14650"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="14651"><highlight class="normal"></highlight></codeline>
<codeline lineno="14652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TestSpec::ExcludedPattern::matches(<sp/>TestCaseInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCase<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!m_underlyingPattern-&gt;matches(<sp/>testCase<sp/>);</highlight></codeline>
<codeline lineno="14654"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14655"><highlight class="normal"></highlight></codeline>
<codeline lineno="14656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TestSpec::Filter::matches(<sp/>TestCaseInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCase<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::all_of(<sp/>m_patterns.begin(),<sp/>m_patterns.end(),<sp/>[&amp;](<sp/>PatternPtr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p<sp/>){<sp/>return<sp/>p-&gt;matches(<sp/>testCase<sp/>);<sp/>}<sp/>);</highlight></codeline>
<codeline lineno="14658"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14659"><highlight class="normal"></highlight></codeline>
<codeline lineno="14660"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>TestSpec::Filter::name()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name;</highlight></codeline>
<codeline lineno="14662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>p<sp/>:<sp/>m_patterns<sp/>)</highlight></codeline>
<codeline lineno="14663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>+=<sp/>p-&gt;name();</highlight></codeline>
<codeline lineno="14664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name;</highlight></codeline>
<codeline lineno="14665"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14666"><highlight class="normal"></highlight></codeline>
<codeline lineno="14667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TestSpec::hasFilters()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!m_filters.empty();</highlight></codeline>
<codeline lineno="14669"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14670"><highlight class="normal"></highlight></codeline>
<codeline lineno="14671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TestSpec::matches(<sp/>TestCaseInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCase<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::any_of(<sp/>m_filters.begin(),<sp/>m_filters.end(),<sp/>[&amp;](<sp/>Filter<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>f<sp/>){<sp/>return<sp/>f.matches(<sp/>testCase<sp/>);<sp/>}<sp/>);</highlight></codeline>
<codeline lineno="14673"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14674"><highlight class="normal"></highlight></codeline>
<codeline lineno="14675"><highlight class="normal"><sp/><sp/><sp/><sp/>TestSpec::Matches<sp/>TestSpec::matchesByFilter(<sp/>std::vector&lt;TestCase&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCases,<sp/>IConfig<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="14676"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matches<sp/>matches(<sp/>m_filters.size()<sp/>);</highlight></codeline>
<codeline lineno="14678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(<sp/>m_filters.begin(),<sp/>m_filters.end(),<sp/>matches.begin(),<sp/>[&amp;](<sp/>Filter<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>filter<sp/>){</highlight></codeline>
<codeline lineno="14679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;TestCase<sp/>const*&gt;<sp/>currentMatches;</highlight></codeline>
<codeline lineno="14680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for(<sp/>auto<sp/>const&amp;<sp/>test<sp/>:<sp/>testCases<sp/>)</highlight></codeline>
<codeline lineno="14681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(<sp/>isThrowSafe(<sp/>test,<sp/>config<sp/>)<sp/>&amp;&amp;<sp/>filter.matches(<sp/>test<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="14682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentMatches.emplace_back(<sp/>&amp;test<sp/>);</highlight></codeline>
<codeline lineno="14683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>FilterMatch{<sp/>filter.name(),<sp/>currentMatches<sp/>};</highlight></codeline>
<codeline lineno="14684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>);</highlight></codeline>
<codeline lineno="14685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>matches;</highlight></codeline>
<codeline lineno="14686"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14687"><highlight class="normal"></highlight></codeline>
<codeline lineno="14688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestSpec::vectorStrings&amp;<sp/>TestSpec::getInvalidArgs()</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>(m_invalidArgs);</highlight></codeline>
<codeline lineno="14690"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14691"><highlight class="normal"></highlight></codeline>
<codeline lineno="14692"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14693"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_test_spec.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14694"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_test_spec_parser.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14695"><highlight class="normal"></highlight></codeline>
<codeline lineno="14696"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="14697"><highlight class="normal"></highlight></codeline>
<codeline lineno="14698"><highlight class="normal"><sp/><sp/><sp/><sp/>TestSpecParser::TestSpecParser(<sp/>ITagAliasRegistry<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>tagAliases<sp/>)<sp/>:<sp/>m_tagAliases(<sp/>&amp;tagAliases<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="14699"><highlight class="normal"></highlight></codeline>
<codeline lineno="14700"><highlight class="normal"><sp/><sp/><sp/><sp/>TestSpecParser&amp;<sp/>TestSpecParser::parse(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>arg<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_mode<sp/>=<sp/>None;</highlight></codeline>
<codeline lineno="14702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_exclusion<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_arg<sp/>=<sp/>m_tagAliases-&gt;expandAliases(<sp/>arg<sp/>);</highlight></codeline>
<codeline lineno="14704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_escapeChars.clear();</highlight></codeline>
<codeline lineno="14705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_substring.reserve(m_arg.size());</highlight></codeline>
<codeline lineno="14706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_patternName.reserve(m_arg.size());</highlight></codeline>
<codeline lineno="14707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_realPatternPos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="14708"><highlight class="normal"></highlight></codeline>
<codeline lineno="14709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>m_pos<sp/>=<sp/>0;<sp/>m_pos<sp/>&lt;<sp/>m_arg.size();<sp/>++m_pos<sp/>)</highlight></codeline>
<codeline lineno="14710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>visitChar<sp/>fails</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(<sp/>!visitChar(<sp/>m_arg[m_pos]<sp/>)<sp/>){</highlight></codeline>
<codeline lineno="14712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_testSpec.m_invalidArgs.push_back(arg);</highlight></codeline>
<codeline lineno="14713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endMode();</highlight></codeline>
<codeline lineno="14716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14717"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14718"><highlight class="normal"><sp/><sp/><sp/><sp/>TestSpec<sp/>TestSpecParser::testSpec()<sp/>{</highlight></codeline>
<codeline lineno="14719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addFilter();</highlight></codeline>
<codeline lineno="14720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_testSpec;</highlight></codeline>
<codeline lineno="14721"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TestSpecParser::visitChar(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(m_mode<sp/>!=<sp/>EscapedName)<sp/>&amp;&amp;<sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>escape();</highlight></codeline>
<codeline lineno="14725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addCharToPattern(c);</highlight></codeline>
<codeline lineno="14726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((m_mode<sp/>!=<sp/>EscapedName)<sp/>&amp;&amp;<sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">)<sp/>)<sp/><sp/>{</highlight></codeline>
<codeline lineno="14728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>separate();</highlight></codeline>
<codeline lineno="14729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14730"><highlight class="normal"></highlight></codeline>
<codeline lineno="14731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>m_mode<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>None:</highlight></codeline>
<codeline lineno="14733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>processNoneChar(<sp/>c<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="14734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Name:</highlight></codeline>
<codeline lineno="14737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>processNameChar(<sp/>c<sp/>);</highlight></codeline>
<codeline lineno="14738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EscapedName:</highlight></codeline>
<codeline lineno="14740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endMode();</highlight></codeline>
<codeline lineno="14741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addCharToPattern(c);</highlight></codeline>
<codeline lineno="14742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="14744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Tag:</highlight></codeline>
<codeline lineno="14745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>QuotedName:</highlight></codeline>
<codeline lineno="14746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>processOtherChar(<sp/>c<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="14747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14750"><highlight class="normal"></highlight></codeline>
<codeline lineno="14751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_substring<sp/>+=<sp/>c;</highlight></codeline>
<codeline lineno="14752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!isControlChar(<sp/>c<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_patternName<sp/>+=<sp/>c;</highlight></codeline>
<codeline lineno="14754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_realPatternPos++;</highlight></codeline>
<codeline lineno="14755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14757"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Two<sp/>of<sp/>the<sp/>processing<sp/>methods<sp/>return<sp/>true<sp/>to<sp/>signal<sp/>the<sp/>caller<sp/>to<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>without<sp/>adding<sp/>the<sp/>given<sp/>character<sp/>to<sp/>the<sp/>current<sp/>pattern<sp/>strings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TestSpecParser::processNoneChar(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>c<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="14763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="14765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_exclusion<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="14768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startNewMode(<sp/>Tag<sp/>);</highlight></codeline>
<codeline lineno="14769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="14771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startNewMode(<sp/>QuotedName<sp/>);</highlight></codeline>
<codeline lineno="14772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="14774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startNewMode(<sp/>Name<sp/>);</highlight></codeline>
<codeline lineno="14775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14777"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSpecParser::processNameChar(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal"><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_substring<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;exclude:&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="14781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_exclusion<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endMode();</highlight></codeline>
<codeline lineno="14784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startNewMode(<sp/>Tag<sp/>);</highlight></codeline>
<codeline lineno="14785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14786"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TestSpecParser::processOtherChar(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!isControlChar(<sp/>c<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="14789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_substring<sp/>+=<sp/>c;</highlight></codeline>
<codeline lineno="14791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endMode();</highlight></codeline>
<codeline lineno="14792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14793"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSpecParser::startNewMode(<sp/><ref refid="struct_mode" kindref="compound">Mode</ref><sp/>mode<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_mode<sp/>=<sp/>mode;</highlight></codeline>
<codeline lineno="14796"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSpecParser::endMode()<sp/>{</highlight></codeline>
<codeline lineno="14798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>m_mode<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Name:</highlight></codeline>
<codeline lineno="14800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>QuotedName:</highlight></codeline>
<codeline lineno="14801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>addNamePattern();</highlight></codeline>
<codeline lineno="14802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Tag:</highlight></codeline>
<codeline lineno="14803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>addTagPattern();</highlight></codeline>
<codeline lineno="14804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EscapedName:</highlight></codeline>
<codeline lineno="14805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>revertBackToLastMode();</highlight></codeline>
<codeline lineno="14806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>None:</highlight></codeline>
<codeline lineno="14808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="14809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>startNewMode(<sp/>None<sp/>);</highlight></codeline>
<codeline lineno="14810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14811"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSpecParser::escape()<sp/>{</highlight></codeline>
<codeline lineno="14813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>saveLastMode();</highlight></codeline>
<codeline lineno="14814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_mode<sp/>=<sp/>EscapedName;</highlight></codeline>
<codeline lineno="14815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_escapeChars.push_back(m_realPatternPos);</highlight></codeline>
<codeline lineno="14816"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TestSpecParser::isControlChar(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>m_mode<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="14820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>None:</highlight></codeline>
<codeline lineno="14822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Name:</highlight></codeline>
<codeline lineno="14824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>EscapedName:</highlight></codeline>
<codeline lineno="14826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>QuotedName:</highlight></codeline>
<codeline lineno="14828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Tag:</highlight></codeline>
<codeline lineno="14830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14832"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14833"><highlight class="normal"></highlight></codeline>
<codeline lineno="14834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSpecParser::addFilter()<sp/>{</highlight></codeline>
<codeline lineno="14835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!m_currentFilter.m_patterns.empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_testSpec.m_filters.push_back(<sp/>m_currentFilter<sp/>);</highlight></codeline>
<codeline lineno="14837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_currentFilter<sp/>=<sp/>TestSpec::Filter();</highlight></codeline>
<codeline lineno="14838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14839"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14840"><highlight class="normal"></highlight></codeline>
<codeline lineno="14841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSpecParser::saveLastMode()<sp/>{</highlight></codeline>
<codeline lineno="14842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>lastMode<sp/>=<sp/>m_mode;</highlight></codeline>
<codeline lineno="14843"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14844"><highlight class="normal"></highlight></codeline>
<codeline lineno="14845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSpecParser::revertBackToLastMode()<sp/>{</highlight></codeline>
<codeline lineno="14846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m_mode<sp/>=<sp/>lastMode;</highlight></codeline>
<codeline lineno="14847"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14848"><highlight class="normal"></highlight></codeline>
<codeline lineno="14849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>TestSpecParser::separate()<sp/>{</highlight></codeline>
<codeline lineno="14850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(m_mode==QuotedName)<sp/>||<sp/>(m_mode==Tag)<sp/>){</highlight></codeline>
<codeline lineno="14851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//invalid<sp/>argument,<sp/>signal<sp/>failure<sp/>to<sp/>previous<sp/>scope.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_mode<sp/>=<sp/>None;</highlight></codeline>
<codeline lineno="14853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_pos<sp/>=<sp/>m_arg.size();</highlight></codeline>
<codeline lineno="14854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_substring.clear();</highlight></codeline>
<codeline lineno="14855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_patternName.clear();</highlight></codeline>
<codeline lineno="14856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_realPatternPos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="14857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>endMode();</highlight></codeline>
<codeline lineno="14860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addFilter();</highlight></codeline>
<codeline lineno="14861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//success</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14862"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14863"><highlight class="normal"></highlight></codeline>
<codeline lineno="14864"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>TestSpecParser::preprocessPattern()<sp/>{</highlight></codeline>
<codeline lineno="14865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>token<sp/>=<sp/>m_patternName;</highlight></codeline>
<codeline lineno="14866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>m_escapeChars.size();<sp/>++i)</highlight></codeline>
<codeline lineno="14867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token<sp/>=<sp/>token.substr(0,<sp/>m_escapeChars[i]<sp/>-<sp/>i)<sp/>+<sp/>token.substr(m_escapeChars[i]<sp/>-<sp/>i<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="14868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_escapeChars.clear();</highlight></codeline>
<codeline lineno="14869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(startsWith(token,<sp/></highlight><highlight class="stringliteral">&quot;exclude:&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="14870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_exclusion<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token<sp/>=<sp/>token.substr(8);</highlight></codeline>
<codeline lineno="14872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14873"><highlight class="normal"></highlight></codeline>
<codeline lineno="14874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_patternName.clear();</highlight></codeline>
<codeline lineno="14875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_realPatternPos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="14876"><highlight class="normal"></highlight></codeline>
<codeline lineno="14877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>token;</highlight></codeline>
<codeline lineno="14878"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14879"><highlight class="normal"></highlight></codeline>
<codeline lineno="14880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSpecParser::addNamePattern()<sp/>{</highlight></codeline>
<codeline lineno="14881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>token<sp/>=<sp/>preprocessPattern();</highlight></codeline>
<codeline lineno="14882"><highlight class="normal"></highlight></codeline>
<codeline lineno="14883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!token.empty())<sp/>{</highlight></codeline>
<codeline lineno="14884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestSpec::PatternPtr<sp/>pattern<sp/>=<sp/>std::make_shared&lt;TestSpec::NamePattern&gt;(token,<sp/>m_substring);</highlight></codeline>
<codeline lineno="14885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_exclusion)</highlight></codeline>
<codeline lineno="14886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pattern<sp/>=<sp/>std::make_shared&lt;TestSpec::ExcludedPattern&gt;(pattern);</highlight></codeline>
<codeline lineno="14887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_currentFilter.m_patterns.push_back(pattern);</highlight></codeline>
<codeline lineno="14888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_substring.clear();</highlight></codeline>
<codeline lineno="14890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_exclusion<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_mode<sp/>=<sp/>None;</highlight></codeline>
<codeline lineno="14892"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14893"><highlight class="normal"></highlight></codeline>
<codeline lineno="14894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestSpecParser::addTagPattern()<sp/>{</highlight></codeline>
<codeline lineno="14895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>token<sp/>=<sp/>preprocessPattern();</highlight></codeline>
<codeline lineno="14896"><highlight class="normal"></highlight></codeline>
<codeline lineno="14897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!token.empty())<sp/>{</highlight></codeline>
<codeline lineno="14898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>tag<sp/>pattern<sp/>is<sp/>the<sp/>&quot;hide<sp/>and<sp/>tag&quot;<sp/>shorthand<sp/>(e.g.<sp/>[.foo])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>to<sp/>create<sp/>a<sp/>separate<sp/>hide<sp/>tag<sp/>and<sp/>shorten<sp/>the<sp/>real<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(token.size()<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>token[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="14901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token.erase(token.begin());</highlight></codeline>
<codeline lineno="14902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestSpec::PatternPtr<sp/>pattern<sp/>=<sp/>std::make_shared&lt;TestSpec::TagPattern&gt;(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">,<sp/>m_substring);</highlight></codeline>
<codeline lineno="14903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_exclusion)<sp/>{</highlight></codeline>
<codeline lineno="14904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pattern<sp/>=<sp/>std::make_shared&lt;TestSpec::ExcludedPattern&gt;(pattern);</highlight></codeline>
<codeline lineno="14905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_currentFilter.m_patterns.push_back(pattern);</highlight></codeline>
<codeline lineno="14907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14908"><highlight class="normal"></highlight></codeline>
<codeline lineno="14909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestSpec::PatternPtr<sp/>pattern<sp/>=<sp/>std::make_shared&lt;TestSpec::TagPattern&gt;(token,<sp/>m_substring);</highlight></codeline>
<codeline lineno="14910"><highlight class="normal"></highlight></codeline>
<codeline lineno="14911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_exclusion)<sp/>{</highlight></codeline>
<codeline lineno="14912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pattern<sp/>=<sp/>std::make_shared&lt;TestSpec::ExcludedPattern&gt;(pattern);</highlight></codeline>
<codeline lineno="14913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_currentFilter.m_patterns.push_back(pattern);</highlight></codeline>
<codeline lineno="14915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_substring.clear();</highlight></codeline>
<codeline lineno="14917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_exclusion<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_mode<sp/>=<sp/>None;</highlight></codeline>
<codeline lineno="14919"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14920"><highlight class="normal"></highlight></codeline>
<codeline lineno="14921"><highlight class="normal"><sp/><sp/><sp/><sp/>TestSpec<sp/>parseTestSpec(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>arg<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TestSpecParser(<sp/>ITagAliasRegistry::get()<sp/>).parse(<sp/>arg<sp/>).testSpec();</highlight></codeline>
<codeline lineno="14923"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14924"><highlight class="normal"></highlight></codeline>
<codeline lineno="14925"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14926"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_test_spec_parser.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14927"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_timer.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14928"><highlight class="normal"></highlight></codeline>
<codeline lineno="14929"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14930"><highlight class="normal"></highlight></codeline>
<codeline lineno="14931"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>nanosecondsInSecond<sp/>=<sp/>1000000000;</highlight></codeline>
<codeline lineno="14932"><highlight class="normal"></highlight></codeline>
<codeline lineno="14933"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="14934"><highlight class="normal"></highlight></codeline>
<codeline lineno="14935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>getCurrentNanosecondsSinceEpoch()<sp/>-&gt;<sp/>uint64_t<sp/>{</highlight></codeline>
<codeline lineno="14936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::chrono::duration_cast&lt;std::chrono::nanoseconds&gt;(<sp/>std::chrono::high_resolution_clock::now().time_since_epoch()<sp/>).count();</highlight></codeline>
<codeline lineno="14937"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14938"><highlight class="normal"></highlight></codeline>
<codeline lineno="14939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>estimateClockResolution()<sp/>-&gt;<sp/>uint64_t<sp/>{</highlight></codeline>
<codeline lineno="14941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="14942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>iterations<sp/>=<sp/>1000000;</highlight></codeline>
<codeline lineno="14943"><highlight class="normal"></highlight></codeline>
<codeline lineno="14944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>startTime<sp/>=<sp/>getCurrentNanosecondsSinceEpoch();</highlight></codeline>
<codeline lineno="14945"><highlight class="normal"></highlight></codeline>
<codeline lineno="14946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>iterations;<sp/>++i<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="14947"><highlight class="normal"></highlight></codeline>
<codeline lineno="14948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>ticks;</highlight></codeline>
<codeline lineno="14949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>baseTicks<sp/>=<sp/>getCurrentNanosecondsSinceEpoch();</highlight></codeline>
<codeline lineno="14950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="14951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ticks<sp/>=<sp/>getCurrentNanosecondsSinceEpoch();</highlight></codeline>
<codeline lineno="14952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>ticks<sp/>==<sp/>baseTicks<sp/>);</highlight></codeline>
<codeline lineno="14953"><highlight class="normal"></highlight></codeline>
<codeline lineno="14954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>delta<sp/>=<sp/>ticks<sp/>-<sp/>baseTicks;</highlight></codeline>
<codeline lineno="14955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/>delta;</highlight></codeline>
<codeline lineno="14956"><highlight class="normal"></highlight></codeline>
<codeline lineno="14957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>have<sp/>been<sp/>calibrating<sp/>for<sp/>over<sp/>3<sp/>seconds<sp/>--<sp/>the<sp/>clock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>terrible<sp/>and<sp/>we<sp/>should<sp/>move<sp/>on.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TBD:<sp/>How<sp/>to<sp/>signal<sp/>that<sp/>the<sp/>measured<sp/>resolution<sp/>is<sp/>probably<sp/>wrong?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ticks<sp/>&gt;<sp/>startTime<sp/>+<sp/>3<sp/>*<sp/>nanosecondsInSecond)<sp/>{</highlight></codeline>
<codeline lineno="14961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum<sp/>/<sp/>(<sp/>i<sp/>+<sp/>1u<sp/>);</highlight></codeline>
<codeline lineno="14962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14964"><highlight class="normal"></highlight></codeline>
<codeline lineno="14965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;re<sp/>just<sp/>taking<sp/>the<sp/>mean,<sp/>here.<sp/>To<sp/>do<sp/>better<sp/>we<sp/>could<sp/>take<sp/>the<sp/>std.<sp/>dev<sp/>and<sp/>exclude<sp/>outliers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>and<sp/>potentially<sp/>do<sp/>more<sp/>iterations<sp/>if<sp/>there&apos;s<sp/>a<sp/>high<sp/>variance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum/iterations;</highlight></codeline>
<codeline lineno="14968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14969"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>getEstimatedClockResolution()<sp/>-&gt;<sp/>uint64_t<sp/>{</highlight></codeline>
<codeline lineno="14971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s_resolution<sp/>=<sp/>estimateClockResolution();</highlight></codeline>
<codeline lineno="14972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s_resolution;</highlight></codeline>
<codeline lineno="14973"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14974"><highlight class="normal"></highlight></codeline>
<codeline lineno="14975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Timer::start()<sp/>{</highlight></codeline>
<codeline lineno="14976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_nanoseconds<sp/>=<sp/>getCurrentNanosecondsSinceEpoch();</highlight></codeline>
<codeline lineno="14977"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>Timer::getElapsedNanoseconds()<sp/>const<sp/>-&gt;<sp/>uint64_t<sp/>{</highlight></codeline>
<codeline lineno="14979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getCurrentNanosecondsSinceEpoch()<sp/>-<sp/>m_nanoseconds;</highlight></codeline>
<codeline lineno="14980"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>Timer::getElapsedMicroseconds()<sp/>const<sp/>-&gt;<sp/>uint64_t<sp/>{</highlight></codeline>
<codeline lineno="14982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getElapsedNanoseconds()/1000;</highlight></codeline>
<codeline lineno="14983"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>Timer::getElapsedMilliseconds()<sp/>const<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="14985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(getElapsedMicroseconds()/1000);</highlight></codeline>
<codeline lineno="14986"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14987"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>Timer::getElapsedSeconds()<sp/>const<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="14988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getElapsedMicroseconds()/1000000.0;</highlight></codeline>
<codeline lineno="14989"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="14990"><highlight class="normal"></highlight></codeline>
<codeline lineno="14991"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14992"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_timer.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14993"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_tostring.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14994"><highlight class="normal"></highlight></codeline>
<codeline lineno="14995"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14996"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>clang<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14997"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wexit-time-destructors&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14998"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wglobal-constructors&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14999"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15000"><highlight class="normal"></highlight></codeline>
<codeline lineno="15001"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Enable<sp/>specific<sp/>decls<sp/>locally</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15002"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15003"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CONFIG_ENABLE_CHRONO_STRINGMAKER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15004"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15005"><highlight class="normal"></highlight></codeline>
<codeline lineno="15006"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15007"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15008"><highlight class="normal"></highlight></codeline>
<codeline lineno="15009"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="15010"><highlight class="normal"></highlight></codeline>
<codeline lineno="15011"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Detail<sp/>{</highlight></codeline>
<codeline lineno="15012"><highlight class="normal"></highlight></codeline>
<codeline lineno="15013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>unprintableString<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{?}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15014"><highlight class="normal"></highlight></codeline>
<codeline lineno="15015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="15016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hexThreshold<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="15017"><highlight class="normal"></highlight></codeline>
<codeline lineno="15018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Endianness<sp/>{</highlight></codeline>
<codeline lineno="15019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>Arch<sp/>{<sp/>Big,<sp/>Little<sp/>};</highlight></codeline>
<codeline lineno="15020"><highlight class="normal"></highlight></codeline>
<codeline lineno="15021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Arch<sp/>which()<sp/>{</highlight></codeline>
<codeline lineno="15022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__gtc__constants_1ga39c2fb227631ca25894326529bdd1ee5" kindref="member">one</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="15023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>lowest<sp/>byte<sp/>we<sp/>read<sp/>is<sp/>non-zero,<sp/>we<sp/>can<sp/>assume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>little<sp/>endian<sp/>format<sp/>is<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>=<sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;<ref refid="group__gtc__constants_1ga39c2fb227631ca25894326529bdd1ee5" kindref="member">one</ref>);</highlight></codeline>
<codeline lineno="15026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>?<sp/>Little<sp/>:<sp/>Big;</highlight></codeline>
<codeline lineno="15027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="15029"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15030"><highlight class="normal"></highlight></codeline>
<codeline lineno="15031"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>rawMemoryToString(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>std::size_t<sp/>size<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="15032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reverse<sp/>order<sp/>for<sp/>little<sp/>endian<sp/>architectures</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0,<sp/>end<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>size<sp/>),<sp/>inc<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="15034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>Endianness::which()<sp/>==<sp/>Endianness::Little<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="15035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>end-1;</highlight></codeline>
<codeline lineno="15036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end<sp/>=<sp/>inc<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="15037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15038"><highlight class="normal"></highlight></codeline>
<codeline lineno="15039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<ref refid="classbytes" kindref="compound">bytes</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(object);</highlight></codeline>
<codeline lineno="15040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReusableStringStream<sp/>rss;</highlight></codeline>
<codeline lineno="15041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;0x&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::setfill(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>std::hex;</highlight></codeline>
<codeline lineno="15042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>;<sp/>i<sp/>!=<sp/>end;<sp/>i<sp/>+=<sp/>inc<sp/>)</highlight></codeline>
<codeline lineno="15043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/>std::setw(2)<sp/>&lt;&lt;<sp/>static_cast&lt;unsigned&gt;(<ref refid="classbytes" kindref="compound">bytes</ref>[i]);</highlight></codeline>
<codeline lineno="15044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rss.str();</highlight></codeline>
<codeline lineno="15045"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15046"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15047"><highlight class="normal"></highlight></codeline>
<codeline lineno="15048"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="15049"><highlight class="normal">std::string<sp/>fpToString(<sp/>T<sp/><ref refid="classvalue" kindref="compound">value</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="15050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__core__func__common_1ga81f85e3c56f1f559034422b357c37e21" kindref="member">Catch::isnan</ref>(<ref refid="classvalue" kindref="compound">value</ref>))<sp/>{</highlight></codeline>
<codeline lineno="15051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;nan&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15052"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15053"><highlight class="normal"></highlight></codeline>
<codeline lineno="15054"><highlight class="normal"><sp/><sp/><sp/><sp/>ReusableStringStream<sp/>rss;</highlight></codeline>
<codeline lineno="15055"><highlight class="normal"><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/>std::setprecision(<sp/>precision<sp/>)</highlight></codeline>
<codeline lineno="15056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::fixed</highlight></codeline>
<codeline lineno="15057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="15058"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>d<sp/>=<sp/>rss.str();</highlight></codeline>
<codeline lineno="15059"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>i<sp/>=<sp/>d.find_last_not_of(<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="15060"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>i<sp/>!=<sp/>std::string::npos<sp/>&amp;&amp;<sp/>i<sp/>!=<sp/>d.size()-1<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="15061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>d[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="15062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="15063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>d.substr(<sp/>0,<sp/>i+1<sp/>);</highlight></codeline>
<codeline lineno="15064"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d;</highlight></codeline>
<codeline lineno="15066"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15067"><highlight class="normal"></highlight></codeline>
<codeline lineno="15069"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15070"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Out-of-line<sp/>defs<sp/>for<sp/>full<sp/>specialization<sp/>of<sp/>StringMaker</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15071"><highlight class="normal"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="15073"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15074"><highlight class="normal">std::string<sp/>StringMaker&lt;std::string&gt;::convert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="15075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!getCurrentContext().getConfig()-&gt;showInvisibles())<sp/>{</highlight></codeline>
<codeline lineno="15076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal"><sp/>+<sp/>str<sp/>+<sp/>&apos;&quot;&apos;;</highlight></codeline>
<codeline lineno="15077"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15078"><highlight class="normal"></highlight></codeline>
<codeline lineno="15079"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>s(</highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="15080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>:<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="15081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(c)<sp/>{</highlight></codeline>
<codeline lineno="15082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="15083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.append(</highlight><highlight class="stringliteral">&quot;\\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="15084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="15086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.append(</highlight><highlight class="stringliteral">&quot;\\t&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="15087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="15089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.push_back(c);</highlight></codeline>
<codeline lineno="15090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15092"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15093"><highlight class="normal"><sp/><sp/><sp/><sp/>s.append(</highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="15094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="15095"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15096"><highlight class="normal"></highlight></codeline>
<codeline lineno="15097"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CATCH_CONFIG_CPP17_STRING_VIEW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15098"><highlight class="normal">std::string<sp/>StringMaker&lt;std::string_view&gt;::convert(std::string_view<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="15099"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::Catch::Detail::stringify(std::string{<sp/>str<sp/>});</highlight></codeline>
<codeline lineno="15100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15101"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15102"><highlight class="normal"></highlight></codeline>
<codeline lineno="15103"><highlight class="normal">std::string<sp/>StringMaker&lt;char<sp/>const*&gt;::convert(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="15104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str)<sp/>{</highlight></codeline>
<codeline lineno="15105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>::Catch::Detail::stringify(std::string{<sp/>str<sp/>});</highlight></codeline>
<codeline lineno="15106"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="15107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">{<sp/></highlight><highlight class="stringliteral">&quot;{null<sp/>string}&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="15108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15110"><highlight class="normal">std::string<sp/>StringMaker&lt;char*&gt;::convert(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="15111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str)<sp/>{</highlight></codeline>
<codeline lineno="15112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>::Catch::Detail::stringify(std::string{<sp/>str<sp/>});</highlight></codeline>
<codeline lineno="15113"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="15114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">{<sp/></highlight><highlight class="stringliteral">&quot;{null<sp/>string}&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="15115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15117"><highlight class="normal"></highlight></codeline>
<codeline lineno="15118"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CATCH_CONFIG_WCHAR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15119"><highlight class="normal">std::string<sp/>StringMaker&lt;std::wstring&gt;::convert(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::wstring&amp;<sp/>wstr)<sp/>{</highlight></codeline>
<codeline lineno="15120"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>s;</highlight></codeline>
<codeline lineno="15121"><highlight class="normal"><sp/><sp/><sp/><sp/>s.reserve(wstr.size());</highlight></codeline>
<codeline lineno="15122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c<sp/>:<sp/>wstr)<sp/>{</highlight></codeline>
<codeline lineno="15123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>(c<sp/>&lt;=<sp/>0xff)<sp/>?<sp/>static_cast&lt;char&gt;(c)<sp/>:<sp/>&apos;?&apos;;</highlight></codeline>
<codeline lineno="15124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15125"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::Catch::Detail::stringify(s);</highlight></codeline>
<codeline lineno="15126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15127"><highlight class="normal"></highlight></codeline>
<codeline lineno="15128"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>CATCH_CONFIG_CPP17_STRING_VIEW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15129"><highlight class="normal">std::string<sp/>StringMaker&lt;std::wstring_view&gt;::convert(std::wstring_view<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="15130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StringMaker&lt;std::wstring&gt;::convert(std::wstring(str));</highlight></codeline>
<codeline lineno="15131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15132"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15133"><highlight class="normal"></highlight></codeline>
<codeline lineno="15134"><highlight class="normal">std::string<sp/>StringMaker&lt;wchar_t<sp/>const*&gt;::convert(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="15135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str)<sp/>{</highlight></codeline>
<codeline lineno="15136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>::Catch::Detail::stringify(std::wstring{<sp/>str<sp/>});</highlight></codeline>
<codeline lineno="15137"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="15138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">{<sp/></highlight><highlight class="stringliteral">&quot;{null<sp/>string}&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="15139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15141"><highlight class="normal">std::string<sp/>StringMaker&lt;wchar_t<sp/>*&gt;::convert(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="15142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str)<sp/>{</highlight></codeline>
<codeline lineno="15143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>::Catch::Detail::stringify(std::wstring{<sp/>str<sp/>});</highlight></codeline>
<codeline lineno="15144"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="15145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">{<sp/></highlight><highlight class="stringliteral">&quot;{null<sp/>string}&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="15146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15148"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15149"><highlight class="normal"></highlight></codeline>
<codeline lineno="15150"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_CPP17_BYTE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15151"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15152"><highlight class="normal">std::string<sp/>StringMaker&lt;std::byte&gt;::convert(<ref refid="group__gtx__raw__data_1gacd7fe1f2ad60a57f7d7ad4f1e6836efd" kindref="member">std::byte</ref><sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="15153"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::Catch::Detail::stringify(std::to_integer&lt;unsigned<sp/>long<sp/>long&gt;(<ref refid="classvalue" kindref="compound">value</ref>));</highlight></codeline>
<codeline lineno="15154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15155"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(CATCH_CONFIG_CPP17_BYTE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15156"><highlight class="normal"></highlight></codeline>
<codeline lineno="15157"><highlight class="normal">std::string<sp/>StringMaker&lt;int&gt;::convert(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="15158"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::Catch::Detail::stringify(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classvalue" kindref="compound">value</ref>));</highlight></codeline>
<codeline lineno="15159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15160"><highlight class="normal">std::string<sp/>StringMaker&lt;long&gt;::convert(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="15161"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::Catch::Detail::stringify(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classvalue" kindref="compound">value</ref>));</highlight></codeline>
<codeline lineno="15162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15163"><highlight class="normal">std::string<sp/>StringMaker&lt;long<sp/>long&gt;::convert(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="15164"><highlight class="normal"><sp/><sp/><sp/><sp/>ReusableStringStream<sp/>rss;</highlight></codeline>
<codeline lineno="15165"><highlight class="normal"><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="15166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classvalue" kindref="compound">value</ref><sp/>&gt;<sp/>Detail::hexThreshold)<sp/>{</highlight></codeline>
<codeline lineno="15167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(0x&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rss.str();</highlight></codeline>
<codeline lineno="15170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15171"><highlight class="normal"></highlight></codeline>
<codeline lineno="15172"><highlight class="normal">std::string<sp/>StringMaker&lt;unsigned<sp/>int&gt;::convert(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="15173"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::Catch::Detail::stringify(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classvalue" kindref="compound">value</ref>));</highlight></codeline>
<codeline lineno="15174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15175"><highlight class="normal">std::string<sp/>StringMaker&lt;unsigned<sp/>long&gt;::convert(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="15176"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::Catch::Detail::stringify(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classvalue" kindref="compound">value</ref>));</highlight></codeline>
<codeline lineno="15177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15178"><highlight class="normal">std::string<sp/>StringMaker&lt;unsigned<sp/>long<sp/>long&gt;::convert(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="15179"><highlight class="normal"><sp/><sp/><sp/><sp/>ReusableStringStream<sp/>rss;</highlight></codeline>
<codeline lineno="15180"><highlight class="normal"><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="15181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classvalue" kindref="compound">value</ref><sp/>&gt;<sp/>Detail::hexThreshold)<sp/>{</highlight></codeline>
<codeline lineno="15182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(0x&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rss.str();</highlight></codeline>
<codeline lineno="15185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15186"><highlight class="normal"></highlight></codeline>
<codeline lineno="15187"><highlight class="normal">std::string<sp/>StringMaker&lt;bool&gt;::convert(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="15188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15190"><highlight class="normal"></highlight></codeline>
<codeline lineno="15191"><highlight class="normal">std::string<sp/>StringMaker&lt;signed<sp/>char&gt;::convert(</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="15192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classvalue" kindref="compound">value</ref><sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="15193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&apos;\\r&apos;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15194"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classvalue" kindref="compound">value</ref><sp/>==<sp/></highlight><highlight class="charliteral">&apos;\f&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="15195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&apos;\\f&apos;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15196"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classvalue" kindref="compound">value</ref><sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="15197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&apos;\\n&apos;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15198"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classvalue" kindref="compound">value</ref><sp/>==<sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="15199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&apos;\\t&apos;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15200"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>&lt;=<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>&amp;&amp;<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="15201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>::Catch::Detail::stringify(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classvalue" kindref="compound">value</ref>));</highlight></codeline>
<codeline lineno="15202"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="15203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>chstr[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&apos;<sp/>&apos;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chstr[1]<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="15205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>chstr;</highlight></codeline>
<codeline lineno="15206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15208"><highlight class="normal">std::string<sp/>StringMaker&lt;char&gt;::convert(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="15209"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::Catch::Detail::stringify(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(c));</highlight></codeline>
<codeline lineno="15210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15211"><highlight class="normal">std::string<sp/>StringMaker&lt;unsigned<sp/>char&gt;::convert(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="15212"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>::Catch::Detail::stringify(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(c));</highlight></codeline>
<codeline lineno="15213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15214"><highlight class="normal"></highlight></codeline>
<codeline lineno="15215"><highlight class="normal">std::string<sp/>StringMaker&lt;std::nullptr_t&gt;::convert(std::nullptr_t)<sp/>{</highlight></codeline>
<codeline lineno="15216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;nullptr&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15218"><highlight class="normal"></highlight></codeline>
<codeline lineno="15219"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>StringMaker&lt;float&gt;::precision<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="15220"><highlight class="normal"></highlight></codeline>
<codeline lineno="15221"><highlight class="normal">std::string<sp/>StringMaker&lt;float&gt;::convert(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="15222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fpToString(<ref refid="classvalue" kindref="compound">value</ref>,<sp/>precision)<sp/>+<sp/>&apos;f&apos;;</highlight></codeline>
<codeline lineno="15223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15224"><highlight class="normal"></highlight></codeline>
<codeline lineno="15225"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>StringMaker&lt;double&gt;::precision<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="15226"><highlight class="normal"></highlight></codeline>
<codeline lineno="15227"><highlight class="normal">std::string<sp/>StringMaker&lt;double&gt;::convert(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="15228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fpToString(<ref refid="classvalue" kindref="compound">value</ref>,<sp/>precision);</highlight></codeline>
<codeline lineno="15229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15230"><highlight class="normal"></highlight></codeline>
<codeline lineno="15231"><highlight class="normal">std::string<sp/>ratio_string&lt;std::atto&gt;::symbol()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="15232"><highlight class="normal">std::string<sp/>ratio_string&lt;std::femto&gt;::symbol()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;f&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="15233"><highlight class="normal">std::string<sp/>ratio_string&lt;std::pico&gt;::symbol()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;p&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="15234"><highlight class="normal">std::string<sp/>ratio_string&lt;std::nano&gt;::symbol()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;n&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="15235"><highlight class="normal">std::string<sp/>ratio_string&lt;std::micro&gt;::symbol()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;u&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="15236"><highlight class="normal">std::string<sp/>ratio_string&lt;std::milli&gt;::symbol()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="15237"><highlight class="normal"></highlight></codeline>
<codeline lineno="15238"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15239"><highlight class="normal"></highlight></codeline>
<codeline lineno="15240"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15241"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>clang<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15242"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15243"><highlight class="normal"></highlight></codeline>
<codeline lineno="15244"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_tostring.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15245"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_totals.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15246"><highlight class="normal"></highlight></codeline>
<codeline lineno="15247"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="15248"><highlight class="normal"></highlight></codeline>
<codeline lineno="15249"><highlight class="normal"><sp/><sp/><sp/><sp/>Counts<sp/>Counts::operator<sp/>-<sp/>(<sp/>Counts<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="15250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Counts<sp/>diff;</highlight></codeline>
<codeline lineno="15251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diff.passed<sp/>=<sp/>passed<sp/>-<sp/>other.passed;</highlight></codeline>
<codeline lineno="15252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diff.failed<sp/>=<sp/>failed<sp/>-<sp/>other.failed;</highlight></codeline>
<codeline lineno="15253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diff.failedButOk<sp/>=<sp/>failedButOk<sp/>-<sp/>other.failedButOk;</highlight></codeline>
<codeline lineno="15254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>diff;</highlight></codeline>
<codeline lineno="15255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15256"><highlight class="normal"></highlight></codeline>
<codeline lineno="15257"><highlight class="normal"><sp/><sp/><sp/><sp/>Counts&amp;<sp/>Counts::operator<sp/>+=<sp/>(<sp/>Counts<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="15258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>passed<sp/>+=<sp/>other.passed;</highlight></codeline>
<codeline lineno="15259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failed<sp/>+=<sp/>other.failed;</highlight></codeline>
<codeline lineno="15260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>failedButOk<sp/>+=<sp/>other.failedButOk;</highlight></codeline>
<codeline lineno="15261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15263"><highlight class="normal"></highlight></codeline>
<codeline lineno="15264"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>Counts::total()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="15265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>passed<sp/>+<sp/>failed<sp/>+<sp/>failedButOk;</highlight></codeline>
<codeline lineno="15266"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Counts::allPassed()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="15268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>failed<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>failedButOk<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="15269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Counts::allOk()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="15271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>failed<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="15272"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15273"><highlight class="normal"></highlight></codeline>
<codeline lineno="15274"><highlight class="normal"><sp/><sp/><sp/><sp/>Totals<sp/>Totals::operator<sp/>-<sp/>(<sp/>Totals<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="15275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Totals<sp/>diff;</highlight></codeline>
<codeline lineno="15276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diff.assertions<sp/>=<sp/>assertions<sp/>-<sp/>other.assertions;</highlight></codeline>
<codeline lineno="15277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>diff.testCases<sp/>=<sp/>testCases<sp/>-<sp/>other.testCases;</highlight></codeline>
<codeline lineno="15278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>diff;</highlight></codeline>
<codeline lineno="15279"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15280"><highlight class="normal"></highlight></codeline>
<codeline lineno="15281"><highlight class="normal"><sp/><sp/><sp/><sp/>Totals&amp;<sp/>Totals::operator<sp/>+=<sp/>(<sp/>Totals<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>other<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="15282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assertions<sp/>+=<sp/>other.assertions;</highlight></codeline>
<codeline lineno="15283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>testCases<sp/>+=<sp/>other.testCases;</highlight></codeline>
<codeline lineno="15284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15286"><highlight class="normal"></highlight></codeline>
<codeline lineno="15287"><highlight class="normal"><sp/><sp/><sp/><sp/>Totals<sp/>Totals::delta(<sp/>Totals<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>prevTotals<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="15288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Totals<sp/>diff<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>-<sp/>prevTotals;</highlight></codeline>
<codeline lineno="15289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>diff.assertions.failed<sp/>&gt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="15290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++diff.testCases.failed;</highlight></codeline>
<codeline lineno="15291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>diff.assertions.failedButOk<sp/>&gt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="15292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++diff.testCases.failedButOk;</highlight></codeline>
<codeline lineno="15293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++diff.testCases.passed;</highlight></codeline>
<codeline lineno="15295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>diff;</highlight></codeline>
<codeline lineno="15296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15297"><highlight class="normal"></highlight></codeline>
<codeline lineno="15298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15299"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_totals.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15300"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_uncaught_exceptions.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15301"><highlight class="normal"></highlight></codeline>
<codeline lineno="15302"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_config_uncaught_exceptions.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15303"><highlight class="normal"></highlight></codeline>
<codeline lineno="15304"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>Catch2<sp/>Authors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15305"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15306"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>(See<sp/>accompanying<sp/>file<sp/>LICENSE_1_0.txt<sp/>or<sp/>copy<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15307"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>https://www.boost.org/LICENSE_1_0.txt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15308"><highlight class="normal"></highlight></codeline>
<codeline lineno="15309"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPDX-License-Identifier:<sp/>BSL-1.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15310"><highlight class="normal"></highlight></codeline>
<codeline lineno="15311"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CATCH_CONFIG_UNCAUGHT_EXCEPTIONS_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15312"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CONFIG_UNCAUGHT_EXCEPTIONS_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15313"><highlight class="normal"></highlight></codeline>
<codeline lineno="15314"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15315"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>_MSC_VER<sp/>&gt;=<sp/>1900<sp/></highlight><highlight class="comment">//<sp/>Visual<sp/>Studio<sp/>2015<sp/>or<sp/>newer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15316"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>CATCH_INTERNAL_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15317"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15318"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15319"><highlight class="normal"></highlight></codeline>
<codeline lineno="15320"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;exception&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15321"><highlight class="normal"></highlight></codeline>
<codeline lineno="15322"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__cpp_lib_uncaught_exceptions)<sp/>\</highlight></codeline>
<codeline lineno="15323"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!defined(CATCH_INTERNAL_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15324"><highlight class="normal"></highlight></codeline>
<codeline lineno="15325"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CATCH_INTERNAL_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15326"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>__cpp_lib_uncaught_exceptions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15327"><highlight class="normal"></highlight></codeline>
<codeline lineno="15328"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_INTERNAL_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS)<sp/>\</highlight></codeline>
<codeline lineno="15329"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!defined(CATCH_CONFIG_NO_CPP17_UNCAUGHT_EXCEPTIONS)<sp/>\</highlight></codeline>
<codeline lineno="15330"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!defined(CATCH_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15331"><highlight class="normal"></highlight></codeline>
<codeline lineno="15332"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>CATCH_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15333"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15334"><highlight class="normal"></highlight></codeline>
<codeline lineno="15335"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_UNCAUGHT_EXCEPTIONS_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15336"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_config_uncaught_exceptions.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15337"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;exception&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15338"><highlight class="normal"></highlight></codeline>
<codeline lineno="15339"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="15340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>uncaught_exceptions()<sp/>{</highlight></codeline>
<codeline lineno="15341"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15343"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(CATCH_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::uncaught_exceptions()<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="15345"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::uncaught_exception();</highlight></codeline>
<codeline lineno="15347"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15348"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="15349"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15350"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_uncaught_exceptions.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15351"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_version.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15352"><highlight class="normal"></highlight></codeline>
<codeline lineno="15353"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15354"><highlight class="normal"></highlight></codeline>
<codeline lineno="15355"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="15356"><highlight class="normal"></highlight></codeline>
<codeline lineno="15357"><highlight class="normal"><sp/><sp/><sp/><sp/>Version::Version</highlight></codeline>
<codeline lineno="15358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_majorVersion,</highlight></codeline>
<codeline lineno="15359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_minorVersion,</highlight></codeline>
<codeline lineno="15360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_patchNumber,</highlight></codeline>
<codeline lineno="15361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>_branchName,</highlight></codeline>
<codeline lineno="15362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_buildNumber<sp/>)</highlight></codeline>
<codeline lineno="15363"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>majorVersion(<sp/>_majorVersion<sp/>),</highlight></codeline>
<codeline lineno="15364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minorVersion(<sp/>_minorVersion<sp/>),</highlight></codeline>
<codeline lineno="15365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>patchNumber(<sp/>_patchNumber<sp/>),</highlight></codeline>
<codeline lineno="15366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>branchName(<sp/>_branchName<sp/>),</highlight></codeline>
<codeline lineno="15367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buildNumber(<sp/>_buildNumber<sp/>)</highlight></codeline>
<codeline lineno="15368"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="15369"><highlight class="normal"></highlight></codeline>
<codeline lineno="15370"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/>operator<sp/>&lt;&lt;<sp/>(<sp/>std::ostream&amp;<sp/>os,<sp/>Version<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>version<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="15371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/><sp/>&lt;&lt;<sp/>version.majorVersion<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>version.minorVersion<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>version.patchNumber;</highlight></codeline>
<codeline lineno="15374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>branchName<sp/>is<sp/>never<sp/>null<sp/>-&gt;<sp/>0th<sp/>char<sp/>is<sp/>\0<sp/>if<sp/>it<sp/>is<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(version.branchName[0])<sp/>{</highlight></codeline>
<codeline lineno="15376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>version.branchName</highlight></codeline>
<codeline lineno="15377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>version.buildNumber;</highlight></codeline>
<codeline lineno="15378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="15380"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15381"><highlight class="normal"></highlight></codeline>
<codeline lineno="15382"><highlight class="normal"><sp/><sp/><sp/><sp/>Version<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>libraryVersion()<sp/>{</highlight></codeline>
<codeline lineno="15383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Version<sp/>version(<sp/>2,<sp/>13,<sp/>7,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="15384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>version;</highlight></codeline>
<codeline lineno="15385"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15386"><highlight class="normal"></highlight></codeline>
<codeline lineno="15387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15388"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_version.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15389"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_wildcard_pattern.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15390"><highlight class="normal"></highlight></codeline>
<codeline lineno="15391"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="15392"><highlight class="normal"></highlight></codeline>
<codeline lineno="15393"><highlight class="normal"><sp/><sp/><sp/><sp/>WildcardPattern::WildcardPattern(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>pattern,</highlight></codeline>
<codeline lineno="15394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CaseSensitive::Choice<sp/>caseSensitivity<sp/>)</highlight></codeline>
<codeline lineno="15395"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>m_caseSensitivity(<sp/>caseSensitivity<sp/>),</highlight></codeline>
<codeline lineno="15396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_pattern(<sp/>normaliseString(<sp/>pattern<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="15397"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="15398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>startsWith(<sp/>m_pattern,<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="15399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_pattern<sp/>=<sp/>m_pattern.substr(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="15400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_wildcard<sp/>=<sp/>WildcardAtStart;</highlight></codeline>
<codeline lineno="15401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>endsWith(<sp/>m_pattern,<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal"><sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="15403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_pattern<sp/>=<sp/>m_pattern.substr(<sp/>0,<sp/>m_pattern.size()-1<sp/>);</highlight></codeline>
<codeline lineno="15404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_wildcard<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">WildcardPosition</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>m_wildcard<sp/>|<sp/>WildcardAtEnd<sp/>);</highlight></codeline>
<codeline lineno="15405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15406"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15407"><highlight class="normal"></highlight></codeline>
<codeline lineno="15408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>WildcardPattern::matches(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>str<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="15409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>m_wildcard<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="15410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NoWildcard:</highlight></codeline>
<codeline lineno="15411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_pattern<sp/>==<sp/>normaliseString(<sp/>str<sp/>);</highlight></codeline>
<codeline lineno="15412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>WildcardAtStart:</highlight></codeline>
<codeline lineno="15413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>endsWith(<sp/>normaliseString(<sp/>str<sp/>),<sp/>m_pattern<sp/>);</highlight></codeline>
<codeline lineno="15414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>WildcardAtEnd:</highlight></codeline>
<codeline lineno="15415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>startsWith(<sp/>normaliseString(<sp/>str<sp/>),<sp/>m_pattern<sp/>);</highlight></codeline>
<codeline lineno="15416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>WildcardAtBothEnds:</highlight></codeline>
<codeline lineno="15417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>contains(<sp/>normaliseString(<sp/>str<sp/>),<sp/>m_pattern<sp/>);</highlight></codeline>
<codeline lineno="15418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="15419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_ERROR(<sp/></highlight><highlight class="stringliteral">&quot;Unknown<sp/>enum&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="15420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15421"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15422"><highlight class="normal"></highlight></codeline>
<codeline lineno="15423"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>WildcardPattern::normaliseString(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>str<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="15424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>trim(<sp/>m_caseSensitivity<sp/>==<sp/>CaseSensitive::No<sp/>?<sp/>toLower(<sp/>str<sp/>)<sp/>:<sp/>str<sp/>);</highlight></codeline>
<codeline lineno="15425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15427"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_wildcard_pattern.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15428"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_xmlwriter.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15429"><highlight class="normal"></highlight></codeline>
<codeline lineno="15430"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15431"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15432"><highlight class="normal"></highlight></codeline>
<codeline lineno="15433"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="15434"><highlight class="normal"></highlight></codeline>
<codeline lineno="15435"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="15436"><highlight class="normal"></highlight></codeline>
<codeline lineno="15437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>trailingBytes(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="15438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>&amp;<sp/>0xE0)<sp/>==<sp/>0xC0)<sp/>{</highlight></codeline>
<codeline lineno="15439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="15440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>&amp;<sp/>0xF0)<sp/>==<sp/>0xE0)<sp/>{</highlight></codeline>
<codeline lineno="15442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>3;</highlight></codeline>
<codeline lineno="15443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>&amp;<sp/>0xF8)<sp/>==<sp/>0xF0)<sp/>{</highlight></codeline>
<codeline lineno="15445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>4;</highlight></codeline>
<codeline lineno="15446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_ERROR(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>multibyte<sp/>utf-8<sp/>start<sp/>byte<sp/>encountered&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="15448"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15449"><highlight class="normal"></highlight></codeline>
<codeline lineno="15450"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>headerValue(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="15451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>&amp;<sp/>0xE0)<sp/>==<sp/>0xC0)<sp/>{</highlight></codeline>
<codeline lineno="15452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c<sp/>&amp;<sp/>0x1F;</highlight></codeline>
<codeline lineno="15453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>&amp;<sp/>0xF0)<sp/>==<sp/>0xE0)<sp/>{</highlight></codeline>
<codeline lineno="15455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c<sp/>&amp;<sp/>0x0F;</highlight></codeline>
<codeline lineno="15456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>&amp;<sp/>0xF8)<sp/>==<sp/>0xF0)<sp/>{</highlight></codeline>
<codeline lineno="15458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c<sp/>&amp;<sp/>0x07;</highlight></codeline>
<codeline lineno="15459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_INTERNAL_ERROR(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>multibyte<sp/>utf-8<sp/>start<sp/>byte<sp/>encountered&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="15461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15462"><highlight class="normal"></highlight></codeline>
<codeline lineno="15463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>hexEscapeChar(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="15464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ios_base::fmtflags<sp/>f(os.flags());</highlight></codeline>
<codeline lineno="15465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\\x&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::uppercase<sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/>std::setfill(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>std::setw(2)</highlight></codeline>
<codeline lineno="15467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(c);</highlight></codeline>
<codeline lineno="15468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.flags(f);</highlight></codeline>
<codeline lineno="15469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15470"><highlight class="normal"></highlight></codeline>
<codeline lineno="15471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shouldNewline(XmlFormatting<sp/>fmt)<sp/>{</highlight></codeline>
<codeline lineno="15472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!!(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::underlying_type&lt;XmlFormatting&gt;::type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fmt<sp/>&amp;<sp/>XmlFormatting::Newline));</highlight></codeline>
<codeline lineno="15473"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15474"><highlight class="normal"></highlight></codeline>
<codeline lineno="15475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>shouldIndent(XmlFormatting<sp/>fmt)<sp/>{</highlight></codeline>
<codeline lineno="15476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!!(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::underlying_type&lt;XmlFormatting&gt;::type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fmt<sp/>&amp;<sp/>XmlFormatting::Indent));</highlight></codeline>
<codeline lineno="15477"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15478"><highlight class="normal"></highlight></codeline>
<codeline lineno="15479"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>anonymous<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15480"><highlight class="normal"></highlight></codeline>
<codeline lineno="15481"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlFormatting<sp/>operator<sp/>|<sp/>(XmlFormatting<sp/>lhs,<sp/>XmlFormatting<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="15482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">XmlFormatting</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="15483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::underlying_type&lt;XmlFormatting&gt;::type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lhs)<sp/>|</highlight></codeline>
<codeline lineno="15484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::underlying_type&lt;XmlFormatting&gt;::type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rhs)</highlight></codeline>
<codeline lineno="15485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="15486"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15487"><highlight class="normal"></highlight></codeline>
<codeline lineno="15488"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlFormatting<sp/>operator<sp/>&amp;<sp/>(XmlFormatting<sp/>lhs,<sp/>XmlFormatting<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="15489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">XmlFormatting</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="15490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::underlying_type&lt;XmlFormatting&gt;::type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(lhs)<sp/>&amp;</highlight></codeline>
<codeline lineno="15491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::underlying_type&lt;XmlFormatting&gt;::type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rhs)</highlight></codeline>
<codeline lineno="15492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="15493"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15494"><highlight class="normal"></highlight></codeline>
<codeline lineno="15495"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlEncode::XmlEncode(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>str,<sp/>ForWhat<sp/>forWhat<sp/>)</highlight></codeline>
<codeline lineno="15496"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>m_str(<sp/>str<sp/>),</highlight></codeline>
<codeline lineno="15497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_forWhat(<sp/>forWhat<sp/>)</highlight></codeline>
<codeline lineno="15498"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="15499"><highlight class="normal"></highlight></codeline>
<codeline lineno="15500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XmlEncode::encodeTo(<sp/>std::ostream&amp;<sp/>os<sp/>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="15501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Apostrophe<sp/>escaping<sp/>not<sp/>necessary<sp/>if<sp/>we<sp/>always<sp/>use<sp/>&quot;<sp/>to<sp/>write<sp/>attributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(see:<sp/>http://www.w3.org/TR/xml/#syntax)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15503"><highlight class="normal"></highlight></codeline>
<codeline lineno="15504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>std::size_t<sp/>idx<sp/>=<sp/>0;<sp/>idx<sp/>&lt;<sp/>m_str.size();<sp/>++<sp/>idx<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="15505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>m_str[idx];</highlight></codeline>
<codeline lineno="15506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(c)<sp/>{</highlight></codeline>
<codeline lineno="15507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">:<sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&amp;lt;&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&amp;&apos;</highlight><highlight class="normal">:<sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&amp;amp;&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15509"><highlight class="normal"></highlight></codeline>
<codeline lineno="15510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="15511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See:<sp/>http://www.w3.org/TR/xml/#syntax</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>&gt;<sp/>2<sp/>&amp;&amp;<sp/>m_str[idx<sp/>-<sp/>1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>m_str[idx<sp/>-<sp/>2]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="15513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&amp;gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>c;</highlight></codeline>
<codeline lineno="15516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15517"><highlight class="normal"></highlight></codeline>
<codeline lineno="15518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\&quot;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="15519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_forWhat<sp/>==<sp/>ForAttributes)</highlight></codeline>
<codeline lineno="15520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&amp;quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>c;</highlight></codeline>
<codeline lineno="15523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15524"><highlight class="normal"></highlight></codeline>
<codeline lineno="15525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="15526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>control<sp/>characters<sp/>and<sp/>invalid<sp/>utf-8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15527"><highlight class="normal"></highlight></codeline>
<codeline lineno="15528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Escape<sp/>control<sp/>characters<sp/>in<sp/>standard<sp/>ascii</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>see<sp/>http://stackoverflow.com/questions/404107/why-are-control-characters-illegal-in-xml-1-0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&lt;<sp/>0x09<sp/>||<sp/>(c<sp/>&gt;<sp/>0x0D<sp/>&amp;&amp;<sp/>c<sp/>&lt;<sp/>0x20)<sp/>||<sp/>c<sp/>==<sp/>0x7F)<sp/>{</highlight></codeline>
<codeline lineno="15531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexEscapeChar(os,<sp/>c);</highlight></codeline>
<codeline lineno="15532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15534"><highlight class="normal"></highlight></codeline>
<codeline lineno="15535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Plain<sp/>ASCII:<sp/>Write<sp/>it<sp/>to<sp/>stream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&lt;<sp/>0x7F)<sp/>{</highlight></codeline>
<codeline lineno="15537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>c;</highlight></codeline>
<codeline lineno="15538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15540"><highlight class="normal"></highlight></codeline>
<codeline lineno="15541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>UTF-8<sp/>territory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>encoding<sp/>is<sp/>valid<sp/>and<sp/>if<sp/>it<sp/>is<sp/>not,<sp/>hex<sp/>escape<sp/>bytes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Important:<sp/>We<sp/>do<sp/>not<sp/>check<sp/>the<sp/>exact<sp/>decoded<sp/>values<sp/>for<sp/>validity,<sp/>only<sp/>the<sp/>encoding<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>check<sp/>that<sp/>this<sp/>bytes<sp/>is<sp/>a<sp/>valid<sp/>lead<sp/>byte:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>means<sp/>that<sp/>it<sp/>is<sp/>not<sp/>encoded<sp/>as<sp/>1111<sp/>1XXX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Or<sp/>as<sp/>10XX<sp/>XXXX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&lt;<sp/><sp/>0xC0<sp/>||</highlight></codeline>
<codeline lineno="15548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>&gt;=<sp/>0xF8)<sp/>{</highlight></codeline>
<codeline lineno="15549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexEscapeChar(os,<sp/>c);</highlight></codeline>
<codeline lineno="15550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15552"><highlight class="normal"></highlight></codeline>
<codeline lineno="15553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>encBytes<sp/>=<sp/>trailingBytes(c);</highlight></codeline>
<codeline lineno="15554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Are<sp/>there<sp/>enough<sp/>bytes<sp/>left<sp/>to<sp/>avoid<sp/>accessing<sp/>out-of-bounds<sp/>memory?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(idx<sp/>+<sp/>encBytes<sp/>-<sp/>1<sp/>&gt;=<sp/>m_str.size())<sp/>{</highlight></codeline>
<codeline lineno="15556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexEscapeChar(os,<sp/>c);</highlight></codeline>
<codeline lineno="15557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>header<sp/>is<sp/>valid,<sp/>check<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>next<sp/>encBytes<sp/>bytes<sp/>must<sp/>together<sp/>be<sp/>a<sp/>valid<sp/>utf-8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>means:<sp/>bitpattern<sp/>10XX<sp/>XXXX<sp/>and<sp/>the<sp/>extracted<sp/>value<sp/>is<sp/>sane<sp/>(ish)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>valid<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>=<sp/>headerValue(c);</highlight></codeline>
<codeline lineno="15564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>n<sp/>=<sp/>1;<sp/>n<sp/>&lt;<sp/>encBytes;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="15565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>nc<sp/>=<sp/>m_str[idx<sp/>+<sp/>n];</highlight></codeline>
<codeline lineno="15566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid<sp/>&amp;=<sp/>((nc<sp/>&amp;<sp/>0xC0)<sp/>==<sp/>0x80);</highlight></codeline>
<codeline lineno="15567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>=<sp/>(<ref refid="classvalue" kindref="compound">value</ref><sp/>&lt;&lt;<sp/>6)<sp/>|<sp/>(nc<sp/>&amp;<sp/>0x3F);</highlight></codeline>
<codeline lineno="15568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15569"><highlight class="normal"></highlight></codeline>
<codeline lineno="15570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight></codeline>
<codeline lineno="15571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wrong<sp/>bit<sp/>pattern<sp/>of<sp/>following<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!valid)<sp/>||</highlight></codeline>
<codeline lineno="15573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Overlong<sp/>encodings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="classvalue" kindref="compound">value</ref><sp/>&lt;<sp/>0x80)<sp/>||</highlight></codeline>
<codeline lineno="15575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x80<sp/>&lt;=<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>&amp;&amp;<sp/><ref refid="classvalue" kindref="compound">value &lt; 0x800   &amp;&amp; encBytes &gt;</ref><sp/>2)<sp/>||</highlight></codeline>
<codeline lineno="15576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x800<sp/>&lt;<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>&amp;&amp;<sp/><ref refid="classvalue" kindref="compound">value &lt; 0x10000 &amp;&amp; encBytes &gt;</ref><sp/>3)<sp/>||</highlight></codeline>
<codeline lineno="15577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Encoded<sp/>value<sp/>out<sp/>of<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="classvalue" kindref="compound">value</ref><sp/>&gt;=<sp/>0x110000)</highlight></codeline>
<codeline lineno="15579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="15580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hexEscapeChar(os,<sp/>c);</highlight></codeline>
<codeline lineno="15581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15583"><highlight class="normal"></highlight></codeline>
<codeline lineno="15584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>got<sp/>here,<sp/>this<sp/>is<sp/>in<sp/>fact<sp/>a<sp/>valid(ish)<sp/>utf-8<sp/>sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>encBytes;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="15586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>m_str[idx<sp/>+<sp/>n];</highlight></codeline>
<codeline lineno="15587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx<sp/>+=<sp/>encBytes<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="15589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15592"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15593"><highlight class="normal"></highlight></codeline>
<codeline lineno="15594"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/>operator<sp/>&lt;&lt;<sp/>(<sp/>std::ostream&amp;<sp/>os,<sp/>XmlEncode<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>xmlEncode<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="15595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xmlEncode.encodeTo(<sp/>os<sp/>);</highlight></codeline>
<codeline lineno="15596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="15597"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15598"><highlight class="normal"></highlight></codeline>
<codeline lineno="15599"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlWriter::ScopedElement::ScopedElement(<sp/>XmlWriter*<sp/>writer,<sp/>XmlFormatting<sp/>fmt<sp/>)</highlight></codeline>
<codeline lineno="15600"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>m_writer(<sp/>writer<sp/>),</highlight></codeline>
<codeline lineno="15601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_fmt(fmt)</highlight></codeline>
<codeline lineno="15602"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="15603"><highlight class="normal"></highlight></codeline>
<codeline lineno="15604"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlWriter::ScopedElement::ScopedElement(<sp/>ScopedElement&amp;&amp;<sp/>other<sp/>)<sp/>noexcept</highlight></codeline>
<codeline lineno="15605"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>m_writer(<sp/>other.m_writer<sp/>),</highlight></codeline>
<codeline lineno="15606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_fmt(other.m_fmt)</highlight></codeline>
<codeline lineno="15607"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="15608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.m_writer<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.m_fmt<sp/>=<sp/>XmlFormatting::None;</highlight></codeline>
<codeline lineno="15610"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15611"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlWriter::ScopedElement&amp;<sp/>XmlWriter::ScopedElement::operator=(<sp/>ScopedElement&amp;&amp;<sp/>other<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="15612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m_writer<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="15613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_writer-&gt;endElement();</highlight></codeline>
<codeline lineno="15614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_writer<sp/>=<sp/>other.m_writer;</highlight></codeline>
<codeline lineno="15616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.m_writer<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_fmt<sp/>=<sp/>other.m_fmt;</highlight></codeline>
<codeline lineno="15618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.m_fmt<sp/>=<sp/>XmlFormatting::None;</highlight></codeline>
<codeline lineno="15619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15620"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15621"><highlight class="normal"></highlight></codeline>
<codeline lineno="15622"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlWriter::ScopedElement::~ScopedElement()<sp/>{</highlight></codeline>
<codeline lineno="15623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_writer)<sp/>{</highlight></codeline>
<codeline lineno="15624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_writer-&gt;endElement(m_fmt);</highlight></codeline>
<codeline lineno="15625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15626"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15627"><highlight class="normal"></highlight></codeline>
<codeline lineno="15628"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlWriter::ScopedElement&amp;<sp/>XmlWriter::ScopedElement::writeText(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>text,<sp/>XmlFormatting<sp/>fmt<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="15629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_writer-&gt;writeText(<sp/>text,<sp/>fmt<sp/>);</highlight></codeline>
<codeline lineno="15630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15631"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15632"><highlight class="normal"></highlight></codeline>
<codeline lineno="15633"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlWriter::XmlWriter(<sp/>std::ostream&amp;<sp/>os<sp/>)<sp/>:<sp/>m_os(<sp/>os<sp/>)</highlight></codeline>
<codeline lineno="15634"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="15635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeDeclaration();</highlight></codeline>
<codeline lineno="15636"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15637"><highlight class="normal"></highlight></codeline>
<codeline lineno="15638"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlWriter::~XmlWriter()<sp/>{</highlight></codeline>
<codeline lineno="15639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!m_tags.empty())<sp/>{</highlight></codeline>
<codeline lineno="15640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endElement();</highlight></codeline>
<codeline lineno="15641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newlineIfNecessary();</highlight></codeline>
<codeline lineno="15643"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15644"><highlight class="normal"></highlight></codeline>
<codeline lineno="15645"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlWriter&amp;<sp/>XmlWriter::startElement(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name,<sp/>XmlFormatting<sp/>fmt<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="15646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ensureTagClosed();</highlight></codeline>
<codeline lineno="15647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newlineIfNecessary();</highlight></codeline>
<codeline lineno="15648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shouldIndent(fmt))<sp/>{</highlight></codeline>
<codeline lineno="15649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_os<sp/>&lt;&lt;<sp/>m_indent;</highlight></codeline>
<codeline lineno="15650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_indent<sp/>+=<sp/>&quot;<sp/><sp/>&quot;;</highlight></codeline>
<codeline lineno="15651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_os<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name;</highlight></codeline>
<codeline lineno="15653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_tags.push_back(<sp/>name<sp/>);</highlight></codeline>
<codeline lineno="15654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_tagIsOpen<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>applyFormatting(fmt);</highlight></codeline>
<codeline lineno="15656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15657"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15658"><highlight class="normal"></highlight></codeline>
<codeline lineno="15659"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlWriter::ScopedElement<sp/>XmlWriter::scopedElement(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name,<sp/>XmlFormatting<sp/>fmt<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="15660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ScopedElement<sp/>scoped(<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>fmt<sp/>);</highlight></codeline>
<codeline lineno="15661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>startElement(<sp/>name,<sp/>fmt<sp/>);</highlight></codeline>
<codeline lineno="15662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>scoped;</highlight></codeline>
<codeline lineno="15663"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15664"><highlight class="normal"></highlight></codeline>
<codeline lineno="15665"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlWriter&amp;<sp/>XmlWriter::endElement(XmlFormatting<sp/>fmt)<sp/>{</highlight></codeline>
<codeline lineno="15666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_indent<sp/>=<sp/>m_indent.substr(0,<sp/>m_indent.size()<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="15667"><highlight class="normal"></highlight></codeline>
<codeline lineno="15668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_tagIsOpen<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="15669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;/&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_tagIsOpen<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="15672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newlineIfNecessary();</highlight></codeline>
<codeline lineno="15673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shouldIndent(fmt))<sp/>{</highlight></codeline>
<codeline lineno="15674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_os<sp/>&lt;&lt;<sp/>m_indent;</highlight></codeline>
<codeline lineno="15675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_tags.back()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_os<sp/>&lt;&lt;<sp/>std::flush;</highlight></codeline>
<codeline lineno="15679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>applyFormatting(fmt);</highlight></codeline>
<codeline lineno="15680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_tags.pop_back();</highlight></codeline>
<codeline lineno="15681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15682"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15683"><highlight class="normal"></highlight></codeline>
<codeline lineno="15684"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlWriter&amp;<sp/>XmlWriter::writeAttribute(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>attribute<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="15685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!name.empty()<sp/>&amp;&amp;<sp/>!attribute.empty()<sp/>)</highlight></codeline>
<codeline lineno="15686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_os<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;=\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>XmlEncode(<sp/>attribute,<sp/>XmlEncode::ForAttributes<sp/>)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15688"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15689"><highlight class="normal"></highlight></codeline>
<codeline lineno="15690"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlWriter&amp;<sp/>XmlWriter::writeAttribute(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>attribute<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="15691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_os<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;=\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(<sp/>attribute<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal"><sp/>)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15693"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15694"><highlight class="normal"></highlight></codeline>
<codeline lineno="15695"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlWriter&amp;<sp/>XmlWriter::writeText(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>text,<sp/>XmlFormatting<sp/>fmt)<sp/>{</highlight></codeline>
<codeline lineno="15696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!text.empty()<sp/>){</highlight></codeline>
<codeline lineno="15697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>tagWasOpen<sp/>=<sp/>m_tagIsOpen;</highlight></codeline>
<codeline lineno="15698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ensureTagClosed();</highlight></codeline>
<codeline lineno="15699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tagWasOpen<sp/>&amp;&amp;<sp/>shouldIndent(fmt))<sp/>{</highlight></codeline>
<codeline lineno="15700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_os<sp/>&lt;&lt;<sp/>m_indent;</highlight></codeline>
<codeline lineno="15701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_os<sp/>&lt;&lt;<sp/>XmlEncode(<sp/>text<sp/>);</highlight></codeline>
<codeline lineno="15703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>applyFormatting(fmt);</highlight></codeline>
<codeline lineno="15704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15706"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15707"><highlight class="normal"></highlight></codeline>
<codeline lineno="15708"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlWriter&amp;<sp/>XmlWriter::writeComment(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>text,<sp/>XmlFormatting<sp/>fmt)<sp/>{</highlight></codeline>
<codeline lineno="15709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ensureTagClosed();</highlight></codeline>
<codeline lineno="15710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shouldIndent(fmt))<sp/>{</highlight></codeline>
<codeline lineno="15711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_os<sp/>&lt;&lt;<sp/>m_indent;</highlight></codeline>
<codeline lineno="15712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;!--&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>text<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;--&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>applyFormatting(fmt);</highlight></codeline>
<codeline lineno="15715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15716"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15717"><highlight class="normal"></highlight></codeline>
<codeline lineno="15718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XmlWriter::writeStylesheetRef(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>url<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="15719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&lt;?xml-stylesheet<sp/>type=\&quot;text/xsl\&quot;<sp/>href=\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>url<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;?&gt;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15720"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15721"><highlight class="normal"></highlight></codeline>
<codeline lineno="15722"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlWriter&amp;<sp/>XmlWriter::writeBlankLine()<sp/>{</highlight></codeline>
<codeline lineno="15723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ensureTagClosed();</highlight></codeline>
<codeline lineno="15724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_os<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15726"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15727"><highlight class="normal"></highlight></codeline>
<codeline lineno="15728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XmlWriter::ensureTagClosed()<sp/>{</highlight></codeline>
<codeline lineno="15729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_tagIsOpen<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="15730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_os<sp/>&lt;&lt;<sp/>&apos;&gt;</highlight><highlight class="stringliteral">&apos;<sp/>&lt;&lt;<sp/>std::flush;</highlight></codeline>
<codeline lineno="15731"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newlineIfNecessary();</highlight></codeline>
<codeline lineno="15732"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_tagIsOpen<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="15733"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15734"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15735"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15736"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>void<sp/>XmlWriter::applyFormatting(XmlFormatting<sp/>fmt)<sp/>{</highlight></codeline>
<codeline lineno="15737"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_needsNewline<sp/>=<sp/>shouldNewline(fmt);</highlight></codeline>
<codeline lineno="15738"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15739"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15740"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>void<sp/>XmlWriter::writeDeclaration()<sp/>{</highlight></codeline>
<codeline lineno="15741"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_os<sp/>&lt;&lt;<sp/>&quot;&lt;?xml<sp/>version=\&quot;1.0\&quot;<sp/>encoding=\&quot;UTF-8\&quot;?&gt;\n&quot;;</highlight></codeline>
<codeline lineno="15742"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15743"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15744"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>void<sp/>XmlWriter::newlineIfNecessary()<sp/>{</highlight></codeline>
<codeline lineno="15745"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(<sp/>m_needsNewline<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="15746"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_os<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="15747"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_needsNewline<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="15748"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15749"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15750"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="15751"><highlight class="stringliteral">//<sp/>end<sp/>catch_xmlwriter.cpp</highlight></codeline>
<codeline lineno="15752"><highlight class="stringliteral">//<sp/>start<sp/>catch_reporter_bases.cpp</highlight></codeline>
<codeline lineno="15753"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15754"><highlight class="stringliteral">#include<sp/>&lt;cstring&gt;</highlight></codeline>
<codeline lineno="15755"><highlight class="stringliteral">#include<sp/>&lt;cfloat&gt;</highlight></codeline>
<codeline lineno="15756"><highlight class="stringliteral">#include<sp/>&lt;cstdio&gt;</highlight></codeline>
<codeline lineno="15757"><highlight class="stringliteral">#include<sp/>&lt;cassert&gt;</highlight></codeline>
<codeline lineno="15758"><highlight class="stringliteral">#include<sp/>&lt;memory&gt;</highlight></codeline>
<codeline lineno="15759"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15760"><highlight class="stringliteral">namespace<sp/>Catch<sp/>{</highlight></codeline>
<codeline lineno="15761"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>void<sp/>prepareExpandedExpression(AssertionResult&amp;<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="15762"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.getExpandedExpression();</highlight></codeline>
<codeline lineno="15763"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15764"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15765"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>//<sp/>Because<sp/>formatting<sp/>using<sp/>c++<sp/>streams<sp/>is<sp/>stateful,<sp/>drop<sp/>down<sp/>to<sp/>C<sp/>is<sp/>required</highlight></codeline>
<codeline lineno="15766"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>//<sp/>Alternatively<sp/>we<sp/>could<sp/>use<sp/>stringstream,<sp/>but<sp/>its<sp/>performance<sp/>is...<sp/>not<sp/>good.</highlight></codeline>
<codeline lineno="15767"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>std::string<sp/>getFormattedDuration(<sp/>double<sp/>duration<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="15768"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Max<sp/>exponent<sp/>+<sp/>1<sp/>is<sp/>required<sp/>to<sp/>represent<sp/>the<sp/>whole<sp/>part</highlight></codeline>
<codeline lineno="15769"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>+<sp/>1<sp/>for<sp/>decimal<sp/>point</highlight></codeline>
<codeline lineno="15770"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>+<sp/>3<sp/>for<sp/>the<sp/>3<sp/>decimal<sp/>places</highlight></codeline>
<codeline lineno="15771"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>+<sp/>1<sp/>for<sp/>null<sp/>terminator</highlight></codeline>
<codeline lineno="15772"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::size_t<sp/>maxDoubleSize<sp/>=<sp/>DBL_MAX_10_EXP<sp/>+<sp/>1<sp/>+<sp/>1<sp/>+<sp/>3<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="15773"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char<sp/>buffer[maxDoubleSize];</highlight></codeline>
<codeline lineno="15774"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15775"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Save<sp/>previous<sp/>errno,<sp/>to<sp/>prevent<sp/>sprintf<sp/>from<sp/>overwriting<sp/>it</highlight></codeline>
<codeline lineno="15776"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ErrnoGuard<sp/>guard;</highlight></codeline>
<codeline lineno="15777"><highlight class="stringliteral">#ifdef<sp/>_MSC_VER</highlight></codeline>
<codeline lineno="15778"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf_s(buffer,<sp/>&quot;%.3f&quot;,<sp/>duration);</highlight></codeline>
<codeline lineno="15779"><highlight class="stringliteral">#else</highlight></codeline>
<codeline lineno="15780"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::sprintf(buffer,<sp/>&quot;%.3f&quot;,<sp/>duration);</highlight></codeline>
<codeline lineno="15781"><highlight class="stringliteral">#endif</highlight></codeline>
<codeline lineno="15782"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>std::string(buffer);</highlight></codeline>
<codeline lineno="15783"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15784"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15785"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>bool<sp/>shouldShowDuration(<sp/>IConfig<sp/>const&amp;<sp/>config,<sp/>double<sp/>duration<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="15786"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(<sp/>config.showDurations()<sp/>==<sp/>ShowDurations::Always<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="15787"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="15788"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15789"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(<sp/>config.showDurations()<sp/>==<sp/>ShowDurations::Never<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="15790"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="15791"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15792"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>double<sp/>min<sp/>=<sp/>config.minDuration();</highlight></codeline>
<codeline lineno="15793"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>min<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>duration<sp/>&gt;=<sp/>min;</highlight></codeline>
<codeline lineno="15794"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15795"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15796"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>std::string<sp/>serializeFilters(<sp/>std::vector&lt;std::string&gt;<sp/>const&amp;<sp/>container<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="15797"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReusableStringStream<sp/>oss;</highlight></codeline>
<codeline lineno="15798"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>first<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="15799"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(auto&amp;&amp;<sp/>filter<sp/>:<sp/>container)</highlight></codeline>
<codeline lineno="15800"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="15801"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!first)</highlight></codeline>
<codeline lineno="15802"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oss<sp/>&lt;&lt;<sp/>&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;;</highlight></codeline>
<codeline lineno="15803"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="15804"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="15805"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15806"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oss<sp/>&lt;&lt;<sp/>filter;</highlight></codeline>
<codeline lineno="15807"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15808"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>oss.str();</highlight></codeline>
<codeline lineno="15809"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15810"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15811"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>TestEventListenerBase::TestEventListenerBase(ReporterConfig<sp/>const<sp/>&amp;<sp/>_config)</highlight></codeline>
<codeline lineno="15812"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:StreamingReporterBase(_config)<sp/>{}</highlight></codeline>
<codeline lineno="15813"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15814"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>std::set&lt;Verbosity&gt;<sp/>TestEventListenerBase::getSupportedVerbosities()<sp/>{</highlight></codeline>
<codeline lineno="15815"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>{<sp/>Verbosity::Quiet,<sp/>Verbosity::Normal,<sp/>Verbosity::High<sp/>};</highlight></codeline>
<codeline lineno="15816"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15817"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15818"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>void<sp/>TestEventListenerBase::assertionStarting(AssertionInfo<sp/>const<sp/>&amp;)<sp/>{}</highlight></codeline>
<codeline lineno="15819"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15820"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>bool<sp/>TestEventListenerBase::assertionEnded(AssertionStats<sp/>const<sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="15821"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="15822"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15823"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15824"><highlight class="stringliteral">}<sp/>//<sp/>end<sp/>namespace<sp/>Catch</highlight></codeline>
<codeline lineno="15825"><highlight class="stringliteral">//<sp/>end<sp/>catch_reporter_bases.cpp</highlight></codeline>
<codeline lineno="15826"><highlight class="stringliteral">//<sp/>start<sp/>catch_reporter_compact.cpp</highlight></codeline>
<codeline lineno="15827"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15828"><highlight class="stringliteral">namespace<sp/>{</highlight></codeline>
<codeline lineno="15829"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15830"><highlight class="stringliteral">#ifdef<sp/>CATCH_PLATFORM_MAC</highlight></codeline>
<codeline lineno="15831"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>const<sp/>char*<sp/>failedString()<sp/>{<sp/>return<sp/>&quot;FAILED&quot;;<sp/>}</highlight></codeline>
<codeline lineno="15832"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>const<sp/>char*<sp/>passedString()<sp/>{<sp/>return<sp/>&quot;PASSED&quot;;<sp/>}</highlight></codeline>
<codeline lineno="15833"><highlight class="stringliteral">#else</highlight></codeline>
<codeline lineno="15834"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>const<sp/>char*<sp/>failedString()<sp/>{<sp/>return<sp/>&quot;failed&quot;;<sp/>}</highlight></codeline>
<codeline lineno="15835"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>const<sp/>char*<sp/>passedString()<sp/>{<sp/>return<sp/>&quot;passed&quot;;<sp/>}</highlight></codeline>
<codeline lineno="15836"><highlight class="stringliteral">#endif</highlight></codeline>
<codeline lineno="15837"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15838"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>//<sp/>Colour::LightGrey</highlight></codeline>
<codeline lineno="15839"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Catch::Colour::Code<sp/>dimColour()<sp/>{<sp/>return<sp/>Catch::Colour::FileName;<sp/>}</highlight></codeline>
<codeline lineno="15840"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15841"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>std::string<sp/>bothOrAll(<sp/>std::size_t<sp/>count<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="15842"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>count<sp/>==<sp/>1<sp/>?<sp/>std::string()<sp/>:</highlight></codeline>
<codeline lineno="15843"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>==<sp/>2<sp/>?<sp/>&quot;both<sp/>&quot;<sp/>:<sp/>&quot;all<sp/>&quot;<sp/>;</highlight></codeline>
<codeline lineno="15844"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15845"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15846"><highlight class="stringliteral">}<sp/>//<sp/>anon<sp/>namespace</highlight></codeline>
<codeline lineno="15847"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15848"><highlight class="stringliteral">namespace<sp/>Catch<sp/>{</highlight></codeline>
<codeline lineno="15849"><highlight class="stringliteral">namespace<sp/>{</highlight></codeline>
<codeline lineno="15850"><highlight class="stringliteral">//<sp/>Colour,<sp/>message<sp/>variants:</highlight></codeline>
<codeline lineno="15851"><highlight class="stringliteral">//<sp/>-<sp/>white:<sp/>No<sp/>tests<sp/>ran.</highlight></codeline>
<codeline lineno="15852"><highlight class="stringliteral">//<sp/>-<sp/><sp/><sp/>red:<sp/>Failed<sp/>[both/all]<sp/>N<sp/>test<sp/>cases,<sp/>failed<sp/>[both/all]<sp/>M<sp/>assertions.</highlight></codeline>
<codeline lineno="15853"><highlight class="stringliteral">//<sp/>-<sp/>white:<sp/>Passed<sp/>[both/all]<sp/>N<sp/>test<sp/>cases<sp/>(no<sp/>assertions).</highlight></codeline>
<codeline lineno="15854"><highlight class="stringliteral">//<sp/>-<sp/><sp/><sp/>red:<sp/>Failed<sp/>N<sp/>tests<sp/>cases,<sp/>failed<sp/>M<sp/>assertions.</highlight></codeline>
<codeline lineno="15855"><highlight class="stringliteral">//<sp/>-<sp/>green:<sp/>Passed<sp/>[both/all]<sp/>N<sp/>tests<sp/>cases<sp/>with<sp/>M<sp/>assertions.</highlight></codeline>
<codeline lineno="15856"><highlight class="stringliteral">void<sp/>printTotals(std::ostream&amp;<sp/>out,<sp/>const<sp/>Totals&amp;<sp/>totals)<sp/>{</highlight></codeline>
<codeline lineno="15857"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>if<sp/>(totals.testCases.total()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="15858"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>&quot;No<sp/>tests<sp/>ran.&quot;;</highlight></codeline>
<codeline lineno="15859"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(totals.testCases.failed<sp/>==<sp/>totals.testCases.total())<sp/>{</highlight></codeline>
<codeline lineno="15860"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Colour<sp/>colour(Colour::ResultError);</highlight></codeline>
<codeline lineno="15861"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::string<sp/>qualify_assertions_failed<sp/>=</highlight></codeline>
<codeline lineno="15862"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>totals.assertions.failed<sp/>==<sp/>totals.assertions.total()<sp/>?</highlight></codeline>
<codeline lineno="15863"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bothOrAll(totals.assertions.failed)<sp/>:<sp/>std::string();</highlight></codeline>
<codeline lineno="15864"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="15865"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Failed<sp/>&quot;<sp/>&lt;&lt;<sp/>bothOrAll(totals.testCases.failed)</highlight></codeline>
<codeline lineno="15866"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>pluralise(totals.testCases.failed,<sp/>&quot;test<sp/>case&quot;)<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;</highlight></codeline>
<codeline lineno="15867"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;failed<sp/>&quot;<sp/>&lt;&lt;<sp/>qualify_assertions_failed<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="15868"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pluralise(totals.assertions.failed,<sp/>&quot;assertion&quot;)<sp/>&lt;&lt;<sp/>&apos;</highlight><highlight class="normal">.</highlight><highlight class="stringliteral">&apos;;</highlight></codeline>
<codeline lineno="15869"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(totals.assertions.total()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="15870"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="15871"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Passed<sp/>&quot;<sp/>&lt;&lt;<sp/>bothOrAll(totals.testCases.total())</highlight></codeline>
<codeline lineno="15872"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>pluralise(totals.testCases.total(),<sp/>&quot;test<sp/>case&quot;)</highlight></codeline>
<codeline lineno="15873"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>(no<sp/>assertions).&quot;;</highlight></codeline>
<codeline lineno="15874"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(totals.assertions.failed)<sp/>{</highlight></codeline>
<codeline lineno="15875"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Colour<sp/>colour(Colour::ResultError);</highlight></codeline>
<codeline lineno="15876"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="15877"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Failed<sp/>&quot;<sp/>&lt;&lt;<sp/>pluralise(totals.testCases.failed,<sp/>&quot;test<sp/>case&quot;)<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;</highlight></codeline>
<codeline lineno="15878"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;failed<sp/>&quot;<sp/>&lt;&lt;<sp/>pluralise(totals.assertions.failed,<sp/>&quot;assertion&quot;)<sp/>&lt;&lt;<sp/>&apos;</highlight><highlight class="normal">.</highlight><highlight class="stringliteral">&apos;;</highlight></codeline>
<codeline lineno="15879"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline lineno="15880"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Colour<sp/>colour(Colour::ResultSuccess);</highlight></codeline>
<codeline lineno="15881"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="15882"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;Passed<sp/>&quot;<sp/>&lt;&lt;<sp/>bothOrAll(totals.testCases.passed)</highlight></codeline>
<codeline lineno="15883"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>pluralise(totals.testCases.passed,<sp/>&quot;test<sp/>case&quot;)<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="15884"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<sp/>with<sp/>&quot;<sp/>&lt;&lt;<sp/>pluralise(totals.assertions.passed,<sp/>&quot;assertion&quot;)<sp/>&lt;&lt;<sp/>&apos;</highlight><highlight class="normal">.</highlight><highlight class="stringliteral">&apos;;</highlight></codeline>
<codeline lineno="15885"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15886"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="15887"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15888"><highlight class="stringliteral">//<sp/>Implementation<sp/>of<sp/>CompactReporter<sp/>formatting</highlight></codeline>
<codeline lineno="15889"><highlight class="stringliteral">class<sp/>AssertionPrinter<sp/>{</highlight></codeline>
<codeline lineno="15890"><highlight class="stringliteral">public:</highlight></codeline>
<codeline lineno="15891"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>AssertionPrinter&amp;<sp/>operator=<sp/>(AssertionPrinter<sp/>const&amp;)<sp/>=<sp/>delete;</highlight></codeline>
<codeline lineno="15892"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>AssertionPrinter(AssertionPrinter<sp/>const&amp;)<sp/>=<sp/>delete;</highlight></codeline>
<codeline lineno="15893"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>AssertionPrinter(std::ostream&amp;<sp/>_stream,<sp/>AssertionStats<sp/>const&amp;<sp/>_stats,<sp/>bool<sp/>_printInfoMessages)</highlight></codeline>
<codeline lineno="15894"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>stream(_stream)</highlight></codeline>
<codeline lineno="15895"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>result(_stats.assertionResult)</highlight></codeline>
<codeline lineno="15896"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>messages(_stats.infoMessages)</highlight></codeline>
<codeline lineno="15897"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>itMessage(_stats.infoMessages.begin())</highlight></codeline>
<codeline lineno="15898"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>printInfoMessages(_printInfoMessages)<sp/>{}</highlight></codeline>
<codeline lineno="15899"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15900"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>void<sp/>print()<sp/>{</highlight></codeline>
<codeline lineno="15901"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printSourceInfo();</highlight></codeline>
<codeline lineno="15902"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15903"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itMessage<sp/>=<sp/>messages.begin();</highlight></codeline>
<codeline lineno="15904"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15905"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>switch<sp/>(result.getResultType())<sp/>{</highlight></codeline>
<codeline lineno="15906"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ResultWas::Ok:</highlight></codeline>
<codeline lineno="15907"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printResultType(Colour::ResultSuccess,<sp/>passedString());</highlight></codeline>
<codeline lineno="15908"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printOriginalExpression();</highlight></codeline>
<codeline lineno="15909"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printReconstructedExpression();</highlight></codeline>
<codeline lineno="15910"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!result.hasExpression())</highlight></codeline>
<codeline lineno="15911"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printRemainingMessages(Colour::None);</highlight></codeline>
<codeline lineno="15912"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="15913"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printRemainingMessages();</highlight></codeline>
<codeline lineno="15914"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="15915"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ResultWas::ExpressionFailed:</highlight></codeline>
<codeline lineno="15916"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(result.isOk())</highlight></codeline>
<codeline lineno="15917"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printResultType(Colour::ResultSuccess,<sp/>failedString()<sp/>+<sp/>std::string(&quot;<sp/>-<sp/>but<sp/>was<sp/>ok&quot;));</highlight></codeline>
<codeline lineno="15918"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="15919"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printResultType(Colour::Error,<sp/>failedString());</highlight></codeline>
<codeline lineno="15920"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printOriginalExpression();</highlight></codeline>
<codeline lineno="15921"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printReconstructedExpression();</highlight></codeline>
<codeline lineno="15922"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printRemainingMessages();</highlight></codeline>
<codeline lineno="15923"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="15924"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ResultWas::ThrewException:</highlight></codeline>
<codeline lineno="15925"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printResultType(Colour::Error,<sp/>failedString());</highlight></codeline>
<codeline lineno="15926"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printIssue(&quot;unexpected<sp/>exception<sp/>with<sp/>message:&quot;);</highlight></codeline>
<codeline lineno="15927"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printMessage();</highlight></codeline>
<codeline lineno="15928"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printExpressionWas();</highlight></codeline>
<codeline lineno="15929"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printRemainingMessages();</highlight></codeline>
<codeline lineno="15930"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="15931"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ResultWas::FatalErrorCondition:</highlight></codeline>
<codeline lineno="15932"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printResultType(Colour::Error,<sp/>failedString());</highlight></codeline>
<codeline lineno="15933"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printIssue(&quot;fatal<sp/>error<sp/>condition<sp/>with<sp/>message:&quot;);</highlight></codeline>
<codeline lineno="15934"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printMessage();</highlight></codeline>
<codeline lineno="15935"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printExpressionWas();</highlight></codeline>
<codeline lineno="15936"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printRemainingMessages();</highlight></codeline>
<codeline lineno="15937"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="15938"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ResultWas::DidntThrowException:</highlight></codeline>
<codeline lineno="15939"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printResultType(Colour::Error,<sp/>failedString());</highlight></codeline>
<codeline lineno="15940"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printIssue(&quot;expected<sp/>exception,<sp/>got<sp/>none&quot;);</highlight></codeline>
<codeline lineno="15941"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printExpressionWas();</highlight></codeline>
<codeline lineno="15942"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printRemainingMessages();</highlight></codeline>
<codeline lineno="15943"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="15944"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ResultWas::Info:</highlight></codeline>
<codeline lineno="15945"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printResultType(Colour::None,<sp/>&quot;info&quot;);</highlight></codeline>
<codeline lineno="15946"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printMessage();</highlight></codeline>
<codeline lineno="15947"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printRemainingMessages();</highlight></codeline>
<codeline lineno="15948"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="15949"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ResultWas::Warning:</highlight></codeline>
<codeline lineno="15950"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printResultType(Colour::None,<sp/>&quot;warning&quot;);</highlight></codeline>
<codeline lineno="15951"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printMessage();</highlight></codeline>
<codeline lineno="15952"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printRemainingMessages();</highlight></codeline>
<codeline lineno="15953"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="15954"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ResultWas::ExplicitFailure:</highlight></codeline>
<codeline lineno="15955"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printResultType(Colour::Error,<sp/>failedString());</highlight></codeline>
<codeline lineno="15956"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printIssue(&quot;explicitly&quot;);</highlight></codeline>
<codeline lineno="15957"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printRemainingMessages(Colour::None);</highlight></codeline>
<codeline lineno="15958"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="15959"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>These<sp/>cases<sp/>are<sp/>here<sp/>to<sp/>prevent<sp/>compiler<sp/>warnings</highlight></codeline>
<codeline lineno="15960"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ResultWas::Unknown:</highlight></codeline>
<codeline lineno="15961"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ResultWas::FailureBit:</highlight></codeline>
<codeline lineno="15962"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ResultWas::Exception:</highlight></codeline>
<codeline lineno="15963"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printResultType(Colour::Error,<sp/>&quot;**<sp/>internal<sp/>error<sp/>**&quot;);</highlight></codeline>
<codeline lineno="15964"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="15965"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15966"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15967"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15968"><highlight class="stringliteral">private:</highlight></codeline>
<codeline lineno="15969"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>void<sp/>printSourceInfo()<sp/>const<sp/>{</highlight></codeline>
<codeline lineno="15970"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Colour<sp/>colourGuard(Colour::FileName);</highlight></codeline>
<codeline lineno="15971"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>result.getSourceInfo()<sp/>&lt;&lt;<sp/>&apos;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&apos;;</highlight></codeline>
<codeline lineno="15972"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15973"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15974"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>void<sp/>printResultType(Colour::Code<sp/>colour,<sp/>std::string<sp/>const&amp;<sp/>passOrFail)<sp/>const<sp/>{</highlight></codeline>
<codeline lineno="15975"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!passOrFail.empty())<sp/>{</highlight></codeline>
<codeline lineno="15976"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="15977"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Colour<sp/>colourGuard(colour);</highlight></codeline>
<codeline lineno="15978"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;<sp/>&lt;&lt;<sp/>passOrFail;</highlight></codeline>
<codeline lineno="15979"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15980"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&apos;</highlight><highlight class="normal">:</highlight><highlight class="stringliteral">&apos;;</highlight></codeline>
<codeline lineno="15981"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15982"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15983"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15984"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>void<sp/>printIssue(std::string<sp/>const&amp;<sp/>issue)<sp/>const<sp/>{</highlight></codeline>
<codeline lineno="15985"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;<sp/>&lt;&lt;<sp/>issue;</highlight></codeline>
<codeline lineno="15986"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15987"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15988"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>void<sp/>printExpressionWas()<sp/>{</highlight></codeline>
<codeline lineno="15989"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(result.hasExpression())<sp/>{</highlight></codeline>
<codeline lineno="15990"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&apos;</highlight><highlight class="normal">;</highlight><highlight class="stringliteral">&apos;;</highlight></codeline>
<codeline lineno="15991"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="15992"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Colour<sp/>colour(dimColour());</highlight></codeline>
<codeline lineno="15993"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&quot;<sp/>expression<sp/>was:&quot;;</highlight></codeline>
<codeline lineno="15994"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15995"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printOriginalExpression();</highlight></codeline>
<codeline lineno="15996"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15997"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15998"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="15999"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>void<sp/>printOriginalExpression()<sp/>const<sp/>{</highlight></codeline>
<codeline lineno="16000"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(result.hasExpression())<sp/>{</highlight></codeline>
<codeline lineno="16001"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;<sp/>&lt;&lt;<sp/>result.getExpression();</highlight></codeline>
<codeline lineno="16002"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16003"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16004"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="16005"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>void<sp/>printReconstructedExpression()<sp/>const<sp/>{</highlight></codeline>
<codeline lineno="16006"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(result.hasExpandedExpression())<sp/>{</highlight></codeline>
<codeline lineno="16007"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="16008"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Colour<sp/>colour(dimColour());</highlight></codeline>
<codeline lineno="16009"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&quot;<sp/>for:<sp/>&quot;;</highlight></codeline>
<codeline lineno="16010"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16011"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>result.getExpandedExpression();</highlight></codeline>
<codeline lineno="16012"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16013"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16014"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="16015"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>void<sp/>printMessage()<sp/>{</highlight></codeline>
<codeline lineno="16016"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(itMessage<sp/>!=<sp/>messages.end())<sp/>{</highlight></codeline>
<codeline lineno="16017"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&quot;<sp/>&apos;</highlight><highlight class="stringliteral">&quot;<sp/>&lt;&lt;<sp/>itMessage-&gt;message<sp/>&lt;&lt;<sp/>&apos;\&apos;&apos;;</highlight></codeline>
<codeline lineno="16018"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++itMessage;</highlight></codeline>
<codeline lineno="16019"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16020"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16021"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="16022"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>void<sp/>printRemainingMessages(Colour::Code<sp/>colour<sp/>=<sp/>dimColour())<sp/>{</highlight></codeline>
<codeline lineno="16023"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(itMessage<sp/>==<sp/>messages.end())</highlight></codeline>
<codeline lineno="16024"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return;</highlight></codeline>
<codeline lineno="16025"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="16026"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>itEnd<sp/>=<sp/>messages.cend();</highlight></codeline>
<codeline lineno="16027"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>N<sp/>=<sp/>static_cast&lt;std::size_t&gt;(std::distance(itMessage,<sp/>itEnd));</highlight></codeline>
<codeline lineno="16028"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="16029"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="16030"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Colour<sp/>colourGuard(colour);</highlight></codeline>
<codeline lineno="16031"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&quot;</highlight><highlight class="normal"><sp/>with<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&lt;&lt;<sp/>pluralise(N,<sp/>&quot;</highlight><highlight class="normal">message</highlight><highlight class="stringliteral">&quot;)<sp/>&lt;&lt;<sp/>&apos;:&apos;;</highlight></codeline>
<codeline lineno="16032"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16033"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="16034"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(itMessage<sp/>!=<sp/>itEnd)<sp/>{</highlight></codeline>
<codeline lineno="16035"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>If<sp/>this<sp/>assertion<sp/>is<sp/>a<sp/>warning<sp/>ignore<sp/>any<sp/>INFO<sp/>messages</highlight></codeline>
<codeline lineno="16036"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(printInfoMessages<sp/>||<sp/>itMessage-&gt;type<sp/>!=<sp/>ResultWas::Info)<sp/>{</highlight></codeline>
<codeline lineno="16037"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printMessage();</highlight></codeline>
<codeline lineno="16038"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(itMessage<sp/>!=<sp/>itEnd)<sp/>{</highlight></codeline>
<codeline lineno="16039"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Colour<sp/>colourGuard(dimColour());</highlight></codeline>
<codeline lineno="16040"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&quot;</highlight><highlight class="normal"><sp/>and</highlight><highlight class="stringliteral">&quot;;</highlight></codeline>
<codeline lineno="16041"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16042"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>continue;</highlight></codeline>
<codeline lineno="16043"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16044"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++itMessage;</highlight></codeline>
<codeline lineno="16045"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16046"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16047"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="16048"><highlight class="stringliteral">private:</highlight></codeline>
<codeline lineno="16049"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/>stream;</highlight></codeline>
<codeline lineno="16050"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>AssertionResult<sp/>const&amp;<sp/>result;</highlight></codeline>
<codeline lineno="16051"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>std::vector&lt;MessageInfo&gt;<sp/>messages;</highlight></codeline>
<codeline lineno="16052"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>std::vector&lt;MessageInfo&gt;::const_iterator<sp/>itMessage;</highlight></codeline>
<codeline lineno="16053"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>bool<sp/>printInfoMessages;</highlight></codeline>
<codeline lineno="16054"><highlight class="stringliteral">};</highlight></codeline>
<codeline lineno="16055"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="16056"><highlight class="stringliteral">}<sp/>//<sp/>anon<sp/>namespace</highlight></codeline>
<codeline lineno="16057"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="16058"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>CompactReporter::getDescription()<sp/>{</highlight></codeline>
<codeline lineno="16059"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>&quot;</highlight><highlight class="normal">Reports<sp/>test<sp/>results<sp/>on<sp/>a<sp/>single<sp/>line,<sp/>suitable<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>IDEs</highlight><highlight class="stringliteral">&quot;;</highlight></codeline>
<codeline lineno="16060"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16061"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="16062"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>CompactReporter::noMatchingTestCases(<sp/>std::string<sp/>const&amp;<sp/>spec<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="16063"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&quot;</highlight><highlight class="normal">No<sp/>test<sp/>cases<sp/>matched<sp/></highlight><highlight class="stringliteral">&apos;&quot;<sp/>&lt;&lt;<sp/>spec<sp/>&lt;&lt;<sp/>&apos;</highlight><highlight class="normal">\</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="16064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16065"><highlight class="normal"></highlight></codeline>
<codeline lineno="16066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CompactReporter::assertionStarting(<sp/>AssertionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="16067"><highlight class="normal"></highlight></codeline>
<codeline lineno="16068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CompactReporter::assertionEnded(<sp/>AssertionStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_assertionStats<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="16069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionResult<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>_assertionStats.assertionResult;</highlight></codeline>
<codeline lineno="16070"><highlight class="normal"></highlight></codeline>
<codeline lineno="16071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>printInfoMessages<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16072"><highlight class="normal"></highlight></codeline>
<codeline lineno="16073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Drop<sp/>out<sp/>if<sp/>result<sp/>was<sp/>successful<sp/>and<sp/>we&apos;re<sp/>not<sp/>printing<sp/>those</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!m_config-&gt;includeSuccessfulResults()<sp/>&amp;&amp;<sp/><ref refid="structresult" kindref="compound">result</ref>.isOk()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="16075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="structresult" kindref="compound">result</ref>.getResultType()<sp/>!=<sp/>ResultWas::Warning<sp/>)</highlight></codeline>
<codeline lineno="16076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printInfoMessages<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16079"><highlight class="normal"></highlight></codeline>
<codeline lineno="16080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionPrinter<sp/>printer(<sp/>stream,<sp/>_assertionStats,<sp/>printInfoMessages<sp/>);</highlight></codeline>
<codeline lineno="16081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printer.print();</highlight></codeline>
<codeline lineno="16082"><highlight class="normal"></highlight></codeline>
<codeline lineno="16083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="16084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16086"><highlight class="normal"></highlight></codeline>
<codeline lineno="16087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CompactReporter::sectionEnded(SectionStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_sectionStats)<sp/>{</highlight></codeline>
<codeline lineno="16088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dur<sp/>=<sp/>_sectionStats.durationInSeconds;</highlight></codeline>
<codeline lineno="16089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>shouldShowDuration(<sp/>*m_config,<sp/>dur<sp/>)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="16090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>getFormattedDuration(<sp/>dur<sp/>)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>s:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>_sectionStats.sectionInfo.name<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="16091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16093"><highlight class="normal"></highlight></codeline>
<codeline lineno="16094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CompactReporter::testRunEnded(<sp/>TestRunStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_testRunStats<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="16095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printTotals(<sp/>stream,<sp/>_testRunStats.totals<sp/>);</highlight></codeline>
<codeline lineno="16096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="16097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StreamingReporterBase::testRunEnded(<sp/>_testRunStats<sp/>);</highlight></codeline>
<codeline lineno="16098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16099"><highlight class="normal"></highlight></codeline>
<codeline lineno="16100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CompactReporter::~CompactReporter()<sp/>{}</highlight></codeline>
<codeline lineno="16101"><highlight class="normal"></highlight></codeline>
<codeline lineno="16102"><highlight class="normal"><sp/><sp/><sp/><sp/>CATCH_REGISTER_REPORTER(<sp/></highlight><highlight class="stringliteral">&quot;compact&quot;</highlight><highlight class="normal">,<sp/>CompactReporter<sp/>)</highlight></codeline>
<codeline lineno="16103"><highlight class="normal"></highlight></codeline>
<codeline lineno="16104"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16105"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_reporter_compact.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16106"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_reporter_console.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16107"><highlight class="normal"></highlight></codeline>
<codeline lineno="16108"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cfloat&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16109"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16110"><highlight class="normal"></highlight></codeline>
<codeline lineno="16111"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16112"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(push)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16113"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(disable:4061)<sp/></highlight><highlight class="comment">//<sp/>Not<sp/>all<sp/>labels<sp/>are<sp/>EXPLICITLY<sp/>handled<sp/>in<sp/>switch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16114"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>4062<sp/>(not<sp/>all<sp/>labels<sp/>are<sp/>handled<sp/>and<sp/>default<sp/>is<sp/>missing)<sp/>is<sp/>enabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16115"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16116"><highlight class="normal"></highlight></codeline>
<codeline lineno="16117"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16118"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>clang<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>simplicity,<sp/>benchmarking-only<sp/>helpers<sp/>are<sp/>always<sp/>enabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16120"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wunused-function&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16121"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16122"><highlight class="normal"></highlight></codeline>
<codeline lineno="16123"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="16124"><highlight class="normal"></highlight></codeline>
<codeline lineno="16125"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="16126"><highlight class="normal"></highlight></codeline>
<codeline lineno="16127"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formatter<sp/>impl<sp/>for<sp/>ConsoleReporter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16128"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ConsoleAssertionPrinter<sp/>{</highlight></codeline>
<codeline lineno="16129"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="16130"><highlight class="normal"><sp/><sp/><sp/><sp/>ConsoleAssertionPrinter&amp;<sp/>operator=<sp/>(ConsoleAssertionPrinter<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16131"><highlight class="normal"><sp/><sp/><sp/><sp/>ConsoleAssertionPrinter(ConsoleAssertionPrinter<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16132"><highlight class="normal"><sp/><sp/><sp/><sp/>ConsoleAssertionPrinter(std::ostream&amp;<sp/>_stream,<sp/>AssertionStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_stats,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_printInfoMessages)</highlight></codeline>
<codeline lineno="16133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>stream(_stream),</highlight></codeline>
<codeline lineno="16134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats(_stats),</highlight></codeline>
<codeline lineno="16135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structresult" kindref="compound">result</ref>(_stats.assertionResult),</highlight></codeline>
<codeline lineno="16136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colour(Colour::None),</highlight></codeline>
<codeline lineno="16137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>message(<ref refid="structresult" kindref="compound">result</ref>.getMessage()),</highlight></codeline>
<codeline lineno="16138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>messages(_stats.infoMessages),</highlight></codeline>
<codeline lineno="16139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printInfoMessages(_printInfoMessages)<sp/>{</highlight></codeline>
<codeline lineno="16140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="structresult" kindref="compound">result</ref>.getResultType())<sp/>{</highlight></codeline>
<codeline lineno="16141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ResultWas::Ok:</highlight></codeline>
<codeline lineno="16142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colour<sp/>=<sp/>Colour::Success;</highlight></codeline>
<codeline lineno="16143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>passOrFail<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;PASSED&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if(<sp/>result.hasMessage()<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_stats.infoMessages.size()<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="16146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>messageLabel<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;with<sp/>message&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_stats.infoMessages.size()<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="16148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>messageLabel<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;with<sp/>messages&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ResultWas::ExpressionFailed:</highlight></codeline>
<codeline lineno="16151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structresult" kindref="compound">result</ref>.isOk())<sp/>{</highlight></codeline>
<codeline lineno="16152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colour<sp/>=<sp/>Colour::Success;</highlight></codeline>
<codeline lineno="16153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>passOrFail<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;FAILED<sp/>-<sp/>but<sp/>was<sp/>ok&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="16155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colour<sp/>=<sp/>Colour::Error;</highlight></codeline>
<codeline lineno="16156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>passOrFail<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;FAILED&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_stats.infoMessages.size()<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="16159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>messageLabel<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;with<sp/>message&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_stats.infoMessages.size()<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="16161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>messageLabel<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;with<sp/>messages&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ResultWas::ThrewException:</highlight></codeline>
<codeline lineno="16164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colour<sp/>=<sp/>Colour::Error;</highlight></codeline>
<codeline lineno="16165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>passOrFail<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;FAILED&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>messageLabel<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;due<sp/>to<sp/>unexpected<sp/>exception<sp/>with<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_stats.infoMessages.size()<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="16168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>messageLabel<sp/>+=<sp/>&quot;message&quot;;</highlight></codeline>
<codeline lineno="16169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_stats.infoMessages.size()<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="16170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>messageLabel<sp/>+=<sp/>&quot;messages&quot;;</highlight></codeline>
<codeline lineno="16171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ResultWas::FatalErrorCondition:</highlight></codeline>
<codeline lineno="16173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colour<sp/>=<sp/>Colour::Error;</highlight></codeline>
<codeline lineno="16174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>passOrFail<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;FAILED&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>messageLabel<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;due<sp/>to<sp/>a<sp/>fatal<sp/>error<sp/>condition&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ResultWas::DidntThrowException:</highlight></codeline>
<codeline lineno="16178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colour<sp/>=<sp/>Colour::Error;</highlight></codeline>
<codeline lineno="16179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>passOrFail<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;FAILED&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>messageLabel<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;because<sp/>no<sp/>exception<sp/>was<sp/>thrown<sp/>where<sp/>one<sp/>was<sp/>expected&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ResultWas::Info:</highlight></codeline>
<codeline lineno="16183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>messageLabel<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;info&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ResultWas::Warning:</highlight></codeline>
<codeline lineno="16186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>messageLabel<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;warning&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ResultWas::ExplicitFailure:</highlight></codeline>
<codeline lineno="16189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>passOrFail<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;FAILED&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colour<sp/>=<sp/>Colour::Error;</highlight></codeline>
<codeline lineno="16191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_stats.infoMessages.size()<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="16192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>messageLabel<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;explicitly<sp/>with<sp/>message&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_stats.infoMessages.size()<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="16194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>messageLabel<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;explicitly<sp/>with<sp/>messages&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>cases<sp/>are<sp/>here<sp/>to<sp/>prevent<sp/>compiler<sp/>warnings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ResultWas::Unknown:</highlight></codeline>
<codeline lineno="16198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ResultWas::FailureBit:</highlight></codeline>
<codeline lineno="16199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ResultWas::Exception:</highlight></codeline>
<codeline lineno="16200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>passOrFail<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;**<sp/>internal<sp/>error<sp/>**&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colour<sp/>=<sp/>Colour::Error;</highlight></codeline>
<codeline lineno="16202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16205"><highlight class="normal"></highlight></codeline>
<codeline lineno="16206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="16207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printSourceInfo();</highlight></codeline>
<codeline lineno="16208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stats.totals.assertions.total()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="16209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printResultType();</highlight></codeline>
<codeline lineno="16210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printOriginalExpression();</highlight></codeline>
<codeline lineno="16211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printReconstructedExpression();</highlight></codeline>
<codeline lineno="16212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="16213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printMessage();</highlight></codeline>
<codeline lineno="16216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16217"><highlight class="normal"></highlight></codeline>
<codeline lineno="16218"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="16219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printResultType()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="16220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!passOrFail.empty())<sp/>{</highlight></codeline>
<codeline lineno="16221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Colour<sp/>colourGuard(colour);</highlight></codeline>
<codeline lineno="16222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>passOrFail<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printOriginalExpression()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="16226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structresult" kindref="compound">result</ref>.hasExpression())<sp/>{</highlight></codeline>
<codeline lineno="16227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Colour<sp/>colourGuard(Colour::OriginalExpression);</highlight></codeline>
<codeline lineno="16228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/><ref refid="structresult" kindref="compound">result</ref>.getExpressionInMacro();</highlight></codeline>
<codeline lineno="16230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printReconstructedExpression()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="16234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structresult" kindref="compound">result</ref>.hasExpandedExpression())<sp/>{</highlight></codeline>
<codeline lineno="16235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;with<sp/>expansion:\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Colour<sp/>colourGuard(Colour::ReconstructedExpression);</highlight></codeline>
<codeline lineno="16237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>Column(<ref refid="structresult" kindref="compound">result</ref>.getExpandedExpression()).indent(2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printMessage()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="16241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!messageLabel.empty())</highlight></codeline>
<codeline lineno="16242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>messageLabel<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>msg<sp/>:<sp/>messages)<sp/>{</highlight></codeline>
<codeline lineno="16244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>assertion<sp/>is<sp/>a<sp/>warning<sp/>ignore<sp/>any<sp/>INFO<sp/>messages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(printInfoMessages<sp/>||<sp/>msg.type<sp/>!=<sp/>ResultWas::Info)</highlight></codeline>
<codeline lineno="16246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>Column(msg.message).indent(2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>printSourceInfo()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="16250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Colour<sp/>colourGuard(Colour::FileName);</highlight></codeline>
<codeline lineno="16251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/><ref refid="structresult" kindref="compound">result</ref>.getSourceInfo()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16253"><highlight class="normal"></highlight></codeline>
<codeline lineno="16254"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/>stream;</highlight></codeline>
<codeline lineno="16255"><highlight class="normal"><sp/><sp/><sp/><sp/>AssertionStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>stats;</highlight></codeline>
<codeline lineno="16256"><highlight class="normal"><sp/><sp/><sp/><sp/>AssertionResult<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="16257"><highlight class="normal"><sp/><sp/><sp/><sp/>Colour::Code<sp/>colour;</highlight></codeline>
<codeline lineno="16258"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>passOrFail;</highlight></codeline>
<codeline lineno="16259"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>messageLabel;</highlight></codeline>
<codeline lineno="16260"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>message;</highlight></codeline>
<codeline lineno="16261"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;MessageInfo&gt;<sp/>messages;</highlight></codeline>
<codeline lineno="16262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>printInfoMessages;</highlight></codeline>
<codeline lineno="16263"><highlight class="normal">};</highlight></codeline>
<codeline lineno="16264"><highlight class="normal"></highlight></codeline>
<codeline lineno="16265"><highlight class="normal">std::size_t<sp/>makeRatio(std::size_t<sp/>number,<sp/>std::size_t<sp/>total)<sp/>{</highlight></codeline>
<codeline lineno="16266"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>ratio<sp/>=<sp/>total<sp/>&gt;<sp/>0<sp/>?<sp/>CATCH_CONFIG_CONSOLE_WIDTH<sp/>*<sp/>number<sp/>/<sp/>total<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="16267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(ratio<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>number<sp/>&gt;<sp/>0)<sp/>?<sp/>1<sp/>:<sp/>ratio;</highlight></codeline>
<codeline lineno="16268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16269"><highlight class="normal"></highlight></codeline>
<codeline lineno="16270"><highlight class="normal">std::size_t&amp;<sp/>findMax(std::size_t&amp;<sp/>i,<sp/>std::size_t&amp;<sp/>j,<sp/>std::size_t&amp;<sp/>k)<sp/>{</highlight></codeline>
<codeline lineno="16271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>j<sp/>&amp;&amp;<sp/>i<sp/>&gt;<sp/>k)</highlight></codeline>
<codeline lineno="16272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="16273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>k)</highlight></codeline>
<codeline lineno="16274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="16275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="16277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16278"><highlight class="normal"></highlight></codeline>
<codeline lineno="16279"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ColumnInfo<sp/>{</highlight></codeline>
<codeline lineno="16280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>Justification<sp/>{<sp/>Left,<sp/>Right<sp/>};</highlight></codeline>
<codeline lineno="16281"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>name;</highlight></codeline>
<codeline lineno="16282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width;</highlight></codeline>
<codeline lineno="16283"><highlight class="normal"><sp/><sp/><sp/><sp/>Justification<sp/>justification;</highlight></codeline>
<codeline lineno="16284"><highlight class="normal">};</highlight></codeline>
<codeline lineno="16285"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ColumnBreak<sp/>{};</highlight></codeline>
<codeline lineno="16286"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">RowBreak<sp/>{};</highlight></codeline>
<codeline lineno="16287"><highlight class="normal"></highlight></codeline>
<codeline lineno="16288"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Duration<sp/>{</highlight></codeline>
<codeline lineno="16289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>Unit<sp/>{</highlight></codeline>
<codeline lineno="16290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Auto,</highlight></codeline>
<codeline lineno="16291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Nanoseconds,</highlight></codeline>
<codeline lineno="16292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Microseconds,</highlight></codeline>
<codeline lineno="16293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Milliseconds,</highlight></codeline>
<codeline lineno="16294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Seconds,</highlight></codeline>
<codeline lineno="16295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Minutes</highlight></codeline>
<codeline lineno="16296"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="16297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>s_nanosecondsInAMicrosecond<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="16298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>s_nanosecondsInAMillisecond<sp/>=<sp/>1000<sp/>*<sp/>s_nanosecondsInAMicrosecond;</highlight></codeline>
<codeline lineno="16299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>s_nanosecondsInASecond<sp/>=<sp/>1000<sp/>*<sp/>s_nanosecondsInAMillisecond;</highlight></codeline>
<codeline lineno="16300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>s_nanosecondsInAMinute<sp/>=<sp/>60<sp/>*<sp/>s_nanosecondsInASecond;</highlight></codeline>
<codeline lineno="16301"><highlight class="normal"></highlight></codeline>
<codeline lineno="16302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m_inNanoseconds;</highlight></codeline>
<codeline lineno="16303"><highlight class="normal"><sp/><sp/><sp/><sp/>Unit<sp/>m_units;</highlight></codeline>
<codeline lineno="16304"><highlight class="normal"></highlight></codeline>
<codeline lineno="16305"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="16306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>Duration(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>inNanoseconds,<sp/>Unit<sp/>units<sp/>=<sp/>Unit::Auto)</highlight></codeline>
<codeline lineno="16307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>m_inNanoseconds(inNanoseconds),</highlight></codeline>
<codeline lineno="16308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_units(units)<sp/>{</highlight></codeline>
<codeline lineno="16309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_units<sp/>==<sp/>Unit::Auto)<sp/>{</highlight></codeline>
<codeline lineno="16310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_inNanoseconds<sp/>&lt;<sp/>s_nanosecondsInAMicrosecond)</highlight></codeline>
<codeline lineno="16311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_units<sp/>=<sp/>Unit::Nanoseconds;</highlight></codeline>
<codeline lineno="16312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_inNanoseconds<sp/>&lt;<sp/>s_nanosecondsInAMillisecond)</highlight></codeline>
<codeline lineno="16313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_units<sp/>=<sp/>Unit::Microseconds;</highlight></codeline>
<codeline lineno="16314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_inNanoseconds<sp/>&lt;<sp/>s_nanosecondsInASecond)</highlight></codeline>
<codeline lineno="16315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_units<sp/>=<sp/>Unit::Milliseconds;</highlight></codeline>
<codeline lineno="16316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_inNanoseconds<sp/>&lt;<sp/>s_nanosecondsInAMinute)</highlight></codeline>
<codeline lineno="16317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_units<sp/>=<sp/>Unit::Seconds;</highlight></codeline>
<codeline lineno="16318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_units<sp/>=<sp/>Unit::Minutes;</highlight></codeline>
<codeline lineno="16320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16321"><highlight class="normal"></highlight></codeline>
<codeline lineno="16322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16323"><highlight class="normal"></highlight></codeline>
<codeline lineno="16324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>()<sp/>const<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="16325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(m_units)<sp/>{</highlight></codeline>
<codeline lineno="16326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Unit::Microseconds:</highlight></codeline>
<codeline lineno="16327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_inNanoseconds<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(s_nanosecondsInAMicrosecond);</highlight></codeline>
<codeline lineno="16328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Unit::Milliseconds:</highlight></codeline>
<codeline lineno="16329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_inNanoseconds<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(s_nanosecondsInAMillisecond);</highlight></codeline>
<codeline lineno="16330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Unit::Seconds:</highlight></codeline>
<codeline lineno="16331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_inNanoseconds<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(s_nanosecondsInASecond);</highlight></codeline>
<codeline lineno="16332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Unit::Minutes:</highlight></codeline>
<codeline lineno="16333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_inNanoseconds<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(s_nanosecondsInAMinute);</highlight></codeline>
<codeline lineno="16334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="16335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_inNanoseconds;</highlight></codeline>
<codeline lineno="16336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16337"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>unitsAsString()<sp/>const<sp/>-&gt;<sp/>std::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="16339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(m_units)<sp/>{</highlight></codeline>
<codeline lineno="16340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Unit::Nanoseconds:</highlight></codeline>
<codeline lineno="16341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ns&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Unit::Microseconds:</highlight></codeline>
<codeline lineno="16343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;us&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Unit::Milliseconds:</highlight></codeline>
<codeline lineno="16345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ms&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Unit::Seconds:</highlight></codeline>
<codeline lineno="16347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;s&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Unit::Minutes:</highlight></codeline>
<codeline lineno="16349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="16351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;**<sp/>internal<sp/>error<sp/>**&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16353"><highlight class="normal"></highlight></codeline>
<codeline lineno="16354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator<sp/>&lt;&lt;<sp/>(std::ostream&amp;<sp/>os,<sp/>Duration<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>duration)<sp/>-&gt;<sp/>std::ostream&amp;<sp/>{</highlight></codeline>
<codeline lineno="16356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/>duration.value()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>duration.unitsAsString();</highlight></codeline>
<codeline lineno="16357"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16358"><highlight class="normal">};</highlight></codeline>
<codeline lineno="16359"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>anon<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16360"><highlight class="normal"></highlight></codeline>
<codeline lineno="16361"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TablePrinter<sp/>{</highlight></codeline>
<codeline lineno="16362"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/>m_os;</highlight></codeline>
<codeline lineno="16363"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;ColumnInfo&gt;<sp/>m_columnInfos;</highlight></codeline>
<codeline lineno="16364"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>m_oss;</highlight></codeline>
<codeline lineno="16365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m_currentColumn<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="16366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_isOpen<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16367"><highlight class="normal"></highlight></codeline>
<codeline lineno="16368"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="16369"><highlight class="normal"><sp/><sp/><sp/><sp/>TablePrinter(<sp/>std::ostream&amp;<sp/>os,<sp/>std::vector&lt;ColumnInfo&gt;<sp/>columnInfos<sp/>)</highlight></codeline>
<codeline lineno="16370"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>m_os(<sp/>os<sp/>),</highlight></codeline>
<codeline lineno="16371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_columnInfos(<sp/>std::move(<sp/>columnInfos<sp/>)<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="16372"><highlight class="normal"></highlight></codeline>
<codeline lineno="16373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>columnInfos()<sp/>const<sp/>-&gt;<sp/>std::vector&lt;ColumnInfo&gt;<sp/>const&amp;<sp/>{</highlight></codeline>
<codeline lineno="16374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_columnInfos;</highlight></codeline>
<codeline lineno="16375"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16376"><highlight class="normal"></highlight></codeline>
<codeline lineno="16377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>open()<sp/>{</highlight></codeline>
<codeline lineno="16378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_isOpen)<sp/>{</highlight></codeline>
<codeline lineno="16379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_isOpen<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>RowBreak();</highlight></codeline>
<codeline lineno="16381"><highlight class="normal"></highlight></codeline>
<codeline lineno="16382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Columns<sp/>headerCols;</highlight></codeline>
<codeline lineno="16383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Spacer<sp/>spacer(2);</highlight></codeline>
<codeline lineno="16384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>:<sp/>m_columnInfos)<sp/>{</highlight></codeline>
<codeline lineno="16385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>headerCols<sp/>+=<sp/>Column(<ref refid="structinfo" kindref="compound">info</ref>.name).width(static_cast&lt;std::size_t&gt;(<ref refid="structinfo" kindref="compound">info</ref>.width<sp/>-<sp/>2));</highlight></codeline>
<codeline lineno="16386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>headerCols<sp/>+=<sp/>spacer;</highlight></codeline>
<codeline lineno="16387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_os<sp/>&lt;&lt;<sp/>headerCols<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16389"><highlight class="normal"></highlight></codeline>
<codeline lineno="16390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_os<sp/>&lt;&lt;<sp/>Catch::getLineOfChars&lt;</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">&gt;()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16392"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>close()<sp/>{</highlight></codeline>
<codeline lineno="16394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_isOpen)<sp/>{</highlight></codeline>
<codeline lineno="16395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>RowBreak();</highlight></codeline>
<codeline lineno="16396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_os<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="16397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_isOpen<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16400"><highlight class="normal"></highlight></codeline>
<codeline lineno="16401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="16402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>TablePrinter&amp;<sp/>operator<sp/>&lt;&lt;<sp/>(TablePrinter&amp;<sp/>tp,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="16403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tp.m_oss<sp/>&lt;&lt;<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="16404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tp;</highlight></codeline>
<codeline lineno="16405"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16406"><highlight class="normal"></highlight></codeline>
<codeline lineno="16407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>TablePrinter&amp;<sp/>operator<sp/>&lt;&lt;<sp/>(TablePrinter&amp;<sp/>tp,<sp/>ColumnBreak)<sp/>{</highlight></codeline>
<codeline lineno="16408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>colStr<sp/>=<sp/>tp.m_oss.str();</highlight></codeline>
<codeline lineno="16409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>strSize<sp/>=<sp/>colStr.size();</highlight></codeline>
<codeline lineno="16410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tp.m_oss.str(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="16411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tp.open();</highlight></codeline>
<codeline lineno="16412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tp.m_currentColumn<sp/>==<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(tp.m_columnInfos.size()<sp/>-<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="16413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tp.m_currentColumn<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="16414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tp.m_os<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tp.m_currentColumn++;</highlight></codeline>
<codeline lineno="16417"><highlight class="normal"></highlight></codeline>
<codeline lineno="16418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>colInfo<sp/>=<sp/>tp.m_columnInfos[tp.m_currentColumn];</highlight></codeline>
<codeline lineno="16419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>padding<sp/>=<sp/>(strSize<sp/>+<sp/>1<sp/>&lt;<sp/>static_cast&lt;std::size_t&gt;(colInfo.width))</highlight></codeline>
<codeline lineno="16420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>std::string(colInfo.width<sp/>-<sp/>(strSize<sp/>+<sp/>1),<sp/>&apos;<sp/>&apos;)</highlight></codeline>
<codeline lineno="16421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>std::string();</highlight></codeline>
<codeline lineno="16422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(colInfo.justification<sp/>==<sp/>ColumnInfo::Left)</highlight></codeline>
<codeline lineno="16423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tp.m_os<sp/>&lt;&lt;<sp/>colStr<sp/>&lt;&lt;<sp/>padding<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tp.m_os<sp/>&lt;&lt;<sp/>padding<sp/>&lt;&lt;<sp/>colStr<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tp;</highlight></codeline>
<codeline lineno="16427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16428"><highlight class="normal"></highlight></codeline>
<codeline lineno="16429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>TablePrinter&amp;<sp/>operator<sp/>&lt;&lt;<sp/>(TablePrinter&amp;<sp/>tp,<sp/>RowBreak)<sp/>{</highlight></codeline>
<codeline lineno="16430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tp.m_currentColumn<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="16431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tp.m_os<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tp.m_currentColumn<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="16433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tp;</highlight></codeline>
<codeline lineno="16435"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16436"><highlight class="normal">};</highlight></codeline>
<codeline lineno="16437"><highlight class="normal"></highlight></codeline>
<codeline lineno="16438"><highlight class="normal">ConsoleReporter::ConsoleReporter(ReporterConfig<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>config)</highlight></codeline>
<codeline lineno="16439"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>StreamingReporterBase(config),</highlight></codeline>
<codeline lineno="16440"><highlight class="normal"><sp/><sp/><sp/><sp/>m_tablePrinter(new<sp/>TablePrinter(config.stream(),</highlight></codeline>
<codeline lineno="16441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[&amp;config]()<sp/>-&gt;<sp/>std::vector&lt;ColumnInfo&gt;<sp/>{</highlight></codeline>
<codeline lineno="16442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(config.fullConfig()-&gt;benchmarkNoAnalysis())</highlight></codeline>
<codeline lineno="16443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="16444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="16445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;benchmark<sp/>name&quot;</highlight><highlight class="normal">,<sp/>CATCH_CONFIG_CONSOLE_WIDTH<sp/>-<sp/>43,<sp/>ColumnInfo::Left<sp/>},</highlight></codeline>
<codeline lineno="16446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/>samples&quot;</highlight><highlight class="normal">,<sp/>14,<sp/>ColumnInfo::Right<sp/>},</highlight></codeline>
<codeline lineno="16447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>iterations&quot;</highlight><highlight class="normal">,<sp/>14,<sp/>ColumnInfo::Right<sp/>},</highlight></codeline>
<codeline lineno="16448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mean&quot;</highlight><highlight class="normal">,<sp/>14,<sp/>ColumnInfo::Right<sp/>}</highlight></codeline>
<codeline lineno="16449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="16450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="16453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="16454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;benchmark<sp/>name&quot;</highlight><highlight class="normal">,<sp/>CATCH_CONFIG_CONSOLE_WIDTH<sp/>-<sp/>43,<sp/>ColumnInfo::Left<sp/>},</highlight></codeline>
<codeline lineno="16455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;samples<sp/><sp/><sp/><sp/><sp/><sp/>mean<sp/><sp/><sp/><sp/><sp/><sp/><sp/>std<sp/>dev&quot;</highlight><highlight class="normal">,<sp/>14,<sp/>ColumnInfo::Right<sp/>},</highlight></codeline>
<codeline lineno="16456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;iterations<sp/><sp/><sp/>low<sp/>mean<sp/><sp/><sp/>low<sp/>std<sp/>dev&quot;</highlight><highlight class="normal">,<sp/>14,<sp/>ColumnInfo::Right<sp/>},</highlight></codeline>
<codeline lineno="16457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;estimated<sp/><sp/><sp/><sp/>high<sp/>mean<sp/><sp/>high<sp/>std<sp/>dev&quot;</highlight><highlight class="normal">,<sp/>14,<sp/>ColumnInfo::Right<sp/>}</highlight></codeline>
<codeline lineno="16458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="16459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16460"><highlight class="normal"><sp/><sp/><sp/><sp/>}()))<sp/>{}</highlight></codeline>
<codeline lineno="16461"><highlight class="normal">ConsoleReporter::~ConsoleReporter()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16462"><highlight class="normal"></highlight></codeline>
<codeline lineno="16463"><highlight class="normal">std::string<sp/>ConsoleReporter::getDescription()<sp/>{</highlight></codeline>
<codeline lineno="16464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Reports<sp/>test<sp/>results<sp/>as<sp/>plain<sp/>lines<sp/>of<sp/>text&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16465"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16466"><highlight class="normal"></highlight></codeline>
<codeline lineno="16467"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ConsoleReporter::noMatchingTestCases(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>spec)<sp/>{</highlight></codeline>
<codeline lineno="16468"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>test<sp/>cases<sp/>matched<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>spec<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\&apos;&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="16469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16470"><highlight class="normal"></highlight></codeline>
<codeline lineno="16471"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ConsoleReporter::reportInvalidArguments(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;arg){</highlight></codeline>
<codeline lineno="16472"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>Filter:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>arg<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="16473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16474"><highlight class="normal"></highlight></codeline>
<codeline lineno="16475"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ConsoleReporter::assertionStarting(AssertionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/>{}</highlight></codeline>
<codeline lineno="16476"><highlight class="normal"></highlight></codeline>
<codeline lineno="16477"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ConsoleReporter::assertionEnded(AssertionStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_assertionStats)<sp/>{</highlight></codeline>
<codeline lineno="16478"><highlight class="normal"><sp/><sp/><sp/><sp/>AssertionResult<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>_assertionStats.assertionResult;</highlight></codeline>
<codeline lineno="16479"><highlight class="normal"></highlight></codeline>
<codeline lineno="16480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>includeResults<sp/>=<sp/>m_config-&gt;includeSuccessfulResults()<sp/>||<sp/>!<ref refid="structresult" kindref="compound">result</ref>.isOk();</highlight></codeline>
<codeline lineno="16481"><highlight class="normal"></highlight></codeline>
<codeline lineno="16482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Drop<sp/>out<sp/>if<sp/>result<sp/>was<sp/>successful<sp/>but<sp/>we&apos;re<sp/>not<sp/>printing<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!includeResults<sp/>&amp;&amp;<sp/><ref refid="structresult" kindref="compound">result</ref>.getResultType()<sp/>!=<sp/>ResultWas::Warning)</highlight></codeline>
<codeline lineno="16484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16485"><highlight class="normal"></highlight></codeline>
<codeline lineno="16486"><highlight class="normal"><sp/><sp/><sp/><sp/>lazyPrint();</highlight></codeline>
<codeline lineno="16487"><highlight class="normal"></highlight></codeline>
<codeline lineno="16488"><highlight class="normal"><sp/><sp/><sp/><sp/>ConsoleAssertionPrinter<sp/>printer(stream,<sp/>_assertionStats,<sp/>includeResults);</highlight></codeline>
<codeline lineno="16489"><highlight class="normal"><sp/><sp/><sp/><sp/>printer.print();</highlight></codeline>
<codeline lineno="16490"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="16491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16492"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16493"><highlight class="normal"></highlight></codeline>
<codeline lineno="16494"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ConsoleReporter::sectionStarting(SectionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_sectionInfo)<sp/>{</highlight></codeline>
<codeline lineno="16495"><highlight class="normal"><sp/><sp/><sp/><sp/>m_tablePrinter-&gt;close();</highlight></codeline>
<codeline lineno="16496"><highlight class="normal"><sp/><sp/><sp/><sp/>m_headerPrinted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16497"><highlight class="normal"><sp/><sp/><sp/><sp/>StreamingReporterBase::sectionStarting(_sectionInfo);</highlight></codeline>
<codeline lineno="16498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16499"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ConsoleReporter::sectionEnded(SectionStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_sectionStats)<sp/>{</highlight></codeline>
<codeline lineno="16500"><highlight class="normal"><sp/><sp/><sp/><sp/>m_tablePrinter-&gt;close();</highlight></codeline>
<codeline lineno="16501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_sectionStats.missingAssertions)<sp/>{</highlight></codeline>
<codeline lineno="16502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lazyPrint();</highlight></codeline>
<codeline lineno="16503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Colour<sp/>colour(Colour::ResultError);</highlight></codeline>
<codeline lineno="16504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_sectionStack.size()<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="16505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nNo<sp/>assertions<sp/>in<sp/>section&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\nNo<sp/>assertions<sp/>in<sp/>test<sp/>case&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>_sectionStats.sectionInfo.name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="16509"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dur<sp/>=<sp/>_sectionStats.durationInSeconds;</highlight></codeline>
<codeline lineno="16511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shouldShowDuration(*m_config,<sp/>dur))<sp/>{</highlight></codeline>
<codeline lineno="16512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>getFormattedDuration(dur)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>s:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>_sectionStats.sectionInfo.name<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="16513"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_headerPrinted)<sp/>{</highlight></codeline>
<codeline lineno="16515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_headerPrinted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16516"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16517"><highlight class="normal"><sp/><sp/><sp/><sp/>StreamingReporterBase::sectionEnded(_sectionStats);</highlight></codeline>
<codeline lineno="16518"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16519"><highlight class="normal"></highlight></codeline>
<codeline lineno="16520"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_ENABLE_BENCHMARKING)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16521"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ConsoleReporter::benchmarkPreparing(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="16522"><highlight class="normal"><sp/><sp/><sp/><sp/>lazyPrintWithoutClosingBenchmarkTable();</highlight></codeline>
<codeline lineno="16523"><highlight class="normal"></highlight></codeline>
<codeline lineno="16524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nameCol<sp/>=<sp/>Column(name).width(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m_tablePrinter-&gt;columnInfos()[0].width<sp/>-<sp/>2));</highlight></codeline>
<codeline lineno="16525"><highlight class="normal"></highlight></codeline>
<codeline lineno="16526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>firstLine<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>line<sp/>:<sp/>nameCol)<sp/>{</highlight></codeline>
<codeline lineno="16528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!firstLine)</highlight></codeline>
<codeline lineno="16529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*m_tablePrinter)<sp/>&lt;&lt;<sp/>ColumnBreak()<sp/>&lt;&lt;<sp/>ColumnBreak()<sp/>&lt;&lt;<sp/>ColumnBreak();</highlight></codeline>
<codeline lineno="16530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>firstLine<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16532"><highlight class="normal"></highlight></codeline>
<codeline lineno="16533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*m_tablePrinter)<sp/>&lt;&lt;<sp/>line<sp/>&lt;&lt;<sp/>ColumnBreak();</highlight></codeline>
<codeline lineno="16534"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16535"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16536"><highlight class="normal"></highlight></codeline>
<codeline lineno="16537"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ConsoleReporter::benchmarkStarting(BenchmarkInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structinfo" kindref="compound">info</ref>)<sp/>{</highlight></codeline>
<codeline lineno="16538"><highlight class="normal"><sp/><sp/><sp/><sp/>(*m_tablePrinter)<sp/>&lt;&lt;<sp/><ref refid="structinfo" kindref="compound">info</ref>.samples<sp/>&lt;&lt;<sp/>ColumnBreak()</highlight></codeline>
<codeline lineno="16539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="structinfo" kindref="compound">info</ref>.iterations<sp/>&lt;&lt;<sp/>ColumnBreak();</highlight></codeline>
<codeline lineno="16540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_config-&gt;benchmarkNoAnalysis())</highlight></codeline>
<codeline lineno="16541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*m_tablePrinter)<sp/>&lt;&lt;<sp/>Duration(<ref refid="structinfo" kindref="compound">info</ref>.estimatedDuration)<sp/>&lt;&lt;<sp/>ColumnBreak();</highlight></codeline>
<codeline lineno="16542"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16543"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ConsoleReporter::benchmarkEnded(BenchmarkStats&lt;&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>stats)<sp/>{</highlight></codeline>
<codeline lineno="16544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_config-&gt;benchmarkNoAnalysis())</highlight></codeline>
<codeline lineno="16545"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="16546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*m_tablePrinter)<sp/>&lt;&lt;<sp/>Duration(stats.mean.point.count())<sp/>&lt;&lt;<sp/>ColumnBreak();</highlight></codeline>
<codeline lineno="16547"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16549"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="16550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*m_tablePrinter)<sp/>&lt;&lt;<sp/>ColumnBreak()</highlight></codeline>
<codeline lineno="16551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Duration(stats.mean.point.count())<sp/>&lt;&lt;<sp/>ColumnBreak()</highlight></codeline>
<codeline lineno="16552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Duration(stats.mean.lower_bound.count())<sp/>&lt;&lt;<sp/>ColumnBreak()</highlight></codeline>
<codeline lineno="16553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Duration(stats.mean.upper_bound.count())<sp/>&lt;&lt;<sp/>ColumnBreak()<sp/>&lt;&lt;<sp/>ColumnBreak()</highlight></codeline>
<codeline lineno="16554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Duration(stats.standardDeviation.point.count())<sp/>&lt;&lt;<sp/>ColumnBreak()</highlight></codeline>
<codeline lineno="16555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Duration(stats.standardDeviation.lower_bound.count())<sp/>&lt;&lt;<sp/>ColumnBreak()</highlight></codeline>
<codeline lineno="16556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>Duration(stats.standardDeviation.upper_bound.count())<sp/>&lt;&lt;<sp/>ColumnBreak()<sp/>&lt;&lt;<sp/>ColumnBreak()<sp/>&lt;&lt;<sp/>ColumnBreak()<sp/>&lt;&lt;<sp/>ColumnBreak()<sp/>&lt;&lt;<sp/>ColumnBreak();</highlight></codeline>
<codeline lineno="16557"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16558"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16559"><highlight class="normal"></highlight></codeline>
<codeline lineno="16560"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ConsoleReporter::benchmarkFailed(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>error)<sp/>{</highlight></codeline>
<codeline lineno="16561"><highlight class="normal"><sp/><sp/><sp/><sp/>Colour<sp/>colour(Colour::Red);</highlight></codeline>
<codeline lineno="16562"><highlight class="normal"><sp/><sp/><sp/><sp/>(*m_tablePrinter)</highlight></codeline>
<codeline lineno="16563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Benchmark<sp/>failed<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>error<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>ColumnBreak()<sp/>&lt;&lt;<sp/>RowBreak();</highlight></codeline>
<codeline lineno="16565"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16566"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_ENABLE_BENCHMARKING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16567"><highlight class="normal"></highlight></codeline>
<codeline lineno="16568"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ConsoleReporter::testCaseEnded(TestCaseStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_testCaseStats)<sp/>{</highlight></codeline>
<codeline lineno="16569"><highlight class="normal"><sp/><sp/><sp/><sp/>m_tablePrinter-&gt;close();</highlight></codeline>
<codeline lineno="16570"><highlight class="normal"><sp/><sp/><sp/><sp/>StreamingReporterBase::testCaseEnded(_testCaseStats);</highlight></codeline>
<codeline lineno="16571"><highlight class="normal"><sp/><sp/><sp/><sp/>m_headerPrinted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16572"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16573"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ConsoleReporter::testGroupEnded(TestGroupStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_testGroupStats)<sp/>{</highlight></codeline>
<codeline lineno="16574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentGroupInfo.used)<sp/>{</highlight></codeline>
<codeline lineno="16575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printSummaryDivider();</highlight></codeline>
<codeline lineno="16576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Summary<sp/>for<sp/>group<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>_testGroupStats.groupInfo.name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&apos;:\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printTotals(_testGroupStats.totals);</highlight></codeline>
<codeline lineno="16578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="16579"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16580"><highlight class="normal"><sp/><sp/><sp/><sp/>StreamingReporterBase::testGroupEnded(_testGroupStats);</highlight></codeline>
<codeline lineno="16581"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16582"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ConsoleReporter::testRunEnded(TestRunStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_testRunStats)<sp/>{</highlight></codeline>
<codeline lineno="16583"><highlight class="normal"><sp/><sp/><sp/><sp/>printTotalsDivider(_testRunStats.totals);</highlight></codeline>
<codeline lineno="16584"><highlight class="normal"><sp/><sp/><sp/><sp/>printTotals(_testRunStats.totals);</highlight></codeline>
<codeline lineno="16585"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="16586"><highlight class="normal"><sp/><sp/><sp/><sp/>StreamingReporterBase::testRunEnded(_testRunStats);</highlight></codeline>
<codeline lineno="16587"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16588"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ConsoleReporter::testRunStarting(TestRunInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_testInfo)<sp/>{</highlight></codeline>
<codeline lineno="16589"><highlight class="normal"><sp/><sp/><sp/><sp/>StreamingReporterBase::testRunStarting(_testInfo);</highlight></codeline>
<codeline lineno="16590"><highlight class="normal"><sp/><sp/><sp/><sp/>printTestFilters();</highlight></codeline>
<codeline lineno="16591"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16592"><highlight class="normal"></highlight></codeline>
<codeline lineno="16593"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ConsoleReporter::lazyPrint()<sp/>{</highlight></codeline>
<codeline lineno="16594"><highlight class="normal"></highlight></codeline>
<codeline lineno="16595"><highlight class="normal"><sp/><sp/><sp/><sp/>m_tablePrinter-&gt;close();</highlight></codeline>
<codeline lineno="16596"><highlight class="normal"><sp/><sp/><sp/><sp/>lazyPrintWithoutClosingBenchmarkTable();</highlight></codeline>
<codeline lineno="16597"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16598"><highlight class="normal"></highlight></codeline>
<codeline lineno="16599"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ConsoleReporter::lazyPrintWithoutClosingBenchmarkTable()<sp/>{</highlight></codeline>
<codeline lineno="16600"><highlight class="normal"></highlight></codeline>
<codeline lineno="16601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!currentTestRunInfo.used)</highlight></codeline>
<codeline lineno="16602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lazyPrintRunInfo();</highlight></codeline>
<codeline lineno="16603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!currentGroupInfo.used)</highlight></codeline>
<codeline lineno="16604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lazyPrintGroupInfo();</highlight></codeline>
<codeline lineno="16605"><highlight class="normal"></highlight></codeline>
<codeline lineno="16606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!m_headerPrinted)<sp/>{</highlight></codeline>
<codeline lineno="16607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printTestCaseAndSectionHeader();</highlight></codeline>
<codeline lineno="16608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_headerPrinted<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16609"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16610"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16611"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ConsoleReporter::lazyPrintRunInfo()<sp/>{</highlight></codeline>
<codeline lineno="16612"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>&apos;\n&apos;<sp/>&lt;&lt;<sp/>getLineOfChars&lt;&apos;~&apos;&gt;()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16613"><highlight class="normal"><sp/><sp/><sp/><sp/>Colour<sp/>colour(Colour::SecondaryText);</highlight></codeline>
<codeline lineno="16614"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>currentTestRunInfo-&gt;name</highlight></codeline>
<codeline lineno="16615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>a<sp/>Catch<sp/>v&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>libraryVersion()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>host<sp/>application.\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Run<sp/>with<sp/>-?<sp/>for<sp/>options\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16617"><highlight class="normal"></highlight></codeline>
<codeline lineno="16618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_config-&gt;rngSeed()<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="16619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Randomness<sp/>seeded<sp/>to:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>m_config-&gt;rngSeed()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16620"><highlight class="normal"></highlight></codeline>
<codeline lineno="16621"><highlight class="normal"><sp/><sp/><sp/><sp/>currentTestRunInfo.used<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16623"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ConsoleReporter::lazyPrintGroupInfo()<sp/>{</highlight></codeline>
<codeline lineno="16624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!currentGroupInfo-&gt;name.empty()<sp/>&amp;&amp;<sp/>currentGroupInfo-&gt;groupsCounts<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="16625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printClosedHeader(</highlight><highlight class="stringliteral">&quot;Group:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>currentGroupInfo-&gt;name);</highlight></codeline>
<codeline lineno="16626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentGroupInfo.used<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16627"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16628"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16629"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ConsoleReporter::printTestCaseAndSectionHeader()<sp/>{</highlight></codeline>
<codeline lineno="16630"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!m_sectionStack.empty());</highlight></codeline>
<codeline lineno="16631"><highlight class="normal"><sp/><sp/><sp/><sp/>printOpenHeader(currentTestCaseInfo-&gt;name);</highlight></codeline>
<codeline lineno="16632"><highlight class="normal"></highlight></codeline>
<codeline lineno="16633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_sectionStack.size()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="16634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Colour<sp/>colourGuard(Colour::Headers);</highlight></codeline>
<codeline lineno="16635"><highlight class="normal"></highlight></codeline>
<codeline lineno="16636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>m_sectionStack.begin()<sp/>+<sp/>1,<sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>first<sp/>section<sp/>(test<sp/>case)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itEnd<sp/>=<sp/>m_sectionStack.end();</highlight></codeline>
<codeline lineno="16639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it<sp/>!=<sp/>itEnd;<sp/>++it)</highlight></codeline>
<codeline lineno="16640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printHeaderString(it-&gt;name,<sp/>2);</highlight></codeline>
<codeline lineno="16641"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16642"><highlight class="normal"></highlight></codeline>
<codeline lineno="16643"><highlight class="normal"><sp/><sp/><sp/><sp/>SourceLineInfo<sp/>lineInfo<sp/>=<sp/>m_sectionStack.back().lineInfo;</highlight></codeline>
<codeline lineno="16644"><highlight class="normal"></highlight></codeline>
<codeline lineno="16645"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>getLineOfChars&lt;</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">&gt;()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16646"><highlight class="normal"><sp/><sp/><sp/><sp/>Colour<sp/>colourGuard(Colour::FileName);</highlight></codeline>
<codeline lineno="16647"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>lineInfo<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16648"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>getLineOfChars&lt;</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">&gt;()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="16649"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16650"><highlight class="normal"></highlight></codeline>
<codeline lineno="16651"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ConsoleReporter::printClosedHeader(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_name)<sp/>{</highlight></codeline>
<codeline lineno="16652"><highlight class="normal"><sp/><sp/><sp/><sp/>printOpenHeader(_name);</highlight></codeline>
<codeline lineno="16653"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>getLineOfChars&lt;</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">&gt;()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16654"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16655"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ConsoleReporter::printOpenHeader(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_name)<sp/>{</highlight></codeline>
<codeline lineno="16656"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>getLineOfChars&lt;</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">&gt;()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16657"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="16658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Colour<sp/>colourGuard(Colour::Headers);</highlight></codeline>
<codeline lineno="16659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printHeaderString(_name);</highlight></codeline>
<codeline lineno="16660"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16661"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16662"><highlight class="normal"></highlight></codeline>
<codeline lineno="16663"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>string<sp/>has<sp/>a<sp/>:<sp/>in<sp/>first<sp/>line<sp/>will<sp/>set<sp/>indent<sp/>to<sp/>follow<sp/>it<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16664"><highlight class="normal"></highlight><highlight class="comment">//<sp/>subsequent<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16665"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ConsoleReporter::printHeaderString(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_string,<sp/>std::size_t<sp/>indent)<sp/>{</highlight></codeline>
<codeline lineno="16666"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>i<sp/>=<sp/>_string.find(</highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="16667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>std::string::npos)</highlight></codeline>
<codeline lineno="16668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="16669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="16671"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>Column(_string).indent(indent<sp/>+<sp/>i).initialIndent(indent)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16672"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16673"><highlight class="normal"></highlight></codeline>
<codeline lineno="16674"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SummaryColumn<sp/>{</highlight></codeline>
<codeline lineno="16675"><highlight class="normal"></highlight></codeline>
<codeline lineno="16676"><highlight class="normal"><sp/><sp/><sp/><sp/>SummaryColumn(<sp/>std::string<sp/>_label,<sp/>Colour::Code<sp/>_colour<sp/>)</highlight></codeline>
<codeline lineno="16677"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>label(<sp/>std::move(<sp/>_label<sp/>)<sp/>),</highlight></codeline>
<codeline lineno="16678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>colour(<sp/>_colour<sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="16679"><highlight class="normal"><sp/><sp/><sp/><sp/>SummaryColumn<sp/>addRow(<sp/>std::size_t<sp/>count<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="16680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReusableStringStream<sp/>rss;</highlight></codeline>
<codeline lineno="16681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/>count;</highlight></codeline>
<codeline lineno="16682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>row<sp/>=<sp/>rss.str();</highlight></codeline>
<codeline lineno="16683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>oldRow<sp/>:<sp/>rows)<sp/>{</highlight></codeline>
<codeline lineno="16684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(oldRow.size()<sp/>&lt;<sp/>row.size())</highlight></codeline>
<codeline lineno="16685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldRow<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>oldRow;</highlight></codeline>
<codeline lineno="16686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(oldRow.size()<sp/>&gt;<sp/>row.size())</highlight></codeline>
<codeline lineno="16687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>row;</highlight></codeline>
<codeline lineno="16688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rows.push_back(row);</highlight></codeline>
<codeline lineno="16690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16691"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16692"><highlight class="normal"></highlight></codeline>
<codeline lineno="16693"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>label;</highlight></codeline>
<codeline lineno="16694"><highlight class="normal"><sp/><sp/><sp/><sp/>Colour::Code<sp/>colour;</highlight></codeline>
<codeline lineno="16695"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>rows;</highlight></codeline>
<codeline lineno="16696"><highlight class="normal"></highlight></codeline>
<codeline lineno="16697"><highlight class="normal">};</highlight></codeline>
<codeline lineno="16698"><highlight class="normal"></highlight></codeline>
<codeline lineno="16699"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ConsoleReporter::printTotals(<sp/>Totals<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>totals<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="16700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(totals.testCases.total()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="16701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>Colour(Colour::Warning)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>tests<sp/>ran\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16702"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(totals.assertions.total()<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>totals.testCases.allPassed())<sp/>{</highlight></codeline>
<codeline lineno="16703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>Colour(Colour::ResultSuccess)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;All<sp/>tests<sp/>passed&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>(&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>pluralise(totals.assertions.passed,<sp/></highlight><highlight class="stringliteral">&quot;assertion&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>in<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>pluralise(totals.testCases.passed,<sp/></highlight><highlight class="stringliteral">&quot;test<sp/>case&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;)&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16708"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="16709"><highlight class="normal"></highlight></codeline>
<codeline lineno="16710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;SummaryColumn&gt;<sp/>columns;</highlight></codeline>
<codeline lineno="16711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columns.push_back(SummaryColumn(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Colour::None)</highlight></codeline>
<codeline lineno="16712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.addRow(totals.testCases.total())</highlight></codeline>
<codeline lineno="16713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.addRow(totals.assertions.total()));</highlight></codeline>
<codeline lineno="16714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columns.push_back(SummaryColumn(</highlight><highlight class="stringliteral">&quot;passed&quot;</highlight><highlight class="normal">,<sp/>Colour::Success)</highlight></codeline>
<codeline lineno="16715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.addRow(totals.testCases.passed)</highlight></codeline>
<codeline lineno="16716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.addRow(totals.assertions.passed));</highlight></codeline>
<codeline lineno="16717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columns.push_back(SummaryColumn(</highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">,<sp/>Colour::ResultError)</highlight></codeline>
<codeline lineno="16718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.addRow(totals.testCases.failed)</highlight></codeline>
<codeline lineno="16719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.addRow(totals.assertions.failed));</highlight></codeline>
<codeline lineno="16720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>columns.push_back(SummaryColumn(</highlight><highlight class="stringliteral">&quot;failed<sp/>as<sp/>expected&quot;</highlight><highlight class="normal">,<sp/>Colour::ResultExpectedFailure)</highlight></codeline>
<codeline lineno="16721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.addRow(totals.testCases.failedButOk)</highlight></codeline>
<codeline lineno="16722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.addRow(totals.assertions.failedButOk));</highlight></codeline>
<codeline lineno="16723"><highlight class="normal"></highlight></codeline>
<codeline lineno="16724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printSummaryRow(</highlight><highlight class="stringliteral">&quot;test<sp/>cases&quot;</highlight><highlight class="normal">,<sp/>columns,<sp/>0);</highlight></codeline>
<codeline lineno="16725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printSummaryRow(</highlight><highlight class="stringliteral">&quot;assertions&quot;</highlight><highlight class="normal">,<sp/>columns,<sp/>1);</highlight></codeline>
<codeline lineno="16726"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16727"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16728"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ConsoleReporter::printSummaryRow(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>label,<sp/>std::vector&lt;SummaryColumn&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>cols,<sp/>std::size_t<sp/>row)<sp/>{</highlight></codeline>
<codeline lineno="16729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>col<sp/>:<sp/>cols)<sp/>{</highlight></codeline>
<codeline lineno="16730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>=<sp/>col.rows[row];</highlight></codeline>
<codeline lineno="16731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(col.label.empty())<sp/>{</highlight></codeline>
<codeline lineno="16732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>label<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classvalue" kindref="compound">value</ref><sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="16734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="16735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>Colour(Colour::Warning)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;-<sp/>none<sp/>-&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classvalue" kindref="compound">value</ref><sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="16738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>Colour(Colour::LightGrey)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>|<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>Colour(col.colour)</highlight></codeline>
<codeline lineno="16740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>col.label;</highlight></codeline>
<codeline lineno="16741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16742"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16743"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16744"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16745"><highlight class="normal"></highlight></codeline>
<codeline lineno="16746"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ConsoleReporter::printTotalsDivider(Totals<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>totals)<sp/>{</highlight></codeline>
<codeline lineno="16747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(totals.testCases.total()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="16748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>failedRatio<sp/>=<sp/>makeRatio(totals.testCases.failed,<sp/>totals.testCases.total());</highlight></codeline>
<codeline lineno="16749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>failedButOkRatio<sp/>=<sp/>makeRatio(totals.testCases.failedButOk,<sp/>totals.testCases.total());</highlight></codeline>
<codeline lineno="16750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>passedRatio<sp/>=<sp/>makeRatio(totals.testCases.passed,<sp/>totals.testCases.total());</highlight></codeline>
<codeline lineno="16751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(failedRatio<sp/>+<sp/>failedButOkRatio<sp/>+<sp/>passedRatio<sp/>&lt;<sp/>CATCH_CONFIG_CONSOLE_WIDTH<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="16752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>findMax(failedRatio,<sp/>failedButOkRatio,<sp/>passedRatio)++;</highlight></codeline>
<codeline lineno="16753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(failedRatio<sp/>+<sp/>failedButOkRatio<sp/>+<sp/>passedRatio<sp/>&gt;<sp/>CATCH_CONFIG_CONSOLE_WIDTH<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="16754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>findMax(failedRatio,<sp/>failedButOkRatio,<sp/>passedRatio)--;</highlight></codeline>
<codeline lineno="16755"><highlight class="normal"></highlight></codeline>
<codeline lineno="16756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>Colour(Colour::Error)<sp/>&lt;&lt;<sp/>std::string(failedRatio,<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="16757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>Colour(Colour::ResultExpectedFailure)<sp/>&lt;&lt;<sp/>std::string(failedButOkRatio,<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="16758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(totals.testCases.allPassed())</highlight></codeline>
<codeline lineno="16759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>Colour(Colour::ResultSuccess)<sp/>&lt;&lt;<sp/>std::string(passedRatio,<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="16760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>Colour(Colour::Success)<sp/>&lt;&lt;<sp/>std::string(passedRatio,<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="16762"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="16763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>Colour(Colour::Warning)<sp/>&lt;&lt;<sp/>std::string(CATCH_CONFIG_CONSOLE_WIDTH<sp/>-<sp/>1,<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="16764"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16765"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16766"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16767"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ConsoleReporter::printSummaryDivider()<sp/>{</highlight></codeline>
<codeline lineno="16768"><highlight class="normal"><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/>getLineOfChars&lt;</highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">&gt;()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16769"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16770"><highlight class="normal"></highlight></codeline>
<codeline lineno="16771"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ConsoleReporter::printTestFilters()<sp/>{</highlight></codeline>
<codeline lineno="16772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_config-&gt;testSpec().hasFilters())<sp/>{</highlight></codeline>
<codeline lineno="16773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Colour<sp/>guard(Colour::BrightYellow);</highlight></codeline>
<codeline lineno="16774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Filters:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>serializeFilters(m_config-&gt;getTestsOrTags())<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16775"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16776"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16777"><highlight class="normal"></highlight></codeline>
<codeline lineno="16778"><highlight class="normal">CATCH_REGISTER_REPORTER(</highlight><highlight class="stringliteral">&quot;console&quot;</highlight><highlight class="normal">,<sp/>ConsoleReporter)</highlight></codeline>
<codeline lineno="16779"><highlight class="normal"></highlight></codeline>
<codeline lineno="16780"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16781"><highlight class="normal"></highlight></codeline>
<codeline lineno="16782"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16783"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(pop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16784"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16785"><highlight class="normal"></highlight></codeline>
<codeline lineno="16786"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16787"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>clang<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16788"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16789"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_reporter_console.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16790"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_reporter_junit.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16791"><highlight class="normal"></highlight></codeline>
<codeline lineno="16792"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16793"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16794"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctime&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16795"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16796"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16797"><highlight class="normal"></highlight></codeline>
<codeline lineno="16798"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="16799"><highlight class="normal"></highlight></codeline>
<codeline lineno="16800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="16801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>getCurrentTimestamp()<sp/>{</highlight></codeline>
<codeline lineno="16802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Beware,<sp/>this<sp/>is<sp/>not<sp/>reentrant<sp/>because<sp/>of<sp/>backward<sp/>compatibility<sp/>issues</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Also,<sp/>UTC<sp/>only,<sp/>again<sp/>because<sp/>of<sp/>backward<sp/>compatibility<sp/>(%z<sp/>is<sp/>C++11)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_t<sp/>rawtime;</highlight></codeline>
<codeline lineno="16805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::time(&amp;rawtime);</highlight></codeline>
<codeline lineno="16806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>timeStampSize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;2017-01-16T17:06:45Z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="16807"><highlight class="normal"></highlight></codeline>
<codeline lineno="16808"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tm<sp/>timeInfo<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="16810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gmtime_s(&amp;timeInfo,<sp/>&amp;rawtime);</highlight></codeline>
<codeline lineno="16811"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tm*<sp/>timeInfo;</highlight></codeline>
<codeline lineno="16813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeInfo<sp/>=<sp/>std::gmtime(&amp;rawtime);</highlight></codeline>
<codeline lineno="16814"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16815"><highlight class="normal"></highlight></codeline>
<codeline lineno="16816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>timeStamp[timeStampSize];</highlight></codeline>
<codeline lineno="16817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>fmt<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;%Y-%m-%dT%H:%M:%SZ&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16818"><highlight class="normal"></highlight></codeline>
<codeline lineno="16819"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::strftime(timeStamp,<sp/>timeStampSize,<sp/>fmt,<sp/>&amp;timeInfo);</highlight></codeline>
<codeline lineno="16821"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::strftime(timeStamp,<sp/>timeStampSize,<sp/>fmt,<sp/>timeInfo);</highlight></codeline>
<codeline lineno="16823"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(timeStamp,<sp/>timeStampSize-1);</highlight></codeline>
<codeline lineno="16825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16826"><highlight class="normal"></highlight></codeline>
<codeline lineno="16827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>fileNameTag(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>&amp;tags)<sp/>{</highlight></codeline>
<codeline lineno="16828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>std::find_if(begin(tags),</highlight></codeline>
<codeline lineno="16829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>end(tags),</highlight></codeline>
<codeline lineno="16830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[]<sp/>(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>tag)<sp/>{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tag.front()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">;<sp/>});</highlight></codeline>
<codeline lineno="16831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>tags.end())</highlight></codeline>
<codeline lineno="16832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;substr(1);</highlight></codeline>
<codeline lineno="16833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string();</highlight></codeline>
<codeline lineno="16834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16835"><highlight class="normal"></highlight></codeline>
<codeline lineno="16836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Formats<sp/>the<sp/>duration<sp/>in<sp/>seconds<sp/>to<sp/>3<sp/>decimal<sp/>places.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>done<sp/>because<sp/>some<sp/>genius<sp/>defined<sp/>Maven<sp/>Surefire<sp/>schema</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>a<sp/>way<sp/>that<sp/>only<sp/>accepts<sp/>3<sp/>decimal<sp/>places,<sp/>and<sp/>tools<sp/>like</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Jenkins<sp/>use<sp/>that<sp/>schema<sp/>for<sp/>validation<sp/>JUnit<sp/>reporter<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>formatDuration(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>seconds<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="16841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReusableStringStream<sp/>rss;</highlight></codeline>
<codeline lineno="16842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/>std::fixed<sp/>&lt;&lt;<sp/>std::setprecision(<sp/>3<sp/>)<sp/>&lt;&lt;<sp/>seconds;</highlight></codeline>
<codeline lineno="16843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rss.str();</highlight></codeline>
<codeline lineno="16844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16845"><highlight class="normal"></highlight></codeline>
<codeline lineno="16846"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">//<sp/>anonymous<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16847"><highlight class="normal"></highlight></codeline>
<codeline lineno="16848"><highlight class="normal"><sp/><sp/><sp/><sp/>JunitReporter::JunitReporter(<sp/>ReporterConfig<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_config<sp/>)</highlight></codeline>
<codeline lineno="16849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>CumulativeReporterBase(<sp/>_config<sp/>),</highlight></codeline>
<codeline lineno="16850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml(<sp/>_config.stream()<sp/>)</highlight></codeline>
<codeline lineno="16851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="16852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporterPrefs.shouldRedirectStdOut<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporterPrefs.shouldReportAllAssertions<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16855"><highlight class="normal"></highlight></codeline>
<codeline lineno="16856"><highlight class="normal"><sp/><sp/><sp/><sp/>JunitReporter::~JunitReporter()<sp/>{}</highlight></codeline>
<codeline lineno="16857"><highlight class="normal"></highlight></codeline>
<codeline lineno="16858"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>JunitReporter::getDescription()<sp/>{</highlight></codeline>
<codeline lineno="16859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Reports<sp/>test<sp/>results<sp/>in<sp/>an<sp/>XML<sp/>format<sp/>that<sp/>looks<sp/>like<sp/>Ant&apos;s<sp/>junitreport<sp/>target&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16860"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16861"><highlight class="normal"></highlight></codeline>
<codeline lineno="16862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>JunitReporter::noMatchingTestCases(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/></highlight><highlight class="comment">/*spec*/</highlight><highlight class="normal"><sp/>)<sp/>{}</highlight></codeline>
<codeline lineno="16863"><highlight class="normal"></highlight></codeline>
<codeline lineno="16864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>JunitReporter::testRunStarting(<sp/>TestRunInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>runInfo<sp/>)<sp/><sp/>{</highlight></codeline>
<codeline lineno="16865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CumulativeReporterBase::testRunStarting(<sp/>runInfo<sp/>);</highlight></codeline>
<codeline lineno="16866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.startElement(<sp/></highlight><highlight class="stringliteral">&quot;testsuites&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="16867"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16868"><highlight class="normal"></highlight></codeline>
<codeline lineno="16869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>JunitReporter::testGroupStarting(<sp/>GroupInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>groupInfo<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="16870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>suiteTimer.start();</highlight></codeline>
<codeline lineno="16871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stdOutForSuite.clear();</highlight></codeline>
<codeline lineno="16872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stdErrForSuite.clear();</highlight></codeline>
<codeline lineno="16873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unexpectedExceptions<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="16874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CumulativeReporterBase::testGroupStarting(<sp/>groupInfo<sp/>);</highlight></codeline>
<codeline lineno="16875"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16876"><highlight class="normal"></highlight></codeline>
<codeline lineno="16877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>JunitReporter::testCaseStarting(<sp/>TestCaseInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCaseInfo<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="16878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_okToFail<sp/>=<sp/>testCaseInfo.okToFail();</highlight></codeline>
<codeline lineno="16879"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16880"><highlight class="normal"></highlight></codeline>
<codeline lineno="16881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>JunitReporter::assertionEnded(<sp/>AssertionStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>assertionStats<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="16882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>assertionStats.assertionResult.getResultType()<sp/>==<sp/>ResultWas::ThrewException<sp/>&amp;&amp;<sp/>!m_okToFail<sp/>)</highlight></codeline>
<codeline lineno="16883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unexpectedExceptions++;</highlight></codeline>
<codeline lineno="16884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CumulativeReporterBase::assertionEnded(<sp/>assertionStats<sp/>);</highlight></codeline>
<codeline lineno="16885"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16886"><highlight class="normal"></highlight></codeline>
<codeline lineno="16887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>JunitReporter::testCaseEnded(<sp/>TestCaseStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCaseStats<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="16888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stdOutForSuite<sp/>+=<sp/>testCaseStats.stdOut;</highlight></codeline>
<codeline lineno="16889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stdErrForSuite<sp/>+=<sp/>testCaseStats.stdErr;</highlight></codeline>
<codeline lineno="16890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CumulativeReporterBase::testCaseEnded(<sp/>testCaseStats<sp/>);</highlight></codeline>
<codeline lineno="16891"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16892"><highlight class="normal"></highlight></codeline>
<codeline lineno="16893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>JunitReporter::testGroupEnded(<sp/>TestGroupStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testGroupStats<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="16894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>suiteTime<sp/>=<sp/>suiteTimer.getElapsedSeconds();</highlight></codeline>
<codeline lineno="16895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CumulativeReporterBase::testGroupEnded(<sp/>testGroupStats<sp/>);</highlight></codeline>
<codeline lineno="16896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeGroup(<sp/>*m_testGroups.back(),<sp/>suiteTime<sp/>);</highlight></codeline>
<codeline lineno="16897"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16898"><highlight class="normal"></highlight></codeline>
<codeline lineno="16899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>JunitReporter::testRunEndedCumulative()<sp/>{</highlight></codeline>
<codeline lineno="16900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.endElement();</highlight></codeline>
<codeline lineno="16901"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16902"><highlight class="normal"></highlight></codeline>
<codeline lineno="16903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>JunitReporter::writeGroup(<sp/>TestGroupNode<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>groupNode,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>suiteTime<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="16904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlWriter::ScopedElement<sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref><sp/>=<sp/>xml.scopedElement(<sp/></highlight><highlight class="stringliteral">&quot;testsuite&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="16905"><highlight class="normal"></highlight></codeline>
<codeline lineno="16906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestGroupStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>stats<sp/>=<sp/>groupNode.value;</highlight></codeline>
<codeline lineno="16907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>stats.groupInfo.name<sp/>);</highlight></codeline>
<codeline lineno="16908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;errors&quot;</highlight><highlight class="normal">,<sp/>unexpectedExceptions<sp/>);</highlight></codeline>
<codeline lineno="16909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;failures&quot;</highlight><highlight class="normal">,<sp/>stats.totals.assertions.failed-unexpectedExceptions<sp/>);</highlight></codeline>
<codeline lineno="16910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;tests&quot;</highlight><highlight class="normal">,<sp/>stats.totals.assertions.total()<sp/>);</highlight></codeline>
<codeline lineno="16911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;hostname&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;tbd&quot;</highlight><highlight class="normal"><sp/>);<sp/></highlight><highlight class="comment">//<sp/>!TBD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_config-&gt;showDurations()<sp/>==<sp/>ShowDurations::Never<sp/>)</highlight></codeline>
<codeline lineno="16913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="16914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">,<sp/>formatDuration(<sp/>suiteTime<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="16916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;timestamp&quot;</highlight><highlight class="normal">,<sp/>getCurrentTimestamp()<sp/>);</highlight></codeline>
<codeline lineno="16917"><highlight class="normal"></highlight></codeline>
<codeline lineno="16918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>properties<sp/>if<sp/>there<sp/>are<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_config-&gt;hasTestFilters()<sp/>||<sp/>m_config-&gt;rngSeed()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="16920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>properties<sp/>=<sp/>xml.scopedElement(</highlight><highlight class="stringliteral">&quot;properties&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="16921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_config-&gt;hasTestFilters())<sp/>{</highlight></codeline>
<codeline lineno="16922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.scopedElement(</highlight><highlight class="stringliteral">&quot;property&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="16923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;filters&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="16924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/>serializeFilters(m_config-&gt;getTestsOrTags()));</highlight></codeline>
<codeline lineno="16925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_config-&gt;rngSeed()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="16927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.scopedElement(</highlight><highlight class="stringliteral">&quot;property&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="16928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;random-seed&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="16929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/>m_config-&gt;rngSeed());</highlight></codeline>
<codeline lineno="16930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16932"><highlight class="normal"></highlight></codeline>
<codeline lineno="16933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>test<sp/>cases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>child<sp/>:<sp/>groupNode.children<sp/>)</highlight></codeline>
<codeline lineno="16935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeTestCase(<sp/>*child<sp/>);</highlight></codeline>
<codeline lineno="16936"><highlight class="normal"></highlight></codeline>
<codeline lineno="16937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.scopedElement(<sp/></highlight><highlight class="stringliteral">&quot;system-out&quot;</highlight><highlight class="normal"><sp/>).writeText(<sp/>trim(<sp/>stdOutForSuite<sp/>),<sp/>XmlFormatting::Newline<sp/>);</highlight></codeline>
<codeline lineno="16938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.scopedElement(<sp/></highlight><highlight class="stringliteral">&quot;system-err&quot;</highlight><highlight class="normal"><sp/>).writeText(<sp/>trim(<sp/>stdErrForSuite<sp/>),<sp/>XmlFormatting::Newline<sp/>);</highlight></codeline>
<codeline lineno="16939"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16940"><highlight class="normal"></highlight></codeline>
<codeline lineno="16941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>JunitReporter::writeTestCase(<sp/>TestCaseNode<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCaseNode<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="16942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestCaseStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>stats<sp/>=<sp/>testCaseNode.value;</highlight></codeline>
<codeline lineno="16943"><highlight class="normal"></highlight></codeline>
<codeline lineno="16944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>test<sp/>cases<sp/>have<sp/>exactly<sp/>one<sp/>section<sp/>-<sp/>which<sp/>represents<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>case<sp/>itself.<sp/>That<sp/>section<sp/>may<sp/>have<sp/>0-n<sp/>nested<sp/>sections</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<sp/>testCaseNode.children.size()<sp/>==<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="16947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SectionNode<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rootSection<sp/>=<sp/>*testCaseNode.children.front();</highlight></codeline>
<codeline lineno="16948"><highlight class="normal"></highlight></codeline>
<codeline lineno="16949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>className<sp/>=<sp/>stats.testInfo.className;</highlight></codeline>
<codeline lineno="16950"><highlight class="normal"></highlight></codeline>
<codeline lineno="16951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>className.empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="16952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>className<sp/>=<sp/>fileNameTag(stats.testInfo.tags);</highlight></codeline>
<codeline lineno="16953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>className.empty()<sp/>)</highlight></codeline>
<codeline lineno="16954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>className<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;global&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16956"><highlight class="normal"></highlight></codeline>
<codeline lineno="16957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!m_config-&gt;name().empty()<sp/>)</highlight></codeline>
<codeline lineno="16958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>className<sp/>=<sp/>m_config-&gt;name()<sp/>+<sp/>&quot;.&quot;<sp/>+<sp/>className;</highlight></codeline>
<codeline lineno="16959"><highlight class="normal"></highlight></codeline>
<codeline lineno="16960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeSection(<sp/>className,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>rootSection,<sp/>stats.testInfo.okToFail()<sp/>);</highlight></codeline>
<codeline lineno="16961"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16962"><highlight class="normal"></highlight></codeline>
<codeline lineno="16963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>JunitReporter::writeSection(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>className,</highlight></codeline>
<codeline lineno="16964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rootName,</highlight></codeline>
<codeline lineno="16965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SectionNode<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>sectionNode,</highlight></codeline>
<codeline lineno="16966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>testOkToFail)<sp/>{</highlight></codeline>
<codeline lineno="16967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/>trim(<sp/>sectionNode.stats.sectionInfo.name<sp/>);</highlight></codeline>
<codeline lineno="16968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!rootName.empty()<sp/>)</highlight></codeline>
<codeline lineno="16969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>rootName<sp/>+<sp/>&apos;/&apos;<sp/>+<sp/>name;</highlight></codeline>
<codeline lineno="16970"><highlight class="normal"></highlight></codeline>
<codeline lineno="16971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!sectionNode.assertions.empty()<sp/>||</highlight></codeline>
<codeline lineno="16972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!sectionNode.stdOut.empty()<sp/>||</highlight></codeline>
<codeline lineno="16973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!sectionNode.stdErr.empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="16974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlWriter::ScopedElement<sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref><sp/>=<sp/>xml.scopedElement(<sp/></highlight><highlight class="stringliteral">&quot;testcase&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="16975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>className.empty()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="16976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;classname&quot;</highlight><highlight class="normal">,<sp/>name<sp/>);</highlight></codeline>
<codeline lineno="16977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;root&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="16978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="16980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;classname&quot;</highlight><highlight class="normal">,<sp/>className<sp/>);</highlight></codeline>
<codeline lineno="16981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>name<sp/>);</highlight></codeline>
<codeline lineno="16982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;time&quot;</highlight><highlight class="normal">,<sp/>formatDuration(<sp/>sectionNode.stats.durationInSeconds<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="16984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>not<sp/>ideal,<sp/>but<sp/>it<sp/>should<sp/>be<sp/>enough<sp/>to<sp/>mimic<sp/>gtest&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>junit<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ideally<sp/>the<sp/>JUnit<sp/>reporter<sp/>would<sp/>also<sp/>handle<sp/>`skipTest`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>events<sp/>and<sp/>write<sp/>those<sp/>out<sp/>appropriately.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;status&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;run&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="16989"><highlight class="normal"></highlight></codeline>
<codeline lineno="16990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sectionNode.stats.assertions.failedButOk)<sp/>{</highlight></codeline>
<codeline lineno="16991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.scopedElement(</highlight><highlight class="stringliteral">&quot;skipped&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="16992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;message&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;TEST_CASE<sp/>tagged<sp/>with<sp/>!mayfail&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="16993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16994"><highlight class="normal"></highlight></codeline>
<codeline lineno="16995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeAssertions(<sp/>sectionNode<sp/>);</highlight></codeline>
<codeline lineno="16996"><highlight class="normal"></highlight></codeline>
<codeline lineno="16997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!sectionNode.stdOut.empty()<sp/>)</highlight></codeline>
<codeline lineno="16998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.scopedElement(<sp/></highlight><highlight class="stringliteral">&quot;system-out&quot;</highlight><highlight class="normal"><sp/>).writeText(<sp/>trim(<sp/>sectionNode.stdOut<sp/>),<sp/>XmlFormatting::Newline<sp/>);</highlight></codeline>
<codeline lineno="16999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!sectionNode.stdErr.empty()<sp/>)</highlight></codeline>
<codeline lineno="17000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.scopedElement(<sp/></highlight><highlight class="stringliteral">&quot;system-err&quot;</highlight><highlight class="normal"><sp/>).writeText(<sp/>trim(<sp/>sectionNode.stdErr<sp/>),<sp/>XmlFormatting::Newline<sp/>);</highlight></codeline>
<codeline lineno="17001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>childNode<sp/>:<sp/>sectionNode.childSections<sp/>)</highlight></codeline>
<codeline lineno="17003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>className.empty()<sp/>)</highlight></codeline>
<codeline lineno="17004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeSection(<sp/>name,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>*childNode,<sp/>testOkToFail<sp/>);</highlight></codeline>
<codeline lineno="17005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeSection(<sp/>className,<sp/>name,<sp/>*childNode,<sp/>testOkToFail<sp/>);</highlight></codeline>
<codeline lineno="17007"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17008"><highlight class="normal"></highlight></codeline>
<codeline lineno="17009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>JunitReporter::writeAssertions(<sp/>SectionNode<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>sectionNode<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>assertion<sp/>:<sp/>sectionNode.assertions<sp/>)</highlight></codeline>
<codeline lineno="17011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeAssertion(<sp/>assertion<sp/>);</highlight></codeline>
<codeline lineno="17012"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17013"><highlight class="normal"></highlight></codeline>
<codeline lineno="17014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>JunitReporter::writeAssertion(<sp/>AssertionStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>stats<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionResult<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>stats.assertionResult;</highlight></codeline>
<codeline lineno="17016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<ref refid="structresult" kindref="compound">result</ref>.isOk()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>elementName;</highlight></codeline>
<codeline lineno="17018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/><ref refid="structresult" kindref="compound">result</ref>.getResultType()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ResultWas::ThrewException:</highlight></codeline>
<codeline lineno="17020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ResultWas::FatalErrorCondition:</highlight></codeline>
<codeline lineno="17021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;error&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ResultWas::ExplicitFailure:</highlight></codeline>
<codeline lineno="17024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ResultWas::ExpressionFailed:</highlight></codeline>
<codeline lineno="17025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ResultWas::DidntThrowException:</highlight></codeline>
<codeline lineno="17026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;failure&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17028"><highlight class="normal"></highlight></codeline>
<codeline lineno="17029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>should<sp/>never<sp/>see<sp/>these<sp/>here:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ResultWas::Info:</highlight></codeline>
<codeline lineno="17031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ResultWas::Warning:</highlight></codeline>
<codeline lineno="17032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ResultWas::Ok:</highlight></codeline>
<codeline lineno="17033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ResultWas::Unknown:</highlight></codeline>
<codeline lineno="17034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ResultWas::FailureBit:</highlight></codeline>
<codeline lineno="17035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ResultWas::Exception:</highlight></codeline>
<codeline lineno="17036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elementName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;internalError&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17039"><highlight class="normal"></highlight></codeline>
<codeline lineno="17040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlWriter::ScopedElement<sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref><sp/>=<sp/>xml.scopedElement(<sp/>elementName<sp/>);</highlight></codeline>
<codeline lineno="17041"><highlight class="normal"></highlight></codeline>
<codeline lineno="17042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;message&quot;</highlight><highlight class="normal">,<sp/><ref refid="structresult" kindref="compound">result</ref>.getExpression()<sp/>);</highlight></codeline>
<codeline lineno="17043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">,<sp/><ref refid="structresult" kindref="compound">result</ref>.getTestMacroName()<sp/>);</highlight></codeline>
<codeline lineno="17044"><highlight class="normal"></highlight></codeline>
<codeline lineno="17045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ReusableStringStream<sp/>rss;</highlight></codeline>
<codeline lineno="17046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stats.totals.assertions.total()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="17047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;FAILED&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structresult" kindref="compound">result</ref>.hasExpression())<sp/>{</highlight></codeline>
<codeline lineno="17049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/><ref refid="structresult" kindref="compound">result</ref>.getExpressionInMacro();</highlight></codeline>
<codeline lineno="17051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structresult" kindref="compound">result</ref>.hasExpandedExpression())<sp/>{</highlight></codeline>
<codeline lineno="17054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;with<sp/>expansion:\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/>Column(<ref refid="structresult" kindref="compound">result</ref>.getExpandedExpression()).indent(2)<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="17058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17060"><highlight class="normal"></highlight></codeline>
<codeline lineno="17061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!<ref refid="structresult" kindref="compound">result</ref>.getMessage().empty()<sp/>)</highlight></codeline>
<codeline lineno="17062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/><ref refid="structresult" kindref="compound">result</ref>.getMessage()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>msg<sp/>:<sp/>stats.infoMessages<sp/>)</highlight></codeline>
<codeline lineno="17064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>msg.type<sp/>==<sp/>ResultWas::Info<sp/>)</highlight></codeline>
<codeline lineno="17065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/>msg.message<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17066"><highlight class="normal"></highlight></codeline>
<codeline lineno="17067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;at<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="structresult" kindref="compound">result</ref>.getSourceInfo();</highlight></codeline>
<codeline lineno="17068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xml.writeText(<sp/>rss.str(),<sp/>XmlFormatting::Newline<sp/>);</highlight></codeline>
<codeline lineno="17069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17070"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17071"><highlight class="normal"></highlight></codeline>
<codeline lineno="17072"><highlight class="normal"><sp/><sp/><sp/><sp/>CATCH_REGISTER_REPORTER(<sp/></highlight><highlight class="stringliteral">&quot;junit&quot;</highlight><highlight class="normal">,<sp/>JunitReporter<sp/>)</highlight></codeline>
<codeline lineno="17073"><highlight class="normal"></highlight></codeline>
<codeline lineno="17074"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17075"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_reporter_junit.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17076"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_reporter_listening.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17077"><highlight class="normal"></highlight></codeline>
<codeline lineno="17078"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17079"><highlight class="normal"></highlight></codeline>
<codeline lineno="17080"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="17081"><highlight class="normal"></highlight></codeline>
<codeline lineno="17082"><highlight class="normal"><sp/><sp/><sp/><sp/>ListeningReporter::ListeningReporter()<sp/>{</highlight></codeline>
<codeline lineno="17083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>will<sp/>assume<sp/>that<sp/>listeners<sp/>will<sp/>always<sp/>want<sp/>all<sp/>assertions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_preferences.shouldReportAllAssertions<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17085"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17086"><highlight class="normal"></highlight></codeline>
<codeline lineno="17087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ListeningReporter::addListener(<sp/>IStreamingReporterPtr&amp;&amp;<sp/>listener<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_listeners.push_back(<sp/>std::move(<sp/>listener<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="17089"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17090"><highlight class="normal"></highlight></codeline>
<codeline lineno="17091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ListeningReporter::addReporter(IStreamingReporterPtr&amp;&amp;<sp/>reporter)<sp/>{</highlight></codeline>
<codeline lineno="17092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(!m_reporter<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Listening<sp/>reporter<sp/>can<sp/>wrap<sp/>only<sp/>1<sp/>real<sp/>reporter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="17093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter<sp/>=<sp/>std::move(<sp/>reporter<sp/>);</highlight></codeline>
<codeline lineno="17094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_preferences.shouldRedirectStdOut<sp/>=<sp/>m_reporter-&gt;getPreferences().shouldRedirectStdOut;</highlight></codeline>
<codeline lineno="17095"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17096"><highlight class="normal"></highlight></codeline>
<codeline lineno="17097"><highlight class="normal"><sp/><sp/><sp/><sp/>ReporterPreferences<sp/>ListeningReporter::getPreferences()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="17098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_preferences;</highlight></codeline>
<codeline lineno="17099"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17100"><highlight class="normal"></highlight></codeline>
<codeline lineno="17101"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;Verbosity&gt;<sp/>ListeningReporter::getSupportedVerbosities()<sp/>{</highlight></codeline>
<codeline lineno="17102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::set&lt;Verbosity&gt;{<sp/>};</highlight></codeline>
<codeline lineno="17103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17104"><highlight class="normal"></highlight></codeline>
<codeline lineno="17105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ListeningReporter::noMatchingTestCases(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>spec<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>listener<sp/>:<sp/>m_listeners<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listener-&gt;noMatchingTestCases(<sp/>spec<sp/>);</highlight></codeline>
<codeline lineno="17108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter-&gt;noMatchingTestCases(<sp/>spec<sp/>);</highlight></codeline>
<codeline lineno="17110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17111"><highlight class="normal"></highlight></codeline>
<codeline lineno="17112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ListeningReporter::reportInvalidArguments(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;arg){</highlight></codeline>
<codeline lineno="17113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>listener<sp/>:<sp/>m_listeners<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listener-&gt;reportInvalidArguments(<sp/>arg<sp/>);</highlight></codeline>
<codeline lineno="17115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter-&gt;reportInvalidArguments(<sp/>arg<sp/>);</highlight></codeline>
<codeline lineno="17117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17118"><highlight class="normal"></highlight></codeline>
<codeline lineno="17119"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_ENABLE_BENCHMARKING)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ListeningReporter::benchmarkPreparing(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>listener<sp/>:<sp/>m_listeners)<sp/>{</highlight></codeline>
<codeline lineno="17122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listener-&gt;benchmarkPreparing(name);</highlight></codeline>
<codeline lineno="17123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter-&gt;benchmarkPreparing(name);</highlight></codeline>
<codeline lineno="17125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ListeningReporter::benchmarkStarting(<sp/>BenchmarkInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>benchmarkInfo<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>listener<sp/>:<sp/>m_listeners<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listener-&gt;benchmarkStarting(<sp/>benchmarkInfo<sp/>);</highlight></codeline>
<codeline lineno="17129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter-&gt;benchmarkStarting(<sp/>benchmarkInfo<sp/>);</highlight></codeline>
<codeline lineno="17131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ListeningReporter::benchmarkEnded(<sp/>BenchmarkStats&lt;&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>benchmarkStats<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>listener<sp/>:<sp/>m_listeners<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listener-&gt;benchmarkEnded(<sp/>benchmarkStats<sp/>);</highlight></codeline>
<codeline lineno="17135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter-&gt;benchmarkEnded(<sp/>benchmarkStats<sp/>);</highlight></codeline>
<codeline lineno="17137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17138"><highlight class="normal"></highlight></codeline>
<codeline lineno="17139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ListeningReporter::benchmarkFailed(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>error<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>listener<sp/>:<sp/>m_listeners)<sp/>{</highlight></codeline>
<codeline lineno="17141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listener-&gt;benchmarkFailed(error);</highlight></codeline>
<codeline lineno="17142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter-&gt;benchmarkFailed(error);</highlight></codeline>
<codeline lineno="17144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17145"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_ENABLE_BENCHMARKING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17146"><highlight class="normal"></highlight></codeline>
<codeline lineno="17147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ListeningReporter::testRunStarting(<sp/>TestRunInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testRunInfo<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>listener<sp/>:<sp/>m_listeners<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listener-&gt;testRunStarting(<sp/>testRunInfo<sp/>);</highlight></codeline>
<codeline lineno="17150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter-&gt;testRunStarting(<sp/>testRunInfo<sp/>);</highlight></codeline>
<codeline lineno="17152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17153"><highlight class="normal"></highlight></codeline>
<codeline lineno="17154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ListeningReporter::testGroupStarting(<sp/>GroupInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>groupInfo<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>listener<sp/>:<sp/>m_listeners<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listener-&gt;testGroupStarting(<sp/>groupInfo<sp/>);</highlight></codeline>
<codeline lineno="17157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter-&gt;testGroupStarting(<sp/>groupInfo<sp/>);</highlight></codeline>
<codeline lineno="17159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17160"><highlight class="normal"></highlight></codeline>
<codeline lineno="17161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ListeningReporter::testCaseStarting(<sp/>TestCaseInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testInfo<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>listener<sp/>:<sp/>m_listeners<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listener-&gt;testCaseStarting(<sp/>testInfo<sp/>);</highlight></codeline>
<codeline lineno="17164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter-&gt;testCaseStarting(<sp/>testInfo<sp/>);</highlight></codeline>
<codeline lineno="17166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17167"><highlight class="normal"></highlight></codeline>
<codeline lineno="17168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ListeningReporter::sectionStarting(<sp/>SectionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>sectionInfo<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>listener<sp/>:<sp/>m_listeners<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listener-&gt;sectionStarting(<sp/>sectionInfo<sp/>);</highlight></codeline>
<codeline lineno="17171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter-&gt;sectionStarting(<sp/>sectionInfo<sp/>);</highlight></codeline>
<codeline lineno="17173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17174"><highlight class="normal"></highlight></codeline>
<codeline lineno="17175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ListeningReporter::assertionStarting(<sp/>AssertionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>assertionInfo<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>listener<sp/>:<sp/>m_listeners<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listener-&gt;assertionStarting(<sp/>assertionInfo<sp/>);</highlight></codeline>
<codeline lineno="17178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter-&gt;assertionStarting(<sp/>assertionInfo<sp/>);</highlight></codeline>
<codeline lineno="17180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17181"><highlight class="normal"></highlight></codeline>
<codeline lineno="17182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>return<sp/>value<sp/>indicates<sp/>if<sp/>the<sp/>messages<sp/>buffer<sp/>should<sp/>be<sp/>cleared:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ListeningReporter::assertionEnded(<sp/>AssertionStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>assertionStats<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>listener<sp/>:<sp/>m_listeners<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>listener-&gt;assertionEnded(<sp/>assertionStats<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="17186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_reporter-&gt;assertionEnded(<sp/>assertionStats<sp/>);</highlight></codeline>
<codeline lineno="17188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17189"><highlight class="normal"></highlight></codeline>
<codeline lineno="17190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ListeningReporter::sectionEnded(<sp/>SectionStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>sectionStats<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>listener<sp/>:<sp/>m_listeners<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listener-&gt;sectionEnded(<sp/>sectionStats<sp/>);</highlight></codeline>
<codeline lineno="17193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter-&gt;sectionEnded(<sp/>sectionStats<sp/>);</highlight></codeline>
<codeline lineno="17195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17196"><highlight class="normal"></highlight></codeline>
<codeline lineno="17197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ListeningReporter::testCaseEnded(<sp/>TestCaseStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCaseStats<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>listener<sp/>:<sp/>m_listeners<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listener-&gt;testCaseEnded(<sp/>testCaseStats<sp/>);</highlight></codeline>
<codeline lineno="17200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter-&gt;testCaseEnded(<sp/>testCaseStats<sp/>);</highlight></codeline>
<codeline lineno="17202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17203"><highlight class="normal"></highlight></codeline>
<codeline lineno="17204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ListeningReporter::testGroupEnded(<sp/>TestGroupStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testGroupStats<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>listener<sp/>:<sp/>m_listeners<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listener-&gt;testGroupEnded(<sp/>testGroupStats<sp/>);</highlight></codeline>
<codeline lineno="17207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter-&gt;testGroupEnded(<sp/>testGroupStats<sp/>);</highlight></codeline>
<codeline lineno="17209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17210"><highlight class="normal"></highlight></codeline>
<codeline lineno="17211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ListeningReporter::testRunEnded(<sp/>TestRunStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testRunStats<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>listener<sp/>:<sp/>m_listeners<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listener-&gt;testRunEnded(<sp/>testRunStats<sp/>);</highlight></codeline>
<codeline lineno="17214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter-&gt;testRunEnded(<sp/>testRunStats<sp/>);</highlight></codeline>
<codeline lineno="17216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17217"><highlight class="normal"></highlight></codeline>
<codeline lineno="17218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ListeningReporter::skipTest(<sp/>TestCaseInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testInfo<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>listener<sp/>:<sp/>m_listeners<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>listener-&gt;skipTest(<sp/>testInfo<sp/>);</highlight></codeline>
<codeline lineno="17221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporter-&gt;skipTest(<sp/>testInfo<sp/>);</highlight></codeline>
<codeline lineno="17223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17224"><highlight class="normal"></highlight></codeline>
<codeline lineno="17225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ListeningReporter::isMulti()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="17226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17227"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17228"><highlight class="normal"></highlight></codeline>
<codeline lineno="17229"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17230"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_reporter_listening.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17231"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_reporter_xml.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17232"><highlight class="normal"></highlight></codeline>
<codeline lineno="17233"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17234"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(push)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17235"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(disable:4061)<sp/></highlight><highlight class="comment">//<sp/>Not<sp/>all<sp/>labels<sp/>are<sp/>EXPLICITLY<sp/>handled<sp/>in<sp/>switch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>4062<sp/>(not<sp/>all<sp/>labels<sp/>are<sp/>handled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>default<sp/>is<sp/>missing)<sp/>is<sp/>enabled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17238"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17239"><highlight class="normal"></highlight></codeline>
<codeline lineno="17240"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="17241"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlReporter::XmlReporter(<sp/>ReporterConfig<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>_config<sp/>)</highlight></codeline>
<codeline lineno="17242"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><sp/><sp/>StreamingReporterBase(<sp/>_config<sp/>),</highlight></codeline>
<codeline lineno="17243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml(_config.stream())</highlight></codeline>
<codeline lineno="17244"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="17245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporterPrefs.shouldRedirectStdOut<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_reporterPrefs.shouldReportAllAssertions<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17248"><highlight class="normal"></highlight></codeline>
<codeline lineno="17249"><highlight class="normal"><sp/><sp/><sp/><sp/>XmlReporter::~XmlReporter()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17250"><highlight class="normal"></highlight></codeline>
<codeline lineno="17251"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>XmlReporter::getDescription()<sp/>{</highlight></codeline>
<codeline lineno="17252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Reports<sp/>test<sp/>results<sp/>as<sp/>an<sp/>XML<sp/>document&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17254"><highlight class="normal"></highlight></codeline>
<codeline lineno="17255"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>XmlReporter::getStylesheetRef()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="17256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string();</highlight></codeline>
<codeline lineno="17257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17258"><highlight class="normal"></highlight></codeline>
<codeline lineno="17259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XmlReporter::writeSourceInfo(<sp/>SourceLineInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>sourceInfo<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml</highlight></codeline>
<codeline lineno="17261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;filename&quot;</highlight><highlight class="normal">,<sp/>sourceInfo.file<sp/>)</highlight></codeline>
<codeline lineno="17262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;line&quot;</highlight><highlight class="normal">,<sp/>sourceInfo.line<sp/>);</highlight></codeline>
<codeline lineno="17263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17264"><highlight class="normal"></highlight></codeline>
<codeline lineno="17265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XmlReporter::noMatchingTestCases(<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>s<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StreamingReporterBase::noMatchingTestCases(<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="17267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17268"><highlight class="normal"></highlight></codeline>
<codeline lineno="17269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XmlReporter::testRunStarting(<sp/>TestRunInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testInfo<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StreamingReporterBase::testRunStarting(<sp/>testInfo<sp/>);</highlight></codeline>
<codeline lineno="17271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>stylesheetRef<sp/>=<sp/>getStylesheetRef();</highlight></codeline>
<codeline lineno="17272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!stylesheetRef.empty()<sp/>)</highlight></codeline>
<codeline lineno="17273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.writeStylesheetRef(<sp/>stylesheetRef<sp/>);</highlight></codeline>
<codeline lineno="17274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.startElement(<sp/></highlight><highlight class="stringliteral">&quot;Catch&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="17275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!m_config-&gt;name().empty()<sp/>)</highlight></codeline>
<codeline lineno="17276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>m_config-&gt;name()<sp/>);</highlight></codeline>
<codeline lineno="17277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_config-&gt;testSpec().hasFilters())</highlight></codeline>
<codeline lineno="17278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;filters&quot;</highlight><highlight class="normal">,<sp/>serializeFilters(<sp/>m_config-&gt;getTestsOrTags()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="17279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_config-&gt;rngSeed()<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="17280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.scopedElement(<sp/></highlight><highlight class="stringliteral">&quot;Randomness&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="17281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;seed&quot;</highlight><highlight class="normal">,<sp/>m_config-&gt;rngSeed()<sp/>);</highlight></codeline>
<codeline lineno="17282"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17283"><highlight class="normal"></highlight></codeline>
<codeline lineno="17284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XmlReporter::testGroupStarting(<sp/>GroupInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>groupInfo<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StreamingReporterBase::testGroupStarting(<sp/>groupInfo<sp/>);</highlight></codeline>
<codeline lineno="17286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.startElement(<sp/></highlight><highlight class="stringliteral">&quot;Group&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="17287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>groupInfo.name<sp/>);</highlight></codeline>
<codeline lineno="17288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17289"><highlight class="normal"></highlight></codeline>
<codeline lineno="17290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XmlReporter::testCaseStarting(<sp/>TestCaseInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testInfo<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StreamingReporterBase::testCaseStarting(testInfo);</highlight></codeline>
<codeline lineno="17292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.startElement(<sp/></highlight><highlight class="stringliteral">&quot;TestCase&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="17293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>trim(<sp/>testInfo.name<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="17294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;description&quot;</highlight><highlight class="normal">,<sp/>testInfo.description<sp/>)</highlight></codeline>
<codeline lineno="17295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;tags&quot;</highlight><highlight class="normal">,<sp/>testInfo.tagsAsString()<sp/>);</highlight></codeline>
<codeline lineno="17296"><highlight class="normal"></highlight></codeline>
<codeline lineno="17297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeSourceInfo(<sp/>testInfo.lineInfo<sp/>);</highlight></codeline>
<codeline lineno="17298"><highlight class="normal"></highlight></codeline>
<codeline lineno="17299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m_config-&gt;showDurations()<sp/>==<sp/>ShowDurations::Always<sp/>)</highlight></codeline>
<codeline lineno="17300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_testCaseTimer.start();</highlight></codeline>
<codeline lineno="17301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.ensureTagClosed();</highlight></codeline>
<codeline lineno="17302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17303"><highlight class="normal"></highlight></codeline>
<codeline lineno="17304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XmlReporter::sectionStarting(<sp/>SectionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>sectionInfo<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StreamingReporterBase::sectionStarting(<sp/>sectionInfo<sp/>);</highlight></codeline>
<codeline lineno="17306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>m_sectionDepth++<sp/>&gt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.startElement(<sp/></highlight><highlight class="stringliteral">&quot;Section&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="17308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>trim(<sp/>sectionInfo.name<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="17309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeSourceInfo(<sp/>sectionInfo.lineInfo<sp/>);</highlight></codeline>
<codeline lineno="17310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.ensureTagClosed();</highlight></codeline>
<codeline lineno="17311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17313"><highlight class="normal"></highlight></codeline>
<codeline lineno="17314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XmlReporter::assertionStarting(<sp/>AssertionInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="17315"><highlight class="normal"></highlight></codeline>
<codeline lineno="17316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>XmlReporter::assertionEnded(<sp/>AssertionStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>assertionStats<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17317"><highlight class="normal"></highlight></codeline>
<codeline lineno="17318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AssertionResult<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>assertionStats.assertionResult;</highlight></codeline>
<codeline lineno="17319"><highlight class="normal"></highlight></codeline>
<codeline lineno="17320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>includeResults<sp/>=<sp/>m_config-&gt;includeSuccessfulResults()<sp/>||<sp/>!<ref refid="structresult" kindref="compound">result</ref>.isOk();</highlight></codeline>
<codeline lineno="17321"><highlight class="normal"></highlight></codeline>
<codeline lineno="17322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>includeResults<sp/>||<sp/><ref refid="structresult" kindref="compound">result</ref>.getResultType()<sp/>==<sp/>ResultWas::Warning<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>any<sp/>info<sp/>messages<sp/>in<sp/>&lt;Info&gt;<sp/>tags.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>msg<sp/>:<sp/>assertionStats.infoMessages<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>msg.type<sp/>==<sp/>ResultWas::Info<sp/>&amp;&amp;<sp/>includeResults<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.scopedElement(<sp/></highlight><highlight class="stringliteral">&quot;Info&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="17327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeText(<sp/>msg.message<sp/>);</highlight></codeline>
<codeline lineno="17328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>msg.type<sp/>==<sp/>ResultWas::Warning<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.scopedElement(<sp/></highlight><highlight class="stringliteral">&quot;Warning&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="17330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeText(<sp/>msg.message<sp/>);</highlight></codeline>
<codeline lineno="17331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17334"><highlight class="normal"></highlight></codeline>
<codeline lineno="17335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Drop<sp/>out<sp/>if<sp/>result<sp/>was<sp/>successful<sp/>but<sp/>we&apos;re<sp/>not<sp/>printing<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!includeResults<sp/>&amp;&amp;<sp/><ref refid="structresult" kindref="compound">result</ref>.getResultType()<sp/>!=<sp/>ResultWas::Warning<sp/>)</highlight></codeline>
<codeline lineno="17337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17338"><highlight class="normal"></highlight></codeline>
<codeline lineno="17339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>the<sp/>expression<sp/>if<sp/>there<sp/>is<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="structresult" kindref="compound">result</ref>.hasExpression()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.startElement(<sp/></highlight><highlight class="stringliteral">&quot;Expression&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="17342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;success&quot;</highlight><highlight class="normal">,<sp/><ref refid="structresult" kindref="compound">result</ref>.succeeded()<sp/>)</highlight></codeline>
<codeline lineno="17343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">,<sp/><ref refid="structresult" kindref="compound">result</ref>.getTestMacroName()<sp/>);</highlight></codeline>
<codeline lineno="17344"><highlight class="normal"></highlight></codeline>
<codeline lineno="17345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeSourceInfo(<sp/><ref refid="structresult" kindref="compound">result</ref>.getSourceInfo()<sp/>);</highlight></codeline>
<codeline lineno="17346"><highlight class="normal"></highlight></codeline>
<codeline lineno="17347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.scopedElement(<sp/></highlight><highlight class="stringliteral">&quot;Original&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="17348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeText(<sp/><ref refid="structresult" kindref="compound">result</ref>.getExpression()<sp/>);</highlight></codeline>
<codeline lineno="17349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.scopedElement(<sp/></highlight><highlight class="stringliteral">&quot;Expanded&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="17350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeText(<sp/><ref refid="structresult" kindref="compound">result</ref>.getExpandedExpression()<sp/>);</highlight></codeline>
<codeline lineno="17351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17352"><highlight class="normal"></highlight></codeline>
<codeline lineno="17353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>And...<sp/>Print<sp/>a<sp/>result<sp/>applicable<sp/>to<sp/>each<sp/>result<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/><ref refid="structresult" kindref="compound">result</ref>.getResultType()<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ResultWas::ThrewException:</highlight></codeline>
<codeline lineno="17356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.startElement(<sp/></highlight><highlight class="stringliteral">&quot;Exception&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="17357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeSourceInfo(<sp/><ref refid="structresult" kindref="compound">result</ref>.getSourceInfo()<sp/>);</highlight></codeline>
<codeline lineno="17358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.writeText(<sp/><ref refid="structresult" kindref="compound">result</ref>.getMessage()<sp/>);</highlight></codeline>
<codeline lineno="17359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.endElement();</highlight></codeline>
<codeline lineno="17360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ResultWas::FatalErrorCondition:</highlight></codeline>
<codeline lineno="17362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.startElement(<sp/></highlight><highlight class="stringliteral">&quot;FatalErrorCondition&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="17363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeSourceInfo(<sp/><ref refid="structresult" kindref="compound">result</ref>.getSourceInfo()<sp/>);</highlight></codeline>
<codeline lineno="17364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.writeText(<sp/><ref refid="structresult" kindref="compound">result</ref>.getMessage()<sp/>);</highlight></codeline>
<codeline lineno="17365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.endElement();</highlight></codeline>
<codeline lineno="17366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ResultWas::Info:</highlight></codeline>
<codeline lineno="17368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.scopedElement(<sp/></highlight><highlight class="stringliteral">&quot;Info&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="17369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeText(<sp/><ref refid="structresult" kindref="compound">result</ref>.getMessage()<sp/>);</highlight></codeline>
<codeline lineno="17370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ResultWas::Warning:</highlight></codeline>
<codeline lineno="17372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Warning<sp/>will<sp/>already<sp/>have<sp/>been<sp/>written</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ResultWas::ExplicitFailure:</highlight></codeline>
<codeline lineno="17375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.startElement(<sp/></highlight><highlight class="stringliteral">&quot;Failure&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="17376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeSourceInfo(<sp/><ref refid="structresult" kindref="compound">result</ref>.getSourceInfo()<sp/>);</highlight></codeline>
<codeline lineno="17377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.writeText(<sp/><ref refid="structresult" kindref="compound">result</ref>.getMessage()<sp/>);</highlight></codeline>
<codeline lineno="17378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.endElement();</highlight></codeline>
<codeline lineno="17379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="17381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17383"><highlight class="normal"></highlight></codeline>
<codeline lineno="17384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="structresult" kindref="compound">result</ref>.hasExpression()<sp/>)</highlight></codeline>
<codeline lineno="17385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.endElement();</highlight></codeline>
<codeline lineno="17386"><highlight class="normal"></highlight></codeline>
<codeline lineno="17387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17388"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17389"><highlight class="normal"></highlight></codeline>
<codeline lineno="17390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XmlReporter::sectionEnded(<sp/>SectionStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>sectionStats<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StreamingReporterBase::sectionEnded(<sp/>sectionStats<sp/>);</highlight></codeline>
<codeline lineno="17392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>--m_sectionDepth<sp/>&gt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlWriter::ScopedElement<sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref><sp/>=<sp/>m_xml.scopedElement(<sp/></highlight><highlight class="stringliteral">&quot;OverallResults&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="17394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;successes&quot;</highlight><highlight class="normal">,<sp/>sectionStats.assertions.passed<sp/>);</highlight></codeline>
<codeline lineno="17395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;failures&quot;</highlight><highlight class="normal">,<sp/>sectionStats.assertions.failed<sp/>);</highlight></codeline>
<codeline lineno="17396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;expectedFailures&quot;</highlight><highlight class="normal">,<sp/>sectionStats.assertions.failedButOk<sp/>);</highlight></codeline>
<codeline lineno="17397"><highlight class="normal"></highlight></codeline>
<codeline lineno="17398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m_config-&gt;showDurations()<sp/>==<sp/>ShowDurations::Always<sp/>)</highlight></codeline>
<codeline lineno="17399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;durationInSeconds&quot;</highlight><highlight class="normal">,<sp/>sectionStats.durationInSeconds<sp/>);</highlight></codeline>
<codeline lineno="17400"><highlight class="normal"></highlight></codeline>
<codeline lineno="17401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.endElement();</highlight></codeline>
<codeline lineno="17402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17403"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17404"><highlight class="normal"></highlight></codeline>
<codeline lineno="17405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XmlReporter::testCaseEnded(<sp/>TestCaseStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testCaseStats<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StreamingReporterBase::testCaseEnded(<sp/>testCaseStats<sp/>);</highlight></codeline>
<codeline lineno="17407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>XmlWriter::ScopedElement<sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref><sp/>=<sp/>m_xml.scopedElement(<sp/></highlight><highlight class="stringliteral">&quot;OverallResult&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="17408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;success&quot;</highlight><highlight class="normal">,<sp/>testCaseStats.totals.assertions.allOk()<sp/>);</highlight></codeline>
<codeline lineno="17409"><highlight class="normal"></highlight></codeline>
<codeline lineno="17410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m_config-&gt;showDurations()<sp/>==<sp/>ShowDurations::Always<sp/>)</highlight></codeline>
<codeline lineno="17411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__constants_1ga4b7956eb6e2fbedfc7cf2e46e85c5139" kindref="member">e</ref>.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;durationInSeconds&quot;</highlight><highlight class="normal">,<sp/>m_testCaseTimer.getElapsedSeconds()<sp/>);</highlight></codeline>
<codeline lineno="17412"><highlight class="normal"></highlight></codeline>
<codeline lineno="17413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!testCaseStats.stdOut.empty()<sp/>)</highlight></codeline>
<codeline lineno="17414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.scopedElement(<sp/></highlight><highlight class="stringliteral">&quot;StdOut&quot;</highlight><highlight class="normal"><sp/>).writeText(<sp/>trim(<sp/>testCaseStats.stdOut<sp/>),<sp/>XmlFormatting::Newline<sp/>);</highlight></codeline>
<codeline lineno="17415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>!testCaseStats.stdErr.empty()<sp/>)</highlight></codeline>
<codeline lineno="17416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.scopedElement(<sp/></highlight><highlight class="stringliteral">&quot;StdErr&quot;</highlight><highlight class="normal"><sp/>).writeText(<sp/>trim(<sp/>testCaseStats.stdErr<sp/>),<sp/>XmlFormatting::Newline<sp/>);</highlight></codeline>
<codeline lineno="17417"><highlight class="normal"></highlight></codeline>
<codeline lineno="17418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.endElement();</highlight></codeline>
<codeline lineno="17419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17420"><highlight class="normal"></highlight></codeline>
<codeline lineno="17421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XmlReporter::testGroupEnded(<sp/>TestGroupStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testGroupStats<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StreamingReporterBase::testGroupEnded(<sp/>testGroupStats<sp/>);</highlight></codeline>
<codeline lineno="17423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Check<sp/>testGroupStats.aborting<sp/>and<sp/>act<sp/>accordingly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.scopedElement(<sp/></highlight><highlight class="stringliteral">&quot;OverallResults&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="17425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;successes&quot;</highlight><highlight class="normal">,<sp/>testGroupStats.totals.assertions.passed<sp/>)</highlight></codeline>
<codeline lineno="17426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;failures&quot;</highlight><highlight class="normal">,<sp/>testGroupStats.totals.assertions.failed<sp/>)</highlight></codeline>
<codeline lineno="17427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;expectedFailures&quot;</highlight><highlight class="normal">,<sp/>testGroupStats.totals.assertions.failedButOk<sp/>);</highlight></codeline>
<codeline lineno="17428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.scopedElement(<sp/></highlight><highlight class="stringliteral">&quot;OverallResultsCases&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="17429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;successes&quot;</highlight><highlight class="normal">,<sp/>testGroupStats.totals.testCases.passed<sp/>)</highlight></codeline>
<codeline lineno="17430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;failures&quot;</highlight><highlight class="normal">,<sp/>testGroupStats.totals.testCases.failed<sp/>)</highlight></codeline>
<codeline lineno="17431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;expectedFailures&quot;</highlight><highlight class="normal">,<sp/>testGroupStats.totals.testCases.failedButOk<sp/>);</highlight></codeline>
<codeline lineno="17432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.endElement();</highlight></codeline>
<codeline lineno="17433"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17434"><highlight class="normal"></highlight></codeline>
<codeline lineno="17435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XmlReporter::testRunEnded(<sp/>TestRunStats<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>testRunStats<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="17436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StreamingReporterBase::testRunEnded(<sp/>testRunStats<sp/>);</highlight></codeline>
<codeline lineno="17437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.scopedElement(<sp/></highlight><highlight class="stringliteral">&quot;OverallResults&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="17438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;successes&quot;</highlight><highlight class="normal">,<sp/>testRunStats.totals.assertions.passed<sp/>)</highlight></codeline>
<codeline lineno="17439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;failures&quot;</highlight><highlight class="normal">,<sp/>testRunStats.totals.assertions.failed<sp/>)</highlight></codeline>
<codeline lineno="17440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;expectedFailures&quot;</highlight><highlight class="normal">,<sp/>testRunStats.totals.assertions.failedButOk<sp/>);</highlight></codeline>
<codeline lineno="17441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.scopedElement(<sp/></highlight><highlight class="stringliteral">&quot;OverallResultsCases&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="17442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;successes&quot;</highlight><highlight class="normal">,<sp/>testRunStats.totals.testCases.passed<sp/>)</highlight></codeline>
<codeline lineno="17443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;failures&quot;</highlight><highlight class="normal">,<sp/>testRunStats.totals.testCases.failed<sp/>)</highlight></codeline>
<codeline lineno="17444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(<sp/></highlight><highlight class="stringliteral">&quot;expectedFailures&quot;</highlight><highlight class="normal">,<sp/>testRunStats.totals.testCases.failedButOk<sp/>);</highlight></codeline>
<codeline lineno="17445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.endElement();</highlight></codeline>
<codeline lineno="17446"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17447"><highlight class="normal"></highlight></codeline>
<codeline lineno="17448"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_ENABLE_BENCHMARKING)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XmlReporter::benchmarkPreparing(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="17450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.startElement(</highlight><highlight class="stringliteral">&quot;BenchmarkResults&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="17451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="17452"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17453"><highlight class="normal"></highlight></codeline>
<codeline lineno="17454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XmlReporter::benchmarkStarting(BenchmarkInfo<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<ref refid="structinfo" kindref="compound">info</ref>)<sp/>{</highlight></codeline>
<codeline lineno="17455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.writeAttribute(</highlight><highlight class="stringliteral">&quot;samples&quot;</highlight><highlight class="normal">,<sp/><ref refid="structinfo" kindref="compound">info</ref>.samples)</highlight></codeline>
<codeline lineno="17456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;resamples&quot;</highlight><highlight class="normal">,<sp/><ref refid="structinfo" kindref="compound">info</ref>.resamples)</highlight></codeline>
<codeline lineno="17457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;iterations&quot;</highlight><highlight class="normal">,<sp/><ref refid="structinfo" kindref="compound">info</ref>.iterations)</highlight></codeline>
<codeline lineno="17458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;clockResolution&quot;</highlight><highlight class="normal">,<sp/><ref refid="structinfo" kindref="compound">info</ref>.clockResolution)</highlight></codeline>
<codeline lineno="17459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;estimatedDuration&quot;</highlight><highlight class="normal">,<sp/><ref refid="structinfo" kindref="compound">info</ref>.estimatedDuration)</highlight></codeline>
<codeline lineno="17460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeComment(</highlight><highlight class="stringliteral">&quot;All<sp/>values<sp/>in<sp/>nano<sp/>seconds&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="17461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17462"><highlight class="normal"></highlight></codeline>
<codeline lineno="17463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XmlReporter::benchmarkEnded(BenchmarkStats&lt;&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>benchmarkStats)<sp/>{</highlight></codeline>
<codeline lineno="17464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.startElement(</highlight><highlight class="stringliteral">&quot;mean&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="17465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/>benchmarkStats.mean.point.count())</highlight></codeline>
<codeline lineno="17466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;lowerBound&quot;</highlight><highlight class="normal">,<sp/>benchmarkStats.mean.lower_bound.count())</highlight></codeline>
<codeline lineno="17467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;upperBound&quot;</highlight><highlight class="normal">,<sp/>benchmarkStats.mean.upper_bound.count())</highlight></codeline>
<codeline lineno="17468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;ci&quot;</highlight><highlight class="normal">,<sp/>benchmarkStats.mean.confidence_interval);</highlight></codeline>
<codeline lineno="17469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.endElement();</highlight></codeline>
<codeline lineno="17470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.startElement(</highlight><highlight class="stringliteral">&quot;standardDeviation&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="17471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;value&quot;</highlight><highlight class="normal">,<sp/>benchmarkStats.standardDeviation.point.count())</highlight></codeline>
<codeline lineno="17472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;lowerBound&quot;</highlight><highlight class="normal">,<sp/>benchmarkStats.standardDeviation.lower_bound.count())</highlight></codeline>
<codeline lineno="17473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;upperBound&quot;</highlight><highlight class="normal">,<sp/>benchmarkStats.standardDeviation.upper_bound.count())</highlight></codeline>
<codeline lineno="17474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;ci&quot;</highlight><highlight class="normal">,<sp/>benchmarkStats.standardDeviation.confidence_interval);</highlight></codeline>
<codeline lineno="17475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.endElement();</highlight></codeline>
<codeline lineno="17476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.startElement(</highlight><highlight class="stringliteral">&quot;outliers&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="17477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;variance&quot;</highlight><highlight class="normal">,<sp/>benchmarkStats.outlierVariance)</highlight></codeline>
<codeline lineno="17478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;lowMild&quot;</highlight><highlight class="normal">,<sp/>benchmarkStats.outliers.low_mild)</highlight></codeline>
<codeline lineno="17479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;lowSevere&quot;</highlight><highlight class="normal">,<sp/>benchmarkStats.outliers.low_severe)</highlight></codeline>
<codeline lineno="17480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;highMild&quot;</highlight><highlight class="normal">,<sp/>benchmarkStats.outliers.high_mild)</highlight></codeline>
<codeline lineno="17481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.writeAttribute(</highlight><highlight class="stringliteral">&quot;highSevere&quot;</highlight><highlight class="normal">,<sp/>benchmarkStats.outliers.high_severe);</highlight></codeline>
<codeline lineno="17482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.endElement();</highlight></codeline>
<codeline lineno="17483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.endElement();</highlight></codeline>
<codeline lineno="17484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17485"><highlight class="normal"></highlight></codeline>
<codeline lineno="17486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>XmlReporter::benchmarkFailed(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;error)<sp/>{</highlight></codeline>
<codeline lineno="17487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.scopedElement(</highlight><highlight class="stringliteral">&quot;failed&quot;</highlight><highlight class="normal">).</highlight></codeline>
<codeline lineno="17488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeAttribute(</highlight><highlight class="stringliteral">&quot;message&quot;</highlight><highlight class="normal">,<sp/>error);</highlight></codeline>
<codeline lineno="17489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_xml.endElement();</highlight></codeline>
<codeline lineno="17490"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="17491"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_ENABLE_BENCHMARKING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17492"><highlight class="normal"></highlight></codeline>
<codeline lineno="17493"><highlight class="normal"><sp/><sp/><sp/><sp/>CATCH_REGISTER_REPORTER(<sp/></highlight><highlight class="stringliteral">&quot;xml&quot;</highlight><highlight class="normal">,<sp/>XmlReporter<sp/>)</highlight></codeline>
<codeline lineno="17494"><highlight class="normal"></highlight></codeline>
<codeline lineno="17495"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>namespace<sp/>Catch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17496"><highlight class="normal"></highlight></codeline>
<codeline lineno="17497"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17498"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(pop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17499"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17500"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_reporter_xml.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17501"><highlight class="normal"></highlight></codeline>
<codeline lineno="17502"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Catch<sp/>{</highlight></codeline>
<codeline lineno="17503"><highlight class="normal"><sp/><sp/><sp/><sp/>LeakDetector<sp/>leakDetector;</highlight></codeline>
<codeline lineno="17504"><highlight class="normal">}</highlight></codeline>
<codeline lineno="17505"><highlight class="normal"></highlight></codeline>
<codeline lineno="17506"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17507"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17508"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17509"><highlight class="normal"></highlight></codeline>
<codeline lineno="17510"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_impl.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17511"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17512"><highlight class="normal"></highlight></codeline>
<codeline lineno="17513"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CATCH_CONFIG_MAIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17514"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_default_main.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17515"><highlight class="normal"></highlight></codeline>
<codeline lineno="17516"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__OBJC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17517"><highlight class="normal"></highlight></codeline>
<codeline lineno="17518"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_WCHAR)<sp/>&amp;&amp;<sp/>defined(CATCH_PLATFORM_WINDOWS)<sp/>&amp;&amp;<sp/>defined(_UNICODE)<sp/>&amp;&amp;<sp/>!defined(DO_NOT_USE_WMAIN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17519"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Standard<sp/>C/C++<sp/>Win32<sp/>Unicode<sp/>wmain<sp/>entry<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17520"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wmain<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*<sp/>argv[],<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>*<sp/>[])<sp/>{</highlight></codeline>
<codeline lineno="17521"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17522"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Standard<sp/>C/C++<sp/>main<sp/>entry<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17523"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>argv[])<sp/>{</highlight></codeline>
<codeline lineno="17524"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17525"><highlight class="normal"></highlight></codeline>
<codeline lineno="17526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Catch::Session().run(<sp/>argc,<sp/>argv<sp/>);</highlight></codeline>
<codeline lineno="17527"><highlight class="normal">}</highlight></codeline>
<codeline lineno="17528"><highlight class="normal"></highlight></codeline>
<codeline lineno="17529"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>__OBJC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17530"><highlight class="normal"></highlight></codeline>
<codeline lineno="17531"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Objective-C<sp/>entry<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17532"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>argv[])<sp/>{</highlight></codeline>
<codeline lineno="17533"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!CATCH_ARC_ENABLED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17534"><highlight class="normal"><sp/><sp/><sp/><sp/>NSAutoreleasePool<sp/>*<sp/>pool<sp/>=<sp/>[[NSAutoreleasePool<sp/>alloc]<sp/>init];</highlight></codeline>
<codeline lineno="17535"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17536"><highlight class="normal"></highlight></codeline>
<codeline lineno="17537"><highlight class="normal"><sp/><sp/><sp/><sp/>Catch::registerTestMethods();</highlight></codeline>
<codeline lineno="17538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>Catch::Session().run(<sp/>argc,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**)argv<sp/>);</highlight></codeline>
<codeline lineno="17539"><highlight class="normal"></highlight></codeline>
<codeline lineno="17540"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!CATCH_ARC_ENABLED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17541"><highlight class="normal"><sp/><sp/><sp/><sp/>[pool<sp/>drain];</highlight></codeline>
<codeline lineno="17542"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17543"><highlight class="normal"></highlight></codeline>
<codeline lineno="17544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="17545"><highlight class="normal">}</highlight></codeline>
<codeline lineno="17546"><highlight class="normal"></highlight></codeline>
<codeline lineno="17547"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>__OBJC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17548"><highlight class="normal"></highlight></codeline>
<codeline lineno="17549"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_default_main.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17550"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17551"><highlight class="normal"></highlight></codeline>
<codeline lineno="17552"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_CONFIG_IMPL_ONLY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17553"><highlight class="normal"></highlight></codeline>
<codeline lineno="17554"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CLARA_CONFIG_MAIN_NOT_DEFINED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17555"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/>CLARA_CONFIG_MAIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17556"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17557"><highlight class="normal"></highlight></codeline>
<codeline lineno="17558"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_CONFIG_DISABLE)</highlight></codeline>
<codeline lineno="17560"><highlight class="comment">//<sp/>If<sp/>this<sp/>config<sp/>identifier<sp/>is<sp/>defined<sp/>then<sp/>all<sp/>CATCH<sp/>macros<sp/>are<sp/>prefixed<sp/>with<sp/>CATCH_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17561"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CATCH_CONFIG_PREFIX_ALL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17562"><highlight class="normal"></highlight></codeline>
<codeline lineno="17563"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REQUIRE(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEST(<sp/>&quot;CATCH_REQUIRE&quot;</highlight><highlight class="normal">,<sp/>Catch::ResultDisposition::Normal,<sp/>__VA_ARGS__<sp/>)</highlight></codeline>
<codeline lineno="17564"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REQUIRE_FALSE(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEST(<sp/>&quot;CATCH_REQUIRE_FALSE&quot;</highlight><highlight class="normal">,<sp/>Catch::ResultDisposition::Normal<sp/>|<sp/>Catch::ResultDisposition::FalseTest,<sp/>__VA_ARGS__<sp/>)</highlight></codeline>
<codeline lineno="17565"><highlight class="normal"></highlight></codeline>
<codeline lineno="17566"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REQUIRE_THROWS(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_THROWS(<sp/>&quot;CATCH_REQUIRE_THROWS&quot;</highlight><highlight class="normal">,<sp/>Catch::ResultDisposition::Normal,<sp/>__VA_ARGS__<sp/>)</highlight></codeline>
<codeline lineno="17567"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REQUIRE_THROWS_AS(<sp/>expr,<sp/>exceptionType<sp/>)<sp/>INTERNAL_CATCH_THROWS_AS(<sp/>&quot;CATCH_REQUIRE_THROWS_AS&quot;</highlight><highlight class="normal">,<sp/>exceptionType,<sp/>Catch::ResultDisposition::Normal,<sp/>expr<sp/>)</highlight></codeline>
<codeline lineno="17568"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REQUIRE_THROWS_WITH(<sp/>expr,<sp/>matcher<sp/>)<sp/>INTERNAL_CATCH_THROWS_STR_MATCHES(<sp/>&quot;CATCH_REQUIRE_THROWS_WITH&quot;</highlight><highlight class="normal">,<sp/>Catch::ResultDisposition::Normal,<sp/>matcher,<sp/>expr<sp/>)</highlight></codeline>
<codeline lineno="17569"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_CONFIG_DISABLE_MATCHERS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17570"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REQUIRE_THROWS_MATCHES(<sp/>expr,<sp/>exceptionType,<sp/>matcher<sp/>)<sp/>INTERNAL_CATCH_THROWS_MATCHES(<sp/>&quot;CATCH_REQUIRE_THROWS_MATCHES&quot;</highlight><highlight class="normal">,<sp/>exceptionType,<sp/>Catch::ResultDisposition::Normal,<sp/>matcher,<sp/>expr<sp/>)</highlight></codeline>
<codeline lineno="17571"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="comment">//<sp/>CATCH_CONFIG_DISABLE_MATCHERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17572"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REQUIRE_NOTHROW(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_NO_THROW(<sp/>&quot;CATCH_REQUIRE_NOTHROW&quot;</highlight><highlight class="normal">,<sp/>Catch::ResultDisposition::Normal,<sp/>__VA_ARGS__<sp/>)</highlight></codeline>
<codeline lineno="17573"><highlight class="normal"></highlight></codeline>
<codeline lineno="17574"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CHECK(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEST(<sp/>&quot;CATCH_CHECK&quot;</highlight><highlight class="normal">,<sp/>Catch::ResultDisposition::ContinueOnFailure,<sp/>__VA_ARGS__<sp/>)</highlight></codeline>
<codeline lineno="17575"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CHECK_FALSE(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEST(<sp/>&quot;CATCH_CHECK_FALSE&quot;</highlight><highlight class="normal">,<sp/>Catch::ResultDisposition::ContinueOnFailure<sp/>|<sp/>Catch::ResultDisposition::FalseTest,<sp/>__VA_ARGS__<sp/>)</highlight></codeline>
<codeline lineno="17576"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CHECKED_IF(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_IF(<sp/>&quot;CATCH_CHECKED_IF&quot;</highlight><highlight class="normal">,<sp/>Catch::ResultDisposition::ContinueOnFailure,<sp/>__VA_ARGS__<sp/>)</highlight></codeline>
<codeline lineno="17577"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CHECKED_ELSE(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_ELSE(<sp/>&quot;CATCH_CHECKED_ELSE&quot;</highlight><highlight class="normal">,<sp/>Catch::ResultDisposition::ContinueOnFailure,<sp/>__VA_ARGS__<sp/>)</highlight></codeline>
<codeline lineno="17578"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CHECK_NOFAIL(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEST(<sp/>&quot;CATCH_CHECK_NOFAIL&quot;</highlight><highlight class="normal">,<sp/>Catch::ResultDisposition::ContinueOnFailure<sp/>|<sp/>Catch::ResultDisposition::SuppressFail,<sp/>__VA_ARGS__<sp/>)</highlight></codeline>
<codeline lineno="17579"><highlight class="normal"></highlight></codeline>
<codeline lineno="17580"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CHECK_THROWS(<sp/>...<sp/>)<sp/><sp/>INTERNAL_CATCH_THROWS(<sp/>&quot;CATCH_CHECK_THROWS&quot;</highlight><highlight class="normal">,<sp/>Catch::ResultDisposition::ContinueOnFailure,<sp/>__VA_ARGS__<sp/>)</highlight></codeline>
<codeline lineno="17581"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CHECK_THROWS_AS(<sp/>expr,<sp/>exceptionType<sp/>)<sp/>INTERNAL_CATCH_THROWS_AS(<sp/>&quot;CATCH_CHECK_THROWS_AS&quot;</highlight><highlight class="normal">,<sp/>exceptionType,<sp/>Catch::ResultDisposition::ContinueOnFailure,<sp/>expr<sp/>)</highlight></codeline>
<codeline lineno="17582"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CHECK_THROWS_WITH(<sp/>expr,<sp/>matcher<sp/>)<sp/>INTERNAL_CATCH_THROWS_STR_MATCHES(<sp/>&quot;CATCH_CHECK_THROWS_WITH&quot;</highlight><highlight class="normal">,<sp/>Catch::ResultDisposition::ContinueOnFailure,<sp/>matcher,<sp/>expr<sp/>)</highlight></codeline>
<codeline lineno="17583"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_CONFIG_DISABLE_MATCHERS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17584"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CHECK_THROWS_MATCHES(<sp/>expr,<sp/>exceptionType,<sp/>matcher<sp/>)<sp/>INTERNAL_CATCH_THROWS_MATCHES(<sp/>&quot;CATCH_CHECK_THROWS_MATCHES&quot;</highlight><highlight class="normal">,<sp/>exceptionType,<sp/>Catch::ResultDisposition::ContinueOnFailure,<sp/>matcher,<sp/>expr<sp/>)</highlight></codeline>
<codeline lineno="17585"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_DISABLE_MATCHERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17586"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CHECK_NOTHROW(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_NO_THROW(<sp/>&quot;CATCH_CHECK_NOTHROW&quot;</highlight><highlight class="normal">,<sp/>Catch::ResultDisposition::ContinueOnFailure,<sp/>__VA_ARGS__<sp/>)</highlight></codeline>
<codeline lineno="17587"><highlight class="normal"></highlight></codeline>
<codeline lineno="17588"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_CONFIG_DISABLE_MATCHERS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17589"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CHECK_THAT(<sp/>arg,<sp/>matcher<sp/>)<sp/>INTERNAL_CHECK_THAT(<sp/>&quot;CATCH_CHECK_THAT&quot;</highlight><highlight class="normal">,<sp/>matcher,<sp/>Catch::ResultDisposition::ContinueOnFailure,<sp/>arg<sp/>)</highlight></codeline>
<codeline lineno="17590"><highlight class="normal"></highlight></codeline>
<codeline lineno="17591"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REQUIRE_THAT(<sp/>arg,<sp/>matcher<sp/>)<sp/>INTERNAL_CHECK_THAT(<sp/>&quot;CATCH_REQUIRE_THAT&quot;</highlight><highlight class="normal">,<sp/>matcher,<sp/>Catch::ResultDisposition::Normal,<sp/>arg<sp/>)</highlight></codeline>
<codeline lineno="17592"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_DISABLE_MATCHERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17593"><highlight class="normal"></highlight></codeline>
<codeline lineno="17594"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_INFO(<sp/>msg<sp/>)<sp/>INTERNAL_CATCH_INFO(<sp/>&quot;CATCH_INFO&quot;</highlight><highlight class="normal">,<sp/>msg<sp/>)</highlight></codeline>
<codeline lineno="17595"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_UNSCOPED_INFO(<sp/>msg<sp/>)<sp/>INTERNAL_CATCH_UNSCOPED_INFO(<sp/>&quot;CATCH_UNSCOPED_INFO&quot;</highlight><highlight class="normal">,<sp/>msg<sp/>)</highlight></codeline>
<codeline lineno="17596"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_WARN(<sp/>msg<sp/>)<sp/>INTERNAL_CATCH_MSG(<sp/>&quot;CATCH_WARN&quot;</highlight><highlight class="normal">,<sp/>Catch::ResultWas::Warning,<sp/>Catch::ResultDisposition::ContinueOnFailure,<sp/>msg<sp/>)</highlight></codeline>
<codeline lineno="17597"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CAPTURE(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_CAPTURE(<sp/>INTERNAL_CATCH_UNIQUE_NAME(capturer),<sp/>&quot;CATCH_CAPTURE&quot;</highlight><highlight class="normal">,__VA_ARGS__<sp/>)</highlight></codeline>
<codeline lineno="17598"><highlight class="normal"></highlight></codeline>
<codeline lineno="17599"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEST_CASE(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TESTCASE(<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17600"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEST_CASE_METHOD(<sp/>className,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEST_CASE_METHOD(<sp/>className,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17601"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_METHOD_AS_TEST_CASE(<sp/>method,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_METHOD_AS_TEST_CASE(<sp/>method,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17602"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REGISTER_TEST_CASE(<sp/>Function,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_REGISTER_TESTCASE(<sp/>Function,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17603"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_SECTION(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_SECTION(<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17604"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_DYNAMIC_SECTION(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_DYNAMIC_SECTION(<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17605"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_FAIL(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_MSG(<sp/>&quot;CATCH_FAIL&quot;</highlight><highlight class="normal">,<sp/>Catch::ResultWas::ExplicitFailure,<sp/>Catch::ResultDisposition::Normal,<sp/>__VA_ARGS__<sp/>)</highlight></codeline>
<codeline lineno="17606"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_FAIL_CHECK(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_MSG(<sp/>&quot;CATCH_FAIL_CHECK&quot;</highlight><highlight class="normal">,<sp/>Catch::ResultWas::ExplicitFailure,<sp/>Catch::ResultDisposition::ContinueOnFailure,<sp/>__VA_ARGS__<sp/>)</highlight></codeline>
<codeline lineno="17607"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_SUCCEED(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_MSG(<sp/>&quot;CATCH_SUCCEED&quot;</highlight><highlight class="normal">,<sp/>Catch::ResultWas::Ok,<sp/>Catch::ResultDisposition::ContinueOnFailure,<sp/>__VA_ARGS__<sp/>)</highlight></codeline>
<codeline lineno="17608"><highlight class="normal"></highlight></codeline>
<codeline lineno="17609"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_ANON_TEST_CASE()<sp/>INTERNAL_CATCH_TESTCASE()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17610"><highlight class="normal"></highlight></codeline>
<codeline lineno="17611"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17612"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEMPLATE_TEST_CASE(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE(<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17613"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEMPLATE_TEST_CASE_SIG(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG(<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17614"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEMPLATE_TEST_CASE_METHOD(<sp/>className,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD(<sp/>className,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17615"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEMPLATE_TEST_CASE_METHOD_SIG(<sp/>className,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG(<sp/>className,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17616"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEMPLATE_PRODUCT_TEST_CASE(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE(<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17617"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG(<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17618"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD(<sp/>className,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD(<sp/>className,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17619"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG(<sp/>className,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG(<sp/>className,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17620"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17621"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEMPLATE_TEST_CASE(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE(<sp/>__VA_ARGS__<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17622"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEMPLATE_TEST_CASE_SIG(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG(<sp/>__VA_ARGS__<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17623"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEMPLATE_TEST_CASE_METHOD(<sp/>className,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD(<sp/>className,<sp/>__VA_ARGS__<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17624"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEMPLATE_TEST_CASE_METHOD_SIG(<sp/>className,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG(<sp/>className,<sp/>__VA_ARGS__<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17625"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEMPLATE_PRODUCT_TEST_CASE(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE(<sp/>__VA_ARGS__<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17626"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG(<sp/>__VA_ARGS__<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17627"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD(<sp/>className,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD(<sp/>className,<sp/>__VA_ARGS__<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17628"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG(<sp/>className,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG(<sp/>className,<sp/>__VA_ARGS__<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17629"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17630"><highlight class="normal"></highlight></codeline>
<codeline lineno="17631"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_CONFIG_RUNTIME_STATIC_REQUIRE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17632"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_STATIC_REQUIRE(<sp/>...<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(<sp/><sp/><sp/>__VA_ARGS__<sp/>,<sp/><sp/><sp/><sp/><sp/><sp/>#__VA_ARGS__<sp/>);<sp/><sp/><sp/><sp/><sp/>CATCH_SUCCEED(<sp/>#__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17633"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_STATIC_REQUIRE_FALSE(<sp/>...<sp/>)<sp/>static_assert(<sp/>!(__VA_ARGS__),<sp/>&quot;!(&quot;</highlight><highlight class="normal"><sp/>#__VA_ARGS__<sp/>&quot;)&quot;<sp/>);<sp/>CATCH_SUCCEED(<sp/>#__VA_ARGS__<sp/>)</highlight></codeline>
<codeline lineno="17634"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17635"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_STATIC_REQUIRE(<sp/>...<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>CATCH_REQUIRE(<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17636"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_STATIC_REQUIRE_FALSE(<sp/>...<sp/>)<sp/>CATCH_REQUIRE_FALSE(<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17637"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17638"><highlight class="normal"></highlight></codeline>
<codeline lineno="17639"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;BDD-style&quot;<sp/>convenience<sp/>wrappers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17640"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_SCENARIO(<sp/>...<sp/>)<sp/>CATCH_TEST_CASE(<sp/>&quot;Scenario:<sp/>&quot;</highlight><highlight class="normal"><sp/>__VA_ARGS__<sp/>)</highlight></codeline>
<codeline lineno="17641"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_SCENARIO_METHOD(<sp/>className,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEST_CASE_METHOD(<sp/>className,<sp/>&quot;Scenario:<sp/>&quot;</highlight><highlight class="normal"><sp/>__VA_ARGS__<sp/>)</highlight></codeline>
<codeline lineno="17642"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_GIVEN(<sp/>desc<sp/>)<sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_DYNAMIC_SECTION(<sp/>&quot;<sp/><sp/><sp/><sp/>Given:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>desc<sp/>)</highlight></codeline>
<codeline lineno="17643"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_AND_GIVEN(<sp/>desc<sp/>)<sp/>INTERNAL_CATCH_DYNAMIC_SECTION(<sp/>&quot;And<sp/>given:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>desc<sp/>)</highlight></codeline>
<codeline lineno="17644"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_WHEN(<sp/>desc<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_DYNAMIC_SECTION(<sp/>&quot;<sp/><sp/><sp/><sp/><sp/>When:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>desc<sp/>)</highlight></codeline>
<codeline lineno="17645"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_AND_WHEN(<sp/>desc<sp/>)<sp/><sp/>INTERNAL_CATCH_DYNAMIC_SECTION(<sp/>&quot;<sp/>And<sp/>when:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>desc<sp/>)</highlight></codeline>
<codeline lineno="17646"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_THEN(<sp/>desc<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_DYNAMIC_SECTION(<sp/>&quot;<sp/><sp/><sp/><sp/><sp/>Then:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>desc<sp/>)</highlight></codeline>
<codeline lineno="17647"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_AND_THEN(<sp/>desc<sp/>)<sp/><sp/>INTERNAL_CATCH_DYNAMIC_SECTION(<sp/>&quot;<sp/><sp/><sp/><sp/><sp/><sp/>And:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>desc<sp/>)</highlight></codeline>
<codeline lineno="17648"><highlight class="normal"></highlight></codeline>
<codeline lineno="17649"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_ENABLE_BENCHMARKING)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17650"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_BENCHMARK(...)<sp/>\</highlight></codeline>
<codeline lineno="17651"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>INTERNAL_CATCH_BENCHMARK(INTERNAL_CATCH_UNIQUE_NAME(____C_A_T_C_H____B_E_N_C_H____),<sp/>INTERNAL_CATCH_GET_1_ARG(__VA_ARGS__,,),<sp/>INTERNAL_CATCH_GET_2_ARG(__VA_ARGS__,,))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17652"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_BENCHMARK_ADVANCED(name)<sp/>\</highlight></codeline>
<codeline lineno="17653"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>INTERNAL_CATCH_BENCHMARK_ADVANCED(INTERNAL_CATCH_UNIQUE_NAME(____C_A_T_C_H____B_E_N_C_H____),<sp/>name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17654"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_ENABLE_BENCHMARKING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17655"><highlight class="normal"></highlight></codeline>
<codeline lineno="17656"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>CATCH_CONFIG_PREFIX_ALL<sp/>is<sp/>not<sp/>defined<sp/>then<sp/>the<sp/>CATCH_<sp/>prefix<sp/>is<sp/>not<sp/>required</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17657"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17658"><highlight class="normal"></highlight></codeline>
<codeline lineno="17659"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEST(<sp/>&quot;REQUIRE&quot;</highlight><highlight class="normal">,<sp/>Catch::ResultDisposition::Normal,<sp/>__VA_ARGS__<sp/><sp/>)</highlight></codeline>
<codeline lineno="17660"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_FALSE(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEST(<sp/>&quot;REQUIRE_FALSE&quot;</highlight><highlight class="normal">,<sp/>Catch::ResultDisposition::Normal<sp/>|<sp/>Catch::ResultDisposition::FalseTest,<sp/>__VA_ARGS__<sp/>)</highlight></codeline>
<codeline lineno="17661"><highlight class="normal"></highlight></codeline>
<codeline lineno="17662"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_THROWS(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_THROWS(<sp/>&quot;REQUIRE_THROWS&quot;</highlight><highlight class="normal">,<sp/>Catch::ResultDisposition::Normal,<sp/>__VA_ARGS__<sp/>)</highlight></codeline>
<codeline lineno="17663"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_THROWS_AS(<sp/>expr,<sp/>exceptionType<sp/>)<sp/>INTERNAL_CATCH_THROWS_AS(<sp/>&quot;REQUIRE_THROWS_AS&quot;</highlight><highlight class="normal">,<sp/>exceptionType,<sp/>Catch::ResultDisposition::Normal,<sp/>expr<sp/>)</highlight></codeline>
<codeline lineno="17664"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_THROWS_WITH(<sp/>expr,<sp/>matcher<sp/>)<sp/>INTERNAL_CATCH_THROWS_STR_MATCHES(<sp/>&quot;REQUIRE_THROWS_WITH&quot;</highlight><highlight class="normal">,<sp/>Catch::ResultDisposition::Normal,<sp/>matcher,<sp/>expr<sp/>)</highlight></codeline>
<codeline lineno="17665"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_CONFIG_DISABLE_MATCHERS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17666"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_THROWS_MATCHES(<sp/>expr,<sp/>exceptionType,<sp/>matcher<sp/>)<sp/>INTERNAL_CATCH_THROWS_MATCHES(<sp/>&quot;REQUIRE_THROWS_MATCHES&quot;</highlight><highlight class="normal">,<sp/>exceptionType,<sp/>Catch::ResultDisposition::Normal,<sp/>matcher,<sp/>expr<sp/>)</highlight></codeline>
<codeline lineno="17667"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_DISABLE_MATCHERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17668"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_NOTHROW(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_NO_THROW(<sp/>&quot;REQUIRE_NOTHROW&quot;</highlight><highlight class="normal">,<sp/>Catch::ResultDisposition::Normal,<sp/>__VA_ARGS__<sp/>)</highlight></codeline>
<codeline lineno="17669"><highlight class="normal"></highlight></codeline>
<codeline lineno="17670"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEST(<sp/>&quot;CHECK&quot;</highlight><highlight class="normal">,<sp/>Catch::ResultDisposition::ContinueOnFailure,<sp/>__VA_ARGS__<sp/>)</highlight></codeline>
<codeline lineno="17671"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_FALSE(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEST(<sp/>&quot;CHECK_FALSE&quot;</highlight><highlight class="normal">,<sp/>Catch::ResultDisposition::ContinueOnFailure<sp/>|<sp/>Catch::ResultDisposition::FalseTest,<sp/>__VA_ARGS__<sp/>)</highlight></codeline>
<codeline lineno="17672"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECKED_IF(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_IF(<sp/>&quot;CHECKED_IF&quot;</highlight><highlight class="normal">,<sp/>Catch::ResultDisposition::ContinueOnFailure,<sp/>__VA_ARGS__<sp/>)</highlight></codeline>
<codeline lineno="17673"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECKED_ELSE(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_ELSE(<sp/>&quot;CHECKED_ELSE&quot;</highlight><highlight class="normal">,<sp/>Catch::ResultDisposition::ContinueOnFailure,<sp/>__VA_ARGS__<sp/>)</highlight></codeline>
<codeline lineno="17674"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_NOFAIL(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEST(<sp/>&quot;CHECK_NOFAIL&quot;</highlight><highlight class="normal">,<sp/>Catch::ResultDisposition::ContinueOnFailure<sp/>|<sp/>Catch::ResultDisposition::SuppressFail,<sp/>__VA_ARGS__<sp/>)</highlight></codeline>
<codeline lineno="17675"><highlight class="normal"></highlight></codeline>
<codeline lineno="17676"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_THROWS(<sp/>...<sp/>)<sp/><sp/>INTERNAL_CATCH_THROWS(<sp/>&quot;CHECK_THROWS&quot;</highlight><highlight class="normal">,<sp/>Catch::ResultDisposition::ContinueOnFailure,<sp/>__VA_ARGS__<sp/>)</highlight></codeline>
<codeline lineno="17677"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_THROWS_AS(<sp/>expr,<sp/>exceptionType<sp/>)<sp/>INTERNAL_CATCH_THROWS_AS(<sp/>&quot;CHECK_THROWS_AS&quot;</highlight><highlight class="normal">,<sp/>exceptionType,<sp/>Catch::ResultDisposition::ContinueOnFailure,<sp/>expr<sp/>)</highlight></codeline>
<codeline lineno="17678"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_THROWS_WITH(<sp/>expr,<sp/>matcher<sp/>)<sp/>INTERNAL_CATCH_THROWS_STR_MATCHES(<sp/>&quot;CHECK_THROWS_WITH&quot;</highlight><highlight class="normal">,<sp/>Catch::ResultDisposition::ContinueOnFailure,<sp/>matcher,<sp/>expr<sp/>)</highlight></codeline>
<codeline lineno="17679"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_CONFIG_DISABLE_MATCHERS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17680"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_THROWS_MATCHES(<sp/>expr,<sp/>exceptionType,<sp/>matcher<sp/>)<sp/>INTERNAL_CATCH_THROWS_MATCHES(<sp/>&quot;CHECK_THROWS_MATCHES&quot;</highlight><highlight class="normal">,<sp/>exceptionType,<sp/>Catch::ResultDisposition::ContinueOnFailure,<sp/>matcher,<sp/>expr<sp/>)</highlight></codeline>
<codeline lineno="17681"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_DISABLE_MATCHERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17682"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_NOTHROW(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_NO_THROW(<sp/>&quot;CHECK_NOTHROW&quot;</highlight><highlight class="normal">,<sp/>Catch::ResultDisposition::ContinueOnFailure,<sp/>__VA_ARGS__<sp/>)</highlight></codeline>
<codeline lineno="17683"><highlight class="normal"></highlight></codeline>
<codeline lineno="17684"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_CONFIG_DISABLE_MATCHERS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17685"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_THAT(<sp/>arg,<sp/>matcher<sp/>)<sp/>INTERNAL_CHECK_THAT(<sp/>&quot;CHECK_THAT&quot;</highlight><highlight class="normal">,<sp/>matcher,<sp/>Catch::ResultDisposition::ContinueOnFailure,<sp/>arg<sp/>)</highlight></codeline>
<codeline lineno="17686"><highlight class="normal"></highlight></codeline>
<codeline lineno="17687"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_THAT(<sp/>arg,<sp/>matcher<sp/>)<sp/>INTERNAL_CHECK_THAT(<sp/>&quot;REQUIRE_THAT&quot;</highlight><highlight class="normal">,<sp/>matcher,<sp/>Catch::ResultDisposition::Normal,<sp/>arg<sp/>)</highlight></codeline>
<codeline lineno="17688"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_DISABLE_MATCHERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17689"><highlight class="normal"></highlight></codeline>
<codeline lineno="17690"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INFO(<sp/>msg<sp/>)<sp/>INTERNAL_CATCH_INFO(<sp/>&quot;INFO&quot;</highlight><highlight class="normal">,<sp/>msg<sp/>)</highlight></codeline>
<codeline lineno="17691"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UNSCOPED_INFO(<sp/>msg<sp/>)<sp/>INTERNAL_CATCH_UNSCOPED_INFO(<sp/>&quot;UNSCOPED_INFO&quot;</highlight><highlight class="normal">,<sp/>msg<sp/>)</highlight></codeline>
<codeline lineno="17692"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WARN(<sp/>msg<sp/>)<sp/>INTERNAL_CATCH_MSG(<sp/>&quot;WARN&quot;</highlight><highlight class="normal">,<sp/>Catch::ResultWas::Warning,<sp/>Catch::ResultDisposition::ContinueOnFailure,<sp/>msg<sp/>)</highlight></codeline>
<codeline lineno="17693"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAPTURE(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_CAPTURE(<sp/>INTERNAL_CATCH_UNIQUE_NAME(capturer),<sp/>&quot;CAPTURE&quot;</highlight><highlight class="normal">,__VA_ARGS__<sp/>)</highlight></codeline>
<codeline lineno="17694"><highlight class="normal"></highlight></codeline>
<codeline lineno="17695"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_CASE(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TESTCASE(<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17696"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_CASE_METHOD(<sp/>className,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEST_CASE_METHOD(<sp/>className,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17697"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>METHOD_AS_TEST_CASE(<sp/>method,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_METHOD_AS_TEST_CASE(<sp/>method,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17698"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REGISTER_TEST_CASE(<sp/>Function,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_REGISTER_TESTCASE(<sp/>Function,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17699"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SECTION(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_SECTION(<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17700"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DYNAMIC_SECTION(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_DYNAMIC_SECTION(<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17701"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAIL(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_MSG(<sp/>&quot;FAIL&quot;</highlight><highlight class="normal">,<sp/>Catch::ResultWas::ExplicitFailure,<sp/>Catch::ResultDisposition::Normal,<sp/>__VA_ARGS__<sp/>)</highlight></codeline>
<codeline lineno="17702"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAIL_CHECK(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_MSG(<sp/>&quot;FAIL_CHECK&quot;</highlight><highlight class="normal">,<sp/>Catch::ResultWas::ExplicitFailure,<sp/>Catch::ResultDisposition::ContinueOnFailure,<sp/>__VA_ARGS__<sp/>)</highlight></codeline>
<codeline lineno="17703"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SUCCEED(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_MSG(<sp/>&quot;SUCCEED&quot;</highlight><highlight class="normal">,<sp/>Catch::ResultWas::Ok,<sp/>Catch::ResultDisposition::ContinueOnFailure,<sp/>__VA_ARGS__<sp/>)</highlight></codeline>
<codeline lineno="17704"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ANON_TEST_CASE()<sp/>INTERNAL_CATCH_TESTCASE()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17705"><highlight class="normal"></highlight></codeline>
<codeline lineno="17706"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17707"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMPLATE_TEST_CASE(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE(<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17708"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMPLATE_TEST_CASE_SIG(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG(<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17709"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMPLATE_TEST_CASE_METHOD(<sp/>className,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD(<sp/>className,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17710"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMPLATE_TEST_CASE_METHOD_SIG(<sp/>className,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG(<sp/>className,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17711"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMPLATE_PRODUCT_TEST_CASE(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE(<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17712"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMPLATE_PRODUCT_TEST_CASE_SIG(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG(<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17713"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMPLATE_PRODUCT_TEST_CASE_METHOD(<sp/>className,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD(<sp/>className,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17714"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG(<sp/>className,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG(<sp/>className,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17715"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMPLATE_LIST_TEST_CASE(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17716"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMPLATE_LIST_TEST_CASE_METHOD(<sp/>className,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD(<sp/>className,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17717"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17718"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMPLATE_TEST_CASE(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE(<sp/>__VA_ARGS__<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17719"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMPLATE_TEST_CASE_SIG(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG(<sp/>__VA_ARGS__<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17720"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMPLATE_TEST_CASE_METHOD(<sp/>className,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD(<sp/>className,<sp/>__VA_ARGS__<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17721"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMPLATE_TEST_CASE_METHOD_SIG(<sp/>className,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG(<sp/>className,<sp/>__VA_ARGS__<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17722"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMPLATE_PRODUCT_TEST_CASE(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE(<sp/>__VA_ARGS__<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17723"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMPLATE_PRODUCT_TEST_CASE_SIG(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG(<sp/>__VA_ARGS__<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17724"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMPLATE_PRODUCT_TEST_CASE_METHOD(<sp/>className,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD(<sp/>className,<sp/>__VA_ARGS__<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17725"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG(<sp/>className,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG(<sp/>className,<sp/>__VA_ARGS__<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17726"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMPLATE_LIST_TEST_CASE(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE(<sp/>__VA_ARGS__<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17727"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMPLATE_LIST_TEST_CASE_METHOD(<sp/>className,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD(<sp/>className,<sp/>__VA_ARGS__<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17728"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17729"><highlight class="normal"></highlight></codeline>
<codeline lineno="17730"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_CONFIG_RUNTIME_STATIC_REQUIRE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17731"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STATIC_REQUIRE(<sp/>...<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(<sp/><sp/><sp/>__VA_ARGS__,<sp/><sp/>#__VA_ARGS__<sp/>);<sp/>SUCCEED(<sp/>#__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17732"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STATIC_REQUIRE_FALSE(<sp/>...<sp/>)<sp/>static_assert(<sp/>!(__VA_ARGS__),<sp/>&quot;!(&quot;</highlight><highlight class="normal"><sp/>#__VA_ARGS__<sp/>&quot;)&quot;<sp/>);<sp/>SUCCEED(<sp/>&quot;!(&quot;<sp/>#__VA_ARGS__<sp/>&quot;)&quot;<sp/>)</highlight></codeline>
<codeline lineno="17733"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17734"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STATIC_REQUIRE(<sp/>...<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>REQUIRE(<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17735"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STATIC_REQUIRE_FALSE(<sp/>...<sp/>)<sp/>REQUIRE_FALSE(<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17736"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17737"><highlight class="normal"></highlight></codeline>
<codeline lineno="17738"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17739"><highlight class="normal"></highlight></codeline>
<codeline lineno="17740"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TRANSLATE_EXCEPTION(<sp/>signature<sp/>)<sp/>INTERNAL_CATCH_TRANSLATE_EXCEPTION(<sp/>signature<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17741"><highlight class="normal"></highlight></codeline>
<codeline lineno="17742"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;BDD-style&quot;<sp/>convenience<sp/>wrappers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17743"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCENARIO(<sp/>...<sp/>)<sp/>TEST_CASE(<sp/>&quot;Scenario:<sp/>&quot;</highlight><highlight class="normal"><sp/>__VA_ARGS__<sp/>)</highlight></codeline>
<codeline lineno="17744"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCENARIO_METHOD(<sp/>className,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEST_CASE_METHOD(<sp/>className,<sp/>&quot;Scenario:<sp/>&quot;</highlight><highlight class="normal"><sp/>__VA_ARGS__<sp/>)</highlight></codeline>
<codeline lineno="17745"><highlight class="normal"></highlight></codeline>
<codeline lineno="17746"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GIVEN(<sp/>desc<sp/>)<sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_DYNAMIC_SECTION(<sp/>&quot;<sp/><sp/><sp/><sp/>Given:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>desc<sp/>)</highlight></codeline>
<codeline lineno="17747"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AND_GIVEN(<sp/>desc<sp/>)<sp/>INTERNAL_CATCH_DYNAMIC_SECTION(<sp/>&quot;And<sp/>given:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>desc<sp/>)</highlight></codeline>
<codeline lineno="17748"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WHEN(<sp/>desc<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_DYNAMIC_SECTION(<sp/>&quot;<sp/><sp/><sp/><sp/><sp/>When:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>desc<sp/>)</highlight></codeline>
<codeline lineno="17749"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AND_WHEN(<sp/>desc<sp/>)<sp/><sp/>INTERNAL_CATCH_DYNAMIC_SECTION(<sp/>&quot;<sp/>And<sp/>when:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>desc<sp/>)</highlight></codeline>
<codeline lineno="17750"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>THEN(<sp/>desc<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/>INTERNAL_CATCH_DYNAMIC_SECTION(<sp/>&quot;<sp/><sp/><sp/><sp/><sp/>Then:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>desc<sp/>)</highlight></codeline>
<codeline lineno="17751"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AND_THEN(<sp/>desc<sp/>)<sp/><sp/>INTERNAL_CATCH_DYNAMIC_SECTION(<sp/>&quot;<sp/><sp/><sp/><sp/><sp/><sp/>And:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>desc<sp/>)</highlight></codeline>
<codeline lineno="17752"><highlight class="normal"></highlight></codeline>
<codeline lineno="17753"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CATCH_CONFIG_ENABLE_BENCHMARKING)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17754"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BENCHMARK(...)<sp/>\</highlight></codeline>
<codeline lineno="17755"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>INTERNAL_CATCH_BENCHMARK(INTERNAL_CATCH_UNIQUE_NAME(____C_A_T_C_H____B_E_N_C_H____),<sp/>INTERNAL_CATCH_GET_1_ARG(__VA_ARGS__,,),<sp/>INTERNAL_CATCH_GET_2_ARG(__VA_ARGS__,,))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17756"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BENCHMARK_ADVANCED(name)<sp/>\</highlight></codeline>
<codeline lineno="17757"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>INTERNAL_CATCH_BENCHMARK_ADVANCED(INTERNAL_CATCH_UNIQUE_NAME(____C_A_T_C_H____B_E_N_C_H____),<sp/>name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17758"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_ENABLE_BENCHMARKING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17759"><highlight class="normal"></highlight></codeline>
<codeline lineno="17760"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Catch::Detail::Approx</ref>;</highlight></codeline>
<codeline lineno="17761"><highlight class="normal"></highlight></codeline>
<codeline lineno="17762"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_DISABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17763"><highlight class="normal"></highlight></codeline>
<codeline lineno="17765"><highlight class="comment">//<sp/>If<sp/>this<sp/>config<sp/>identifier<sp/>is<sp/>defined<sp/>then<sp/>all<sp/>CATCH<sp/>macros<sp/>are<sp/>prefixed<sp/>with<sp/>CATCH_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17766"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>CATCH_CONFIG_PREFIX_ALL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17767"><highlight class="normal"></highlight></codeline>
<codeline lineno="17768"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REQUIRE(<sp/>...<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17769"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REQUIRE_FALSE(<sp/>...<sp/>)<sp/><sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17770"><highlight class="normal"></highlight></codeline>
<codeline lineno="17771"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REQUIRE_THROWS(<sp/>...<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17772"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REQUIRE_THROWS_AS(<sp/>expr,<sp/>exceptionType<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17773"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REQUIRE_THROWS_WITH(<sp/>expr,<sp/>matcher<sp/>)<sp/><sp/><sp/><sp/><sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17774"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_CONFIG_DISABLE_MATCHERS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17775"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REQUIRE_THROWS_MATCHES(<sp/>expr,<sp/>exceptionType,<sp/>matcher<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17776"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="comment">//<sp/>CATCH_CONFIG_DISABLE_MATCHERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17777"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REQUIRE_NOTHROW(<sp/>...<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17778"><highlight class="normal"></highlight></codeline>
<codeline lineno="17779"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CHECK(<sp/>...<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17780"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CHECK_FALSE(<sp/>...<sp/>)<sp/><sp/><sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17781"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CHECKED_IF(<sp/>...<sp/>)<sp/><sp/><sp/><sp/>if<sp/>(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17782"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CHECKED_ELSE(<sp/>...<sp/>)<sp/><sp/>if<sp/>(!(__VA_ARGS__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17783"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CHECK_NOFAIL(<sp/>...<sp/>)<sp/><sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17784"><highlight class="normal"></highlight></codeline>
<codeline lineno="17785"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CHECK_THROWS(<sp/>...<sp/>)<sp/><sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17786"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CHECK_THROWS_AS(<sp/>expr,<sp/>exceptionType<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17787"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CHECK_THROWS_WITH(<sp/>expr,<sp/>matcher<sp/>)<sp/><sp/><sp/><sp/><sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17788"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_CONFIG_DISABLE_MATCHERS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17789"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CHECK_THROWS_MATCHES(<sp/>expr,<sp/>exceptionType,<sp/>matcher<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17790"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_DISABLE_MATCHERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17791"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CHECK_NOTHROW(<sp/>...<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17792"><highlight class="normal"></highlight></codeline>
<codeline lineno="17793"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_CONFIG_DISABLE_MATCHERS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17794"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CHECK_THAT(<sp/>arg,<sp/>matcher<sp/>)<sp/><sp/><sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17795"><highlight class="normal"></highlight></codeline>
<codeline lineno="17796"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REQUIRE_THAT(<sp/>arg,<sp/>matcher<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17797"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_DISABLE_MATCHERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17798"><highlight class="normal"></highlight></codeline>
<codeline lineno="17799"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_INFO(<sp/>msg<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17800"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_UNSCOPED_INFO(<sp/>msg<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17801"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_WARN(<sp/>msg<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17802"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_CAPTURE(<sp/>msg<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17803"><highlight class="normal"></highlight></codeline>
<codeline lineno="17804"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEST_CASE(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_S_T____<sp/>))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17805"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEST_CASE_METHOD(<sp/>className,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_S_T____<sp/>))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17806"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_METHOD_AS_TEST_CASE(<sp/>method,<sp/>...<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17807"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_REGISTER_TEST_CASE(<sp/>Function,<sp/>...<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17808"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_SECTION(<sp/>...<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17809"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_DYNAMIC_SECTION(<sp/>...<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17810"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_FAIL(<sp/>...<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17811"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_FAIL_CHECK(<sp/>...<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17812"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_SUCCEED(<sp/>...<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17813"><highlight class="normal"></highlight></codeline>
<codeline lineno="17814"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_ANON_TEST_CASE()<sp/>INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_S_T____<sp/>))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17815"><highlight class="normal"></highlight></codeline>
<codeline lineno="17816"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17817"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEMPLATE_TEST_CASE(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17818"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEMPLATE_TEST_CASE_SIG(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG_NO_REGISTRATION(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17819"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEMPLATE_TEST_CASE_METHOD(<sp/>className,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION(className,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17820"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEMPLATE_TEST_CASE_METHOD_SIG(<sp/>className,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG_NO_REGISTRATION(className,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17821"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEMPLATE_PRODUCT_TEST_CASE(<sp/>...<sp/>)<sp/>CATCH_TEMPLATE_TEST_CASE(<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17822"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG(<sp/>...<sp/>)<sp/>CATCH_TEMPLATE_TEST_CASE(<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17823"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD(<sp/>className,<sp/>...<sp/>)<sp/>CATCH_TEMPLATE_TEST_CASE_METHOD(<sp/>className,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17824"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG(<sp/>className,<sp/>...<sp/>)<sp/>CATCH_TEMPLATE_TEST_CASE_METHOD(<sp/>className,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17825"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17826"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEMPLATE_TEST_CASE(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION(__VA_ARGS__)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17827"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEMPLATE_TEST_CASE_SIG(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG_NO_REGISTRATION(__VA_ARGS__)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17828"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEMPLATE_TEST_CASE_METHOD(<sp/>className,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION(className,<sp/>__VA_ARGS__<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17829"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEMPLATE_TEST_CASE_METHOD_SIG(<sp/>className,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG_NO_REGISTRATION(className,<sp/>__VA_ARGS__<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17830"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEMPLATE_PRODUCT_TEST_CASE(<sp/>...<sp/>)<sp/>CATCH_TEMPLATE_TEST_CASE(<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17831"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG(<sp/>...<sp/>)<sp/>CATCH_TEMPLATE_TEST_CASE(<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17832"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD(<sp/>className,<sp/>...<sp/>)<sp/>CATCH_TEMPLATE_TEST_CASE_METHOD(<sp/>className,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17833"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG(<sp/>className,<sp/>...<sp/>)<sp/>CATCH_TEMPLATE_TEST_CASE_METHOD(<sp/>className,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17834"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17835"><highlight class="normal"></highlight></codeline>
<codeline lineno="17836"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;BDD-style&quot;<sp/>convenience<sp/>wrappers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17837"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_SCENARIO(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_S_T____<sp/>))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17838"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_SCENARIO_METHOD(<sp/>className,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TESTCASE_METHOD_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_S_T____<sp/>),<sp/>className<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17839"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_GIVEN(<sp/>desc<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17840"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_AND_GIVEN(<sp/>desc<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17841"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_WHEN(<sp/>desc<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17842"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_AND_WHEN(<sp/>desc<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17843"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_THEN(<sp/>desc<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17844"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_AND_THEN(<sp/>desc<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17845"><highlight class="normal"></highlight></codeline>
<codeline lineno="17846"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_STATIC_REQUIRE(<sp/>...<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17847"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_STATIC_REQUIRE_FALSE(<sp/>...<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17848"><highlight class="normal"></highlight></codeline>
<codeline lineno="17849"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>CATCH_CONFIG_PREFIX_ALL<sp/>is<sp/>not<sp/>defined<sp/>then<sp/>the<sp/>CATCH_<sp/>prefix<sp/>is<sp/>not<sp/>required</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17850"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17851"><highlight class="normal"></highlight></codeline>
<codeline lineno="17852"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE(<sp/>...<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17853"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_FALSE(<sp/>...<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17854"><highlight class="normal"></highlight></codeline>
<codeline lineno="17855"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_THROWS(<sp/>...<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17856"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_THROWS_AS(<sp/>expr,<sp/>exceptionType<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17857"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_THROWS_WITH(<sp/>expr,<sp/>matcher<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17858"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_CONFIG_DISABLE_MATCHERS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17859"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_THROWS_MATCHES(<sp/>expr,<sp/>exceptionType,<sp/>matcher<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17860"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_DISABLE_MATCHERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17861"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_NOTHROW(<sp/>...<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17862"><highlight class="normal"></highlight></codeline>
<codeline lineno="17863"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK(<sp/>...<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17864"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_FALSE(<sp/>...<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17865"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECKED_IF(<sp/>...<sp/>)<sp/>if<sp/>(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17866"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECKED_ELSE(<sp/>...<sp/>)<sp/>if<sp/>(!(__VA_ARGS__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17867"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_NOFAIL(<sp/>...<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17868"><highlight class="normal"></highlight></codeline>
<codeline lineno="17869"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_THROWS(<sp/>...<sp/>)<sp/><sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17870"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_THROWS_AS(<sp/>expr,<sp/>exceptionType<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17871"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_THROWS_WITH(<sp/>expr,<sp/>matcher<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17872"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_CONFIG_DISABLE_MATCHERS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17873"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_THROWS_MATCHES(<sp/>expr,<sp/>exceptionType,<sp/>matcher<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17874"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_DISABLE_MATCHERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17875"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_NOTHROW(<sp/>...<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17876"><highlight class="normal"></highlight></codeline>
<codeline lineno="17877"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(CATCH_CONFIG_DISABLE_MATCHERS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17878"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_THAT(<sp/>arg,<sp/>matcher<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17879"><highlight class="normal"></highlight></codeline>
<codeline lineno="17880"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REQUIRE_THAT(<sp/>arg,<sp/>matcher<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17881"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CATCH_CONFIG_DISABLE_MATCHERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17882"><highlight class="normal"></highlight></codeline>
<codeline lineno="17883"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INFO(<sp/>msg<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17884"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UNSCOPED_INFO(<sp/>msg<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17885"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WARN(<sp/>msg<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17886"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAPTURE(<sp/>msg<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17887"><highlight class="normal"></highlight></codeline>
<codeline lineno="17888"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_CASE(<sp/>...<sp/>)<sp/><sp/>INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_S_T____<sp/>))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17889"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_CASE_METHOD(<sp/>className,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_S_T____<sp/>))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17890"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>METHOD_AS_TEST_CASE(<sp/>method,<sp/>...<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17891"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>REGISTER_TEST_CASE(<sp/>Function,<sp/>...<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17892"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SECTION(<sp/>...<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17893"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DYNAMIC_SECTION(<sp/>...<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17894"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAIL(<sp/>...<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17895"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAIL_CHECK(<sp/>...<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17896"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SUCCEED(<sp/>...<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17897"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ANON_TEST_CASE()<sp/>INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_S_T____<sp/>))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17898"><highlight class="normal"></highlight></codeline>
<codeline lineno="17899"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17900"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMPLATE_TEST_CASE(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17901"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMPLATE_TEST_CASE_SIG(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG_NO_REGISTRATION(__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17902"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMPLATE_TEST_CASE_METHOD(<sp/>className,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION(className,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17903"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMPLATE_TEST_CASE_METHOD_SIG(<sp/>className,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG_NO_REGISTRATION(className,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17904"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMPLATE_PRODUCT_TEST_CASE(<sp/>...<sp/>)<sp/>TEMPLATE_TEST_CASE(<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17905"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMPLATE_PRODUCT_TEST_CASE_SIG(<sp/>...<sp/>)<sp/>TEMPLATE_TEST_CASE(<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17906"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMPLATE_PRODUCT_TEST_CASE_METHOD(<sp/>className,<sp/>...<sp/>)<sp/>TEMPLATE_TEST_CASE_METHOD(<sp/>className,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17907"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG(<sp/>className,<sp/>...<sp/>)<sp/>TEMPLATE_TEST_CASE_METHOD(<sp/>className,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17908"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17909"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMPLATE_TEST_CASE(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION(__VA_ARGS__)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17910"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMPLATE_TEST_CASE_SIG(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG_NO_REGISTRATION(__VA_ARGS__)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17911"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMPLATE_TEST_CASE_METHOD(<sp/>className,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION(className,<sp/>__VA_ARGS__<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17912"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMPLATE_TEST_CASE_METHOD_SIG(<sp/>className,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_EXPAND_VARGS(<sp/>INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG_NO_REGISTRATION(className,<sp/>__VA_ARGS__<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17913"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMPLATE_PRODUCT_TEST_CASE(<sp/>...<sp/>)<sp/>TEMPLATE_TEST_CASE(<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17914"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMPLATE_PRODUCT_TEST_CASE_SIG(<sp/>...<sp/>)<sp/>TEMPLATE_TEST_CASE(<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17915"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMPLATE_PRODUCT_TEST_CASE_METHOD(<sp/>className,<sp/>...<sp/>)<sp/>TEMPLATE_TEST_CASE_METHOD(<sp/>className,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17916"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG(<sp/>className,<sp/>...<sp/>)<sp/>TEMPLATE_TEST_CASE_METHOD(<sp/>className,<sp/>__VA_ARGS__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17917"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17918"><highlight class="normal"></highlight></codeline>
<codeline lineno="17919"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STATIC_REQUIRE(<sp/>...<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17920"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STATIC_REQUIRE_FALSE(<sp/>...<sp/>)<sp/>(void)(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17921"><highlight class="normal"></highlight></codeline>
<codeline lineno="17922"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17923"><highlight class="normal"></highlight></codeline>
<codeline lineno="17924"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CATCH_TRANSLATE_EXCEPTION(<sp/>signature<sp/>)<sp/>INTERNAL_CATCH_TRANSLATE_EXCEPTION_NO_REG(<sp/>INTERNAL_CATCH_UNIQUE_NAME(<sp/>catch_internal_ExceptionTranslator<sp/>),<sp/>signature<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17925"><highlight class="normal"></highlight></codeline>
<codeline lineno="17926"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;BDD-style&quot;<sp/>convenience<sp/>wrappers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17927"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCENARIO(<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_S_T____<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17928"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCENARIO_METHOD(<sp/>className,<sp/>...<sp/>)<sp/>INTERNAL_CATCH_TESTCASE_METHOD_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME(<sp/>____C_A_T_C_H____T_E_S_T____<sp/>),<sp/>className<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17929"><highlight class="normal"></highlight></codeline>
<codeline lineno="17930"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GIVEN(<sp/>desc<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17931"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AND_GIVEN(<sp/>desc<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17932"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WHEN(<sp/>desc<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17933"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AND_WHEN(<sp/>desc<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17934"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>THEN(<sp/>desc<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17935"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AND_THEN(<sp/>desc<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17936"><highlight class="normal"></highlight></codeline>
<codeline lineno="17937"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="class_catch_1_1_detail_1_1_approx" kindref="compound">Catch::Detail::Approx</ref>;</highlight></codeline>
<codeline lineno="17938"><highlight class="normal"></highlight></codeline>
<codeline lineno="17939"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17940"><highlight class="normal"></highlight></codeline>
<codeline lineno="17941"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>!<sp/>CATCH_CONFIG_IMPL_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17942"><highlight class="normal"></highlight></codeline>
<codeline lineno="17943"><highlight class="normal"></highlight><highlight class="comment">//<sp/>start<sp/>catch_reenable_warnings.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17944"><highlight class="normal"></highlight></codeline>
<codeline lineno="17945"><highlight class="normal"></highlight></codeline>
<codeline lineno="17946"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17947"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>ifdef<sp/>__ICC<sp/></highlight><highlight class="comment">//<sp/>icpc<sp/>defines<sp/>the<sp/>__clang__<sp/>macro</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17948"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pragma<sp/>warning(pop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17949"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17950"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pragma<sp/>clang<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17951"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17952"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17953"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17954"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17955"><highlight class="normal"></highlight></codeline>
<codeline lineno="17956"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch_reenable_warnings.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17957"><highlight class="normal"></highlight><highlight class="comment">//<sp/>end<sp/>catch.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17958"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17959"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/catch.hpp"/>
  </compounddef>
</doxygen>
