<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="test__misc_8cpp" kind="file" language="C++">
    <compoundname>test_misc.cpp</compoundname>
    <includes refid="includes_8h" local="yes">includes.h</includes>
    <includes refid="test__sink_8h" local="yes">test_sink.h</includes>
    <includes refid="bin__to__hex_8h" local="yes">spdlog/fmt/bin_to_hex.h</includes>
    <incdepgraph>
      <node id="52">
        <label>spdlog/async.h</label>
        <link refid="async_8h_source"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>spdlog/async_logger.h</label>
        <link refid="async__logger_8h_source"/>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>common-inl.h</label>
        <link refid="common-inl_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>spdlog/common.h</label>
        <link refid="spdlog_2include_2spdlog_2common_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>spdlog/details/backtracer.h</label>
        <link refid="backtracer_8h_source"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>spdlog/details/circular_q.h</label>
        <link refid="circular__q_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>spdlog/details/console_globals.h</label>
        <link refid="console__globals_8h_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>spdlog/details/file_helper.h</label>
        <link refid="file__helper_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>spdlog/details/log_msg.h</label>
        <link refid="log__msg_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>spdlog/details/log_msg_buffer.h</label>
        <link refid="log__msg__buffer_8h_source"/>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>spdlog/details/mpmc_blocking_q.h</label>
        <link refid="mpmc__blocking__q_8h_source"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>spdlog/details/null_mutex.h</label>
        <link refid="null__mutex_8h_source"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>spdlog/details/os.h</label>
        <link refid="details_2os_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>spdlog/details/registry.h</label>
        <link refid="registry_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>spdlog/details/synchronous_factory.h</label>
        <link refid="synchronous__factory_8h_source"/>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>spdlog/details/thread_pool.h</label>
        <link refid="thread__pool_8h_source"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>spdlog/fmt/bin_to_hex.h</label>
        <link refid="bin__to__hex_8h_source"/>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>spdlog/fmt/bundled/chrono.h</label>
        <link refid="bundled_2chrono_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>spdlog/fmt/bundled/core.h</label>
        <link refid="core_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>spdlog/fmt/bundled/format.h</label>
        <link refid="format_8h_source"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>spdlog/fmt/chrono.h</label>
        <link refid="chrono_8h_source"/>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>spdlog/fmt/fmt.h</label>
        <link refid="fmt_8h_source"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>spdlog/formatter.h</label>
        <link refid="formatter_8h_source"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>spdlog/logger.h</label>
        <link refid="3rdparty_2spdlog_2include_2spdlog_2logger_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>spdlog/pattern_formatter.h</label>
        <link refid="pattern__formatter_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>spdlog/sinks/ansicolor_sink.h</label>
        <link refid="ansicolor__sink_8h_source"/>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>spdlog/sinks/base_sink.h</label>
        <link refid="base__sink_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>spdlog/sinks/basic_file_sink.h</label>
        <link refid="basic__file__sink_8h_source"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>spdlog/sinks/daily_file_sink.h</label>
        <link refid="daily__file__sink_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>spdlog/sinks/null_sink.h</label>
        <link refid="null__sink_8h_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>spdlog/sinks/ostream_sink.h</label>
        <link refid="ostream__sink_8h_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>spdlog/sinks/rotating_file_sink.h</label>
        <link refid="rotating__file__sink_8h_source"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>spdlog/sinks/sink.h</label>
        <link refid="sink_8h_source"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>spdlog/sinks/stdout_color_sinks.h</label>
        <link refid="stdout__color__sinks_8h_source"/>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>spdlog/spdlog.h</label>
        <link refid="spdlog_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>spdlog/tweakme.h</label>
        <link refid="tweakme_8h_source"/>
      </node>
      <node id="50">
        <label>spdlog/version.h</label>
        <link refid="version_8h_source"/>
      </node>
      <node id="3">
        <label>catch.hpp</label>
        <link refid="catch_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>includes.h</label>
        <link refid="includes_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_misc.cpp</label>
        <link refid="test__misc_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>test_sink.h</label>
        <link refid="test__sink_8h_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>utils.h</label>
        <link refid="3rdparty_2spdlog_2tests_2utils_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>algorithm</label>
      </node>
      <node id="76">
        <label>array</label>
      </node>
      <node id="30">
        <label>atomic</label>
      </node>
      <node id="9">
        <label>cassert</label>
      </node>
      <node id="80">
        <label>cctype</label>
      </node>
      <node id="12">
        <label>chrono</label>
      </node>
      <node id="38">
        <label>cmath</label>
      </node>
      <node id="56">
        <label>condition_variable</label>
      </node>
      <node id="8">
        <label>cstddef</label>
      </node>
      <node id="6">
        <label>cstdint</label>
      </node>
      <node id="20">
        <label>cstdio</label>
      </node>
      <node id="34">
        <label>cstring</label>
      </node>
      <node id="58">
        <label>ctime</label>
      </node>
      <node id="14">
        <label>exception</label>
      </node>
      <node id="21">
        <label>fstream</label>
      </node>
      <node id="15">
        <label>functional</label>
      </node>
      <node id="31">
        <label>initializer_list</label>
      </node>
      <node id="24">
        <label>iomanip</label>
      </node>
      <node id="4">
        <label>iosfwd</label>
      </node>
      <node id="22">
        <label>iostream</label>
      </node>
      <node id="35">
        <label>iterator</label>
      </node>
      <node id="36">
        <label>limits</label>
      </node>
      <node id="69">
        <label>locale</label>
      </node>
      <node id="13">
        <label>memory</label>
      </node>
      <node id="44">
        <label>mutex</label>
      </node>
      <node id="11">
        <label>ostream</label>
      </node>
      <node id="18">
        <label>random</label>
      </node>
      <node id="23">
        <label>sstream</label>
      </node>
      <node id="39">
        <label>stdexcept</label>
      </node>
      <node id="25">
        <label>stdlib.h</label>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="40">
        <label>system_error</label>
      </node>
      <node id="59">
        <label>thread</label>
      </node>
      <node id="62">
        <label>tuple</label>
      </node>
      <node id="10">
        <label>type_traits</label>
      </node>
      <node id="43">
        <label>unordered_map</label>
      </node>
      <node id="17">
        <label>utility</label>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="test__misc_8cpp_1a998723f3e553cb6f51f5b437b7afd57f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string log_info</definition>
        <argsstring>(const T &amp;what, spdlog::level::level_enum logger_level=spdlog::level::info)</argsstring>
        <name>log_info</name>
        <param>
          <type>const T &amp;</type>
          <declname>what</declname>
        </param>
        <param>
          <type>spdlog::level::level_enum</type>
          <declname>logger_level</declname>
          <defval>spdlog::level::info</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_misc.cpp" line="6" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_misc.cpp" bodystart="6" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="test__misc_8cpp_1a0255f9b1ed5ec1bbe9c0c57077cdd5ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;basic_logging &quot;, &quot;[basic_logging]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;basic_logging &quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[basic_logging]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_misc.cpp" line="20" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_misc.cpp" bodystart="20" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="test__misc_8cpp_1a72ac7f20d2e438a64785f04818ff6d79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;log_levels&quot;, &quot;[log_levels]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;log_levels&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[log_levels]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_misc.cpp" line="38" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_misc.cpp" bodystart="38" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="test__misc_8cpp_1a083efe22074bf4ec1fc6e2747ec9cd9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;level_to_string_view&quot;, &quot;[convert_to_string_view&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;level_to_string_view&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_misc.cpp" line="47" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_misc.cpp" bodystart="47" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="test__misc_8cpp_1aad3b21d9076adb7399abc71fcc43f498" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;to_short_c_str&quot;, &quot;[convert_to_short_c_str]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;to_short_c_str&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[convert_to_short_c_str]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_misc.cpp" line="58" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_misc.cpp" bodystart="58" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="test__misc_8cpp_1a03e3978bca545bd48b210eb69a4cd4c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;to_level_enum&quot;, &quot;[convert_to_level_enum]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;to_level_enum&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[convert_to_level_enum]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_misc.cpp" line="69" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_misc.cpp" bodystart="69" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="test__misc_8cpp_1afb9c8bfc8db95de82cf91d886f483c76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;periodic flush&quot;, &quot;[periodic_flush]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;periodic flush&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[periodic_flush]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_misc.cpp" line="82" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_misc.cpp" bodystart="82" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="test__misc_8cpp_1a9c6d1f379829454f472560b3759cefc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;clone-logger&quot;, &quot;[clone]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;clone-logger&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[clone]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_misc.cpp" line="95" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_misc.cpp" bodystart="95" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="test__misc_8cpp_1a16b2654d264bde1ffe2914c6587b887b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;clone async&quot;, &quot;[clone]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;clone async&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[clone]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_misc.cpp" line="117" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_misc.cpp" bodystart="117" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="test__misc_8cpp_1a06883e3ffc4fd2eeb60870e41ee4c470" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;to_hex&quot;, &quot;[to_hex]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;to_hex&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[to_hex]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_misc.cpp" line="143" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_misc.cpp" bodystart="143" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="test__misc_8cpp_1ad6bfaf70393e12d28af44f0b7c396247" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;to_hex_upper&quot;, &quot;[to_hex]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;to_hex_upper&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[to_hex]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_misc.cpp" line="156" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_misc.cpp" bodystart="156" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="test__misc_8cpp_1a3027362e3162eaa3058e43a26a2b4123" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;to_hex_no_delimiter&quot;, &quot;[to_hex]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;to_hex_no_delimiter&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[to_hex]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_misc.cpp" line="169" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_misc.cpp" bodystart="169" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="test__misc_8cpp_1a3cf80770f20775719b55c222a922057e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;to_hex_show_ascii&quot;, &quot;[to_hex]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;to_hex_show_ascii&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[to_hex]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_misc.cpp" line="182" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_misc.cpp" bodystart="182" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="test__misc_8cpp_1aafac724dfb11c4fd84a4b8a0d5f03dda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;to_hex_different_size_per_line&quot;, &quot;[to_hex]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;to_hex_different_size_per_line&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[to_hex]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_misc.cpp" line="194" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_misc.cpp" bodystart="194" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="test__misc_8cpp_1aa4587a89c92d4aa69b555f5873189999" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;to_hex_no_ascii&quot;, &quot;[to_hex]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;to_hex_no_ascii&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[to_hex]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_misc.cpp" line="217" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_misc.cpp" bodystart="217" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="test__misc_8cpp_1a7cf0ea9b3e84c6b72aeb0fdeee61cd6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;default logger API&quot;, &quot;[default logger]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;default logger API&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[default logger]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_misc.cpp" line="233" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_misc.cpp" bodystart="233" bodyend="271"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;includes.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;test_sink.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;spdlog/fmt/bin_to_hex.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="6"><highlight class="normal">std::string<sp/>log_info(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;what,<sp/>spdlog::level::level_enum<sp/>logger_level<sp/>=<sp/>spdlog::level::info)</highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>oss;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>oss_sink<sp/>=<sp/>std::make_shared&lt;spdlog::sinks::ostream_sink_mt&gt;(oss);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classspdlog_1_1logger" kindref="compound">spdlog::logger</ref><sp/>oss_logger(</highlight><highlight class="stringliteral">&quot;oss&quot;</highlight><highlight class="normal">,<sp/>oss_sink);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>oss_logger.set_level(logger_level);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>oss_logger.set_pattern(</highlight><highlight class="stringliteral">&quot;%v&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>oss_logger.info(what);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oss.str().substr(0,<sp/>oss.str().length()<sp/>-<sp/>strlen(spdlog::details::os::default_eol));</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;basic_logging<sp/>&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[basic_logging]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="21"><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>const<sp/>char</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_info(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_info(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">).empty());</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_info(std::string(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">))<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_info(std::string()).empty());</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Numbers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_info(5)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_info(5.6)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;5.6&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>User<sp/>defined<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>REQUIRE(log_info(some_logged_class(&quot;some_val&quot;))<sp/>==<sp/>&quot;some_val&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;log_levels&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[log_levels]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_info(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">,<sp/>spdlog::level::err).empty());</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_info(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">,<sp/>spdlog::level::critical).empty());</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_info(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">,<sp/>spdlog::level::info)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_info(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">,<sp/>spdlog::level::debug)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_info(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">,<sp/>spdlog::level::trace)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;level_to_string_view&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[convert_to_string_view&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(spdlog::level::to_string_view(spdlog::level::trace)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;trace&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(spdlog::level::to_string_view(spdlog::level::debug)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;debug&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(spdlog::level::to_string_view(spdlog::level::info)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;info&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(spdlog::level::to_string_view(spdlog::level::warn)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;warning&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(spdlog::level::to_string_view(spdlog::level::err)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(spdlog::level::to_string_view(spdlog::level::critical)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;critical&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(spdlog::level::to_string_view(spdlog::level::off)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;off&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;to_short_c_str&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[convert_to_short_c_str]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(std::string(spdlog::level::to_short_c_str(spdlog::level::trace))<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;T&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(std::string(spdlog::level::to_short_c_str(spdlog::level::debug))<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;D&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(std::string(spdlog::level::to_short_c_str(spdlog::level::info))<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;I&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(std::string(spdlog::level::to_short_c_str(spdlog::level::warn))<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;W&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(std::string(spdlog::level::to_short_c_str(spdlog::level::err))<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;E&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(std::string(spdlog::level::to_short_c_str(spdlog::level::critical))<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(std::string(spdlog::level::to_short_c_str(spdlog::level::off))<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;O&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;to_level_enum&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[convert_to_level_enum]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(spdlog::level::from_str(</highlight><highlight class="stringliteral">&quot;trace&quot;</highlight><highlight class="normal">)<sp/>==<sp/>spdlog::level::trace);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(spdlog::level::from_str(</highlight><highlight class="stringliteral">&quot;debug&quot;</highlight><highlight class="normal">)<sp/>==<sp/>spdlog::level::debug);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(spdlog::level::from_str(</highlight><highlight class="stringliteral">&quot;info&quot;</highlight><highlight class="normal">)<sp/>==<sp/>spdlog::level::info);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(spdlog::level::from_str(</highlight><highlight class="stringliteral">&quot;warning&quot;</highlight><highlight class="normal">)<sp/>==<sp/>spdlog::level::warn);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(spdlog::level::from_str(</highlight><highlight class="stringliteral">&quot;warn&quot;</highlight><highlight class="normal">)<sp/>==<sp/>spdlog::level::warn);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(spdlog::level::from_str(</highlight><highlight class="stringliteral">&quot;error&quot;</highlight><highlight class="normal">)<sp/>==<sp/>spdlog::level::err);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(spdlog::level::from_str(</highlight><highlight class="stringliteral">&quot;critical&quot;</highlight><highlight class="normal">)<sp/>==<sp/>spdlog::level::critical);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(spdlog::level::from_str(</highlight><highlight class="stringliteral">&quot;off&quot;</highlight><highlight class="normal">)<sp/>==<sp/>spdlog::level::off);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(spdlog::level::from_str(</highlight><highlight class="stringliteral">&quot;null&quot;</highlight><highlight class="normal">)<sp/>==<sp/>spdlog::level::off);</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;periodic<sp/>flush&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[periodic_flush]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classspdlog_1_1sinks_1_1test__sink" kindref="compound">spdlog::sinks::test_sink_mt</ref>;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>logger<sp/>=<sp/>spdlog::create&lt;test_sink_mt&gt;(</highlight><highlight class="stringliteral">&quot;periodic_flush&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test_sink<sp/>=<sp/>std::static_pointer_cast&lt;test_sink_mt&gt;(logger-&gt;sinks()[0]);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::flush_every(std::chrono::seconds(1));</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>std::this_thread::sleep_for(std::chrono::milliseconds(1250));</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(test_sink-&gt;flush_counter()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::flush_every(std::chrono::seconds(0));</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::drop_all();</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;clone-logger&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[clone]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="96"><highlight class="normal">{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classspdlog_1_1sinks_1_1test__sink" kindref="compound">spdlog::sinks::test_sink_mt</ref>;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test_sink<sp/>=<sp/>std::make_shared&lt;test_sink_mt&gt;();</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>logger<sp/>=<sp/>std::make_shared&lt;spdlog::logger&gt;(</highlight><highlight class="stringliteral">&quot;orig&quot;</highlight><highlight class="normal">,<sp/>test_sink);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>logger-&gt;set_pattern(</highlight><highlight class="stringliteral">&quot;%v&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cloned<sp/>=<sp/>logger-&gt;clone(</highlight><highlight class="stringliteral">&quot;clone&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(cloned-&gt;name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;clone&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(logger-&gt;sinks()<sp/>==<sp/>cloned-&gt;sinks());</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(logger-&gt;level()<sp/>==<sp/>cloned-&gt;level());</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(logger-&gt;flush_level()<sp/>==<sp/>cloned-&gt;flush_level());</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>logger-&gt;info(</highlight><highlight class="stringliteral">&quot;Some<sp/>message<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>cloned-&gt;info(</highlight><highlight class="stringliteral">&quot;Some<sp/>message<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(test_sink-&gt;lines().size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(test_sink-&gt;lines()[0]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Some<sp/>message<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(test_sink-&gt;lines()[1]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Some<sp/>message<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::drop_all();</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;clone<sp/>async&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[clone]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="118"><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classspdlog_1_1sinks_1_1test__sink" kindref="compound">spdlog::sinks::test_sink_st</ref>;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::init_thread_pool(4,<sp/>1);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test_sink<sp/>=<sp/>std::make_shared&lt;test_sink_st&gt;();</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>logger<sp/>=<sp/>std::make_shared&lt;spdlog::async_logger&gt;(</highlight><highlight class="stringliteral">&quot;orig&quot;</highlight><highlight class="normal">,<sp/>test_sink,<sp/>spdlog::thread_pool());</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>logger-&gt;set_pattern(</highlight><highlight class="stringliteral">&quot;%v&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cloned<sp/>=<sp/>logger-&gt;clone(</highlight><highlight class="stringliteral">&quot;clone&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(cloned-&gt;name()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;clone&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(logger-&gt;sinks()<sp/>==<sp/>cloned-&gt;sinks());</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(logger-&gt;level()<sp/>==<sp/>cloned-&gt;level());</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(logger-&gt;flush_level()<sp/>==<sp/>cloned-&gt;flush_level());</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>logger-&gt;info(</highlight><highlight class="stringliteral">&quot;Some<sp/>message<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>cloned-&gt;info(</highlight><highlight class="stringliteral">&quot;Some<sp/>message<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::details::os::sleep_for_millis(10);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(test_sink-&gt;lines().size()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(test_sink-&gt;lines()[0]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Some<sp/>message<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(test_sink-&gt;lines()[1]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Some<sp/>message<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::drop_all();</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;to_hex&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[to_hex]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="144"><highlight class="normal">{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>oss;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>oss_sink<sp/>=<sp/>std::make_shared&lt;spdlog::sinks::ostream_sink_mt&gt;(oss);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classspdlog_1_1logger" kindref="compound">spdlog::logger</ref><sp/>oss_logger(</highlight><highlight class="stringliteral">&quot;oss&quot;</highlight><highlight class="normal">,<sp/>oss_sink);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>v{9,<sp/>0xa,<sp/>0xb,<sp/>0xc,<sp/>0xff,<sp/>0xff};</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>oss_logger.info(</highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal">,<sp/>spdlog::to_hex(v));</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structoutput" kindref="compound">output</ref><sp/>=<sp/>oss.str();</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(ends_with(<ref refid="structoutput" kindref="compound">output</ref>,<sp/></highlight><highlight class="stringliteral">&quot;0000:<sp/>09<sp/>0a<sp/>0b<sp/>0c<sp/>ff<sp/>ff&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(spdlog::details::os::default_eol)));</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;to_hex_upper&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[to_hex]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>oss;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>oss_sink<sp/>=<sp/>std::make_shared&lt;spdlog::sinks::ostream_sink_mt&gt;(oss);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classspdlog_1_1logger" kindref="compound">spdlog::logger</ref><sp/>oss_logger(</highlight><highlight class="stringliteral">&quot;oss&quot;</highlight><highlight class="normal">,<sp/>oss_sink);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>v{9,<sp/>0xa,<sp/>0xb,<sp/>0xc,<sp/>0xff,<sp/>0xff};</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>oss_logger.info(</highlight><highlight class="stringliteral">&quot;{:X}&quot;</highlight><highlight class="normal">,<sp/>spdlog::to_hex(v));</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structoutput" kindref="compound">output</ref><sp/>=<sp/>oss.str();</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(ends_with(<ref refid="structoutput" kindref="compound">output</ref>,<sp/></highlight><highlight class="stringliteral">&quot;0000:<sp/>09<sp/>0A<sp/>0B<sp/>0C<sp/>FF<sp/>FF&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(spdlog::details::os::default_eol)));</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;to_hex_no_delimiter&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[to_hex]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="170"><highlight class="normal">{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>oss;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>oss_sink<sp/>=<sp/>std::make_shared&lt;spdlog::sinks::ostream_sink_mt&gt;(oss);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classspdlog_1_1logger" kindref="compound">spdlog::logger</ref><sp/>oss_logger(</highlight><highlight class="stringliteral">&quot;oss&quot;</highlight><highlight class="normal">,<sp/>oss_sink);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>v{9,<sp/>0xa,<sp/>0xb,<sp/>0xc,<sp/>0xff,<sp/>0xff};</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>oss_logger.info(</highlight><highlight class="stringliteral">&quot;{:sX}&quot;</highlight><highlight class="normal">,<sp/>spdlog::to_hex(v));</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structoutput" kindref="compound">output</ref><sp/>=<sp/>oss.str();</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(ends_with(<ref refid="structoutput" kindref="compound">output</ref>,<sp/></highlight><highlight class="stringliteral">&quot;0000:<sp/>090A0B0CFFFF&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(spdlog::details::os::default_eol)));</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;to_hex_show_ascii&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[to_hex]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="183"><highlight class="normal">{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>oss;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>oss_sink<sp/>=<sp/>std::make_shared&lt;spdlog::sinks::ostream_sink_mt&gt;(oss);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classspdlog_1_1logger" kindref="compound">spdlog::logger</ref><sp/>oss_logger(</highlight><highlight class="stringliteral">&quot;oss&quot;</highlight><highlight class="normal">,<sp/>oss_sink);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>v{9,<sp/>0xa,<sp/>0xb,<sp/>0x41,<sp/>0xc,<sp/>0x4b,<sp/>0xff,<sp/>0xff};</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>oss_logger.info(</highlight><highlight class="stringliteral">&quot;{:Xsa}&quot;</highlight><highlight class="normal">,<sp/>spdlog::to_hex(v,<sp/>8));</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(ends_with(oss.str(),<sp/></highlight><highlight class="stringliteral">&quot;0000:<sp/>090A0B410C4BFFFF<sp/><sp/>...A.K..&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(spdlog::details::os::default_eol)));</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;to_hex_different_size_per_line&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[to_hex]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="195"><highlight class="normal">{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>oss;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>oss_sink<sp/>=<sp/>std::make_shared&lt;spdlog::sinks::ostream_sink_mt&gt;(oss);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classspdlog_1_1logger" kindref="compound">spdlog::logger</ref><sp/>oss_logger(</highlight><highlight class="stringliteral">&quot;oss&quot;</highlight><highlight class="normal">,<sp/>oss_sink);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>v{9,<sp/>0xa,<sp/>0xb,<sp/>0x41,<sp/>0xc,<sp/>0x4b,<sp/>0xff,<sp/>0xff};</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>oss_logger.info(</highlight><highlight class="stringliteral">&quot;{:Xsa}&quot;</highlight><highlight class="normal">,<sp/>spdlog::to_hex(v,<sp/>10));</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(ends_with(oss.str(),<sp/></highlight><highlight class="stringliteral">&quot;0000:<sp/>090A0B410C4BFFFF<sp/><sp/>...A.K..&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(spdlog::details::os::default_eol)));</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>oss_logger.info(</highlight><highlight class="stringliteral">&quot;{:Xs}&quot;</highlight><highlight class="normal">,<sp/>spdlog::to_hex(v,<sp/>10));</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(ends_with(oss.str(),<sp/></highlight><highlight class="stringliteral">&quot;0000:<sp/>090A0B410C4BFFFF&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(spdlog::details::os::default_eol)));</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>oss_logger.info(</highlight><highlight class="stringliteral">&quot;{:Xsa}&quot;</highlight><highlight class="normal">,<sp/>spdlog::to_hex(v,<sp/>6));</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(ends_with(oss.str(),<sp/></highlight><highlight class="stringliteral">&quot;0000:<sp/>090A0B410C4B<sp/><sp/>...A.K&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(spdlog::details::os::default_eol)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;0006:<sp/>FFFF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>..&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string(spdlog::details::os::default_eol)));</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>oss_logger.info(</highlight><highlight class="stringliteral">&quot;{:Xs}&quot;</highlight><highlight class="normal">,<sp/>spdlog::to_hex(v,<sp/>6));</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(ends_with(oss.str(),<sp/></highlight><highlight class="stringliteral">&quot;0000:<sp/>090A0B410C4B&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(spdlog::details::os::default_eol)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;0006:<sp/>FFFF&quot;</highlight><highlight class="normal"><sp/>+</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string(spdlog::details::os::default_eol)));</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;to_hex_no_ascii&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[to_hex]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="218"><highlight class="normal">{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>oss;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>oss_sink<sp/>=<sp/>std::make_shared&lt;spdlog::sinks::ostream_sink_mt&gt;(oss);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classspdlog_1_1logger" kindref="compound">spdlog::logger</ref><sp/>oss_logger(</highlight><highlight class="stringliteral">&quot;oss&quot;</highlight><highlight class="normal">,<sp/>oss_sink);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>v{9,<sp/>0xa,<sp/>0xb,<sp/>0x41,<sp/>0xc,<sp/>0x4b,<sp/>0xff,<sp/>0xff};</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>oss_logger.info(</highlight><highlight class="stringliteral">&quot;{:Xs}&quot;</highlight><highlight class="normal">,<sp/>spdlog::to_hex(v,<sp/>8));</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(ends_with(oss.str(),<sp/></highlight><highlight class="stringliteral">&quot;0000:<sp/>090A0B410C4BFFFF&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(spdlog::details::os::default_eol)));</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>oss_logger.info(</highlight><highlight class="stringliteral">&quot;{:Xsna}&quot;</highlight><highlight class="normal">,<sp/>spdlog::to_hex(v,<sp/>8));</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(ends_with(oss.str(),<sp/></highlight><highlight class="stringliteral">&quot;090A0B410C4BFFFF&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(spdlog::details::os::default_eol)));</highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;default<sp/>logger<sp/>API&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[default<sp/>logger]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="234"><highlight class="normal">{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>oss;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>oss_sink<sp/>=<sp/>std::make_shared&lt;spdlog::sinks::ostream_sink_mt&gt;(oss);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::set_default_logger(std::make_shared&lt;spdlog::logger&gt;(</highlight><highlight class="stringliteral">&quot;oss&quot;</highlight><highlight class="normal">,<sp/>oss_sink));</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::set_pattern(</highlight><highlight class="stringliteral">&quot;***<sp/>%v&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::default_logger()-&gt;set_level(spdlog::level::trace);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::trace(</highlight><highlight class="stringliteral">&quot;hello<sp/>trace&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(oss.str()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;***<sp/>hello<sp/>trace&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(spdlog::details::os::default_eol));</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>oss.str(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;hello<sp/>debug&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(oss.str()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;***<sp/>hello<sp/>debug&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(spdlog::details::os::default_eol));</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>oss.str(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::info(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(oss.str()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;***<sp/>Hello&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(spdlog::details::os::default_eol));</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>oss.str(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::warn(</highlight><highlight class="stringliteral">&quot;Hello<sp/>again<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>2);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(oss.str()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;***<sp/>Hello<sp/>again<sp/>2&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(spdlog::details::os::default_eol));</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>oss.str(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::error(123);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(oss.str()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;***<sp/>123&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(spdlog::details::os::default_eol));</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>oss.str(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::critical(std::string(</highlight><highlight class="stringliteral">&quot;some<sp/>string&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(oss.str()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;***<sp/>some<sp/>string&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::string(spdlog::details::os::default_eol));</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>oss.str(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::set_level(spdlog::level::info);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::debug(</highlight><highlight class="stringliteral">&quot;should<sp/>not<sp/>be<sp/>logged&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(oss.str().empty());</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::drop_all();</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::set_pattern(</highlight><highlight class="stringliteral">&quot;%v&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_misc.cpp"/>
  </compounddef>
</doxygen>
