<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="resample__test_8cpp" kind="file" language="C++">
    <compoundname>resample_test.cpp</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">assert.h</includes>
    <includes refid="stb__image__resize_8h" local="yes">stb_image_resize.h</includes>
    <includes local="yes">stb_image_write.h</includes>
    <includes refid="stb__image_8h" local="yes">stb_image.h</includes>
    <includes local="no">sys/stat.h</includes>
    <incdepgraph>
      <node id="6">
        <label>stdint.h</label>
        <link refid="stdint_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>stb_image.h</label>
        <link refid="stb__image_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>stb_image_resize.h</label>
        <link refid="stb__image__resize_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp</label>
        <link refid="resample__test_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>assert.h</label>
      </node>
      <node id="7">
        <label>limits.h</label>
      </node>
      <node id="9">
        <label>stb_image_write.h</label>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
      <node id="2">
        <label>stdlib.h</label>
      </node>
      <node id="11">
        <label>sys/stat.h</label>
      </node>
      <node id="8">
        <label>wchar.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="classstbir__context" prot="public">stbir_context</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="resample__test_8cpp_1af08ec37a8c99d747fb60fa15bc28678b" prot="public" static="no">
        <name>_CRT_SECURE_NO_WARNINGS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="1" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="1" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="resample__test_8cpp_1a31da961373dc7eb7f73478307406dae2" prot="public" static="no">
        <name>STBIR_ASSERT</name>
        <param><defname>x</defname></param>
        <initializer>assert(x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="12" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="resample__test_8cpp_1a082cc0bdd847ddbb2b3f8132de6addfb" prot="public" static="no">
        <name>STBIR_MALLOC</name>
        <initializer>stbir_malloc</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="15" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="resample__test_8cpp_1a18140b3149ea63a4643b6df7f45b44e2" prot="public" static="no">
        <name>STBIR_FREE</name>
        <initializer>stbir_free</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="16" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="resample__test_8cpp_1af63e46c766914e3c7a78ed3b3ec6e033" prot="public" static="no">
        <name>STBIR_PROGRESS_REPORT</name>
        <initializer>stbir_progress</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="64" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="resample__test_8cpp_1aa6a7b41350a14f718b619164bc2b8fdf" prot="public" static="no">
        <name>STB_IMAGE_RESIZE_IMPLEMENTATION</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="65" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="resample__test_8cpp_1a24cc5fc010a392e6e332938bf374bd6f" prot="public" static="no">
        <name>STB_IMAGE_RESIZE_STATIC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="66" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="resample__test_8cpp_1aefe397a94e8feddc652f92ef40ce9597" prot="public" static="no">
        <name>STB_IMAGE_WRITE_IMPLEMENTATION</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="69" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="resample__test_8cpp_1a18372412ad2fc3ce1e3240b3cf0efe78" prot="public" static="no">
        <name>STB_IMAGE_IMPLEMENTATION</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="72" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="resample__test_8cpp_1af29eb83166ba9e1148225548471f0a41" prot="public" static="no">
        <name>MT_SIZE</name>
        <initializer>624</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="83" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="resample__test_8cpp_1a6df9b35d6985b758a76fa6a08748c347" prot="public" static="no">
        <name>UMAX32</name>
        <initializer>4294967295U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="840" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="840" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="resample__test_8cpp_1a801492f9d424bc3c3f712dd86d02d94c" prot="public" static="no" mutable="no">
        <type>class <ref refid="classstbir__context" kindref="compound">stbir_context</ref></type>
        <definition>class stbir_context g_context</definition>
        <argsstring></argsstring>
        <name>g_context</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="33" column="11"/>
      </memberdef>
      <memberdef kind="variable" id="resample__test_8cpp_1afa83377c5feb4a53b8536f0a1e4020df" prot="public" static="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t g_aiMT[MT_SIZE]</definition>
        <argsstring>[MT_SIZE]</argsstring>
        <name>g_aiMT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="84" column="15" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="resample__test_8cpp_1a6213e0b32218c2a66a6cba135ac6c7ec" prot="public" static="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t g_iMTI</definition>
        <argsstring></argsstring>
        <name>g_iMTI</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="85" column="15" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="resample__test_8cpp_1ad9408613298ca193a442a94a23dc814e" prot="public" static="yes" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int image88_int[8][8]</definition>
        <argsstring>[8][8]</argsstring>
        <name>image88_int</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="628" column="22" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="628" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="resample__test_8cpp_1a874363e627333499b336e507917c9307" prot="public" static="yes" mutable="no">
        <type>unsigned char</type>
        <definition>unsigned char image88[8][8]</definition>
        <argsstring>[8][8]</argsstring>
        <name>image88</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="629" column="22" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="629" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="resample__test_8cpp_1a24ad907001a674ce60288772837f46f9" prot="public" static="yes" mutable="no">
        <type>unsigned char</type>
        <definition>unsigned char output88[8][8]</definition>
        <argsstring>[8][8]</argsstring>
        <name>output88</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="630" column="22" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="630" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="resample__test_8cpp_1a4adc013089d4b1ac5efa4ed2c76a3a3f" prot="public" static="yes" mutable="no">
        <type>unsigned char</type>
        <definition>unsigned char output44[4][4]</definition>
        <argsstring>[4][4]</argsstring>
        <name>output44</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="631" column="22" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="631" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="resample__test_8cpp_1ab26097a54b206e0280a3655c80137c24" prot="public" static="yes" mutable="no">
        <type>unsigned char</type>
        <definition>unsigned char output22[2][2]</definition>
        <argsstring>[2][2]</argsstring>
        <name>output22</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="632" column="22" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="632" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="resample__test_8cpp_1a6d35dc913aba4900cd6284300e85eb86" prot="public" static="yes" mutable="no">
        <type>unsigned char</type>
        <definition>unsigned char output11[1][1]</definition>
        <argsstring>[1][1]</argsstring>
        <name>output11</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="633" column="22" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="633" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="resample__test_8cpp_1a5f6cc50553f5f8de7358e094df4c5c6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * stbir_malloc</definition>
        <argsstring>(size_t size, void *context)</argsstring>
        <name>stbir_malloc</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="35" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="35" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="resample__test_8cpp_1afeac423c7b4c11801abc612770505cd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stbir_free</definition>
        <argsstring>(void *memory, void *context)</argsstring>
        <name>stbir_free</name>
        <param>
          <type>void *</type>
          <declname>memory</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="47" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="47" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="resample__test_8cpp_1ae8c32ff0f866b9029c4f0b24cb75563e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stbir_progress</definition>
        <argsstring>(float p)</argsstring>
        <name>stbir_progress</name>
        <param>
          <type>float</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="54" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="54" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="resample__test_8cpp_1aca9e4ef79d72eace40e9456f812bd737" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mtsrand</definition>
        <argsstring>(size_t iSeed)</argsstring>
        <name>mtsrand</name>
        <param>
          <type>size_t</type>
          <declname>iSeed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="89" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="89" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="resample__test_8cpp_1a784fae2f3e9e335ec0cec248d931b34a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t mtrand</definition>
        <argsstring>()</argsstring>
        <name>mtrand</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="103" column="8" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="103" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="resample__test_8cpp_1a354fcbbc6fbb1fe3e8b10ade8fde4f7e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>float mtfrand</definition>
        <argsstring>()</argsstring>
        <name>mtfrand</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="128" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="128" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="resample__test_8cpp_1abdb8ee4815ea4e595c792278ba8686ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void resizer</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>resizer</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="134" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="134" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="resample__test_8cpp_1a7030e6c3b1204f706b40df2d44136be5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void performance</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>performance</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="151" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="151" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="resample__test_8cpp_1a04c5f8651702513a686098a4c19b2b4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_suite</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>test_suite</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="875" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="875" bodyend="1122" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" declline="180" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="resample__test_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="182" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="182" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="resample__test_8cpp_1a97c3ffc9ac7bfd18a47ad7bb5c2d6c83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void resize_image</definition>
        <argsstring>(const char *filename, float width_percent, float height_percent, stbir_filter filter, stbir_edge edge, stbir_colorspace colorspace, const char *output_filename)</argsstring>
        <name>resize_image</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>float</type>
          <declname>width_percent</declname>
        </param>
        <param>
          <type>float</type>
          <declname>height_percent</declname>
        </param>
        <param>
          <type>stbir_filter</type>
          <declname>filter</declname>
        </param>
        <param>
          <type>stbir_edge</type>
          <declname>edge</declname>
        </param>
        <param>
          <type>stbir_colorspace</type>
          <declname>colorspace</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>output_filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="191" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="191" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="resample__test_8cpp_1a85e8a428856e1452566ad1a2c7d67202" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void convert_image</definition>
        <argsstring>(const F *input, T *output, int length)</argsstring>
        <name>convert_image</name>
        <param>
          <type>const F *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="217" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="217" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="resample__test_8cpp_1a3d114262d49374b0573595a94945c78a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void test_format</definition>
        <argsstring>(const char *file, float width_percent, float height_percent, stbir_datatype type, stbir_colorspace colorspace)</argsstring>
        <name>test_format</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>float</type>
          <declname>width_percent</declname>
        </param>
        <param>
          <type>float</type>
          <declname>height_percent</declname>
        </param>
        <param>
          <type>stbir_datatype</type>
          <declname>type</declname>
        </param>
        <param>
          <type>stbir_colorspace</type>
          <declname>colorspace</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="225" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="225" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="resample__test_8cpp_1a039041a0d52e6f01326175da18baced4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void convert_image_float</definition>
        <argsstring>(const unsigned char *input, float *output, int length)</argsstring>
        <name>convert_image_float</name>
        <param>
          <type>const unsigned char *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="259" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="259" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="resample__test_8cpp_1adb1e2a223224e7e5d26ec3c1890f0d82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void convert_image_float</definition>
        <argsstring>(const float *input, unsigned char *output, int length)</argsstring>
        <name>convert_image_float</name>
        <param>
          <type>const float *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="265" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="265" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="resample__test_8cpp_1a31a40e67dcfba3cd2304539f3edd5ba6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_float</definition>
        <argsstring>(const char *file, float width_percent, float height_percent, stbir_datatype type, stbir_colorspace colorspace)</argsstring>
        <name>test_float</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>float</type>
          <declname>width_percent</declname>
        </param>
        <param>
          <type>float</type>
          <declname>height_percent</declname>
        </param>
        <param>
          <type>stbir_datatype</type>
          <declname>type</declname>
        </param>
        <param>
          <type>stbir_colorspace</type>
          <declname>colorspace</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="271" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="271" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="resample__test_8cpp_1a84b2b3e24e9ca809d79c9795656c3cac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_channels</definition>
        <argsstring>(const char *file, float width_percent, float height_percent, int channels)</argsstring>
        <name>test_channels</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>float</type>
          <declname>width_percent</declname>
        </param>
        <param>
          <type>float</type>
          <declname>height_percent</declname>
        </param>
        <param>
          <type>int</type>
          <declname>channels</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="303" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="303" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="resample__test_8cpp_1a435176355a1a0a00bddec195f4651391" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_subpixel</definition>
        <argsstring>(const char *file, float width_percent, float height_percent, float s1, float t1)</argsstring>
        <name>test_subpixel</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>float</type>
          <declname>width_percent</declname>
        </param>
        <param>
          <type>float</type>
          <declname>height_percent</declname>
        </param>
        <param>
          <type>float</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="339" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="339" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="resample__test_8cpp_1a3323d5e151bd16c85af6e3e2be389c4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_subpixel_region</definition>
        <argsstring>(const char *file, float width_percent, float height_percent, float s0, float t0, float s1, float t1)</argsstring>
        <name>test_subpixel_region</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>float</type>
          <declname>width_percent</declname>
        </param>
        <param>
          <type>float</type>
          <declname>height_percent</declname>
        </param>
        <param>
          <type>float</type>
          <declname>s0</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t0</declname>
        </param>
        <param>
          <type>float</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>t1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="366" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="366" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="resample__test_8cpp_1afcaa4afde54bbcac8576668da34cb136" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_subpixel_command</definition>
        <argsstring>(const char *file, float width_percent, float height_percent, float x_scale, float y_scale, float x_offset, float y_offset)</argsstring>
        <name>test_subpixel_command</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>float</type>
          <declname>width_percent</declname>
        </param>
        <param>
          <type>float</type>
          <declname>height_percent</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x_scale</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y_scale</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x_offset</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y_offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="390" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="390" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="resample__test_8cpp_1a25c2725d5740b3948e76d070b071ca15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int *</type>
        <definition>unsigned int * pixel</definition>
        <argsstring>(unsigned int *buffer, int x, int y, int c, int w, int n)</argsstring>
        <name>pixel</name>
        <param>
          <type>unsigned int *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="414" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="414" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="resample__test_8cpp_1adc0be3bb703ac051f7b6ff34e55aebd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_premul</definition>
        <argsstring>()</argsstring>
        <name>test_premul</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="419" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="419" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="resample__test_8cpp_1a014f65221b3dc609c783b727d1666e1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_subpixel_1</definition>
        <argsstring>()</argsstring>
        <name>test_subpixel_1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="492" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="492" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="resample__test_8cpp_1a27af034493e5b33c6909dda447309dfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_subpixel_2</definition>
        <argsstring>()</argsstring>
        <name>test_subpixel_2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="534" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="534" bodyend="576"/>
      </memberdef>
      <memberdef kind="function" id="resample__test_8cpp_1ad3011f5b2296caf007c18565945d77a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_subpixel_3</definition>
        <argsstring>()</argsstring>
        <name>test_subpixel_3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="579" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="579" bodyend="607"/>
      </memberdef>
      <memberdef kind="function" id="resample__test_8cpp_1af862e97cfe6a47dea82a7861df72d62a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_subpixel_4</definition>
        <argsstring>()</argsstring>
        <name>test_subpixel_4</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="610" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="610" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="resample__test_8cpp_1affadfe40001eb2645c9d7b629457c039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void resample_88</definition>
        <argsstring>(stbir_filter filter)</argsstring>
        <name>resample_88</name>
        <param>
          <type>stbir_filter</type>
          <declname>filter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="635" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="635" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="resample__test_8cpp_1a7562c2a42d3089e465d4716df5fafa8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void verify_box</definition>
        <argsstring>(void)</argsstring>
        <name>verify_box</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="643" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="643" bodyend="663"/>
      </memberdef>
      <memberdef kind="function" id="resample__test_8cpp_1afab2378f329104132ef14fd6b1158c8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void verify_filter_normalized</definition>
        <argsstring>(stbir_filter filter, int output_size, unsigned int value)</argsstring>
        <name>verify_filter_normalized</name>
        <param>
          <type>stbir_filter</type>
          <declname>filter</declname>
        </param>
        <param>
          <type>int</type>
          <declname>output_size</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="665" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="665" bodyend="675"/>
      </memberdef>
      <memberdef kind="function" id="resample__test_8cpp_1ac6863fab20f6197bbbfee377250539fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float round2</definition>
        <argsstring>(float f)</argsstring>
        <name>round2</name>
        <param>
          <type>float</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="677" column="7" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="677" bodyend="680"/>
      </memberdef>
      <memberdef kind="function" id="resample__test_8cpp_1a67013483b2f010ac3713e609afbfa3b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_filters</definition>
        <argsstring>(void)</argsstring>
        <name>test_filters</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="682" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="682" bodyend="838"/>
      </memberdef>
      <memberdef kind="function" id="resample__test_8cpp_1a955be65d474bb57f3f1e52528632fa2e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void write32</definition>
        <argsstring>(const char *filename, stbir_uint32 *output, int w, int h)</argsstring>
        <name>write32</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>stbir_uint32 *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="842" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="842" bodyend="849"/>
      </memberdef>
      <memberdef kind="function" id="resample__test_8cpp_1a4d7a679ee96978064af58a2e14befe08" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void test_32</definition>
        <argsstring>(void)</argsstring>
        <name>test_32</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" line="851" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp" bodystart="851" bodyend="872"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#define<sp/>_CRT_SECURE_NO_WARNINGS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN32)<sp/>&amp;&amp;<sp/>_MSC_VER<sp/>&gt;<sp/>1200</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBIR_ASSERT(x)<sp/>\</highlight></codeline>
<codeline lineno="7"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!(x))<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__debugbreak();<sp/><sp/>\</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBIR_ASSERT(x)<sp/>assert(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBIR_MALLOC<sp/>stbir_malloc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBIR_FREE<sp/>stbir_free</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="classstbir__context" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classstbir__context" kindref="compound">stbir_context</ref><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classstbir__context" kindref="compound">stbir_context</ref>()</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>1000000;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memory<sp/>=<sp/>malloc(size);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classstbir__context" kindref="compound">~stbir_context</ref>()</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(memory);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>memory;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}<sp/>g_context;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>stbir_malloc(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>context)</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!context)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>malloc(size);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classstbir__context" kindref="compound">stbir_context</ref>*<sp/>real_context<sp/>=<sp/>(<ref refid="classstbir__context" kindref="compound">stbir_context</ref>*)context;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&gt;<sp/>real_context-&gt;size)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>real_context-&gt;memory;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbir_free(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>memory,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>context)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!context)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(memory);</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbir_progress(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>p)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;%f\n&quot;,<sp/>p);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>STBIR_ASSERT(p<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>p<sp/>&lt;=<sp/>1);</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBIRDEF<sp/>static<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBIR_PROGRESS_REPORT<sp/>stbir_progress</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_IMAGE_RESIZE_IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_IMAGE_RESIZE_STATIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stb_image_resize.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_IMAGE_WRITE_IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stb_image_write.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_IMAGE_IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stb_image.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/timeb.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;direct.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>mkdir(a,<sp/>b)<sp/>_mkdir(a)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MT_SIZE<sp/>624</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>g_aiMT[MT_SIZE];</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>g_iMTI<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Mersenne<sp/>Twister<sp/>implementation<sp/>from<sp/>Wikipedia.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Avoiding<sp/>use<sp/>of<sp/>the<sp/>system<sp/>rand()<sp/>to<sp/>be<sp/>sure<sp/>that<sp/>our<sp/>tests<sp/>generate<sp/>the<sp/>same<sp/>test<sp/>data<sp/>on<sp/>any<sp/>system.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mtsrand(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>iSeed)</highlight></codeline>
<codeline lineno="90"><highlight class="normal">{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>g_aiMT[0]<sp/>=<sp/>iSeed;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>MT_SIZE;<sp/>i++)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>inner1<sp/>=<sp/>g_aiMT[i<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>inner2<sp/>=<sp/>(g_aiMT[i<sp/>-<sp/>1]<sp/>&gt;&gt;<sp/>30);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>inner<sp/>=<sp/>inner1<sp/>^<sp/>inner2;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_aiMT[i]<sp/>=<sp/>(0x6c078965<sp/>*<sp/>inner)<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>g_iMTI<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mtrand()</highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_iMTI<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>MT_SIZE;<sp/>i++)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>(0x80000000<sp/>&amp;<sp/>(g_aiMT[i]))<sp/>+<sp/>(0x7fffffff<sp/>&amp;<sp/>(g_aiMT[(i<sp/>+<sp/>1)<sp/>%<sp/>MT_SIZE]));</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_aiMT[i]<sp/>=<sp/>g_aiMT[(i<sp/>+<sp/>397)<sp/>%<sp/>MT_SIZE]<sp/>^<sp/>(y<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((y<sp/>%<sp/>2)<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_aiMT[i]<sp/>=<sp/>g_aiMT[i]<sp/>^<sp/>0x9908b0df;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>g_aiMT[g_iMTI];</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>y<sp/>^<sp/>(y<sp/>&gt;&gt;<sp/>11);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>y<sp/>^<sp/>((y<sp/>&lt;&lt;<sp/>7)<sp/>&amp;<sp/>(0x9d2c5680));</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>y<sp/>^<sp/>((y<sp/>&lt;&lt;<sp/>15)<sp/>&amp;<sp/>(0xefc60000));</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>y<sp/>^<sp/>(y<sp/>&gt;&gt;<sp/>18);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>g_iMTI<sp/>=<sp/>(g_iMTI<sp/>+<sp/>1)<sp/>%<sp/>MT_SIZE;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>y;</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mtfrand()</highlight></codeline>
<codeline lineno="129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ninenine<sp/>=<sp/>999999;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)(mtrand()<sp/>%<sp/>ninenine)/ninenine;</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resizer(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)</highlight></codeline>
<codeline lineno="135"><highlight class="normal">{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>input_pixels;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>output_pixels;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/>h;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>out_w,<sp/>out_h;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>input_pixels<sp/>=<sp/>stbi_load(argv[1],<sp/>&amp;w,<sp/>&amp;h,<sp/>&amp;n,<sp/>0);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>out_w<sp/>=<sp/>w*3;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>out_h<sp/>=<sp/>h*3;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>output_pixels<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>malloc(out_w*out_h*n);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//stbir_resize_uint8_srgb(input_pixels,<sp/>w,<sp/>h,<sp/>0,<sp/>output_pixels,<sp/>out_w,<sp/>out_h,<sp/>0,<sp/>n,<sp/>-1,0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_resize_uint8(input_pixels,<sp/>w,<sp/>h,<sp/>0,<sp/>output_pixels,<sp/>out_w,<sp/>out_h,<sp/>0,<sp/>n);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>stbi_write_png(</highlight><highlight class="stringliteral">&quot;output.png&quot;</highlight><highlight class="normal">,<sp/>out_w,<sp/>out_h,<sp/>n,<sp/>output_pixels,<sp/>0);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(0);</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>performance(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)</highlight></codeline>
<codeline lineno="152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>input_pixels;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>output_pixels;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/>h,<sp/>count;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>i;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>out_w,<sp/>out_h,<sp/>srgb=1;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>input_pixels<sp/>=<sp/>stbi_load(argv[1],<sp/>&amp;w,<sp/>&amp;h,<sp/>&amp;n,<sp/>0);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>out_w<sp/>=<sp/>w/4;<sp/>out_h<sp/>=<sp/>h/4;<sp/>count=100;<sp/></highlight><highlight class="comment">//<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#elif<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>out_w<sp/>=<sp/>w*2;<sp/>out_h<sp/>=<sp/>h/4;<sp/>count=20;<sp/></highlight><highlight class="comment">//<sp/>2<sp/><sp/><sp/>//<sp/>note<sp/>this<sp/>is<sp/>structured<sp/>pessimily,<sp/>would<sp/>be<sp/>much<sp/>faster<sp/>to<sp/>downsample<sp/>vertically<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#elif<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>out_w<sp/>=<sp/>w/4;<sp/>out_h<sp/>=<sp/>h*2;<sp/>count=50;<sp/></highlight><highlight class="comment">//<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#elif<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>out_w<sp/>=<sp/>w*3;<sp/>out_h<sp/>=<sp/>h*3;<sp/>count=2;<sp/>srgb=0;<sp/></highlight><highlight class="comment">//<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>out_w<sp/>=<sp/>w*3;<sp/>out_h<sp/>=<sp/>h*3;<sp/>count=2;<sp/></highlight><highlight class="comment">//<sp/>5<sp/><sp/><sp/>//<sp/>this<sp/>is<sp/>dominated<sp/>by<sp/>linear-&gt;sRGB<sp/>conversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>output_pixels<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>malloc(out_w*out_h*n);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>count;<sp/>++i)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srgb)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbir_resize_uint8_srgb(input_pixels,<sp/>w,<sp/>h,<sp/>0,<sp/>output_pixels,<sp/>out_w,<sp/>out_h,<sp/>0,<sp/>n,-1,0);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbir_resize(input_pixels,<sp/>w,<sp/>h,<sp/>0,<sp/>output_pixels,<sp/>out_w,<sp/>out_h,<sp/>0,<sp/>STBIR_TYPE_UINT8,<sp/>n,-1,<sp/>0,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_FILTER_DEFAULT,<sp/>STBIR_FILTER_DEFAULT,<sp/>STBIR_COLORSPACE_LINEAR,<sp/>NULL);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>exit(0);</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_suite(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)</highlight></codeline>
<codeline lineno="183"><highlight class="normal">{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//resizer(argc,<sp/>argv);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//performance(argc,<sp/>argv);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>test_suite(argc,<sp/>argv);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resize_image(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>width_percent,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>height_percent,<sp/>stbir_filter<sp/>filter,<sp/>stbir_edge<sp/>edge,<sp/>stbir_colorspace<sp/>colorspace,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>output_filename)</highlight></codeline>
<codeline lineno="192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/>h,<sp/>n;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>input_data<sp/>=<sp/>stbi_load(filename,<sp/>&amp;w,<sp/>&amp;h,<sp/>&amp;n,<sp/>0);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!input_data)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Input<sp/>image<sp/>could<sp/>not<sp/>be<sp/>loaded\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>out_w<sp/>=<sp/>(int)(w<sp/>*<sp/>width_percent);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>out_h<sp/>=<sp/>(int)(h<sp/>*<sp/>height_percent);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>output_data<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(out_w<sp/>*<sp/>out_h<sp/>*<sp/>n);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_resize(input_data,<sp/>w,<sp/>h,<sp/>0,<sp/>output_data,<sp/>out_w,<sp/>out_h,<sp/>0,<sp/>STBIR_TYPE_UINT8,<sp/>n,<sp/>STBIR_ALPHA_CHANNEL_NONE,<sp/>0,<sp/>edge,<sp/>edge,<sp/>filter,<sp/>filter,<sp/>colorspace,<sp/>&amp;g_context);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>stbi_image_free(input_data);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>stbi_write_png(output_filename,<sp/>out_w,<sp/>out_h,<sp/>n,<sp/>output_data,<sp/>0);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>free(output_data);</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>convert_image(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>F*<sp/>input,<sp/>T*<sp/><ref refid="structoutput" kindref="compound">output</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)</highlight></codeline>
<codeline lineno="218"><highlight class="normal">{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>(<ref refid="group__core__func__exponential_1ga717a43207fffc8b5e8e66cf56ded5ace" kindref="member">pow</ref>(2.0,<sp/>8.0<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T))<sp/>-<sp/>1)<sp/>/<sp/>(<ref refid="group__core__func__exponential_1ga717a43207fffc8b5e8e66cf56ded5ace" kindref="member">pow</ref>(2.0,<sp/>8.0<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(F))<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structoutput" kindref="compound">output</ref>[i]<sp/>=<sp/>(T)(((double)input[i])<sp/>*<sp/>f);</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_format(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>width_percent,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>height_percent,<sp/>stbir_datatype<sp/>type,<sp/>stbir_colorspace<sp/>colorspace)</highlight></codeline>
<codeline lineno="226"><highlight class="normal">{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/>h,<sp/>n;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>input_data<sp/>=<sp/>stbi_load(file,<sp/>&amp;w,<sp/>&amp;h,<sp/>&amp;n,<sp/>0);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input_data<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_w<sp/>=<sp/>(int)(w<sp/>*<sp/>width_percent);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_h<sp/>=<sp/>(int)(h<sp/>*<sp/>height_percent);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/>T_data<sp/>=<sp/>(T*)malloc(w<sp/>*<sp/>h<sp/>*<sp/>n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(T_data,<sp/>0,<sp/>w*h*n*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>convert_image&lt;unsigned<sp/>char,<sp/>T&gt;(input_data,<sp/>T_data,<sp/>w<sp/>*<sp/>h<sp/>*<sp/>n);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/>output_data<sp/>=<sp/>(T*)malloc(new_w<sp/>*<sp/>new_h<sp/>*<sp/>n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_resize(T_data,<sp/>w,<sp/>h,<sp/>0,<sp/>output_data,<sp/>new_w,<sp/>new_h,<sp/>0,<sp/>type,<sp/>n,<sp/>STBIR_ALPHA_CHANNEL_NONE,<sp/>0,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_FILTER_CATMULLROM,<sp/>colorspace,<sp/>&amp;g_context);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>free(T_data);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>stbi_image_free(input_data);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>char_data<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(new_w<sp/>*<sp/>new_h<sp/>*<sp/>n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>convert_image&lt;T,<sp/>unsigned<sp/>char&gt;(output_data,<sp/>char_data,<sp/>new_w<sp/>*<sp/>new_h<sp/>*<sp/>n);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structoutput" kindref="compound">output</ref>[200];</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(<ref refid="structoutput" kindref="compound">output</ref>,<sp/></highlight><highlight class="stringliteral">&quot;test-output/type-%d-%d-%d-%d-%s&quot;</highlight><highlight class="normal">,<sp/>type,<sp/>colorspace,<sp/>new_w,<sp/>new_h,<sp/>file);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>stbi_write_png(<ref refid="structoutput" kindref="compound">output</ref>,<sp/>new_w,<sp/>new_h,<sp/>n,<sp/>char_data,<sp/>0);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>free(char_data);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>free(output_data);</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>convert_image_float(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>input,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/><ref refid="structoutput" kindref="compound">output</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)</highlight></codeline>
<codeline lineno="260"><highlight class="normal">{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structoutput" kindref="compound">output</ref>[i]<sp/>=<sp/>((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)input[i])/255;</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>convert_image_float(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>input,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="structoutput" kindref="compound">output</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)</highlight></codeline>
<codeline lineno="266"><highlight class="normal">{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structoutput" kindref="compound">output</ref>[i]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)(stbir__saturate(input[i])<sp/>*<sp/>255);</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_float(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>width_percent,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>height_percent,<sp/>stbir_datatype<sp/>type,<sp/>stbir_colorspace<sp/>colorspace)</highlight></codeline>
<codeline lineno="272"><highlight class="normal">{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/>h,<sp/>n;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>input_data<sp/>=<sp/>stbi_load(file,<sp/>&amp;w,<sp/>&amp;h,<sp/>&amp;n,<sp/>0);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input_data<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_w<sp/>=<sp/>(int)(w<sp/>*<sp/>width_percent);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_h<sp/>=<sp/>(int)(h<sp/>*<sp/>height_percent);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>T_data<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)malloc(w<sp/>*<sp/>h<sp/>*<sp/>n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>convert_image_float(input_data,<sp/>T_data,<sp/>w<sp/>*<sp/>h<sp/>*<sp/>n);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>output_data<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)malloc(new_w<sp/>*<sp/>new_h<sp/>*<sp/>n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_resize_float_generic(T_data,<sp/>w,<sp/>h,<sp/>0,<sp/>output_data,<sp/>new_w,<sp/>new_h,<sp/>0,<sp/>n,<sp/>STBIR_ALPHA_CHANNEL_NONE,<sp/>0,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_FILTER_CATMULLROM,<sp/>colorspace,<sp/>&amp;g_context);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>free(T_data);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>stbi_image_free(input_data);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>char_data<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(new_w<sp/>*<sp/>new_h<sp/>*<sp/>n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>convert_image_float(output_data,<sp/>char_data,<sp/>new_w<sp/>*<sp/>new_h<sp/>*<sp/>n);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structoutput" kindref="compound">output</ref>[200];</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(<ref refid="structoutput" kindref="compound">output</ref>,<sp/></highlight><highlight class="stringliteral">&quot;test-output/type-%d-%d-%d-%d-%s&quot;</highlight><highlight class="normal">,<sp/>type,<sp/>colorspace,<sp/>new_w,<sp/>new_h,<sp/>file);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>stbi_write_png(<ref refid="structoutput" kindref="compound">output</ref>,<sp/>new_w,<sp/>new_h,<sp/>n,<sp/>char_data,<sp/>0);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>free(char_data);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>free(output_data);</highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_channels(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>width_percent,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>height_percent,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channels)</highlight></codeline>
<codeline lineno="304"><highlight class="normal">{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/>h,<sp/>n;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>input_data<sp/>=<sp/>stbi_load(file,<sp/>&amp;w,<sp/>&amp;h,<sp/>&amp;n,<sp/>0);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input_data<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_w<sp/>=<sp/>(int)(w<sp/>*<sp/>width_percent);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_h<sp/>=<sp/>(int)(h<sp/>*<sp/>height_percent);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>channels_data<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(w<sp/>*<sp/>h<sp/>*<sp/>channels<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>w<sp/>*<sp/>h;<sp/>i++)</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>input_position<sp/>=<sp/>i<sp/>*<sp/>n;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>output_position<sp/>=<sp/>i<sp/>*<sp/>channels;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>channels;<sp/>c++)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channels_data[output_position<sp/>+<sp/>c]<sp/>=<sp/>input_data[input_position<sp/>+<sp/>stbir__min(c,<sp/>n)];</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>output_data<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(new_w<sp/>*<sp/>new_h<sp/>*<sp/>channels<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_resize_uint8_srgb(channels_data,<sp/>w,<sp/>h,<sp/>0,<sp/>output_data,<sp/>new_w,<sp/>new_h,<sp/>0,<sp/>channels,<sp/>STBIR_ALPHA_CHANNEL_NONE,<sp/>0);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>free(channels_data);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>stbi_image_free(input_data);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structoutput" kindref="compound">output</ref>[200];</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(<ref refid="structoutput" kindref="compound">output</ref>,<sp/></highlight><highlight class="stringliteral">&quot;test-output/channels-%d-%d-%d-%s&quot;</highlight><highlight class="normal">,<sp/>channels,<sp/>new_w,<sp/>new_h,<sp/>file);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>stbi_write_png(<ref refid="structoutput" kindref="compound">output</ref>,<sp/>new_w,<sp/>new_h,<sp/>channels,<sp/>output_data,<sp/>0);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>free(output_data);</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_subpixel(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>width_percent,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>height_percent,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t1)</highlight></codeline>
<codeline lineno="340"><highlight class="normal">{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/>h,<sp/>n;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>input_data<sp/>=<sp/>stbi_load(file,<sp/>&amp;w,<sp/>&amp;h,<sp/>&amp;n,<sp/>0);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input_data<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>s1<sp/>=<sp/>((float)w<sp/>-<sp/>1<sp/>+<sp/>s1)/w;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>t1<sp/>=<sp/>((float)h<sp/>-<sp/>1<sp/>+<sp/>t1)/h;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_w<sp/>=<sp/>(int)(w<sp/>*<sp/>width_percent);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_h<sp/>=<sp/>(int)(h<sp/>*<sp/>height_percent);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>output_data<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(new_w<sp/>*<sp/>new_h<sp/>*<sp/>n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_resize_region(input_data,<sp/>w,<sp/>h,<sp/>0,<sp/>output_data,<sp/>new_w,<sp/>new_h,<sp/>0,<sp/>STBIR_TYPE_UINT8,<sp/>n,<sp/>STBIR_ALPHA_CHANNEL_NONE,<sp/>0,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_FILTER_BOX,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_COLORSPACE_SRGB,<sp/>&amp;g_context,<sp/>0,<sp/>0,<sp/>s1,<sp/>t1);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>stbi_image_free(input_data);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structoutput" kindref="compound">output</ref>[200];</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(<ref refid="structoutput" kindref="compound">output</ref>,<sp/></highlight><highlight class="stringliteral">&quot;test-output/subpixel-%d-%d-%f-%f-%s&quot;</highlight><highlight class="normal">,<sp/>new_w,<sp/>new_h,<sp/>s1,<sp/>t1,<sp/>file);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>stbi_write_png(<ref refid="structoutput" kindref="compound">output</ref>,<sp/>new_w,<sp/>new_h,<sp/>n,<sp/>output_data,<sp/>0);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>free(output_data);</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_subpixel_region(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>width_percent,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>height_percent,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s0,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t0,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t1)</highlight></codeline>
<codeline lineno="367"><highlight class="normal">{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/>h,<sp/>n;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>input_data<sp/>=<sp/>stbi_load(file,<sp/>&amp;w,<sp/>&amp;h,<sp/>&amp;n,<sp/>0);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input_data<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_w<sp/>=<sp/>(int)(w<sp/>*<sp/>width_percent);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_h<sp/>=<sp/>(int)(h<sp/>*<sp/>height_percent);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>output_data<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(new_w<sp/>*<sp/>new_h<sp/>*<sp/>n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_resize_region(input_data,<sp/>w,<sp/>h,<sp/>0,<sp/>output_data,<sp/>new_w,<sp/>new_h,<sp/>0,<sp/>STBIR_TYPE_UINT8,<sp/>n,<sp/>STBIR_ALPHA_CHANNEL_NONE,<sp/>0,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_FILTER_BOX,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_COLORSPACE_SRGB,<sp/>&amp;g_context,<sp/>s0,<sp/>t0,<sp/>s1,<sp/>t1);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>stbi_image_free(input_data);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structoutput" kindref="compound">output</ref>[200];</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(<ref refid="structoutput" kindref="compound">output</ref>,<sp/></highlight><highlight class="stringliteral">&quot;test-output/subpixel-region-%d-%d-%f-%f-%f-%f-%s&quot;</highlight><highlight class="normal">,<sp/>new_w,<sp/>new_h,<sp/>s0,<sp/>t0,<sp/>s1,<sp/>t1,<sp/>file);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>stbi_write_png(<ref refid="structoutput" kindref="compound">output</ref>,<sp/>new_w,<sp/>new_h,<sp/>n,<sp/>output_data,<sp/>0);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>free(output_data);</highlight></codeline>
<codeline lineno="388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_subpixel_command(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>width_percent,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>height_percent,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x_scale,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y_scale,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x_offset,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y_offset)</highlight></codeline>
<codeline lineno="391"><highlight class="normal">{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/>h,<sp/>n;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>input_data<sp/>=<sp/>stbi_load(file,<sp/>&amp;w,<sp/>&amp;h,<sp/>&amp;n,<sp/>0);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input_data<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_w<sp/>=<sp/>(int)(w<sp/>*<sp/>width_percent);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_h<sp/>=<sp/>(int)(h<sp/>*<sp/>height_percent);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>output_data<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)malloc(new_w<sp/>*<sp/>new_h<sp/>*<sp/>n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_resize_subpixel(input_data,<sp/>w,<sp/>h,<sp/>0,<sp/>output_data,<sp/>new_w,<sp/>new_h,<sp/>0,<sp/>STBIR_TYPE_UINT8,<sp/>n,<sp/>STBIR_ALPHA_CHANNEL_NONE,<sp/>0,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_FILTER_BOX,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_COLORSPACE_SRGB,<sp/>&amp;g_context,<sp/>x_scale,<sp/>y_scale,<sp/>x_offset,<sp/>y_offset);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>stbi_image_free(input_data);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structoutput" kindref="compound">output</ref>[200];</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(<ref refid="structoutput" kindref="compound">output</ref>,<sp/></highlight><highlight class="stringliteral">&quot;test-output/subpixel-command-%d-%d-%f-%f-%f-%f-%s&quot;</highlight><highlight class="normal">,<sp/>new_w,<sp/>new_h,<sp/>x_scale,<sp/>y_scale,<sp/>x_offset,<sp/>y_offset,<sp/>file);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>stbi_write_png(<ref refid="structoutput" kindref="compound">output</ref>,<sp/>new_w,<sp/>new_h,<sp/>n,<sp/>output_data,<sp/>0);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>free(output_data);</highlight></codeline>
<codeline lineno="412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>pixel(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight></codeline>
<codeline lineno="415"><highlight class="normal">{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;<ref refid="classbuffer" kindref="compound">buffer</ref>[y*w*n<sp/>+<sp/>x*n<sp/>+<sp/>c];</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_premul()</highlight></codeline>
<codeline lineno="420"><highlight class="normal">{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>input[2<sp/>*<sp/>2<sp/>*<sp/>4];</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structoutput" kindref="compound">output</ref>[1<sp/>*<sp/>1<sp/>*<sp/>4];</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>output2[2<sp/>*<sp/>2<sp/>*<sp/>4];</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(input,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(input));</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>a<sp/>test<sp/>to<sp/>make<sp/>sure<sp/>premul<sp/>is<sp/>working<sp/>properly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Top<sp/>left<sp/>-<sp/>solid<sp/>red</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>*pixel(input,<sp/>0,<sp/>0,<sp/>0,<sp/>2,<sp/>4)<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>*pixel(input,<sp/>0,<sp/>0,<sp/>3,<sp/>2,<sp/>4)<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bottom<sp/>left<sp/>-<sp/>solid<sp/>red</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>*pixel(input,<sp/>0,<sp/>1,<sp/>0,<sp/>2,<sp/>4)<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>*pixel(input,<sp/>0,<sp/>1,<sp/>3,<sp/>2,<sp/>4)<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Top<sp/>right<sp/>-<sp/>transparent<sp/>green</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>*pixel(input,<sp/>1,<sp/>0,<sp/>1,<sp/>2,<sp/>4)<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>*pixel(input,<sp/>1,<sp/>0,<sp/>3,<sp/>2,<sp/>4)<sp/>=<sp/>25;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bottom<sp/>right<sp/>-<sp/>transparent<sp/>green</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>*pixel(input,<sp/>1,<sp/>1,<sp/>1,<sp/>2,<sp/>4)<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>*pixel(input,<sp/>1,<sp/>1,<sp/>3,<sp/>2,<sp/>4)<sp/>=<sp/>25;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_resize(input,<sp/>2,<sp/>2,<sp/>0,<sp/><ref refid="structoutput" kindref="compound">output</ref>,<sp/>1,<sp/>1,<sp/>0,<sp/>STBIR_TYPE_UINT32,<sp/>4,<sp/>3,<sp/>0,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_FILTER_BOX,<sp/>STBIR_FILTER_BOX,<sp/>STBIR_COLORSPACE_LINEAR,<sp/>&amp;g_context);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>(float)255<sp/>/<sp/>4294967296;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>g<sp/>=<sp/>(float)255<sp/>/<sp/>4294967296;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ra<sp/>=<sp/>(float)255<sp/>/<sp/>4294967296;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ga<sp/>=<sp/>(float)25<sp/>/<sp/>4294967296;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>(ra<sp/>+<sp/>ga)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>STBIR_ASSERT(<ref refid="structoutput" kindref="compound">output</ref>[0]<sp/>==<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(r<sp/>*<sp/>ra<sp/>/<sp/>2<sp/>/<sp/>a<sp/>*<sp/>4294967296<sp/>+<sp/>0.5f));<sp/></highlight><highlight class="comment">//<sp/>232</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>STBIR_ASSERT(<ref refid="structoutput" kindref="compound">output</ref>[1]<sp/>==<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(g<sp/>*<sp/>ga<sp/>/<sp/>2<sp/>/<sp/>a<sp/>*<sp/>4294967296<sp/>+<sp/>0.5f));<sp/></highlight><highlight class="comment">//<sp/>23</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>STBIR_ASSERT(<ref refid="structoutput" kindref="compound">output</ref>[2]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>STBIR_ASSERT(<ref refid="structoutput" kindref="compound">output</ref>[3]<sp/>==<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(a<sp/>*<sp/>4294967296<sp/>+<sp/>0.5f));<sp/></highlight><highlight class="comment">//<sp/>140</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>a<sp/>test<sp/>to<sp/>make<sp/>sure<sp/>it<sp/>doesn&apos;t<sp/>clobber<sp/>existing<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Top<sp/>right<sp/>-<sp/>completely<sp/>transparent<sp/>green</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>*pixel(input,<sp/>1,<sp/>0,<sp/>1,<sp/>2,<sp/>4)<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>*pixel(input,<sp/>1,<sp/>0,<sp/>3,<sp/>2,<sp/>4)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bottom<sp/>right<sp/>-<sp/>completely<sp/>transparent<sp/>green</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>*pixel(input,<sp/>1,<sp/>1,<sp/>1,<sp/>2,<sp/>4)<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>*pixel(input,<sp/>1,<sp/>1,<sp/>3,<sp/>2,<sp/>4)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_resize(input,<sp/>2,<sp/>2,<sp/>0,<sp/>output2,<sp/>2,<sp/>2,<sp/>0,<sp/>STBIR_TYPE_UINT32,<sp/>4,<sp/>3,<sp/>0,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_FILTER_BOX,<sp/>STBIR_FILTER_BOX,<sp/>STBIR_COLORSPACE_LINEAR,<sp/>&amp;g_context);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>STBIR_ASSERT(*pixel(output2,<sp/>0,<sp/>0,<sp/>0,<sp/>2,<sp/>4)<sp/>==<sp/>255);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>STBIR_ASSERT(*pixel(output2,<sp/>0,<sp/>0,<sp/>1,<sp/>2,<sp/>4)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>STBIR_ASSERT(*pixel(output2,<sp/>0,<sp/>0,<sp/>2,<sp/>2,<sp/>4)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>STBIR_ASSERT(*pixel(output2,<sp/>0,<sp/>0,<sp/>3,<sp/>2,<sp/>4)<sp/>==<sp/>255);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>STBIR_ASSERT(*pixel(output2,<sp/>0,<sp/>1,<sp/>0,<sp/>2,<sp/>4)<sp/>==<sp/>255);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>STBIR_ASSERT(*pixel(output2,<sp/>0,<sp/>1,<sp/>1,<sp/>2,<sp/>4)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>STBIR_ASSERT(*pixel(output2,<sp/>0,<sp/>1,<sp/>2,<sp/>2,<sp/>4)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>STBIR_ASSERT(*pixel(output2,<sp/>0,<sp/>1,<sp/>3,<sp/>2,<sp/>4)<sp/>==<sp/>255);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>STBIR_ASSERT(*pixel(output2,<sp/>1,<sp/>0,<sp/>0,<sp/>2,<sp/>4)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>STBIR_ASSERT(*pixel(output2,<sp/>1,<sp/>0,<sp/>1,<sp/>2,<sp/>4)<sp/>==<sp/>255);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>STBIR_ASSERT(*pixel(output2,<sp/>1,<sp/>0,<sp/>2,<sp/>2,<sp/>4)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>STBIR_ASSERT(*pixel(output2,<sp/>1,<sp/>0,<sp/>3,<sp/>2,<sp/>4)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>STBIR_ASSERT(*pixel(output2,<sp/>1,<sp/>1,<sp/>0,<sp/>2,<sp/>4)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>STBIR_ASSERT(*pixel(output2,<sp/>1,<sp/>1,<sp/>1,<sp/>2,<sp/>4)<sp/>==<sp/>255);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>STBIR_ASSERT(*pixel(output2,<sp/>1,<sp/>1,<sp/>2,<sp/>2,<sp/>4)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>STBIR_ASSERT(*pixel(output2,<sp/>1,<sp/>1,<sp/>3,<sp/>2,<sp/>4)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test<sp/>that<sp/>splitting<sp/>a<sp/>pow-2<sp/>image<sp/>into<sp/>tiles<sp/>produces<sp/>identical<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_subpixel_1()</highlight></codeline>
<codeline lineno="493"><highlight class="normal">{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>image[8<sp/>*<sp/>8];</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>mtsrand(0);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(image);<sp/>i++)</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image[i]<sp/>=<sp/>mtrand()<sp/>&amp;<sp/>255;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>output_data[16<sp/>*<sp/>16];</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_resize_region(image,<sp/>8,<sp/>8,<sp/>0,<sp/>output_data,<sp/>16,<sp/>16,<sp/>0,<sp/>STBIR_TYPE_UINT8,<sp/>1,<sp/>STBIR_ALPHA_CHANNEL_NONE,<sp/>0,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_COLORSPACE_SRGB,<sp/>&amp;g_context,<sp/>0,<sp/>0,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>output_left[8<sp/>*<sp/>16];</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>output_right[8<sp/>*<sp/>16];</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_resize_region(image,<sp/>8,<sp/>8,<sp/>0,<sp/>output_left,<sp/>8,<sp/>16,<sp/>0,<sp/>STBIR_TYPE_UINT8,<sp/>1,<sp/>STBIR_ALPHA_CHANNEL_NONE,<sp/>0,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_COLORSPACE_SRGB,<sp/>&amp;g_context,<sp/>0,<sp/>0,<sp/>0.5f,<sp/>1);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_resize_region(image,<sp/>8,<sp/>8,<sp/>0,<sp/>output_right,<sp/>8,<sp/>16,<sp/>0,<sp/>STBIR_TYPE_UINT8,<sp/>1,<sp/>STBIR_ALPHA_CHANNEL_NONE,<sp/>0,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_COLORSPACE_SRGB,<sp/>&amp;g_context,<sp/>0.5f,<sp/>0,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>8;<sp/>x++)</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>16;<sp/>y++)</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(output_data[y<sp/>*<sp/>16<sp/>+<sp/>x]<sp/>==<sp/>output_left[y<sp/>*<sp/>8<sp/>+<sp/>x]);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(output_data[y<sp/>*<sp/>16<sp/>+<sp/>x<sp/>+<sp/>8]<sp/>==<sp/>output_right[y<sp/>*<sp/>8<sp/>+<sp/>x]);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_resize_subpixel(image,<sp/>8,<sp/>8,<sp/>0,<sp/>output_left,<sp/>8,<sp/>16,<sp/>0,<sp/>STBIR_TYPE_UINT8,<sp/>1,<sp/>STBIR_ALPHA_CHANNEL_NONE,<sp/>0,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_COLORSPACE_SRGB,<sp/>&amp;g_context,<sp/>2,<sp/>2,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_resize_subpixel(image,<sp/>8,<sp/>8,<sp/>0,<sp/>output_right,<sp/>8,<sp/>16,<sp/>0,<sp/>STBIR_TYPE_UINT8,<sp/>1,<sp/>STBIR_ALPHA_CHANNEL_NONE,<sp/>0,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_COLORSPACE_SRGB,<sp/>&amp;g_context,<sp/>2,<sp/>2,<sp/>8,<sp/>0);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>8;<sp/>x++)</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>16;<sp/>y++)</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(output_data[y<sp/>*<sp/>16<sp/>+<sp/>x]<sp/>==<sp/>output_left[y<sp/>*<sp/>8<sp/>+<sp/>x]);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(output_data[y<sp/>*<sp/>16<sp/>+<sp/>x<sp/>+<sp/>8]<sp/>==<sp/>output_right[y<sp/>*<sp/>8<sp/>+<sp/>x]);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>}}</highlight></codeline>
<codeline lineno="531"><highlight class="normal">}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test<sp/>that<sp/>replicating<sp/>an<sp/>image<sp/>and<sp/>using<sp/>a<sp/>subtile<sp/>of<sp/>it<sp/>produces<sp/>same<sp/>results<sp/>as<sp/>wraparound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_subpixel_2()</highlight></codeline>
<codeline lineno="535"><highlight class="normal">{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>image[8<sp/>*<sp/>8];</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>mtsrand(0);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(image);<sp/>i++)</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image[i]<sp/>=<sp/>mtrand()<sp/>&amp;<sp/>255;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>large_image[32<sp/>*<sp/>32];</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>8;<sp/>x++)</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>8;<sp/>y++)</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>4;<sp/>j++)</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>large_image[j*4*8*8<sp/>+<sp/>i*8<sp/>+<sp/>y*4*8<sp/>+<sp/>x]<sp/>=<sp/>image[y*8<sp/>+<sp/>x];</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>output_data_1[16<sp/>*<sp/>16];</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>output_data_2[16<sp/>*<sp/>16];</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_resize(image,<sp/>8,<sp/>8,<sp/>0,<sp/>output_data_1,<sp/>16,<sp/>16,<sp/>0,<sp/>STBIR_TYPE_UINT8,<sp/>1,<sp/>STBIR_ALPHA_CHANNEL_NONE,<sp/>0,<sp/>STBIR_EDGE_WRAP,<sp/>STBIR_EDGE_WRAP,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_COLORSPACE_SRGB,<sp/>&amp;g_context);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_resize_region(large_image,<sp/>32,<sp/>32,<sp/>0,<sp/>output_data_2,<sp/>16,<sp/>16,<sp/>0,<sp/>STBIR_TYPE_UINT8,<sp/>1,<sp/>STBIR_ALPHA_CHANNEL_NONE,<sp/>0,<sp/>STBIR_EDGE_WRAP,<sp/>STBIR_EDGE_WRAP,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_COLORSPACE_SRGB,<sp/>&amp;g_context,<sp/>0.25f,<sp/>0.25f,<sp/>0.5f,<sp/>0.5f);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>16;<sp/>x++)</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>16;<sp/>y++)</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(output_data_1[y<sp/>*<sp/>16<sp/>+<sp/>x]<sp/>==<sp/>output_data_2[y<sp/>*<sp/>16<sp/>+<sp/>x]);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>}}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_resize_subpixel(large_image,<sp/>32,<sp/>32,<sp/>0,<sp/>output_data_2,<sp/>16,<sp/>16,<sp/>0,<sp/>STBIR_TYPE_UINT8,<sp/>1,<sp/>STBIR_ALPHA_CHANNEL_NONE,<sp/>0,<sp/>STBIR_EDGE_WRAP,<sp/>STBIR_EDGE_WRAP,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_COLORSPACE_SRGB,<sp/>&amp;g_context,<sp/>2,<sp/>2,<sp/>16,<sp/>16);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>16;<sp/>x++)</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>16;<sp/>y++)</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(output_data_1[y<sp/>*<sp/>16<sp/>+<sp/>x]<sp/>==<sp/>output_data_2[y<sp/>*<sp/>16<sp/>+<sp/>x]);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>}}</highlight></codeline>
<codeline lineno="576"><highlight class="normal">}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test<sp/>that<sp/>0,0,1,1<sp/>subpixel<sp/>produces<sp/>same<sp/>result<sp/>as<sp/>no-rect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_subpixel_3()</highlight></codeline>
<codeline lineno="580"><highlight class="normal">{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>image[8<sp/>*<sp/>8];</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>mtsrand(0);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(image);<sp/>i++)</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image[i]<sp/>=<sp/>mtrand()<sp/>&amp;<sp/>255;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>output_data_1[32<sp/>*<sp/>32];</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>output_data_2[32<sp/>*<sp/>32];</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_resize_region(image,<sp/>8,<sp/>8,<sp/>0,<sp/>output_data_1,<sp/>32,<sp/>32,<sp/>0,<sp/>STBIR_TYPE_UINT8,<sp/>1,<sp/>0,<sp/>STBIR_ALPHA_CHANNEL_NONE,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_COLORSPACE_LINEAR,<sp/>NULL,<sp/>0,<sp/>0,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_resize_uint8(image,<sp/>8,<sp/>8,<sp/>0,<sp/>output_data_2,<sp/>32,<sp/>32,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>32;<sp/>x++)</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>32;<sp/>y++)</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(output_data_1[y<sp/>*<sp/>32<sp/>+<sp/>x]<sp/>==<sp/>output_data_2[y<sp/>*<sp/>32<sp/>+<sp/>x]);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_resize_subpixel(image,<sp/>8,<sp/>8,<sp/>0,<sp/>output_data_1,<sp/>32,<sp/>32,<sp/>0,<sp/>STBIR_TYPE_UINT8,<sp/>1,<sp/>0,<sp/>STBIR_ALPHA_CHANNEL_NONE,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_COLORSPACE_LINEAR,<sp/>NULL,<sp/>4,<sp/>4,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>32;<sp/>x++)</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>32;<sp/>y++)</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(output_data_1[y<sp/>*<sp/>32<sp/>+<sp/>x]<sp/>==<sp/>output_data_2[y<sp/>*<sp/>32<sp/>+<sp/>x]);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>}}</highlight></codeline>
<codeline lineno="607"><highlight class="normal">}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test<sp/>that<sp/>1:1<sp/>resample<sp/>using<sp/>s,t=0,0,1,1<sp/>with<sp/>bilinear<sp/>produces<sp/>original<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_subpixel_4()</highlight></codeline>
<codeline lineno="611"><highlight class="normal">{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>image[8<sp/>*<sp/>8];</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>mtsrand(0);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(image);<sp/>i++)</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image[i]<sp/>=<sp/>mtrand()<sp/>&amp;<sp/>255;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structoutput" kindref="compound">output</ref>[8<sp/>*<sp/>8];</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_resize_region(image,<sp/>8,<sp/>8,<sp/>0,<sp/><ref refid="structoutput" kindref="compound">output</ref>,<sp/>8,<sp/>8,<sp/>0,<sp/>STBIR_TYPE_UINT8,<sp/>1,<sp/>STBIR_ALPHA_CHANNEL_NONE,<sp/>0,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_FILTER_TRIANGLE,<sp/>STBIR_FILTER_TRIANGLE,<sp/>STBIR_COLORSPACE_LINEAR,<sp/>&amp;g_context,<sp/>0,<sp/>0,<sp/>1,<sp/>1);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>STBIR_ASSERT(memcmp(image,<sp/><ref refid="structoutput" kindref="compound">output</ref>,<sp/>8<sp/>*<sp/>8)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_resize_subpixel(image,<sp/>8,<sp/>8,<sp/>0,<sp/><ref refid="structoutput" kindref="compound">output</ref>,<sp/>8,<sp/>8,<sp/>0,<sp/>STBIR_TYPE_UINT8,<sp/>1,<sp/>STBIR_ALPHA_CHANNEL_NONE,<sp/>0,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_FILTER_TRIANGLE,<sp/>STBIR_FILTER_TRIANGLE,<sp/>STBIR_COLORSPACE_LINEAR,<sp/>&amp;g_context,<sp/>1,<sp/>1,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>STBIR_ASSERT(memcmp(image,<sp/><ref refid="structoutput" kindref="compound">output</ref>,<sp/>8<sp/>*<sp/>8)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>image88_int[8][8];</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>image88<sp/>[8][8];</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>output88[8][8];</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>output44[4][4];</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>output22[2][2];</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>output11[1][1];</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resample_88(stbir_filter<sp/>filter)</highlight></codeline>
<codeline lineno="636"><highlight class="normal">{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_resize_uint8_generic(image88[0],8,8,0,<sp/>output88[0],8,8,0,<sp/>1,-1,0,<sp/>STBIR_EDGE_CLAMP,<sp/>filter,<sp/>STBIR_COLORSPACE_LINEAR,<sp/>NULL);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_resize_uint8_generic(image88[0],8,8,0,<sp/>output44[0],4,4,0,<sp/>1,-1,0,<sp/>STBIR_EDGE_CLAMP,<sp/>filter,<sp/>STBIR_COLORSPACE_LINEAR,<sp/>NULL);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_resize_uint8_generic(image88[0],8,8,0,<sp/>output22[0],2,2,0,<sp/>1,-1,0,<sp/>STBIR_EDGE_CLAMP,<sp/>filter,<sp/>STBIR_COLORSPACE_LINEAR,<sp/>NULL);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_resize_uint8_generic(image88[0],8,8,0,<sp/>output11[0],1,1,0,<sp/>1,-1,0,<sp/>STBIR_EDGE_CLAMP,<sp/>filter,<sp/>STBIR_COLORSPACE_LINEAR,<sp/>NULL);</highlight></codeline>
<codeline lineno="641"><highlight class="normal">}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>verify_box(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="644"><highlight class="normal">{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,t;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>resample_88(STBIR_FILTER_BOX);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(image88);<sp/>++i)</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(image88[0][i]<sp/>==<sp/>output88[0][i]);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>4;<sp/>++j)</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>image88[j*2+0][i*2+0]</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>image88[j*2+0][i*2+1]</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>image88[j*2+1][i*2+0]</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>image88[j*2+1][i*2+1];</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(output44[j][i]<sp/>==<sp/>((n+2)&gt;&gt;2)<sp/>||<sp/>output44[j][i]<sp/>==<sp/>((n+1)&gt;&gt;2));<sp/></highlight><highlight class="comment">//<sp/>can&apos;t<sp/>guarantee<sp/>exact<sp/>rounding<sp/>due<sp/>to<sp/>numerical<sp/>precision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>STBIR_ASSERT(output11[0][0]<sp/>==<sp/>((t+32)&gt;&gt;6)<sp/>||<sp/>output11[0][0]<sp/>==<sp/>((t+31)&gt;&gt;6));<sp/></highlight><highlight class="comment">//<sp/>can&apos;t<sp/>guarantee<sp/>exact<sp/>rounding<sp/>due<sp/>to<sp/>numerical<sp/>precision</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal">}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>verify_filter_normalized(stbir_filter<sp/>filter,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>output_size,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>)</highlight></codeline>
<codeline lineno="666"><highlight class="normal">{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structoutput" kindref="compound">output</ref>[64];</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_resize(image88_int[0],<sp/>8,<sp/>8,<sp/>0,<sp/><ref refid="structoutput" kindref="compound">output</ref>,<sp/>output_size,<sp/>output_size,<sp/>0,<sp/>STBIR_TYPE_UINT32,<sp/>1,<sp/>STBIR_ALPHA_CHANNEL_NONE,<sp/>0,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_EDGE_CLAMP,<sp/>filter,<sp/>filter,<sp/>STBIR_COLORSPACE_LINEAR,<sp/>NULL);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>output_size;<sp/>++j)</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>output_size;<sp/>++i)</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(<ref refid="classvalue" kindref="compound">value</ref><sp/>==<sp/><ref refid="structoutput" kindref="compound">output</ref>[j*output_size<sp/>+<sp/>i]);</highlight></codeline>
<codeline lineno="675"><highlight class="normal">}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>round2(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f)</highlight></codeline>
<codeline lineno="678"><highlight class="normal">{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/><ref refid="group__core__func__common_1gac433646923ab80af6d9964f1570855d5" kindref="member">floor</ref>(f+0.5f);<sp/></highlight><highlight class="comment">//<sp/>round()<sp/>isn&apos;t<sp/>C<sp/>standard<sp/>pre-C99</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal">}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_filters(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="683"><highlight class="normal">{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>mtsrand(0);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(image88);<sp/>++i)</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image88[0][i]<sp/>=<sp/>mtrand()<sp/>&amp;<sp/>255;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>verify_box();</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(image88);<sp/>++i)</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image88[0][i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>image88[4][4]<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>verify_box();</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>8;<sp/>++j)</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>8;<sp/>++i)</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image88[j][i]<sp/>=<sp/>(j^i)&amp;1<sp/>?<sp/>255<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>verify_box();</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>8;<sp/>++j)</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>8;<sp/>++i)</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image88[j][i]<sp/>=<sp/>i&amp;2<sp/>?<sp/>255<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>verify_box();</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>=<sp/>64;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>8;<sp/>++j)</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>8;<sp/>++i)</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image88_int[j][i]<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>verify_filter_normalized(STBIR_FILTER_BOX,<sp/>8,<sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>verify_filter_normalized(STBIR_FILTER_TRIANGLE,<sp/>8,<sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>verify_filter_normalized(STBIR_FILTER_CUBICBSPLINE,<sp/>8,<sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>verify_filter_normalized(STBIR_FILTER_CATMULLROM,<sp/>8,<sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>verify_filter_normalized(STBIR_FILTER_MITCHELL,<sp/>8,<sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>verify_filter_normalized(STBIR_FILTER_BOX,<sp/>4,<sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>verify_filter_normalized(STBIR_FILTER_TRIANGLE,<sp/>4,<sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>verify_filter_normalized(STBIR_FILTER_CUBICBSPLINE,<sp/>4,<sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>verify_filter_normalized(STBIR_FILTER_CATMULLROM,<sp/>4,<sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>verify_filter_normalized(STBIR_FILTER_MITCHELL,<sp/>4,<sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>verify_filter_normalized(STBIR_FILTER_BOX,<sp/>2,<sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>verify_filter_normalized(STBIR_FILTER_TRIANGLE,<sp/>2,<sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>verify_filter_normalized(STBIR_FILTER_CUBICBSPLINE,<sp/>2,<sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>verify_filter_normalized(STBIR_FILTER_CATMULLROM,<sp/>2,<sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>verify_filter_normalized(STBIR_FILTER_MITCHELL,<sp/>2,<sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>verify_filter_normalized(STBIR_FILTER_BOX,<sp/>1,<sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>verify_filter_normalized(STBIR_FILTER_TRIANGLE,<sp/>1,<sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>verify_filter_normalized(STBIR_FILTER_CUBICBSPLINE,<sp/>1,<sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>verify_filter_normalized(STBIR_FILTER_CATMULLROM,<sp/>1,<sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>verify_filter_normalized(STBIR_FILTER_MITCHELL,<sp/>1,<sp/><ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>test<sp/>is<sp/>designed<sp/>to<sp/>produce<sp/>coefficients<sp/>that<sp/>are<sp/>very<sp/>badly<sp/>denormalized.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v<sp/>=<sp/>556;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>input[100<sp/>*<sp/>100];</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structoutput" kindref="compound">output</ref>[11<sp/>*<sp/>11];</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>100<sp/>*<sp/>100;<sp/>++j)</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input[j]<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbir_resize(input,<sp/>100,<sp/>100,<sp/>0,<sp/><ref refid="structoutput" kindref="compound">output</ref>,<sp/>11,<sp/>11,<sp/>0,<sp/>STBIR_TYPE_UINT32,<sp/>1,<sp/>STBIR_ALPHA_CHANNEL_NONE,<sp/>0,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_FILTER_TRIANGLE,<sp/>STBIR_FILTER_TRIANGLE,<sp/>STBIR_COLORSPACE_LINEAR,<sp/>NULL);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>11<sp/>*<sp/>11;<sp/>++j)</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(v<sp/>==<sp/><ref refid="structoutput" kindref="compound">output</ref>[j]);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>test<sp/>the<sp/>trapezoid<sp/>filter<sp/>for<sp/>downsampling.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>input[3<sp/>*<sp/>1];</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structoutput" kindref="compound">output</ref>[2<sp/>*<sp/>1];</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input[1]<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input[2]<sp/>=<sp/>127;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbir_resize(input,<sp/>3,<sp/>1,<sp/>0,<sp/><ref refid="structoutput" kindref="compound">output</ref>,<sp/>2,<sp/>1,<sp/>0,<sp/>STBIR_TYPE_UINT32,<sp/>1,<sp/>STBIR_ALPHA_CHANNEL_NONE,<sp/>0,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_FILTER_BOX,<sp/>STBIR_FILTER_BOX,<sp/>STBIR_COLORSPACE_LINEAR,<sp/>NULL);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(<ref refid="structoutput" kindref="compound">output</ref>[0]<sp/>==<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)round2((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)(input[0]<sp/>*<sp/>2<sp/>+<sp/>input[1])<sp/>/<sp/>3));</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(<ref refid="structoutput" kindref="compound">output</ref>[1]<sp/>==<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)round2((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)(input[2]<sp/>*<sp/>2<sp/>+<sp/>input[1])<sp/>/<sp/>3));</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbir_resize(input,<sp/>1,<sp/>3,<sp/>0,<sp/><ref refid="structoutput" kindref="compound">output</ref>,<sp/>1,<sp/>2,<sp/>0,<sp/>STBIR_TYPE_UINT32,<sp/>1,<sp/>STBIR_ALPHA_CHANNEL_NONE,<sp/>0,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_FILTER_BOX,<sp/>STBIR_FILTER_BOX,<sp/>STBIR_COLORSPACE_LINEAR,<sp/>NULL);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(<ref refid="structoutput" kindref="compound">output</ref>[0]<sp/>==<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)round2((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)(input[0]<sp/>*<sp/>2<sp/>+<sp/>input[1])<sp/>/<sp/>3));</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(<ref refid="structoutput" kindref="compound">output</ref>[1]<sp/>==<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)round2((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)(input[2]<sp/>*<sp/>2<sp/>+<sp/>input[1])<sp/>/<sp/>3));</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>test<sp/>the<sp/>trapezoid<sp/>filter<sp/>for<sp/>upsampling.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>input[2<sp/>*<sp/>1];</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structoutput" kindref="compound">output</ref>[3<sp/>*<sp/>1];</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input[1]<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbir_resize(input,<sp/>2,<sp/>1,<sp/>0,<sp/><ref refid="structoutput" kindref="compound">output</ref>,<sp/>3,<sp/>1,<sp/>0,<sp/>STBIR_TYPE_UINT32,<sp/>1,<sp/>STBIR_ALPHA_CHANNEL_NONE,<sp/>0,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_FILTER_BOX,<sp/>STBIR_FILTER_BOX,<sp/>STBIR_COLORSPACE_LINEAR,<sp/>NULL);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(<ref refid="structoutput" kindref="compound">output</ref>[0]<sp/>==<sp/>input[0]);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(<ref refid="structoutput" kindref="compound">output</ref>[1]<sp/>==<sp/>(input[0]<sp/>+<sp/>input[1])<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(<ref refid="structoutput" kindref="compound">output</ref>[2]<sp/>==<sp/>input[1]);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbir_resize(input,<sp/>1,<sp/>2,<sp/>0,<sp/><ref refid="structoutput" kindref="compound">output</ref>,<sp/>1,<sp/>3,<sp/>0,<sp/>STBIR_TYPE_UINT32,<sp/>1,<sp/>STBIR_ALPHA_CHANNEL_NONE,<sp/>0,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_FILTER_BOX,<sp/>STBIR_FILTER_BOX,<sp/>STBIR_COLORSPACE_LINEAR,<sp/>NULL);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(<ref refid="structoutput" kindref="compound">output</ref>[0]<sp/>==<sp/>input[0]);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(<ref refid="structoutput" kindref="compound">output</ref>[1]<sp/>==<sp/>(input[0]<sp/>+<sp/>input[1])<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(<ref refid="structoutput" kindref="compound">output</ref>[2]<sp/>==<sp/>input[1]);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>checkerboard</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>input[64][64];</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structoutput" kindref="compound">output</ref>[16][16];</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>64;<sp/>++j)</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>64;<sp/>++i)</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input[j][i]<sp/>=<sp/>(i^j)&amp;1<sp/>?<sp/>255<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbir_resize_uint8_generic(input[0],<sp/>64,<sp/>64,<sp/>0,<sp/><ref refid="structoutput" kindref="compound">output</ref>[0],16,16,0,<sp/>1,-1,0,STBIR_EDGE_WRAP,STBIR_FILTER_DEFAULT,STBIR_COLORSPACE_LINEAR,0);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>16;<sp/>++j)</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>16;<sp/>++i)</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(<ref refid="structoutput" kindref="compound">output</ref>[j][i]<sp/>==<sp/>128);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbir_resize_uint8_srgb_edgemode(input[0],<sp/>64,<sp/>64,<sp/>0,<sp/><ref refid="structoutput" kindref="compound">output</ref>[0],16,16,0,<sp/>1,-1,0,STBIR_EDGE_WRAP);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>16;<sp/>++j)</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>16;<sp/>++i)</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(<ref refid="structoutput" kindref="compound">output</ref>[j][i]<sp/>==<sp/>188);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>trapezoid<sp/>box<sp/>filter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>input[2<sp/>*<sp/>1];</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structoutput" kindref="compound">output</ref>[127<sp/>*<sp/>1];</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input[1]<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbir_resize(input,<sp/>2,<sp/>1,<sp/>0,<sp/><ref refid="structoutput" kindref="compound">output</ref>,<sp/>127,<sp/>1,<sp/>0,<sp/>STBIR_TYPE_UINT8,<sp/>1,<sp/>STBIR_ALPHA_CHANNEL_NONE,<sp/>0,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_FILTER_BOX,<sp/>STBIR_FILTER_BOX,<sp/>STBIR_COLORSPACE_LINEAR,<sp/>NULL);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(<ref refid="structoutput" kindref="compound">output</ref>[0]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(<ref refid="structoutput" kindref="compound">output</ref>[127<sp/>/<sp/>2<sp/>-<sp/>1]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(<ref refid="structoutput" kindref="compound">output</ref>[127<sp/>/<sp/>2]<sp/>==<sp/>128);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(<ref refid="structoutput" kindref="compound">output</ref>[127<sp/>/<sp/>2<sp/>+<sp/>1]<sp/>==<sp/>255);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(<ref refid="structoutput" kindref="compound">output</ref>[126]<sp/>==<sp/>255);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi_write_png(</highlight><highlight class="stringliteral">&quot;test-output/trapezoid-upsample-horizontal.png&quot;</highlight><highlight class="normal">,<sp/>127,<sp/>1,<sp/>1,<sp/><ref refid="structoutput" kindref="compound">output</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbir_resize(input,<sp/>1,<sp/>2,<sp/>0,<sp/><ref refid="structoutput" kindref="compound">output</ref>,<sp/>1,<sp/>127,<sp/>0,<sp/>STBIR_TYPE_UINT8,<sp/>1,<sp/>STBIR_ALPHA_CHANNEL_NONE,<sp/>0,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_FILTER_BOX,<sp/>STBIR_FILTER_BOX,<sp/>STBIR_COLORSPACE_LINEAR,<sp/>NULL);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(<ref refid="structoutput" kindref="compound">output</ref>[0]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(<ref refid="structoutput" kindref="compound">output</ref>[127<sp/>/<sp/>2<sp/>-<sp/>1]<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(<ref refid="structoutput" kindref="compound">output</ref>[127<sp/>/<sp/>2]<sp/>==<sp/>128);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(<ref refid="structoutput" kindref="compound">output</ref>[127<sp/>/<sp/>2<sp/>+<sp/>1]<sp/>==<sp/>255);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(<ref refid="structoutput" kindref="compound">output</ref>[126]<sp/>==<sp/>255);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbi_write_png(</highlight><highlight class="stringliteral">&quot;test-output/trapezoid-upsample-vertical.png&quot;</highlight><highlight class="normal">,<sp/>1,<sp/>127,<sp/>1,<sp/><ref refid="structoutput" kindref="compound">output</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="838"><highlight class="normal">}</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UMAX32<sp/><sp/><sp/>4294967295U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write32(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,<sp/>stbir_uint32<sp/>*<ref refid="structoutput" kindref="compound">output</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h)</highlight></codeline>
<codeline lineno="843"><highlight class="normal">{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_uint8<sp/>*data<sp/>=<sp/>(stbir_uint8*)<sp/>malloc(w*h*3);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i<sp/>&lt;<sp/>w*h*3;<sp/>++i)</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data[i]<sp/>=<sp/><ref refid="structoutput" kindref="compound">output</ref>[i]&gt;&gt;24;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>stbi_write_png(filename,<sp/>w,<sp/>h,<sp/>3,<sp/>data,<sp/>0);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>free(data);</highlight></codeline>
<codeline lineno="849"><highlight class="normal">}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_32(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="852"><highlight class="normal">{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w=100,h=120,x,y,<sp/>out_w,out_h;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_uint32<sp/>*input<sp/><sp/>=<sp/>(stbir_uint32*)<sp/>malloc(4<sp/>*<sp/>3<sp/>*<sp/>w<sp/>*<sp/>h);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_uint32<sp/>*<ref refid="structoutput" kindref="compound">output</ref><sp/>=<sp/>(stbir_uint32*)<sp/>malloc(4<sp/>*<sp/>3<sp/>*<sp/>3*w<sp/>*<sp/>3*h);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y=0;<sp/>y<sp/>&lt;<sp/>h;<sp/>++y)<sp/>{</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x=0;<sp/>x<sp/>&lt;<sp/>w;<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input[y*3*w<sp/>+<sp/>x*3<sp/>+<sp/>0]<sp/>=<sp/>x<sp/>*<sp/>(<sp/>UMAX32/w<sp/>);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input[y*3*w<sp/>+<sp/>x*3<sp/>+<sp/>1]<sp/>=<sp/>y<sp/>*<sp/>(<sp/>UMAX32/h<sp/>);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>input[y*3*w<sp/>+<sp/>x*3<sp/>+<sp/>2]<sp/>=<sp/>UMAX32/2;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>out_w<sp/>=<sp/>w*33/16;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>out_h<sp/>=<sp/>h*33/16;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_resize(input,w,h,0,<ref refid="structoutput" kindref="compound">output</ref>,out_w,out_h,0,STBIR_TYPE_UINT32,3,-1,0,STBIR_EDGE_CLAMP,STBIR_EDGE_CLAMP,STBIR_FILTER_DEFAULT,STBIR_FILTER_DEFAULT,STBIR_COLORSPACE_LINEAR,NULL);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>write32(</highlight><highlight class="stringliteral">&quot;test-output/seantest_1.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="structoutput" kindref="compound">output</ref>,out_w,out_h);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>out_w<sp/>=<sp/>w*16/33;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>out_h<sp/>=<sp/>h*16/33;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_resize(input,w,h,0,<ref refid="structoutput" kindref="compound">output</ref>,out_w,out_h,0,STBIR_TYPE_UINT32,3,-1,0,STBIR_EDGE_CLAMP,STBIR_EDGE_CLAMP,STBIR_FILTER_DEFAULT,STBIR_FILTER_DEFAULT,STBIR_COLORSPACE_LINEAR,NULL);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>write32(</highlight><highlight class="stringliteral">&quot;test-output/seantest_2.png&quot;</highlight><highlight class="normal">,<sp/><ref refid="structoutput" kindref="compound">output</ref>,out_w,out_h);</highlight></codeline>
<codeline lineno="872"><highlight class="normal">}</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_suite(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)</highlight></codeline>
<codeline lineno="876"><highlight class="normal">{</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*barbara;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>mkdir(</highlight><highlight class="stringliteral">&quot;test-output&quot;</highlight><highlight class="normal">,<sp/>777);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argc<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>barbara<sp/>=<sp/>argv[1];</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>barbara<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;barbara.png&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>what<sp/>cases<sp/>we<sp/>need<sp/>normalization<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>-1;<sp/>x<sp/>&lt;<sp/>1;<sp/>x<sp/>+=<sp/>0.05f)<sp/>{</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sums[5]<sp/>=<sp/>{<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>o;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(o<sp/>=<sp/>-5;<sp/>o<sp/>&lt;=<sp/>5;<sp/>++o)<sp/>{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sums[0]<sp/>+=<sp/>stbir__filter_mitchell(x<sp/>+<sp/>o,<sp/>1);</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sums[1]<sp/>+=<sp/>stbir__filter_catmullrom(x<sp/>+<sp/>o,<sp/>1);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sums[2]<sp/>+=<sp/>stbir__filter_cubic(x<sp/>+<sp/>o,<sp/>1);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sums[3]<sp/>+=<sp/>stbir__filter_triangle(x<sp/>+<sp/>o,<sp/>1);</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sums[4]<sp/>+=<sp/>stbir__filter_trapezoid(x<sp/>+<sp/>o,<sp/>0.5f);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>5;<sp/>++i)</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(sums[i]<sp/>&gt;=<sp/>1.0<sp/>-<sp/>0.001<sp/>&amp;&amp;<sp/>sums[i]<sp/>&lt;=<sp/>1.0<sp/>+<sp/>0.001);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>1<sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>0.11f;<sp/>y<sp/>&lt;<sp/>1;<sp/>y<sp/>+=<sp/>0.01f)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>-1;<sp/>x<sp/>&lt;<sp/>1;<sp/>x<sp/>+=<sp/>0.05f)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>Phase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sums[5]<sp/>=<sp/>{<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>o;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(o<sp/>=<sp/>-5;<sp/>o<sp/>&lt;=<sp/>5;<sp/>o<sp/>+=<sp/>y)<sp/>{</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sums[0]<sp/>+=<sp/>y<sp/>*<sp/>stbir__filter_mitchell(x<sp/>+<sp/>o,<sp/>1);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sums[1]<sp/>+=<sp/>y<sp/>*<sp/>stbir__filter_catmullrom(x<sp/>+<sp/>o,<sp/>1);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sums[2]<sp/>+=<sp/>y<sp/>*<sp/>stbir__filter_cubic(x<sp/>+<sp/>o,<sp/>1);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sums[4]<sp/>+=<sp/>y<sp/>*<sp/>stbir__filter_trapezoid(x<sp/>+<sp/>o,<sp/>0.5f);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sums[3]<sp/>+=<sp/>y<sp/>*<sp/>stbir__filter_triangle(x<sp/>+<sp/>o,<sp/>1);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>++i)</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(sums[i]<sp/>&gt;=<sp/>1.0<sp/>-<sp/>0.0170<sp/>&amp;&amp;<sp/>sums[i]<sp/>&lt;=<sp/>1.0<sp/>+<sp/>0.0170);</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0<sp/></highlight><highlight class="comment">//<sp/>linear_to_srgb_uchar<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>256;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>stbir__srgb_to_linear((i-0.5f)/255.0f);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%9d,<sp/>&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>((f)<sp/>*<sp/>(1&lt;&lt;28)));</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i<sp/>&amp;<sp/>7)<sp/>==<sp/>7)</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>old<sp/>tests<sp/>that<sp/>hacky<sp/>fix<sp/>worked<sp/>on<sp/>-<sp/>test<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>every<sp/>uint8<sp/>maps<sp/>to<sp/>itself</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>256;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>stbir__srgb_to_linear(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">(i)<sp/>/<sp/>255);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>stbir__linear_to_srgb_uchar(f);</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(n<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>new<sp/>tests<sp/>that<sp/>hacky<sp/>fix<sp/>failed<sp/>for<sp/>-<sp/>test<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>values<sp/>adjacent<sp/>to<sp/>uint8<sp/>round<sp/>to<sp/>nearest<sp/>uint8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>256;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>-0.42f;<sp/>y<sp/>&lt;=<sp/>0.42f;<sp/>y<sp/>+=<sp/>0.01f)<sp/>{</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>stbir__srgb_to_linear((i+y)<sp/>/<sp/>255.0f);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>stbir__linear_to_srgb_uchar(f);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STBIR_ASSERT(n<sp/>==<sp/>i);</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>test_filters();</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>test_subpixel_1();</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>test_subpixel_2();</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/>test_subpixel_3();</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>test_subpixel_4();</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>test_premul();</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>test_32();</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>tests<sp/>to<sp/>make<sp/>sure<sp/>errors<sp/>don&apos;t<sp/>pop<sp/>up<sp/>with<sp/>strange<sp/>filter/dimension<sp/>combinations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_resize(image88,<sp/>8,<sp/>8,<sp/>0,<sp/>output88,<sp/>4,<sp/>16,<sp/>0,<sp/>STBIR_TYPE_UINT8,<sp/>1,<sp/>STBIR_ALPHA_CHANNEL_NONE,<sp/>0,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_FILTER_BOX,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_COLORSPACE_SRGB,<sp/>&amp;g_context);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_resize(image88,<sp/>8,<sp/>8,<sp/>0,<sp/>output88,<sp/>4,<sp/>16,<sp/>0,<sp/>STBIR_TYPE_UINT8,<sp/>1,<sp/>STBIR_ALPHA_CHANNEL_NONE,<sp/>0,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_FILTER_BOX,<sp/>STBIR_COLORSPACE_SRGB,<sp/>&amp;g_context);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_resize(image88,<sp/>8,<sp/>8,<sp/>0,<sp/>output88,<sp/>16,<sp/>4,<sp/>0,<sp/>STBIR_TYPE_UINT8,<sp/>1,<sp/>STBIR_ALPHA_CHANNEL_NONE,<sp/>0,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_FILTER_BOX,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_COLORSPACE_SRGB,<sp/>&amp;g_context);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/>stbir_resize(image88,<sp/>8,<sp/>8,<sp/>0,<sp/>output88,<sp/>16,<sp/>4,<sp/>0,<sp/>STBIR_TYPE_UINT8,<sp/>1,<sp/>STBIR_ALPHA_CHANNEL_NONE,<sp/>0,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_FILTER_BOX,<sp/>STBIR_COLORSPACE_SRGB,<sp/>&amp;g_context);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>barbara_width,<sp/>barbara_height,<sp/>barbara_channels;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>stbi_image_free(stbi_load(barbara,<sp/>&amp;barbara_width,<sp/>&amp;barbara_height,<sp/>&amp;barbara_channels,<sp/>0));</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Downscaling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>res;<sp/>i++)</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>(float)i/res;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale<sp/>=<sp/>0.5;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>out_scale<sp/>=<sp/>2.0f/3;</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x_shift<sp/>=<sp/>(barbara_width*out_scale<sp/>-<sp/>barbara_width*<ref refid="group__gtc__matrix__transform_1gaae2f8b2080622b24b85e1096748599b6" kindref="member">scale</ref>)<sp/>*<sp/>t;</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y_shift<sp/>=<sp/>(barbara_height*out_scale<sp/>-<sp/>barbara_height*<ref refid="group__gtc__matrix__transform_1gaae2f8b2080622b24b85e1096748599b6" kindref="member">scale</ref>)<sp/>*<sp/>t;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_subpixel_command(barbara,<sp/>scale,<sp/>scale,<sp/>out_scale,<sp/>out_scale,<sp/>x_shift,<sp/>y_shift);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>}}</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Upscaling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>res;<sp/>i++)</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>(float)i/res;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>out_scale<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x_shift<sp/>=<sp/>(barbara_width*out_scale<sp/>-<sp/>barbara_width*<ref refid="group__gtc__matrix__transform_1gaae2f8b2080622b24b85e1096748599b6" kindref="member">scale</ref>)<sp/>*<sp/>t;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y_shift<sp/>=<sp/>(barbara_height*out_scale<sp/>-<sp/>barbara_height*<ref refid="group__gtc__matrix__transform_1gaae2f8b2080622b24b85e1096748599b6" kindref="member">scale</ref>)<sp/>*<sp/>t;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_subpixel_command(barbara,<sp/>scale,<sp/>scale,<sp/>out_scale,<sp/>out_scale,<sp/>x_shift,<sp/>y_shift);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/>}}</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Downscaling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>res;<sp/>i++)</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>(float)i/res<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_subpixel_region(barbara,<sp/>0.25f,<sp/>0.25f,<sp/>t,<sp/>t,<sp/>t+0.5f,<sp/>t+0.5f);</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>}}</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>scaling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>res;<sp/>i++)</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>(float)i/res<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_subpixel_region(barbara,<sp/>0.5f,<sp/>0.5f,<sp/>t,<sp/>t,<sp/>t+0.5f,<sp/>t+0.5f);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>}}</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Upscaling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>res;<sp/>i++)</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>(float)i/res<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_subpixel_region(barbara,<sp/>1,<sp/>1,<sp/>t,<sp/>t,<sp/>t+0.5f,<sp/>t+0.5f);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>}}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10;<sp/>i++)</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_subpixel(barbara,<sp/>0.5f,<sp/>0.5f,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)i<sp/>/<sp/>10,<sp/>1);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10;<sp/>i++)</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_subpixel(barbara,<sp/>0.5f,<sp/>0.5f,<sp/>1,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)i<sp/>/<sp/>10);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10;<sp/>i++)</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_subpixel(barbara,<sp/>2,<sp/>2,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)i<sp/>/<sp/>10,<sp/>1);</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10;<sp/>i++)</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_subpixel(barbara,<sp/>2,<sp/>2,<sp/>1,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)i<sp/>/<sp/>10);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Channels<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/>test_channels(barbara,<sp/>0.5f,<sp/>0.5f,<sp/>1);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>test_channels(barbara,<sp/>0.5f,<sp/>0.5f,<sp/>2);</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/>test_channels(barbara,<sp/>0.5f,<sp/>0.5f,<sp/>3);</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>test_channels(barbara,<sp/>0.5f,<sp/>0.5f,<sp/>4);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/>test_channels(barbara,<sp/>2,<sp/>2,<sp/>1);</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/>test_channels(barbara,<sp/>2,<sp/>2,<sp/>2);</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/>test_channels(barbara,<sp/>2,<sp/>2,<sp/>3);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>test_channels(barbara,<sp/>2,<sp/>2,<sp/>4);</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>filter<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/>resize_image(barbara,<sp/>2,<sp/>2,<sp/>STBIR_FILTER_BOX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_COLORSPACE_SRGB,<sp/></highlight><highlight class="stringliteral">&quot;test-output/barbara-upsample-nearest.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/>resize_image(barbara,<sp/>2,<sp/>2,<sp/>STBIR_FILTER_TRIANGLE<sp/><sp/><sp/><sp/>,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_COLORSPACE_SRGB,<sp/></highlight><highlight class="stringliteral">&quot;test-output/barbara-upsample-bilinear.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/>resize_image(barbara,<sp/>2,<sp/>2,<sp/>STBIR_FILTER_CUBICBSPLINE,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_COLORSPACE_SRGB,<sp/></highlight><highlight class="stringliteral">&quot;test-output/barbara-upsample-bicubic.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/>resize_image(barbara,<sp/>2,<sp/>2,<sp/>STBIR_FILTER_CATMULLROM<sp/><sp/>,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_COLORSPACE_SRGB,<sp/></highlight><highlight class="stringliteral">&quot;test-output/barbara-upsample-catmullrom.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/>resize_image(barbara,<sp/>2,<sp/>2,<sp/>STBIR_FILTER_MITCHELL<sp/><sp/><sp/><sp/>,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_COLORSPACE_SRGB,<sp/></highlight><highlight class="stringliteral">&quot;test-output/barbara-upsample-mitchell.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/>resize_image(barbara,<sp/>0.5f,<sp/>0.5f,<sp/>STBIR_FILTER_BOX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_COLORSPACE_SRGB,<sp/></highlight><highlight class="stringliteral">&quot;test-output/barbara-downsample-nearest.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/>resize_image(barbara,<sp/>0.5f,<sp/>0.5f,<sp/>STBIR_FILTER_TRIANGLE<sp/><sp/><sp/><sp/>,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_COLORSPACE_SRGB,<sp/></highlight><highlight class="stringliteral">&quot;test-output/barbara-downsample-bilinear.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/>resize_image(barbara,<sp/>0.5f,<sp/>0.5f,<sp/>STBIR_FILTER_CUBICBSPLINE,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_COLORSPACE_SRGB,<sp/></highlight><highlight class="stringliteral">&quot;test-output/barbara-downsample-bicubic.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/>resize_image(barbara,<sp/>0.5f,<sp/>0.5f,<sp/>STBIR_FILTER_CATMULLROM<sp/><sp/>,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_COLORSPACE_SRGB,<sp/></highlight><highlight class="stringliteral">&quot;test-output/barbara-downsample-catmullrom.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/>resize_image(barbara,<sp/>0.5f,<sp/>0.5f,<sp/>STBIR_FILTER_MITCHELL<sp/><sp/><sp/><sp/>,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_COLORSPACE_SRGB,<sp/></highlight><highlight class="stringliteral">&quot;test-output/barbara-downsample-mitchell.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>10;<sp/>i<sp/>&lt;<sp/>100;<sp/>i++)</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>outname[200];</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(outname,<sp/></highlight><highlight class="stringliteral">&quot;test-output/barbara-width-%d.jpg&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resize_image(barbara,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)i<sp/>/<sp/>100,<sp/>1,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_COLORSPACE_SRGB,<sp/>outname);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/>}}</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>110;<sp/>i<sp/>&lt;<sp/>500;<sp/>i<sp/>+=<sp/>10)</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>outname[200];</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(outname,<sp/></highlight><highlight class="stringliteral">&quot;test-output/barbara-width-%d.jpg&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resize_image(barbara,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)i<sp/>/<sp/>100,<sp/>1,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_COLORSPACE_SRGB,<sp/>outname);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/>}}</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>10;<sp/>i<sp/>&lt;<sp/>100;<sp/>i++)</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>outname[200];</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(outname,<sp/></highlight><highlight class="stringliteral">&quot;test-output/barbara-height-%d.jpg&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resize_image(barbara,<sp/>1,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)i<sp/>/<sp/>100,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_COLORSPACE_SRGB,<sp/>outname);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/>}}</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>110;<sp/>i<sp/>&lt;<sp/>500;<sp/>i<sp/>+=<sp/>10)</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>outname[200];</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(outname,<sp/></highlight><highlight class="stringliteral">&quot;test-output/barbara-height-%d.jpg&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resize_image(barbara,<sp/>1,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)i<sp/>/<sp/>100,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_COLORSPACE_SRGB,<sp/>outname);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>}}</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>50;<sp/>i<sp/>&lt;<sp/>200;<sp/>i<sp/>+=<sp/>10)</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>outname[200];</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(outname,<sp/></highlight><highlight class="stringliteral">&quot;test-output/barbara-width-height-%d.jpg&quot;</highlight><highlight class="normal">,<sp/>i);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resize_image(barbara,<sp/>100<sp/>/<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)i,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)i<sp/>/<sp/>100,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_COLORSPACE_SRGB,<sp/>outname);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>}}</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/>test_format&lt;unsigned<sp/>short&gt;(barbara,<sp/>0.5,<sp/>2.0,<sp/>STBIR_TYPE_UINT16,<sp/>STBIR_COLORSPACE_SRGB);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/>test_format&lt;unsigned<sp/>short&gt;(barbara,<sp/>0.5,<sp/>2.0,<sp/>STBIR_TYPE_UINT16,<sp/>STBIR_COLORSPACE_LINEAR);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/>test_format&lt;unsigned<sp/>short&gt;(barbara,<sp/>2.0,<sp/>0.5,<sp/>STBIR_TYPE_UINT16,<sp/>STBIR_COLORSPACE_SRGB);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/>test_format&lt;unsigned<sp/>short&gt;(barbara,<sp/>2.0,<sp/>0.5,<sp/>STBIR_TYPE_UINT16,<sp/>STBIR_COLORSPACE_LINEAR);</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/>test_format&lt;unsigned<sp/>int&gt;(barbara,<sp/>0.5,<sp/>2.0,<sp/>STBIR_TYPE_UINT32,<sp/>STBIR_COLORSPACE_SRGB);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/>test_format&lt;unsigned<sp/>int&gt;(barbara,<sp/>0.5,<sp/>2.0,<sp/>STBIR_TYPE_UINT32,<sp/>STBIR_COLORSPACE_LINEAR);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/>test_format&lt;unsigned<sp/>int&gt;(barbara,<sp/>2.0,<sp/>0.5,<sp/>STBIR_TYPE_UINT32,<sp/>STBIR_COLORSPACE_SRGB);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/>test_format&lt;unsigned<sp/>int&gt;(barbara,<sp/>2.0,<sp/>0.5,<sp/>STBIR_TYPE_UINT32,<sp/>STBIR_COLORSPACE_LINEAR);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/>test_float(barbara,<sp/>0.5,<sp/>2.0,<sp/>STBIR_TYPE_FLOAT,<sp/>STBIR_COLORSPACE_SRGB);</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/>test_float(barbara,<sp/>0.5,<sp/>2.0,<sp/>STBIR_TYPE_FLOAT,<sp/>STBIR_COLORSPACE_LINEAR);</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/>test_float(barbara,<sp/>2.0,<sp/>0.5,<sp/>STBIR_TYPE_FLOAT,<sp/>STBIR_COLORSPACE_SRGB);</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/>test_float(barbara,<sp/>2.0,<sp/>0.5,<sp/>STBIR_TYPE_FLOAT,<sp/>STBIR_COLORSPACE_LINEAR);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Edge<sp/>behavior<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/>resize_image(</highlight><highlight class="stringliteral">&quot;hgradient.png&quot;</highlight><highlight class="normal">,<sp/>2,<sp/>2,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_COLORSPACE_LINEAR,<sp/></highlight><highlight class="stringliteral">&quot;test-output/hgradient-clamp.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/>resize_image(</highlight><highlight class="stringliteral">&quot;hgradient.png&quot;</highlight><highlight class="normal">,<sp/>2,<sp/>2,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_EDGE_WRAP,<sp/>STBIR_COLORSPACE_LINEAR,<sp/></highlight><highlight class="stringliteral">&quot;test-output/hgradient-wrap.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>resize_image(</highlight><highlight class="stringliteral">&quot;vgradient.png&quot;</highlight><highlight class="normal">,<sp/>2,<sp/>2,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_COLORSPACE_LINEAR,<sp/></highlight><highlight class="stringliteral">&quot;test-output/vgradient-clamp.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/>resize_image(</highlight><highlight class="stringliteral">&quot;vgradient.png&quot;</highlight><highlight class="normal">,<sp/>2,<sp/>2,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_EDGE_WRAP,<sp/>STBIR_COLORSPACE_LINEAR,<sp/></highlight><highlight class="stringliteral">&quot;test-output/vgradient-wrap.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/>resize_image(</highlight><highlight class="stringliteral">&quot;1px-border.png&quot;</highlight><highlight class="normal">,<sp/>2,<sp/>2,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_EDGE_REFLECT,<sp/>STBIR_COLORSPACE_LINEAR,<sp/></highlight><highlight class="stringliteral">&quot;test-output/1px-border-reflect.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/>resize_image(</highlight><highlight class="stringliteral">&quot;1px-border.png&quot;</highlight><highlight class="normal">,<sp/>2,<sp/>2,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_EDGE_CLAMP,<sp/>STBIR_COLORSPACE_LINEAR,<sp/></highlight><highlight class="stringliteral">&quot;test-output/1px-border-clamp.png&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sRGB<sp/>tests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>resize_image(</highlight><highlight class="stringliteral">&quot;gamma_colors.jpg&quot;</highlight><highlight class="normal">,<sp/>.5f,<sp/>.5f,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_EDGE_REFLECT,<sp/>STBIR_COLORSPACE_SRGB,<sp/></highlight><highlight class="stringliteral">&quot;test-output/gamma_colors.jpg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>resize_image(</highlight><highlight class="stringliteral">&quot;gamma_2.2.jpg&quot;</highlight><highlight class="normal">,<sp/>.5f,<sp/>.5f,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_EDGE_REFLECT,<sp/>STBIR_COLORSPACE_SRGB,<sp/></highlight><highlight class="stringliteral">&quot;test-output/gamma_2.2.jpg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/>resize_image(</highlight><highlight class="stringliteral">&quot;gamma_dalai_lama_gray.jpg&quot;</highlight><highlight class="normal">,<sp/>.5f,<sp/>.5f,<sp/>STBIR_FILTER_CATMULLROM,<sp/>STBIR_EDGE_REFLECT,<sp/>STBIR_COLORSPACE_SRGB,<sp/></highlight><highlight class="stringliteral">&quot;test-output/gamma_dalai_lama_gray.jpg&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/resample_test.cpp"/>
  </compounddef>
</doxygen>
