<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="md___users_cwb_developer_learning_graphic_render_engine_ceres_3rdparty_spdlog__r_e_a_d_m_e" kind="page">
    <compoundname>md__Users_cwb_developer_learning_graphicRenderEngine_ceres_3rdparty_spdlog_README</compoundname>
    <title>spdlog</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Very fast, header-only/compiled, C++ logging library. <ulink url="https://app.travis-ci.com/gabime/spdlog"><image type="html" name="https://app.travis-ci.com/gabime/spdlog.svg?branch=v1.x" alt="Build Status" inline="yes"></image>
</ulink><nonbreakablespace/> <ulink url="https://ci.appveyor.com/project/gabime/spdlog"><image type="html" name="https://ci.appveyor.com/api/projects/status/d2jnxclg20vd0o50?svg=true&amp;branch=v1.x" alt="Build status" inline="yes"></image>
</ulink> <ulink url="https://github.com/gabime/spdlog/releases/latest"><image type="html" name="https://img.shields.io/github/release/gabime/spdlog.svg" alt="Release" inline="yes"></image>
</ulink></para>
<sect1 id="md___users_cwb_developer_learning_graphic_render_engine_ceres_3rdparty_spdlog__r_e_a_d_m_e_1autotoc_md561">
<title>Install</title>
<sect3 id="md___users_cwb_developer_learning_graphic_render_engine_ceres_3rdparty_spdlog__r_e_a_d_m_e_1autotoc_md562">
<title>Header only version</title>
<para>Copy the include <ulink url="https://github.com/gabime/spdlog/tree/v1.x/include/spdlog">folder</ulink> to your build tree and use a C++11 compiler.</para>
</sect3>
<sect3 id="md___users_cwb_developer_learning_graphic_render_engine_ceres_3rdparty_spdlog__r_e_a_d_m_e_1autotoc_md563">
<title>Static lib version (recommended - much faster compile times)</title>
<para><programlisting filename=".console"><codeline><highlight class="normal">$<sp/>git<sp/>clone<sp/>https://github.com/gabime/spdlog.git</highlight></codeline>
<codeline><highlight class="normal">$<sp/>cd<sp/>spdlog<sp/>&amp;&amp;<sp/>mkdir<sp/>build<sp/>&amp;&amp;<sp/>cd<sp/>build</highlight></codeline>
<codeline><highlight class="normal">$<sp/>cmake<sp/>..<sp/>&amp;&amp;<sp/>make<sp/>-j</highlight></codeline>
</programlisting></para>
<para>see example <ulink url="https://github.com/gabime/spdlog/blob/v1.x/example/CMakeLists.txt">CMakeLists.txt</ulink> on how to use.</para>
</sect3>
</sect1>
<sect1 id="md___users_cwb_developer_learning_graphic_render_engine_ceres_3rdparty_spdlog__r_e_a_d_m_e_1autotoc_md564">
<title>Platforms</title>
<para><itemizedlist>
<listitem><para>Linux, FreeBSD, OpenBSD, Solaris, AIX</para>
</listitem><listitem><para>Windows (msvc 2013+, cygwin)</para>
</listitem><listitem><para>macOS (clang 3.5+)</para>
</listitem><listitem><para>Android</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md___users_cwb_developer_learning_graphic_render_engine_ceres_3rdparty_spdlog__r_e_a_d_m_e_1autotoc_md565">
<title>Package managers:</title>
<para><itemizedlist>
<listitem><para>Debian: <computeroutput>sudo apt install libspdlog-dev</computeroutput></para>
</listitem><listitem><para>Homebrew: <computeroutput>brew install spdlog</computeroutput></para>
</listitem><listitem><para>MacPorts: <computeroutput>sudo port install spdlog</computeroutput></para>
</listitem><listitem><para>FreeBSD: <computeroutput>pkg install spdlog</computeroutput></para>
</listitem><listitem><para>Fedora: <computeroutput>dnf install spdlog</computeroutput></para>
</listitem><listitem><para>Gentoo: <computeroutput>emerge dev-libs/spdlog</computeroutput></para>
</listitem><listitem><para>Arch Linux: <computeroutput>pacman -S spdlog</computeroutput></para>
</listitem><listitem><para>vcpkg: <computeroutput>vcpkg install spdlog</computeroutput></para>
</listitem><listitem><para>conan: <computeroutput>spdlog/[&gt;=1.4.1]</computeroutput></para>
</listitem><listitem><para>conda: <computeroutput>conda install -c conda-forge spdlog</computeroutput></para>
</listitem><listitem><para>build2: <computeroutput>depends: spdlog ^1.8.2</computeroutput></para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md___users_cwb_developer_learning_graphic_render_engine_ceres_3rdparty_spdlog__r_e_a_d_m_e_1autotoc_md566">
<title>Features</title>
<para><itemizedlist>
<listitem><para>Very fast (see <ulink url="#benchmarks">benchmarks</ulink> below).</para>
</listitem><listitem><para>Headers only or compiled</para>
</listitem><listitem><para>Feature rich formatting, using the excellent <ulink url="https://github.com/fmtlib/fmt">fmt</ulink> library.</para>
</listitem><listitem><para>Asynchronous mode (optional)</para>
</listitem><listitem><para><ulink url="https://github.com/gabime/spdlog/wiki/3.-Custom-formatting">Custom</ulink> formatting.</para>
</listitem><listitem><para>Multi/Single threaded loggers.</para>
</listitem><listitem><para>Various log targets:<itemizedlist>
<listitem><para>Rotating log files.</para>
</listitem><listitem><para>Daily log files.</para>
</listitem><listitem><para>Console logging (colors supported).</para>
</listitem><listitem><para>syslog.</para>
</listitem><listitem><para>Windows event log.</para>
</listitem><listitem><para>Windows debugger (<computeroutput>OutputDebugString(..)</computeroutput>).</para>
</listitem><listitem><para>Easily <ulink url="https://github.com/gabime/spdlog/wiki/4.-Sinks#implementing-your-own-sink">extendable</ulink> with custom log targets.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>Log filtering - log levels can be modified in runtime as well as in compile time.</para>
</listitem><listitem><para>Support for loading log levels from argv or from environment var.</para>
</listitem><listitem><para><ulink url="#backtrace-support">Backtrace</ulink> support - store debug messages in a ring buffer and display later on demand.</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md___users_cwb_developer_learning_graphic_render_engine_ceres_3rdparty_spdlog__r_e_a_d_m_e_1autotoc_md567">
<title>Usage samples</title>
<sect3 id="md___users_cwb_developer_learning_graphic_render_engine_ceres_3rdparty_spdlog__r_e_a_d_m_e_1autotoc_md568">
<title>Basic usage</title>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;spdlog/spdlog.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int<sp/>main()<sp/></highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::info(&quot;Welcome<sp/>to<sp/>spdlog!&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::error(&quot;Some<sp/>error<sp/>message<sp/>with<sp/>arg:<sp/>{}&quot;,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::warn(&quot;Easy<sp/>padding<sp/>in<sp/>numbers<sp/>like<sp/>{:08d}&quot;,<sp/>12);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::critical(&quot;Support<sp/>for<sp/>int:<sp/>{0:d};<sp/><sp/>hex:<sp/>{0:x};<sp/><sp/>oct:<sp/>{0:o};<sp/>bin:<sp/>{0:b}&quot;,<sp/>42);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::info(&quot;Support<sp/>for<sp/>floats<sp/>{:03.2f}&quot;,<sp/>1.23456);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::info(&quot;Positional<sp/>args<sp/>are<sp/>{1}<sp/>{0}..&quot;,<sp/>&quot;too&quot;,<sp/>&quot;supported&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::info(&quot;{:&lt;30}&quot;,<sp/>&quot;left<sp/>aligned&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::set_level(spdlog::level::debug);<sp/>//<sp/>Set<sp/>global<sp/>log<sp/>level<sp/>to<sp/>debug</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::debug(&quot;This<sp/>message<sp/>should<sp/>be<sp/>displayed..&quot;);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>change<sp/>log<sp/>pattern</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::set_pattern(&quot;[%H:%M:%S<sp/>%z]<sp/>[%n]<sp/>[%^---%L---%$]<sp/>[thread<sp/>%t]<sp/>%v&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Compile<sp/>time<sp/>log<sp/>levels</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>define<sp/>SPDLOG_ACTIVE_LEVEL<sp/>to<sp/>desired<sp/>level</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SPDLOG_TRACE(&quot;Some<sp/>trace<sp/>message<sp/>with<sp/>param<sp/>{}&quot;,<sp/>42);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>SPDLOG_DEBUG(&quot;Some<sp/>debug<sp/>message&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <hruler/>
 </para>
</sect3>
<sect3 id="md___users_cwb_developer_learning_graphic_render_engine_ceres_3rdparty_spdlog__r_e_a_d_m_e_1autotoc_md570">
<title>Create stdout/stderr logger object</title>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;spdlog/spdlog.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;spdlog/sinks/stdout_color_sinks.h&quot;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>stdout_example()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>create<sp/>color<sp/>multi<sp/>threaded<sp/>logger</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>console<sp/>=<sp/>spdlog::stdout_color_mt(&quot;console&quot;);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>err_logger<sp/>=<sp/>spdlog::stderr_color_mt(&quot;stderr&quot;);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::get(&quot;console&quot;)-&gt;info(&quot;loggers<sp/>can<sp/>be<sp/>retrieved<sp/>from<sp/>a<sp/>global<sp/>registry<sp/>using<sp/>the<sp/>spdlog::get(logger_name)&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><hruler/>
 </para>
</sect3>
<sect3 id="md___users_cwb_developer_learning_graphic_render_engine_ceres_3rdparty_spdlog__r_e_a_d_m_e_1autotoc_md572">
<title>Basic file logger</title>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;spdlog/sinks/basic_file_sink.h&quot;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>basic_logfile_example()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>try<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>logger<sp/>=<sp/>spdlog::basic_logger_mt(&quot;basic_logger&quot;,<sp/>&quot;logs/basic-log.txt&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>catch<sp/>(const<sp/>spdlog::spdlog_ex<sp/>&amp;ex)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Log<sp/>init<sp/>failed:<sp/>&quot;<sp/>&lt;&lt;<sp/>ex.what()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <hruler/>
 </para>
</sect3>
<sect3 id="md___users_cwb_developer_learning_graphic_render_engine_ceres_3rdparty_spdlog__r_e_a_d_m_e_1autotoc_md574">
<title>Rotating files</title>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;spdlog/sinks/rotating_file_sink.h&quot;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>rotating_example()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Create<sp/>a<sp/>file<sp/>rotating<sp/>logger<sp/>with<sp/>5mb<sp/>size<sp/>max<sp/>and<sp/>3<sp/>rotated<sp/>files</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>max_size<sp/>=<sp/>1048576<sp/>*<sp/>5;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>max_files<sp/>=<sp/>3;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>logger<sp/>=<sp/>spdlog::rotating_logger_mt(&quot;some_logger_name&quot;,<sp/>&quot;logs/rotating.txt&quot;,<sp/>max_size,<sp/>max_files);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><hruler/>
 </para>
</sect3>
<sect3 id="md___users_cwb_developer_learning_graphic_render_engine_ceres_3rdparty_spdlog__r_e_a_d_m_e_1autotoc_md576">
<title>Daily files</title>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;spdlog/sinks/daily_file_sink.h&quot;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>daily_example()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Create<sp/>a<sp/>daily<sp/>logger<sp/>-<sp/>a<sp/>new<sp/>file<sp/>is<sp/>created<sp/>every<sp/>day<sp/>on<sp/>2:30am</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>logger<sp/>=<sp/>spdlog::daily_logger_mt(&quot;daily_logger&quot;,<sp/>&quot;logs/daily.txt&quot;,<sp/>2,<sp/>30);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><hruler/>
 </para>
</sect3>
<sect3 id="md___users_cwb_developer_learning_graphic_render_engine_ceres_3rdparty_spdlog__r_e_a_d_m_e_1autotoc_md578">
<title>Backtrace support</title>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Debug<sp/>messages<sp/>can<sp/>be<sp/>stored<sp/>in<sp/>a<sp/>ring<sp/>buffer<sp/>instead<sp/>of<sp/>being<sp/>logged<sp/>immediately.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>This<sp/>is<sp/>useful<sp/>in<sp/>order<sp/>to<sp/>display<sp/>debug<sp/>logs<sp/>only<sp/>when<sp/>really<sp/>needed<sp/>(e.g.<sp/>when<sp/>error<sp/>happens).</highlight></codeline>
<codeline><highlight class="normal">//<sp/>When<sp/>needed,<sp/>call<sp/>dump_backtrace()<sp/>to<sp/>see<sp/>them.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">spdlog::enable_backtrace(32);<sp/>//<sp/>Store<sp/>the<sp/>latest<sp/>32<sp/>messages<sp/>in<sp/>a<sp/>buffer.<sp/>Older<sp/>messages<sp/>will<sp/>be<sp/>dropped.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>or<sp/>my_logger-&gt;enable_backtrace(32)..</highlight></codeline>
<codeline><highlight class="normal">for(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>100;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>spdlog::debug(&quot;Backtrace<sp/>message<sp/>{}&quot;,<sp/>i);<sp/>//<sp/>not<sp/>logged<sp/>yet..</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">//<sp/>e.g.<sp/>if<sp/>some<sp/>error<sp/>happened:</highlight></codeline>
<codeline><highlight class="normal">spdlog::dump_backtrace();<sp/>//<sp/>log<sp/>them<sp/>now!<sp/>show<sp/>the<sp/>last<sp/>32<sp/>messages</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>or<sp/>my_logger-&gt;dump_backtrace(32)..</highlight></codeline>
</programlisting></para>
<para><hruler/>
 </para>
</sect3>
<sect3 id="md___users_cwb_developer_learning_graphic_render_engine_ceres_3rdparty_spdlog__r_e_a_d_m_e_1autotoc_md580">
<title>Periodic flush</title>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">//<sp/>periodically<sp/>flush<sp/>all<sp/>*registered*<sp/>loggers<sp/>every<sp/>3<sp/>seconds:</highlight></codeline>
<codeline><highlight class="normal">//<sp/>warning:<sp/>only<sp/>use<sp/>if<sp/>all<sp/>your<sp/>loggers<sp/>are<sp/>thread<sp/>safe<sp/>(&quot;_mt&quot;<sp/>loggers)</highlight></codeline>
<codeline><highlight class="normal">spdlog::flush_every(std::chrono::seconds(3));</highlight></codeline>
</programlisting></para>
<para><hruler/>
 </para>
</sect3>
<sect3 id="md___users_cwb_developer_learning_graphic_render_engine_ceres_3rdparty_spdlog__r_e_a_d_m_e_1autotoc_md582">
<title>Stopwatch</title>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Stopwatch<sp/>support<sp/>for<sp/>spdlog</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;spdlog/stopwatch.h&quot;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>stopwatch_example()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::stopwatch<sp/>sw;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::debug(&quot;Elapsed<sp/>{}&quot;,<sp/>sw);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::debug(&quot;Elapsed<sp/>{:.3}&quot;,<sp/>sw);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><hruler/>
 </para>
</sect3>
<sect3 id="md___users_cwb_developer_learning_graphic_render_engine_ceres_3rdparty_spdlog__r_e_a_d_m_e_1autotoc_md584">
<title>Log binary data in hex</title>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">//<sp/>many<sp/>types<sp/>of<sp/>std::container&lt;char&gt;<sp/>types<sp/>can<sp/>be<sp/>used.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>ranges<sp/>are<sp/>supported<sp/>too.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>format<sp/>flags:</highlight></codeline>
<codeline><highlight class="normal">//<sp/>{:X}<sp/>-<sp/>print<sp/>in<sp/>uppercase.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>{:s}<sp/>-<sp/>don&apos;t<sp/>separate<sp/>each<sp/>byte<sp/>with<sp/>space.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>{:p}<sp/>-<sp/>don&apos;t<sp/>print<sp/>the<sp/>position<sp/>on<sp/>each<sp/>line<sp/>start.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>{:n}<sp/>-<sp/>don&apos;t<sp/>split<sp/>the<sp/>output<sp/>to<sp/>lines.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>{:a}<sp/>-<sp/>show<sp/>ASCII<sp/>if<sp/>:n<sp/>is<sp/>not<sp/>set.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;spdlog/fmt/bin_to_hex.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>binary_example()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>console<sp/>=<sp/>spdlog::get(&quot;console&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;char,<sp/>80&gt;<sp/>buf;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>console-&gt;info(&quot;Binary<sp/>example:<sp/>{}&quot;,<sp/>spdlog::to_hex(buf));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>console-&gt;info(&quot;Another<sp/>binary<sp/>example:{:n}&quot;,<sp/>spdlog::to_hex(std::begin(buf),<sp/>std::begin(buf)<sp/>+<sp/>10));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>more<sp/>examples:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>logger-&gt;info(&quot;uppercase:<sp/>{:X}&quot;,<sp/>spdlog::to_hex(buf));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>logger-&gt;info(&quot;uppercase,<sp/>no<sp/>delimiters:<sp/>{:Xs}&quot;,<sp/>spdlog::to_hex(buf));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>logger-&gt;info(&quot;uppercase,<sp/>no<sp/>delimiters,<sp/>no<sp/>position<sp/>info:<sp/>{:Xsp}&quot;,<sp/>spdlog::to_hex(buf));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><hruler/>
 </para>
</sect3>
<sect3 id="md___users_cwb_developer_learning_graphic_render_engine_ceres_3rdparty_spdlog__r_e_a_d_m_e_1autotoc_md586">
<title>Logger with multi sinks - each with different format and log level</title>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>create<sp/>logger<sp/>with<sp/>2<sp/>targets<sp/>with<sp/>different<sp/>log<sp/>levels<sp/>and<sp/>formats.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>the<sp/>console<sp/>will<sp/>show<sp/>only<sp/>warnings<sp/>or<sp/>errors,<sp/>while<sp/>the<sp/>file<sp/>will<sp/>log<sp/>all.</highlight></codeline>
<codeline><highlight class="normal">void<sp/>multi_sink_example()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>console_sink<sp/>=<sp/>std::make_shared&lt;spdlog::sinks::stdout_color_sink_mt&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>console_sink-&gt;set_level(spdlog::level::warn);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>console_sink-&gt;set_pattern(&quot;[multi_sink_example]<sp/>[%^%l%$]<sp/>%v&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>file_sink<sp/>=<sp/>std::make_shared&lt;spdlog::sinks::basic_file_sink_mt&gt;(&quot;logs/multisink.txt&quot;,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>file_sink-&gt;set_level(spdlog::level::trace);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::logger<sp/>logger(&quot;multi_sink&quot;,<sp/>{console_sink,<sp/>file_sink});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>logger.set_level(spdlog::level::debug);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>logger.warn(&quot;this<sp/>should<sp/>appear<sp/>in<sp/>both<sp/>console<sp/>and<sp/>file&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>logger.info(&quot;this<sp/>message<sp/>should<sp/>not<sp/>appear<sp/>in<sp/>the<sp/>console,<sp/>only<sp/>in<sp/>the<sp/>file&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><hruler/>
 </para>
</sect3>
<sect3 id="md___users_cwb_developer_learning_graphic_render_engine_ceres_3rdparty_spdlog__r_e_a_d_m_e_1autotoc_md588">
<title>Asynchronous logging</title>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;spdlog/async.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;spdlog/sinks/basic_file_sink.h&quot;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>async_example()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>default<sp/>thread<sp/>pool<sp/>settings<sp/>can<sp/>be<sp/>modified<sp/>*before*<sp/>creating<sp/>the<sp/>async<sp/>logger:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>spdlog::init_thread_pool(8192,<sp/>1);<sp/>//<sp/>queue<sp/>with<sp/>8k<sp/>items<sp/>and<sp/>1<sp/>backing<sp/>thread.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>async_file<sp/>=<sp/>spdlog::basic_logger_mt&lt;spdlog::async_factory&gt;(&quot;async_file_logger&quot;,<sp/>&quot;logs/async_log.txt&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>alternatively:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>auto<sp/>async_file<sp/>=<sp/>spdlog::create_async&lt;spdlog::sinks::basic_file_sink_mt&gt;(&quot;async_file_logger&quot;,<sp/>&quot;logs/async_log.txt&quot;);<sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><hruler/>
 </para>
</sect3>
<sect3 id="md___users_cwb_developer_learning_graphic_render_engine_ceres_3rdparty_spdlog__r_e_a_d_m_e_1autotoc_md590">
<title>Asynchronous logger with multi sinks</title>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;spdlog/sinks/stdout_color_sinks.h&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;spdlog/sinks/rotating_file_sink.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>multi_sink_example2()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::init_thread_pool(8192,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>stdout_sink<sp/>=<sp/>std::make_shared&lt;spdlog::sinks::stdout_color_sink_mt<sp/>&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>rotating_sink<sp/>=<sp/>std::make_shared&lt;spdlog::sinks::rotating_file_sink_mt&gt;(&quot;mylog.txt&quot;,<sp/>1024*1024*10,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;spdlog::sink_ptr&gt;<sp/>sinks<sp/>{stdout_sink,<sp/>rotating_sink};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>logger<sp/>=<sp/>std::make_shared&lt;spdlog::async_logger&gt;(&quot;loggername&quot;,<sp/>sinks.begin(),<sp/>sinks.end(),<sp/>spdlog::thread_pool(),<sp/>spdlog::async_overflow_policy::block);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::register_logger(logger);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><hruler/>
 </para>
</sect3>
<sect3 id="md___users_cwb_developer_learning_graphic_render_engine_ceres_3rdparty_spdlog__r_e_a_d_m_e_1autotoc_md592">
<title>User defined types</title>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">//<sp/>user<sp/>defined<sp/>types<sp/>logging<sp/>by<sp/>implementing<sp/>operator&lt;&lt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;spdlog/fmt/ostr.h&quot;<sp/>//<sp/>must<sp/>be<sp/>included</highlight></codeline>
<codeline><highlight class="normal">struct<sp/>my_type</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>i;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>template&lt;typename<sp/>OStream&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>friend<sp/>OStream<sp/>&amp;operator&lt;&lt;(OStream<sp/>&amp;os,<sp/>const<sp/>my_type<sp/>&amp;c)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>os<sp/>&lt;&lt;<sp/>&quot;[my_type<sp/>i=&quot;<sp/>&lt;&lt;<sp/>c.i<sp/>&lt;&lt;<sp/>&quot;]&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>user_defined_example()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::get(&quot;console&quot;)-&gt;info(&quot;user<sp/>defined<sp/>type:<sp/>{}&quot;,<sp/>my_type{14});</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><hruler/>
 </para>
</sect3>
<sect3 id="md___users_cwb_developer_learning_graphic_render_engine_ceres_3rdparty_spdlog__r_e_a_d_m_e_1autotoc_md594">
<title>User defined flags in the log pattern</title>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Log<sp/>patterns<sp/>can<sp/>contain<sp/>custom<sp/>flags.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>the<sp/>following<sp/>example<sp/>will<sp/>add<sp/>new<sp/>flag<sp/>&apos;%*&apos;<sp/>-<sp/>which<sp/>will<sp/>be<sp/>bound<sp/>to<sp/>a<sp/>&lt;my_formatter_flag&gt;<sp/>instance.</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;spdlog/pattern_formatter.h&quot;</highlight></codeline>
<codeline><highlight class="normal">class<sp/>my_formatter_flag<sp/>:<sp/>public<sp/>spdlog::custom_flag_formatter</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal">public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>format(const<sp/>spdlog::details::log_msg<sp/>&amp;,<sp/>const<sp/>std::tm<sp/>&amp;,<sp/>spdlog::memory_buf_t<sp/>&amp;dest)<sp/>override</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>some_txt<sp/>=<sp/>&quot;custom-flag&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest.append(some_txt.data(),<sp/>some_txt.data()<sp/>+<sp/>some_txt.size());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;custom_flag_formatter&gt;<sp/>clone()<sp/>const<sp/>override</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>spdlog::details::make_unique&lt;my_formatter_flag&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>custom_flags_example()</highlight></codeline>
<codeline><highlight class="normal">{<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>formatter<sp/>=<sp/>std::make_unique&lt;spdlog::pattern_formatter&gt;();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>formatter-&gt;add_flag&lt;my_formatter_flag&gt;(&apos;*&apos;).set_pattern(&quot;[%n]<sp/>[%*]<sp/>[%^%l%$]<sp/>%v&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::set_formatter(std::move(formatter));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><hruler/>
 </para>
</sect3>
<sect3 id="md___users_cwb_developer_learning_graphic_render_engine_ceres_3rdparty_spdlog__r_e_a_d_m_e_1autotoc_md596">
<title>Custom error handler</title>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">void<sp/>err_handler_example()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>can<sp/>be<sp/>set<sp/>globally<sp/>or<sp/>per<sp/>logger(logger-&gt;set_error_handler(..))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::set_error_handler([](const<sp/>std::string<sp/>&amp;msg)<sp/>{<sp/>spdlog::get(&quot;console&quot;)-&gt;error(&quot;***<sp/>LOGGER<sp/>ERROR<sp/>***:<sp/>{}&quot;,<sp/>msg);<sp/>});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::get(&quot;console&quot;)-&gt;info(&quot;some<sp/>invalid<sp/>message<sp/>to<sp/>trigger<sp/>an<sp/>error<sp/>{}{}{}{}&quot;,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><hruler/>
 </para>
</sect3>
<sect3 id="md___users_cwb_developer_learning_graphic_render_engine_ceres_3rdparty_spdlog__r_e_a_d_m_e_1autotoc_md598">
<title>syslog</title>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;spdlog/sinks/syslog_sink.h&quot;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>syslog_example()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>ident<sp/>=<sp/>&quot;spdlog-example&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>syslog_logger<sp/>=<sp/>spdlog::syslog_logger_mt(&quot;syslog&quot;,<sp/>ident,<sp/>LOG_PID);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>syslog_logger-&gt;warn(&quot;This<sp/>is<sp/>warning<sp/>that<sp/>will<sp/>end<sp/>up<sp/>in<sp/>syslog.&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <hruler/>
 </para>
</sect3>
<sect3 id="md___users_cwb_developer_learning_graphic_render_engine_ceres_3rdparty_spdlog__r_e_a_d_m_e_1autotoc_md600">
<title>Android example</title>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;spdlog/sinks/android_sink.h&quot;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>android_example()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>tag<sp/>=<sp/>&quot;spdlog-android&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>android_logger<sp/>=<sp/>spdlog::android_logger_mt(&quot;android&quot;,<sp/>tag);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>android_logger-&gt;critical(&quot;Use<sp/>\&quot;adb<sp/>shell<sp/>logcat\&quot;<sp/>to<sp/>view<sp/>this<sp/>message.&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><hruler/>
 </para>
</sect3>
<sect3 id="md___users_cwb_developer_learning_graphic_render_engine_ceres_3rdparty_spdlog__r_e_a_d_m_e_1autotoc_md602">
<title>Load log levels from env variable or from argv</title>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;spdlog/cfg/env.h&quot;</highlight></codeline>
<codeline><highlight class="normal">int<sp/>main<sp/>(int<sp/>argc,<sp/>char<sp/>*argv[])</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::cfg::load_env_levels();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>or<sp/>from<sp/>command<sp/>line:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>./example<sp/>SPDLOG_LEVEL=info,mylogger=trace</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>#include<sp/>&quot;spdlog/cfg/argv.h&quot;<sp/>//<sp/>for<sp/>loading<sp/>levels<sp/>from<sp/>argv</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>spdlog::cfg::load_argv_levels(argc,<sp/>argv);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> So then you can:</para>
<para><programlisting filename=".console"><codeline><highlight class="normal">$<sp/>export<sp/>SPDLOG_LEVEL=info,mylogger=trace</highlight></codeline>
<codeline><highlight class="normal">$<sp/>./example</highlight></codeline>
</programlisting></para>
<para><hruler/>
 </para>
</sect3>
<sect3 id="md___users_cwb_developer_learning_graphic_render_engine_ceres_3rdparty_spdlog__r_e_a_d_m_e_1autotoc_md604">
<title>Log file open/close event handlers</title>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">//<sp/>You<sp/>can<sp/>get<sp/>callbacks<sp/>from<sp/>spdlog<sp/>before/after<sp/>log<sp/>file<sp/>has<sp/>been<sp/>opened<sp/>or<sp/>closed.<sp/></highlight></codeline>
<codeline><highlight class="normal">//<sp/>This<sp/>is<sp/>useful<sp/>for<sp/>cleanup<sp/>procedures<sp/>or<sp/>for<sp/>adding<sp/>someting<sp/>the<sp/>start/end<sp/>of<sp/>the<sp/>log<sp/>files.</highlight></codeline>
<codeline><highlight class="normal">void<sp/>file_events_example()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>pass<sp/>the<sp/>spdlog::file_event_handlers<sp/>to<sp/>file<sp/>sinks<sp/>for<sp/>open/close<sp/>log<sp/>file<sp/>notifications</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::file_event_handlers<sp/>handlers;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>handlers.before_open<sp/>=<sp/>[](spdlog::filename_t<sp/>filename)<sp/>{<sp/>spdlog::info(&quot;Before<sp/>opening<sp/>{}&quot;,<sp/>filename);<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>handlers.after_open<sp/>=<sp/>[](spdlog::filename_t<sp/>filename,<sp/>std::FILE<sp/>*fstream)<sp/>{<sp/>fputs(&quot;After<sp/>opening\n&quot;,<sp/>fstream);<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>handlers.before_close<sp/>=<sp/>[](spdlog::filename_t<sp/>filename,<sp/>std::FILE<sp/>*fstream)<sp/>{<sp/>fputs(&quot;Before<sp/>closing\n&quot;,<sp/>fstream);<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>handlers.after_close<sp/>=<sp/>[](spdlog::filename_t<sp/>filename)<sp/>{<sp/>spdlog::info(&quot;After<sp/>closing<sp/>{}&quot;,<sp/>filename);<sp/>};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>my_logger<sp/>=<sp/>spdlog::basic_logger_st(&quot;some_logger&quot;,<sp/>&quot;logs/events-sample.txt&quot;,<sp/>true,<sp/>handlers);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><hruler/>
 </para>
</sect3>
<sect3 id="md___users_cwb_developer_learning_graphic_render_engine_ceres_3rdparty_spdlog__r_e_a_d_m_e_1autotoc_md606">
<title>Replace the Default Logger</title>
<para><programlisting><codeline><highlight class="normal"><sp/>{c++}</highlight></codeline>
<codeline><highlight class="normal">void<sp/>replace_default_logger_example()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>new_logger<sp/>=<sp/>spdlog::basic_logger_mt(&quot;new_default_logger&quot;,<sp/>&quot;logs/new-default-log.txt&quot;,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::set_default_logger(new_logger);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::info(&quot;new<sp/>logger<sp/>log<sp/>message&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><hruler/>
 </para>
</sect3>
</sect1>
<sect1 id="md___users_cwb_developer_learning_graphic_render_engine_ceres_3rdparty_spdlog__r_e_a_d_m_e_1autotoc_md608">
<title>Benchmarks</title>
<para>Below are some <ulink url="https://github.com/gabime/spdlog/blob/v1.x/bench/bench.cpp">benchmarks</ulink> done in Ubuntu 64 bit, Intel i7-4770 CPU @ 3.40GHz</para>
<sect3 id="md___users_cwb_developer_learning_graphic_render_engine_ceres_3rdparty_spdlog__r_e_a_d_m_e_1autotoc_md609">
<title>Synchronous mode</title>
<para><programlisting><codeline><highlight class="normal">[info]<sp/>**************************************************************</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>Single<sp/>thread,<sp/>1,000,000<sp/>iterations</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>**************************************************************</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>basic_st<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Elapsed:<sp/>0.17<sp/>secs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5,777,626/sec</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>rotating_st<sp/><sp/><sp/><sp/><sp/><sp/>Elapsed:<sp/>0.18<sp/>secs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5,475,894/sec</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>daily_st<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Elapsed:<sp/>0.20<sp/>secs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5,062,659/sec</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>empty_logger<sp/><sp/><sp/><sp/><sp/>Elapsed:<sp/>0.07<sp/>secs<sp/><sp/><sp/><sp/><sp/><sp/><sp/>14,127,300/sec</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>**************************************************************</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>C-string<sp/>(400<sp/>bytes).<sp/>Single<sp/>thread,<sp/>1,000,000<sp/>iterations</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>**************************************************************</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>basic_st<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Elapsed:<sp/>0.41<sp/>secs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2,412,483/sec</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>rotating_st<sp/><sp/><sp/><sp/><sp/><sp/>Elapsed:<sp/>0.72<sp/>secs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,389,196/sec</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>daily_st<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Elapsed:<sp/>0.42<sp/>secs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2,393,298/sec</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>null_st<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Elapsed:<sp/>0.04<sp/>secs<sp/><sp/><sp/><sp/><sp/><sp/><sp/>27,446,957/sec</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>**************************************************************</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>10<sp/>threads,<sp/>competing<sp/>over<sp/>the<sp/>same<sp/>logger<sp/>object,<sp/>1,000,000<sp/>iterations</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>**************************************************************</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>basic_mt<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Elapsed:<sp/>0.60<sp/>secs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,659,613/sec</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>rotating_mt<sp/><sp/><sp/><sp/><sp/><sp/>Elapsed:<sp/>0.62<sp/>secs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,612,493/sec</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>daily_mt<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Elapsed:<sp/>0.61<sp/>secs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,638,305/sec</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>null_mt<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Elapsed:<sp/>0.16<sp/>secs<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>6,272,758/sec</highlight></codeline>
</programlisting> </para>
</sect3>
<sect3 id="md___users_cwb_developer_learning_graphic_render_engine_ceres_3rdparty_spdlog__r_e_a_d_m_e_1autotoc_md610">
<title>Asynchronous mode</title>
<para><programlisting><codeline><highlight class="normal">[info]<sp/>-------------------------------------------------</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>Messages<sp/><sp/><sp/><sp/><sp/>:<sp/>1,000,000</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>Threads<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>10</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>Queue<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>8,192<sp/>slots</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>Queue<sp/>memory<sp/>:<sp/>8,192<sp/>x<sp/>272<sp/>=<sp/>2,176<sp/>KB<sp/></highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>-------------------------------------------------</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/></highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>*********************************</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>Queue<sp/>Overflow<sp/>Policy:<sp/>block</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>*********************************</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>Elapsed:<sp/>1.70784<sp/>secs<sp/><sp/><sp/><sp/><sp/>585,535/sec</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>Elapsed:<sp/>1.69805<sp/>secs<sp/><sp/><sp/><sp/><sp/>588,910/sec</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>Elapsed:<sp/>1.7026<sp/>secs<sp/><sp/><sp/><sp/><sp/><sp/>587,337/sec</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/></highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>*********************************</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>Queue<sp/>Overflow<sp/>Policy:<sp/>overrun</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>*********************************</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>Elapsed:<sp/>0.372816<sp/>secs<sp/><sp/><sp/><sp/>2,682,285/sec</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>Elapsed:<sp/>0.379758<sp/>secs<sp/><sp/><sp/><sp/>2,633,255/sec</highlight></codeline>
<codeline><highlight class="normal">[info]<sp/>Elapsed:<sp/>0.373532<sp/>secs<sp/><sp/><sp/><sp/>2,677,147/sec</highlight></codeline>
</programlisting></para>
</sect3>
</sect1>
<sect1 id="md___users_cwb_developer_learning_graphic_render_engine_ceres_3rdparty_spdlog__r_e_a_d_m_e_1autotoc_md611">
<title>Documentation</title>
<para>Documentation can be found in the <ulink url="https://github.com/gabime/spdlog/wiki/1.-QuickStart">wiki</ulink> pages.</para>
<para><hruler/>
</para>
<para>Thanks to <ulink url="https://www.jetbrains.com/?from=spdlog">JetBrains</ulink> for donating product licenses to help develop <bold>spdlog</bold> <ulink url="https://www.jetbrains.com/?from=spdlog"><image type="html" name="logos/jetbrains-variant-4.svg" inline="yes"></image>
</ulink> </para>
</sect1>
    </detaileddescription>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/README.md"/>
  </compounddef>
</doxygen>
