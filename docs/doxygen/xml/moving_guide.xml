<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="moving_guide" kind="page">
    <compoundname>moving_guide</compoundname>
    <title>Moving from GLFW 2 to 3</title>
    <tableofcontents>
      <tocsect>
        <name>Changed and removed features</name>
        <reference>moving_guide_1moving_removed</reference>
    <tableofcontents>
      <tocsect>
        <name>Renamed library and header file</name>
        <reference>moving_guide_1moving_renamed_files</reference>
    </tocsect>
      <tocsect>
        <name>Removal of threading functions</name>
        <reference>moving_guide_1moving_threads</reference>
    </tocsect>
      <tocsect>
        <name>Removal of image and texture loading</name>
        <reference>moving_guide_1moving_image</reference>
    </tocsect>
      <tocsect>
        <name>Removal of GLFWCALL macro</name>
        <reference>moving_guide_1moving_stdcall</reference>
    </tocsect>
      <tocsect>
        <name>Window handle parameters</name>
        <reference>moving_guide_1moving_window_handles</reference>
    </tocsect>
      <tocsect>
        <name>Explicit monitor selection</name>
        <reference>moving_guide_1moving_monitor</reference>
    </tocsect>
      <tocsect>
        <name>Removal of automatic event polling</name>
        <reference>moving_guide_1moving_autopoll</reference>
    </tocsect>
      <tocsect>
        <name>Explicit context management</name>
        <reference>moving_guide_1moving_context</reference>
    </tocsect>
      <tocsect>
        <name>Separation of window and framebuffer sizes</name>
        <reference>moving_guide_1moving_hidpi</reference>
    </tocsect>
      <tocsect>
        <name>Window closing changes</name>
        <reference>moving_guide_1moving_window_close</reference>
    </tocsect>
      <tocsect>
        <name>Persistent window hints</name>
        <reference>moving_guide_1moving_hints</reference>
    </tocsect>
      <tocsect>
        <name>Video mode enumeration</name>
        <reference>moving_guide_1moving_video_modes</reference>
    </tocsect>
      <tocsect>
        <name>Removal of character actions</name>
        <reference>moving_guide_1moving_char_up</reference>
    </tocsect>
      <tocsect>
        <name>Cursor position changes</name>
        <reference>moving_guide_1moving_cursorpos</reference>
    </tocsect>
      <tocsect>
        <name>Wheel position replaced by scroll offsets</name>
        <reference>moving_guide_1moving_wheel</reference>
    </tocsect>
      <tocsect>
        <name>Key repeat action</name>
        <reference>moving_guide_1moving_repeat</reference>
    </tocsect>
      <tocsect>
        <name>Physical key input</name>
        <reference>moving_guide_1moving_keys</reference>
    </tocsect>
      <tocsect>
        <name>Joystick function changes</name>
        <reference>moving_guide_1moving_joystick</reference>
    </tocsect>
      <tocsect>
        <name>Win32 MBCS support</name>
        <reference>moving_guide_1moving_mbcs</reference>
    </tocsect>
      <tocsect>
        <name>Support for versions of Windows older than XP</name>
        <reference>moving_guide_1moving_windows</reference>
    </tocsect>
      <tocsect>
        <name>Capture of system-wide hotkeys</name>
        <reference>moving_guide_1moving_syskeys</reference>
    </tocsect>
      <tocsect>
        <name>Automatic termination</name>
        <reference>moving_guide_1moving_terminate</reference>
    </tocsect>
      <tocsect>
        <name>GLU header inclusion</name>
        <reference>moving_guide_1moving_glu</reference>
    </tocsect>
    </tableofcontents>
    </tocsect>
      <tocsect>
        <name>Name change tables</name>
        <reference>moving_guide_1moving_tables</reference>
    <tableofcontents>
      <tocsect>
        <name>Renamed functions</name>
        <reference>moving_guide_1moving_renamed_functions</reference>
    </tocsect>
      <tocsect>
        <name>Renamed types</name>
        <reference>moving_guide_1moving_renamed_types</reference>
    </tocsect>
      <tocsect>
        <name>Renamed tokens</name>
        <reference>moving_guide_1moving_renamed_tokens</reference>
    </tocsect>
    </tableofcontents>
    </tocsect>
    </tableofcontents>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This is a transition guide for moving from GLFW 2 to 3. It describes what has changed or been removed, but does <emphasis>not</emphasis> include <ref refid="news" kindref="compound">new features</ref> unless they are required when moving an existing code base onto the new API. For example, the new multi-monitor functions are required to create full screen windows with GLFW 3.</para>
<sect1 id="moving_guide_1moving_removed">
<title>Changed and removed features</title>
<sect2 id="moving_guide_1moving_renamed_files">
<title>Renamed library and header file</title>
<para>The GLFW 3 header is named <ref refid="imgui_2examples_2libs_2glfw_2include_2_g_l_f_w_2glfw3_8h" kindref="compound">glfw3.h</ref> and moved to the <computeroutput>GLFW</computeroutput> directory, to avoid collisions with the headers of other major versions. Similarly, the GLFW 3 library is named <computeroutput>glfw3,</computeroutput> except when it&apos;s installed as a shared library on Unix-like systems, where it uses the <ulink url="https://en.wikipedia.org/wiki/soname">soname</ulink> <computeroutput>libglfw.so.3</computeroutput>.</para>
<para><simplesect kind="par"><title>Old syntax</title><para><programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;GL/glfw.h&gt;</highlight></codeline>
</programlisting></para>
</simplesect>
<simplesect kind="par"><title>New syntax</title><para><programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;GLFW/glfw3.h&gt;</highlight></codeline>
</programlisting></para>
</simplesect>
</para>
</sect2>
<sect2 id="moving_guide_1moving_threads">
<title>Removal of threading functions</title>
<para>The threading functions have been removed, including the per-thread sleep function. They were fairly primitive, under-used, poorly integrated and took time away from the focus of GLFW (i.e. context, input and window). There are better threading libraries available and native threading support is available in both <ulink url="https://en.cppreference.com/w/cpp/thread">C++11</ulink> and <ulink url="https://en.cppreference.com/w/c/thread">C11</ulink>, both of which are gaining traction.</para>
<para>If you wish to use the C++11 or C11 facilities but your compiler doesn&apos;t yet support them, see the <ulink url="https://gitorious.org/tinythread/tinythreadpp">TinyThread++</ulink> and <ulink url="https://github.com/tinycthread/tinycthread">TinyCThread</ulink> projects created by the original author of GLFW. These libraries implement a usable subset of the threading APIs in C++11 and C11, and in fact some GLFW 3 test programs use TinyCThread.</para>
<para>However, GLFW 3 has better support for <emphasis>use from multiple threads</emphasis> than GLFW 2 had. Contexts can be made current on any thread, although only a single thread at a time, and the documentation explicitly states which functions may be used from any thread and which must only be used from the main thread.</para>
<para><simplesect kind="par"><title>Removed functions</title><para><computeroutput>glfwSleep</computeroutput>, <computeroutput>glfwCreateThread</computeroutput>, <computeroutput>glfwDestroyThread</computeroutput>, <computeroutput>glfwWaitThread</computeroutput>, <computeroutput>glfwGetThreadID</computeroutput>, <computeroutput>glfwCreateMutex</computeroutput>, <computeroutput>glfwDestroyMutex</computeroutput>, <computeroutput>glfwLockMutex</computeroutput>, <computeroutput>glfwUnlockMutex</computeroutput>, <computeroutput>glfwCreateCond</computeroutput>, <computeroutput>glfwDestroyCond</computeroutput>, <computeroutput>glfwWaitCond</computeroutput>, <computeroutput>glfwSignalCond</computeroutput>, <computeroutput>glfwBroadcastCond</computeroutput> and <computeroutput>glfwGetNumberOfProcessors</computeroutput>.</para>
</simplesect>
<simplesect kind="par"><title>Removed types</title><para><computeroutput>GLFWthreadfun</computeroutput></para>
</simplesect>
</para>
</sect2>
<sect2 id="moving_guide_1moving_image">
<title>Removal of image and texture loading</title>
<para>The image and texture loading functions have been removed. They only supported the Targa image format, making them mostly useful for beginner level examples. To become of sufficiently high quality to warrant keeping them in GLFW 3, they would need not only to support other formats, but also modern extensions to OpenGL texturing. This would either add a number of external dependencies (libjpeg, libpng, etc.), or force GLFW to ship with inline versions of these libraries.</para>
<para>As there already are libraries doing this, it is unnecessary both to duplicate the work and to tie the duplicate to GLFW. The resulting library would also be platform-independent, as both OpenGL and stdio are available wherever GLFW is.</para>
<para><simplesect kind="par"><title>Removed functions</title><para><computeroutput>glfwReadImage</computeroutput>, <computeroutput>glfwReadMemoryImage</computeroutput>, <computeroutput>glfwFreeImage</computeroutput>, <computeroutput>glfwLoadTexture2D</computeroutput>, <computeroutput>glfwLoadMemoryTexture2D</computeroutput> and <computeroutput>glfwLoadTextureImage2D</computeroutput>.</para>
</simplesect>
</para>
</sect2>
<sect2 id="moving_guide_1moving_stdcall">
<title>Removal of GLFWCALL macro</title>
<para>The <computeroutput>GLFWCALL</computeroutput> macro, which made callback functions use <ulink url="https://msdn.microsoft.com/en-us/library/zxk0tw93.aspx">__stdcall</ulink> on Windows, has been removed. GLFW is written in C, not Pascal. Removing this macro means there&apos;s one less thing for application programmers to remember, i.e. the requirement to mark all callback functions with <computeroutput>GLFWCALL</computeroutput>. It also simplifies the creation of DLLs and DLL link libraries, as there&apos;s no need to explicitly disable <computeroutput>@n</computeroutput> entry point suffixes.</para>
<para><simplesect kind="par"><title>Old syntax</title><para><programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GLFWCALL<sp/>callback_function(...);</highlight></codeline>
</programlisting></para>
</simplesect>
<simplesect kind="par"><title>New syntax</title><para><programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>callback_function(...);</highlight></codeline>
</programlisting></para>
</simplesect>
</para>
</sect2>
<sect2 id="moving_guide_1moving_window_handles">
<title>Window handle parameters</title>
<para>Because GLFW 3 supports multiple windows, window handle parameters have been added to all window-related GLFW functions and callbacks. The handle of a newly created window is returned by <ref refid="group__window_1gaaccd00fafe81e2db94e8cdf55721e055" kindref="member">glfwCreateWindow</ref> (formerly <computeroutput>glfwOpenWindow</computeroutput>). Window handles are pointers to the <ulink url="https://en.wikipedia.org/wiki/Opaque_data_type">opaque</ulink> type <ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>.</para>
<para><simplesect kind="par"><title>Old syntax</title><para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1ga861ed3414ab8120e2f74151a666ed1dc" kindref="member">glfwSetWindowTitle</ref>(</highlight><highlight class="stringliteral">&quot;New<sp/>Window<sp/>Title&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
</simplesect>
<simplesect kind="par"><title>New syntax</title><para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1ga861ed3414ab8120e2f74151a666ed1dc" kindref="member">glfwSetWindowTitle</ref>(window,<sp/></highlight><highlight class="stringliteral">&quot;New<sp/>Window<sp/>Title&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
</simplesect>
</para>
</sect2>
<sect2 id="moving_guide_1moving_monitor">
<title>Explicit monitor selection</title>
<para>GLFW 3 provides support for multiple monitors. To request a full screen mode window, instead of passing <computeroutput>GLFW_FULLSCREEN</computeroutput> you specify which monitor you wish the window to use. The <ref refid="group__monitor_1ga34befff4f9f0fae09dd8de6fb0eb4f3e" kindref="member">glfwGetPrimaryMonitor</ref> function returns the monitor that GLFW 2 would have selected, but there are many other <ref refid="monitor_guide" kindref="compound">monitor functions</ref>. Monitor handles are pointers to the <ulink url="https://en.wikipedia.org/wiki/Opaque_data_type">opaque</ulink> type <ref refid="group__monitor_1ga8d9efd1cde9426692c73fe40437d0ae3" kindref="member">GLFWmonitor</ref>.</para>
<para><simplesect kind="par"><title>Old basic full screen</title><para><programlisting><codeline><highlight class="normal">glfwOpenWindow(640,<sp/>480,<sp/>8,<sp/>8,<sp/>8,<sp/>0,<sp/>24,<sp/>0,<sp/>GLFW_FULLSCREEN);</highlight></codeline>
</programlisting></para>
</simplesect>
<simplesect kind="par"><title>New basic full screen</title><para><programlisting><codeline><highlight class="normal">window<sp/>=<sp/><ref refid="group__window_1gaaccd00fafe81e2db94e8cdf55721e055" kindref="member">glfwCreateWindow</ref>(640,<sp/>480,<sp/></highlight><highlight class="stringliteral">&quot;My<sp/>Window&quot;</highlight><highlight class="normal">,<sp/><ref refid="group__monitor_1ga34befff4f9f0fae09dd8de6fb0eb4f3e" kindref="member">glfwGetPrimaryMonitor</ref>(),<sp/>NULL);</highlight></codeline>
</programlisting></para>
</simplesect>
<simplesect kind="note"><para>The framebuffer bit depth parameters of <computeroutput>glfwOpenWindow</computeroutput> have been turned into <ref refid="window_guide_1window_hints" kindref="member">window hints</ref>, but as they have been given <ref refid="window_guide_1window_hints_values" kindref="member">sane defaults</ref> you rarely need to set these hints.</para>
</simplesect>
</para>
</sect2>
<sect2 id="moving_guide_1moving_autopoll">
<title>Removal of automatic event polling</title>
<para>GLFW 3 does not automatically poll for events in <ref refid="group__window_1gafb827800eedbfcbc97b1e5408df668d7" kindref="member">glfwSwapBuffers</ref>, meaning you need to call <ref refid="group__window_1ga872d16e4c77f58c0436f356255920cfc" kindref="member">glfwPollEvents</ref> or <ref refid="group__window_1ga6e042d05823c11e11c7339b81a237738" kindref="member">glfwWaitEvents</ref> yourself. Unlike buffer swap, which acts on a single window, the event processing functions act on all windows at once.</para>
<para><simplesect kind="par"><title>Old basic main loop</title><para><programlisting><codeline><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(...)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Process<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Render<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__window_1gafb827800eedbfcbc97b1e5408df668d7" kindref="member">glfwSwapBuffers</ref>();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</simplesect>
<simplesect kind="par"><title>New basic main loop</title><para><programlisting><codeline><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(...)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Process<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Render<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__window_1gafb827800eedbfcbc97b1e5408df668d7" kindref="member">glfwSwapBuffers</ref>(window);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__window_1ga872d16e4c77f58c0436f356255920cfc" kindref="member">glfwPollEvents</ref>();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</simplesect>
</para>
</sect2>
<sect2 id="moving_guide_1moving_context">
<title>Explicit context management</title>
<para>Each GLFW 3 window has its own OpenGL context and only you, the application programmer, can know which context should be current on which thread at any given time. Therefore, GLFW 3 leaves that decision to you.</para>
<para>This means that you need to call <ref refid="group__context_1gafd76c93e15ec8b0b90506a9936a46185" kindref="member">glfwMakeContextCurrent</ref> after creating a window before you can call any OpenGL functions.</para>
</sect2>
<sect2 id="moving_guide_1moving_hidpi">
<title>Separation of window and framebuffer sizes</title>
<para>Window positions and sizes now use screen coordinates, which may not be the same as pixels on machines with high-DPI monitors. This is important as OpenGL uses pixels, not screen coordinates. For example, the rectangle specified with <computeroutput>glViewport</computeroutput> needs to use pixels. Therefore, framebuffer size functions have been added. You can retrieve the size of the framebuffer of a window with <ref refid="group__window_1gaf7d17f3534b4b6dc9a6f905e3a240b7e" kindref="member">glfwGetFramebufferSize</ref> function. A framebuffer size callback has also been added, which can be set with <ref refid="group__window_1ga41d69f9f263d7b33ea03cf58772b4ea0" kindref="member">glfwSetFramebufferSizeCallback</ref>.</para>
<para><simplesect kind="par"><title>Old basic viewport setup</title><para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1ga7feb769ebb3f3d21579b5a3fb07be76e" kindref="member">glfwGetWindowSize</ref>(&amp;width,<sp/>&amp;height);</highlight></codeline>
<codeline><highlight class="normal">glViewport(0,<sp/>0,<sp/>width,<sp/>height);</highlight></codeline>
</programlisting></para>
</simplesect>
<simplesect kind="par"><title>New basic viewport setup</title><para><programlisting><codeline><highlight class="normal"><ref refid="group__window_1gaf7d17f3534b4b6dc9a6f905e3a240b7e" kindref="member">glfwGetFramebufferSize</ref>(window,<sp/>&amp;width,<sp/>&amp;height);</highlight></codeline>
<codeline><highlight class="normal">glViewport(0,<sp/>0,<sp/>width,<sp/>height);</highlight></codeline>
</programlisting></para>
</simplesect>
</para>
</sect2>
<sect2 id="moving_guide_1moving_window_close">
<title>Window closing changes</title>
<para>The <computeroutput>GLFW_OPENED</computeroutput> window parameter has been removed. As long as the window has not been destroyed, whether through <ref refid="group__window_1ga806747476b7247d292be3711c323ea10" kindref="member">glfwDestroyWindow</ref> or <ref refid="group__init_1gafd90e6fd4819ea9e22e5e739519a6504" kindref="member">glfwTerminate</ref>, the window is &quot;open&quot;.</para>
<para>A user attempting to close a window is now just an event like any other. Unlike GLFW 2, windows and contexts created with GLFW 3 will never be destroyed unless you choose them to be. Each window now has a close flag that is set to <computeroutput>GLFW_TRUE</computeroutput> when the user attempts to close that window. By default, nothing else happens and the window stays visible. It is then up to you to either destroy the window, take some other action or ignore the request.</para>
<para>You can query the close flag at any time with <ref refid="group__window_1gaa6162f67dfa38b8beda2fea623649332" kindref="member">glfwWindowShouldClose</ref> and set it at any time with <ref refid="group__window_1ga1cadeda7a1e2f224e06a8415d30741aa" kindref="member">glfwSetWindowShouldClose</ref>.</para>
<para><simplesect kind="par"><title>Old basic main loop</title><para><programlisting><codeline><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(glfwGetWindowParam(GLFW_OPENED))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</simplesect>
<simplesect kind="par"><title>New basic main loop</title><para><programlisting><codeline><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!<ref refid="group__window_1gaa6162f67dfa38b8beda2fea623649332" kindref="member">glfwWindowShouldClose</ref>(window))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</simplesect>
The close callback no longer returns a value. Instead, it is called after the close flag has been set so it can override its value, if it chooses to, before event processing completes. You may however not call <ref refid="group__window_1ga806747476b7247d292be3711c323ea10" kindref="member">glfwDestroyWindow</ref> from the close callback (or any other window related callback).</para>
<para><simplesect kind="par"><title>Old syntax</title><para><programlisting><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GLFWCALL<sp/>window_close_callback(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
</programlisting></para>
</simplesect>
<simplesect kind="par"><title>New syntax</title><para><programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>window_close_callback(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>window);</highlight></codeline>
</programlisting></para>
</simplesect>
<simplesect kind="note"><para>GLFW never clears the close flag to <computeroutput>GLFW_FALSE</computeroutput>, meaning you can use it for other reasons to close the window as well, for example the user choosing Quit from an in-game menu.</para>
</simplesect>
</para>
</sect2>
<sect2 id="moving_guide_1moving_hints">
<title>Persistent window hints</title>
<para>The <computeroutput>glfwOpenWindowHint</computeroutput> function has been renamed to <ref refid="group__window_1ga69c40728499720bef8a49aa925ea0efa" kindref="member">glfwWindowHint</ref>.</para>
<para>Window hints are no longer reset to their default values on window creation, but instead retain their values until modified by <ref refid="group__window_1ga69c40728499720bef8a49aa925ea0efa" kindref="member">glfwWindowHint</ref> or <ref refid="group__window_1ga8050ddceed9dc6bd9d3aa35666195cd4" kindref="member">glfwDefaultWindowHints</ref>, or until the library is terminated and re-initialized.</para>
</sect2>
<sect2 id="moving_guide_1moving_video_modes">
<title>Video mode enumeration</title>
<para>Video mode enumeration is now per-monitor. The <ref refid="group__monitor_1ga7eaea6132f15e9b5d47eb94f88547f79" kindref="member">glfwGetVideoModes</ref> function now returns all available modes for a specific monitor instead of requiring you to guess how large an array you need. The <computeroutput>glfwGetDesktopMode</computeroutput> function, which had poorly defined behavior, has been replaced by <ref refid="group__monitor_1ga21f7f60de4f4d0fa360c7ad159b75c9e" kindref="member">glfwGetVideoMode</ref>, which returns the current mode of a monitor.</para>
</sect2>
<sect2 id="moving_guide_1moving_char_up">
<title>Removal of character actions</title>
<para>The action parameter of the <ref refid="group__input_1ga2c4c70bfb3fb990182a4591cd21a374d" kindref="member">character callback</ref> has been removed. This was an artefact of the origin of GLFW, i.e. being developed in English by a Swede. However, many keyboard layouts require more than one key to produce characters with diacritical marks. Even the Swedish keyboard layout requires this for uncommon cases like ü.</para>
<para><simplesect kind="par"><title>Old syntax</title><para><programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GLFWCALL<sp/>character_callback(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>character,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>action);</highlight></codeline>
</programlisting></para>
</simplesect>
<simplesect kind="par"><title>New syntax</title><para><programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>character_callback(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>window,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>character);</highlight></codeline>
</programlisting></para>
</simplesect>
</para>
</sect2>
<sect2 id="moving_guide_1moving_cursorpos">
<title>Cursor position changes</title>
<para>The <computeroutput>glfwGetMousePos</computeroutput> function has been renamed to <ref refid="group__input_1gad289438eb7cf53d11eca685373f44105" kindref="member">glfwGetCursorPos</ref>, <computeroutput>glfwSetMousePos</computeroutput> to <ref refid="group__input_1gaaf152cc93418acb0ba342e3f4af922bc" kindref="member">glfwSetCursorPos</ref> and <computeroutput>glfwSetMousePosCallback</computeroutput> to <ref refid="group__input_1ga74124d0eff27040fd10e4df9e17d129c" kindref="member">glfwSetCursorPosCallback</ref>.</para>
<para>The cursor position is now <computeroutput>double</computeroutput> instead of <computeroutput>int</computeroutput>, both for the direct functions and for the callback. Some platforms can provide sub-pixel cursor movement and this data is now passed on to the application where available. On platforms where this is not provided, the decimal part is zero.</para>
<para>GLFW 3 only allows you to position the cursor within a window using <ref refid="group__input_1gaaf152cc93418acb0ba342e3f4af922bc" kindref="member">glfwSetCursorPos</ref> (formerly <computeroutput>glfwSetMousePos</computeroutput>) when that window is active. Unless the window is active, the function fails silently.</para>
</sect2>
<sect2 id="moving_guide_1moving_wheel">
<title>Wheel position replaced by scroll offsets</title>
<para>The <computeroutput>glfwGetMouseWheel</computeroutput> function has been removed. Scrolling is the input of offsets and has no absolute position. The mouse wheel callback has been replaced by a <ref refid="group__input_1ga077345c3a10d906b2b3f2d550ae02971" kindref="member">scroll callback</ref> that receives two-dimensional floating point scroll offsets. This allows you to receive precise scroll data from for example modern touchpads.</para>
<para><simplesect kind="par"><title>Old syntax</title><para><programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GLFWCALL<sp/>mouse_wheel_callback(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>position);</highlight></codeline>
</programlisting></para>
</simplesect>
<simplesect kind="par"><title>New syntax</title><para><programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>scroll_callback(<ref refid="group__window_1ga3c96d80d363e67d13a41b5d1821f3242" kindref="member">GLFWwindow</ref>*<sp/>window,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xoffset,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yoffset);</highlight></codeline>
</programlisting></para>
</simplesect>
<simplesect kind="par"><title>Removed functions</title><para><computeroutput>glfwGetMouseWheel</computeroutput></para>
</simplesect>
</para>
</sect2>
<sect2 id="moving_guide_1moving_repeat">
<title>Key repeat action</title>
<para>The <computeroutput>GLFW_KEY_REPEAT</computeroutput> enable has been removed and key repeat is always enabled for both keys and characters. A new key action, <computeroutput>GLFW_REPEAT</computeroutput>, has been added to allow the <ref refid="group__input_1ga9c6c9d019ac11d888e45b11b14772659" kindref="member">key callback</ref> to distinguish an initial key press from a repeat. Note that <ref refid="group__input_1ga7d8ad8ffaf272808f04e1d5d33ec8859" kindref="member">glfwGetKey</ref> still returns only <computeroutput>GLFW_PRESS</computeroutput> or <computeroutput>GLFW_RELEASE</computeroutput>.</para>
</sect2>
<sect2 id="moving_guide_1moving_keys">
<title>Physical key input</title>
<para>GLFW 3 key tokens map to physical keys, unlike in GLFW 2 where they mapped to the values generated by the current keyboard layout. The tokens are named according to the values they would have using the standard US layout, but this is only a convenience, as most programmers are assumed to know that layout. This means that (for example) <computeroutput>GLFW_KEY_LEFT_BRACKET</computeroutput> is always a single key and is the same key in the same place regardless of what keyboard layouts the users of your program has.</para>
<para>The key input facility was never meant for text input, although using it that way worked slightly better in GLFW 2. If you were using it to input text, you should be using the character callback instead, on both GLFW 2 and 3. This will give you the characters being input, as opposed to the keys being pressed.</para>
<para>GLFW 3 has key tokens for all keys on a standard 105 key keyboard, so instead of having to remember whether to check for <computeroutput>a</computeroutput> or <computeroutput>A</computeroutput>, you now check for GLFW_KEY_A.</para>
</sect2>
<sect2 id="moving_guide_1moving_joystick">
<title>Joystick function changes</title>
<para>The <computeroutput>glfwGetJoystickPos</computeroutput> function has been renamed to <ref refid="group__input_1gacd46b9f8d9d12dc50e45d7fe0ad32b23" kindref="member">glfwGetJoystickAxes</ref>.</para>
<para>The <computeroutput>glfwGetJoystickParam</computeroutput> function and the <computeroutput>GLFW_PRESENT</computeroutput>, <computeroutput>GLFW_AXES</computeroutput> and <computeroutput>GLFW_BUTTONS</computeroutput> tokens have been replaced by the <ref refid="group__input_1gacb1b7dfd79df673d48814c06fc436eff" kindref="member">glfwJoystickPresent</ref> function as well as axis and button counts returned by the <ref refid="group__input_1gacd46b9f8d9d12dc50e45d7fe0ad32b23" kindref="member">glfwGetJoystickAxes</ref> and <ref refid="group__input_1ga91cdcb462a3e17c647a55496eff7d0ee" kindref="member">glfwGetJoystickButtons</ref> functions.</para>
</sect2>
<sect2 id="moving_guide_1moving_mbcs">
<title>Win32 MBCS support</title>
<para>The Win32 port of GLFW 3 will not compile in <ulink url="https://msdn.microsoft.com/en-us/library/5z097dxa.aspx">MBCS mode</ulink>. However, because the use of the Unicode version of the Win32 API doesn&apos;t affect the process as a whole, but only those windows created using it, it&apos;s perfectly possible to call MBCS functions from other parts of the same application. Therefore, even if an application using GLFW has MBCS mode code, there&apos;s no need for GLFW itself to support it.</para>
</sect2>
<sect2 id="moving_guide_1moving_windows">
<title>Support for versions of Windows older than XP</title>
<para>All explicit support for version of Windows older than XP has been removed. There is no code that actively prevents GLFW 3 from running on these earlier versions, but it uses Win32 functions that those versions lack.</para>
<para>Windows XP was released in 2001, and by now (January 2015) it has not only replaced almost all earlier versions of Windows, but is itself rapidly being replaced by Windows 7 and 8. The MSDN library doesn&apos;t even provide documentation for version older than Windows 2000, making it difficult to maintain compatibility with these versions even if it was deemed worth the effort.</para>
<para>The Win32 API has also not stood still, and GLFW 3 uses many functions only present on Windows XP or later. Even supporting an OS as new as XP (new from the perspective of GLFW 2, which still supports Windows 95) requires runtime checking for a number of functions that are present only on modern version of Windows.</para>
</sect2>
<sect2 id="moving_guide_1moving_syskeys">
<title>Capture of system-wide hotkeys</title>
<para>The ability to disable and capture system-wide hotkeys like Alt+Tab has been removed. Modern applications, whether they&apos;re games, scientific visualisations or something else, are nowadays expected to be good desktop citizens and allow these hotkeys to function even when running in full screen mode.</para>
</sect2>
<sect2 id="moving_guide_1moving_terminate">
<title>Automatic termination</title>
<para>GLFW 3 does not register <ref refid="group__init_1gafd90e6fd4819ea9e22e5e739519a6504" kindref="member">glfwTerminate</ref> with <computeroutput>atexit</computeroutput> at initialization, because <computeroutput>exit</computeroutput> calls registered functions from the calling thread and while it is permitted to call <computeroutput>exit</computeroutput> from any thread, <ref refid="group__init_1gafd90e6fd4819ea9e22e5e739519a6504" kindref="member">glfwTerminate</ref> must only be called from the main thread.</para>
<para>To release all resources allocated by GLFW, you should call <ref refid="group__init_1gafd90e6fd4819ea9e22e5e739519a6504" kindref="member">glfwTerminate</ref> yourself, from the main thread, before the program terminates. Note that this destroys all windows not already destroyed with <ref refid="group__window_1ga806747476b7247d292be3711c323ea10" kindref="member">glfwDestroyWindow</ref>, invalidating any window handles you may still have.</para>
</sect2>
<sect2 id="moving_guide_1moving_glu">
<title>GLU header inclusion</title>
<para>GLFW 3 does not by default include the GLU header and GLU itself has been deprecated by <ulink url="https://en.wikipedia.org/wiki/Khronos_Group">Khronos</ulink>. <bold>New projects should not use GLU</bold>, but if you need it for legacy code that has been moved to GLFW 3, you can request that the GLFW header includes it by defining <ref refid="build_guide_1GLFW_INCLUDE_GLU" kindref="member">GLFW_INCLUDE_GLU</ref> before the inclusion of the GLFW header.</para>
<para><simplesect kind="par"><title>Old syntax</title><para><programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;GL/glfw.h&gt;</highlight></codeline>
</programlisting></para>
</simplesect>
<simplesect kind="par"><title>New syntax</title><para><programlisting><codeline><highlight class="preprocessor">#define<sp/>GLFW_INCLUDE_GLU</highlight></codeline>
<codeline><highlight class="preprocessor">#include<sp/>&lt;GLFW/glfw3.h&gt;</highlight></codeline>
</programlisting></para>
</simplesect>
There are many libraries that offer replacements for the functionality offered by GLU. For the matrix helper functions, see math libraries like <ulink url="https://github.com/g-truc/glm">GLM</ulink> (for C++), <ulink url="https://github.com/datenwolf/linmath.h">linmath.h</ulink> (for C) and others. For the tessellation functions, see for example <ulink url="https://github.com/memononen/libtess2">libtess2</ulink>.</para>
</sect2>
</sect1>
<sect1 id="moving_guide_1moving_tables">
<title>Name change tables</title>
<sect2 id="moving_guide_1moving_renamed_functions">
<title>Renamed functions</title>
<para><table rows="15" cols="3"><row>
<entry thead="yes"><para>GLFW 2   </para>
</entry><entry thead="yes"><para>GLFW 3   </para>
</entry><entry thead="yes"><para>Notes    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>glfwOpenWindow</computeroutput>   </para>
</entry><entry thead="no"><para><ref refid="group__window_1gaaccd00fafe81e2db94e8cdf55721e055" kindref="member">glfwCreateWindow</ref>   </para>
</entry><entry thead="no"><para>All channel bit depths are now hints    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>glfwCloseWindow</computeroutput>   </para>
</entry><entry thead="no"><para><ref refid="group__window_1ga806747476b7247d292be3711c323ea10" kindref="member">glfwDestroyWindow</ref>   </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>glfwOpenWindowHint</computeroutput>   </para>
</entry><entry thead="no"><para><ref refid="group__window_1ga69c40728499720bef8a49aa925ea0efa" kindref="member">glfwWindowHint</ref>   </para>
</entry><entry thead="no"><para>Now accepts all <computeroutput>GLFW_*_BITS</computeroutput> tokens    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>glfwEnable</computeroutput>   </para>
</entry><entry thead="no"><para><ref refid="group__input_1gae1eb729d2dd91dc33fd60e150a6e1684" kindref="member">glfwSetInputMode</ref>   </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>glfwDisable</computeroutput>   </para>
</entry><entry thead="no"><para><ref refid="group__input_1gae1eb729d2dd91dc33fd60e150a6e1684" kindref="member">glfwSetInputMode</ref>   </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>glfwGetMousePos</computeroutput>   </para>
</entry><entry thead="no"><para><ref refid="group__input_1gad289438eb7cf53d11eca685373f44105" kindref="member">glfwGetCursorPos</ref>   </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>glfwSetMousePos</computeroutput>   </para>
</entry><entry thead="no"><para><ref refid="group__input_1gaaf152cc93418acb0ba342e3f4af922bc" kindref="member">glfwSetCursorPos</ref>   </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>glfwSetMousePosCallback</computeroutput>   </para>
</entry><entry thead="no"><para><ref refid="group__input_1ga74124d0eff27040fd10e4df9e17d129c" kindref="member">glfwSetCursorPosCallback</ref>   </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>glfwSetMouseWheelCallback</computeroutput>   </para>
</entry><entry thead="no"><para><ref refid="group__input_1gaa786b59f19ad8525d251cda8e0d7d29b" kindref="member">glfwSetScrollCallback</ref>   </para>
</entry><entry thead="no"><para>Accepts two-dimensional scroll offsets as doubles    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>glfwGetJoystickPos</computeroutput>   </para>
</entry><entry thead="no"><para><ref refid="group__input_1gacd46b9f8d9d12dc50e45d7fe0ad32b23" kindref="member">glfwGetJoystickAxes</ref>   </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>glfwGetWindowParam</computeroutput>   </para>
</entry><entry thead="no"><para><ref refid="group__window_1ga1bb0c7e100418e284dbb800789c63d40" kindref="member">glfwGetWindowAttrib</ref>   </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>glfwGetGLVersion</computeroutput>   </para>
</entry><entry thead="no"><para><ref refid="group__window_1ga1bb0c7e100418e284dbb800789c63d40" kindref="member">glfwGetWindowAttrib</ref>   </para>
</entry><entry thead="no"><para>Use <computeroutput>GLFW_CONTEXT_VERSION_MAJOR</computeroutput>, <computeroutput>GLFW_CONTEXT_VERSION_MINOR</computeroutput> and <computeroutput>GLFW_CONTEXT_REVISION</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>glfwGetDesktopMode</computeroutput>   </para>
</entry><entry thead="no"><para><ref refid="group__monitor_1ga21f7f60de4f4d0fa360c7ad159b75c9e" kindref="member">glfwGetVideoMode</ref>   </para>
</entry><entry thead="no"><para>Returns the current mode of a monitor    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>glfwGetJoystickParam</computeroutput>   </para>
</entry><entry thead="no"><para><ref refid="group__input_1gacb1b7dfd79df673d48814c06fc436eff" kindref="member">glfwJoystickPresent</ref>   </para>
</entry><entry thead="no"><para>The axis and button counts are provided by <ref refid="group__input_1gacd46b9f8d9d12dc50e45d7fe0ad32b23" kindref="member">glfwGetJoystickAxes</ref> and <ref refid="group__input_1ga91cdcb462a3e17c647a55496eff7d0ee" kindref="member">glfwGetJoystickButtons</ref>   </para>
</entry></row>
</table>
</para>
</sect2>
<sect2 id="moving_guide_1moving_renamed_types">
<title>Renamed types</title>
<para><table rows="3" cols="3"><row>
<entry thead="yes"><para>GLFW 2   </para>
</entry><entry thead="yes"><para>GLFW 3   </para>
</entry><entry thead="yes"><para>Notes    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>GLFWmousewheelfun</computeroutput>   </para>
</entry><entry thead="no"><para><ref refid="group__input_1ga077345c3a10d906b2b3f2d550ae02971" kindref="member">GLFWscrollfun</ref>   </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>GLFWmouseposfun</computeroutput>   </para>
</entry><entry thead="no"><para><ref refid="group__input_1ga081a67dfb879e14707a5abd7de242b8a" kindref="member">GLFWcursorposfun</ref>   </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</sect2>
<sect2 id="moving_guide_1moving_renamed_tokens">
<title>Renamed tokens</title>
<para><table rows="20" cols="3"><row>
<entry thead="yes"><para>GLFW 2   </para>
</entry><entry thead="yes"><para>GLFW 3   </para>
</entry><entry thead="yes"><para>Notes    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>GLFW_OPENGL_VERSION_MAJOR</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_CONTEXT_VERSION_MAJOR</computeroutput>   </para>
</entry><entry thead="no"><para>Renamed as it applies to OpenGL ES as well    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>GLFW_OPENGL_VERSION_MINOR</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_CONTEXT_VERSION_MINOR</computeroutput>   </para>
</entry><entry thead="no"><para>Renamed as it applies to OpenGL ES as well    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>GLFW_FSAA_SAMPLES</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_SAMPLES</computeroutput>   </para>
</entry><entry thead="no"><para>Renamed to match the OpenGL API    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>GLFW_ACTIVE</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_FOCUSED</computeroutput>   </para>
</entry><entry thead="no"><para>Renamed to match the window focus callback    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>GLFW_WINDOW_NO_RESIZE</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_RESIZABLE</computeroutput>   </para>
</entry><entry thead="no"><para>The default has been inverted    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>GLFW_MOUSE_CURSOR</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_CURSOR</computeroutput>   </para>
</entry><entry thead="no"><para>Used with <ref refid="group__input_1gae1eb729d2dd91dc33fd60e150a6e1684" kindref="member">glfwSetInputMode</ref>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>GLFW_KEY_ESC</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_KEY_ESCAPE</computeroutput>   </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>GLFW_KEY_DEL</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_KEY_DELETE</computeroutput>   </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>GLFW_KEY_PAGEUP</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_KEY_PAGE_UP</computeroutput>   </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>GLFW_KEY_PAGEDOWN</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_KEY_PAGE_DOWN</computeroutput>   </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>GLFW_KEY_KP_NUM_LOCK</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_KEY_NUM_LOCK</computeroutput>   </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>GLFW_KEY_LCTRL</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_KEY_LEFT_CONTROL</computeroutput>   </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>GLFW_KEY_LSHIFT</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_KEY_LEFT_SHIFT</computeroutput>   </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>GLFW_KEY_LALT</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_KEY_LEFT_ALT</computeroutput>   </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>GLFW_KEY_LSUPER</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_KEY_LEFT_SUPER</computeroutput>   </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>GLFW_KEY_RCTRL</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_KEY_RIGHT_CONTROL</computeroutput>   </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>GLFW_KEY_RSHIFT</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_KEY_RIGHT_SHIFT</computeroutput>   </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>GLFW_KEY_RALT</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_KEY_RIGHT_ALT</computeroutput>   </para>
</entry><entry thead="no"><para></para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>GLFW_KEY_RSUPER</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>GLFW_KEY_RIGHT_SUPER</computeroutput>   </para>
</entry><entry thead="no"><para></para>
</entry></row>
</table>
</para>
</sect2>
</sect1>
    </detaileddescription>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/docs/moving.dox"/>
  </compounddef>
</doxygen>
