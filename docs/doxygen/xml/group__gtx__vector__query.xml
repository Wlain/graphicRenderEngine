<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__gtx__vector__query" kind="group">
    <compoundname>gtx_vector_query</compoundname>
    <title>GLM_GTX_vector_query</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__gtx__vector__query_1ga13da4a787a2ff70e95d561fb19ff91b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>length_t</type>
            <declname>L</declname>
            <defname>L</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL bool</type>
        <definition>GLM_FUNC_DECL bool glm::areCollinear</definition>
        <argsstring>(vec&lt; L, T, Q &gt; const &amp;v0, vec&lt; L, T, Q &gt; const &amp;v1, T const &amp;epsilon)</argsstring>
        <name>areCollinear</name>
        <param>
          <type><ref refid="structvec" kindref="compound">vec</ref>&lt; L, T, Q &gt; const &amp;</type>
          <declname>v0</declname>
        </param>
        <param>
          <type><ref refid="structvec" kindref="compound">vec</ref>&lt; L, T, Q &gt; const &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check whether two vectors are collinears. <simplesect kind="see"><para><ref refid="group__gtx__vector__query" kindref="compound">GLM_GTX_vector_query</ref> extensions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/vector_query.hpp" line="36" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/vector_query.inl" bodystart="81" bodyend="86" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/vector_query.hpp" declline="36" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__vector__query_1gac7b95b3f798e3c293262b2bdaad47c57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>length_t</type>
            <declname>L</declname>
            <defname>L</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL bool</type>
        <definition>GLM_FUNC_DECL bool glm::areOrthogonal</definition>
        <argsstring>(vec&lt; L, T, Q &gt; const &amp;v0, vec&lt; L, T, Q &gt; const &amp;v1, T const &amp;epsilon)</argsstring>
        <name>areOrthogonal</name>
        <param>
          <type><ref refid="structvec" kindref="compound">vec</ref>&lt; L, T, Q &gt; const &amp;</type>
          <declname>v0</declname>
        </param>
        <param>
          <type><ref refid="structvec" kindref="compound">vec</ref>&lt; L, T, Q &gt; const &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check whether two vectors are orthogonals. <simplesect kind="see"><para><ref refid="group__gtx__vector__query" kindref="compound">GLM_GTX_vector_query</ref> extensions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/vector_query.hpp" line="41" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/vector_query.inl" bodystart="89" bodyend="96" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/vector_query.hpp" declline="41" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__vector__query_1gac3c974f459fd75453134fad7ae89a39e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>length_t</type>
            <declname>L</declname>
            <defname>L</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL bool</type>
        <definition>GLM_FUNC_DECL bool glm::isNormalized</definition>
        <argsstring>(vec&lt; L, T, Q &gt; const &amp;v, T const &amp;epsilon)</argsstring>
        <name>isNormalized</name>
        <param>
          <type><ref refid="structvec" kindref="compound">vec</ref>&lt; L, T, Q &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check whether a vector is normalized. <simplesect kind="see"><para><ref refid="group__gtx__vector__query" kindref="compound">GLM_GTX_vector_query</ref> extensions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/vector_query.hpp" line="46" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/vector_query.inl" bodystart="99" bodyend="104" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/vector_query.hpp" declline="46" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__vector__query_1gab4a3637dbcb4bb42dc55caea7a1e0495" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>length_t</type>
            <declname>L</declname>
            <defname>L</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL bool</type>
        <definition>GLM_FUNC_DECL bool glm::isNull</definition>
        <argsstring>(vec&lt; L, T, Q &gt; const &amp;v, T const &amp;epsilon)</argsstring>
        <name>isNull</name>
        <param>
          <type><ref refid="structvec" kindref="compound">vec</ref>&lt; L, T, Q &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check whether a vector is null. <simplesect kind="see"><para><ref refid="group__gtx__vector__query" kindref="compound">GLM_GTX_vector_query</ref> extensions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/vector_query.hpp" line="51" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/vector_query.inl" bodystart="107" bodyend="112" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/vector_query.hpp" declline="51" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__vector__query_1gaeb0122462e1f1396b28fed4c78ada959" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>length_t</type>
            <declname>L</declname>
            <defname>L</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL <ref refid="structvec" kindref="compound">vec</ref>&lt; L, bool, Q &gt;</type>
        <definition>GLM_FUNC_DECL vec&lt; L, bool, Q &gt; glm::isCompNull</definition>
        <argsstring>(vec&lt; L, T, Q &gt; const &amp;v, T const &amp;epsilon)</argsstring>
        <name>isCompNull</name>
        <param>
          <type><ref refid="structvec" kindref="compound">vec</ref>&lt; L, T, Q &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check whether a each component of a vector is null. <simplesect kind="see"><para><ref refid="group__gtx__vector__query" kindref="compound">GLM_GTX_vector_query</ref> extensions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/vector_query.hpp" line="56" column="19" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/vector_query.inl" bodystart="115" bodyend="120" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/vector_query.hpp" declline="56" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__vector__query_1ga1b091c3d7f9ee3b0708311c001c293e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>length_t</type>
            <declname>L</declname>
            <defname>L</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL bool</type>
        <definition>GLM_FUNC_DECL bool glm::areOrthonormal</definition>
        <argsstring>(vec&lt; L, T, Q &gt; const &amp;v0, vec&lt; L, T, Q &gt; const &amp;v1, T const &amp;epsilon)</argsstring>
        <name>areOrthonormal</name>
        <param>
          <type><ref refid="structvec" kindref="compound">vec</ref>&lt; L, T, Q &gt; const &amp;</type>
          <declname>v0</declname>
        </param>
        <param>
          <type><ref refid="structvec" kindref="compound">vec</ref>&lt; L, T, Q &gt; const &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check whether two vectors are orthonormal. <simplesect kind="see"><para><ref refid="group__gtx__vector__query" kindref="compound">GLM_GTX_vector_query</ref> extensions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/vector_query.hpp" line="61" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/vector_query.inl" bodystart="150" bodyend="153" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/vector_query.hpp" declline="61" declcolumn="20"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Include &lt;<ref refid="vector__query_8hpp" kindref="compound">glm/gtx/vector_query.hpp</ref>&gt; to use the features of this extension.</para>
<para>Query informations of vector types </para>
    </detaileddescription>
  </compounddef>
</doxygen>
