<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="imgui__impl__opengl3_8cpp" kind="file" language="C++">
    <compoundname>imgui_impl_opengl3.cpp</compoundname>
    <includes refid="imgui_8h" local="yes">imgui.h</includes>
    <includes refid="imgui__impl__opengl3_8h" local="yes">imgui_impl_opengl3.h</includes>
    <includes local="no">stdio.h</includes>
    <includes refid="stdint_8h" local="no">stdint.h</includes>
    <includes refid="imgui__impl__opengl3__loader_8h" local="yes">imgui_impl_opengl3_loader.h</includes>
    <incdepgraph>
      <node id="11">
        <label>stdint.h</label>
        <link refid="stdint_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp</label>
        <link refid="imgui__impl__opengl3_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>imgui_impl_opengl3.h</label>
        <link refid="imgui__impl__opengl3_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>imgui_impl_opengl3_loader.h</label>
        <link refid="imgui__impl__opengl3__loader_8h_source"/>
      </node>
      <node id="3">
        <label>imconfig.h</label>
        <link refid="imconfig_8h_source"/>
      </node>
      <node id="2">
        <label>imgui.h</label>
        <link refid="imgui_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>assert.h</label>
      </node>
      <node id="4">
        <label>float.h</label>
      </node>
      <node id="12">
        <label>limits.h</label>
      </node>
      <node id="5">
        <label>stdarg.h</label>
      </node>
      <node id="6">
        <label>stddef.h</label>
      </node>
      <node id="10">
        <label>stdio.h</label>
      </node>
      <node id="7">
        <label>string.h</label>
      </node>
      <node id="13">
        <label>wchar.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_im_gui___impl_open_g_l3___data" prot="public">ImGui_ImplOpenGL3_Data</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="imgui__impl__opengl3_8cpp_1a7dcfb597d9879faf16deecf3874e58d4" prot="public" static="no">
        <name>IMGL3W_IMPL</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" line="137" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="imgui__impl__opengl3_8cpp_1a7ae930dc349a186d20cfd7ec01cb1f1d" prot="public" static="no">
        <name>IMGUI_IMPL_OPENGL_USE_VERTEX_ARRAY</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" line="143" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="imgui__impl__opengl3_8cpp_1a8c5540c255a86aa56282b5db8ef0f218" prot="public" static="no">
        <name>IMGUI_IMPL_HAS_POLYGON_MODE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" line="154" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="imgui__impl__opengl3_8cpp_1a2d9c66e1dfb454fdb91f85037e0591e5" prot="public" static="no">
        <name>IMGUI_IMPL_OPENGL_MAY_HAVE_VTX_OFFSET</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" line="159" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="imgui__impl__opengl3_8cpp_1ac486fa8f4402470a60eeb8e6a39fb35f" prot="public" static="no">
        <name>IMGUI_IMPL_OPENGL_MAY_HAVE_BIND_SAMPLER</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" line="164" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="imgui__impl__opengl3_8cpp_1ac99ae99b9e3d14f7e0211285a5f0540c" prot="public" static="no">
        <name>IMGUI_IMPL_OPENGL_MAY_HAVE_PRIMITIVE_RESTART</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" line="169" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="imgui__impl__opengl3_8cpp_1ab592fd315c7806c1eecd62f53d6e61dc" prot="public" static="no">
        <name>IMGUI_IMPL_OPENGL_MAY_HAVE_EXTENSIONS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" line="174" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" bodystart="174" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="imgui__impl__opengl3_8cpp_1a68f1fea3ba16697f3febf6797cb5c85b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_im_gui___impl_open_g_l3___data" kindref="compound">ImGui_ImplOpenGL3_Data</ref> *</type>
        <definition>static ImGui_ImplOpenGL3_Data * ImGui_ImplOpenGL3_GetBackendData</definition>
        <argsstring>()</argsstring>
        <name>ImGui_ImplOpenGL3_GetBackendData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" line="199" column="31" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" bodystart="199" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__opengl3_8cpp_1ad41c8916247f34edad9088ae0615dbcb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ImGui_ImplOpenGL3_InitPlatformInterface</definition>
        <argsstring>()</argsstring>
        <name>ImGui_ImplOpenGL3_InitPlatformInterface</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" line="833" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" bodystart="833" bodyend="837" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" declline="205" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__opengl3_8cpp_1a78abb5eedee7821d75bfecf1c9b06ccb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ImGui_ImplOpenGL3_ShutdownPlatformInterface</definition>
        <argsstring>()</argsstring>
        <name>ImGui_ImplOpenGL3_ShutdownPlatformInterface</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" line="839" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" bodystart="839" bodyend="842" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" declline="206" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__opengl3_8cpp_1a0475f257dc97d1daceee89cb4b19744d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ImGui_ImplOpenGL3_Init</definition>
        <argsstring>(const char *glsl_version)</argsstring>
        <name>ImGui_ImplOpenGL3_Init</name>
        <param>
          <type>const char *</type>
          <declname>glsl_version</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" line="209" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" bodystart="209" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__opengl3_8cpp_1acbd53376e6135ad71e7bcd9879278e37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImGui_ImplOpenGL3_Shutdown</definition>
        <argsstring>()</argsstring>
        <name>ImGui_ImplOpenGL3_Shutdown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" line="293" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" bodystart="293" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__opengl3_8cpp_1a900e74add4e56e74f97a210eb329aa91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImGui_ImplOpenGL3_NewFrame</definition>
        <argsstring>()</argsstring>
        <name>ImGui_ImplOpenGL3_NewFrame</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" line="306" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" bodystart="306" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__opengl3_8cpp_1a328d27e0d40312d064adbc45c0cf240b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ImGui_ImplOpenGL3_SetupRenderState</definition>
        <argsstring>(ImDrawData *draw_data, int fb_width, int fb_height, GLuint vertex_array_object)</argsstring>
        <name>ImGui_ImplOpenGL3_SetupRenderState</name>
        <param>
          <type><ref refid="struct_im_draw_data" kindref="compound">ImDrawData</ref> *</type>
          <declname>draw_data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fb_width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fb_height</declname>
        </param>
        <param>
          <type>GLuint</type>
          <declname>vertex_array_object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" line="315" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" bodystart="315" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__opengl3_8cpp_1ad215190229f4f300593911aa7b3821de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImGui_ImplOpenGL3_RenderDrawData</definition>
        <argsstring>(ImDrawData *draw_data)</argsstring>
        <name>ImGui_ImplOpenGL3_RenderDrawData</name>
        <param>
          <type><ref refid="struct_im_draw_data" kindref="compound">ImDrawData</ref> *</type>
          <declname>draw_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" line="391" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" bodystart="391" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__opengl3_8cpp_1a3dc4f80532d710de41d4075214eb363e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ImGui_ImplOpenGL3_CreateFontsTexture</definition>
        <argsstring>()</argsstring>
        <name>ImGui_ImplOpenGL3_CreateFontsTexture</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" line="538" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" bodystart="538" bodyend="567"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__opengl3_8cpp_1a539aaad4aa185838297fb13b2409c405" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImGui_ImplOpenGL3_DestroyFontsTexture</definition>
        <argsstring>()</argsstring>
        <name>ImGui_ImplOpenGL3_DestroyFontsTexture</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" line="569" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" bodystart="569" bodyend="579"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__opengl3_8cpp_1a11601584c987e4aeae774985e1177d74" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool CheckShader</definition>
        <argsstring>(GLuint handle, const char *desc)</argsstring>
        <name>CheckShader</name>
        <param>
          <type>GLuint</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>desc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" line="582" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" bodystart="582" bodyend="598"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__opengl3_8cpp_1a22f46b7ed68c385f411c4b2dc25c50e8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool CheckProgram</definition>
        <argsstring>(GLuint handle, const char *desc)</argsstring>
        <name>CheckProgram</name>
        <param>
          <type>GLuint</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>desc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" line="601" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" bodystart="601" bodyend="617"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__opengl3_8cpp_1ab27f12289d6fe9fcd412f92af280b398" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ImGui_ImplOpenGL3_CreateDeviceObjects</definition>
        <argsstring>()</argsstring>
        <name>ImGui_ImplOpenGL3_CreateDeviceObjects</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" line="619" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" bodystart="619" bodyend="805"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__opengl3_8cpp_1a605e340c346791d9c9e927add2392d0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImGui_ImplOpenGL3_DestroyDeviceObjects</definition>
        <argsstring>()</argsstring>
        <name>ImGui_ImplOpenGL3_DestroyDeviceObjects</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" line="807" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" bodystart="807" bodyend="814"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__opengl3_8cpp_1a539314fdc1e4017ec0ef14783bf496bf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ImGui_ImplOpenGL3_RenderWindow</definition>
        <argsstring>(ImGuiViewport *viewport, void *)</argsstring>
        <name>ImGui_ImplOpenGL3_RenderWindow</name>
        <param>
          <type><ref refid="struct_im_gui_viewport" kindref="compound">ImGuiViewport</ref> *</type>
          <declname>viewport</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" line="822" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp" bodystart="822" bodyend="831"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>dear<sp/>imgui:<sp/>Renderer<sp/>Backend<sp/>for<sp/>modern<sp/>OpenGL<sp/>with<sp/>shaders<sp/>/<sp/>programmatic<sp/>pipeline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>Desktop<sp/>GL:<sp/>2.x<sp/>3.x<sp/>4.x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>Embedded<sp/>GL:<sp/>ES<sp/>2.0<sp/>(WebGL<sp/>1.0),<sp/>ES<sp/>3.0<sp/>(WebGL<sp/>2.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>needs<sp/>to<sp/>be<sp/>used<sp/>along<sp/>with<sp/>a<sp/>Platform<sp/>Backend<sp/>(e.g.<sp/>GLFW,<sp/>SDL,<sp/>Win32,<sp/>custom..)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implemented<sp/>features:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>[X]<sp/>Renderer:<sp/>User<sp/>texture<sp/>binding.<sp/>Use<sp/>&apos;GLuint&apos;<sp/>OpenGL<sp/>texture<sp/>identifier<sp/>as<sp/>void*/ImTextureID.<sp/>Read<sp/>the<sp/>FAQ<sp/>about<sp/>ImTextureID!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>[X]<sp/>Renderer:<sp/>Multi-viewport<sp/>support.<sp/>Enable<sp/>with<sp/>&apos;io.ConfigFlags<sp/>|=<sp/>ImGuiConfigFlags_ViewportsEnable&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>[x]<sp/>Renderer:<sp/>Desktop<sp/>GL<sp/>only:<sp/>Support<sp/>for<sp/>large<sp/>meshes<sp/>(64k+<sp/>vertices)<sp/>with<sp/>16-bit<sp/>indices.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>can<sp/>use<sp/>unmodified<sp/>imgui_impl_*<sp/>files<sp/>in<sp/>your<sp/>project.<sp/>See<sp/>examples/<sp/>folder<sp/>for<sp/>examples<sp/>of<sp/>using<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prefer<sp/>including<sp/>the<sp/>entire<sp/>imgui/<sp/>repository<sp/>into<sp/>your<sp/>project<sp/>(either<sp/>as<sp/>a<sp/>copy<sp/>or<sp/>as<sp/>a<sp/>submodule),<sp/>and<sp/>only<sp/>build<sp/>the<sp/>backends<sp/>you<sp/>need.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>you<sp/>are<sp/>new<sp/>to<sp/>Dear<sp/>ImGui,<sp/>read<sp/>documentation<sp/>from<sp/>the<sp/>docs/<sp/>folder<sp/>+<sp/>read<sp/>the<sp/>top<sp/>of<sp/>imgui.cpp.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Read<sp/>online:<sp/>https://github.com/ocornut/imgui/tree/master/docs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CHANGELOG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(minor<sp/>and<sp/>older<sp/>changes<sp/>stripped<sp/>away,<sp/>please<sp/>see<sp/>git<sp/>history<sp/>for<sp/>details)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2022-XX-XX:<sp/>Platform:<sp/>Added<sp/>support<sp/>for<sp/>multiple<sp/>windows<sp/>via<sp/>the<sp/>ImGuiPlatformIO<sp/>interface.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2021-12-15:<sp/>OpenGL:<sp/>Using<sp/>buffer<sp/>orphaning<sp/>+<sp/>glBufferSubData(),<sp/>seems<sp/>to<sp/>fix<sp/>leaks<sp/>with<sp/>multi-viewports<sp/>with<sp/>some<sp/>Intel<sp/>HD<sp/>drivers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2021-08-23:<sp/>OpenGL:<sp/>Fixed<sp/>ES<sp/>3.0<sp/>shader<sp/>(&quot;#version<sp/>300<sp/>es&quot;)<sp/>use<sp/>normal<sp/>precision<sp/>floats<sp/>to<sp/>avoid<sp/>wobbly<sp/>rendering<sp/>at<sp/>HD<sp/>resolutions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2021-08-19:<sp/>OpenGL:<sp/>Embed<sp/>and<sp/>use<sp/>our<sp/>own<sp/>minimal<sp/>GL<sp/>loader<sp/>(imgui_impl_opengl3_loader.h),<sp/>removing<sp/>requirement<sp/>and<sp/>support<sp/>for<sp/>third-party<sp/>loader.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2021-06-29:<sp/>Reorganized<sp/>backend<sp/>to<sp/>pull<sp/>data<sp/>from<sp/>a<sp/>single<sp/>structure<sp/>to<sp/>facilitate<sp/>usage<sp/>with<sp/>multiple-contexts<sp/>(all<sp/>g_XXXX<sp/>access<sp/>changed<sp/>to<sp/>bd-&gt;XXXX).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2021-06-25:<sp/>OpenGL:<sp/>Use<sp/>OES_vertex_array<sp/>extension<sp/>on<sp/>Emscripten<sp/>+<sp/>backup/restore<sp/>current<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2021-06-21:<sp/>OpenGL:<sp/>Destroy<sp/>individual<sp/>vertex/fragment<sp/>shader<sp/>objects<sp/>right<sp/>after<sp/>they<sp/>are<sp/>linked<sp/>into<sp/>the<sp/>main<sp/>shader.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2021-05-24:<sp/>OpenGL:<sp/>Access<sp/>GL_CLIP_ORIGIN<sp/>when<sp/>&quot;GL_ARB_clip_control&quot;<sp/>extension<sp/>is<sp/>detected,<sp/>inside<sp/>of<sp/>just<sp/>OpenGL<sp/>4.5<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2021-05-19:<sp/>OpenGL:<sp/>Replaced<sp/>direct<sp/>access<sp/>to<sp/>ImDrawCmd::TextureId<sp/>with<sp/>a<sp/>call<sp/>to<sp/>ImDrawCmd::GetTexID().<sp/>(will<sp/>become<sp/>a<sp/>requirement)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2021-04-06:<sp/>OpenGL:<sp/>Don&apos;t<sp/>try<sp/>to<sp/>read<sp/>GL_CLIP_ORIGIN<sp/>unless<sp/>we&apos;re<sp/>OpenGL<sp/>4.5<sp/>or<sp/>greater.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2021-02-18:<sp/>OpenGL:<sp/>Change<sp/>blending<sp/>equation<sp/>to<sp/>preserve<sp/>alpha<sp/>in<sp/>output<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2021-01-03:<sp/>OpenGL:<sp/>Backup,<sp/>setup<sp/>and<sp/>restore<sp/>GL_STENCIL_TEST<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2020-10-23:<sp/>OpenGL:<sp/>Backup,<sp/>setup<sp/>and<sp/>restore<sp/>GL_PRIMITIVE_RESTART<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2020-10-15:<sp/>OpenGL:<sp/>Use<sp/>glGetString(GL_VERSION)<sp/>instead<sp/>of<sp/>glGetIntegerv(GL_MAJOR_VERSION,<sp/>...)<sp/>when<sp/>the<sp/>later<sp/>returns<sp/>zero<sp/>(e.g.<sp/>Desktop<sp/>GL<sp/>2.x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2020-09-17:<sp/>OpenGL:<sp/>Fix<sp/>to<sp/>avoid<sp/>compiling/calling<sp/>glBindSampler()<sp/>on<sp/>ES<sp/>or<sp/>pre<sp/>3.3<sp/>context<sp/>which<sp/>have<sp/>the<sp/>defines<sp/>set<sp/>by<sp/>a<sp/>loader.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2020-07-10:<sp/>OpenGL:<sp/>Added<sp/>support<sp/>for<sp/>glad2<sp/>OpenGL<sp/>loader.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2020-05-08:<sp/>OpenGL:<sp/>Made<sp/>default<sp/>GLSL<sp/>version<sp/>150<sp/>(instead<sp/>of<sp/>130)<sp/>on<sp/>OSX.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2020-04-21:<sp/>OpenGL:<sp/>Fixed<sp/>handling<sp/>of<sp/>glClipControl(GL_UPPER_LEFT)<sp/>by<sp/>inverting<sp/>projection<sp/>matrix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2020-04-12:<sp/>OpenGL:<sp/>Fixed<sp/>context<sp/>version<sp/>check<sp/>mistakenly<sp/>testing<sp/>for<sp/>4.0+<sp/>instead<sp/>of<sp/>3.2+<sp/>to<sp/>enable<sp/>ImGuiBackendFlags_RendererHasVtxOffset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2020-03-24:<sp/>OpenGL:<sp/>Added<sp/>support<sp/>for<sp/>glbinding<sp/>2.x<sp/>OpenGL<sp/>loader.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2020-01-07:<sp/>OpenGL:<sp/>Added<sp/>support<sp/>for<sp/>glbinding<sp/>3.x<sp/>OpenGL<sp/>loader.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2019-10-25:<sp/>OpenGL:<sp/>Using<sp/>a<sp/>combination<sp/>of<sp/>GL<sp/>define<sp/>and<sp/>runtime<sp/>GL<sp/>version<sp/>to<sp/>decide<sp/>whether<sp/>to<sp/>use<sp/>glDrawElementsBaseVertex().<sp/>Fix<sp/>building<sp/>with<sp/>pre-3.2<sp/>GL<sp/>loaders.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2019-09-22:<sp/>OpenGL:<sp/>Detect<sp/>default<sp/>GL<sp/>loader<sp/>using<sp/>__has_include<sp/>compiler<sp/>facility.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2019-09-16:<sp/>OpenGL:<sp/>Tweak<sp/>initialization<sp/>code<sp/>to<sp/>allow<sp/>application<sp/>calling<sp/>ImGui_ImplOpenGL3_CreateFontsTexture()<sp/>before<sp/>the<sp/>first<sp/>NewFrame()<sp/>call.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2019-05-29:<sp/>OpenGL:<sp/>Desktop<sp/>GL<sp/>only:<sp/>Added<sp/>support<sp/>for<sp/>large<sp/>mesh<sp/>(64K+<sp/>vertices),<sp/>enable<sp/>ImGuiBackendFlags_RendererHasVtxOffset<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2019-04-30:<sp/>OpenGL:<sp/>Added<sp/>support<sp/>for<sp/>special<sp/>ImDrawCallback_ResetRenderState<sp/>callback<sp/>to<sp/>reset<sp/>render<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2019-03-29:<sp/>OpenGL:<sp/>Not<sp/>calling<sp/>glBindBuffer<sp/>more<sp/>than<sp/>necessary<sp/>in<sp/>the<sp/>render<sp/>loop.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2019-03-15:<sp/>OpenGL:<sp/>Added<sp/>a<sp/>GL<sp/>call<sp/>+<sp/>comments<sp/>in<sp/>ImGui_ImplOpenGL3_Init()<sp/>to<sp/>detect<sp/>uninitialized<sp/>GL<sp/>function<sp/>loaders<sp/>early.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2019-03-03:<sp/>OpenGL:<sp/>Fix<sp/>support<sp/>for<sp/>ES<sp/>2.0<sp/>(WebGL<sp/>1.0).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2019-02-20:<sp/>OpenGL:<sp/>Fix<sp/>for<sp/>OSX<sp/>not<sp/>supporting<sp/>OpenGL<sp/>4.5,<sp/>we<sp/>don&apos;t<sp/>try<sp/>to<sp/>read<sp/>GL_CLIP_ORIGIN<sp/>even<sp/>if<sp/>defined<sp/>by<sp/>the<sp/>headers/loader.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2019-02-11:<sp/>OpenGL:<sp/>Projecting<sp/>clipping<sp/>rectangles<sp/>correctly<sp/>using<sp/>draw_data-&gt;FramebufferScale<sp/>to<sp/>allow<sp/>multi-viewports<sp/>for<sp/>retina<sp/>display.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2019-02-01:<sp/>OpenGL:<sp/>Using<sp/>GLSL<sp/>410<sp/>shaders<sp/>for<sp/>any<sp/>version<sp/>over<sp/>410<sp/>(e.g.<sp/>430,<sp/>450).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2018-11-30:<sp/>Misc:<sp/>Setting<sp/>up<sp/>io.BackendRendererName<sp/>so<sp/>it<sp/>can<sp/>be<sp/>displayed<sp/>in<sp/>the<sp/>About<sp/>Window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2018-11-13:<sp/>OpenGL:<sp/>Support<sp/>for<sp/>GL<sp/>4.5&apos;s<sp/>glClipControl(GL_UPPER_LEFT)<sp/>/<sp/>GL_CLIP_ORIGIN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2018-08-29:<sp/>OpenGL:<sp/>Added<sp/>support<sp/>for<sp/>more<sp/>OpenGL<sp/>loaders:<sp/>glew<sp/>and<sp/>glad,<sp/>with<sp/>comments<sp/>indicative<sp/>that<sp/>any<sp/>loader<sp/>can<sp/>be<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2018-08-09:<sp/>OpenGL:<sp/>Default<sp/>to<sp/>OpenGL<sp/>ES<sp/>3<sp/>on<sp/>iOS<sp/>and<sp/>Android.<sp/>GLSL<sp/>version<sp/>default<sp/>to<sp/>&quot;#version<sp/>300<sp/>ES&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2018-07-30:<sp/>OpenGL:<sp/>Support<sp/>for<sp/>GLSL<sp/>300<sp/>ES<sp/>and<sp/>410<sp/>core.<sp/>Fixes<sp/>for<sp/>Emscripten<sp/>compilation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2018-07-10:<sp/>OpenGL:<sp/>Support<sp/>for<sp/>more<sp/>GLSL<sp/>versions<sp/>(based<sp/>on<sp/>the<sp/>GLSL<sp/>version<sp/>string).<sp/>Added<sp/>error<sp/>output<sp/>when<sp/>shaders<sp/>fail<sp/>to<sp/>compile/link.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2018-06-08:<sp/>Misc:<sp/>Extracted<sp/>imgui_impl_opengl3.cpp/.h<sp/>away<sp/>from<sp/>the<sp/>old<sp/>combined<sp/>GLFW/SDL+OpenGL3<sp/>examples.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2018-06-08:<sp/>OpenGL:<sp/>Use<sp/>draw_data-&gt;DisplayPos<sp/>and<sp/>draw_data-&gt;DisplaySize<sp/>to<sp/>setup<sp/>projection<sp/>matrix<sp/>and<sp/>clipping<sp/>rectangle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2018-05-25:<sp/>OpenGL:<sp/>Removed<sp/>unnecessary<sp/>backup/restore<sp/>of<sp/>GL_ELEMENT_ARRAY_BUFFER_BINDING<sp/>since<sp/>this<sp/>is<sp/>part<sp/>of<sp/>the<sp/>VAO<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2018-05-14:<sp/>OpenGL:<sp/>Making<sp/>the<sp/>call<sp/>to<sp/>glBindSampler()<sp/>optional<sp/>so<sp/>3.2<sp/>context<sp/>won&apos;t<sp/>fail<sp/>if<sp/>the<sp/>function<sp/>is<sp/>a<sp/>NULL<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2018-03-06:<sp/>OpenGL:<sp/>Added<sp/>const<sp/>char*<sp/>glsl_version<sp/>parameter<sp/>to<sp/>ImGui_ImplOpenGL3_Init()<sp/>so<sp/>user<sp/>can<sp/>override<sp/>the<sp/>GLSL<sp/>version<sp/>e.g.<sp/>&quot;#version<sp/>150&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2018-02-23:<sp/>OpenGL:<sp/>Create<sp/>the<sp/>VAO<sp/>in<sp/>the<sp/>render<sp/>function<sp/>so<sp/>the<sp/>setup<sp/>can<sp/>more<sp/>easily<sp/>be<sp/>used<sp/>with<sp/>multiple<sp/>shared<sp/>GL<sp/>context.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2018-02-16:<sp/>Misc:<sp/>Obsoleted<sp/>the<sp/>io.RenderDrawListsFn<sp/>callback<sp/>and<sp/>exposed<sp/>ImGui_ImplSdlGL3_RenderDrawData()<sp/>in<sp/>the<sp/>.h<sp/>file<sp/>so<sp/>you<sp/>can<sp/>call<sp/>it<sp/>yourself.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2018-01-07:<sp/>OpenGL:<sp/>Changed<sp/>GLSL<sp/>shader<sp/>version<sp/>from<sp/>330<sp/>to<sp/>150.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2017-09-01:<sp/>OpenGL:<sp/>Save<sp/>and<sp/>restore<sp/>current<sp/>bound<sp/>sampler.<sp/>Save<sp/>and<sp/>restore<sp/>current<sp/>polygon<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2017-05-01:<sp/>OpenGL:<sp/>Fixed<sp/>save<sp/>and<sp/>restore<sp/>of<sp/>current<sp/>blend<sp/>func<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2017-05-01:<sp/>OpenGL:<sp/>Fixed<sp/>save<sp/>and<sp/>restore<sp/>of<sp/>current<sp/>GL_ACTIVE_TEXTURE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2016-09-05:<sp/>OpenGL:<sp/>Fixed<sp/>save<sp/>and<sp/>restore<sp/>of<sp/>current<sp/>scissor<sp/>rectangle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2016-07-29:<sp/>OpenGL:<sp/>Explicitly<sp/>setting<sp/>GL_UNPACK_ROW_LENGTH<sp/>to<sp/>reduce<sp/>issues<sp/>because<sp/>SDL<sp/>changes<sp/>it.<sp/>(#752)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OpenGL<sp/><sp/><sp/><sp/>GLSL<sp/><sp/><sp/><sp/><sp/><sp/>GLSL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/>version<sp/><sp/><sp/>version<sp/><sp/><sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2.0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>110<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;#version<sp/>110&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2.1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>120<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;#version<sp/>120&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>3.0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>130<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;#version<sp/>130&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>3.1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>140<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;#version<sp/>140&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>3.2<sp/><sp/><sp/><sp/><sp/><sp/><sp/>150<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;#version<sp/>150&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>3.3<sp/><sp/><sp/><sp/><sp/><sp/><sp/>330<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;#version<sp/>330<sp/>core&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>4.0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>400<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;#version<sp/>400<sp/>core&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>4.1<sp/><sp/><sp/><sp/><sp/><sp/><sp/>410<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;#version<sp/>410<sp/>core&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>4.2<sp/><sp/><sp/><sp/><sp/><sp/><sp/>420<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;#version<sp/>410<sp/>core&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>4.3<sp/><sp/><sp/><sp/><sp/><sp/><sp/>430<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;#version<sp/>430<sp/>core&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>ES<sp/>2.0<sp/><sp/><sp/><sp/>100<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;#version<sp/>100&quot;<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>WebGL<sp/>1.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>ES<sp/>3.0<sp/><sp/><sp/><sp/>300<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;#version<sp/>300<sp/>es&quot;<sp/><sp/><sp/>=<sp/>WebGL<sp/>2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>!defined(_CRT_SECURE_NO_WARNINGS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_CRT_SECURE_NO_WARNINGS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;imgui.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;imgui_impl_opengl3.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>_MSC_VER<sp/>&lt;=<sp/>1500<sp/></highlight><highlight class="comment">//<sp/>MSVC<sp/>2008<sp/>or<sp/>earlier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>intptr_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>intptr_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Clang<sp/>warnings<sp/>with<sp/>-Weverything</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wold-style-cast&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>warning:<sp/>use<sp/>of<sp/>old-style<sp/>cast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wsign-conversion&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>warning:<sp/>implicit<sp/>conversion<sp/>changes<sp/>signedness</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__has_warning(&quot;-Wzero-as-null-pointer-constant&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wzero-as-null-pointer-constant&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GL<sp/>includes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(IMGUI_IMPL_OPENGL_ES2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;GLES2/gl2.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__EMSCRIPTEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GL_GLEXT_PROTOTYPES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GL_GLEXT_PROTOTYPES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;GLES2/gl2ext.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(IMGUI_IMPL_OPENGL_ES3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__APPLE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;TargetConditionals.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(__APPLE__)<sp/>&amp;&amp;<sp/>(TARGET_OS_IOS<sp/>||<sp/>TARGET_OS_TV))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;OpenGLES/ES3/gl.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>GL<sp/>ES<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;GLES3/gl3.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>GL<sp/>ES<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>!defined(IMGUI_IMPL_OPENGL_LOADER_CUSTOM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Modern<sp/>desktop<sp/>OpenGL<sp/>doesn&apos;t<sp/>have<sp/>a<sp/>standard<sp/>portable<sp/>header<sp/>file<sp/>to<sp/>load<sp/>OpenGL<sp/>function<sp/>pointers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>libraries<sp/>are<sp/>often<sp/>used<sp/>for<sp/>this<sp/>purpose!<sp/>Here<sp/>we<sp/>are<sp/>using<sp/>our<sp/>own<sp/>minimal<sp/>custom<sp/>loader<sp/>based<sp/>on<sp/>gl3w.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>rest<sp/>of<sp/>your<sp/>app/engine,<sp/>you<sp/>can<sp/>use<sp/>another<sp/>loader<sp/>of<sp/>your<sp/>choice<sp/>(gl3w,<sp/>glew,<sp/>glad,<sp/>glbinding,<sp/>glext,<sp/>glLoadGen,<sp/>etc.).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>you<sp/>happen<sp/>to<sp/>be<sp/>developing<sp/>a<sp/>new<sp/>feature<sp/>for<sp/>this<sp/>backend<sp/>(imgui_impl_opengl3.cpp):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>You<sp/>may<sp/>need<sp/>to<sp/>regenerate<sp/>imgui_impl_opengl3_loader.h<sp/>to<sp/>add<sp/>new<sp/>symbols.<sp/>See<sp/>https://github.com/dearimgui/gl3w_stripped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>You<sp/>can<sp/>temporarily<sp/>use<sp/>an<sp/>unstripped<sp/>version.<sp/>See<sp/>https://github.com/dearimgui/gl3w_stripped/releases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Changes<sp/>to<sp/>this<sp/>backend<sp/>using<sp/>new<sp/>APIs<sp/>should<sp/>be<sp/>accompanied<sp/>by<sp/>a<sp/>regenerated<sp/>stripped<sp/>loader<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMGL3W_IMPL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;imgui_impl_opengl3_loader.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Vertex<sp/>arrays<sp/>are<sp/>not<sp/>supported<sp/>on<sp/>ES2/WebGL1<sp/>unless<sp/>Emscripten<sp/>which<sp/>uses<sp/>an<sp/>extension</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>IMGUI_IMPL_OPENGL_ES2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMGUI_IMPL_OPENGL_USE_VERTEX_ARRAY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__EMSCRIPTEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMGUI_IMPL_OPENGL_USE_VERTEX_ARRAY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>glBindVertexArray<sp/><sp/><sp/><sp/><sp/><sp/><sp/>glBindVertexArrayOES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>glGenVertexArrays<sp/><sp/><sp/><sp/><sp/><sp/><sp/>glGenVertexArraysOES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>glDeleteVertexArrays<sp/><sp/><sp/><sp/>glDeleteVertexArraysOES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GL_VERTEX_ARRAY_BINDING<sp/>GL_VERTEX_ARRAY_BINDING_OES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Desktop<sp/>GL<sp/>2.0+<sp/>has<sp/>glPolygonMode()<sp/>which<sp/>GL<sp/>ES<sp/>and<sp/>WebGL<sp/>don&apos;t<sp/>have.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GL_POLYGON_MODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMGUI_IMPL_HAS_POLYGON_MODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Desktop<sp/>GL<sp/>3.2+<sp/>has<sp/>glDrawElementsBaseVertex()<sp/>which<sp/>GL<sp/>ES<sp/>and<sp/>WebGL<sp/>don&apos;t<sp/>have.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(IMGUI_IMPL_OPENGL_ES2)<sp/>&amp;&amp;<sp/>!defined(IMGUI_IMPL_OPENGL_ES3)<sp/>&amp;&amp;<sp/>defined(GL_VERSION_3_2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMGUI_IMPL_OPENGL_MAY_HAVE_VTX_OFFSET</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Desktop<sp/>GL<sp/>3.3+<sp/>has<sp/>glBindSampler()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(IMGUI_IMPL_OPENGL_ES2)<sp/>&amp;&amp;<sp/>!defined(IMGUI_IMPL_OPENGL_ES3)<sp/>&amp;&amp;<sp/>defined(GL_VERSION_3_3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMGUI_IMPL_OPENGL_MAY_HAVE_BIND_SAMPLER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Desktop<sp/>GL<sp/>3.1+<sp/>has<sp/>GL_PRIMITIVE_RESTART<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(IMGUI_IMPL_OPENGL_ES2)<sp/>&amp;&amp;<sp/>!defined(IMGUI_IMPL_OPENGL_ES3)<sp/>&amp;&amp;<sp/>defined(GL_VERSION_3_1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMGUI_IMPL_OPENGL_MAY_HAVE_PRIMITIVE_RESTART</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Desktop<sp/>GL<sp/>use<sp/>extension<sp/>detection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(IMGUI_IMPL_OPENGL_ES2)<sp/>&amp;&amp;<sp/>!defined(IMGUI_IMPL_OPENGL_ES3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMGUI_IMPL_OPENGL_MAY_HAVE_EXTENSIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OpenGL<sp/>Data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="struct_im_gui___impl_open_g_l3___data" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_im_gui___impl_open_g_l3___data" kindref="compound">ImGui_ImplOpenGL3_Data</ref></highlight></codeline>
<codeline lineno="179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>GLuint<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GlVersion;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extracted<sp/>at<sp/>runtime<sp/>using<sp/>GL_MAJOR_VERSION,<sp/>GL_MINOR_VERSION<sp/>queries<sp/>(e.g.<sp/>320<sp/>for<sp/>GL<sp/>3.2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GlslVersionString[32];<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Specified<sp/>by<sp/>user<sp/>or<sp/>detected<sp/>based<sp/>on<sp/>compile<sp/>time<sp/>GL<sp/>settings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>GLuint<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FontTexture;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>GLuint<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ShaderHandle;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>GLint<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AttribLocationTex;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Uniforms<sp/>location</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>GLint<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AttribLocationProjMtx;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>GLuint<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AttribLocationVtxPos;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Vertex<sp/>attributes<sp/>location</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>GLuint<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AttribLocationVtxUV;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>GLuint<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AttribLocationVtxColor;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>VboHandle,<sp/>ElementsHandle;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>GLsizeiptr<sp/><sp/><sp/><sp/><sp/><sp/>VertexBufferSize;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>GLsizeiptr<sp/><sp/><sp/><sp/><sp/><sp/>IndexBufferSize;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HasClipOrigin;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_open_g_l3___data" kindref="compound">ImGui_ImplOpenGL3_Data</ref>()<sp/>{<sp/>memset(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">));<sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal">};</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Backend<sp/>data<sp/>stored<sp/>in<sp/>io.BackendRendererUserData<sp/>to<sp/>allow<sp/>support<sp/>for<sp/>multiple<sp/>Dear<sp/>ImGui<sp/>contexts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>STRONGLY<sp/>preferred<sp/>that<sp/>you<sp/>use<sp/>docking<sp/>branch<sp/>with<sp/>multi-viewports<sp/>(==<sp/>single<sp/>Dear<sp/>ImGui<sp/>context<sp/>+<sp/>multiple<sp/>windows)<sp/>instead<sp/>of<sp/>multiple<sp/>Dear<sp/>ImGui<sp/>contexts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_im_gui___impl_open_g_l3___data" kindref="compound">ImGui_ImplOpenGL3_Data</ref>*<sp/>ImGui_ImplOpenGL3_GetBackendData()</highlight></codeline>
<codeline lineno="200"><highlight class="normal">{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ImGui::GetCurrentContext()<sp/>?<sp/>(<ref refid="struct_im_gui___impl_open_g_l3___data" kindref="compound">ImGui_ImplOpenGL3_Data</ref>*)ImGui::GetIO().BackendRendererUserData<sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Forward<sp/>Declarations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplOpenGL3_InitPlatformInterface();</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplOpenGL3_ShutdownPlatformInterface();</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplOpenGL3_Init(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>glsl_version)</highlight></codeline>
<codeline lineno="210"><highlight class="normal">{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui_i_o" kindref="compound">ImGuiIO</ref>&amp;<sp/>io<sp/>=<sp/>ImGui::GetIO();</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_ASSERT(io.BackendRendererUserData<sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Already<sp/>initialized<sp/>a<sp/>renderer<sp/>backend!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>our<sp/>loader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(IMGUI_IMPL_OPENGL_ES2)<sp/>&amp;&amp;<sp/>!defined(IMGUI_IMPL_OPENGL_ES3)<sp/>&amp;&amp;<sp/>!defined(IMGUI_IMPL_OPENGL_LOADER_CUSTOM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(imgl3wInit()<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>OpenGL<sp/>loader!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>backend<sp/>capabilities<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_open_g_l3___data" kindref="compound">ImGui_ImplOpenGL3_Data</ref>*<sp/>bd<sp/>=<sp/>IM_NEW(<ref refid="struct_im_gui___impl_open_g_l3___data" kindref="compound">ImGui_ImplOpenGL3_Data</ref>)();</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>io.BackendRendererUserData<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)bd;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>io.BackendRendererName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;imgui_impl_opengl3&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Query<sp/>for<sp/>GL<sp/>version<sp/>(e.g.<sp/>320<sp/>for<sp/>GL<sp/>3.2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(IMGUI_IMPL_OPENGL_ES2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>GLint<sp/>major<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>GLint<sp/>minor<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>glGetIntegerv(GL_MAJOR_VERSION,<sp/>&amp;major);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>glGetIntegerv(GL_MINOR_VERSION,<sp/>&amp;minor);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(major<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>minor<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Query<sp/>GL_VERSION<sp/>in<sp/>desktop<sp/>GL<sp/>2.x,<sp/>the<sp/>string<sp/>will<sp/>start<sp/>with<sp/>&quot;&lt;major&gt;.&lt;minor&gt;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>gl_version<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)glGetString(GL_VERSION);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sscanf(gl_version,<sp/></highlight><highlight class="stringliteral">&quot;%d.%d&quot;</highlight><highlight class="normal">,<sp/>&amp;major,<sp/>&amp;minor);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>bd-&gt;GlVersion<sp/>=<sp/>(GLuint)(major<sp/>*<sp/>100<sp/>+<sp/>minor<sp/>*<sp/>10);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>bd-&gt;GlVersion<sp/>=<sp/>200;<sp/></highlight><highlight class="comment">//<sp/>GLES<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>IMGUI_IMPL_OPENGL_MAY_HAVE_VTX_OFFSET</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bd-&gt;GlVersion<sp/>&gt;=<sp/>320)</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>io.BackendFlags<sp/>|=<sp/>ImGuiBackendFlags_RendererHasVtxOffset;<sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>honor<sp/>the<sp/>ImDrawCmd::VtxOffset<sp/>field,<sp/>allowing<sp/>for<sp/>large<sp/>meshes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>io.BackendFlags<sp/>|=<sp/>ImGuiBackendFlags_RendererHasViewports;<sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>create<sp/>multi-viewports<sp/>on<sp/>the<sp/>Renderer<sp/>side<sp/>(optional)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>GLSL<sp/>version<sp/>string<sp/>so<sp/>we<sp/>can<sp/>refer<sp/>to<sp/>it<sp/>later<sp/>in<sp/>case<sp/>we<sp/>recreate<sp/>shaders.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>GLSL<sp/>version<sp/>is<sp/>NOT<sp/>the<sp/>same<sp/>as<sp/>GL<sp/>version.<sp/>Leave<sp/>this<sp/>to<sp/>NULL<sp/>if<sp/>unsure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(glsl_version<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(IMGUI_IMPL_OPENGL_ES2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glsl_version<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;#version<sp/>100&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(IMGUI_IMPL_OPENGL_ES3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glsl_version<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;#version<sp/>300<sp/>es&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__APPLE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glsl_version<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;#version<sp/>150&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glsl_version<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;#version<sp/>130&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_ASSERT((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)strlen(glsl_version)<sp/>+<sp/>2<sp/>&lt;<sp/>IM_ARRAYSIZE(bd-&gt;GlslVersionString));</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(bd-&gt;GlslVersionString,<sp/>glsl_version);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>strcat(bd-&gt;GlslVersionString,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>an<sp/>arbitrary<sp/>GL<sp/>call<sp/>(we<sp/>don&apos;t<sp/>actually<sp/>need<sp/>the<sp/>result)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>IF<sp/>YOU<sp/>GET<sp/>A<sp/>CRASH<sp/>HERE:<sp/>it<sp/>probably<sp/>means<sp/>the<sp/>OpenGL<sp/>function<sp/>loader<sp/>didn&apos;t<sp/>do<sp/>its<sp/>job.<sp/>Let<sp/>us<sp/>know!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>GLint<sp/>current_texture;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>glGetIntegerv(GL_TEXTURE_BINDING_2D,<sp/>&amp;current_texture);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Detect<sp/>extensions<sp/>we<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>bd-&gt;HasClipOrigin<sp/>=<sp/>(bd-&gt;GlVersion<sp/>&gt;=<sp/>450);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>IMGUI_IMPL_OPENGL_MAY_HAVE_EXTENSIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>GLint<sp/>num_extensions<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>glGetIntegerv(GL_NUM_EXTENSIONS,<sp/>&amp;num_extensions);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(GLint<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_extensions;<sp/>i++)</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>extension<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)glGetStringi(GL_EXTENSIONS,<sp/>i);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(extension<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>strcmp(extension,<sp/></highlight><highlight class="stringliteral">&quot;GL_ARB_clip_control&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bd-&gt;HasClipOrigin<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(io.ConfigFlags<sp/>&amp;<sp/>ImGuiConfigFlags_ViewportsEnable)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui_ImplOpenGL3_InitPlatformInterface();</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplOpenGL3_Shutdown()</highlight></codeline>
<codeline lineno="294"><highlight class="normal">{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_open_g_l3___data" kindref="compound">ImGui_ImplOpenGL3_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplOpenGL3_GetBackendData();</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_ASSERT(bd<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>renderer<sp/>backend<sp/>to<sp/>shutdown,<sp/>or<sp/>already<sp/>shutdown?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui_i_o" kindref="compound">ImGuiIO</ref>&amp;<sp/>io<sp/>=<sp/>ImGui::GetIO();</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplOpenGL3_ShutdownPlatformInterface();</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplOpenGL3_DestroyDeviceObjects();</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>io.BackendRendererName<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>io.BackendRendererUserData<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_DELETE(bd);</highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplOpenGL3_NewFrame()</highlight></codeline>
<codeline lineno="307"><highlight class="normal">{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_open_g_l3___data" kindref="compound">ImGui_ImplOpenGL3_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplOpenGL3_GetBackendData();</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_ASSERT(bd<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Did<sp/>you<sp/>call<sp/>ImGui_ImplOpenGL3_Init()?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bd-&gt;ShaderHandle)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui_ImplOpenGL3_CreateDeviceObjects();</highlight></codeline>
<codeline lineno="313"><highlight class="normal">}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplOpenGL3_SetupRenderState(<ref refid="struct_im_draw_data" kindref="compound">ImDrawData</ref>*<sp/>draw_data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fb_width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fb_height,<sp/>GLuint<sp/>vertex_array_object)</highlight></codeline>
<codeline lineno="316"><highlight class="normal">{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_open_g_l3___data" kindref="compound">ImGui_ImplOpenGL3_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplOpenGL3_GetBackendData();</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>render<sp/>state:<sp/>alpha-blending<sp/>enabled,<sp/>no<sp/>face<sp/>culling,<sp/>no<sp/>depth<sp/>testing,<sp/>scissor<sp/>enabled,<sp/>polygon<sp/>fill</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>glEnable(GL_BLEND);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>glBlendEquation(GL_FUNC_ADD);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>glBlendFuncSeparate(GL_SRC_ALPHA,<sp/>GL_ONE_MINUS_SRC_ALPHA,<sp/>GL_ONE,<sp/>GL_ONE_MINUS_SRC_ALPHA);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>glDisable(GL_CULL_FACE);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>glDisable(GL_DEPTH_TEST);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>glDisable(GL_STENCIL_TEST);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>glEnable(GL_SCISSOR_TEST);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>IMGUI_IMPL_OPENGL_MAY_HAVE_PRIMITIVE_RESTART</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bd-&gt;GlVersion<sp/>&gt;=<sp/>310)</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glDisable(GL_PRIMITIVE_RESTART);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>IMGUI_IMPL_HAS_POLYGON_MODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>glPolygonMode(GL_FRONT_AND_BACK,<sp/>GL_FILL);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Support<sp/>for<sp/>GL<sp/>4.5<sp/>rarely<sp/>used<sp/>glClipControl(GL_UPPER_LEFT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GL_CLIP_ORIGIN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>clip_origin_lower_left<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bd-&gt;HasClipOrigin)</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLenum<sp/>current_clip_origin<sp/>=<sp/>0;<sp/>glGetIntegerv(GL_CLIP_ORIGIN,<sp/>(GLint*)&amp;current_clip_origin);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current_clip_origin<sp/>==<sp/>GL_UPPER_LEFT)</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip_origin_lower_left<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>viewport,<sp/>orthographic<sp/>projection<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Our<sp/>visible<sp/>imgui<sp/>space<sp/>lies<sp/>from<sp/>draw_data-&gt;DisplayPos<sp/>(top<sp/>left)<sp/>to<sp/>draw_data-&gt;DisplayPos+data_data-&gt;DisplaySize<sp/>(bottom<sp/>right).<sp/>DisplayPos<sp/>is<sp/>(0,0)<sp/>for<sp/>single<sp/>viewport<sp/>apps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>glViewport(0,<sp/>0,<sp/>(GLsizei)fb_width,<sp/>(GLsizei)fb_height);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>L<sp/>=<sp/>draw_data-&gt;DisplayPos.x;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>R<sp/>=<sp/>draw_data-&gt;DisplayPos.x<sp/>+<sp/>draw_data-&gt;DisplaySize.x;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>T<sp/>=<sp/>draw_data-&gt;DisplayPos.y;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>B<sp/>=<sp/>draw_data-&gt;DisplayPos.y<sp/>+<sp/>draw_data-&gt;DisplaySize.y;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GL_CLIP_ORIGIN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!clip_origin_lower_left)<sp/>{<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tmp<sp/>=<sp/>T;<sp/>T<sp/>=<sp/>B;<sp/>B<sp/>=<sp/>tmp;<sp/>}<sp/></highlight><highlight class="comment">//<sp/>Swap<sp/>top<sp/>and<sp/>bottom<sp/>if<sp/>origin<sp/>is<sp/>upper<sp/>left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ortho_projection[4][4]<sp/>=</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>2.0f/(R-L),<sp/><sp/><sp/>0.0f,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0f,<sp/><sp/><sp/>0.0f<sp/>},</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0.0f,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.0f/(T-B),<sp/><sp/><sp/>0.0f,<sp/><sp/><sp/>0.0f<sp/>},</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>0.0f,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0f,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1.0f,<sp/><sp/><sp/>0.0f<sp/>},</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>(R+L)/(L-R),<sp/><sp/>(T+B)/(B-T),<sp/><sp/>0.0f,<sp/><sp/><sp/>1.0f<sp/>},</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>glUseProgram(bd-&gt;ShaderHandle);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>glUniform1i(bd-&gt;AttribLocationTex,<sp/>0);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>glUniformMatrix4fv(bd-&gt;AttribLocationProjMtx,<sp/>1,<sp/>GL_FALSE,<sp/>&amp;ortho_projection[0][0]);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>IMGUI_IMPL_OPENGL_MAY_HAVE_BIND_SAMPLER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bd-&gt;GlVersion<sp/>&gt;=<sp/>330)</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glBindSampler(0,<sp/>0);<sp/></highlight><highlight class="comment">//<sp/>We<sp/>use<sp/>combined<sp/>texture/sampler<sp/>state.<sp/>Applications<sp/>using<sp/>GL<sp/>3.3<sp/>may<sp/>set<sp/>that<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)vertex_array_object;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>IMGUI_IMPL_OPENGL_USE_VERTEX_ARRAY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>glBindVertexArray(vertex_array_object);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bind<sp/>vertex/index<sp/>buffers<sp/>and<sp/>setup<sp/>attributes<sp/>for<sp/>ImDrawVert</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>glBindBuffer(GL_ARRAY_BUFFER,<sp/>bd-&gt;VboHandle);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,<sp/>bd-&gt;ElementsHandle);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>glEnableVertexAttribArray(bd-&gt;AttribLocationVtxPos);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>glEnableVertexAttribArray(bd-&gt;AttribLocationVtxUV);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>glEnableVertexAttribArray(bd-&gt;AttribLocationVtxColor);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>glVertexAttribPointer(bd-&gt;AttribLocationVtxPos,<sp/><sp/><sp/>2,<sp/>GL_FLOAT,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_FALSE,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_im_draw_vert" kindref="compound">ImDrawVert</ref>),<sp/>(GLvoid*)IM_OFFSETOF(<ref refid="struct_im_draw_vert" kindref="compound">ImDrawVert</ref>,<sp/>pos));</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>glVertexAttribPointer(bd-&gt;AttribLocationVtxUV,<sp/><sp/><sp/><sp/>2,<sp/>GL_FLOAT,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_FALSE,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_im_draw_vert" kindref="compound">ImDrawVert</ref>),<sp/>(GLvoid*)IM_OFFSETOF(<ref refid="struct_im_draw_vert" kindref="compound">ImDrawVert</ref>,<sp/>uv));</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>glVertexAttribPointer(bd-&gt;AttribLocationVtxColor,<sp/>4,<sp/>GL_UNSIGNED_BYTE,<sp/>GL_TRUE,<sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_im_draw_vert" kindref="compound">ImDrawVert</ref>),<sp/>(GLvoid*)IM_OFFSETOF(<ref refid="struct_im_draw_vert" kindref="compound">ImDrawVert</ref>,<sp/>col));</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OpenGL3<sp/>Render<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>this<sp/>implementation<sp/>is<sp/>little<sp/>overcomplicated<sp/>because<sp/>we<sp/>are<sp/>saving/setting<sp/>up/restoring<sp/>every<sp/>OpenGL<sp/>state<sp/>explicitly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>in<sp/>order<sp/>to<sp/>be<sp/>able<sp/>to<sp/>run<sp/>within<sp/>an<sp/>OpenGL<sp/>engine<sp/>that<sp/>doesn&apos;t<sp/>do<sp/>so.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplOpenGL3_RenderDrawData(<ref refid="struct_im_draw_data" kindref="compound">ImDrawData</ref>*<sp/>draw_data)</highlight></codeline>
<codeline lineno="392"><highlight class="normal">{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>rendering<sp/>when<sp/>minimized,<sp/>scale<sp/>coordinates<sp/>for<sp/>retina<sp/>displays<sp/>(screen<sp/>coordinates<sp/>!=<sp/>framebuffer<sp/>coordinates)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fb_width<sp/>=<sp/>(int)(draw_data-&gt;DisplaySize.x<sp/>*<sp/>draw_data-&gt;FramebufferScale.x);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fb_height<sp/>=<sp/>(int)(draw_data-&gt;DisplaySize.y<sp/>*<sp/>draw_data-&gt;FramebufferScale.y);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fb_width<sp/>&lt;=<sp/>0<sp/>||<sp/>fb_height<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_open_g_l3___data" kindref="compound">ImGui_ImplOpenGL3_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplOpenGL3_GetBackendData();</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Backup<sp/>GL<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>GLenum<sp/>last_active_texture;<sp/>glGetIntegerv(GL_ACTIVE_TEXTURE,<sp/>(GLint*)&amp;last_active_texture);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>glActiveTexture(GL_TEXTURE0);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>GLuint<sp/>last_program;<sp/>glGetIntegerv(GL_CURRENT_PROGRAM,<sp/>(GLint*)&amp;last_program);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>GLuint<sp/>last_texture;<sp/>glGetIntegerv(GL_TEXTURE_BINDING_2D,<sp/>(GLint*)&amp;last_texture);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>IMGUI_IMPL_OPENGL_MAY_HAVE_BIND_SAMPLER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>GLuint<sp/>last_sampler;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bd-&gt;GlVersion<sp/>&gt;=<sp/>330)<sp/>{<sp/>glGetIntegerv(GL_SAMPLER_BINDING,<sp/>(GLint*)&amp;last_sampler);<sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/>last_sampler<sp/>=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>GLuint<sp/>last_array_buffer;<sp/>glGetIntegerv(GL_ARRAY_BUFFER_BINDING,<sp/>(GLint*)&amp;last_array_buffer);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>IMGUI_IMPL_OPENGL_USE_VERTEX_ARRAY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>GLuint<sp/>last_vertex_array_object;<sp/>glGetIntegerv(GL_VERTEX_ARRAY_BINDING,<sp/>(GLint*)&amp;last_vertex_array_object);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>IMGUI_IMPL_HAS_POLYGON_MODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>GLint<sp/>last_polygon_mode[2];<sp/>glGetIntegerv(GL_POLYGON_MODE,<sp/>last_polygon_mode);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>GLint<sp/>last_viewport[4];<sp/>glGetIntegerv(GL_VIEWPORT,<sp/>last_viewport);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>GLint<sp/>last_scissor_box[4];<sp/>glGetIntegerv(GL_SCISSOR_BOX,<sp/>last_scissor_box);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>GLenum<sp/>last_blend_src_rgb;<sp/>glGetIntegerv(GL_BLEND_SRC_RGB,<sp/>(GLint*)&amp;last_blend_src_rgb);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>GLenum<sp/>last_blend_dst_rgb;<sp/>glGetIntegerv(GL_BLEND_DST_RGB,<sp/>(GLint*)&amp;last_blend_dst_rgb);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>GLenum<sp/>last_blend_src_alpha;<sp/>glGetIntegerv(GL_BLEND_SRC_ALPHA,<sp/>(GLint*)&amp;last_blend_src_alpha);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>GLenum<sp/>last_blend_dst_alpha;<sp/>glGetIntegerv(GL_BLEND_DST_ALPHA,<sp/>(GLint*)&amp;last_blend_dst_alpha);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>GLenum<sp/>last_blend_equation_rgb;<sp/>glGetIntegerv(GL_BLEND_EQUATION_RGB,<sp/>(GLint*)&amp;last_blend_equation_rgb);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>GLenum<sp/>last_blend_equation_alpha;<sp/>glGetIntegerv(GL_BLEND_EQUATION_ALPHA,<sp/>(GLint*)&amp;last_blend_equation_alpha);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>GLboolean<sp/>last_enable_blend<sp/>=<sp/>glIsEnabled(GL_BLEND);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>GLboolean<sp/>last_enable_cull_face<sp/>=<sp/>glIsEnabled(GL_CULL_FACE);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>GLboolean<sp/>last_enable_depth_test<sp/>=<sp/>glIsEnabled(GL_DEPTH_TEST);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>GLboolean<sp/>last_enable_stencil_test<sp/>=<sp/>glIsEnabled(GL_STENCIL_TEST);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>GLboolean<sp/>last_enable_scissor_test<sp/>=<sp/>glIsEnabled(GL_SCISSOR_TEST);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>IMGUI_IMPL_OPENGL_MAY_HAVE_PRIMITIVE_RESTART</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>GLboolean<sp/>last_enable_primitive_restart<sp/>=<sp/>(bd-&gt;GlVersion<sp/>&gt;=<sp/>310)<sp/>?<sp/>glIsEnabled(GL_PRIMITIVE_RESTART)<sp/>:<sp/>GL_FALSE;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>desired<sp/>GL<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recreate<sp/>the<sp/>VAO<sp/>every<sp/>time<sp/>(this<sp/>is<sp/>to<sp/>easily<sp/>allow<sp/>multiple<sp/>GL<sp/>contexts<sp/>to<sp/>be<sp/>rendered<sp/>to.<sp/>VAO<sp/>are<sp/>not<sp/>shared<sp/>among<sp/>GL<sp/>contexts)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>renderer<sp/>would<sp/>actually<sp/>work<sp/>without<sp/>any<sp/>VAO<sp/>bound,<sp/>but<sp/>then<sp/>our<sp/>VertexAttrib<sp/>calls<sp/>would<sp/>overwrite<sp/>the<sp/>default<sp/>one<sp/>currently<sp/>bound.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>GLuint<sp/>vertex_array_object<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>IMGUI_IMPL_OPENGL_USE_VERTEX_ARRAY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>glGenVertexArrays(1,<sp/>&amp;vertex_array_object);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplOpenGL3_SetupRenderState(draw_data,<sp/>fb_width,<sp/>fb_height,<sp/>vertex_array_object);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Will<sp/>project<sp/>scissor/clipping<sp/>rectangles<sp/>into<sp/>framebuffer<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_vec2" kindref="compound">ImVec2</ref><sp/>clip_off<sp/>=<sp/>draw_data-&gt;DisplayPos;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(0,0)<sp/>unless<sp/>using<sp/>multi-viewports</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_vec2" kindref="compound">ImVec2</ref><sp/>clip_scale<sp/>=<sp/>draw_data-&gt;FramebufferScale;<sp/></highlight><highlight class="comment">//<sp/>(1,1)<sp/>unless<sp/>using<sp/>retina<sp/>display<sp/>which<sp/>are<sp/>often<sp/>(2,2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Render<sp/>command<sp/>lists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>draw_data-&gt;CmdListsCount;<sp/>n++)</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_im_draw_list" kindref="compound">ImDrawList</ref>*<sp/>cmd_list<sp/>=<sp/>draw_data-&gt;CmdLists[n];</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Upload<sp/>vertex/index<sp/>buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLsizeiptr<sp/>vtx_buffer_size<sp/>=<sp/>(GLsizeiptr)cmd_list-&gt;VtxBuffer.Size<sp/>*<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_im_draw_vert" kindref="compound">ImDrawVert</ref>);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLsizeiptr<sp/>idx_buffer_size<sp/>=<sp/>(GLsizeiptr)cmd_list-&gt;IdxBuffer.Size<sp/>*<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ImDrawIdx);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bd-&gt;VertexBufferSize<sp/>&lt;<sp/>vtx_buffer_size)</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bd-&gt;VertexBufferSize<sp/>=<sp/>vtx_buffer_size;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glBufferData(GL_ARRAY_BUFFER,<sp/>bd-&gt;VertexBufferSize,<sp/>NULL,<sp/>GL_STREAM_DRAW);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bd-&gt;IndexBufferSize<sp/>&lt;<sp/>idx_buffer_size)</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bd-&gt;IndexBufferSize<sp/>=<sp/>idx_buffer_size;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glBufferData(GL_ELEMENT_ARRAY_BUFFER,<sp/>bd-&gt;IndexBufferSize,<sp/>NULL,<sp/>GL_STREAM_DRAW);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glBufferSubData(GL_ARRAY_BUFFER,<sp/>0,<sp/>vtx_buffer_size,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLvoid*)cmd_list-&gt;VtxBuffer.Data);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glBufferSubData(GL_ELEMENT_ARRAY_BUFFER,<sp/>0,<sp/>idx_buffer_size,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLvoid*)cmd_list-&gt;IdxBuffer.Data);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmd_i<sp/>=<sp/>0;<sp/>cmd_i<sp/>&lt;<sp/>cmd_list-&gt;CmdBuffer.Size;<sp/>cmd_i++)</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_im_draw_cmd" kindref="compound">ImDrawCmd</ref>*<sp/>pcmd<sp/>=<sp/>&amp;cmd_list-&gt;CmdBuffer[cmd_i];</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pcmd-&gt;UserCallback<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>User<sp/>callback,<sp/>registered<sp/>via<sp/>ImDrawList::AddCallback()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(ImDrawCallback_ResetRenderState<sp/>is<sp/>a<sp/>special<sp/>callback<sp/>value<sp/>used<sp/>by<sp/>the<sp/>user<sp/>to<sp/>request<sp/>the<sp/>renderer<sp/>to<sp/>reset<sp/>render<sp/>state.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pcmd-&gt;UserCallback<sp/>==<sp/>ImDrawCallback_ResetRenderState)</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui_ImplOpenGL3_SetupRenderState(draw_data,<sp/>fb_width,<sp/>fb_height,<sp/>vertex_array_object);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcmd-&gt;UserCallback(cmd_list,<sp/>pcmd);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Project<sp/>scissor/clipping<sp/>rectangles<sp/>into<sp/>framebuffer<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_im_vec2" kindref="compound">ImVec2</ref><sp/>clip_min((pcmd-&gt;ClipRect.x<sp/>-<sp/>clip_off.x)<sp/>*<sp/>clip_scale.x,<sp/>(pcmd-&gt;ClipRect.y<sp/>-<sp/>clip_off.y)<sp/>*<sp/>clip_scale.y);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_im_vec2" kindref="compound">ImVec2</ref><sp/>clip_max((pcmd-&gt;ClipRect.z<sp/>-<sp/>clip_off.x)<sp/>*<sp/>clip_scale.x,<sp/>(pcmd-&gt;ClipRect.w<sp/>-<sp/>clip_off.y)<sp/>*<sp/>clip_scale.y);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clip_max.x<sp/>&lt;=<sp/>clip_min.x<sp/>||<sp/>clip_max.y<sp/>&lt;=<sp/>clip_min.y)</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>scissor/clipping<sp/>rectangle<sp/>(Y<sp/>is<sp/>inverted<sp/>in<sp/>OpenGL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glScissor((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)clip_min.x,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)fb_height<sp/>-<sp/>clip_max.y),<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(clip_max.x<sp/>-<sp/>clip_min.x),<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(clip_max.y<sp/>-<sp/>clip_min.y));</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bind<sp/>texture,<sp/>Draw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glBindTexture(GL_TEXTURE_2D,<sp/>(GLuint)(intptr_t)pcmd-&gt;GetTexID());</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>IMGUI_IMPL_OPENGL_MAY_HAVE_VTX_OFFSET</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bd-&gt;GlVersion<sp/>&gt;=<sp/>320)</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glDrawElementsBaseVertex(GL_TRIANGLES,<sp/>(GLsizei)pcmd-&gt;ElemCount,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ImDrawIdx)<sp/>==<sp/>2<sp/>?<sp/>GL_UNSIGNED_SHORT<sp/>:<sp/>GL_UNSIGNED_INT,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)(intptr_t)(pcmd-&gt;IdxOffset<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ImDrawIdx)),<sp/>(GLint)pcmd-&gt;VtxOffset);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glDrawElements(GL_TRIANGLES,<sp/>(GLsizei)pcmd-&gt;ElemCount,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ImDrawIdx)<sp/>==<sp/>2<sp/>?<sp/>GL_UNSIGNED_SHORT<sp/>:<sp/>GL_UNSIGNED_INT,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)(intptr_t)(pcmd-&gt;IdxOffset<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ImDrawIdx)));</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Destroy<sp/>the<sp/>temporary<sp/>VAO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>IMGUI_IMPL_OPENGL_USE_VERTEX_ARRAY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>glDeleteVertexArrays(1,<sp/>&amp;vertex_array_object);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restore<sp/>modified<sp/>GL<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>glUseProgram(last_program);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>glBindTexture(GL_TEXTURE_2D,<sp/>last_texture);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>IMGUI_IMPL_OPENGL_MAY_HAVE_BIND_SAMPLER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bd-&gt;GlVersion<sp/>&gt;=<sp/>330)</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glBindSampler(0,<sp/>last_sampler);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>glActiveTexture(last_active_texture);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>IMGUI_IMPL_OPENGL_USE_VERTEX_ARRAY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>glBindVertexArray(last_vertex_array_object);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>glBindBuffer(GL_ARRAY_BUFFER,<sp/>last_array_buffer);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>glBlendEquationSeparate(last_blend_equation_rgb,<sp/>last_blend_equation_alpha);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>glBlendFuncSeparate(last_blend_src_rgb,<sp/>last_blend_dst_rgb,<sp/>last_blend_src_alpha,<sp/>last_blend_dst_alpha);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_enable_blend)<sp/>glEnable(GL_BLEND);<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>glDisable(GL_BLEND);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_enable_cull_face)<sp/>glEnable(GL_CULL_FACE);<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>glDisable(GL_CULL_FACE);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_enable_depth_test)<sp/>glEnable(GL_DEPTH_TEST);<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>glDisable(GL_DEPTH_TEST);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_enable_stencil_test)<sp/>glEnable(GL_STENCIL_TEST);<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>glDisable(GL_STENCIL_TEST);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_enable_scissor_test)<sp/>glEnable(GL_SCISSOR_TEST);<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>glDisable(GL_SCISSOR_TEST);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>IMGUI_IMPL_OPENGL_MAY_HAVE_PRIMITIVE_RESTART</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bd-&gt;GlVersion<sp/>&gt;=<sp/>310)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_enable_primitive_restart)<sp/>glEnable(GL_PRIMITIVE_RESTART);<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>glDisable(GL_PRIMITIVE_RESTART);<sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>IMGUI_IMPL_HAS_POLYGON_MODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>glPolygonMode(GL_FRONT_AND_BACK,<sp/>(GLenum)last_polygon_mode[0]);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>glViewport(last_viewport[0],<sp/>last_viewport[1],<sp/>(GLsizei)last_viewport[2],<sp/>(GLsizei)last_viewport[3]);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>glScissor(last_scissor_box[0],<sp/>last_scissor_box[1],<sp/>(GLsizei)last_scissor_box[2],<sp/>(GLsizei)last_scissor_box[3]);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)bd;<sp/></highlight><highlight class="comment">//<sp/>Not<sp/>all<sp/>compilation<sp/>paths<sp/>use<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ImGui_ImplOpenGL3_CreateFontsTexture()</highlight></codeline>
<codeline lineno="539"><highlight class="normal">{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui_i_o" kindref="compound">ImGuiIO</ref>&amp;<sp/>io<sp/>=<sp/>ImGui::GetIO();</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_open_g_l3___data" kindref="compound">ImGui_ImplOpenGL3_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplOpenGL3_GetBackendData();</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Build<sp/>texture<sp/>atlas</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pixels;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/>height;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>io.Fonts-&gt;GetTexDataAsRGBA32(&amp;pixels,<sp/>&amp;width,<sp/>&amp;height);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>as<sp/>RGBA<sp/>32-bit<sp/>(75%<sp/>of<sp/>the<sp/>memory<sp/>is<sp/>wasted,<sp/>but<sp/>default<sp/>font<sp/>is<sp/>so<sp/>small)<sp/>because<sp/>it<sp/>is<sp/>more<sp/>likely<sp/>to<sp/>be<sp/>compatible<sp/>with<sp/>user&apos;s<sp/>existing<sp/>shaders.<sp/>If<sp/>your<sp/>ImTextureId<sp/>represent<sp/>a<sp/>higher-level<sp/>concept<sp/>than<sp/>just<sp/>a<sp/>GL<sp/>texture<sp/>id,<sp/>consider<sp/>calling<sp/>GetTexDataAsAlpha8()<sp/>instead<sp/>to<sp/>save<sp/>on<sp/>GPU<sp/>memory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Upload<sp/>texture<sp/>to<sp/>graphics<sp/>system</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>GLint<sp/>last_texture;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>glGetIntegerv(GL_TEXTURE_BINDING_2D,<sp/>&amp;last_texture);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>glGenTextures(1,<sp/>&amp;bd-&gt;FontTexture);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>glBindTexture(GL_TEXTURE_2D,<sp/>bd-&gt;FontTexture);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>glTexParameteri(GL_TEXTURE_2D,<sp/>GL_TEXTURE_MIN_FILTER,<sp/>GL_LINEAR);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>glTexParameteri(GL_TEXTURE_2D,<sp/>GL_TEXTURE_MAG_FILTER,<sp/>GL_LINEAR);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GL_UNPACK_ROW_LENGTH<sp/></highlight><highlight class="comment">//<sp/>Not<sp/>on<sp/>WebGL/ES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>glPixelStorei(GL_UNPACK_ROW_LENGTH,<sp/>0);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>glTexImage2D(GL_TEXTURE_2D,<sp/>0,<sp/>GL_RGBA,<sp/>width,<sp/>height,<sp/>0,<sp/>GL_RGBA,<sp/>GL_UNSIGNED_BYTE,<sp/>pixels);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>our<sp/>identifier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>io.Fonts-&gt;SetTexID((ImTextureID)(intptr_t)bd-&gt;FontTexture);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restore<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>glBindTexture(GL_TEXTURE_2D,<sp/>last_texture);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplOpenGL3_DestroyFontsTexture()</highlight></codeline>
<codeline lineno="570"><highlight class="normal">{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui_i_o" kindref="compound">ImGuiIO</ref>&amp;<sp/>io<sp/>=<sp/>ImGui::GetIO();</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_open_g_l3___data" kindref="compound">ImGui_ImplOpenGL3_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplOpenGL3_GetBackendData();</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bd-&gt;FontTexture)</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glDeleteTextures(1,<sp/>&amp;bd-&gt;FontTexture);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>io.Fonts-&gt;SetTexID(0);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bd-&gt;FontTexture<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>you<sp/>get<sp/>an<sp/>error<sp/>please<sp/>report<sp/>on<sp/>github.<sp/>You<sp/>may<sp/>try<sp/>different<sp/>GL<sp/>context<sp/>version<sp/>or<sp/>GLSL<sp/>version.<sp/>See<sp/>GL&lt;&gt;GLSL<sp/>version<sp/>table<sp/>at<sp/>the<sp/>top<sp/>of<sp/>this<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CheckShader(GLuint<sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>desc)</highlight></codeline>
<codeline lineno="583"><highlight class="normal">{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_open_g_l3___data" kindref="compound">ImGui_ImplOpenGL3_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplOpenGL3_GetBackendData();</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>GLint<sp/>status<sp/>=<sp/>0,<sp/>log_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>glGetShaderiv(handle,<sp/>GL_COMPILE_STATUS,<sp/>&amp;status);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>glGetShaderiv(handle,<sp/>GL_INFO_LOG_LENGTH,<sp/>&amp;log_length);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((GLboolean)status<sp/>==<sp/>GL_FALSE)</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;ERROR:<sp/>ImGui_ImplOpenGL3_CreateDeviceObjects:<sp/>failed<sp/>to<sp/>compile<sp/>%s!<sp/>With<sp/>GLSL:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>desc,<sp/>bd-&gt;GlslVersionString);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(log_length<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_im_vector" kindref="compound">ImVector&lt;char&gt;</ref><sp/>buf;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf.resize((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(log_length<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glGetShaderInfoLog(handle,<sp/>log_length,<sp/>NULL,<sp/>(GLchar*)buf.begin());</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>buf.begin());</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(GLboolean)status<sp/>==<sp/>GL_TRUE;</highlight></codeline>
<codeline lineno="598"><highlight class="normal">}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>you<sp/>get<sp/>an<sp/>error<sp/>please<sp/>report<sp/>on<sp/>GitHub.<sp/>You<sp/>may<sp/>try<sp/>different<sp/>GL<sp/>context<sp/>version<sp/>or<sp/>GLSL<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CheckProgram(GLuint<sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>desc)</highlight></codeline>
<codeline lineno="602"><highlight class="normal">{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_open_g_l3___data" kindref="compound">ImGui_ImplOpenGL3_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplOpenGL3_GetBackendData();</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>GLint<sp/>status<sp/>=<sp/>0,<sp/>log_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>glGetProgramiv(handle,<sp/>GL_LINK_STATUS,<sp/>&amp;status);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>glGetProgramiv(handle,<sp/>GL_INFO_LOG_LENGTH,<sp/>&amp;log_length);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((GLboolean)status<sp/>==<sp/>GL_FALSE)</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;ERROR:<sp/>ImGui_ImplOpenGL3_CreateDeviceObjects:<sp/>failed<sp/>to<sp/>link<sp/>%s!<sp/>With<sp/>GLSL<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>desc,<sp/>bd-&gt;GlslVersionString);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(log_length<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_im_vector" kindref="compound">ImVector&lt;char&gt;</ref><sp/>buf;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf.resize((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(log_length<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glGetProgramInfoLog(handle,<sp/>log_length,<sp/>NULL,<sp/>(GLchar*)buf.begin());</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>buf.begin());</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(GLboolean)status<sp/>==<sp/>GL_TRUE;</highlight></codeline>
<codeline lineno="617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplOpenGL3_CreateDeviceObjects()</highlight></codeline>
<codeline lineno="620"><highlight class="normal">{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_open_g_l3___data" kindref="compound">ImGui_ImplOpenGL3_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplOpenGL3_GetBackendData();</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Backup<sp/>GL<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>GLint<sp/>last_texture,<sp/>last_array_buffer;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>glGetIntegerv(GL_TEXTURE_BINDING_2D,<sp/>&amp;last_texture);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>glGetIntegerv(GL_ARRAY_BUFFER_BINDING,<sp/>&amp;last_array_buffer);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>IMGUI_IMPL_OPENGL_USE_VERTEX_ARRAY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>GLint<sp/>last_vertex_array;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>glGetIntegerv(GL_VERTEX_ARRAY_BINDING,<sp/>&amp;last_vertex_array);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>GLSL<sp/>version<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>glsl_version<sp/>=<sp/>130;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>sscanf(bd-&gt;GlslVersionString,<sp/></highlight><highlight class="stringliteral">&quot;#version<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>&amp;glsl_version);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLchar*<sp/>vertex_shader_glsl_120<sp/>=</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;uniform<sp/>mat4<sp/>ProjMtx;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;attribute<sp/>vec2<sp/>Position;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;attribute<sp/>vec2<sp/>UV;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;attribute<sp/>vec4<sp/>Color;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;varying<sp/>vec2<sp/>Frag_UV;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;varying<sp/>vec4<sp/>Frag_Color;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;void<sp/>main()\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;{\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Frag_UV<sp/>=<sp/>UV;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Frag_Color<sp/>=<sp/>Color;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>gl_Position<sp/>=<sp/>ProjMtx<sp/>*<sp/>vec4(Position.xy,0,1);\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;}\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLchar*<sp/>vertex_shader_glsl_130<sp/>=</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;uniform<sp/>mat4<sp/>ProjMtx;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;in<sp/>vec2<sp/>Position;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;in<sp/>vec2<sp/>UV;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;in<sp/>vec4<sp/>Color;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;out<sp/>vec2<sp/>Frag_UV;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;out<sp/>vec4<sp/>Frag_Color;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;void<sp/>main()\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;{\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Frag_UV<sp/>=<sp/>UV;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Frag_Color<sp/>=<sp/>Color;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>gl_Position<sp/>=<sp/>ProjMtx<sp/>*<sp/>vec4(Position.xy,0,1);\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;}\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLchar*<sp/>vertex_shader_glsl_300_es<sp/>=</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;precision<sp/>highp<sp/>float;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;layout<sp/>(location<sp/>=<sp/>0)<sp/>in<sp/>vec2<sp/>Position;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;layout<sp/>(location<sp/>=<sp/>1)<sp/>in<sp/>vec2<sp/>UV;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;layout<sp/>(location<sp/>=<sp/>2)<sp/>in<sp/>vec4<sp/>Color;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;uniform<sp/>mat4<sp/>ProjMtx;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;out<sp/>vec2<sp/>Frag_UV;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;out<sp/>vec4<sp/>Frag_Color;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;void<sp/>main()\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;{\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Frag_UV<sp/>=<sp/>UV;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Frag_Color<sp/>=<sp/>Color;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>gl_Position<sp/>=<sp/>ProjMtx<sp/>*<sp/>vec4(Position.xy,0,1);\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;}\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLchar*<sp/>vertex_shader_glsl_410_core<sp/>=</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;layout<sp/>(location<sp/>=<sp/>0)<sp/>in<sp/>vec2<sp/>Position;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;layout<sp/>(location<sp/>=<sp/>1)<sp/>in<sp/>vec2<sp/>UV;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;layout<sp/>(location<sp/>=<sp/>2)<sp/>in<sp/>vec4<sp/>Color;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;uniform<sp/>mat4<sp/>ProjMtx;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;out<sp/>vec2<sp/>Frag_UV;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;out<sp/>vec4<sp/>Frag_Color;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;void<sp/>main()\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;{\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Frag_UV<sp/>=<sp/>UV;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Frag_Color<sp/>=<sp/>Color;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>gl_Position<sp/>=<sp/>ProjMtx<sp/>*<sp/>vec4(Position.xy,0,1);\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;}\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLchar*<sp/>fragment_shader_glsl_120<sp/>=</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;#ifdef<sp/>GL_ES\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>precision<sp/>mediump<sp/>float;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;#endif\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;uniform<sp/>sampler2D<sp/>Texture;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;varying<sp/>vec2<sp/>Frag_UV;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;varying<sp/>vec4<sp/>Frag_Color;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;void<sp/>main()\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;{\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>gl_FragColor<sp/>=<sp/>Frag_Color<sp/>*<sp/>texture2D(Texture,<sp/>Frag_UV.st);\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;}\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLchar*<sp/>fragment_shader_glsl_130<sp/>=</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;uniform<sp/>sampler2D<sp/>Texture;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;in<sp/>vec2<sp/>Frag_UV;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;in<sp/>vec4<sp/>Frag_Color;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;out<sp/>vec4<sp/>Out_Color;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;void<sp/>main()\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;{\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Out_Color<sp/>=<sp/>Frag_Color<sp/>*<sp/>texture(Texture,<sp/>Frag_UV.st);\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;}\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLchar*<sp/>fragment_shader_glsl_300_es<sp/>=</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;precision<sp/>mediump<sp/>float;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;uniform<sp/>sampler2D<sp/>Texture;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;in<sp/>vec2<sp/>Frag_UV;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;in<sp/>vec4<sp/>Frag_Color;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;layout<sp/>(location<sp/>=<sp/>0)<sp/>out<sp/>vec4<sp/>Out_Color;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;void<sp/>main()\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;{\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Out_Color<sp/>=<sp/>Frag_Color<sp/>*<sp/>texture(Texture,<sp/>Frag_UV.st);\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;}\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLchar*<sp/>fragment_shader_glsl_410_core<sp/>=</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;in<sp/>vec2<sp/>Frag_UV;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;in<sp/>vec4<sp/>Frag_Color;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;uniform<sp/>sampler2D<sp/>Texture;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;layout<sp/>(location<sp/>=<sp/>0)<sp/>out<sp/>vec4<sp/>Out_Color;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;void<sp/>main()\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;{\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>Out_Color<sp/>=<sp/>Frag_Color<sp/>*<sp/>texture(Texture,<sp/>Frag_UV.st);\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;}\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Select<sp/>shaders<sp/>matching<sp/>our<sp/>GLSL<sp/>versions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLchar*<sp/>vertex_shader<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLchar*<sp/>fragment_shader<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(glsl_version<sp/>&lt;<sp/>130)</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertex_shader<sp/>=<sp/>vertex_shader_glsl_120;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fragment_shader<sp/>=<sp/>fragment_shader_glsl_120;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(glsl_version<sp/>&gt;=<sp/>410)</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertex_shader<sp/>=<sp/>vertex_shader_glsl_410_core;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fragment_shader<sp/>=<sp/>fragment_shader_glsl_410_core;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(glsl_version<sp/>==<sp/>300)</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertex_shader<sp/>=<sp/>vertex_shader_glsl_300_es;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fragment_shader<sp/>=<sp/>fragment_shader_glsl_300_es;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertex_shader<sp/>=<sp/>vertex_shader_glsl_130;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fragment_shader<sp/>=<sp/>fragment_shader_glsl_130;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>shaders</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLchar*<sp/>vertex_shader_with_version[2]<sp/>=<sp/>{<sp/>bd-&gt;GlslVersionString,<sp/>vertex_shader<sp/>};</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>GLuint<sp/>vert_handle<sp/>=<sp/>glCreateShader(GL_VERTEX_SHADER);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>glShaderSource(vert_handle,<sp/>2,<sp/>vertex_shader_with_version,<sp/>NULL);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>glCompileShader(vert_handle);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>CheckShader(vert_handle,<sp/></highlight><highlight class="stringliteral">&quot;vertex<sp/>shader&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLchar*<sp/>fragment_shader_with_version[2]<sp/>=<sp/>{<sp/>bd-&gt;GlslVersionString,<sp/>fragment_shader<sp/>};</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>GLuint<sp/>frag_handle<sp/>=<sp/>glCreateShader(GL_FRAGMENT_SHADER);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>glShaderSource(frag_handle,<sp/>2,<sp/>fragment_shader_with_version,<sp/>NULL);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>glCompileShader(frag_handle);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>CheckShader(frag_handle,<sp/></highlight><highlight class="stringliteral">&quot;fragment<sp/>shader&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Link</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>bd-&gt;ShaderHandle<sp/>=<sp/>glCreateProgram();</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>glAttachShader(bd-&gt;ShaderHandle,<sp/>vert_handle);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>glAttachShader(bd-&gt;ShaderHandle,<sp/>frag_handle);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>glLinkProgram(bd-&gt;ShaderHandle);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>CheckProgram(bd-&gt;ShaderHandle,<sp/></highlight><highlight class="stringliteral">&quot;shader<sp/>program&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>glDetachShader(bd-&gt;ShaderHandle,<sp/>vert_handle);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>glDetachShader(bd-&gt;ShaderHandle,<sp/>frag_handle);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>glDeleteShader(vert_handle);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>glDeleteShader(frag_handle);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>bd-&gt;AttribLocationTex<sp/>=<sp/>glGetUniformLocation(bd-&gt;ShaderHandle,<sp/></highlight><highlight class="stringliteral">&quot;Texture&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>bd-&gt;AttribLocationProjMtx<sp/>=<sp/>glGetUniformLocation(bd-&gt;ShaderHandle,<sp/></highlight><highlight class="stringliteral">&quot;ProjMtx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>bd-&gt;AttribLocationVtxPos<sp/>=<sp/>(GLuint)glGetAttribLocation(bd-&gt;ShaderHandle,<sp/></highlight><highlight class="stringliteral">&quot;Position&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>bd-&gt;AttribLocationVtxUV<sp/>=<sp/>(GLuint)glGetAttribLocation(bd-&gt;ShaderHandle,<sp/></highlight><highlight class="stringliteral">&quot;UV&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>bd-&gt;AttribLocationVtxColor<sp/>=<sp/>(GLuint)glGetAttribLocation(bd-&gt;ShaderHandle,<sp/></highlight><highlight class="stringliteral">&quot;Color&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>glGenBuffers(1,<sp/>&amp;bd-&gt;VboHandle);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>glGenBuffers(1,<sp/>&amp;bd-&gt;ElementsHandle);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplOpenGL3_CreateFontsTexture();</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restore<sp/>modified<sp/>GL<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>glBindTexture(GL_TEXTURE_2D,<sp/>last_texture);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>glBindBuffer(GL_ARRAY_BUFFER,<sp/>last_array_buffer);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>IMGUI_IMPL_OPENGL_USE_VERTEX_ARRAY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>glBindVertexArray(last_vertex_array);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="805"><highlight class="normal">}</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplOpenGL3_DestroyDeviceObjects()</highlight></codeline>
<codeline lineno="808"><highlight class="normal">{</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_open_g_l3___data" kindref="compound">ImGui_ImplOpenGL3_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplOpenGL3_GetBackendData();</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bd-&gt;VboHandle)<sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>glDeleteBuffers(1,<sp/>&amp;bd-&gt;VboHandle);<sp/>bd-&gt;VboHandle<sp/>=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bd-&gt;ElementsHandle)<sp/>{<sp/>glDeleteBuffers(1,<sp/>&amp;bd-&gt;ElementsHandle);<sp/>bd-&gt;ElementsHandle<sp/>=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bd-&gt;ShaderHandle)<sp/><sp/><sp/>{<sp/>glDeleteProgram(bd-&gt;ShaderHandle);<sp/>bd-&gt;ShaderHandle<sp/>=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplOpenGL3_DestroyFontsTexture();</highlight></codeline>
<codeline lineno="814"><highlight class="normal">}</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MULTI-VIEWPORT<sp/>/<sp/>PLATFORM<sp/>INTERFACE<sp/>SUPPORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>an<sp/>_advanced_<sp/>and<sp/>_optional_<sp/>feature,<sp/>allowing<sp/>the<sp/>backend<sp/>to<sp/>create<sp/>and<sp/>handle<sp/>multiple<sp/>viewports<sp/>simultaneously.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>you<sp/>are<sp/>new<sp/>to<sp/>dear<sp/>imgui<sp/>or<sp/>creating<sp/>a<sp/>new<sp/>binding<sp/>for<sp/>dear<sp/>imgui,<sp/>it<sp/>is<sp/>recommended<sp/>that<sp/>you<sp/>completely<sp/>ignore<sp/>this<sp/>section<sp/>first..</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplOpenGL3_RenderWindow(<ref refid="struct_im_gui_viewport" kindref="compound">ImGuiViewport</ref>*<sp/>viewport,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)</highlight></codeline>
<codeline lineno="823"><highlight class="normal">{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(viewport-&gt;Flags<sp/>&amp;<sp/>ImGuiViewportFlags_NoRendererClear))</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_im_vec4" kindref="compound">ImVec4</ref><sp/>clear_color<sp/>=<sp/><ref refid="struct_im_vec4" kindref="compound">ImVec4</ref>(0.0f,<sp/>0.0f,<sp/>0.0f,<sp/>1.0f);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glClearColor(clear_color.x,<sp/>clear_color.y,<sp/>clear_color.z,<sp/>clear_color.w);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glClear(GL_COLOR_BUFFER_BIT);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplOpenGL3_RenderDrawData(viewport-&gt;DrawData);</highlight></codeline>
<codeline lineno="831"><highlight class="normal">}</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplOpenGL3_InitPlatformInterface()</highlight></codeline>
<codeline lineno="834"><highlight class="normal">{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui_platform_i_o" kindref="compound">ImGuiPlatformIO</ref>&amp;<sp/>platform_io<sp/>=<sp/>ImGui::GetPlatformIO();</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>platform_io.Renderer_RenderWindow<sp/>=<sp/>ImGui_ImplOpenGL3_RenderWindow;</highlight></codeline>
<codeline lineno="837"><highlight class="normal">}</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplOpenGL3_ShutdownPlatformInterface()</highlight></codeline>
<codeline lineno="840"><highlight class="normal">{</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui::DestroyPlatformWindows();</highlight></codeline>
<codeline lineno="842"><highlight class="normal">}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>clang<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_opengl3.cpp"/>
  </compounddef>
</doxygen>
