<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="cave__parse_8c" kind="file" language="C++">
    <compoundname>cave_parse.c</compoundname>
    <includes local="no">assert.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">limits.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes refid="cave__parse_8h" local="yes">cave_parse.h</includes>
    <includes refid="stb__image_8h" local="yes">stb_image.h</includes>
    <includes refid="stb_8h" local="yes">stb.h</includes>
    <incdepgraph>
      <node id="8">
        <label>stb.h</label>
        <link refid="stb_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>stb_image.h</label>
        <link refid="stb__image_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c</label>
        <link refid="cave__parse_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>cave_parse.h</label>
        <link refid="cave__parse_8h_source"/>
      </node>
      <node id="2">
        <label>assert.h</label>
      </node>
      <node id="4">
        <label>limits.h</label>
      </node>
      <node id="9">
        <label>stdarg.h</label>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
      <node id="5">
        <label>stdlib.h</label>
      </node>
      <node id="10">
        <label>string.h</label>
      </node>
      <node id="11">
        <label>time.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structcompressed__chunk" prot="public">compressed_chunk</innerclass>
    <innerclass refid="structregion" prot="public">region</innerclass>
    <innerclass refid="structnbt" prot="public">nbt</innerclass>
    <innerclass refid="structdecoded__buffer" prot="public">decoded_buffer</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="cave__parse_8c_1a5d3aa76dea5c5fcbdee0e58ed42f2dfe" prot="public" static="no">
        <name>FAST_CHUNK</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="6" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="6" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cave__parse_8c_1a375d0e033b63bb9bfbe64fa52a274858" prot="public" static="no">
        <name>NUM_CHUNKS_PER_REGION</name>
        <initializer>32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="13" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cave__parse_8c_1a519332fc6ce103ccbebe47090d957853" prot="public" static="no">
        <name>NUM_CHUNKS_PER_REGION_LOG2</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="14" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cave__parse_8c_1a1bf5bfdfc1e7360a7581955b80951f79" prot="public" static="no">
        <name>NUM_COLUMNS_PER_CHUNK</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="16" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cave__parse_8c_1a6f3e1edc6fa7b10215637e33d48ab021" prot="public" static="no">
        <name>NUM_COLUMNS_PER_CHUNK_LOG2</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="17" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cave__parse_8c_1a9da226849ee4a1097347c32e127cd14d" prot="public" static="no">
        <name>MAX_MAP_REGIONS</name>
        <initializer>64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="89" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cave__parse_8c_1aee4002d6e7651d2b6210172e8debfd9b" prot="public" static="no">
        <name>NUM_CACHED_X</name>
        <initializer>64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="113" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cave__parse_8c_1a682c506659165976d5e5ebf4608741c8" prot="public" static="no">
        <name>NUM_CACHED_Z</name>
        <initializer>64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="114" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cave__parse_8c_1afd283cd22b0969b4c6c972002198b552" prot="public" static="no">
        <name>MAX_DECODED_CHUNK_X</name>
        <initializer>64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="510" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="510" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cave__parse_8c_1a8b6314e7837240b78c2820faa3a5b230" prot="public" static="no">
        <name>MAX_DECODED_CHUNK_Z</name>
        <initializer>64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="511" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="511" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="cave__parse_8c_1af38129fd1797a5cfd7d746065784a44f" prot="public" static="no" strong="no">
        <type></type>
        <name>@140</name>
        <enumvalue id="cave__parse_8c_1af38129fd1797a5cfd7d746065784a44fa412ceba1e522006ed1abd510caf067c6" prot="public">
          <name>TAG_End</name>
          <initializer>=0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cave__parse_8c_1af38129fd1797a5cfd7d746065784a44fabb52fd6bfeb1865968d56ccef0daead9" prot="public">
          <name>TAG_Byte</name>
          <initializer>=1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cave__parse_8c_1af38129fd1797a5cfd7d746065784a44fa975e983e98b5bf2fffc5691958b0794f" prot="public">
          <name>TAG_Short</name>
          <initializer>=2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cave__parse_8c_1af38129fd1797a5cfd7d746065784a44fae0b367cd0dd9b00f86ba58d34bdf82cd" prot="public">
          <name>TAG_Int</name>
          <initializer>=3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cave__parse_8c_1af38129fd1797a5cfd7d746065784a44fa045cf869c73ca645cb2f90b51e74cda9" prot="public">
          <name>TAG_Long</name>
          <initializer>=4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cave__parse_8c_1af38129fd1797a5cfd7d746065784a44fa8fc97992da325a844e4410482a301859" prot="public">
          <name>TAG_Float</name>
          <initializer>=5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cave__parse_8c_1af38129fd1797a5cfd7d746065784a44fae5fc01c466aa077f9004b088089e16f1" prot="public">
          <name>TAG_Double</name>
          <initializer>=6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cave__parse_8c_1af38129fd1797a5cfd7d746065784a44fac28ed5b6d83826ce9ae4bd6977549c1b" prot="public">
          <name>TAG_Byte_Array</name>
          <initializer>=7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cave__parse_8c_1af38129fd1797a5cfd7d746065784a44fa918f873ae00e6b16d197f09abb3866a7" prot="public">
          <name>TAG_String</name>
          <initializer>=8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cave__parse_8c_1af38129fd1797a5cfd7d746065784a44fa59fc760bbabd001bc74cd7b4500eaeb1" prot="public">
          <name>TAG_List</name>
          <initializer>=9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cave__parse_8c_1af38129fd1797a5cfd7d746065784a44fadd45c97006383b972c7f3f2d17549199" prot="public">
          <name>TAG_Compound</name>
          <initializer>=10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="cave__parse_8c_1af38129fd1797a5cfd7d746065784a44fa3fcd196a7af01c81e81774394f64dff3" prot="public">
          <name>TAG_Int_Array</name>
          <initializer>=11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="200" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="200" bodyend="202"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="cave__parse_8c_1a3ce8249ee3b6b306721124b6659f01f9" prot="public" static="no">
        <type><ref refid="structfast__chunk" kindref="compound">fast_chunk</ref></type>
        <definition>typedef fast_chunk parse_chunk</definition>
        <argsstring></argsstring>
        <name>parse_chunk</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="379" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="379" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="cave__parse_8c_1a06d58838a105ee37d75f9d0b8ffbd3a4" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t cached_compressed</definition>
        <argsstring></argsstring>
        <name>cached_compressed</name>
        <initializer>=0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="40" column="8" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="cave__parse_8c_1a532749e3a03fec148c60403092f6c555" prot="public" static="no" mutable="no">
        <type>FILE *</type>
        <definition>FILE* last_region</definition>
        <argsstring></argsstring>
        <name>last_region</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="42" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="cave__parse_8c_1a8edc0733346513c007c8ef91c36f4f2d" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int last_region_x</definition>
        <argsstring></argsstring>
        <name>last_region_x</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="43" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="cave__parse_8c_1a875c19d8a1f89b10c7afeb72e2e34004" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int last_region_z</definition>
        <argsstring></argsstring>
        <name>last_region_z</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="44" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="cave__parse_8c_1af2606797deda70b5effbc50b2648d699" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int opened</definition>
        <argsstring></argsstring>
        <name>opened</name>
        <initializer>=0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="45" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="cave__parse_8c_1a7c1f8c51ad9f7eea962905f2afa7aa79" prot="public" static="no" mutable="no">
        <type><ref refid="structregion" kindref="compound">region</ref> *</type>
        <definition>region* regions[MAX_MAP_REGIONS][MAX_MAP_REGIONS]</definition>
        <argsstring>[MAX_MAP_REGIONS][MAX_MAP_REGIONS]</argsstring>
        <name>regions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="90" column="8" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="cave__parse_8c_1a7f09eec9ac1c889cedb229f4881d3fff" prot="public" static="no" mutable="no">
        <type><ref refid="structcompressed__chunk" kindref="compound">compressed_chunk</ref> *</type>
        <definition>compressed_chunk* cached_chunk[NUM_CACHED_Z][NUM_CACHED_X]</definition>
        <argsstring>[NUM_CACHED_Z][NUM_CACHED_X]</argsstring>
        <name>cached_chunk</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="119" column="18" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="cave__parse_8c_1a86fece0aebbc8b0771a7b4c557682ccd" prot="public" static="yes" mutable="no">
        <type><ref refid="structdecoded__buffer" kindref="compound">decoded_buffer</ref></type>
        <definition>decoded_buffer decoded_buffers[MAX_DECODED_CHUNK_Z][MAX_DECODED_CHUNK_X]</definition>
        <argsstring>[MAX_DECODED_CHUNK_Z][MAX_DECODED_CHUNK_X]</argsstring>
        <name>decoded_buffers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="520" column="23" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="520" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="cave__parse_8c_1a03d6013648e51644ba189d14e195d09c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32</type>
        <definition>uint32 read_uint32_be</definition>
        <argsstring>(FILE *f)</argsstring>
        <name>read_uint32_be</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="19" column="8" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="19" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="cave__parse_8c_1a88817e229b9a9c2c0538a8a2cbda4386" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void open_file</definition>
        <argsstring>(int reg_x, int reg_z)</argsstring>
        <name>open_file</name>
        <param>
          <type>int</type>
          <declname>reg_x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>reg_z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="47" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="47" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="cave__parse_8c_1ae3122468c9ab78a4c1ae955db8cd8f45" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structregion" kindref="compound">region</ref> *</type>
        <definition>static region * load_region</definition>
        <argsstring>(int reg_x, int reg_z)</argsstring>
        <name>load_region</name>
        <param>
          <type>int</type>
          <declname>reg_x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>reg_z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="61" column="15" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="61" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="cave__parse_8c_1ac89cefdc6d1782d451168ff4160899bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_region</definition>
        <argsstring>(region *r)</argsstring>
        <name>free_region</name>
        <param>
          <type><ref refid="structregion" kindref="compound">region</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="84" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="84" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="cave__parse_8c_1ad9491eb9b514722956aeb7b5372d99ee" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structregion" kindref="compound">region</ref> *</type>
        <definition>static region * get_region</definition>
        <argsstring>(int reg_x, int reg_z)</argsstring>
        <name>get_region</name>
        <param>
          <type>int</type>
          <declname>reg_x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>reg_z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="92" column="15" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="92" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="cave__parse_8c_1a6998fd1374bf8892debeb6d61ee654e0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void deref_compressed_chunk</definition>
        <argsstring>(compressed_chunk *cc)</argsstring>
        <name>deref_compressed_chunk</name>
        <param>
          <type><ref refid="structcompressed__chunk" kindref="compound">compressed_chunk</ref> *</type>
          <declname>cc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="121" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="121" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="cave__parse_8c_1a9cc89be26ba694395a5700ff5d5558f3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structcompressed__chunk" kindref="compound">compressed_chunk</ref> *</type>
        <definition>static compressed_chunk * get_compressed_chunk</definition>
        <argsstring>(int chunk_x, int chunk_z)</argsstring>
        <name>get_compressed_chunk</name>
        <param>
          <type>int</type>
          <declname>chunk_x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>chunk_z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="132" column="25" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="132" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="cave__parse_8c_1a638ab9983d3d60e7ea5f2b73ca9c9d4b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void nbt_get_string_data</definition>
        <argsstring>(unsigned char *data, char *buffer, size_t bufsize)</argsstring>
        <name>nbt_get_string_data</name>
        <param>
          <type>unsigned char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="204" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="204" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="cave__parse_8c_1aa1d66af3d60f67b3e480b9f21b69f650" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>static char * nbt_peek</definition>
        <argsstring>(nbt *n)</argsstring>
        <name>nbt_peek</name>
        <param>
          <type><ref refid="structnbt" kindref="compound">nbt</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="213" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="213" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="cave__parse_8c_1ab8bdc14f6c6976ea2a9da4163779312a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32</type>
        <definition>static uint32 nbt_parse_uint32</definition>
        <argsstring>(unsigned char *buffer)</argsstring>
        <name>nbt_parse_uint32</name>
        <param>
          <type>unsigned char *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="222" column="15" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="222" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="cave__parse_8c_1a72a11e5bd0f35d40ed1e737db31b3083" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void nbt_skip</definition>
        <argsstring>(nbt *n)</argsstring>
        <name>nbt_skip</name>
        <param>
          <type><ref refid="structnbt" kindref="compound">nbt</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="261" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="261" bodyend="269" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" declline="227" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="cave__parse_8c_1af2220164c2d794a687b111c7d55301df" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void nbt_skip_raw</definition>
        <argsstring>(nbt *n, unsigned char type)</argsstring>
        <name>nbt_skip_raw</name>
        <param>
          <type><ref refid="structnbt" kindref="compound">nbt</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="230" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="230" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="cave__parse_8c_1a60fadc00b4aed4cad593bd46971a6f57" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void nbt_swap</definition>
        <argsstring>(unsigned char *ptr, int len)</argsstring>
        <name>nbt_swap</name>
        <param>
          <type>unsigned char *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="272" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="272" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="cave__parse_8c_1af89c798aff334c4ac90969fb4c9c5623" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void * nbt_get_fromlist</definition>
        <argsstring>(nbt *n, unsigned char type, int *len)</argsstring>
        <name>nbt_get_fromlist</name>
        <param>
          <type><ref refid="structnbt" kindref="compound">nbt</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="284" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="284" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="cave__parse_8c_1ade6a1f39d3041df77c3235edb5c9fc65" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void * nbt_get</definition>
        <argsstring>(nbt *n, unsigned char type, int *len)</argsstring>
        <name>nbt_get</name>
        <param>
          <type><ref refid="structnbt" kindref="compound">nbt</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="319" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="319" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="cave__parse_8c_1a141e50317d822a92f47f78e9c2768291" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void nbt_begin_compound</definition>
        <argsstring>(nbt *n)</argsstring>
        <name>nbt_begin_compound</name>
        <param>
          <type><ref refid="structnbt" kindref="compound">nbt</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="326" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="326" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="cave__parse_8c_1a2dfee9ba7eb20a6f83ea128ac0db163b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void nbt_begin_compound_in_list</definition>
        <argsstring>(nbt *n)</argsstring>
        <name>nbt_begin_compound_in_list</name>
        <param>
          <type><ref refid="structnbt" kindref="compound">nbt</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="334" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="334" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="cave__parse_8c_1a94a4ee496d8c0cc317d87da8a005fc60" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void nbt_end_compound</definition>
        <argsstring>(nbt *n)</argsstring>
        <name>nbt_end_compound</name>
        <param>
          <type><ref refid="structnbt" kindref="compound">nbt</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="339" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="339" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="cave__parse_8c_1a2397a29087b504164a5ae46f04ea13b6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int nbt_begin_list</definition>
        <argsstring>(nbt *n, unsigned char type)</argsstring>
        <name>nbt_begin_list</name>
        <param>
          <type><ref refid="structnbt" kindref="compound">nbt</ref> *</type>
          <declname>n</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="348" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="348" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="cave__parse_8c_1a92c2f759115845da77af5f4dc6049fa2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void nbt_end_list</definition>
        <argsstring>(nbt *n)</argsstring>
        <name>nbt_end_list</name>
        <param>
          <type><ref refid="structnbt" kindref="compound">nbt</ref> *</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="365" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="365" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="cave__parse_8c_1af01bb5296faaa2632e9836de5faba1d8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfast__chunk" kindref="compound">parse_chunk</ref> *</type>
        <definition>static parse_chunk * minecraft_chunk_parse</definition>
        <argsstring>(unsigned char *data, size_t len)</argsstring>
        <name>minecraft_chunk_parse</name>
        <param>
          <type>unsigned char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="384" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="384" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="cave__parse_8c_1af4e8c4c0c38242366db62d9936274079" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lock_chunk_get_mutex</definition>
        <argsstring>(void)</argsstring>
        <name>lock_chunk_get_mutex</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="521" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_mesher.c" bodystart="525" bodyend="528" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" declline="521" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="cave__parse_8c_1afaaad5f587e3275de99ae8ff61b2e18a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void unlock_chunk_get_mutex</definition>
        <argsstring>(void)</argsstring>
        <name>unlock_chunk_get_mutex</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="522" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_mesher.c" bodystart="529" bodyend="532" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" declline="522" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="cave__parse_8c_1a0e25a1e86d0f620eeb67d84a9a8cd9f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfast__chunk" kindref="compound">fast_chunk</ref> *</type>
        <definition>fast_chunk * get_decoded_fastchunk_uncached</definition>
        <argsstring>(int chunk_x, int chunk_z)</argsstring>
        <name>get_decoded_fastchunk_uncached</name>
        <param>
          <type>int</type>
          <declname>chunk_x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>chunk_z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="525" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="525" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="cave__parse_8c_1a96c681691d15eae509088108399a87d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structdecoded__buffer" kindref="compound">decoded_buffer</ref> *</type>
        <definition>decoded_buffer * get_decoded_buffer</definition>
        <argsstring>(int chunk_x, int chunk_z)</argsstring>
        <name>get_decoded_buffer</name>
        <param>
          <type>int</type>
          <declname>chunk_x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>chunk_z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="566" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="566" bodyend="587"/>
      </memberdef>
      <memberdef kind="function" id="cave__parse_8c_1adaf6b2bcd889f9384b4c0de21bf0c7a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structfast__chunk" kindref="compound">fast_chunk</ref> *</type>
        <definition>fast_chunk * get_decoded_fastchunk</definition>
        <argsstring>(int chunk_x, int chunk_z)</argsstring>
        <name>get_decoded_fastchunk</name>
        <param>
          <type>int</type>
          <declname>chunk_x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>chunk_z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" line="589" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c" bodystart="589" bodyend="593"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAST_CHUNK<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>disabling<sp/>this<sp/>enables<sp/>the<sp/>old,<sp/>slower<sp/>path<sp/>that<sp/>deblocks<sp/>into<sp/>a<sp/>regular<sp/>form</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cave_parse.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stb_image.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stb.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NUM_CHUNKS_PER_REGION<sp/><sp/><sp/><sp/><sp/><sp/><sp/>32<sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>on<sp/>one<sp/>axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NUM_CHUNKS_PER_REGION_LOG2<sp/><sp/><sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NUM_COLUMNS_PER_CHUNK<sp/><sp/><sp/><sp/><sp/><sp/><sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NUM_COLUMNS_PER_CHUNK_LOG2<sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal">uint32<sp/>read_uint32_be(FILE<sp/>*f)</highlight></codeline>
<codeline lineno="20"><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>data[4];</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/>fread(data,<sp/>1,<sp/>4,<sp/>f);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(data[0]&lt;&lt;24)<sp/>+<sp/>(data[1]&lt;&lt;16)<sp/>+<sp/>(data[2]&lt;&lt;8)<sp/>+<sp/>data[3];</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="structcompressed__chunk" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/>uint8<sp/>*data;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,z;<sp/></highlight><highlight class="comment">//<sp/>chunk<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>refcount;<sp/></highlight><highlight class="comment">//<sp/>for<sp/>multi-threading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal">}<sp/><ref refid="structcompressed__chunk" kindref="compound">compressed_chunk</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="structregion" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,z;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/>uint32<sp/>sector_data[NUM_CHUNKS_PER_REGION][NUM_CHUNKS_PER_REGION];</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}<sp/><ref refid="structregion" kindref="compound">region</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cached_compressed=0;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal">FILE<sp/>*last_region;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last_region_x;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last_region_z;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>opened=0;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>open_file(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reg_x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reg_z)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!opened<sp/>||<sp/>last_region_x<sp/>!=<sp/>reg_x<sp/>||<sp/>last_region_z<sp/>!=<sp/>reg_z)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>filename[256];</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_region<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(last_region);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(filename,<sp/></highlight><highlight class="stringliteral">&quot;r.%d.%d.mca&quot;</highlight><highlight class="normal">,<sp/>reg_x,<sp/>reg_z);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>last_region<sp/>=<sp/>fopen(filename,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>last_region_x<sp/>=<sp/>reg_x;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>last_region_z<sp/>=<sp/>reg_z;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>opened<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structregion" kindref="compound">region</ref><sp/>*load_region(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reg_x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reg_z)</highlight></codeline>
<codeline lineno="62"><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><ref refid="structregion" kindref="compound">region</ref><sp/>*r;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,z;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/>open_file(reg_x,<sp/>reg_z);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/>r<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*r));</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last_region<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memset(r,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*r));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fseek(last_region,<sp/>0,<sp/>SEEK_SET);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(z=0;<sp/>z<sp/>&lt;<sp/>NUM_CHUNKS_PER_REGION;<sp/>++z)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x=0;<sp/>x<sp/>&lt;<sp/>NUM_CHUNKS_PER_REGION;<sp/>++x)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;sector_data[z][x]<sp/>=<sp/>read_uint32_be(last_region);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/>r-&gt;x<sp/>=<sp/>reg_x;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/>r-&gt;z<sp/>=<sp/>reg_z;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>free_region(<ref refid="structregion" kindref="compound">region</ref><sp/>*r)</highlight></codeline>
<codeline lineno="85"><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/>free(r);</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_MAP_REGIONS<sp/><sp/><sp/>64<sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>one<sp/>axis:<sp/>64<sp/>regions<sp/>*<sp/>32<sp/>chunk/region<sp/>*<sp/>16<sp/>columns/chunk<sp/>=<sp/>16384<sp/>columns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><ref refid="structregion" kindref="compound">region</ref><sp/>*regions[MAX_MAP_REGIONS][MAX_MAP_REGIONS];</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structregion" kindref="compound">region</ref><sp/>*get_region(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reg_x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reg_z)</highlight></codeline>
<codeline lineno="93"><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>slot_x<sp/>=<sp/>reg_x<sp/>&amp;<sp/>(MAX_MAP_REGIONS-1);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>slot_z<sp/>=<sp/>reg_z<sp/>&amp;<sp/>(MAX_MAP_REGIONS-1);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><ref refid="structregion" kindref="compound">region</ref><sp/>*r;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/>r<sp/>=<sp/>regions[slot_z][slot_x];</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r-&gt;x<sp/>==<sp/>reg_x<sp/>&amp;&amp;<sp/>r-&gt;z<sp/>==<sp/>reg_z)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free_region(r);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/>r<sp/>=<sp/>load_region(reg_x,<sp/>reg_z);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/>regions[slot_z][slot_x]<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//<sp/>about<sp/>one<sp/>region,<sp/>so<sp/>size<sp/>should<sp/>be<sp/>ok</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NUM_CACHED_X<sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NUM_CACHED_Z<sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@TODO:<sp/>is<sp/>it<sp/>really<sp/>worth<sp/>caching<sp/>these?<sp/>we<sp/>probably<sp/>can<sp/>just</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pull<sp/>them<sp/>from<sp/>the<sp/>disk<sp/>cache<sp/>nearly<sp/>as<sp/>efficiently.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Can<sp/>test<sp/>that<sp/>by<sp/>setting<sp/>to<sp/>1x1?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><ref refid="structcompressed__chunk" kindref="compound">compressed_chunk</ref><sp/>*cached_chunk[NUM_CACHED_Z][NUM_CACHED_X];</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deref_compressed_chunk(<ref refid="structcompressed__chunk" kindref="compound">compressed_chunk</ref><sp/>*cc)</highlight></codeline>
<codeline lineno="122"><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/>assert(cc-&gt;refcount<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/>--cc-&gt;refcount;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cc-&gt;refcount<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cc-&gt;data)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(cc-&gt;data);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(cc);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structcompressed__chunk" kindref="compound">compressed_chunk</ref><sp/>*get_compressed_chunk(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chunk_x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chunk_z)</highlight></codeline>
<codeline lineno="133"><highlight class="normal">{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>slot_x<sp/>=<sp/>chunk_x<sp/>&amp;<sp/>(NUM_CACHED_X-1);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>slot_z<sp/>=<sp/>chunk_z<sp/>&amp;<sp/>(NUM_CACHED_Z-1);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><ref refid="structcompressed__chunk" kindref="compound">compressed_chunk</ref><sp/>*cc<sp/>=<sp/>cached_chunk[slot_z][slot_x];</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cc<sp/>&amp;&amp;<sp/>cc-&gt;x<sp/>==<sp/>chunk_x<sp/>&amp;&amp;<sp/>cc-&gt;z<sp/>==<sp/>chunk_z)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cc;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reg_x<sp/>=<sp/>chunk_x<sp/>&gt;&gt;<sp/>NUM_CHUNKS_PER_REGION_LOG2;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reg_z<sp/>=<sp/>chunk_z<sp/>&gt;&gt;<sp/>NUM_CHUNKS_PER_REGION_LOG2;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structregion" kindref="compound">region</ref><sp/>*r<sp/>=<sp/>get_region(reg_x,<sp/>reg_z);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cc)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deref_compressed_chunk(cc);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cached_chunk[slot_z][slot_x]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cc<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*cc));</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cc-&gt;x<sp/>=<sp/>chunk_x;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cc-&gt;z<sp/>=<sp/>chunk_z;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subchunk_x<sp/>=<sp/>chunk_x<sp/>&amp;<sp/>(NUM_CHUNKS_PER_REGION-1);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subchunk_z<sp/>=<sp/>chunk_z<sp/>&amp;<sp/>(NUM_CHUNKS_PER_REGION-1);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32<sp/>code<sp/>=<sp/>r-&gt;sector_data[subchunk_z][subchunk_x];</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>&amp;<sp/>255)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>open_file(reg_x,<sp/>reg_z);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fseek(last_region,<sp/>(code&gt;&gt;8)*4096,<sp/>SEEK_SET);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc-&gt;len<sp/>=<sp/>(code&amp;255)*4096;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc-&gt;data<sp/>=<sp/>malloc(cc-&gt;len);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fread(cc-&gt;data,<sp/>1,<sp/>cc-&gt;len,<sp/>last_region);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc-&gt;len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc-&gt;data<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cc-&gt;refcount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cached_chunk[slot_z][slot_x]<sp/>=<sp/>cc;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cc;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal">}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NBT<sp/>parser<sp/>--<sp/>can<sp/>automatically<sp/>parse<sp/>stuff<sp/>we<sp/>don&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">//<sp/>have<sp/>definitions<sp/>for,<sp/>but<sp/>want<sp/>to<sp/>explicitly<sp/>parse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">//<sp/>stuff<sp/>we<sp/>do<sp/>have<sp/>definitions<sp/>for.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>option<sp/>1:<sp/>auto-parse<sp/>everything<sp/>into<sp/>data<sp/>structures,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>then<sp/>read<sp/>those</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">//<sp/>option<sp/>2:<sp/>have<sp/>a<sp/>&quot;parse<sp/>next<sp/>object&quot;<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">//<sp/>doesn&apos;t<sp/>resolve<sp/>whether<sp/>it<sp/>expands<sp/>its<sp/>children</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">//<sp/>yet,<sp/>and<sp/>then<sp/>the<sp/>user<sp/>either<sp/>says<sp/>&quot;expand&quot;<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;skip&quot;<sp/>after<sp/>looking<sp/>at<sp/>the<sp/>name.<sp/>Anything<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;children&quot;<sp/>without<sp/>names<sp/>can&apos;t<sp/>go<sp/>through<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">//<sp/>interface.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Let&apos;s<sp/>try<sp/>option<sp/>2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="structnbt" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer_start;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer_end;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cur;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nesting;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>temp_buffer[256];</highlight></codeline>
<codeline lineno="198"><highlight class="normal">}<sp/><ref refid="structnbt" kindref="compound">nbt</ref>;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>TAG_End=0,<sp/>TAG_Byte=1,<sp/>TAG_Short=2,<sp/>TAG_Int=3,<sp/>TAG_Long=4,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TAG_Float=5,<sp/>TAG_Double=6,<sp/>TAG_Byte_Array=7,<sp/>TAG_String=8,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TAG_List=9,<sp/>TAG_Compound=10,<sp/>TAG_Int_Array=11<sp/>};</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nbt_get_string_data(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bufsize)</highlight></codeline>
<codeline lineno="205"><highlight class="normal">{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>data[0]*256<sp/>+<sp/>data[1];</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>len<sp/>&amp;&amp;<sp/>i+1<sp/>&lt;<sp/>(int)<sp/>bufsize;<sp/>++i)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[i]<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>data[i+2];</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*nbt_peek(<ref refid="structnbt" kindref="compound">nbt</ref><sp/>*n)</highlight></codeline>
<codeline lineno="214"><highlight class="normal">{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>*n-&gt;cur;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>TAG_End)</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/>nbt_get_string_data(n-&gt;cur+1,<sp/>n-&gt;temp_buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(n-&gt;temp_buffer));</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n-&gt;temp_buffer;</highlight></codeline>
<codeline lineno="220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32<sp/>nbt_parse_uint32(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="classbuffer" kindref="compound">buffer</ref>)</highlight></codeline>
<codeline lineno="223"><highlight class="normal">{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classbuffer" kindref="compound">buffer</ref>[0]<sp/>&lt;&lt;<sp/>24)<sp/>+<sp/>(<ref refid="classbuffer" kindref="compound">buffer</ref>[1]&lt;&lt;16)<sp/>+<sp/>(<ref refid="classbuffer" kindref="compound">buffer</ref>[2]&lt;&lt;8)<sp/>+<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>[3];</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nbt_skip(<ref refid="structnbt" kindref="compound">nbt</ref><sp/>*n);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment">//<sp/>skip<sp/>an<sp/>item<sp/>that<sp/>doesn&apos;t<sp/>have<sp/>an<sp/>id<sp/>or<sp/>name<sp/>prefix<sp/>(usable<sp/>in<sp/>lists)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nbt_skip_raw(<ref refid="structnbt" kindref="compound">nbt</ref><sp/>*n,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>type)</highlight></codeline>
<codeline lineno="231"><highlight class="normal">{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TAG_Byte<sp/><sp/>:<sp/>n-&gt;cur<sp/>+=<sp/>1;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TAG_Short<sp/>:<sp/>n-&gt;cur<sp/>+=<sp/>2;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TAG_Int<sp/><sp/><sp/>:<sp/>n-&gt;cur<sp/>+=<sp/>4;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TAG_Long<sp/><sp/>:<sp/>n-&gt;cur<sp/>+=<sp/>8;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TAG_Float<sp/>:<sp/>n-&gt;cur<sp/>+=<sp/>4;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TAG_Double:<sp/>n-&gt;cur<sp/>+=<sp/>8;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TAG_Byte_Array:<sp/>n-&gt;cur<sp/>+=<sp/>4<sp/>+<sp/>1*nbt_parse_uint32(n-&gt;cur);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TAG_Int_Array<sp/>:<sp/>n-&gt;cur<sp/>+=<sp/>4<sp/>+<sp/>4*nbt_parse_uint32(n-&gt;cur);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TAG_String<sp/><sp/><sp/><sp/>:<sp/>n-&gt;cur<sp/>+=<sp/>2<sp/>+<sp/>(n-&gt;cur[0]*256<sp/>+<sp/>n-&gt;cur[1]);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TAG_List<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>list_type<sp/>=<sp/>*n-&gt;cur++;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>list_len<sp/>=<sp/>nbt_parse_uint32(n-&gt;cur);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n-&gt;cur<sp/>+=<sp/>4;<sp/></highlight><highlight class="comment">//<sp/>list_len</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>list_len;<sp/>++i)</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbt_skip_raw(n,<sp/>list_type);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TAG_Compound<sp/>:<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*n-&gt;cur<sp/>!=<sp/>TAG_End)</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbt_skip(n);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbt_skip(n);<sp/></highlight><highlight class="comment">//<sp/>skip<sp/>the<sp/>TAG_end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/>assert(n-&gt;cur<sp/>&lt;=<sp/>n-&gt;buffer_end);</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nbt_skip(<ref refid="structnbt" kindref="compound">nbt</ref><sp/>*n)</highlight></codeline>
<codeline lineno="262"><highlight class="normal">{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>*n-&gt;cur++;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>TAG_End)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/>n-&gt;cur<sp/>+=<sp/>(n-&gt;cur[0]*256<sp/>+<sp/>n-&gt;cur[1])<sp/>+<sp/>2;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/>nbt_skip_raw(n,<sp/>type);</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="comment">//<sp/>byteswap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nbt_swap(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="273"><highlight class="normal">{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>(len&gt;&gt;1);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>ptr[i];</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr[i]<sp/>=<sp/>ptr[len-1-i];</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ptr[len-1-i]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pass<sp/>in<sp/>the<sp/>expected<sp/>type,<sp/>fail<sp/>if<sp/>doesn&apos;t<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>data,<sp/>byteswapped<sp/>if<sp/>appropriate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*nbt_get_fromlist(<ref refid="structnbt" kindref="compound">nbt</ref><sp/>*n,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*len)</highlight></codeline>
<codeline lineno="285"><highlight class="normal">{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/>assert(type<sp/>!=<sp/>TAG_Compound);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/>assert(type<sp/>!=<sp/>TAG_List);<sp/></highlight><highlight class="comment">//<sp/>we<sp/>could<sp/>support<sp/>getting<sp/>lists<sp/>of<sp/>primitives<sp/>as<sp/>if<sp/>they<sp/>were<sp/>arrays,<sp/>but<sp/>eh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len)<sp/>*len<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/>ptr<sp/>=<sp/>n-&gt;cur;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TAG_Byte<sp/><sp/>:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TAG_Short<sp/>:<sp/>nbt_swap(ptr,<sp/>2);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TAG_Int<sp/><sp/><sp/>:<sp/>nbt_swap(ptr,<sp/>4);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TAG_Long<sp/><sp/>:<sp/>nbt_swap(ptr,<sp/>8);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TAG_Float<sp/>:<sp/>nbt_swap(ptr,<sp/>4);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TAG_Double:<sp/>nbt_swap(ptr,<sp/>8);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TAG_Byte_Array:</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*len<sp/>=<sp/>nbt_parse_uint32(ptr);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>TAG_Int_Array:<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*len<sp/>=<sp/>nbt_parse_uint32(ptr);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>*len;<sp/>++i)</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbt_swap(ptr<sp/>+<sp/>4*i,<sp/>4);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>assert(0);<sp/></highlight><highlight class="comment">//<sp/>unhandled<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/>nbt_skip_raw(n,<sp/>type);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*nbt_get(<ref refid="structnbt" kindref="compound">nbt</ref><sp/>*n,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*len)</highlight></codeline>
<codeline lineno="320"><highlight class="normal">{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/>assert(n-&gt;cur[0]<sp/>==<sp/>type);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/>n-&gt;cur<sp/>+=<sp/>3<sp/>+<sp/>(n-&gt;cur[1]*256+n-&gt;cur[2]);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nbt_get_fromlist(n,<sp/>type,<sp/>len);</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nbt_begin_compound(<ref refid="structnbt" kindref="compound">nbt</ref><sp/>*n)<sp/></highlight><highlight class="comment">//<sp/>start<sp/>a<sp/>compound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal">{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/>assert(*n-&gt;cur<sp/>==<sp/>TAG_Compound);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/>n-&gt;cur<sp/>+=<sp/>3<sp/>+<sp/>(n-&gt;cur[1]*256<sp/>+<sp/>n-&gt;cur[2]);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/>++n-&gt;nesting;</highlight></codeline>
<codeline lineno="332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nbt_begin_compound_in_list(<ref refid="structnbt" kindref="compound">nbt</ref><sp/>*n)<sp/></highlight><highlight class="comment">//<sp/>start<sp/>a<sp/>compound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal">{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/>++n-&gt;nesting;</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nbt_end_compound(<ref refid="structnbt" kindref="compound">nbt</ref><sp/>*n)<sp/></highlight><highlight class="comment">//<sp/>end<sp/>a<sp/>compound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal">{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/>assert(*n-&gt;cur<sp/>==<sp/>TAG_End);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/>assert(n-&gt;nesting<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/>++n-&gt;cur;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/>--n-&gt;nesting;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="comment">//<sp/>@TODO<sp/>no<sp/>interface<sp/>to<sp/>get<sp/>lists<sp/>from<sp/>lists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nbt_begin_list(<ref refid="structnbt" kindref="compound">nbt</ref><sp/>*n,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>type)</highlight></codeline>
<codeline lineno="349"><highlight class="normal">{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/>uint32<sp/>len;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/>ptr<sp/>=<sp/>n-&gt;cur<sp/>+<sp/>3<sp/>+<sp/>(n-&gt;cur[1]*256<sp/>+<sp/>n-&gt;cur[2]);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr[0]<sp/>!=<sp/>type)</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/>n-&gt;cur<sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/>len<sp/>=<sp/>nbt_parse_uint32(n-&gt;cur+1);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/>assert(n-&gt;cur[0]<sp/>==<sp/>type);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>@TODO<sp/>keep<sp/>a<sp/>stack<sp/>with<sp/>the<sp/>count<sp/>to<sp/>make<sp/>sure<sp/>they<sp/>do<sp/>it<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/>++n-&gt;nesting;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/>n-&gt;cur<sp/>+=<sp/>5;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>len;</highlight></codeline>
<codeline lineno="363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nbt_end_list(<ref refid="structnbt" kindref="compound">nbt</ref><sp/>*n)</highlight></codeline>
<codeline lineno="366"><highlight class="normal">{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/>--n-&gt;nesting;</highlight></codeline>
<codeline lineno="368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment">//<sp/>raw_block<sp/>chunk<sp/>is<sp/>16x256x16x4<sp/>=<sp/>2^(4+8+4+2)<sp/>=<sp/>256KB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>want<sp/>to<sp/>process<sp/>64x64x256<sp/>at<sp/>a<sp/>time,<sp/>that<sp/>will<sp/>be:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>4*4*256KB<sp/>=&gt;<sp/>4MB<sp/>per<sp/>area<sp/>in<sp/>raw_block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(plus<sp/>we<sp/>maybe<sp/>need<sp/>to<sp/>decode<sp/>adjacent<sp/>regions)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FAST_CHUNK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structfast__chunk" kindref="compound">fast_chunk</ref><sp/><ref refid="structfast__chunk" kindref="compound">parse_chunk</ref>;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structchunk" kindref="compound">chunk</ref><sp/><ref refid="structfast__chunk" kindref="compound">parse_chunk</ref>;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structfast__chunk" kindref="compound">parse_chunk</ref><sp/>*minecraft_chunk_parse(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="385"><highlight class="normal">{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><ref refid="structfast__chunk" kindref="compound">parse_chunk</ref><sp/>*c<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><ref refid="structnbt" kindref="compound">nbt</ref><sp/>n_store,<sp/>*n<sp/>=<sp/>&amp;n_store;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/>n-&gt;buffer_start<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/>n-&gt;buffer_end<sp/><sp/><sp/>=<sp/>data<sp/>+<sp/>len;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/>n-&gt;cur<sp/>=<sp/>n-&gt;buffer_start;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/>n-&gt;nesting<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/>nbt_begin_compound(n);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((s<sp/>=<sp/>nbt_peek(n))<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(s,<sp/></highlight><highlight class="stringliteral">&quot;Level&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*height;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*c));</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>FAST_CHUNK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(c,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*c));</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;pointer_to_free<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;rb[15][15][255].block<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;max_y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbt_begin_compound(n);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((s<sp/>=<sp/>nbt_peek(n))<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(s,<sp/></highlight><highlight class="stringliteral">&quot;xPos&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;xpos<sp/>=<sp/>*(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>nbt_get(n,<sp/>TAG_Int,<sp/>0);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(s,<sp/></highlight><highlight class="stringliteral">&quot;zPos&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;zpos<sp/>=<sp/>*(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>nbt_get(n,<sp/>TAG_Int,<sp/>0);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(s,<sp/></highlight><highlight class="stringliteral">&quot;Sections&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>nbt_begin_list(n,<sp/>TAG_Compound),<sp/>i;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>not-a-list<sp/>case<sp/>happens<sp/>in<sp/>The<sp/>End<sp/>and<sp/>I&apos;m<sp/>not<sp/>sure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>what<sp/>it<sp/>means...<sp/>possibly<sp/>one<sp/>of<sp/>those<sp/>silly<sp/>encodings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>where<sp/>it&apos;s<sp/>not<sp/>encoded<sp/>as<sp/>a<sp/>list<sp/>if<sp/>there&apos;s<sp/>only<sp/>one?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>worth<sp/>figuring<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbt_skip(n);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>count;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yi,<sp/>len;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8<sp/>*light<sp/>=<sp/>NULL,<sp/>*blocks<sp/>=<sp/>NULL,<sp/>*data<sp/>=<sp/>NULL,<sp/>*skylight<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbt_begin_compound_in_list(n);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((s<sp/>=<sp/>nbt_peek(n))<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(s,<sp/></highlight><highlight class="stringliteral">&quot;Y&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yi<sp/>=<sp/>*<sp/>(uint8<sp/>*)<sp/>nbt_get(n,<sp/>TAG_Byte,<sp/>0);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(s,<sp/></highlight><highlight class="stringliteral">&quot;BlockLight&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>light<sp/>=<sp/>nbt_get(n,<sp/>TAG_Byte_Array,<sp/>&amp;len);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(len<sp/>==<sp/>2048);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(s,<sp/></highlight><highlight class="stringliteral">&quot;Blocks&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blocks<sp/>=<sp/>nbt_get(n,<sp/>TAG_Byte_Array,<sp/>&amp;len);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(len<sp/>==<sp/>4096);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(s,<sp/></highlight><highlight class="stringliteral">&quot;Data&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>nbt_get(n,<sp/>TAG_Byte_Array,<sp/>&amp;len);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(len<sp/>==<sp/>2048);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(s,<sp/></highlight><highlight class="stringliteral">&quot;SkyLight&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skylight<sp/>=<sp/>nbt_get(n,<sp/>TAG_Byte_Array,<sp/>&amp;len);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(len<sp/>==<sp/>2048);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbt_end_compound(n);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(yi<sp/>&lt;<sp/>16);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifndef<sp/>FAST_CHUNK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>data<sp/>below<sp/>current<sp/>max_y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,z;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(c-&gt;max_y<sp/>&lt;<sp/>yi*16)<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x=0;<sp/>x<sp/>&lt;<sp/>16;<sp/>++x)</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(z=0;<sp/>z<sp/>&lt;<sp/>16;<sp/>++z)</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;rb[z][x][c-&gt;max_y].block<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++c-&gt;max_y;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>assemble<sp/>the<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,y,z,<sp/>o2=0,o4=0;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y=0;<sp/>y<sp/>&lt;<sp/>16;<sp/>++y)<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(z=0;<sp/>z<sp/>&lt;<sp/>16;<sp/>++z)<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x=0;<sp/>x<sp/>&lt;<sp/>16;<sp/>x<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structraw__block" kindref="compound">raw_block</ref><sp/>*rb<sp/>=<sp/>&amp;c-&gt;rb[15-z][x][y<sp/>+<sp/>yi*16];<sp/></highlight><highlight class="comment">//<sp/>15-z<sp/>because<sp/>switching<sp/>to<sp/>z-up<sp/>will<sp/>require<sp/>flipping<sp/>an<sp/>axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rb[0].block<sp/>=<sp/>blocks[o4];</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rb[0].light<sp/>=<sp/>light[o2]<sp/>&amp;<sp/>15;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rb[0].data<sp/><sp/>=<sp/>data[o2]<sp/>&amp;<sp/>15;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rb[0].skylight<sp/>=<sp/>skylight[o2]<sp/>&amp;<sp/>15;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rb[256].block<sp/>=<sp/>blocks[o4+1];</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rb[256].light<sp/>=<sp/>light[o2]<sp/>&gt;&gt;<sp/>4;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rb[256].data<sp/><sp/>=<sp/>data[o2]<sp/>&gt;&gt;<sp/>4;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rb[256].skylight<sp/>=<sp/>skylight[o2]<sp/>&gt;&gt;<sp/>4;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o2<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o4<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;max_y<sp/>+=<sp/>16;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;blockdata[yi]<sp/>=<sp/>blocks;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;data<sp/><sp/><sp/><sp/><sp/>[yi]<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;light<sp/><sp/><sp/><sp/>[yi]<sp/>=<sp/>light;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c-&gt;skylight<sp/>[yi]<sp/>=<sp/>skylight;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//nbt_end_list(n);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(s,<sp/></highlight><highlight class="stringliteral">&quot;HeightMap&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>height<sp/>=<sp/>nbt_get(n,<sp/>TAG_Int_Array,<sp/>&amp;len);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(len<sp/>==<sp/>256);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbt_skip(n);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbt_end_compound(n);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nbt_skip(n);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/>nbt_end_compound(n);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/>assert(n-&gt;cur<sp/>==<sp/>n-&gt;buffer_end);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="508"><highlight class="normal">}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_DECODED_CHUNK_X<sp/><sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX_DECODED_CHUNK_Z<sp/><sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513" refid="structdecoded__buffer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal">{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cx,cz;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><ref refid="structfast__chunk" kindref="compound">fast_chunk</ref><sp/>*fc;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>valid;</highlight></codeline>
<codeline lineno="518"><highlight class="normal">}<sp/><ref refid="structdecoded__buffer" kindref="compound">decoded_buffer</ref>;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structdecoded__buffer" kindref="compound">decoded_buffer</ref><sp/>decoded_buffers[MAX_DECODED_CHUNK_Z][MAX_DECODED_CHUNK_X];</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>lock_chunk_get_mutex(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>unlock_chunk_get_mutex(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FAST_CHUNK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><ref refid="structfast__chunk" kindref="compound">fast_chunk</ref><sp/>*get_decoded_fastchunk_uncached(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chunk_x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chunk_z)</highlight></codeline>
<codeline lineno="526"><highlight class="normal">{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*decoded;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><ref refid="structcompressed__chunk" kindref="compound">compressed_chunk</ref><sp/>*cc;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inlen;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><ref refid="structfast__chunk" kindref="compound">fast_chunk</ref><sp/>*fc;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/>lock_chunk_get_mutex();</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/>cc<sp/>=<sp/>get_compressed_chunk(chunk_x,<sp/>chunk_z);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cc-&gt;len<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++cc-&gt;refcount;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/>unlock_chunk_get_mutex();</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cc-&gt;len<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/>assert(cc<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/>assert(cc-&gt;data[4]<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/>inlen<sp/>=<sp/>nbt_parse_uint32(cc-&gt;data);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/>decoded<sp/>=<sp/>stbi_zlib_decode_malloc_guesssize(cc-&gt;data+5,<sp/>inlen,<sp/>inlen*3,<sp/>&amp;len);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/>assert(decoded<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/>assert(len<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/>lock_chunk_get_mutex();</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/>deref_compressed_chunk(cc);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/>unlock_chunk_get_mutex();</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>FAST_CHUNK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/>fc<sp/>=<sp/>minecraft_chunk_parse(decoded,<sp/>len);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/>fc<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fc<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(decoded);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fc;</highlight></codeline>
<codeline lineno="563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><ref refid="structdecoded__buffer" kindref="compound">decoded_buffer</ref><sp/>*get_decoded_buffer(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chunk_x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chunk_z)</highlight></codeline>
<codeline lineno="567"><highlight class="normal">{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><ref refid="structdecoded__buffer" kindref="compound">decoded_buffer</ref><sp/>*db<sp/>=<sp/>&amp;decoded_buffers[chunk_z&amp;(MAX_DECODED_CHUNK_Z-1)][chunk_x&amp;(MAX_DECODED_CHUNK_X-1)];</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(db-&gt;valid)<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(db-&gt;cx<sp/>==<sp/>chunk_x<sp/>&amp;&amp;<sp/>db-&gt;cz<sp/>==<sp/>chunk_z)</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>db;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(db-&gt;fc)<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(db-&gt;fc-&gt;pointer_to_free);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(db-&gt;fc);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/>db-&gt;cx<sp/>=<sp/>chunk_x;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/>db-&gt;cz<sp/>=<sp/>chunk_z;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/>db-&gt;valid<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/>db-&gt;fc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>db-&gt;fc<sp/>=<sp/>get_decoded_fastchunk_uncached(chunk_x,<sp/>chunk_z);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>db;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="normal">}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><ref refid="structfast__chunk" kindref="compound">fast_chunk</ref><sp/>*get_decoded_fastchunk(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chunk_x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chunk_z)</highlight></codeline>
<codeline lineno="590"><highlight class="normal">{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><ref refid="structdecoded__buffer" kindref="compound">decoded_buffer</ref><sp/>*db<sp/>=<sp/>get_decoded_buffer(chunk_x,<sp/>chunk_z);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>db-&gt;fc;</highlight></codeline>
<codeline lineno="593"><highlight class="normal">}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FAST_CHUNK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><ref refid="structchunk" kindref="compound">chunk</ref><sp/>*get_decoded_chunk_raw(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chunk_x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chunk_z)</highlight></codeline>
<codeline lineno="598"><highlight class="normal">{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*decoded;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><ref refid="structcompressed__chunk" kindref="compound">compressed_chunk</ref><sp/>*cc<sp/>=<sp/>get_compressed_chunk(chunk_x,<sp/>chunk_z);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/>assert(cc<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cc-&gt;len<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structchunk" kindref="compound">chunk</ref><sp/>*ch;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inlen<sp/>=<sp/>nbt_parse_uint32(cc-&gt;data);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(cc-&gt;data[4]<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>decoded<sp/>=<sp/>stbi_zlib_decode_malloc_guesssize(cc-&gt;data+5,<sp/>inlen,<sp/>inlen*3,<sp/>&amp;len);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(decoded<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>FAST_CHUNK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ch<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ch<sp/>=<sp/>minecraft_chunk_parse(decoded,<sp/>len);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>free(decoded);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ch;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal">}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structchunk" kindref="compound">chunk</ref><sp/>*decoded_chunks[MAX_DECODED_CHUNK_Z][MAX_DECODED_CHUNK_X];</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><ref refid="structchunk" kindref="compound">chunk</ref><sp/>*get_decoded_chunk(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chunk_x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chunk_z)</highlight></codeline>
<codeline lineno="623"><highlight class="normal">{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><ref refid="structchunk" kindref="compound">chunk</ref><sp/>*c<sp/>=<sp/>decoded_chunks[chunk_z&amp;(MAX_DECODED_CHUNK_Z-1)][chunk_x&amp;(MAX_DECODED_CHUNK_X-1)];</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&amp;&amp;<sp/>c-&gt;xpos<sp/>==<sp/>chunk_x<sp/>&amp;&amp;<sp/>c-&gt;zpos<sp/>==<sp/>chunk_z)</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c)<sp/>free(c);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/>c<sp/>=<sp/>get_decoded_chunk_raw(chunk_x,<sp/>chunk_z);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/>decoded_chunks[chunk_z&amp;(MAX_DECODED_CHUNK_Z-1)][chunk_x&amp;(MAX_DECODED_CHUNK_X-1)]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="631"><highlight class="normal">}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_parse.c"/>
  </compounddef>
</doxygen>
