<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="test__eventlog_8cpp" kind="file" language="C++">
    <compoundname>test_eventlog.cpp</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#if<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>include<sp/>&quot;includes.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>include<sp/>&quot;test_sink.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>include<sp/>&quot;spdlog/sinks/win_eventlog_sink.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LPCSTR<sp/>TEST_SOURCE<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;spdlog_test&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_single_print(std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)&gt;<sp/>do_log,<sp/>std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;expected_contents,<sp/>WORD<sp/>expected_ev_type)</highlight></codeline>
<codeline lineno="11"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std::chrono;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>do_log(expected_contents);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>expected_time_generated<sp/>=<sp/>duration_cast&lt;seconds&gt;(system_clock::now().time_since_epoch()).count();</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">handle_t</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE<sp/>handle_;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~handle_t()</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(handle_)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REQUIRE(CloseEventLog(handle_));</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>event_log{::OpenEventLogA(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>TEST_SOURCE)};</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(event_log.handle_);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>DWORD<sp/>read_bytes{},<sp/>size_needed{};</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/>::ReadEventLogA(</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>event_log.handle_,<sp/>EVENTLOG_SEQUENTIAL_READ<sp/>|<sp/>EVENTLOG_BACKWARDS_READ,<sp/>0,<sp/>&amp;read_bytes,<sp/>0,<sp/>&amp;read_bytes,<sp/>&amp;size_needed);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(!ok);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(::GetLastError()<sp/>==<sp/>ERROR_INSUFFICIENT_BUFFER);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;char&gt;<sp/>record_buffer(size_needed);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>PEVENTLOGRECORD<sp/>record<sp/>=<sp/>(PEVENTLOGRECORD)record_buffer.data();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>::ReadEventLogA(</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>event_log.handle_,<sp/>EVENTLOG_SEQUENTIAL_READ<sp/>|<sp/>EVENTLOG_BACKWARDS_READ,<sp/>0,<sp/>record,<sp/>size_needed,<sp/>&amp;read_bytes,<sp/>&amp;size_needed);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(ok);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(record-&gt;NumStrings<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(record-&gt;EventType<sp/>==<sp/>expected_ev_type);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE((expected_time_generated<sp/>-<sp/>record-&gt;TimeGenerated)<sp/>&lt;=<sp/>3u);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>message_in_log(((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)record<sp/>+<sp/>record-&gt;StringOffset));</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(message_in_log<sp/>==<sp/>expected_contents<sp/>+<sp/>spdlog::details::os::default_eol);</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;eventlog&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[eventlog]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">spdlog;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>test_sink<sp/>=<sp/>std::make_shared&lt;sinks::win_eventlog_sink_mt&gt;(TEST_SOURCE);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classspdlog_1_1logger" kindref="compound">spdlog::logger</ref><sp/>test_logger(</highlight><highlight class="stringliteral">&quot;eventlog&quot;</highlight><highlight class="normal">,<sp/>test_sink);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>test_logger.set_level(level::trace);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>test_sink-&gt;set_pattern(</highlight><highlight class="stringliteral">&quot;%v&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>test_single_print([&amp;test_logger](std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;msg)<sp/>{<sp/>test_logger.trace(msg);<sp/>},<sp/></highlight><highlight class="stringliteral">&quot;my<sp/>trace<sp/>message&quot;</highlight><highlight class="normal">,<sp/>EVENTLOG_SUCCESS);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>test_single_print([&amp;test_logger](std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;msg)<sp/>{<sp/>test_logger.debug(msg);<sp/>},<sp/></highlight><highlight class="stringliteral">&quot;my<sp/>debug<sp/>message&quot;</highlight><highlight class="normal">,<sp/>EVENTLOG_SUCCESS);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>test_single_print([&amp;test_logger](std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;msg)<sp/>{<sp/>test_logger.info(msg);<sp/>},<sp/></highlight><highlight class="stringliteral">&quot;my<sp/>info<sp/>message&quot;</highlight><highlight class="normal">,<sp/>EVENTLOG_INFORMATION_TYPE);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>test_single_print([&amp;test_logger](std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;msg)<sp/>{<sp/>test_logger.warn(msg);<sp/>},<sp/></highlight><highlight class="stringliteral">&quot;my<sp/>warn<sp/>message&quot;</highlight><highlight class="normal">,<sp/>EVENTLOG_WARNING_TYPE);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>test_single_print([&amp;test_logger](std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;msg)<sp/>{<sp/>test_logger.error(msg);<sp/>},<sp/></highlight><highlight class="stringliteral">&quot;my<sp/>error<sp/>message&quot;</highlight><highlight class="normal">,<sp/>EVENTLOG_ERROR_TYPE);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>test_single_print([&amp;test_logger](std::string<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;msg)<sp/>{<sp/>test_logger.critical(msg);<sp/>},<sp/></highlight><highlight class="stringliteral">&quot;my<sp/>critical<sp/>message&quot;</highlight><highlight class="normal">,<sp/>EVENTLOG_ERROR_TYPE);</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//_WIN32</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_eventlog.cpp"/>
  </compounddef>
</doxygen>
