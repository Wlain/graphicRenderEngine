<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="test_8cpp" kind="file" language="C++">
    <compoundname>test.cpp</compoundname>
    <includes local="no">cassert</includes>
    <includes local="no">string</includes>
    <includes local="no">cstdio</includes>
    <includes local="no">cstring</includes>
    <includes local="no">iostream</includes>
    <includes local="no">sstream</includes>
    <includes refid="json11_8hpp" local="yes">json11.hpp</includes>
    <includes local="no">list</includes>
    <includes local="no">set</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">type_traits</includes>
    <incdepgraph>
      <node id="8">
        <label>json11.hpp</label>
        <link refid="json11_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/test.cpp</label>
        <link refid="test_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>algorithm</label>
      </node>
      <node id="2">
        <label>cassert</label>
      </node>
      <node id="4">
        <label>cstdio</label>
      </node>
      <node id="5">
        <label>cstring</label>
      </node>
      <node id="12">
        <label>initializer_list</label>
      </node>
      <node id="6">
        <label>iostream</label>
      </node>
      <node id="13">
        <label>list</label>
      </node>
      <node id="10">
        <label>map</label>
      </node>
      <node id="11">
        <label>memory</label>
      </node>
      <node id="14">
        <label>set</label>
      </node>
      <node id="7">
        <label>sstream</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="17">
        <label>type_traits</label>
      </node>
      <node id="15">
        <label>unordered_map</label>
      </node>
      <node id="9">
        <label>vector</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="test_8cpp_1abcd741abd0f6cc661b5a61d628d69e21" prot="public" static="no">
        <name>JSON11_TEST_CPP_PREFIX_CODE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/test.cpp" line="9" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/test.cpp" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test_8cpp_1a5836b356f6e0df20bf6ff792bac11124" prot="public" static="no">
        <name>JSON11_TEST_CPP_SUFFIX_CODE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/test.cpp" line="10" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/test.cpp" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test_8cpp_1ad984e8d943f9bae620cb4a2d82bf1e80" prot="public" static="no">
        <name>JSON11_TEST_STANDALONE_MAIN</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/test.cpp" line="11" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/test.cpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test_8cpp_1a9b1b936fa98fa80d1a7972e1337f708f" prot="public" static="no">
        <name>JSON11_TEST_CASE</name>
        <param><defname>name</defname></param>
        <initializer>static void name()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/test.cpp" line="12" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/test.cpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test_8cpp_1a6bf6f531642969a90e9b052a5d391bea" prot="public" static="no">
        <name>JSON11_TEST_ASSERT</name>
        <param><defname>b</defname></param>
        <initializer>assert(b)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/test.cpp" line="13" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/test.cpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test_8cpp_1ae62ba0aea536c0ea8ff2025283402107" prot="public" static="no">
        <name>JSON11_ENABLE_DR1467_CANARY</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/test.cpp" line="26" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/test.cpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test_8cpp_1a31b52ae2ad0ec082c5e67289f9cf83d2" prot="public" static="no">
        <name>CHECK_TRAIT</name>
        <param><defname>x</defname></param>
        <initializer>static_assert(std::x::value, #x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/test.cpp" line="53" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/test.cpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="test_8cpp_1a087c449f5ce3fc223ea1d2cbc0a8901a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CHECK_TRAIT</definition>
        <argsstring>(is_nothrow_constructible&lt; Json &gt;)</argsstring>
        <name>CHECK_TRAIT</name>
        <param>
          <type>is_nothrow_constructible&lt; <ref refid="classjson11_1_1_json" kindref="compound">Json</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/test.cpp" line="54" column="1" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/test.cpp" declline="54" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1aba453360e81660475f919376f4371163" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CHECK_TRAIT</definition>
        <argsstring>(is_nothrow_default_constructible&lt; Json &gt;)</argsstring>
        <name>CHECK_TRAIT</name>
        <param>
          <type>is_nothrow_default_constructible&lt; <ref refid="classjson11_1_1_json" kindref="compound">Json</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/test.cpp" line="55" column="1" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/test.cpp" declline="55" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1a370f11ea6a891d53f4e96c36c352d4c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CHECK_TRAIT</definition>
        <argsstring>(is_copy_constructible&lt; Json &gt;)</argsstring>
        <name>CHECK_TRAIT</name>
        <param>
          <type>is_copy_constructible&lt; <ref refid="classjson11_1_1_json" kindref="compound">Json</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/test.cpp" line="56" column="1" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/test.cpp" declline="56" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1aec3ff3e346218e78a8d335892df596ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CHECK_TRAIT</definition>
        <argsstring>(is_nothrow_move_constructible&lt; Json &gt;)</argsstring>
        <name>CHECK_TRAIT</name>
        <param>
          <type>is_nothrow_move_constructible&lt; <ref refid="classjson11_1_1_json" kindref="compound">Json</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/test.cpp" line="57" column="1" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/test.cpp" declline="57" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1ad31a1413a743ab53c3f71d0e21fd2720" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CHECK_TRAIT</definition>
        <argsstring>(is_copy_assignable&lt; Json &gt;)</argsstring>
        <name>CHECK_TRAIT</name>
        <param>
          <type>is_copy_assignable&lt; <ref refid="classjson11_1_1_json" kindref="compound">Json</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/test.cpp" line="58" column="1" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/test.cpp" declline="58" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1a048b8dfe405d1a5937952b8cac866cdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CHECK_TRAIT</definition>
        <argsstring>(is_nothrow_move_assignable&lt; Json &gt;)</argsstring>
        <name>CHECK_TRAIT</name>
        <param>
          <type>is_nothrow_move_assignable&lt; <ref refid="classjson11_1_1_json" kindref="compound">Json</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/test.cpp" line="59" column="1" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/test.cpp" declline="59" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1a11509059ffd81c149369daefac30b1ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CHECK_TRAIT</definition>
        <argsstring>(is_nothrow_destructible&lt; Json &gt;)</argsstring>
        <name>CHECK_TRAIT</name>
        <param>
          <type>is_nothrow_destructible&lt; <ref refid="classjson11_1_1_json" kindref="compound">Json</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/test.cpp" line="60" column="1" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/test.cpp" declline="60" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1a327ee13053b38c8c81b2e31ef28154a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>JSON11_TEST_CASE</definition>
        <argsstring>(json11_test)</argsstring>
        <name>JSON11_TEST_CASE</name>
        <param>
          <type>json11_test</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/test.cpp" line="62" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/test.cpp" bodystart="62" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1a5328583c25a222f23c381184050e63f3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void parse_from_stdin</definition>
        <argsstring>()</argsstring>
        <name>parse_from_stdin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/test.cpp" line="257" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/test.cpp" bodystart="257" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="test_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/test.cpp" line="273" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/test.cpp" bodystart="273" bodyend="280"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Define<sp/>JSON11_TEST_CUSTOM_CONFIG<sp/>to<sp/>1<sp/>if<sp/>you<sp/>want<sp/>to<sp/>build<sp/>this<sp/>tester<sp/>into</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>your<sp/>own<sp/>unit-test<sp/>framework<sp/>rather<sp/>than<sp/>a<sp/>stand-alone<sp/>program.<sp/><sp/>By<sp/>setting</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>The<sp/>values<sp/>of<sp/>the<sp/>variables<sp/>included<sp/>below,<sp/>you<sp/>can<sp/>insert<sp/>your<sp/>own<sp/>custom</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>code<sp/>into<sp/>this<sp/>file<sp/>as<sp/>it<sp/>builds,<sp/>in<sp/>order<sp/>to<sp/>make<sp/>it<sp/>into<sp/>a<sp/>test<sp/>case<sp/>for</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>your<sp/>favorite<sp/>framework.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!JSON11_TEST_CUSTOM_CONFIG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JSON11_TEST_CPP_PREFIX_CODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JSON11_TEST_CPP_SUFFIX_CODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JSON11_TEST_STANDALONE_MAIN<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JSON11_TEST_CASE(name)<sp/>static<sp/>void<sp/>name()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JSON11_TEST_ASSERT(b)<sp/>assert(b)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>NDEBUG</highlight><highlight class="comment">//at<sp/>now<sp/>assert<sp/>will<sp/>work<sp/>even<sp/>in<sp/>Release<sp/>build</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>JSON11_TEST_CUSTOM_CONFIG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>Enable<sp/>or<sp/>disable<sp/>code<sp/>which<sp/>demonstrates<sp/>the<sp/>behavior<sp/>change<sp/>in<sp/>Xcode<sp/>7<sp/>/<sp/>Clang<sp/>3.7,</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>introduced<sp/>by<sp/>DR1467<sp/>and<sp/>described<sp/>here:<sp/>https://github.com/dropbox/json11/issues/86</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>Defaults<sp/>to<sp/>off<sp/>since<sp/>it<sp/>doesn&apos;t<sp/>appear<sp/>the<sp/>standards<sp/>committee<sp/>is<sp/>likely<sp/>to<sp/>act</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>on<sp/>this,<sp/>so<sp/>it<sp/>needs<sp/>to<sp/>be<sp/>considered<sp/>normal<sp/>behavior.</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>JSON11_ENABLE_DR1467_CANARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JSON11_ENABLE_DR1467_CANARY<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>Beginning<sp/>of<sp/>standard<sp/>source<sp/>file,<sp/>which<sp/>makes<sp/>use<sp/>of<sp/>the<sp/>customizations<sp/>above.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;json11.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;list&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>user-defined<sp/>prefix<sp/>code<sp/>(includes,<sp/>function<sp/>declarations,<sp/>etc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>set<sp/>up<sp/>a<sp/>custom<sp/>test<sp/>suite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">JSON11_TEST_CPP_PREFIX_CODE</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">json11;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::string;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>Json<sp/>has<sp/>the<sp/>properties<sp/>we<sp/>want.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_TRAIT(x)<sp/>static_assert(std::x::value,<sp/>#x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">CHECK_TRAIT(is_nothrow_constructible&lt;Json&gt;);</highlight></codeline>
<codeline lineno="55"><highlight class="normal">CHECK_TRAIT(is_nothrow_default_constructible&lt;Json&gt;);</highlight></codeline>
<codeline lineno="56"><highlight class="normal">CHECK_TRAIT(is_copy_constructible&lt;Json&gt;);</highlight></codeline>
<codeline lineno="57"><highlight class="normal">CHECK_TRAIT(is_nothrow_move_constructible&lt;Json&gt;);</highlight></codeline>
<codeline lineno="58"><highlight class="normal">CHECK_TRAIT(is_copy_assignable&lt;Json&gt;);</highlight></codeline>
<codeline lineno="59"><highlight class="normal">CHECK_TRAIT(is_nothrow_move_assignable&lt;Json&gt;);</highlight></codeline>
<codeline lineno="60"><highlight class="normal">CHECK_TRAIT(is_nothrow_destructible&lt;Json&gt;);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">JSON11_TEST_CASE(json11_test)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>simple_test<sp/>=</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R</highlight><highlight class="stringliteral">&quot;({&quot;k1&quot;:&quot;v1&quot;,<sp/>&quot;k2&quot;:42,<sp/>&quot;k3&quot;:[&quot;a&quot;,123,true,false,null]})&quot;;</highlight></codeline>
<codeline lineno="65"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="66"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>json<sp/>=<sp/>Json::parse(simple_test,<sp/>err);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;k1:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>json[</highlight><highlight class="stringliteral">&quot;k1&quot;</highlight><highlight class="normal">].string_value()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;k3:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>json[</highlight><highlight class="stringliteral">&quot;k3&quot;</highlight><highlight class="normal">].dump()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;k<sp/>:<sp/>json[</highlight><highlight class="stringliteral">&quot;k3&quot;</highlight><highlight class="normal">].array_items())<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>k.dump()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>comment_test<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;({</highlight></codeline>
<codeline lineno="77"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>comment<sp/>/*<sp/>with<sp/>nested<sp/>comment<sp/>*/</highlight></codeline>
<codeline lineno="78"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;a&quot;:<sp/>1,</highlight></codeline>
<codeline lineno="79"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>comment</highlight></codeline>
<codeline lineno="80"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>continued</highlight></codeline>
<codeline lineno="81"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;b&quot;:<sp/>&quot;text&quot;,</highlight></codeline>
<codeline lineno="82"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>/*<sp/>multi</highlight></codeline>
<codeline lineno="83"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line</highlight></codeline>
<codeline lineno="84"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>comment</highlight></codeline>
<codeline lineno="85"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>line-comment-inside-multiline-comment</highlight></codeline>
<codeline lineno="86"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight></codeline>
<codeline lineno="87"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>and<sp/>single-line<sp/>comment</highlight></codeline>
<codeline lineno="88"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>and<sp/>single-line<sp/>comment<sp/>/*<sp/>multiline<sp/>inside<sp/>single<sp/>line<sp/>*/</highlight></codeline>
<codeline lineno="89"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;c&quot;:<sp/>[1,<sp/>2,<sp/>3]</highlight></codeline>
<codeline lineno="90"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>and<sp/>single-line<sp/>comment<sp/>at<sp/>end<sp/>of<sp/>object</highlight></codeline>
<codeline lineno="91"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>})&quot;;</highlight></codeline>
<codeline lineno="92"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="93"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>err_comment;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>json_comment<sp/>=<sp/>Json::parse(</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>comment_test,<sp/>err_comment,<sp/>JsonParse::COMMENTS);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(!json_comment.is_null());</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(err_comment.empty());</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>comment_test<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{\&quot;a\&quot;:<sp/>1}//trailing<sp/>line<sp/>comment&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>json_comment<sp/>=<sp/>Json::parse(</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>comment_test,<sp/>err_comment,<sp/>JsonParse::COMMENTS);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(!json_comment.is_null());</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(err_comment.empty());</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>comment_test<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{\&quot;a\&quot;:<sp/>1}/*trailing<sp/>multi-line<sp/>comment*/&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>json_comment<sp/>=<sp/>Json::parse(</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>comment_test,<sp/>err_comment,<sp/>JsonParse::COMMENTS);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(!json_comment.is_null());</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(err_comment.empty());</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>failing_comment_test<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{\n/*<sp/>unterminated<sp/>comment\n\&quot;a\&quot;:<sp/>1,\n}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>err_failing_comment;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>json_failing_comment<sp/>=<sp/>Json::parse(</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>failing_comment_test,<sp/>err_failing_comment,<sp/>JsonParse::COMMENTS);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(json_failing_comment.is_null());</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(!err_failing_comment.empty());</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>failing_comment_test<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{\n/*<sp/>unterminated<sp/>trailing<sp/>comment<sp/>}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>json_failing_comment<sp/>=<sp/>Json::parse(</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>failing_comment_test,<sp/>err_failing_comment,<sp/>JsonParse::COMMENTS);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(json_failing_comment.is_null());</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(!err_failing_comment.empty());</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>failing_comment_test<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{\n/<sp/>/<sp/>bad<sp/>comment<sp/>}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>json_failing_comment<sp/>=<sp/>Json::parse(</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>failing_comment_test,<sp/>err_failing_comment,<sp/>JsonParse::COMMENTS);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(json_failing_comment.is_null());</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(!err_failing_comment.empty());</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>failing_comment_test<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{//<sp/>bad<sp/>comment<sp/>}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>json_failing_comment<sp/>=<sp/>Json::parse(</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>failing_comment_test,<sp/>err_failing_comment,<sp/>JsonParse::COMMENTS);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(json_failing_comment.is_null());</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(!err_failing_comment.empty());</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>failing_comment_test<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{\n\&quot;a\&quot;:<sp/>1\n}/&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>json_failing_comment<sp/>=<sp/>Json::parse(</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>failing_comment_test,<sp/>err_failing_comment,<sp/>JsonParse::COMMENTS);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(json_failing_comment.is_null());</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(!err_failing_comment.empty());</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>failing_comment_test<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{/*<sp/>bad\ncomment<sp/>*}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>json_failing_comment<sp/>=<sp/>Json::parse(</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>failing_comment_test,<sp/>err_failing_comment,<sp/>JsonParse::COMMENTS);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(json_failing_comment.is_null());</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(!err_failing_comment.empty());</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>std::list&lt;int&gt;<sp/>l1<sp/>{<sp/>1,<sp/>2,<sp/>3<sp/>};</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>l2<sp/>{<sp/>1,<sp/>2,<sp/>3<sp/>};</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;int&gt;<sp/>l3<sp/>{<sp/>1,<sp/>2,<sp/>3<sp/>};</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(<ref refid="classjson11_1_1_json" kindref="compound">Json</ref>(l1)<sp/>==<sp/><ref refid="classjson11_1_1_json" kindref="compound">Json</ref>(l2));</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(<ref refid="classjson11_1_1_json" kindref="compound">Json</ref>(l2)<sp/>==<sp/><ref refid="classjson11_1_1_json" kindref="compound">Json</ref>(l3));</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;string,<sp/>string&gt;<sp/>m1<sp/>{<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;k1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;v1&quot;</highlight><highlight class="normal"><sp/>},<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;k2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;v2&quot;</highlight><highlight class="normal"><sp/>}<sp/>};</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;string,<sp/>string&gt;<sp/>m2<sp/>{<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;k1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;v1&quot;</highlight><highlight class="normal"><sp/>},<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;k2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;v2&quot;</highlight><highlight class="normal"><sp/>}<sp/>};</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(<ref refid="classjson11_1_1_json" kindref="compound">Json</ref>(m1)<sp/>==<sp/><ref refid="classjson11_1_1_json" kindref="compound">Json</ref>(m2));</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Json<sp/>literals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classjson11_1_1_json" kindref="compound">Json</ref><sp/>obj<sp/>=<sp/>Json::object({</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;k1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;v1&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;k2&quot;</highlight><highlight class="normal">,<sp/>42.0<sp/>},</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;k3&quot;</highlight><highlight class="normal">,<sp/>Json::array({<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/>123.0,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>})<sp/>},</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;obj:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>obj.dump()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(obj.dump()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;{\&quot;k1\&quot;:<sp/>\&quot;v1\&quot;,<sp/>\&quot;k2\&quot;:<sp/>42,<sp/>\&quot;k3\&quot;:<sp/>[\&quot;a\&quot;,<sp/>123,<sp/>true,<sp/>false,<sp/>null]}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(<ref refid="classjson11_1_1_json" kindref="compound">Json</ref>(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">).number_value()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(<ref refid="classjson11_1_1_json" kindref="compound">Json</ref>(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">).<ref refid="structstring__value" kindref="compound">string_value</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(<ref refid="classjson11_1_1_json" kindref="compound">Json</ref>().number_value()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(obj<sp/>==<sp/>json);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(<ref refid="classjson11_1_1_json" kindref="compound">Json</ref>(42)<sp/>==<sp/><ref refid="classjson11_1_1_json" kindref="compound">Json</ref>(42.0));</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(<ref refid="classjson11_1_1_json" kindref="compound">Json</ref>(42)<sp/>!=<sp/><ref refid="classjson11_1_1_json" kindref="compound">Json</ref>(42.1));</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>unicode_escape_test<sp/>=</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R</highlight><highlight class="stringliteral">&quot;([<sp/>&quot;blah\ud83d\udca9blah\ud83dblah\udca9blah\u0000blah\u1234&quot;<sp/>])&quot;;</highlight></codeline>
<codeline lineno="178"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="179"><highlight class="stringliteral"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>utf8[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;blah&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;\xf0\x9f\x92\xa9&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;blah&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;\xed\xa0\xbd&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;blah&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\xed\xb2\xa9&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;blah&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;\0&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;blah&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;\xe1\x88\xb4&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classjson11_1_1_json" kindref="compound">Json</ref><sp/>uni<sp/>=<sp/>Json::parse(unicode_escape_test,<sp/>err);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(uni[0].<ref refid="structstring__value" kindref="compound">string_value</ref>().size()<sp/>==<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>utf8)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(std::memcmp(uni[0].<ref refid="structstring__value" kindref="compound">string_value</ref>().data(),<sp/>utf8,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>utf8)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Demonstrates<sp/>the<sp/>behavior<sp/>change<sp/>in<sp/>Xcode<sp/>7<sp/>/<sp/>Clang<sp/>3.7,<sp/>introduced<sp/>by<sp/>DR1467</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>described<sp/>here:<sp/>https://llvm.org/bugs/show_bug.cgi?id=23812</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(JSON11_ENABLE_DR1467_CANARY)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classjson11_1_1_json" kindref="compound">Json</ref><sp/>nested_array<sp/>=<sp/>Json::array<sp/>{<sp/>Json::array<sp/>{<sp/>1,<sp/>2,<sp/>3<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(nested_array.is_array());</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(nested_array.array_items().size()<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(nested_array.array_items()[0].is_array());</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(nested_array.array_items()[0].array_items().size()<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>good_json<sp/>=<sp/>R</highlight><highlight class="stringliteral">&quot;(<sp/>{&quot;k1&quot;<sp/>:<sp/>&quot;v1&quot;})&quot;;</highlight></codeline>
<codeline lineno="198"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>bad_json1<sp/>=<sp/>good_json<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>{&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>bad_json2<sp/>=<sp/>good_json<sp/>+<sp/>R</highlight><highlight class="stringliteral">&quot;({&quot;k2&quot;:&quot;v2&quot;,<sp/>&quot;k3&quot;:[)&quot;;</highlight></codeline>
<codeline lineno="200"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TestMultiParse<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>input;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string::size_type<sp/>expect_parser_stop_pos;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>expect_not_empty_elms_count;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classjson11_1_1_json" kindref="compound">Json</ref><sp/>expect_parse_res;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>tests[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;<sp/>{&quot;</highlight><highlight class="normal">,<sp/>0,<sp/>0,<sp/>{}},</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{good_json,<sp/>good_json.size(),<sp/>1,<sp/><ref refid="classjson11_1_1_json" kindref="compound">Json</ref>(std::map&lt;string,<sp/>string&gt;{<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;k1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;v1&quot;</highlight><highlight class="normal"><sp/>}<sp/>})},</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{bad_json1,<sp/>good_json.size()<sp/>+<sp/>1,<sp/>1,<sp/><ref refid="classjson11_1_1_json" kindref="compound">Json</ref>(std::map&lt;string,<sp/>string&gt;{<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;k1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;v1&quot;</highlight><highlight class="normal"><sp/>}<sp/>})},</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{bad_json2,<sp/>good_json.size(),<sp/>1,<sp/><ref refid="classjson11_1_1_json" kindref="compound">Json</ref>(std::map&lt;string,<sp/>string&gt;{<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;k1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;v1&quot;</highlight><highlight class="normal"><sp/>}<sp/>})},</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal">,<sp/>2,<sp/>1,<sp/>Json::object{}},</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;tst<sp/>:<sp/>tests)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string::size_type<sp/>parser_stop_pos;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>err;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>Json::parse_multi(tst.input,<sp/>parser_stop_pos,<sp/>err);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(parser_stop_pos<sp/>==<sp/>tst.expect_parser_stop_pos);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)std::count_if(res.begin(),<sp/>res.end(),</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classjson11_1_1_json" kindref="compound">Json</ref>&amp;<sp/>j)<sp/>{<sp/>return<sp/>!j.is_null();<sp/>})</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/>tst.expect_not_empty_elms_count);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!res.empty())<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(tst.expect_parse_res<sp/>==<sp/>res[0]);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classjson11_1_1_json" kindref="compound">Json</ref><sp/>my_json<sp/>=<sp/>Json::object<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;key1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;value1&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;key2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;key3&quot;</highlight><highlight class="normal">,<sp/>Json::array<sp/>{<sp/>1,<sp/>2,<sp/>3<sp/>}<sp/>},</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>json_obj_str<sp/>=<sp/>my_json.dump();</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;json_obj_str:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>json_obj_str<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(json_obj_str<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;{\&quot;key1\&quot;:<sp/>\&quot;value1\&quot;,<sp/>\&quot;key2\&quot;:<sp/>false,<sp/>\&quot;key3\&quot;:<sp/>[1,<sp/>2,<sp/>3]}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Point<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y)<sp/>:<sp/>x(x),<sp/>y(y)<sp/>{}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classjson11_1_1_json" kindref="compound">Json</ref><sp/>to_json()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Json::array<sp/>{<sp/>x,<sp/>y<sp/>};<sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Point&gt;<sp/>points<sp/>=<sp/>{<sp/>{<sp/>1,<sp/>2<sp/>},<sp/>{<sp/>10,<sp/>20<sp/>},<sp/>{<sp/>100,<sp/>200<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>points_json<sp/>=<sp/><ref refid="classjson11_1_1_json" kindref="compound">Json</ref>(points).dump();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;points_json:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>points_json<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(points_json<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;[[1,<sp/>2],<sp/>[10,<sp/>20],<sp/>[100,<sp/>200]]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(((<ref refid="classjson11_1_1_json" kindref="compound">Json</ref>)(Json::object<sp/>{<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>}<sp/>})).has_shape({<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>Json::NUL<sp/>}<sp/>},<sp/>err)<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(((<ref refid="classjson11_1_1_json" kindref="compound">Json</ref>)(Json::object<sp/>{<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>1234567<sp/>}<sp/>})).has_shape({<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>Json::NUL<sp/>}<sp/>},<sp/>err)<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>JSON11_TEST_ASSERT(((<ref refid="classjson11_1_1_json" kindref="compound">Json</ref>)(Json::object<sp/>{<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,<sp/>1234567<sp/>}<sp/>})).has_shape({<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>Json::NUL<sp/>}<sp/>},<sp/>err)<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>JSON11_TEST_STANDALONE_MAIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>parse_from_stdin()<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>buf;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>line;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(std::getline(std::cin,<sp/>line))<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf<sp/>+=<sp/>line<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>json<sp/>=<sp/>Json::parse(buf,<sp/>err);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!err.empty())<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Failed:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>err.c_str());</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Result:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>json.dump().c_str());</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argc<sp/>==<sp/>2<sp/>&amp;&amp;<sp/>argv[1]<sp/>==<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;--stdin&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parse_from_stdin();</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>json11_test();</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>JSON11_TEST_STANDALONE_MAIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Insert<sp/>user-defined<sp/>suffix<sp/>code<sp/>(function<sp/>definitions,<sp/>etc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>set<sp/>up<sp/>a<sp/>custom<sp/>test<sp/>suite</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal">JSON11_TEST_CPP_SUFFIX_CODE</highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/json11/test.cpp"/>
  </compounddef>
</doxygen>
