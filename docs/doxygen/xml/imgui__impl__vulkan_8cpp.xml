<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="imgui__impl__vulkan_8cpp" kind="file" language="C++">
    <compoundname>imgui_impl_vulkan.cpp</compoundname>
    <includes refid="imgui__impl__vulkan_8h" local="yes">imgui_impl_vulkan.h</includes>
    <includes local="no">stdio.h</includes>
    <incdepgraph>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp</label>
        <link refid="imgui__impl__vulkan_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>imgui_impl_vulkan.h</label>
        <link refid="imgui__impl__vulkan_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>imconfig.h</label>
        <link refid="imconfig_8h_source"/>
      </node>
      <node id="3">
        <label>imgui.h</label>
        <link refid="imgui_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>assert.h</label>
      </node>
      <node id="5">
        <label>float.h</label>
      </node>
      <node id="6">
        <label>stdarg.h</label>
      </node>
      <node id="7">
        <label>stddef.h</label>
      </node>
      <node id="11">
        <label>stdio.h</label>
      </node>
      <node id="8">
        <label>string.h</label>
      </node>
      <node id="10">
        <label>vulkan/vulkan.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_im_gui___impl_vulkan_h___frame_render_buffers" prot="public">ImGui_ImplVulkanH_FrameRenderBuffers</innerclass>
    <innerclass refid="struct_im_gui___impl_vulkan_h___window_render_buffers" prot="public">ImGui_ImplVulkanH_WindowRenderBuffers</innerclass>
    <innerclass refid="struct_im_gui___impl_vulkan___viewport_data" prot="public">ImGui_ImplVulkan_ViewportData</innerclass>
    <innerclass refid="struct_im_gui___impl_vulkan___data" prot="public">ImGui_ImplVulkan_Data</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="imgui__impl__vulkan_8cpp_1ac4287f95521975b3a601c07d5c14b857" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool g_FunctionsLoaded</definition>
        <argsstring></argsstring>
        <name>g_FunctionsLoaded</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="144" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="imgui__impl__vulkan_8cpp_1aa622bb812adadd89c8bcdd47890df7c5" prot="public" static="yes" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t __glsl_shader_vert_spv[]</definition>
        <argsstring>[]</argsstring>
        <name>__glsl_shader_vert_spv</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="251" column="17" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="imgui__impl__vulkan_8cpp_1a010131e3dd005be259d3f39fae403a23" prot="public" static="yes" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t __glsl_shader_frag_spv[]</definition>
        <argsstring>[]</argsstring>
        <name>__glsl_shader_frag_spv</name>
        <initializer>=
{
    0x07230203,0x00010000,0x00080001,0x0000001e,0x00000000,0x00020011,0x00000001,0x0006000b,
    0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,
    0x0007000f,0x00000004,0x00000004,0x6e69616d,0x00000000,0x00000009,0x0000000d,0x00030010,
    0x00000004,0x00000007,0x00030003,0x00000002,0x000001c2,0x00040005,0x00000004,0x6e69616d,
    0x00000000,0x00040005,0x00000009,0x6c6f4366,0x0000726f,0x00030005,0x0000000b,0x00000000,
    0x00050006,0x0000000b,0x00000000,0x6f6c6f43,0x00000072,0x00040006,0x0000000b,0x00000001,
    0x00005655,0x00030005,0x0000000d,0x00006e49,0x00050005,0x00000016,0x78655473,0x65727574,
    0x00000000,0x00040047,0x00000009,0x0000001e,0x00000000,0x00040047,0x0000000d,0x0000001e,
    0x00000000,0x00040047,0x00000016,0x00000022,0x00000000,0x00040047,0x00000016,0x00000021,
    0x00000000,0x00020013,0x00000002,0x00030021,0x00000003,0x00000002,0x00030016,0x00000006,
    0x00000020,0x00040017,0x00000007,0x00000006,0x00000004,0x00040020,0x00000008,0x00000003,
    0x00000007,0x0004003b,0x00000008,0x00000009,0x00000003,0x00040017,0x0000000a,0x00000006,
    0x00000002,0x0004001e,0x0000000b,0x00000007,0x0000000a,0x00040020,0x0000000c,0x00000001,
    0x0000000b,0x0004003b,0x0000000c,0x0000000d,0x00000001,0x00040015,0x0000000e,0x00000020,
    0x00000001,0x0004002b,0x0000000e,0x0000000f,0x00000000,0x00040020,0x00000010,0x00000001,
    0x00000007,0x00090019,0x00000013,0x00000006,0x00000001,0x00000000,0x00000000,0x00000000,
    0x00000001,0x00000000,0x0003001b,0x00000014,0x00000013,0x00040020,0x00000015,0x00000000,
    0x00000014,0x0004003b,0x00000015,0x00000016,0x00000000,0x0004002b,0x0000000e,0x00000018,
    0x00000001,0x00040020,0x00000019,0x00000001,0x0000000a,0x00050036,0x00000002,0x00000004,
    0x00000000,0x00000003,0x000200f8,0x00000005,0x00050041,0x00000010,0x00000011,0x0000000d,
    0x0000000f,0x0004003d,0x00000007,0x00000012,0x00000011,0x0004003d,0x00000014,0x00000017,
    0x00000016,0x00050041,0x00000019,0x0000001a,0x0000000d,0x00000018,0x0004003d,0x0000000a,
    0x0000001b,0x0000001a,0x00050057,0x00000007,0x0000001c,0x00000017,0x0000001b,0x00050085,
    0x00000007,0x0000001d,0x00000012,0x0000001c,0x0003003e,0x00000009,0x0000001d,0x000100fd,
    0x00010038
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="308" column="17" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="308" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1ae04f471c6a6dab69bc2992843a91ad75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ImGui_ImplVulkan_CreateDeviceObjects</definition>
        <argsstring>()</argsstring>
        <name>ImGui_ImplVulkan_CreateDeviceObjects</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="933" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="933" bodyend="1004" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" declline="129" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1a74aab8119e9e91d8932f955546dcd973" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImGui_ImplVulkan_DestroyDeviceObjects</definition>
        <argsstring>()</argsstring>
        <name>ImGui_ImplVulkan_DestroyDeviceObjects</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="1022" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="1022" bodyend="1038" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" declline="130" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1a7bdbd122b66063f3df95a0eafa5bb7dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImGui_ImplVulkanH_DestroyFrame</definition>
        <argsstring>(VkDevice device, ImGui_ImplVulkanH_Frame *fd, const VkAllocationCallbacks *allocator)</argsstring>
        <name>ImGui_ImplVulkanH_DestroyFrame</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type><ref refid="struct_im_gui___impl_vulkan_h___frame" kindref="compound">ImGui_ImplVulkanH_Frame</ref> *</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>const <ref refid="struct_vk_allocation_callbacks" kindref="compound">VkAllocationCallbacks</ref> *</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="1490" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="1490" bodyend="1501" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" declline="131" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1ae5ddca6b231ca2e88b968af9440ac206" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImGui_ImplVulkanH_DestroyFrameSemaphores</definition>
        <argsstring>(VkDevice device, ImGui_ImplVulkanH_FrameSemaphores *fsd, const VkAllocationCallbacks *allocator)</argsstring>
        <name>ImGui_ImplVulkanH_DestroyFrameSemaphores</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type><ref refid="struct_im_gui___impl_vulkan_h___frame_semaphores" kindref="compound">ImGui_ImplVulkanH_FrameSemaphores</ref> *</type>
          <declname>fsd</declname>
        </param>
        <param>
          <type>const <ref refid="struct_vk_allocation_callbacks" kindref="compound">VkAllocationCallbacks</ref> *</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="1503" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="1503" bodyend="1508" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" declline="132" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1acfc14877276e7856e05d37d8f6f3eab8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImGui_ImplVulkanH_DestroyFrameRenderBuffers</definition>
        <argsstring>(VkDevice device, ImGui_ImplVulkanH_FrameRenderBuffers *buffers, const VkAllocationCallbacks *allocator)</argsstring>
        <name>ImGui_ImplVulkanH_DestroyFrameRenderBuffers</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type><ref refid="struct_im_gui___impl_vulkan_h___frame_render_buffers" kindref="compound">ImGui_ImplVulkanH_FrameRenderBuffers</ref> *</type>
          <declname>buffers</declname>
        </param>
        <param>
          <type>const <ref refid="struct_vk_allocation_callbacks" kindref="compound">VkAllocationCallbacks</ref> *</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="1510" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="1510" bodyend="1518" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" declline="133" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1a1642edbcc3ebf28bd24366aed2696c72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImGui_ImplVulkanH_DestroyWindowRenderBuffers</definition>
        <argsstring>(VkDevice device, ImGui_ImplVulkanH_WindowRenderBuffers *buffers, const VkAllocationCallbacks *allocator)</argsstring>
        <name>ImGui_ImplVulkanH_DestroyWindowRenderBuffers</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type><ref refid="struct_im_gui___impl_vulkan_h___window_render_buffers" kindref="compound">ImGui_ImplVulkanH_WindowRenderBuffers</ref> *</type>
          <declname>buffers</declname>
        </param>
        <param>
          <type>const <ref refid="struct_vk_allocation_callbacks" kindref="compound">VkAllocationCallbacks</ref> *</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="1520" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="1520" bodyend="1528" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" declline="134" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1a9ab9ff092c01427fa4d5070da85bd4df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImGui_ImplVulkanH_DestroyAllViewportsRenderBuffers</definition>
        <argsstring>(VkDevice device, const VkAllocationCallbacks *allocator)</argsstring>
        <name>ImGui_ImplVulkanH_DestroyAllViewportsRenderBuffers</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const <ref refid="struct_vk_allocation_callbacks" kindref="compound">VkAllocationCallbacks</ref> *</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="1530" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="1530" bodyend="1536" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" declline="135" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1a56298dda09626af25de54d568b31830e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImGui_ImplVulkanH_CreateWindowSwapChain</definition>
        <argsstring>(VkPhysicalDevice physical_device, VkDevice device, ImGui_ImplVulkanH_Window *wd, const VkAllocationCallbacks *allocator, int w, int h, uint32_t min_image_count)</argsstring>
        <name>ImGui_ImplVulkanH_CreateWindowSwapChain</name>
        <param>
          <type>VkPhysicalDevice</type>
          <declname>physical_device</declname>
        </param>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type><ref refid="struct_im_gui___impl_vulkan_h___window" kindref="compound">ImGui_ImplVulkanH_Window</ref> *</type>
          <declname>wd</declname>
        </param>
        <param>
          <type>const <ref refid="struct_vk_allocation_callbacks" kindref="compound">VkAllocationCallbacks</ref> *</type>
          <declname>allocator</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>h</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>min_image_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="1291" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="1291" bodyend="1456" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" declline="136" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1a03fa20709ac538ff16a162e426240338" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImGui_ImplVulkanH_CreateWindowCommandBuffers</definition>
        <argsstring>(VkPhysicalDevice physical_device, VkDevice device, ImGui_ImplVulkanH_Window *wd, uint32_t queue_family, const VkAllocationCallbacks *allocator)</argsstring>
        <name>ImGui_ImplVulkanH_CreateWindowCommandBuffers</name>
        <param>
          <type>VkPhysicalDevice</type>
          <declname>physical_device</declname>
        </param>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type><ref refid="struct_im_gui___impl_vulkan_h___window" kindref="compound">ImGui_ImplVulkanH_Window</ref> *</type>
          <declname>wd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>queue_family</declname>
        </param>
        <param>
          <type>const <ref refid="struct_vk_allocation_callbacks" kindref="compound">VkAllocationCallbacks</ref> *</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="1231" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="1231" bodyend="1276" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" declline="137" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1aef6109f62365ad9e62961e48dbd82b1c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImGui_ImplVulkan_InitPlatformInterface</definition>
        <argsstring>()</argsstring>
        <name>ImGui_ImplVulkan_InitPlatformInterface</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="1711" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="1711" bodyend="1721" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" declline="229" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1aec0c521efd5a133209369e6da9989298" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImGui_ImplVulkan_ShutdownPlatformInterface</definition>
        <argsstring>()</argsstring>
        <name>ImGui_ImplVulkan_ShutdownPlatformInterface</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="1723" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="1723" bodyend="1726" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" declline="230" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1a0fb93ffd0b4ff71a58e6c08f654fb26d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_im_gui___impl_vulkan___data" kindref="compound">ImGui_ImplVulkan_Data</ref> *</type>
        <definition>static ImGui_ImplVulkan_Data * ImGui_ImplVulkan_GetBackendData</definition>
        <argsstring>()</argsstring>
        <name>ImGui_ImplVulkan_GetBackendData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="344" column="30" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="344" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1a9c54db778f2529f1da4faf07803de539" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t ImGui_ImplVulkan_MemoryType</definition>
        <argsstring>(VkMemoryPropertyFlags properties, uint32_t type_bits)</argsstring>
        <name>ImGui_ImplVulkan_MemoryType</name>
        <param>
          <type>VkMemoryPropertyFlags</type>
          <declname>properties</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>type_bits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="349" column="17" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="349" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1a1ea6c63eab2860beea5e3c89c1afbbc1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void check_vk_result</definition>
        <argsstring>(VkResult err)</argsstring>
        <name>check_vk_result</name>
        <param>
          <type>VkResult</type>
          <declname>err</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="361" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="361" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1a73a1987daf1552a15f239f00baa0cd51" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void CreateOrResizeBuffer</definition>
        <argsstring>(VkBuffer &amp;buffer, VkDeviceMemory &amp;buffer_memory, VkDeviceSize &amp;p_buffer_size, size_t new_size, VkBufferUsageFlagBits usage)</argsstring>
        <name>CreateOrResizeBuffer</name>
        <param>
          <type>VkBuffer &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>VkDeviceMemory &amp;</type>
          <declname>buffer_memory</declname>
        </param>
        <param>
          <type>VkDeviceSize &amp;</type>
          <declname>p_buffer_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>new_size</declname>
        </param>
        <param>
          <type>VkBufferUsageFlagBits</type>
          <declname>usage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="371" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="371" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1a1f0922864fd4ec610bf34f27c42794aa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ImGui_ImplVulkan_SetupRenderState</definition>
        <argsstring>(ImDrawData *draw_data, VkPipeline pipeline, VkCommandBuffer command_buffer, ImGui_ImplVulkanH_FrameRenderBuffers *rb, int fb_width, int fb_height)</argsstring>
        <name>ImGui_ImplVulkan_SetupRenderState</name>
        <param>
          <type><ref refid="struct_im_draw_data" kindref="compound">ImDrawData</ref> *</type>
          <declname>draw_data</declname>
        </param>
        <param>
          <type>VkPipeline</type>
          <declname>pipeline</declname>
        </param>
        <param>
          <type>VkCommandBuffer</type>
          <declname>command_buffer</declname>
        </param>
        <param>
          <type><ref refid="struct_im_gui___impl_vulkan_h___frame_render_buffers" kindref="compound">ImGui_ImplVulkanH_FrameRenderBuffers</ref> *</type>
          <declname>rb</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fb_width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fb_height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="405" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="405" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1a07d2fbf5c27393a6a107dea81fba770c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImGui_ImplVulkan_RenderDrawData</definition>
        <argsstring>(ImDrawData *draw_data, VkCommandBuffer command_buffer, VkPipeline pipeline)</argsstring>
        <name>ImGui_ImplVulkan_RenderDrawData</name>
        <param>
          <type><ref refid="struct_im_draw_data" kindref="compound">ImDrawData</ref> *</type>
          <declname>draw_data</declname>
        </param>
        <param>
          <type>VkCommandBuffer</type>
          <declname>command_buffer</declname>
        </param>
        <param>
          <type>VkPipeline</type>
          <declname>pipeline</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="452" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="452" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1a9e23e28665a8b9a1672a9ce58c5ce908" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ImGui_ImplVulkan_CreateFontsTexture</definition>
        <argsstring>(VkCommandBuffer command_buffer)</argsstring>
        <name>ImGui_ImplVulkan_CreateFontsTexture</name>
        <param>
          <type>VkCommandBuffer</type>
          <declname>command_buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="585" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="585" bodyend="736"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1a251fe37ea2531ab6c862cbda059ccff6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ImGui_ImplVulkan_CreateShaderModules</definition>
        <argsstring>(VkDevice device, const VkAllocationCallbacks *allocator)</argsstring>
        <name>ImGui_ImplVulkan_CreateShaderModules</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const <ref refid="struct_vk_allocation_callbacks" kindref="compound">VkAllocationCallbacks</ref> *</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="738" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="738" bodyend="760"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1af93458c05395eaf5f62eceebb8904c1d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ImGui_ImplVulkan_CreateFontSampler</definition>
        <argsstring>(VkDevice device, const VkAllocationCallbacks *allocator)</argsstring>
        <name>ImGui_ImplVulkan_CreateFontSampler</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const <ref refid="struct_vk_allocation_callbacks" kindref="compound">VkAllocationCallbacks</ref> *</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="762" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="762" bodyend="781"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1ab0c2434dd13fd5ec4b5fec65c900b3bd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ImGui_ImplVulkan_CreateDescriptorSetLayout</definition>
        <argsstring>(VkDevice device, const VkAllocationCallbacks *allocator)</argsstring>
        <name>ImGui_ImplVulkan_CreateDescriptorSetLayout</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const <ref refid="struct_vk_allocation_callbacks" kindref="compound">VkAllocationCallbacks</ref> *</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="783" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="783" bodyend="802"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1aa4469f7d51bd2a3e63e07633a5f6b90b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ImGui_ImplVulkan_CreatePipelineLayout</definition>
        <argsstring>(VkDevice device, const VkAllocationCallbacks *allocator)</argsstring>
        <name>ImGui_ImplVulkan_CreatePipelineLayout</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const <ref refid="struct_vk_allocation_callbacks" kindref="compound">VkAllocationCallbacks</ref> *</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="804" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="804" bodyend="825"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1ab3e8e87021019b7b7ae02b64e4526f31" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ImGui_ImplVulkan_CreatePipeline</definition>
        <argsstring>(VkDevice device, const VkAllocationCallbacks *allocator, VkPipelineCache pipelineCache, VkRenderPass renderPass, VkSampleCountFlagBits MSAASamples, VkPipeline *pipeline, uint32_t subpass)</argsstring>
        <name>ImGui_ImplVulkan_CreatePipeline</name>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const <ref refid="struct_vk_allocation_callbacks" kindref="compound">VkAllocationCallbacks</ref> *</type>
          <declname>allocator</declname>
        </param>
        <param>
          <type>VkPipelineCache</type>
          <declname>pipelineCache</declname>
        </param>
        <param>
          <type>VkRenderPass</type>
          <declname>renderPass</declname>
        </param>
        <param>
          <type>VkSampleCountFlagBits</type>
          <declname>MSAASamples</declname>
        </param>
        <param>
          <type>VkPipeline *</type>
          <declname>pipeline</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>subpass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="827" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="827" bodyend="931"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1a691e5e749ff5bcde29d2b9672598b776" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImGui_ImplVulkan_DestroyFontUploadObjects</definition>
        <argsstring>()</argsstring>
        <name>ImGui_ImplVulkan_DestroyFontUploadObjects</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="1006" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="1006" bodyend="1020"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1a99b5beb5f6d2a31b8f93974ea98394a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ImGui_ImplVulkan_LoadFunctions</definition>
        <argsstring>(PFN_vkVoidFunction(*loader_func)(const char *function_name, void *user_data), void *user_data)</argsstring>
        <name>ImGui_ImplVulkan_LoadFunctions</name>
        <param>
          <type>PFN_vkVoidFunction(*)(const char *function_name, void *user_data)</type>
          <declname>loader_func</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>user_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="1040" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="1040" bodyend="1059"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1a40db68872309c40d06827e5e5dc36741" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ImGui_ImplVulkan_Init</definition>
        <argsstring>(ImGui_ImplVulkan_InitInfo *info, VkRenderPass render_pass)</argsstring>
        <name>ImGui_ImplVulkan_Init</name>
        <param>
          <type><ref refid="struct_im_gui___impl_vulkan___init_info" kindref="compound">ImGui_ImplVulkan_InitInfo</ref> *</type>
          <declname>info</declname>
        </param>
        <param>
          <type>VkRenderPass</type>
          <declname>render_pass</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="1061" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="1061" bodyend="1098"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1a5d24b6d00ffdc460712b1966199c28a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImGui_ImplVulkan_Shutdown</definition>
        <argsstring>()</argsstring>
        <name>ImGui_ImplVulkan_Shutdown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="1100" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="1100" bodyend="1121"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1a4c03e9375aa038eb0745c802af07fb21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImGui_ImplVulkan_NewFrame</definition>
        <argsstring>()</argsstring>
        <name>ImGui_ImplVulkan_NewFrame</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="1123" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="1123" bodyend="1128"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1ae028fe3e0796e9960d9aa5119df87f4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImGui_ImplVulkan_SetMinImageCount</definition>
        <argsstring>(uint32_t min_image_count)</argsstring>
        <name>ImGui_ImplVulkan_SetMinImageCount</name>
        <param>
          <type>uint32_t</type>
          <declname>min_image_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="1130" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="1130" bodyend="1144"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1af5466b601034ad87d0478d37ac8b9e4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_vk_surface_format_k_h_r" kindref="compound">VkSurfaceFormatKHR</ref></type>
        <definition>VkSurfaceFormatKHR ImGui_ImplVulkanH_SelectSurfaceFormat</definition>
        <argsstring>(VkPhysicalDevice physical_device, VkSurfaceKHR surface, const VkFormat *request_formats, int request_formats_count, VkColorSpaceKHR request_color_space)</argsstring>
        <name>ImGui_ImplVulkanH_SelectSurfaceFormat</name>
        <param>
          <type>VkPhysicalDevice</type>
          <declname>physical_device</declname>
        </param>
        <param>
          <type>VkSurfaceKHR</type>
          <declname>surface</declname>
        </param>
        <param>
          <type>const VkFormat *</type>
          <declname>request_formats</declname>
        </param>
        <param>
          <type>int</type>
          <declname>request_formats_count</declname>
        </param>
        <param>
          <type>VkColorSpaceKHR</type>
          <declname>request_color_space</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="1163" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="1163" bodyend="1206"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1a7224bb4a6e72a8d5de8f57a5464aadac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VkPresentModeKHR</type>
        <definition>VkPresentModeKHR ImGui_ImplVulkanH_SelectPresentMode</definition>
        <argsstring>(VkPhysicalDevice physical_device, VkSurfaceKHR surface, const VkPresentModeKHR *request_modes, int request_modes_count)</argsstring>
        <name>ImGui_ImplVulkanH_SelectPresentMode</name>
        <param>
          <type>VkPhysicalDevice</type>
          <declname>physical_device</declname>
        </param>
        <param>
          <type>VkSurfaceKHR</type>
          <declname>surface</declname>
        </param>
        <param>
          <type>const VkPresentModeKHR *</type>
          <declname>request_modes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>request_modes_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="1208" column="18" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="1208" bodyend="1229"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1a766ea9561cdaf481638ee07f44801449" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ImGui_ImplVulkanH_GetMinImageCountFromPresentMode</definition>
        <argsstring>(VkPresentModeKHR present_mode)</argsstring>
        <name>ImGui_ImplVulkanH_GetMinImageCountFromPresentMode</name>
        <param>
          <type>VkPresentModeKHR</type>
          <declname>present_mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="1278" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="1278" bodyend="1288"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1a8649c8725c938c7c47ec98d2c006638f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImGui_ImplVulkanH_CreateOrResizeWindow</definition>
        <argsstring>(VkInstance instance, VkPhysicalDevice physical_device, VkDevice device, ImGui_ImplVulkanH_Window *wd, uint32_t queue_family, const VkAllocationCallbacks *allocator, int width, int height, uint32_t min_image_count)</argsstring>
        <name>ImGui_ImplVulkanH_CreateOrResizeWindow</name>
        <param>
          <type>VkInstance</type>
          <declname>instance</declname>
        </param>
        <param>
          <type>VkPhysicalDevice</type>
          <declname>physical_device</declname>
        </param>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type><ref refid="struct_im_gui___impl_vulkan_h___window" kindref="compound">ImGui_ImplVulkanH_Window</ref> *</type>
          <declname>wd</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>queue_family</declname>
        </param>
        <param>
          <type>const <ref refid="struct_vk_allocation_callbacks" kindref="compound">VkAllocationCallbacks</ref> *</type>
          <declname>allocator</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>min_image_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="1459" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="1459" bodyend="1466"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1af4d7a2987aecd23a4ea05ae341998f94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ImGui_ImplVulkanH_DestroyWindow</definition>
        <argsstring>(VkInstance instance, VkDevice device, ImGui_ImplVulkanH_Window *wd, const VkAllocationCallbacks *allocator)</argsstring>
        <name>ImGui_ImplVulkanH_DestroyWindow</name>
        <param>
          <type>VkInstance</type>
          <declname>instance</declname>
        </param>
        <param>
          <type>VkDevice</type>
          <declname>device</declname>
        </param>
        <param>
          <type><ref refid="struct_im_gui___impl_vulkan_h___window" kindref="compound">ImGui_ImplVulkanH_Window</ref> *</type>
          <declname>wd</declname>
        </param>
        <param>
          <type>const <ref refid="struct_vk_allocation_callbacks" kindref="compound">VkAllocationCallbacks</ref> *</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="1468" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="1468" bodyend="1488"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1a897054d989421a25d43c66e46ddb58f6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ImGui_ImplVulkan_CreateWindow</definition>
        <argsstring>(ImGuiViewport *viewport)</argsstring>
        <name>ImGui_ImplVulkan_CreateWindow</name>
        <param>
          <type><ref refid="struct_im_gui_viewport" kindref="compound">ImGuiViewport</ref> *</type>
          <declname>viewport</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="1544" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="1544" bodyend="1581"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1ae794935fad0d5d764179eb2e17c45d4d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ImGui_ImplVulkan_DestroyWindow</definition>
        <argsstring>(ImGuiViewport *viewport)</argsstring>
        <name>ImGui_ImplVulkan_DestroyWindow</name>
        <param>
          <type><ref refid="struct_im_gui_viewport" kindref="compound">ImGuiViewport</ref> *</type>
          <declname>viewport</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="1583" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="1583" bodyend="1596"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1ad2083e8cbc14ee620a1d8f108f1e86cb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ImGui_ImplVulkan_SetWindowSize</definition>
        <argsstring>(ImGuiViewport *viewport, ImVec2 size)</argsstring>
        <name>ImGui_ImplVulkan_SetWindowSize</name>
        <param>
          <type><ref refid="struct_im_gui_viewport" kindref="compound">ImGuiViewport</ref> *</type>
          <declname>viewport</declname>
        </param>
        <param>
          <type><ref refid="struct_im_vec2" kindref="compound">ImVec2</ref></type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="1598" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="1598" bodyend="1607"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1a80f91980503cff4d3a60ab887bd33b44" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ImGui_ImplVulkan_RenderWindow</definition>
        <argsstring>(ImGuiViewport *viewport, void *)</argsstring>
        <name>ImGui_ImplVulkan_RenderWindow</name>
        <param>
          <type><ref refid="struct_im_gui_viewport" kindref="compound">ImGuiViewport</ref> *</type>
          <declname>viewport</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="1609" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="1609" bodyend="1681"/>
      </memberdef>
      <memberdef kind="function" id="imgui__impl__vulkan_8cpp_1aeea97f0f250af1dc0fb3b5799c61d1a1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ImGui_ImplVulkan_SwapBuffers</definition>
        <argsstring>(ImGuiViewport *viewport, void *)</argsstring>
        <name>ImGui_ImplVulkan_SwapBuffers</name>
        <param>
          <type><ref refid="struct_im_gui_viewport" kindref="compound">ImGuiViewport</ref> *</type>
          <declname>viewport</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" line="1683" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp" bodystart="1683" bodyend="1709"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>dear<sp/>imgui:<sp/>Renderer<sp/>Backend<sp/>for<sp/>Vulkan</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>needs<sp/>to<sp/>be<sp/>used<sp/>along<sp/>with<sp/>a<sp/>Platform<sp/>Backend<sp/>(e.g.<sp/>GLFW,<sp/>SDL,<sp/>Win32,<sp/>custom..)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implemented<sp/>features:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>[X]<sp/>Renderer:<sp/>Support<sp/>for<sp/>large<sp/>meshes<sp/>(64k+<sp/>vertices)<sp/>with<sp/>16-bit<sp/>indices.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>[x]<sp/>Platform:<sp/>Multi-viewport<sp/>/<sp/>platform<sp/>windows.<sp/>With<sp/>issues<sp/>(flickering<sp/>when<sp/>creating<sp/>a<sp/>new<sp/>viewport).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Missing<sp/>features:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>[<sp/>]<sp/>Renderer:<sp/>User<sp/>texture<sp/>binding.<sp/>Changes<sp/>of<sp/>ImTextureID<sp/>aren&apos;t<sp/>supported<sp/>by<sp/>this<sp/>backend!<sp/>See<sp/>https://github.com/ocornut/imgui/pull/914</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>can<sp/>use<sp/>unmodified<sp/>imgui_impl_*<sp/>files<sp/>in<sp/>your<sp/>project.<sp/>See<sp/>examples/<sp/>folder<sp/>for<sp/>examples<sp/>of<sp/>using<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Prefer<sp/>including<sp/>the<sp/>entire<sp/>imgui/<sp/>repository<sp/>into<sp/>your<sp/>project<sp/>(either<sp/>as<sp/>a<sp/>copy<sp/>or<sp/>as<sp/>a<sp/>submodule),<sp/>and<sp/>only<sp/>build<sp/>the<sp/>backends<sp/>you<sp/>need.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>you<sp/>are<sp/>new<sp/>to<sp/>Dear<sp/>ImGui,<sp/>read<sp/>documentation<sp/>from<sp/>the<sp/>docs/<sp/>folder<sp/>+<sp/>read<sp/>the<sp/>top<sp/>of<sp/>imgui.cpp.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Read<sp/>online:<sp/>https://github.com/ocornut/imgui/tree/master/docs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>aim<sp/>of<sp/>imgui_impl_vulkan.h/.cpp<sp/>is<sp/>to<sp/>be<sp/>usable<sp/>in<sp/>your<sp/>engine<sp/>without<sp/>any<sp/>modification.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IF<sp/>YOU<sp/>FEEL<sp/>YOU<sp/>NEED<sp/>TO<sp/>MAKE<sp/>ANY<sp/>CHANGE<sp/>TO<sp/>THIS<sp/>CODE,<sp/>please<sp/>share<sp/>them<sp/>and<sp/>your<sp/>feedback<sp/>at<sp/>https://github.com/ocornut/imgui/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Important<sp/>note<sp/>to<sp/>the<sp/>reader<sp/>who<sp/>wish<sp/>to<sp/>integrate<sp/>imgui_impl_vulkan.cpp/.h<sp/>in<sp/>their<sp/>own<sp/>engine/app.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>Common<sp/>ImGui_ImplVulkan_XXX<sp/>functions<sp/>and<sp/>structures<sp/>are<sp/>used<sp/>to<sp/>interface<sp/>with<sp/>imgui_impl_vulkan.cpp/.h.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>You<sp/>will<sp/>use<sp/>those<sp/>if<sp/>you<sp/>want<sp/>to<sp/>use<sp/>this<sp/>rendering<sp/>backend<sp/>in<sp/>your<sp/>engine/app.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>Helper<sp/>ImGui_ImplVulkanH_XXX<sp/>functions<sp/>and<sp/>structures<sp/>are<sp/>only<sp/>used<sp/>by<sp/>this<sp/>example<sp/>(main.cpp)<sp/>and<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>the<sp/>backend<sp/>itself<sp/>(imgui_impl_vulkan.cpp),<sp/>but<sp/>should<sp/>PROBABLY<sp/>NOT<sp/>be<sp/>used<sp/>by<sp/>your<sp/>own<sp/>engine/app<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Read<sp/>comments<sp/>in<sp/>imgui_impl_vulkan.h.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CHANGELOG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(minor<sp/>and<sp/>older<sp/>changes<sp/>stripped<sp/>away,<sp/>please<sp/>see<sp/>git<sp/>history<sp/>for<sp/>details)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2022-XX-XX:<sp/>Platform:<sp/>Added<sp/>support<sp/>for<sp/>multiple<sp/>windows<sp/>via<sp/>the<sp/>ImGuiPlatformIO<sp/>interface.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2021-10-15:<sp/>Vulkan:<sp/>Call<sp/>vkCmdSetScissor()<sp/>at<sp/>the<sp/>end<sp/>of<sp/>render<sp/>a<sp/>full-viewport<sp/>to<sp/>reduce<sp/>likehood<sp/>of<sp/>issues<sp/>with<sp/>people<sp/>using<sp/>VK_DYNAMIC_STATE_SCISSOR<sp/>in<sp/>their<sp/>app<sp/>without<sp/>calling<sp/>vkCmdSetScissor()<sp/>explicitly<sp/>every<sp/>frame.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2021-06-29:<sp/>Reorganized<sp/>backend<sp/>to<sp/>pull<sp/>data<sp/>from<sp/>a<sp/>single<sp/>structure<sp/>to<sp/>facilitate<sp/>usage<sp/>with<sp/>multiple-contexts<sp/>(all<sp/>g_XXXX<sp/>access<sp/>changed<sp/>to<sp/>bd-&gt;XXXX).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2021-03-22:<sp/>Vulkan:<sp/>Fix<sp/>mapped<sp/>memory<sp/>validation<sp/>error<sp/>when<sp/>buffer<sp/>sizes<sp/>are<sp/>not<sp/>multiple<sp/>of<sp/>VkPhysicalDeviceLimits::nonCoherentAtomSize.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2021-02-18:<sp/>Vulkan:<sp/>Change<sp/>blending<sp/>equation<sp/>to<sp/>preserve<sp/>alpha<sp/>in<sp/>output<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2021-01-27:<sp/>Vulkan:<sp/>Added<sp/>support<sp/>for<sp/>custom<sp/>function<sp/>load<sp/>and<sp/>IMGUI_IMPL_VULKAN_NO_PROTOTYPES<sp/>by<sp/>using<sp/>ImGui_ImplVulkan_LoadFunctions().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2020-11-11:<sp/>Vulkan:<sp/>Added<sp/>support<sp/>for<sp/>specifying<sp/>which<sp/>subpass<sp/>to<sp/>reference<sp/>during<sp/>VkPipeline<sp/>creation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2020-09-07:<sp/>Vulkan:<sp/>Added<sp/>VkPipeline<sp/>parameter<sp/>to<sp/>ImGui_ImplVulkan_RenderDrawData<sp/>(default<sp/>to<sp/>one<sp/>passed<sp/>to<sp/>ImGui_ImplVulkan_Init).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2020-05-04:<sp/>Vulkan:<sp/>Fixed<sp/>crash<sp/>if<sp/>initial<sp/>frame<sp/>has<sp/>no<sp/>vertices.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2020-04-26:<sp/>Vulkan:<sp/>Fixed<sp/>edge<sp/>case<sp/>where<sp/>render<sp/>callbacks<sp/>wouldn&apos;t<sp/>be<sp/>called<sp/>if<sp/>the<sp/>ImDrawData<sp/>didn&apos;t<sp/>have<sp/>vertices.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2019-08-01:<sp/>Vulkan:<sp/>Added<sp/>support<sp/>for<sp/>specifying<sp/>multisample<sp/>count.<sp/>Set<sp/>ImGui_ImplVulkan_InitInfo::MSAASamples<sp/>to<sp/>one<sp/>of<sp/>the<sp/>VkSampleCountFlagBits<sp/>values<sp/>to<sp/>use,<sp/>default<sp/>is<sp/>non-multisampled<sp/>as<sp/>before.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2019-05-29:<sp/>Vulkan:<sp/>Added<sp/>support<sp/>for<sp/>large<sp/>mesh<sp/>(64K+<sp/>vertices),<sp/>enable<sp/>ImGuiBackendFlags_RendererHasVtxOffset<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2019-04-30:<sp/>Vulkan:<sp/>Added<sp/>support<sp/>for<sp/>special<sp/>ImDrawCallback_ResetRenderState<sp/>callback<sp/>to<sp/>reset<sp/>render<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2019-04-04:<sp/>*BREAKING<sp/>CHANGE*:<sp/>Vulkan:<sp/>Added<sp/>ImageCount/MinImageCount<sp/>fields<sp/>in<sp/>ImGui_ImplVulkan_InitInfo,<sp/>required<sp/>for<sp/>initialization<sp/>(was<sp/>previously<sp/>a<sp/>hard<sp/>#define<sp/>IMGUI_VK_QUEUED_FRAMES<sp/>2).<sp/>Added<sp/>ImGui_ImplVulkan_SetMinImageCount().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2019-04-04:<sp/>Vulkan:<sp/>Added<sp/>VkInstance<sp/>argument<sp/>to<sp/>ImGui_ImplVulkanH_CreateWindow()<sp/>optional<sp/>helper.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2019-04-04:<sp/>Vulkan:<sp/>Avoid<sp/>passing<sp/>negative<sp/>coordinates<sp/>to<sp/>vkCmdSetScissor,<sp/>which<sp/>debug<sp/>validation<sp/>layers<sp/>do<sp/>not<sp/>like.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2019-04-01:<sp/>Vulkan:<sp/>Support<sp/>for<sp/>32-bit<sp/>index<sp/>buffer<sp/>(#define<sp/>ImDrawIdx<sp/>unsigned<sp/>int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2019-02-16:<sp/>Vulkan:<sp/>Viewport<sp/>and<sp/>clipping<sp/>rectangles<sp/>correctly<sp/>using<sp/>draw_data-&gt;FramebufferScale<sp/>to<sp/>allow<sp/>retina<sp/>display.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2018-11-30:<sp/>Misc:<sp/>Setting<sp/>up<sp/>io.BackendRendererName<sp/>so<sp/>it<sp/>can<sp/>be<sp/>displayed<sp/>in<sp/>the<sp/>About<sp/>Window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2018-08-25:<sp/>Vulkan:<sp/>Fixed<sp/>mishandled<sp/>VkSurfaceCapabilitiesKHR::maxImageCount=0<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2018-06-22:<sp/>Inverted<sp/>the<sp/>parameters<sp/>to<sp/>ImGui_ImplVulkan_RenderDrawData()<sp/>to<sp/>be<sp/>consistent<sp/>with<sp/>other<sp/>backends.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2018-06-08:<sp/>Misc:<sp/>Extracted<sp/>imgui_impl_vulkan.cpp/.h<sp/>away<sp/>from<sp/>the<sp/>old<sp/>combined<sp/>GLFW+Vulkan<sp/>example.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2018-06-08:<sp/>Vulkan:<sp/>Use<sp/>draw_data-&gt;DisplayPos<sp/>and<sp/>draw_data-&gt;DisplaySize<sp/>to<sp/>setup<sp/>projection<sp/>matrix<sp/>and<sp/>clipping<sp/>rectangle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2018-03-03:<sp/>Vulkan:<sp/>Various<sp/>refactor,<sp/>created<sp/>a<sp/>couple<sp/>of<sp/>ImGui_ImplVulkanH_XXX<sp/>helper<sp/>that<sp/>the<sp/>example<sp/>can<sp/>use<sp/>and<sp/>that<sp/>viewport<sp/>support<sp/>will<sp/>use.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2018-03-01:<sp/>Vulkan:<sp/>Renamed<sp/>ImGui_ImplVulkan_Init_Info<sp/>to<sp/>ImGui_ImplVulkan_InitInfo<sp/>and<sp/>fields<sp/>to<sp/>match<sp/>more<sp/>closely<sp/>Vulkan<sp/>terminology.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2018-02-16:<sp/>Misc:<sp/>Obsoleted<sp/>the<sp/>io.RenderDrawListsFn<sp/>callback,<sp/>ImGui_ImplVulkan_Render()<sp/>calls<sp/>ImGui_ImplVulkan_RenderDrawData()<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2018-02-06:<sp/>Misc:<sp/>Removed<sp/>call<sp/>to<sp/>ImGui::Shutdown()<sp/>which<sp/>is<sp/>not<sp/>available<sp/>from<sp/>1.60<sp/>WIP,<sp/>user<sp/>needs<sp/>to<sp/>call<sp/>CreateContext/DestroyContext<sp/>themselves.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2017-05-15:<sp/>Vulkan:<sp/>Fix<sp/>scissor<sp/>offset<sp/>being<sp/>negative.<sp/>Fix<sp/>new<sp/>Vulkan<sp/>validation<sp/>warnings.<sp/>Set<sp/>required<sp/>depth<sp/>member<sp/>for<sp/>buffer<sp/>image<sp/>copy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2016-11-13:<sp/>Vulkan:<sp/>Fix<sp/>validation<sp/>layer<sp/>warnings<sp/>and<sp/>errors<sp/>and<sp/>redeclare<sp/>gl_PerVertex.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2016-10-18:<sp/>Vulkan:<sp/>Add<sp/>location<sp/>decorators<sp/>&amp;<sp/>change<sp/>to<sp/>use<sp/>structs<sp/>as<sp/>in/out<sp/>in<sp/>glsl,<sp/>update<sp/>embedded<sp/>spv<sp/>(produced<sp/>with<sp/>glslangValidator<sp/>-x).<sp/>Null<sp/>the<sp/>released<sp/>resources.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>2016-08-27:<sp/>Vulkan:<sp/>Fix<sp/>Vulkan<sp/>example<sp/>for<sp/>use<sp/>when<sp/>a<sp/>depth<sp/>buffer<sp/>is<sp/>active.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;imgui_impl_vulkan.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reusable<sp/>buffers<sp/>used<sp/>for<sp/>rendering<sp/>1<sp/>current<sp/>in-flight<sp/>frame,<sp/>for<sp/>ImGui_ImplVulkan_RenderDrawData()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Please<sp/>zero-clear<sp/>before<sp/>use!]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="struct_im_gui___impl_vulkan_h___frame_render_buffers" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_im_gui___impl_vulkan_h___frame_render_buffers" kindref="compound">ImGui_ImplVulkanH_FrameRenderBuffers</ref></highlight></codeline>
<codeline lineno="65"><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDeviceMemory<sp/><sp/><sp/><sp/><sp/><sp/>VertexBufferMemory;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDeviceMemory<sp/><sp/><sp/><sp/><sp/><sp/>IndexBufferMemory;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDeviceSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VertexBufferSize;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDeviceSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IndexBufferSize;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>VkBuffer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VertexBuffer;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>VkBuffer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IndexBuffer;</highlight></codeline>
<codeline lineno="72"><highlight class="normal">};</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Each<sp/>viewport<sp/>will<sp/>hold<sp/>1<sp/>ImGui_ImplVulkanH_WindowRenderBuffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Please<sp/>zero-clear<sp/>before<sp/>use!]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="struct_im_gui___impl_vulkan_h___window_render_buffers" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_im_gui___impl_vulkan_h___window_render_buffers" kindref="compound">ImGui_ImplVulkanH_WindowRenderBuffers</ref></highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Index;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Count;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan_h___frame_render_buffers" kindref="compound">ImGui_ImplVulkanH_FrameRenderBuffers</ref>*<sp/><sp/><sp/>FrameRenderBuffers;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">};</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>multi-viewport<sp/>support:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>structure<sp/>we<sp/>store<sp/>in<sp/>the<sp/>void*<sp/>RenderUserData<sp/>field<sp/>of<sp/>each<sp/>ImGuiViewport<sp/>to<sp/>easily<sp/>retrieve<sp/>our<sp/>backend<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="struct_im_gui___impl_vulkan___viewport_data" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_im_gui___impl_vulkan___viewport_data" kindref="compound">ImGui_ImplVulkan_ViewportData</ref></highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WindowOwned;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan_h___window" kindref="compound">ImGui_ImplVulkanH_Window</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Window;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Used<sp/>by<sp/>secondary<sp/>viewports<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan_h___window_render_buffers" kindref="compound">ImGui_ImplVulkanH_WindowRenderBuffers</ref><sp/><sp/><sp/>RenderBuffers;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Used<sp/>by<sp/>all<sp/>viewports</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___viewport_data" kindref="compound">ImGui_ImplVulkan_ViewportData</ref>()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>WindowOwned<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>memset(&amp;RenderBuffers,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(RenderBuffers));<sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___viewport_data" kindref="compound">~ImGui_ImplVulkan_ViewportData</ref>()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal">};</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Vulkan<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="struct_im_gui___impl_vulkan___data" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_im_gui___impl_vulkan___data" kindref="compound">ImGui_ImplVulkan_Data</ref></highlight></codeline>
<codeline lineno="97"><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___init_info" kindref="compound">ImGui_ImplVulkan_InitInfo</ref><sp/><sp/><sp/>VulkanInitInfo;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>VkRenderPass<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RenderPass;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDeviceSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BufferMemoryAlignment;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineCreateFlags<sp/><sp/><sp/><sp/><sp/><sp/><sp/>PipelineCreateFlags;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorSetLayout<sp/><sp/><sp/><sp/><sp/><sp/><sp/>DescriptorSetLayout;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipelineLayout<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PipelineLayout;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorSet<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DescriptorSet;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPipeline<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pipeline;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Subpass;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>VkShaderModule<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ShaderModuleVert;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>VkShaderModule<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ShaderModuleFrag;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Font<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSampler<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FontSampler;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDeviceMemory<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FontMemory;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImage<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FontImage;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>VkImageView<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FontView;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDeviceMemory<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UploadBufferMemory;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>VkBuffer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UploadBuffer;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Render<sp/>buffers<sp/>for<sp/>main<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan_h___window_render_buffers" kindref="compound">ImGui_ImplVulkanH_WindowRenderBuffers</ref><sp/>MainWindowRenderBuffers;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___data" kindref="compound">ImGui_ImplVulkan_Data</ref>()</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BufferMemoryAlignment<sp/>=<sp/>256;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal">};</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Forward<sp/>Declarations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ImGui_ImplVulkan_CreateDeviceObjects();</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplVulkan_DestroyDeviceObjects();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplVulkanH_DestroyFrame(VkDevice<sp/>device,<sp/><ref refid="struct_im_gui___impl_vulkan_h___frame" kindref="compound">ImGui_ImplVulkanH_Frame</ref>*<sp/>fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_allocation_callbacks" kindref="compound">VkAllocationCallbacks</ref>*<sp/>allocator);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplVulkanH_DestroyFrameSemaphores(VkDevice<sp/>device,<sp/><ref refid="struct_im_gui___impl_vulkan_h___frame_semaphores" kindref="compound">ImGui_ImplVulkanH_FrameSemaphores</ref>*<sp/>fsd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_allocation_callbacks" kindref="compound">VkAllocationCallbacks</ref>*<sp/>allocator);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplVulkanH_DestroyFrameRenderBuffers(VkDevice<sp/>device,<sp/><ref refid="struct_im_gui___impl_vulkan_h___frame_render_buffers" kindref="compound">ImGui_ImplVulkanH_FrameRenderBuffers</ref>*<sp/>buffers,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_allocation_callbacks" kindref="compound">VkAllocationCallbacks</ref>*<sp/>allocator);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplVulkanH_DestroyWindowRenderBuffers(VkDevice<sp/>device,<sp/><ref refid="struct_im_gui___impl_vulkan_h___window_render_buffers" kindref="compound">ImGui_ImplVulkanH_WindowRenderBuffers</ref>*<sp/>buffers,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_allocation_callbacks" kindref="compound">VkAllocationCallbacks</ref>*<sp/>allocator);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplVulkanH_DestroyAllViewportsRenderBuffers(VkDevice<sp/>device,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_allocation_callbacks" kindref="compound">VkAllocationCallbacks</ref>*<sp/>allocator);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplVulkanH_CreateWindowSwapChain(VkPhysicalDevice<sp/>physical_device,<sp/>VkDevice<sp/>device,<sp/><ref refid="struct_im_gui___impl_vulkan_h___window" kindref="compound">ImGui_ImplVulkanH_Window</ref>*<sp/>wd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_allocation_callbacks" kindref="compound">VkAllocationCallbacks</ref>*<sp/>allocator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/>uint32_t<sp/>min_image_count);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplVulkanH_CreateWindowCommandBuffers(VkPhysicalDevice<sp/>physical_device,<sp/>VkDevice<sp/>device,<sp/><ref refid="struct_im_gui___impl_vulkan_h___window" kindref="compound">ImGui_ImplVulkanH_Window</ref>*<sp/>wd,<sp/>uint32_t<sp/>queue_family,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_allocation_callbacks" kindref="compound">VkAllocationCallbacks</ref>*<sp/>allocator);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Vulkan<sp/>prototypes<sp/>for<sp/>use<sp/>with<sp/>custom<sp/>loaders</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(see<sp/>description<sp/>of<sp/>IMGUI_IMPL_VULKAN_NO_PROTOTYPES<sp/>in<sp/>imgui_impl_vulkan.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VK_NO_PROTOTYPES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>g_FunctionsLoaded<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>g_FunctionsLoaded<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VK_NO_PROTOTYPES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMGUI_VULKAN_FUNC_MAP(IMGUI_VULKAN_FUNC_MAP_MACRO)<sp/>\</highlight></codeline>
<codeline lineno="148"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkAllocateCommandBuffers)<sp/>\</highlight></codeline>
<codeline lineno="149"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkAllocateDescriptorSets)<sp/>\</highlight></codeline>
<codeline lineno="150"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkAllocateMemory)<sp/>\</highlight></codeline>
<codeline lineno="151"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkBindBufferMemory)<sp/>\</highlight></codeline>
<codeline lineno="152"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkBindImageMemory)<sp/>\</highlight></codeline>
<codeline lineno="153"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkCmdBindDescriptorSets)<sp/>\</highlight></codeline>
<codeline lineno="154"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkCmdBindIndexBuffer)<sp/>\</highlight></codeline>
<codeline lineno="155"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkCmdBindPipeline)<sp/>\</highlight></codeline>
<codeline lineno="156"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkCmdBindVertexBuffers)<sp/>\</highlight></codeline>
<codeline lineno="157"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkCmdCopyBufferToImage)<sp/>\</highlight></codeline>
<codeline lineno="158"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkCmdDrawIndexed)<sp/>\</highlight></codeline>
<codeline lineno="159"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkCmdPipelineBarrier)<sp/>\</highlight></codeline>
<codeline lineno="160"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkCmdPushConstants)<sp/>\</highlight></codeline>
<codeline lineno="161"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkCmdSetScissor)<sp/>\</highlight></codeline>
<codeline lineno="162"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkCmdSetViewport)<sp/>\</highlight></codeline>
<codeline lineno="163"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkCreateBuffer)<sp/>\</highlight></codeline>
<codeline lineno="164"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkCreateCommandPool)<sp/>\</highlight></codeline>
<codeline lineno="165"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkCreateDescriptorSetLayout)<sp/>\</highlight></codeline>
<codeline lineno="166"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkCreateFence)<sp/>\</highlight></codeline>
<codeline lineno="167"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkCreateFramebuffer)<sp/>\</highlight></codeline>
<codeline lineno="168"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkCreateGraphicsPipelines)<sp/>\</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkCreateImage)<sp/>\</highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkCreateImageView)<sp/>\</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkCreatePipelineLayout)<sp/>\</highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkCreateRenderPass)<sp/>\</highlight></codeline>
<codeline lineno="173"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkCreateSampler)<sp/>\</highlight></codeline>
<codeline lineno="174"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkCreateSemaphore)<sp/>\</highlight></codeline>
<codeline lineno="175"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkCreateShaderModule)<sp/>\</highlight></codeline>
<codeline lineno="176"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkCreateSwapchainKHR)<sp/>\</highlight></codeline>
<codeline lineno="177"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkDestroyBuffer)<sp/>\</highlight></codeline>
<codeline lineno="178"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkDestroyCommandPool)<sp/>\</highlight></codeline>
<codeline lineno="179"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkDestroyDescriptorSetLayout)<sp/>\</highlight></codeline>
<codeline lineno="180"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkDestroyFence)<sp/>\</highlight></codeline>
<codeline lineno="181"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkDestroyFramebuffer)<sp/>\</highlight></codeline>
<codeline lineno="182"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkDestroyImage)<sp/>\</highlight></codeline>
<codeline lineno="183"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkDestroyImageView)<sp/>\</highlight></codeline>
<codeline lineno="184"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkDestroyPipeline)<sp/>\</highlight></codeline>
<codeline lineno="185"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkDestroyPipelineLayout)<sp/>\</highlight></codeline>
<codeline lineno="186"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkDestroyRenderPass)<sp/>\</highlight></codeline>
<codeline lineno="187"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkDestroySampler)<sp/>\</highlight></codeline>
<codeline lineno="188"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkDestroySemaphore)<sp/>\</highlight></codeline>
<codeline lineno="189"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkDestroyShaderModule)<sp/>\</highlight></codeline>
<codeline lineno="190"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkDestroySurfaceKHR)<sp/>\</highlight></codeline>
<codeline lineno="191"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkDestroySwapchainKHR)<sp/>\</highlight></codeline>
<codeline lineno="192"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkDeviceWaitIdle)<sp/>\</highlight></codeline>
<codeline lineno="193"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkFlushMappedMemoryRanges)<sp/>\</highlight></codeline>
<codeline lineno="194"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkFreeCommandBuffers)<sp/>\</highlight></codeline>
<codeline lineno="195"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkFreeMemory)<sp/>\</highlight></codeline>
<codeline lineno="196"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkGetBufferMemoryRequirements)<sp/>\</highlight></codeline>
<codeline lineno="197"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkGetImageMemoryRequirements)<sp/>\</highlight></codeline>
<codeline lineno="198"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkGetPhysicalDeviceMemoryProperties)<sp/>\</highlight></codeline>
<codeline lineno="199"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkGetPhysicalDeviceSurfaceCapabilitiesKHR)<sp/>\</highlight></codeline>
<codeline lineno="200"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkGetPhysicalDeviceSurfaceFormatsKHR)<sp/>\</highlight></codeline>
<codeline lineno="201"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkGetPhysicalDeviceSurfacePresentModesKHR)<sp/>\</highlight></codeline>
<codeline lineno="202"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkGetSwapchainImagesKHR)<sp/>\</highlight></codeline>
<codeline lineno="203"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkMapMemory)<sp/>\</highlight></codeline>
<codeline lineno="204"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkUnmapMemory)<sp/>\</highlight></codeline>
<codeline lineno="205"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkUpdateDescriptorSets)<sp/>\</highlight></codeline>
<codeline lineno="206"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkGetPhysicalDeviceSurfaceSupportKHR)<sp/>\</highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkWaitForFences)<sp/>\</highlight></codeline>
<codeline lineno="208"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkCmdBeginRenderPass)<sp/>\</highlight></codeline>
<codeline lineno="209"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkCmdEndRenderPass)<sp/>\</highlight></codeline>
<codeline lineno="210"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkQueuePresentKHR)<sp/>\</highlight></codeline>
<codeline lineno="211"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkBeginCommandBuffer)<sp/>\</highlight></codeline>
<codeline lineno="212"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkEndCommandBuffer)<sp/>\</highlight></codeline>
<codeline lineno="213"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkResetFences)<sp/>\</highlight></codeline>
<codeline lineno="214"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkQueueSubmit)<sp/>\</highlight></codeline>
<codeline lineno="215"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkResetCommandPool)<sp/>\</highlight></codeline>
<codeline lineno="216"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP_MACRO(vkAcquireNextImageKHR)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>function<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMGUI_VULKAN_FUNC_DEF(func)<sp/>static<sp/>PFN_##func<sp/>func;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal">IMGUI_VULKAN_FUNC_MAP(IMGUI_VULKAN_FUNC_DEF)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>IMGUI_VULKAN_FUNC_DEF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>VK_NO_PROTOTYPES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SHADERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Forward<sp/>Declarations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplVulkan_InitPlatformInterface();</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplVulkan_ShutdownPlatformInterface();</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">//<sp/>glsl_shader.vert,<sp/>compiled<sp/>with:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#<sp/>glslangValidator<sp/>-V<sp/>-x<sp/>-o<sp/>glsl_shader.vert.u32<sp/>glsl_shader.vert</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="235"><highlight class="comment">#version<sp/>450<sp/>core</highlight></codeline>
<codeline lineno="236"><highlight class="comment">layout(location<sp/>=<sp/>0)<sp/>in<sp/>vec2<sp/>aPos;</highlight></codeline>
<codeline lineno="237"><highlight class="comment">layout(location<sp/>=<sp/>1)<sp/>in<sp/>vec2<sp/>aUV;</highlight></codeline>
<codeline lineno="238"><highlight class="comment">layout(location<sp/>=<sp/>2)<sp/>in<sp/>vec4<sp/>aColor;</highlight></codeline>
<codeline lineno="239"><highlight class="comment">layout(push_constant)<sp/>uniform<sp/>uPushConstant<sp/>{<sp/>vec2<sp/>uScale;<sp/>vec2<sp/>uTranslate;<sp/>}<sp/>pc;</highlight></codeline>
<codeline lineno="240"><highlight class="comment"></highlight></codeline>
<codeline lineno="241"><highlight class="comment">out<sp/>gl_PerVertex<sp/>{<sp/>vec4<sp/>gl_Position;<sp/>};</highlight></codeline>
<codeline lineno="242"><highlight class="comment">layout(location<sp/>=<sp/>0)<sp/>out<sp/>struct<sp/>{<sp/>vec4<sp/>Color;<sp/>vec2<sp/>UV;<sp/>}<sp/>Out;</highlight></codeline>
<codeline lineno="243"><highlight class="comment"></highlight></codeline>
<codeline lineno="244"><highlight class="comment">void<sp/>main()</highlight></codeline>
<codeline lineno="245"><highlight class="comment">{</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/><sp/><sp/>Out.Color<sp/>=<sp/>aColor;</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/><sp/><sp/><sp/>Out.UV<sp/>=<sp/>aUV;</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/><sp/><sp/><sp/>gl_Position<sp/>=<sp/>vec4(aPos<sp/>*<sp/>pc.uScale<sp/>+<sp/>pc.uTranslate,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="249"><highlight class="comment">}</highlight></codeline>
<codeline lineno="250"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>__glsl_shader_vert_spv[]<sp/>=</highlight></codeline>
<codeline lineno="252"><highlight class="normal">{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>0x07230203,0x00010000,0x00080001,0x0000002e,0x00000000,0x00020011,0x00000001,0x0006000b,</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>0x000a000f,0x00000000,0x00000004,0x6e69616d,0x00000000,0x0000000b,0x0000000f,0x00000015,</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>0x0000001b,0x0000001c,0x00030003,0x00000002,0x000001c2,0x00040005,0x00000004,0x6e69616d,</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000000,0x00030005,0x00000009,0x00000000,0x00050006,0x00000009,0x00000000,0x6f6c6f43,</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000072,0x00040006,0x00000009,0x00000001,0x00005655,0x00030005,0x0000000b,0x0074754f,</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00040005,0x0000000f,0x6c6f4361,0x0000726f,0x00030005,0x00000015,0x00565561,0x00060005,</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000019,0x505f6c67,0x65567265,0x78657472,0x00000000,0x00060006,0x00000019,0x00000000,</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>0x505f6c67,0x7469736f,0x006e6f69,0x00030005,0x0000001b,0x00000000,0x00040005,0x0000001c,</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>0x736f5061,0x00000000,0x00060005,0x0000001e,0x73755075,0x6e6f4368,0x6e617473,0x00000074,</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00050006,0x0000001e,0x00000000,0x61635375,0x0000656c,0x00060006,0x0000001e,0x00000001,</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>0x61725475,0x616c736e,0x00006574,0x00030005,0x00000020,0x00006370,0x00040047,0x0000000b,</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>0x0000001e,0x00000000,0x00040047,0x0000000f,0x0000001e,0x00000002,0x00040047,0x00000015,</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>0x0000001e,0x00000001,0x00050048,0x00000019,0x00000000,0x0000000b,0x00000000,0x00030047,</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000019,0x00000002,0x00040047,0x0000001c,0x0000001e,0x00000000,0x00050048,0x0000001e,</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000000,0x00000023,0x00000000,0x00050048,0x0000001e,0x00000001,0x00000023,0x00000008,</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00030047,0x0000001e,0x00000002,0x00020013,0x00000002,0x00030021,0x00000003,0x00000002,</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00030016,0x00000006,0x00000020,0x00040017,0x00000007,0x00000006,0x00000004,0x00040017,</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000008,0x00000006,0x00000002,0x0004001e,0x00000009,0x00000007,0x00000008,0x00040020,</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>0x0000000a,0x00000003,0x00000009,0x0004003b,0x0000000a,0x0000000b,0x00000003,0x00040015,</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>0x0000000c,0x00000020,0x00000001,0x0004002b,0x0000000c,0x0000000d,0x00000000,0x00040020,</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>0x0000000e,0x00000001,0x00000007,0x0004003b,0x0000000e,0x0000000f,0x00000001,0x00040020,</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000011,0x00000003,0x00000007,0x0004002b,0x0000000c,0x00000013,0x00000001,0x00040020,</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000014,0x00000001,0x00000008,0x0004003b,0x00000014,0x00000015,0x00000001,0x00040020,</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000017,0x00000003,0x00000008,0x0003001e,0x00000019,0x00000007,0x00040020,0x0000001a,</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000003,0x00000019,0x0004003b,0x0000001a,0x0000001b,0x00000003,0x0004003b,0x00000014,</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>0x0000001c,0x00000001,0x0004001e,0x0000001e,0x00000008,0x00000008,0x00040020,0x0000001f,</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000009,0x0000001e,0x0004003b,0x0000001f,0x00000020,0x00000009,0x00040020,0x00000021,</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000009,0x00000008,0x0004002b,0x00000006,0x00000028,0x00000000,0x0004002b,0x00000006,</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000029,0x3f800000,0x00050036,0x00000002,0x00000004,0x00000000,0x00000003,0x000200f8,</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000005,0x0004003d,0x00000007,0x00000010,0x0000000f,0x00050041,0x00000011,0x00000012,</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>0x0000000b,0x0000000d,0x0003003e,0x00000012,0x00000010,0x0004003d,0x00000008,0x00000016,</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000015,0x00050041,0x00000017,0x00000018,0x0000000b,0x00000013,0x0003003e,0x00000018,</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000016,0x0004003d,0x00000008,0x0000001d,0x0000001c,0x00050041,0x00000021,0x00000022,</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000020,0x0000000d,0x0004003d,0x00000008,0x00000023,0x00000022,0x00050085,0x00000008,</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000024,0x0000001d,0x00000023,0x00050041,0x00000021,0x00000025,0x00000020,0x00000013,</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>0x0004003d,0x00000008,0x00000026,0x00000025,0x00050081,0x00000008,0x00000027,0x00000024,</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000026,0x00050051,0x00000006,0x0000002a,0x00000027,0x00000000,0x00050051,0x00000006,</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>0x0000002b,0x00000027,0x00000001,0x00070050,0x00000007,0x0000002c,0x0000002a,0x0000002b,</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000028,0x00000029,0x00050041,0x00000011,0x0000002d,0x0000001b,0x0000000d,0x0003003e,</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>0x0000002d,0x0000002c,0x000100fd,0x00010038</highlight></codeline>
<codeline lineno="294"><highlight class="normal">};</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="comment">//<sp/>glsl_shader.frag,<sp/>compiled<sp/>with:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#<sp/>glslangValidator<sp/>-V<sp/>-x<sp/>-o<sp/>glsl_shader.frag.u32<sp/>glsl_shader.frag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="299"><highlight class="comment">#version<sp/>450<sp/>core</highlight></codeline>
<codeline lineno="300"><highlight class="comment">layout(location<sp/>=<sp/>0)<sp/>out<sp/>vec4<sp/>fColor;</highlight></codeline>
<codeline lineno="301"><highlight class="comment">layout(set=0,<sp/>binding=0)<sp/>uniform<sp/>sampler2D<sp/>sTexture;</highlight></codeline>
<codeline lineno="302"><highlight class="comment">layout(location<sp/>=<sp/>0)<sp/>in<sp/>struct<sp/>{<sp/>vec4<sp/>Color;<sp/>vec2<sp/>UV;<sp/>}<sp/>In;</highlight></codeline>
<codeline lineno="303"><highlight class="comment">void<sp/>main()</highlight></codeline>
<codeline lineno="304"><highlight class="comment">{</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/><sp/><sp/><sp/>fColor<sp/>=<sp/>In.Color<sp/>*<sp/>texture(sTexture,<sp/>In.UV.st);</highlight></codeline>
<codeline lineno="306"><highlight class="comment">}</highlight></codeline>
<codeline lineno="307"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>__glsl_shader_frag_spv[]<sp/>=</highlight></codeline>
<codeline lineno="309"><highlight class="normal">{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>0x07230203,0x00010000,0x00080001,0x0000001e,0x00000000,0x00020011,0x00000001,0x0006000b,</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000001,0x4c534c47,0x6474732e,0x3035342e,0x00000000,0x0003000e,0x00000000,0x00000001,</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>0x0007000f,0x00000004,0x00000004,0x6e69616d,0x00000000,0x00000009,0x0000000d,0x00030010,</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000004,0x00000007,0x00030003,0x00000002,0x000001c2,0x00040005,0x00000004,0x6e69616d,</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000000,0x00040005,0x00000009,0x6c6f4366,0x0000726f,0x00030005,0x0000000b,0x00000000,</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00050006,0x0000000b,0x00000000,0x6f6c6f43,0x00000072,0x00040006,0x0000000b,0x00000001,</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00005655,0x00030005,0x0000000d,0x00006e49,0x00050005,0x00000016,0x78655473,0x65727574,</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000000,0x00040047,0x00000009,0x0000001e,0x00000000,0x00040047,0x0000000d,0x0000001e,</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000000,0x00040047,0x00000016,0x00000022,0x00000000,0x00040047,0x00000016,0x00000021,</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000000,0x00020013,0x00000002,0x00030021,0x00000003,0x00000002,0x00030016,0x00000006,</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000020,0x00040017,0x00000007,0x00000006,0x00000004,0x00040020,0x00000008,0x00000003,</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000007,0x0004003b,0x00000008,0x00000009,0x00000003,0x00040017,0x0000000a,0x00000006,</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000002,0x0004001e,0x0000000b,0x00000007,0x0000000a,0x00040020,0x0000000c,0x00000001,</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>0x0000000b,0x0004003b,0x0000000c,0x0000000d,0x00000001,0x00040015,0x0000000e,0x00000020,</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000001,0x0004002b,0x0000000e,0x0000000f,0x00000000,0x00040020,0x00000010,0x00000001,</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000007,0x00090019,0x00000013,0x00000006,0x00000001,0x00000000,0x00000000,0x00000000,</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000001,0x00000000,0x0003001b,0x00000014,0x00000013,0x00040020,0x00000015,0x00000000,</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000014,0x0004003b,0x00000015,0x00000016,0x00000000,0x0004002b,0x0000000e,0x00000018,</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000001,0x00040020,0x00000019,0x00000001,0x0000000a,0x00050036,0x00000002,0x00000004,</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000000,0x00000003,0x000200f8,0x00000005,0x00050041,0x00000010,0x00000011,0x0000000d,</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>0x0000000f,0x0004003d,0x00000007,0x00000012,0x00000011,0x0004003d,0x00000014,0x00000017,</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000016,0x00050041,0x00000019,0x0000001a,0x0000000d,0x00000018,0x0004003d,0x0000000a,</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>0x0000001b,0x0000001a,0x00050057,0x00000007,0x0000001c,0x00000017,0x0000001b,0x00050085,</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00000007,0x0000001d,0x00000012,0x0000001c,0x0003003e,0x00000009,0x0000001d,0x000100fd,</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>0x00010038</highlight></codeline>
<codeline lineno="335"><highlight class="normal">};</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FUNCTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Backend<sp/>data<sp/>stored<sp/>in<sp/>io.BackendRendererUserData<sp/>to<sp/>allow<sp/>support<sp/>for<sp/>multiple<sp/>Dear<sp/>ImGui<sp/>contexts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>STRONGLY<sp/>preferred<sp/>that<sp/>you<sp/>use<sp/>docking<sp/>branch<sp/>with<sp/>multi-viewports<sp/>(==<sp/>single<sp/>Dear<sp/>ImGui<sp/>context<sp/>+<sp/>multiple<sp/>windows)<sp/>instead<sp/>of<sp/>multiple<sp/>Dear<sp/>ImGui<sp/>contexts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FIXME:<sp/>multi-context<sp/>support<sp/>is<sp/>not<sp/>tested<sp/>and<sp/>probably<sp/>dysfunctional<sp/>in<sp/>this<sp/>backend.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_im_gui___impl_vulkan___data" kindref="compound">ImGui_ImplVulkan_Data</ref>*<sp/>ImGui_ImplVulkan_GetBackendData()</highlight></codeline>
<codeline lineno="345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ImGui::GetCurrentContext()<sp/>?<sp/>(<ref refid="struct_im_gui___impl_vulkan___data" kindref="compound">ImGui_ImplVulkan_Data</ref>*)ImGui::GetIO().BackendRendererUserData<sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>ImGui_ImplVulkan_MemoryType(VkMemoryPropertyFlags<sp/>properties,<sp/>uint32_t<sp/>type_bits)</highlight></codeline>
<codeline lineno="350"><highlight class="normal">{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___data" kindref="compound">ImGui_ImplVulkan_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplVulkan_GetBackendData();</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___init_info" kindref="compound">ImGui_ImplVulkan_InitInfo</ref>*<sp/>v<sp/>=<sp/>&amp;bd-&gt;VulkanInitInfo;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_physical_device_memory_properties" kindref="compound">VkPhysicalDeviceMemoryProperties</ref><sp/>prop;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>vkGetPhysicalDeviceMemoryProperties(v-&gt;PhysicalDevice,<sp/>&amp;prop);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>prop.memoryTypeCount;<sp/>i++)</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((prop.memoryTypes[i].propertyFlags<sp/>&amp;<sp/>properties)<sp/>==<sp/>properties<sp/>&amp;&amp;<sp/>type_bits<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>i))</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0xFFFFFFFF;<sp/></highlight><highlight class="comment">//<sp/>Unable<sp/>to<sp/>find<sp/>memoryType</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_vk_result(VkResult<sp/>err)</highlight></codeline>
<codeline lineno="362"><highlight class="normal">{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___data" kindref="compound">ImGui_ImplVulkan_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplVulkan_GetBackendData();</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bd)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___init_info" kindref="compound">ImGui_ImplVulkan_InitInfo</ref>*<sp/>v<sp/>=<sp/>&amp;bd-&gt;VulkanInitInfo;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v-&gt;CheckVkResultFn)</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v-&gt;CheckVkResultFn(err);</highlight></codeline>
<codeline lineno="369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CreateOrResizeBuffer(VkBuffer&amp;<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>VkDeviceMemory&amp;<sp/>buffer_memory,<sp/>VkDeviceSize&amp;<sp/>p_buffer_size,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>new_size,<sp/>VkBufferUsageFlagBits<sp/>usage)</highlight></codeline>
<codeline lineno="372"><highlight class="normal">{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___data" kindref="compound">ImGui_ImplVulkan_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplVulkan_GetBackendData();</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___init_info" kindref="compound">ImGui_ImplVulkan_InitInfo</ref>*<sp/>v<sp/>=<sp/>&amp;bd-&gt;VulkanInitInfo;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>VkResult<sp/>err;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classbuffer" kindref="compound">buffer</ref><sp/>!=<sp/>VK_NULL_HANDLE)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkDestroyBuffer(v-&gt;Device,<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>v-&gt;Allocator);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer_memory<sp/>!=<sp/>VK_NULL_HANDLE)</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkFreeMemory(v-&gt;Device,<sp/>buffer_memory,<sp/>v-&gt;Allocator);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDeviceSize<sp/>vertex_buffer_size_aligned<sp/>=<sp/>((new_size<sp/>-<sp/>1)<sp/>/<sp/>bd-&gt;BufferMemoryAlignment<sp/>+<sp/>1)<sp/>*<sp/>bd-&gt;BufferMemoryAlignment;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_buffer_create_info" kindref="compound">VkBufferCreateInfo</ref><sp/>buffer_info<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer_info.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer_info.size<sp/>=<sp/>vertex_buffer_size_aligned;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer_info.usage<sp/>=<sp/>usage;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer_info.sharingMode<sp/>=<sp/>VK_SHARING_MODE_EXCLUSIVE;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkCreateBuffer(v-&gt;Device,<sp/>&amp;buffer_info,<sp/>v-&gt;Allocator,<sp/>&amp;<ref refid="classbuffer" kindref="compound">buffer</ref>);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_memory_requirements" kindref="compound">VkMemoryRequirements</ref><sp/>req;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>vkGetBufferMemoryRequirements(v-&gt;Device,<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>&amp;req);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>bd-&gt;BufferMemoryAlignment<sp/>=<sp/>(bd-&gt;BufferMemoryAlignment<sp/>&gt;<sp/>req.alignment)<sp/>?<sp/>bd-&gt;BufferMemoryAlignment<sp/>:<sp/>req.alignment;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_memory_allocate_info" kindref="compound">VkMemoryAllocateInfo</ref><sp/>alloc_info<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>alloc_info.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>alloc_info.allocationSize<sp/>=<sp/>req.size;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>alloc_info.memoryTypeIndex<sp/>=<sp/>ImGui_ImplVulkan_MemoryType(VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT,<sp/>req.memoryTypeBits);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkAllocateMemory(v-&gt;Device,<sp/>&amp;alloc_info,<sp/>v-&gt;Allocator,<sp/>&amp;buffer_memory);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkBindBufferMemory(v-&gt;Device,<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>buffer_memory,<sp/>0);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>p_buffer_size<sp/>=<sp/>req.size;</highlight></codeline>
<codeline lineno="403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplVulkan_SetupRenderState(<ref refid="struct_im_draw_data" kindref="compound">ImDrawData</ref>*<sp/>draw_data,<sp/>VkPipeline<sp/>pipeline,<sp/>VkCommandBuffer<sp/>command_buffer,<sp/><ref refid="struct_im_gui___impl_vulkan_h___frame_render_buffers" kindref="compound">ImGui_ImplVulkanH_FrameRenderBuffers</ref>*<sp/>rb,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fb_width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fb_height)</highlight></codeline>
<codeline lineno="406"><highlight class="normal">{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___data" kindref="compound">ImGui_ImplVulkan_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplVulkan_GetBackendData();</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bind<sp/>pipeline<sp/>and<sp/>descriptor<sp/>sets:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkCmdBindPipeline(command_buffer,<sp/>VK_PIPELINE_BIND_POINT_GRAPHICS,<sp/>pipeline);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkDescriptorSet<sp/>desc_set[1]<sp/>=<sp/>{<sp/>bd-&gt;DescriptorSet<sp/>};</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkCmdBindDescriptorSets(command_buffer,<sp/>VK_PIPELINE_BIND_POINT_GRAPHICS,<sp/>bd-&gt;PipelineLayout,<sp/>0,<sp/>1,<sp/>desc_set,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bind<sp/>Vertex<sp/>And<sp/>Index<sp/>Buffer:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(draw_data-&gt;TotalVtxCount<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkBuffer<sp/>vertex_buffers[1]<sp/>=<sp/>{<sp/>rb-&gt;VertexBuffer<sp/>};</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkDeviceSize<sp/>vertex_offset[1]<sp/>=<sp/>{<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkCmdBindVertexBuffers(command_buffer,<sp/>0,<sp/>1,<sp/>vertex_buffers,<sp/>vertex_offset);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkCmdBindIndexBuffer(command_buffer,<sp/>rb-&gt;IndexBuffer,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ImDrawIdx)<sp/>==<sp/>2<sp/>?<sp/>VK_INDEX_TYPE_UINT16<sp/>:<sp/>VK_INDEX_TYPE_UINT32);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>viewport:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_viewport" kindref="compound">VkViewport</ref><sp/>viewport;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>viewport.x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>viewport.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>viewport.width<sp/>=<sp/>(float)fb_width;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>viewport.height<sp/>=<sp/>(float)fb_height;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>viewport.minDepth<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>viewport.maxDepth<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkCmdSetViewport(command_buffer,<sp/>0,<sp/>1,<sp/>&amp;viewport);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>scale<sp/>and<sp/>translation:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Our<sp/>visible<sp/>imgui<sp/>space<sp/>lies<sp/>from<sp/>draw_data-&gt;DisplayPps<sp/>(top<sp/>left)<sp/>to<sp/>draw_data-&gt;DisplayPos+data_data-&gt;DisplaySize<sp/>(bottom<sp/>right).<sp/>DisplayPos<sp/>is<sp/>(0,0)<sp/>for<sp/>single<sp/>viewport<sp/>apps.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale[2];</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scale[0]<sp/>=<sp/>2.0f<sp/>/<sp/>draw_data-&gt;DisplaySize.x;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scale[1]<sp/>=<sp/>2.0f<sp/>/<sp/>draw_data-&gt;DisplaySize.y;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="group__gtc__matrix__transform_1ga67d8473d6b293d1bb2b4eaf249795cab" kindref="member">translate</ref>[2];</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__matrix__transform_1ga67d8473d6b293d1bb2b4eaf249795cab" kindref="member">translate</ref>[0]<sp/>=<sp/>-1.0f<sp/>-<sp/>draw_data-&gt;DisplayPos.x<sp/>*<sp/>scale[0];</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtc__matrix__transform_1ga67d8473d6b293d1bb2b4eaf249795cab" kindref="member">translate</ref>[1]<sp/>=<sp/>-1.0f<sp/>-<sp/>draw_data-&gt;DisplayPos.y<sp/>*<sp/>scale[1];</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkCmdPushConstants(command_buffer,<sp/>bd-&gt;PipelineLayout,<sp/>VK_SHADER_STAGE_VERTEX_BIT,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>*<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>*<sp/>2,<sp/>scale);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkCmdPushConstants(command_buffer,<sp/>bd-&gt;PipelineLayout,<sp/>VK_SHADER_STAGE_VERTEX_BIT,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>*<sp/>2,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>*<sp/>2,<sp/><ref refid="group__gtc__matrix__transform_1ga67d8473d6b293d1bb2b4eaf249795cab" kindref="member">translate</ref>);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Render<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplVulkan_RenderDrawData(<ref refid="struct_im_draw_data" kindref="compound">ImDrawData</ref>*<sp/>draw_data,<sp/>VkCommandBuffer<sp/>command_buffer,<sp/>VkPipeline<sp/>pipeline)</highlight></codeline>
<codeline lineno="453"><highlight class="normal">{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>rendering<sp/>when<sp/>minimized,<sp/>scale<sp/>coordinates<sp/>for<sp/>retina<sp/>displays<sp/>(screen<sp/>coordinates<sp/>!=<sp/>framebuffer<sp/>coordinates)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fb_width<sp/>=<sp/>(int)(draw_data-&gt;DisplaySize.x<sp/>*<sp/>draw_data-&gt;FramebufferScale.x);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fb_height<sp/>=<sp/>(int)(draw_data-&gt;DisplaySize.y<sp/>*<sp/>draw_data-&gt;FramebufferScale.y);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fb_width<sp/>&lt;=<sp/>0<sp/>||<sp/>fb_height<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___data" kindref="compound">ImGui_ImplVulkan_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplVulkan_GetBackendData();</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___init_info" kindref="compound">ImGui_ImplVulkan_InitInfo</ref>*<sp/>v<sp/>=<sp/>&amp;bd-&gt;VulkanInitInfo;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pipeline<sp/>==<sp/>VK_NULL_HANDLE)</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pipeline<sp/>=<sp/>bd-&gt;Pipeline;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>array<sp/>to<sp/>store<sp/>enough<sp/>vertex/index<sp/>buffers.<sp/>Each<sp/>unique<sp/>viewport<sp/>gets<sp/>its<sp/>own<sp/>storage.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___viewport_data" kindref="compound">ImGui_ImplVulkan_ViewportData</ref>*<sp/>viewport_renderer_data<sp/>=<sp/>(<ref refid="struct_im_gui___impl_vulkan___viewport_data" kindref="compound">ImGui_ImplVulkan_ViewportData</ref>*)draw_data-&gt;OwnerViewport-&gt;RendererUserData;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_ASSERT(viewport_renderer_data<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan_h___window_render_buffers" kindref="compound">ImGui_ImplVulkanH_WindowRenderBuffers</ref>*<sp/>wrb<sp/>=<sp/>&amp;viewport_renderer_data-&gt;RenderBuffers;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wrb-&gt;FrameRenderBuffers<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrb-&gt;Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrb-&gt;Count<sp/>=<sp/>v-&gt;ImageCount;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wrb-&gt;FrameRenderBuffers<sp/>=<sp/>(<ref refid="struct_im_gui___impl_vulkan_h___frame_render_buffers" kindref="compound">ImGui_ImplVulkanH_FrameRenderBuffers</ref>*)IM_ALLOC(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_im_gui___impl_vulkan_h___frame_render_buffers" kindref="compound">ImGui_ImplVulkanH_FrameRenderBuffers</ref>)<sp/>*<sp/>wrb-&gt;Count);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(wrb-&gt;FrameRenderBuffers,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_im_gui___impl_vulkan_h___frame_render_buffers" kindref="compound">ImGui_ImplVulkanH_FrameRenderBuffers</ref>)<sp/>*<sp/>wrb-&gt;Count);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_ASSERT(wrb-&gt;Count<sp/>==<sp/>v-&gt;ImageCount);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>wrb-&gt;Index<sp/>=<sp/>(wrb-&gt;Index<sp/>+<sp/>1)<sp/>%<sp/>wrb-&gt;Count;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan_h___frame_render_buffers" kindref="compound">ImGui_ImplVulkanH_FrameRenderBuffers</ref>*<sp/>rb<sp/>=<sp/>&amp;wrb-&gt;FrameRenderBuffers[wrb-&gt;Index];</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(draw_data-&gt;TotalVtxCount<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>or<sp/>resize<sp/>the<sp/>vertex/index<sp/>buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>vertex_size<sp/>=<sp/>draw_data-&gt;TotalVtxCount<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_im_draw_vert" kindref="compound">ImDrawVert</ref>);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index_size<sp/>=<sp/>draw_data-&gt;TotalIdxCount<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ImDrawIdx);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rb-&gt;VertexBuffer<sp/>==<sp/>VK_NULL_HANDLE<sp/>||<sp/>rb-&gt;VertexBufferSize<sp/>&lt;<sp/>vertex_size)</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CreateOrResizeBuffer(rb-&gt;VertexBuffer,<sp/>rb-&gt;VertexBufferMemory,<sp/>rb-&gt;VertexBufferSize,<sp/>vertex_size,<sp/>VK_BUFFER_USAGE_VERTEX_BUFFER_BIT);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rb-&gt;IndexBuffer<sp/>==<sp/>VK_NULL_HANDLE<sp/>||<sp/>rb-&gt;IndexBufferSize<sp/>&lt;<sp/>index_size)</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CreateOrResizeBuffer(rb-&gt;IndexBuffer,<sp/>rb-&gt;IndexBufferMemory,<sp/>rb-&gt;IndexBufferSize,<sp/>index_size,<sp/>VK_BUFFER_USAGE_INDEX_BUFFER_BIT);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Upload<sp/>vertex/index<sp/>data<sp/>into<sp/>a<sp/>single<sp/>contiguous<sp/>GPU<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_im_draw_vert" kindref="compound">ImDrawVert</ref>*<sp/>vtx_dst<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImDrawIdx*<sp/>idx_dst<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkResult<sp/>err<sp/>=<sp/>vkMapMemory(v-&gt;Device,<sp/>rb-&gt;VertexBufferMemory,<sp/>0,<sp/>rb-&gt;VertexBufferSize,<sp/>0,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)(&amp;vtx_dst));</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkMapMemory(v-&gt;Device,<sp/>rb-&gt;IndexBufferMemory,<sp/>0,<sp/>rb-&gt;IndexBufferSize,<sp/>0,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)(&amp;idx_dst));</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>draw_data-&gt;CmdListsCount;<sp/>n++)</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_im_draw_list" kindref="compound">ImDrawList</ref>*<sp/>cmd_list<sp/>=<sp/>draw_data-&gt;CmdLists[n];</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(vtx_dst,<sp/>cmd_list-&gt;VtxBuffer.Data,<sp/>cmd_list-&gt;VtxBuffer.Size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_im_draw_vert" kindref="compound">ImDrawVert</ref>));</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(idx_dst,<sp/>cmd_list-&gt;IdxBuffer.Data,<sp/>cmd_list-&gt;IdxBuffer.Size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ImDrawIdx));</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vtx_dst<sp/>+=<sp/>cmd_list-&gt;VtxBuffer.Size;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx_dst<sp/>+=<sp/>cmd_list-&gt;IdxBuffer.Size;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_mapped_memory_range" kindref="compound">VkMappedMemoryRange</ref><sp/>range[2]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>range[0].sType<sp/>=<sp/>VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>range[0].memory<sp/>=<sp/>rb-&gt;VertexBufferMemory;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>range[0].size<sp/>=<sp/>VK_WHOLE_SIZE;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>range[1].sType<sp/>=<sp/>VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>range[1].memory<sp/>=<sp/>rb-&gt;IndexBufferMemory;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>range[1].size<sp/>=<sp/>VK_WHOLE_SIZE;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkFlushMappedMemoryRanges(v-&gt;Device,<sp/>2,<sp/>range);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkUnmapMemory(v-&gt;Device,<sp/>rb-&gt;VertexBufferMemory);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkUnmapMemory(v-&gt;Device,<sp/>rb-&gt;IndexBufferMemory);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>desired<sp/>Vulkan<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplVulkan_SetupRenderState(draw_data,<sp/>pipeline,<sp/>command_buffer,<sp/>rb,<sp/>fb_width,<sp/>fb_height);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Will<sp/>project<sp/>scissor/clipping<sp/>rectangles<sp/>into<sp/>framebuffer<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_vec2" kindref="compound">ImVec2</ref><sp/>clip_off<sp/>=<sp/>draw_data-&gt;DisplayPos;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(0,0)<sp/>unless<sp/>using<sp/>multi-viewports</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_vec2" kindref="compound">ImVec2</ref><sp/>clip_scale<sp/>=<sp/>draw_data-&gt;FramebufferScale;<sp/></highlight><highlight class="comment">//<sp/>(1,1)<sp/>unless<sp/>using<sp/>retina<sp/>display<sp/>which<sp/>are<sp/>often<sp/>(2,2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Render<sp/>command<sp/>lists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(Because<sp/>we<sp/>merged<sp/>all<sp/>buffers<sp/>into<sp/>a<sp/>single<sp/>one,<sp/>we<sp/>maintain<sp/>our<sp/>own<sp/>offset<sp/>into<sp/>them)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>global_vtx_offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>global_idx_offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>draw_data-&gt;CmdListsCount;<sp/>n++)</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_im_draw_list" kindref="compound">ImDrawList</ref>*<sp/>cmd_list<sp/>=<sp/>draw_data-&gt;CmdLists[n];</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmd_i<sp/>=<sp/>0;<sp/>cmd_i<sp/>&lt;<sp/>cmd_list-&gt;CmdBuffer.Size;<sp/>cmd_i++)</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_im_draw_cmd" kindref="compound">ImDrawCmd</ref>*<sp/>pcmd<sp/>=<sp/>&amp;cmd_list-&gt;CmdBuffer[cmd_i];</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pcmd-&gt;UserCallback<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>User<sp/>callback,<sp/>registered<sp/>via<sp/>ImDrawList::AddCallback()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(ImDrawCallback_ResetRenderState<sp/>is<sp/>a<sp/>special<sp/>callback<sp/>value<sp/>used<sp/>by<sp/>the<sp/>user<sp/>to<sp/>request<sp/>the<sp/>renderer<sp/>to<sp/>reset<sp/>render<sp/>state.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pcmd-&gt;UserCallback<sp/>==<sp/>ImDrawCallback_ResetRenderState)</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui_ImplVulkan_SetupRenderState(draw_data,<sp/>pipeline,<sp/>command_buffer,<sp/>rb,<sp/>fb_width,<sp/>fb_height);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcmd-&gt;UserCallback(cmd_list,<sp/>pcmd);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Project<sp/>scissor/clipping<sp/>rectangles<sp/>into<sp/>framebuffer<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_im_vec2" kindref="compound">ImVec2</ref><sp/>clip_min((pcmd-&gt;ClipRect.x<sp/>-<sp/>clip_off.x)<sp/>*<sp/>clip_scale.x,<sp/>(pcmd-&gt;ClipRect.y<sp/>-<sp/>clip_off.y)<sp/>*<sp/>clip_scale.y);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_im_vec2" kindref="compound">ImVec2</ref><sp/>clip_max((pcmd-&gt;ClipRect.z<sp/>-<sp/>clip_off.x)<sp/>*<sp/>clip_scale.x,<sp/>(pcmd-&gt;ClipRect.w<sp/>-<sp/>clip_off.y)<sp/>*<sp/>clip_scale.y);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clamp<sp/>to<sp/>viewport<sp/>as<sp/>vkCmdSetScissor()<sp/>won&apos;t<sp/>accept<sp/>values<sp/>that<sp/>are<sp/>off<sp/>bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clip_min.x<sp/>&lt;<sp/>0.0f)<sp/>{<sp/>clip_min.x<sp/>=<sp/>0.0f;<sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clip_min.y<sp/>&lt;<sp/>0.0f)<sp/>{<sp/>clip_min.y<sp/>=<sp/>0.0f;<sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clip_max.x<sp/>&gt;<sp/>fb_width)<sp/>{<sp/>clip_max.x<sp/>=<sp/>(float)fb_width;<sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clip_max.y<sp/>&gt;<sp/>fb_height)<sp/>{<sp/>clip_max.y<sp/>=<sp/>(float)fb_height;<sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clip_max.x<sp/>&lt;=<sp/>clip_min.x<sp/>||<sp/>clip_max.y<sp/>&lt;=<sp/>clip_min.y)</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>scissor/clipping<sp/>rectangle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_rect2_d" kindref="compound">VkRect2D</ref><sp/>scissor;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scissor.offset.x<sp/>=<sp/>(<ref refid="group__gtc__type__precision_1gab870c0eb6f525b0c8c4716762e0fc3a8" kindref="member">int32_t</ref>)(clip_min.x);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scissor.offset.y<sp/>=<sp/>(<ref refid="group__gtc__type__precision_1gab870c0eb6f525b0c8c4716762e0fc3a8" kindref="member">int32_t</ref>)(clip_min.y);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scissor.extent.width<sp/>=<sp/>(<ref refid="group__gtc__type__precision_1ga822ca53a9ad412504532838906276a99" kindref="member">uint32_t</ref>)(clip_max.x<sp/>-<sp/>clip_min.x);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scissor.extent.height<sp/>=<sp/>(<ref refid="group__gtc__type__precision_1ga822ca53a9ad412504532838906276a99" kindref="member">uint32_t</ref>)(clip_max.y<sp/>-<sp/>clip_min.y);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkCmdSetScissor(command_buffer,<sp/>0,<sp/>1,<sp/>&amp;scissor);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Draw</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkCmdDrawIndexed(command_buffer,<sp/>pcmd-&gt;ElemCount,<sp/>1,<sp/>pcmd-&gt;IdxOffset<sp/>+<sp/>global_idx_offset,<sp/>pcmd-&gt;VtxOffset<sp/>+<sp/>global_vtx_offset,<sp/>0);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>global_idx_offset<sp/>+=<sp/>cmd_list-&gt;IdxBuffer.Size;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>global_vtx_offset<sp/>+=<sp/>cmd_list-&gt;VtxBuffer.Size;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>at<sp/>this<sp/>point<sp/>both<sp/>vkCmdSetViewport()<sp/>and<sp/>vkCmdSetScissor()<sp/>have<sp/>been<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Our<sp/>last<sp/>values<sp/>will<sp/>leak<sp/>into<sp/>user/application<sp/>rendering<sp/>IF:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>Your<sp/>app<sp/>uses<sp/>a<sp/>pipeline<sp/>with<sp/>VK_DYNAMIC_STATE_VIEWPORT<sp/>or<sp/>VK_DYNAMIC_STATE_SCISSOR<sp/>dynamic<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>And<sp/>you<sp/>forgot<sp/>to<sp/>call<sp/>vkCmdSetViewport()<sp/>and<sp/>vkCmdSetScissor()<sp/>yourself<sp/>to<sp/>explicitely<sp/>set<sp/>that<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>you<sp/>use<sp/>VK_DYNAMIC_STATE_VIEWPORT<sp/>or<sp/>VK_DYNAMIC_STATE_SCISSOR<sp/>you<sp/>are<sp/>responsible<sp/>for<sp/>setting<sp/>the<sp/>values<sp/>before<sp/>rendering.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>theory<sp/>we<sp/>should<sp/>aim<sp/>to<sp/>backup/restore<sp/>those<sp/>values<sp/>but<sp/>I<sp/>am<sp/>not<sp/>sure<sp/>this<sp/>is<sp/>possible.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>perform<sp/>a<sp/>call<sp/>to<sp/>vkCmdSetScissor()<sp/>to<sp/>set<sp/>back<sp/>a<sp/>full<sp/>viewport<sp/>which<sp/>is<sp/>likely<sp/>to<sp/>fix<sp/>things<sp/>for<sp/>99%<sp/>users<sp/>but<sp/>technically<sp/>this<sp/>is<sp/>not<sp/>perfect.<sp/>(See<sp/>github<sp/>#4644)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_rect2_d" kindref="compound">VkRect2D</ref><sp/>scissor<sp/>=<sp/>{<sp/>{<sp/>0,<sp/>0<sp/>},<sp/>{<sp/>(<ref refid="group__gtc__type__precision_1ga822ca53a9ad412504532838906276a99" kindref="member">uint32_t</ref>)fb_width,<sp/>(uint32_t)fb_height<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>vkCmdSetScissor(command_buffer,<sp/>0,<sp/>1,<sp/>&amp;scissor);</highlight></codeline>
<codeline lineno="583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ImGui_ImplVulkan_CreateFontsTexture(VkCommandBuffer<sp/>command_buffer)</highlight></codeline>
<codeline lineno="586"><highlight class="normal">{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui_i_o" kindref="compound">ImGuiIO</ref>&amp;<sp/>io<sp/>=<sp/>ImGui::GetIO();</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___data" kindref="compound">ImGui_ImplVulkan_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplVulkan_GetBackendData();</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___init_info" kindref="compound">ImGui_ImplVulkan_InitInfo</ref>*<sp/>v<sp/>=<sp/>&amp;bd-&gt;VulkanInitInfo;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pixels;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/>height;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>io.Fonts-&gt;GetTexDataAsRGBA32(&amp;pixels,<sp/>&amp;width,<sp/>&amp;height);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>upload_size<sp/>=<sp/>width<sp/>*<sp/>height<sp/>*<sp/>4<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(char);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>VkResult<sp/>err;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>Image:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_image_create_info" kindref="compound">VkImageCreateInfo</ref><sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.imageType<sp/>=<sp/>VK_IMAGE_TYPE_2D;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.format<sp/>=<sp/>VK_FORMAT_R8G8B8A8_UNORM;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.extent.width<sp/>=<sp/>width;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.extent.height<sp/>=<sp/>height;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.extent.depth<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.mipLevels<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.arrayLayers<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.samples<sp/>=<sp/>VK_SAMPLE_COUNT_1_BIT;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.tiling<sp/>=<sp/>VK_IMAGE_TILING_OPTIMAL;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.usage<sp/>=<sp/>VK_IMAGE_USAGE_SAMPLED_BIT<sp/>|<sp/>VK_IMAGE_USAGE_TRANSFER_DST_BIT;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.sharingMode<sp/>=<sp/>VK_SHARING_MODE_EXCLUSIVE;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.initialLayout<sp/>=<sp/>VK_IMAGE_LAYOUT_UNDEFINED;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkCreateImage(v-&gt;Device,<sp/>&amp;<ref refid="structinfo" kindref="compound">info</ref>,<sp/>v-&gt;Allocator,<sp/>&amp;bd-&gt;FontImage);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_memory_requirements" kindref="compound">VkMemoryRequirements</ref><sp/>req;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkGetImageMemoryRequirements(v-&gt;Device,<sp/>bd-&gt;FontImage,<sp/>&amp;req);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_memory_allocate_info" kindref="compound">VkMemoryAllocateInfo</ref><sp/>alloc_info<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloc_info.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloc_info.allocationSize<sp/>=<sp/>req.size;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloc_info.memoryTypeIndex<sp/>=<sp/>ImGui_ImplVulkan_MemoryType(VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT,<sp/>req.memoryTypeBits);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkAllocateMemory(v-&gt;Device,<sp/>&amp;alloc_info,<sp/>v-&gt;Allocator,<sp/>&amp;bd-&gt;FontMemory);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkBindImageMemory(v-&gt;Device,<sp/>bd-&gt;FontImage,<sp/>bd-&gt;FontMemory,<sp/>0);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>Image<sp/>View:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_image_view_create_info" kindref="compound">VkImageViewCreateInfo</ref><sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.image<sp/>=<sp/>bd-&gt;FontImage;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.viewType<sp/>=<sp/>VK_IMAGE_VIEW_TYPE_2D;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.format<sp/>=<sp/>VK_FORMAT_R8G8B8A8_UNORM;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.subresourceRange.aspectMask<sp/>=<sp/>VK_IMAGE_ASPECT_COLOR_BIT;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.subresourceRange.levelCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.subresourceRange.layerCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkCreateImageView(v-&gt;Device,<sp/>&amp;<ref refid="structinfo" kindref="compound">info</ref>,<sp/>v-&gt;Allocator,<sp/>&amp;bd-&gt;FontView);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>Descriptor<sp/>Set:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_descriptor_image_info" kindref="compound">VkDescriptorImageInfo</ref><sp/>desc_image[1]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc_image[0].sampler<sp/>=<sp/>bd-&gt;FontSampler;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc_image[0].imageView<sp/>=<sp/>bd-&gt;FontView;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>desc_image[0].imageLayout<sp/>=<sp/>VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_write_descriptor_set" kindref="compound">VkWriteDescriptorSet</ref><sp/>write_desc[1]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_desc[0].sType<sp/>=<sp/>VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_desc[0].dstSet<sp/>=<sp/>bd-&gt;DescriptorSet;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_desc[0].descriptorCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_desc[0].descriptorType<sp/>=<sp/>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_desc[0].pImageInfo<sp/>=<sp/>desc_image;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkUpdateDescriptorSets(v-&gt;Device,<sp/>1,<sp/>write_desc,<sp/>0,<sp/>NULL);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>Upload<sp/>Buffer:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_buffer_create_info" kindref="compound">VkBufferCreateInfo</ref><sp/>buffer_info<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_info.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_info.size<sp/>=<sp/>upload_size;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_info.usage<sp/>=<sp/>VK_BUFFER_USAGE_TRANSFER_SRC_BIT;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_info.sharingMode<sp/>=<sp/>VK_SHARING_MODE_EXCLUSIVE;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkCreateBuffer(v-&gt;Device,<sp/>&amp;buffer_info,<sp/>v-&gt;Allocator,<sp/>&amp;bd-&gt;UploadBuffer);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_memory_requirements" kindref="compound">VkMemoryRequirements</ref><sp/>req;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkGetBufferMemoryRequirements(v-&gt;Device,<sp/>bd-&gt;UploadBuffer,<sp/>&amp;req);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bd-&gt;BufferMemoryAlignment<sp/>=<sp/>(bd-&gt;BufferMemoryAlignment<sp/>&gt;<sp/>req.alignment)<sp/>?<sp/>bd-&gt;BufferMemoryAlignment<sp/>:<sp/>req.alignment;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_memory_allocate_info" kindref="compound">VkMemoryAllocateInfo</ref><sp/>alloc_info<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloc_info.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloc_info.allocationSize<sp/>=<sp/>req.size;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloc_info.memoryTypeIndex<sp/>=<sp/>ImGui_ImplVulkan_MemoryType(VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT,<sp/>req.memoryTypeBits);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkAllocateMemory(v-&gt;Device,<sp/>&amp;alloc_info,<sp/>v-&gt;Allocator,<sp/>&amp;bd-&gt;UploadBufferMemory);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkBindBufferMemory(v-&gt;Device,<sp/>bd-&gt;UploadBuffer,<sp/>bd-&gt;UploadBufferMemory,<sp/>0);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Upload<sp/>to<sp/>Buffer:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>map<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkMapMemory(v-&gt;Device,<sp/>bd-&gt;UploadBufferMemory,<sp/>0,<sp/>upload_size,<sp/>0,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)(&amp;map));</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(map,<sp/>pixels,<sp/>upload_size);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_mapped_memory_range" kindref="compound">VkMappedMemoryRange</ref><sp/>range[1]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>range[0].sType<sp/>=<sp/>VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>range[0].memory<sp/>=<sp/>bd-&gt;UploadBufferMemory;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>range[0].size<sp/>=<sp/>upload_size;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkFlushMappedMemoryRanges(v-&gt;Device,<sp/>1,<sp/>range);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkUnmapMemory(v-&gt;Device,<sp/>bd-&gt;UploadBufferMemory);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>to<sp/>Image:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_image_memory_barrier" kindref="compound">VkImageMemoryBarrier</ref><sp/>copy_barrier[1]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy_barrier[0].sType<sp/>=<sp/>VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy_barrier[0].dstAccessMask<sp/>=<sp/>VK_ACCESS_TRANSFER_WRITE_BIT;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy_barrier[0].oldLayout<sp/>=<sp/>VK_IMAGE_LAYOUT_UNDEFINED;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy_barrier[0].newLayout<sp/>=<sp/>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy_barrier[0].srcQueueFamilyIndex<sp/>=<sp/>VK_QUEUE_FAMILY_IGNORED;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy_barrier[0].dstQueueFamilyIndex<sp/>=<sp/>VK_QUEUE_FAMILY_IGNORED;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy_barrier[0].image<sp/>=<sp/>bd-&gt;FontImage;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy_barrier[0].subresourceRange.aspectMask<sp/>=<sp/>VK_IMAGE_ASPECT_COLOR_BIT;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy_barrier[0].subresourceRange.levelCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy_barrier[0].subresourceRange.layerCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkCmdPipelineBarrier(command_buffer,<sp/>VK_PIPELINE_STAGE_HOST_BIT,<sp/>VK_PIPELINE_STAGE_TRANSFER_BIT,<sp/>0,<sp/>0,<sp/>NULL,<sp/>0,<sp/>NULL,<sp/>1,<sp/>copy_barrier);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_buffer_image_copy" kindref="compound">VkBufferImageCopy</ref><sp/><ref refid="structregion" kindref="compound">region</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structregion" kindref="compound">region</ref>.imageSubresource.aspectMask<sp/>=<sp/>VK_IMAGE_ASPECT_COLOR_BIT;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structregion" kindref="compound">region</ref>.imageSubresource.layerCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structregion" kindref="compound">region</ref>.imageExtent.width<sp/>=<sp/>width;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structregion" kindref="compound">region</ref>.imageExtent.height<sp/>=<sp/>height;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structregion" kindref="compound">region</ref>.imageExtent.depth<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkCmdCopyBufferToImage(command_buffer,<sp/>bd-&gt;UploadBuffer,<sp/>bd-&gt;FontImage,<sp/>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL,<sp/>1,<sp/>&amp;<ref refid="structregion" kindref="compound">region</ref>);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_image_memory_barrier" kindref="compound">VkImageMemoryBarrier</ref><sp/>use_barrier[1]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_barrier[0].sType<sp/>=<sp/>VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_barrier[0].srcAccessMask<sp/>=<sp/>VK_ACCESS_TRANSFER_WRITE_BIT;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_barrier[0].dstAccessMask<sp/>=<sp/>VK_ACCESS_SHADER_READ_BIT;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_barrier[0].oldLayout<sp/>=<sp/>VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_barrier[0].newLayout<sp/>=<sp/>VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_barrier[0].srcQueueFamilyIndex<sp/>=<sp/>VK_QUEUE_FAMILY_IGNORED;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_barrier[0].dstQueueFamilyIndex<sp/>=<sp/>VK_QUEUE_FAMILY_IGNORED;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_barrier[0].image<sp/>=<sp/>bd-&gt;FontImage;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_barrier[0].subresourceRange.aspectMask<sp/>=<sp/>VK_IMAGE_ASPECT_COLOR_BIT;</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_barrier[0].subresourceRange.levelCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>use_barrier[0].subresourceRange.layerCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkCmdPipelineBarrier(command_buffer,<sp/>VK_PIPELINE_STAGE_TRANSFER_BIT,<sp/>VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT,<sp/>0,<sp/>0,<sp/>NULL,<sp/>0,<sp/>NULL,<sp/>1,<sp/>use_barrier);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>our<sp/>identifier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>io.Fonts-&gt;SetTexID((ImTextureID)(intptr_t)bd-&gt;FontImage);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="736"><highlight class="normal">}</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplVulkan_CreateShaderModules(VkDevice<sp/>device,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_allocation_callbacks" kindref="compound">VkAllocationCallbacks</ref>*<sp/>allocator)</highlight></codeline>
<codeline lineno="739"><highlight class="normal">{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>shader<sp/>modules</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___data" kindref="compound">ImGui_ImplVulkan_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplVulkan_GetBackendData();</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bd-&gt;ShaderModuleVert<sp/>==<sp/>VK_NULL_HANDLE)</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_shader_module_create_info" kindref="compound">VkShaderModuleCreateInfo</ref><sp/>vert_info<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vert_info.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vert_info.codeSize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__glsl_shader_vert_spv);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vert_info.pCode<sp/>=<sp/>(uint32_t*)__glsl_shader_vert_spv;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkResult<sp/>err<sp/>=<sp/>vkCreateShaderModule(device,<sp/>&amp;vert_info,<sp/>allocator,<sp/>&amp;bd-&gt;ShaderModuleVert);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bd-&gt;ShaderModuleFrag<sp/>==<sp/>VK_NULL_HANDLE)</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_shader_module_create_info" kindref="compound">VkShaderModuleCreateInfo</ref><sp/>frag_info<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frag_info.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frag_info.codeSize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(__glsl_shader_frag_spv);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frag_info.pCode<sp/>=<sp/>(uint32_t*)__glsl_shader_frag_spv;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkResult<sp/>err<sp/>=<sp/>vkCreateShaderModule(device,<sp/>&amp;frag_info,<sp/>allocator,<sp/>&amp;bd-&gt;ShaderModuleFrag);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="760"><highlight class="normal">}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplVulkan_CreateFontSampler(VkDevice<sp/>device,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_allocation_callbacks" kindref="compound">VkAllocationCallbacks</ref>*<sp/>allocator)</highlight></codeline>
<codeline lineno="763"><highlight class="normal">{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___data" kindref="compound">ImGui_ImplVulkan_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplVulkan_GetBackendData();</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bd-&gt;FontSampler)</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_sampler_create_info" kindref="compound">VkSamplerCreateInfo</ref><sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.magFilter<sp/>=<sp/>VK_FILTER_LINEAR;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.minFilter<sp/>=<sp/>VK_FILTER_LINEAR;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.mipmapMode<sp/>=<sp/>VK_SAMPLER_MIPMAP_MODE_LINEAR;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.addressModeU<sp/>=<sp/>VK_SAMPLER_ADDRESS_MODE_REPEAT;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.addressModeV<sp/>=<sp/>VK_SAMPLER_ADDRESS_MODE_REPEAT;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.addressModeW<sp/>=<sp/>VK_SAMPLER_ADDRESS_MODE_REPEAT;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.minLod<sp/>=<sp/>-1000;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.maxLod<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.maxAnisotropy<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>VkResult<sp/>err<sp/>=<sp/>vkCreateSampler(device,<sp/>&amp;<ref refid="structinfo" kindref="compound">info</ref>,<sp/>allocator,<sp/>&amp;bd-&gt;FontSampler);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="781"><highlight class="normal">}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplVulkan_CreateDescriptorSetLayout(VkDevice<sp/>device,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_allocation_callbacks" kindref="compound">VkAllocationCallbacks</ref>*<sp/>allocator)</highlight></codeline>
<codeline lineno="784"><highlight class="normal">{</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___data" kindref="compound">ImGui_ImplVulkan_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplVulkan_GetBackendData();</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bd-&gt;DescriptorSetLayout)</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplVulkan_CreateFontSampler(device,<sp/>allocator);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSampler<sp/>sampler[1]<sp/>=<sp/>{<sp/>bd-&gt;FontSampler<sp/>};</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_descriptor_set_layout_binding" kindref="compound">VkDescriptorSetLayoutBinding</ref><sp/>binding[1]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>binding[0].descriptorType<sp/>=<sp/>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>binding[0].descriptorCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>binding[0].stageFlags<sp/>=<sp/>VK_SHADER_STAGE_FRAGMENT_BIT;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>binding[0].pImmutableSamplers<sp/>=<sp/>sampler;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_descriptor_set_layout_create_info" kindref="compound">VkDescriptorSetLayoutCreateInfo</ref><sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.bindingCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.pBindings<sp/>=<sp/>binding;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>VkResult<sp/>err<sp/>=<sp/>vkCreateDescriptorSetLayout(device,<sp/>&amp;<ref refid="structinfo" kindref="compound">info</ref>,<sp/>allocator,<sp/>&amp;bd-&gt;DescriptorSetLayout);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="802"><highlight class="normal">}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplVulkan_CreatePipelineLayout(VkDevice<sp/>device,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_allocation_callbacks" kindref="compound">VkAllocationCallbacks</ref>*<sp/>allocator)</highlight></codeline>
<codeline lineno="805"><highlight class="normal">{</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___data" kindref="compound">ImGui_ImplVulkan_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplVulkan_GetBackendData();</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bd-&gt;PipelineLayout)</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Constants:<sp/>we<sp/>are<sp/>using<sp/>&apos;vec2<sp/>offset&apos;<sp/>and<sp/>&apos;vec2<sp/>scale&apos;<sp/>instead<sp/>of<sp/>a<sp/>full<sp/>3d<sp/>projection<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplVulkan_CreateDescriptorSetLayout(device,<sp/>allocator);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_push_constant_range" kindref="compound">VkPushConstantRange</ref><sp/>push_constants[1]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>push_constants[0].stageFlags<sp/>=<sp/>VK_SHADER_STAGE_VERTEX_BIT;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>push_constants[0].offset<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float)<sp/>*<sp/>0;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>push_constants[0].size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float)<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDescriptorSetLayout<sp/>set_layout[1]<sp/>=<sp/>{<sp/>bd-&gt;DescriptorSetLayout<sp/>};</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_pipeline_layout_create_info" kindref="compound">VkPipelineLayoutCreateInfo</ref><sp/>layout_info<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>layout_info.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/>layout_info.setLayoutCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>layout_info.pSetLayouts<sp/>=<sp/>set_layout;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>layout_info.pushConstantRangeCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>layout_info.pPushConstantRanges<sp/>=<sp/>push_constants;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>VkResult<sp/><sp/>err<sp/>=<sp/>vkCreatePipelineLayout(device,<sp/>&amp;layout_info,<sp/>allocator,<sp/>&amp;bd-&gt;PipelineLayout);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="825"><highlight class="normal">}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplVulkan_CreatePipeline(VkDevice<sp/>device,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_allocation_callbacks" kindref="compound">VkAllocationCallbacks</ref>*<sp/>allocator,<sp/>VkPipelineCache<sp/>pipelineCache,<sp/>VkRenderPass<sp/>renderPass,<sp/>VkSampleCountFlagBits<sp/>MSAASamples,<sp/>VkPipeline*<sp/>pipeline,<sp/>uint32_t<sp/>subpass)</highlight></codeline>
<codeline lineno="828"><highlight class="normal">{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___data" kindref="compound">ImGui_ImplVulkan_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplVulkan_GetBackendData();</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplVulkan_CreateShaderModules(device,<sp/>allocator);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_pipeline_shader_stage_create_info" kindref="compound">VkPipelineShaderStageCreateInfo</ref><sp/>stage[2]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>stage[0].sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>stage[0].stage<sp/>=<sp/>VK_SHADER_STAGE_VERTEX_BIT;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>stage[0].module<sp/>=<sp/>bd-&gt;ShaderModuleVert;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>stage[0].pName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;main&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>stage[1].sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>stage[1].stage<sp/>=<sp/>VK_SHADER_STAGE_FRAGMENT_BIT;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>stage[1].module<sp/>=<sp/>bd-&gt;ShaderModuleFrag;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>stage[1].pName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;main&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_vertex_input_binding_description" kindref="compound">VkVertexInputBindingDescription</ref><sp/>binding_desc[1]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>binding_desc[0].stride<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_im_draw_vert" kindref="compound">ImDrawVert</ref>);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>binding_desc[0].inputRate<sp/>=<sp/>VK_VERTEX_INPUT_RATE_VERTEX;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_vertex_input_attribute_description" kindref="compound">VkVertexInputAttributeDescription</ref><sp/>attribute_desc[3]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>attribute_desc[0].location<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>attribute_desc[0].binding<sp/>=<sp/>binding_desc[0].binding;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>attribute_desc[0].format<sp/>=<sp/>VK_FORMAT_R32G32_SFLOAT;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>attribute_desc[0].offset<sp/>=<sp/>IM_OFFSETOF(<ref refid="struct_im_draw_vert" kindref="compound">ImDrawVert</ref>,<sp/>pos);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>attribute_desc[1].location<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>attribute_desc[1].binding<sp/>=<sp/>binding_desc[0].binding;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>attribute_desc[1].format<sp/>=<sp/>VK_FORMAT_R32G32_SFLOAT;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>attribute_desc[1].offset<sp/>=<sp/>IM_OFFSETOF(<ref refid="struct_im_draw_vert" kindref="compound">ImDrawVert</ref>,<sp/>uv);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>attribute_desc[2].location<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>attribute_desc[2].binding<sp/>=<sp/>binding_desc[0].binding;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>attribute_desc[2].format<sp/>=<sp/>VK_FORMAT_R8G8B8A8_UNORM;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>attribute_desc[2].offset<sp/>=<sp/>IM_OFFSETOF(<ref refid="struct_im_draw_vert" kindref="compound">ImDrawVert</ref>,<sp/>col);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_pipeline_vertex_input_state_create_info" kindref="compound">VkPipelineVertexInputStateCreateInfo</ref><sp/>vertex_info<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>vertex_info.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>vertex_info.vertexBindingDescriptionCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>vertex_info.pVertexBindingDescriptions<sp/>=<sp/>binding_desc;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>vertex_info.vertexAttributeDescriptionCount<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>vertex_info.pVertexAttributeDescriptions<sp/>=<sp/>attribute_desc;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_pipeline_input_assembly_state_create_info" kindref="compound">VkPipelineInputAssemblyStateCreateInfo</ref><sp/>ia_info<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>ia_info.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>ia_info.topology<sp/>=<sp/>VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_pipeline_viewport_state_create_info" kindref="compound">VkPipelineViewportStateCreateInfo</ref><sp/>viewport_info<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>viewport_info.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>viewport_info.viewportCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>viewport_info.scissorCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_pipeline_rasterization_state_create_info" kindref="compound">VkPipelineRasterizationStateCreateInfo</ref><sp/>raster_info<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>raster_info.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>raster_info.polygonMode<sp/>=<sp/>VK_POLYGON_MODE_FILL;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>raster_info.cullMode<sp/>=<sp/>VK_CULL_MODE_NONE;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>raster_info.frontFace<sp/>=<sp/>VK_FRONT_FACE_COUNTER_CLOCKWISE;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>raster_info.lineWidth<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_pipeline_multisample_state_create_info" kindref="compound">VkPipelineMultisampleStateCreateInfo</ref><sp/>ms_info<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>ms_info.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>ms_info.rasterizationSamples<sp/>=<sp/>(MSAASamples<sp/>!=<sp/>0)<sp/>?<sp/>MSAASamples<sp/>:<sp/>VK_SAMPLE_COUNT_1_BIT;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_pipeline_color_blend_attachment_state" kindref="compound">VkPipelineColorBlendAttachmentState</ref><sp/>color_attachment[1]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>color_attachment[0].blendEnable<sp/>=<sp/>VK_TRUE;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>color_attachment[0].srcColorBlendFactor<sp/>=<sp/>VK_BLEND_FACTOR_SRC_ALPHA;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/>color_attachment[0].dstColorBlendFactor<sp/>=<sp/>VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>color_attachment[0].colorBlendOp<sp/>=<sp/>VK_BLEND_OP_ADD;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>color_attachment[0].srcAlphaBlendFactor<sp/>=<sp/>VK_BLEND_FACTOR_ONE;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>color_attachment[0].dstAlphaBlendFactor<sp/>=<sp/>VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/>color_attachment[0].alphaBlendOp<sp/>=<sp/>VK_BLEND_OP_ADD;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>color_attachment[0].colorWriteMask<sp/>=<sp/>VK_COLOR_COMPONENT_R_BIT<sp/>|<sp/>VK_COLOR_COMPONENT_G_BIT<sp/>|<sp/>VK_COLOR_COMPONENT_B_BIT<sp/>|<sp/>VK_COLOR_COMPONENT_A_BIT;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_pipeline_depth_stencil_state_create_info" kindref="compound">VkPipelineDepthStencilStateCreateInfo</ref><sp/>depth_info<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>depth_info.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_pipeline_color_blend_state_create_info" kindref="compound">VkPipelineColorBlendStateCreateInfo</ref><sp/>blend_info<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>blend_info.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO;</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>blend_info.attachmentCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/>blend_info.pAttachments<sp/>=<sp/>color_attachment;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/>VkDynamicState<sp/>dynamic_states[2]<sp/>=<sp/>{<sp/>VK_DYNAMIC_STATE_VIEWPORT,<sp/>VK_DYNAMIC_STATE_SCISSOR<sp/>};</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_pipeline_dynamic_state_create_info" kindref="compound">VkPipelineDynamicStateCreateInfo</ref><sp/>dynamic_state<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>dynamic_state.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>dynamic_state.dynamicStateCount<sp/>=<sp/>(<ref refid="group__gtc__type__precision_1ga822ca53a9ad412504532838906276a99" kindref="member">uint32_t</ref>)IM_ARRAYSIZE(dynamic_states);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/>dynamic_state.pDynamicStates<sp/>=<sp/>dynamic_states;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplVulkan_CreatePipelineLayout(device,<sp/>allocator);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_graphics_pipeline_create_info" kindref="compound">VkGraphicsPipelineCreateInfo</ref><sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.flags<sp/>=<sp/>bd-&gt;PipelineCreateFlags;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.stageCount<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.pStages<sp/>=<sp/>stage;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.pVertexInputState<sp/>=<sp/>&amp;vertex_info;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.pInputAssemblyState<sp/>=<sp/>&amp;ia_info;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.pViewportState<sp/>=<sp/>&amp;viewport_info;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.pRasterizationState<sp/>=<sp/>&amp;raster_info;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.pMultisampleState<sp/>=<sp/>&amp;ms_info;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.pDepthStencilState<sp/>=<sp/>&amp;depth_info;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.pColorBlendState<sp/>=<sp/>&amp;blend_info;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.pDynamicState<sp/>=<sp/>&amp;dynamic_state;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.layout<sp/>=<sp/>bd-&gt;PipelineLayout;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.renderPass<sp/>=<sp/>renderPass;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.subpass<sp/>=<sp/>subpass;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>VkResult<sp/>err<sp/>=<sp/>vkCreateGraphicsPipelines(device,<sp/>pipelineCache,<sp/>1,<sp/>&amp;<ref refid="structinfo" kindref="compound">info</ref>,<sp/>allocator,<sp/>pipeline);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="931"><highlight class="normal">}</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ImGui_ImplVulkan_CreateDeviceObjects()</highlight></codeline>
<codeline lineno="934"><highlight class="normal">{</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___data" kindref="compound">ImGui_ImplVulkan_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplVulkan_GetBackendData();</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___init_info" kindref="compound">ImGui_ImplVulkan_InitInfo</ref>*<sp/>v<sp/>=<sp/>&amp;bd-&gt;VulkanInitInfo;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/>VkResult<sp/>err;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bd-&gt;FontSampler)</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_sampler_create_info" kindref="compound">VkSamplerCreateInfo</ref><sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.magFilter<sp/>=<sp/>VK_FILTER_LINEAR;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.minFilter<sp/>=<sp/>VK_FILTER_LINEAR;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.mipmapMode<sp/>=<sp/>VK_SAMPLER_MIPMAP_MODE_LINEAR;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.addressModeU<sp/>=<sp/>VK_SAMPLER_ADDRESS_MODE_REPEAT;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.addressModeV<sp/>=<sp/>VK_SAMPLER_ADDRESS_MODE_REPEAT;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.addressModeW<sp/>=<sp/>VK_SAMPLER_ADDRESS_MODE_REPEAT;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.minLod<sp/>=<sp/>-1000;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.maxLod<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.maxAnisotropy<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkCreateSampler(v-&gt;Device,<sp/>&amp;<ref refid="structinfo" kindref="compound">info</ref>,<sp/>v-&gt;Allocator,<sp/>&amp;bd-&gt;FontSampler);</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bd-&gt;DescriptorSetLayout)</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkSampler<sp/>sampler[1]<sp/>=<sp/>{bd-&gt;FontSampler};</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_descriptor_set_layout_binding" kindref="compound">VkDescriptorSetLayoutBinding</ref><sp/>binding[1]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binding[0].descriptorType<sp/>=<sp/>VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binding[0].descriptorCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binding[0].stageFlags<sp/>=<sp/>VK_SHADER_STAGE_FRAGMENT_BIT;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binding[0].pImmutableSamplers<sp/>=<sp/>sampler;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_descriptor_set_layout_create_info" kindref="compound">VkDescriptorSetLayoutCreateInfo</ref><sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.bindingCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.pBindings<sp/>=<sp/>binding;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkCreateDescriptorSetLayout(v-&gt;Device,<sp/>&amp;<ref refid="structinfo" kindref="compound">info</ref>,<sp/>v-&gt;Allocator,<sp/>&amp;bd-&gt;DescriptorSetLayout);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>Descriptor<sp/>Set:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_descriptor_set_allocate_info" kindref="compound">VkDescriptorSetAllocateInfo</ref><sp/>alloc_info<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloc_info.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloc_info.descriptorPool<sp/>=<sp/>v-&gt;DescriptorPool;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloc_info.descriptorSetCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alloc_info.pSetLayouts<sp/>=<sp/>&amp;bd-&gt;DescriptorSetLayout;</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkAllocateDescriptorSets(v-&gt;Device,<sp/>&amp;alloc_info,<sp/>&amp;bd-&gt;DescriptorSet);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bd-&gt;PipelineLayout)</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Constants:<sp/>we<sp/>are<sp/>using<sp/>&apos;vec2<sp/>offset&apos;<sp/>and<sp/>&apos;vec2<sp/>scale&apos;<sp/>instead<sp/>of<sp/>a<sp/>full<sp/>3d<sp/>projection<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_push_constant_range" kindref="compound">VkPushConstantRange</ref><sp/>push_constants[1]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>push_constants[0].stageFlags<sp/>=<sp/>VK_SHADER_STAGE_VERTEX_BIT;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>push_constants[0].offset<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float)<sp/>*<sp/>0;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>push_constants[0].size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float)<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkDescriptorSetLayout<sp/>set_layout[1]<sp/>=<sp/>{<sp/>bd-&gt;DescriptorSetLayout<sp/>};</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_pipeline_layout_create_info" kindref="compound">VkPipelineLayoutCreateInfo</ref><sp/>layout_info<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layout_info.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layout_info.setLayoutCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layout_info.pSetLayouts<sp/>=<sp/>set_layout;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layout_info.pushConstantRangeCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>layout_info.pPushConstantRanges<sp/>=<sp/>push_constants;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkCreatePipelineLayout(v-&gt;Device,<sp/>&amp;layout_info,<sp/>v-&gt;Allocator,<sp/>&amp;bd-&gt;PipelineLayout);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplVulkan_CreatePipeline(v-&gt;Device,<sp/>v-&gt;Allocator,<sp/>v-&gt;PipelineCache,<sp/>bd-&gt;RenderPass,<sp/>v-&gt;MSAASamples,<sp/>&amp;bd-&gt;Pipeline,<sp/>bd-&gt;Subpass);</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplVulkan_DestroyFontUploadObjects()</highlight></codeline>
<codeline lineno="1007"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___data" kindref="compound">ImGui_ImplVulkan_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplVulkan_GetBackendData();</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___init_info" kindref="compound">ImGui_ImplVulkan_InitInfo</ref>*<sp/>v<sp/>=<sp/>&amp;bd-&gt;VulkanInitInfo;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bd-&gt;UploadBuffer)</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkDestroyBuffer(v-&gt;Device,<sp/>bd-&gt;UploadBuffer,<sp/>v-&gt;Allocator);</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bd-&gt;UploadBuffer<sp/>=<sp/>VK_NULL_HANDLE;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bd-&gt;UploadBufferMemory)</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkFreeMemory(v-&gt;Device,<sp/>bd-&gt;UploadBufferMemory,<sp/>v-&gt;Allocator);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bd-&gt;UploadBufferMemory<sp/>=<sp/>VK_NULL_HANDLE;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplVulkan_DestroyDeviceObjects()</highlight></codeline>
<codeline lineno="1023"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___data" kindref="compound">ImGui_ImplVulkan_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplVulkan_GetBackendData();</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___init_info" kindref="compound">ImGui_ImplVulkan_InitInfo</ref>*<sp/>v<sp/>=<sp/>&amp;bd-&gt;VulkanInitInfo;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplVulkanH_DestroyAllViewportsRenderBuffers(v-&gt;Device,<sp/>v-&gt;Allocator);</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplVulkan_DestroyFontUploadObjects();</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bd-&gt;ShaderModuleVert)<sp/><sp/><sp/><sp/><sp/>{<sp/>vkDestroyShaderModule(v-&gt;Device,<sp/>bd-&gt;ShaderModuleVert,<sp/>v-&gt;Allocator);<sp/>bd-&gt;ShaderModuleVert<sp/>=<sp/>VK_NULL_HANDLE;<sp/>}</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bd-&gt;ShaderModuleFrag)<sp/><sp/><sp/><sp/><sp/>{<sp/>vkDestroyShaderModule(v-&gt;Device,<sp/>bd-&gt;ShaderModuleFrag,<sp/>v-&gt;Allocator);<sp/>bd-&gt;ShaderModuleFrag<sp/>=<sp/>VK_NULL_HANDLE;<sp/>}</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bd-&gt;FontView)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>vkDestroyImageView(v-&gt;Device,<sp/>bd-&gt;FontView,<sp/>v-&gt;Allocator);<sp/>bd-&gt;FontView<sp/>=<sp/>VK_NULL_HANDLE;<sp/>}</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bd-&gt;FontImage)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>vkDestroyImage(v-&gt;Device,<sp/>bd-&gt;FontImage,<sp/>v-&gt;Allocator);<sp/>bd-&gt;FontImage<sp/>=<sp/>VK_NULL_HANDLE;<sp/>}</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bd-&gt;FontMemory)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>vkFreeMemory(v-&gt;Device,<sp/>bd-&gt;FontMemory,<sp/>v-&gt;Allocator);<sp/>bd-&gt;FontMemory<sp/>=<sp/>VK_NULL_HANDLE;<sp/>}</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bd-&gt;FontSampler)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>vkDestroySampler(v-&gt;Device,<sp/>bd-&gt;FontSampler,<sp/>v-&gt;Allocator);<sp/>bd-&gt;FontSampler<sp/>=<sp/>VK_NULL_HANDLE;<sp/>}</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bd-&gt;DescriptorSetLayout)<sp/><sp/>{<sp/>vkDestroyDescriptorSetLayout(v-&gt;Device,<sp/>bd-&gt;DescriptorSetLayout,<sp/>v-&gt;Allocator);<sp/>bd-&gt;DescriptorSetLayout<sp/>=<sp/>VK_NULL_HANDLE;<sp/>}</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bd-&gt;PipelineLayout)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>vkDestroyPipelineLayout(v-&gt;Device,<sp/>bd-&gt;PipelineLayout,<sp/>v-&gt;Allocator);<sp/>bd-&gt;PipelineLayout<sp/>=<sp/>VK_NULL_HANDLE;<sp/>}</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bd-&gt;Pipeline)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>vkDestroyPipeline(v-&gt;Device,<sp/>bd-&gt;Pipeline,<sp/>v-&gt;Allocator);<sp/>bd-&gt;Pipeline<sp/>=<sp/>VK_NULL_HANDLE;<sp/>}</highlight></codeline>
<codeline lineno="1038"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplVulkan_LoadFunctions(PFN_vkVoidFunction(*loader_func)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>function_name,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_data),<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>user_data)</highlight></codeline>
<codeline lineno="1041"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>function<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>You<sp/>can<sp/>use<sp/>the<sp/>default<sp/>Vulkan<sp/>loader<sp/>using:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>ImGui_ImplVulkan_LoadFunctions([](const<sp/>char*<sp/>function_name,<sp/>void*)<sp/>{<sp/>return<sp/>vkGetInstanceProcAddr(your_vk_isntance,<sp/>function_name);<sp/>});</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>But<sp/>this<sp/>would<sp/>be<sp/>equivalent<sp/>to<sp/>not<sp/>setting<sp/>VK_NO_PROTOTYPES.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VK_NO_PROTOTYPES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMGUI_VULKAN_FUNC_LOAD(func)<sp/>\</highlight></codeline>
<codeline lineno="1048"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>func<sp/>=<sp/>reinterpret_cast&lt;decltype(func)&gt;(loader_func(#func,<sp/>user_data));<sp/>\</highlight></codeline>
<codeline lineno="1049"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(func<sp/>==<sp/>NULL)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1050"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/>IMGUI_VULKAN_FUNC_MAP(IMGUI_VULKAN_FUNC_LOAD)</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>IMGUI_VULKAN_FUNC_LOAD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_UNUSED(loader_func);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_UNUSED(user_data);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/>g_FunctionsLoaded<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplVulkan_Init(<ref refid="struct_im_gui___impl_vulkan___init_info" kindref="compound">ImGui_ImplVulkan_InitInfo</ref>*<sp/><ref refid="structinfo" kindref="compound">info</ref>,<sp/>VkRenderPass<sp/>render_pass)</highlight></codeline>
<codeline lineno="1062"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_ASSERT(g_FunctionsLoaded<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Need<sp/>to<sp/>call<sp/>ImGui_ImplVulkan_LoadFunctions()<sp/>if<sp/>IMGUI_IMPL_VULKAN_NO_PROTOTYPES<sp/>or<sp/>VK_NO_PROTOTYPES<sp/>are<sp/>set!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui_i_o" kindref="compound">ImGuiIO</ref>&amp;<sp/>io<sp/>=<sp/>ImGui::GetIO();</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_ASSERT(io.BackendRendererUserData<sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Already<sp/>initialized<sp/>a<sp/>renderer<sp/>backend!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>backend<sp/>capabilities<sp/>flags</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___data" kindref="compound">ImGui_ImplVulkan_Data</ref>*<sp/>bd<sp/>=<sp/>IM_NEW(<ref refid="struct_im_gui___impl_vulkan___data" kindref="compound">ImGui_ImplVulkan_Data</ref>)();</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/>io.BackendRendererUserData<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)bd;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>io.BackendRendererName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;imgui_impl_vulkan&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/>io.BackendFlags<sp/>|=<sp/>ImGuiBackendFlags_RendererHasVtxOffset;<sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>honor<sp/>the<sp/>ImDrawCmd::VtxOffset<sp/>field,<sp/>allowing<sp/>for<sp/>large<sp/>meshes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/>io.BackendFlags<sp/>|=<sp/>ImGuiBackendFlags_RendererHasViewports;<sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>create<sp/>multi-viewports<sp/>on<sp/>the<sp/>Renderer<sp/>side<sp/>(optional)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_ASSERT(<ref refid="structinfo" kindref="compound">info</ref>-&gt;Instance<sp/>!=<sp/>VK_NULL_HANDLE);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_ASSERT(<ref refid="structinfo" kindref="compound">info</ref>-&gt;PhysicalDevice<sp/>!=<sp/>VK_NULL_HANDLE);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_ASSERT(<ref refid="structinfo" kindref="compound">info</ref>-&gt;Device<sp/>!=<sp/>VK_NULL_HANDLE);</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_ASSERT(<ref refid="structinfo" kindref="compound">info</ref>-&gt;Queue<sp/>!=<sp/>VK_NULL_HANDLE);</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_ASSERT(<ref refid="structinfo" kindref="compound">info</ref>-&gt;DescriptorPool<sp/>!=<sp/>VK_NULL_HANDLE);</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_ASSERT(<ref refid="structinfo" kindref="compound">info</ref>-&gt;MinImageCount<sp/>&gt;=<sp/>2);</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_ASSERT(<ref refid="structinfo" kindref="compound">info</ref>-&gt;ImageCount<sp/>&gt;=<sp/><ref refid="structinfo" kindref="compound">info</ref>-&gt;MinImageCount);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_ASSERT(render_pass<sp/>!=<sp/>VK_NULL_HANDLE);</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>bd-&gt;VulkanInitInfo<sp/>=<sp/>*<ref refid="structinfo" kindref="compound">info</ref>;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>bd-&gt;RenderPass<sp/>=<sp/>render_pass;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/>bd-&gt;Subpass<sp/>=<sp/><ref refid="structinfo" kindref="compound">info</ref>-&gt;Subpass;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplVulkan_CreateDeviceObjects();</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Our<sp/>render<sp/>function<sp/>expect<sp/>RendererUserData<sp/>to<sp/>be<sp/>storing<sp/>the<sp/>window<sp/>render<sp/>buffer<sp/>we<sp/>need<sp/>(for<sp/>the<sp/>main<sp/>viewport<sp/>we<sp/>won&apos;t<sp/>use<sp/>-&gt;Window)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui_viewport" kindref="compound">ImGuiViewport</ref>*<sp/>main_viewport<sp/>=<sp/>ImGui::GetMainViewport();</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/>main_viewport-&gt;RendererUserData<sp/>=<sp/>IM_NEW(<ref refid="struct_im_gui___impl_vulkan___viewport_data" kindref="compound">ImGui_ImplVulkan_ViewportData</ref>)();</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(io.ConfigFlags<sp/>&amp;<sp/>ImGuiConfigFlags_ViewportsEnable)</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui_ImplVulkan_InitPlatformInterface();</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplVulkan_Shutdown()</highlight></codeline>
<codeline lineno="1101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___data" kindref="compound">ImGui_ImplVulkan_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplVulkan_GetBackendData();</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_ASSERT(bd<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>renderer<sp/>backend<sp/>to<sp/>shutdown,<sp/>or<sp/>already<sp/>shutdown?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui_i_o" kindref="compound">ImGuiIO</ref>&amp;<sp/>io<sp/>=<sp/>ImGui::GetIO();</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>destroy<sp/>objects<sp/>in<sp/>all<sp/>viewports</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplVulkan_DestroyDeviceObjects();</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Manually<sp/>delete<sp/>main<sp/>viewport<sp/>render<sp/>data<sp/>in-case<sp/>we<sp/>haven&apos;t<sp/>initialized<sp/>for<sp/>viewports</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui_viewport" kindref="compound">ImGuiViewport</ref>*<sp/>main_viewport<sp/>=<sp/>ImGui::GetMainViewport();</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_im_gui___impl_vulkan___viewport_data" kindref="compound">ImGui_ImplVulkan_ViewportData</ref>*<sp/>vd<sp/>=<sp/>(<ref refid="struct_im_gui___impl_vulkan___viewport_data" kindref="compound">ImGui_ImplVulkan_ViewportData</ref>*)main_viewport-&gt;RendererUserData)</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IM_DELETE(vd);</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/>main_viewport-&gt;RendererUserData<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clean<sp/>up<sp/>windows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplVulkan_ShutdownPlatformInterface();</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/>io.BackendRendererName<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>io.BackendRendererUserData<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_DELETE(bd);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplVulkan_NewFrame()</highlight></codeline>
<codeline lineno="1124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___data" kindref="compound">ImGui_ImplVulkan_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplVulkan_GetBackendData();</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_ASSERT(bd<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Did<sp/>you<sp/>call<sp/>ImGui_ImplVulkan_Init()?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_UNUSED(bd);</highlight></codeline>
<codeline lineno="1128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplVulkan_SetMinImageCount(uint32_t<sp/>min_image_count)</highlight></codeline>
<codeline lineno="1131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___data" kindref="compound">ImGui_ImplVulkan_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplVulkan_GetBackendData();</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_ASSERT(min_image_count<sp/>&gt;=<sp/>2);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bd-&gt;VulkanInitInfo.MinImageCount<sp/>==<sp/>min_image_count)</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_ASSERT(0);<sp/></highlight><highlight class="comment">//<sp/>FIXME-VIEWPORT:<sp/>Unsupported.<sp/>Need<sp/>to<sp/>recreate<sp/>all<sp/>swap<sp/>chains!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___init_info" kindref="compound">ImGui_ImplVulkan_InitInfo</ref>*<sp/>v<sp/>=<sp/>&amp;bd-&gt;VulkanInitInfo;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/>VkResult<sp/>err<sp/>=<sp/>vkDeviceWaitIdle(v-&gt;Device);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplVulkanH_DestroyAllViewportsRenderBuffers(v-&gt;Device,<sp/>v-&gt;Allocator);</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>bd-&gt;VulkanInitInfo.MinImageCount<sp/>=<sp/>min_image_count;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Internal<sp/>/<sp/>Miscellaneous<sp/>Vulkan<sp/>Helpers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(Used<sp/>by<sp/>example&apos;s<sp/>main.cpp.<sp/>Used<sp/>by<sp/>multi-viewport<sp/>features.<sp/>PROBABLY<sp/>NOT<sp/>used<sp/>by<sp/>your<sp/>own<sp/>app.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>probably<sp/>do<sp/>NOT<sp/>need<sp/>to<sp/>use<sp/>or<sp/>care<sp/>about<sp/>those<sp/>functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Those<sp/>functions<sp/>only<sp/>exist<sp/>because:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>1)<sp/>they<sp/>facilitate<sp/>the<sp/>readability<sp/>and<sp/>maintenance<sp/>of<sp/>the<sp/>multiple<sp/>main.cpp<sp/>examples<sp/>files.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>2)<sp/>the<sp/>upcoming<sp/>multi-viewport<sp/>feature<sp/>will<sp/>need<sp/>them<sp/>internally.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generally<sp/>we<sp/>avoid<sp/>exposing<sp/>any<sp/>kind<sp/>of<sp/>superfluous<sp/>high-level<sp/>helpers<sp/>in<sp/>the<sp/>backends,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>it<sp/>is<sp/>too<sp/>much<sp/>code<sp/>to<sp/>duplicate<sp/>everywhere<sp/>so<sp/>we<sp/>exceptionally<sp/>expose<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Your<sp/>engine/app<sp/>will<sp/>likely<sp/>_already_<sp/>have<sp/>code<sp/>to<sp/>setup<sp/>all<sp/>that<sp/>stuff<sp/>(swap<sp/>chain,<sp/>render<sp/>pass,<sp/>frame<sp/>buffers,<sp/>etc.).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>read<sp/>this<sp/>code<sp/>to<sp/>learn<sp/>about<sp/>Vulkan,<sp/>but<sp/>it<sp/>is<sp/>recommended<sp/>you<sp/>use<sp/>you<sp/>own<sp/>custom<sp/>tailored<sp/>code<sp/>to<sp/>do<sp/>equivalent<sp/>work.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(The<sp/>ImGui_ImplVulkanH_XXX<sp/>functions<sp/>do<sp/>not<sp/>interact<sp/>with<sp/>any<sp/>of<sp/>the<sp/>state<sp/>used<sp/>by<sp/>the<sp/>regular<sp/>ImGui_ImplVulkan_XXX<sp/>functions)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><ref refid="struct_vk_surface_format_k_h_r" kindref="compound">VkSurfaceFormatKHR</ref><sp/>ImGui_ImplVulkanH_SelectSurfaceFormat(VkPhysicalDevice<sp/>physical_device,<sp/>VkSurfaceKHR<sp/>surface,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkFormat*<sp/>request_formats,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>request_formats_count,<sp/>VkColorSpaceKHR<sp/>request_color_space)</highlight></codeline>
<codeline lineno="1164"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_ASSERT(g_FunctionsLoaded<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Need<sp/>to<sp/>call<sp/>ImGui_ImplVulkan_LoadFunctions()<sp/>if<sp/>IMGUI_IMPL_VULKAN_NO_PROTOTYPES<sp/>or<sp/>VK_NO_PROTOTYPES<sp/>are<sp/>set!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_ASSERT(request_formats<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_ASSERT(request_formats_count<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Per<sp/>Spec<sp/>Format<sp/>and<sp/>View<sp/>Format<sp/>are<sp/>expected<sp/>to<sp/>be<sp/>the<sp/>same<sp/>unless<sp/>VK_IMAGE_CREATE_MUTABLE_BIT<sp/>was<sp/>set<sp/>at<sp/>image<sp/>creation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assuming<sp/>that<sp/>the<sp/>default<sp/>behavior<sp/>is<sp/>without<sp/>setting<sp/>this<sp/>bit,<sp/>there<sp/>is<sp/>no<sp/>need<sp/>for<sp/>separate<sp/>Swapchain<sp/>image<sp/>and<sp/>image<sp/>view<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Additionally<sp/>several<sp/>new<sp/>color<sp/>spaces<sp/>were<sp/>introduced<sp/>with<sp/>Vulkan<sp/>Spec<sp/>v1.0.40,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hence<sp/>we<sp/>must<sp/>make<sp/>sure<sp/>that<sp/>a<sp/>format<sp/>with<sp/>the<sp/>mostly<sp/>available<sp/>color<sp/>space,<sp/>VK_COLOR_SPACE_SRGB_NONLINEAR_KHR,<sp/>is<sp/>found<sp/>and<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>avail_count;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/>vkGetPhysicalDeviceSurfaceFormatsKHR(physical_device,<sp/>surface,<sp/>&amp;avail_count,<sp/>NULL);</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_vector" kindref="compound">ImVector&lt;VkSurfaceFormatKHR&gt;</ref><sp/>avail_format;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>avail_format.resize((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)avail_count);</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/>vkGetPhysicalDeviceSurfaceFormatsKHR(physical_device,<sp/>surface,<sp/>&amp;avail_count,<sp/>avail_format.Data);</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>check<sp/>if<sp/>only<sp/>one<sp/>format,<sp/>VK_FORMAT_UNDEFINED,<sp/>is<sp/>available,<sp/>which<sp/>would<sp/>imply<sp/>that<sp/>any<sp/>format<sp/>is<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(avail_count<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(avail_format[0].format<sp/>==<sp/>VK_FORMAT_UNDEFINED)</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_surface_format_k_h_r" kindref="compound">VkSurfaceFormatKHR</ref><sp/>ret;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.format<sp/>=<sp/>request_formats[0];</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret.colorSpace<sp/>=<sp/>request_color_space;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>point<sp/>in<sp/>searching<sp/>another<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>avail_format[0];</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Request<sp/>several<sp/>formats,<sp/>the<sp/>first<sp/>found<sp/>will<sp/>be<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>request_i<sp/>=<sp/>0;<sp/>request_i<sp/>&lt;<sp/>request_formats_count;<sp/>request_i++)</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>avail_i<sp/>=<sp/>0;<sp/>avail_i<sp/>&lt;<sp/>avail_count;<sp/>avail_i++)</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(avail_format[avail_i].format<sp/>==<sp/>request_formats[request_i]<sp/>&amp;&amp;<sp/>avail_format[avail_i].colorSpace<sp/>==<sp/>request_color_space)</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>avail_format[avail_i];</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>none<sp/>of<sp/>the<sp/>requested<sp/>image<sp/>formats<sp/>could<sp/>be<sp/>found,<sp/>use<sp/>the<sp/>first<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>avail_format[0];</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal">VkPresentModeKHR<sp/>ImGui_ImplVulkanH_SelectPresentMode(VkPhysicalDevice<sp/>physical_device,<sp/>VkSurfaceKHR<sp/>surface,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkPresentModeKHR*<sp/>request_modes,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>request_modes_count)</highlight></codeline>
<codeline lineno="1209"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_ASSERT(g_FunctionsLoaded<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Need<sp/>to<sp/>call<sp/>ImGui_ImplVulkan_LoadFunctions()<sp/>if<sp/>IMGUI_IMPL_VULKAN_NO_PROTOTYPES<sp/>or<sp/>VK_NO_PROTOTYPES<sp/>are<sp/>set!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_ASSERT(request_modes<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_ASSERT(request_modes_count<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Request<sp/>a<sp/>certain<sp/>mode<sp/>and<sp/>confirm<sp/>that<sp/>it<sp/>is<sp/>available.<sp/>If<sp/>not<sp/>use<sp/>VK_PRESENT_MODE_FIFO_KHR<sp/>which<sp/>is<sp/>mandatory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>avail_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/>vkGetPhysicalDeviceSurfacePresentModesKHR(physical_device,<sp/>surface,<sp/>&amp;avail_count,<sp/>NULL);</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_vector" kindref="compound">ImVector&lt;VkPresentModeKHR&gt;</ref><sp/>avail_modes;</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/>avail_modes.resize((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)avail_count);</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/>vkGetPhysicalDeviceSurfacePresentModesKHR(physical_device,<sp/>surface,<sp/>&amp;avail_count,<sp/>avail_modes.Data);</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//for<sp/>(uint32_t<sp/>avail_i<sp/>=<sp/>0;<sp/>avail_i<sp/>&lt;<sp/>avail_count;<sp/>avail_i++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>printf(&quot;[vulkan]<sp/>avail_modes[%d]<sp/>=<sp/>%d\n&quot;,<sp/>avail_i,<sp/>avail_modes[avail_i]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>request_i<sp/>=<sp/>0;<sp/>request_i<sp/>&lt;<sp/>request_modes_count;<sp/>request_i++)</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>avail_i<sp/>=<sp/>0;<sp/>avail_i<sp/>&lt;<sp/>avail_count;<sp/>avail_i++)</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(request_modes[request_i]<sp/>==<sp/>avail_modes[avail_i])</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>request_modes[request_i];</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VK_PRESENT_MODE_FIFO_KHR;<sp/></highlight><highlight class="comment">//<sp/>Always<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplVulkanH_CreateWindowCommandBuffers(VkPhysicalDevice<sp/>physical_device,<sp/>VkDevice<sp/>device,<sp/><ref refid="struct_im_gui___impl_vulkan_h___window" kindref="compound">ImGui_ImplVulkanH_Window</ref>*<sp/>wd,<sp/>uint32_t<sp/>queue_family,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_allocation_callbacks" kindref="compound">VkAllocationCallbacks</ref>*<sp/>allocator)</highlight></codeline>
<codeline lineno="1232"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_ASSERT(physical_device<sp/>!=<sp/>VK_NULL_HANDLE<sp/>&amp;&amp;<sp/>device<sp/>!=<sp/>VK_NULL_HANDLE);</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)physical_device;</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)allocator;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>Command<sp/>Buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/>VkResult<sp/>err;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>wd-&gt;ImageCount;<sp/>i++)</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan_h___frame" kindref="compound">ImGui_ImplVulkanH_Frame</ref>*<sp/>fd<sp/>=<sp/>&amp;wd-&gt;Frames[i];</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan_h___frame_semaphores" kindref="compound">ImGui_ImplVulkanH_FrameSemaphores</ref>*<sp/>fsd<sp/>=<sp/>&amp;wd-&gt;FrameSemaphores[i];</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_command_pool_create_info" kindref="compound">VkCommandPoolCreateInfo</ref><sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO;</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.flags<sp/>=<sp/>VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT;</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.queueFamilyIndex<sp/>=<sp/>queue_family;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkCreateCommandPool(device,<sp/>&amp;<ref refid="structinfo" kindref="compound">info</ref>,<sp/>allocator,<sp/>&amp;fd-&gt;CommandPool);</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_command_buffer_allocate_info" kindref="compound">VkCommandBufferAllocateInfo</ref><sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.commandPool<sp/>=<sp/>fd-&gt;CommandPool;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.level<sp/>=<sp/>VK_COMMAND_BUFFER_LEVEL_PRIMARY;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.commandBufferCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkAllocateCommandBuffers(device,<sp/>&amp;<ref refid="structinfo" kindref="compound">info</ref>,<sp/>&amp;fd-&gt;CommandBuffer);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_fence_create_info" kindref="compound">VkFenceCreateInfo</ref><sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_FENCE_CREATE_INFO;</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.flags<sp/>=<sp/>VK_FENCE_CREATE_SIGNALED_BIT;</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkCreateFence(device,<sp/>&amp;<ref refid="structinfo" kindref="compound">info</ref>,<sp/>allocator,<sp/>&amp;fd-&gt;Fence);</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_semaphore_create_info" kindref="compound">VkSemaphoreCreateInfo</ref><sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkCreateSemaphore(device,<sp/>&amp;<ref refid="structinfo" kindref="compound">info</ref>,<sp/>allocator,<sp/>&amp;fsd-&gt;ImageAcquiredSemaphore);</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkCreateSemaphore(device,<sp/>&amp;<ref refid="structinfo" kindref="compound">info</ref>,<sp/>allocator,<sp/>&amp;fsd-&gt;RenderCompleteSemaphore);</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ImGui_ImplVulkanH_GetMinImageCountFromPresentMode(VkPresentModeKHR<sp/>present_mode)</highlight></codeline>
<codeline lineno="1279"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(present_mode<sp/>==<sp/>VK_PRESENT_MODE_MAILBOX_KHR)</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>3;</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(present_mode<sp/>==<sp/>VK_PRESENT_MODE_FIFO_KHR<sp/>||<sp/>present_mode<sp/>==<sp/>VK_PRESENT_MODE_FIFO_RELAXED_KHR)</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(present_mode<sp/>==<sp/>VK_PRESENT_MODE_IMMEDIATE_KHR)</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_ASSERT(0);</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="1288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Also<sp/>destroy<sp/>old<sp/>swap<sp/>chain<sp/>and<sp/>in-flight<sp/>frames<sp/>data,<sp/>if<sp/>any.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplVulkanH_CreateWindowSwapChain(VkPhysicalDevice<sp/>physical_device,<sp/>VkDevice<sp/>device,<sp/><ref refid="struct_im_gui___impl_vulkan_h___window" kindref="compound">ImGui_ImplVulkanH_Window</ref>*<sp/>wd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_allocation_callbacks" kindref="compound">VkAllocationCallbacks</ref>*<sp/>allocator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/>uint32_t<sp/>min_image_count)</highlight></codeline>
<codeline lineno="1292"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/>VkResult<sp/>err;</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/>VkSwapchainKHR<sp/>old_swapchain<sp/>=<sp/>wd-&gt;Swapchain;</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/>wd-&gt;Swapchain<sp/>=<sp/>VK_NULL_HANDLE;</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkDeviceWaitIdle(device);</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>use<sp/>ImGui_ImplVulkanH_DestroyWindow()<sp/>because<sp/>we<sp/>want<sp/>to<sp/>preserve<sp/>the<sp/>old<sp/>swapchain<sp/>to<sp/>create<sp/>the<sp/>new<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Destroy<sp/>old<sp/>Framebuffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>wd-&gt;ImageCount;<sp/>i++)</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui_ImplVulkanH_DestroyFrame(device,<sp/>&amp;wd-&gt;Frames[i],<sp/>allocator);</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui_ImplVulkanH_DestroyFrameSemaphores(device,<sp/>&amp;wd-&gt;FrameSemaphores[i],<sp/>allocator);</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_FREE(wd-&gt;Frames);</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_FREE(wd-&gt;FrameSemaphores);</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/>wd-&gt;Frames<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/>wd-&gt;FrameSemaphores<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/>wd-&gt;ImageCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wd-&gt;RenderPass)</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkDestroyRenderPass(device,<sp/>wd-&gt;RenderPass,<sp/>allocator);</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wd-&gt;Pipeline)</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkDestroyPipeline(device,<sp/>wd-&gt;Pipeline,<sp/>allocator);</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>min<sp/>image<sp/>count<sp/>was<sp/>not<sp/>specified,<sp/>request<sp/>different<sp/>count<sp/>of<sp/>images<sp/>dependent<sp/>on<sp/>selected<sp/>present<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(min_image_count<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min_image_count<sp/>=<sp/>ImGui_ImplVulkanH_GetMinImageCountFromPresentMode(wd-&gt;PresentMode);</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>Swapchain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_swapchain_create_info_k_h_r" kindref="compound">VkSwapchainCreateInfoKHR</ref><sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR;</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.surface<sp/>=<sp/>wd-&gt;Surface;</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.minImageCount<sp/>=<sp/>min_image_count;</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.imageFormat<sp/>=<sp/>wd-&gt;SurfaceFormat.format;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.imageColorSpace<sp/>=<sp/>wd-&gt;SurfaceFormat.colorSpace;</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.imageArrayLayers<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.imageUsage<sp/>=<sp/>VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT;</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.imageSharingMode<sp/>=<sp/>VK_SHARING_MODE_EXCLUSIVE;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assume<sp/>that<sp/>graphics<sp/>family<sp/>==<sp/>present<sp/>family</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.preTransform<sp/>=<sp/>VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR;</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.compositeAlpha<sp/>=<sp/>VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR;</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.presentMode<sp/>=<sp/>wd-&gt;PresentMode;</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.clipped<sp/>=<sp/>VK_TRUE;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.oldSwapchain<sp/>=<sp/>old_swapchain;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_surface_capabilities_k_h_r" kindref="compound">VkSurfaceCapabilitiesKHR</ref><sp/>cap;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physical_device,<sp/>wd-&gt;Surface,<sp/>&amp;cap);</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structinfo" kindref="compound">info</ref>.minImageCount<sp/>&lt;<sp/>cap.minImageCount)</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.minImageCount<sp/>=<sp/>cap.minImageCount;</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cap.maxImageCount<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/><ref refid="structinfo" kindref="compound">info</ref>.minImageCount<sp/>&gt;<sp/>cap.maxImageCount)</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.minImageCount<sp/>=<sp/>cap.maxImageCount;</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cap.currentExtent.width<sp/>==<sp/>0xffffffff)</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.imageExtent.width<sp/>=<sp/>wd-&gt;Width<sp/>=<sp/>w;</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.imageExtent.height<sp/>=<sp/>wd-&gt;Height<sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.imageExtent.width<sp/>=<sp/>wd-&gt;Width<sp/>=<sp/>cap.currentExtent.width;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.imageExtent.height<sp/>=<sp/>wd-&gt;Height<sp/>=<sp/>cap.currentExtent.height;</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkCreateSwapchainKHR(device,<sp/>&amp;<ref refid="structinfo" kindref="compound">info</ref>,<sp/>allocator,<sp/>&amp;wd-&gt;Swapchain);</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkGetSwapchainImagesKHR(device,<sp/>wd-&gt;Swapchain,<sp/>&amp;wd-&gt;ImageCount,<sp/>NULL);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkImage<sp/>backbuffers[16]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IM_ASSERT(wd-&gt;ImageCount<sp/>&gt;=<sp/>min_image_count);</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IM_ASSERT(wd-&gt;ImageCount<sp/>&lt;<sp/>IM_ARRAYSIZE(backbuffers));</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkGetSwapchainImagesKHR(device,<sp/>wd-&gt;Swapchain,<sp/>&amp;wd-&gt;ImageCount,<sp/>backbuffers);</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IM_ASSERT(wd-&gt;Frames<sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wd-&gt;Frames<sp/>=<sp/>(<ref refid="struct_im_gui___impl_vulkan_h___frame" kindref="compound">ImGui_ImplVulkanH_Frame</ref>*)IM_ALLOC(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_im_gui___impl_vulkan_h___frame" kindref="compound">ImGui_ImplVulkanH_Frame</ref>)<sp/>*<sp/>wd-&gt;ImageCount);</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wd-&gt;FrameSemaphores<sp/>=<sp/>(<ref refid="struct_im_gui___impl_vulkan_h___frame_semaphores" kindref="compound">ImGui_ImplVulkanH_FrameSemaphores</ref>*)IM_ALLOC(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_im_gui___impl_vulkan_h___frame_semaphores" kindref="compound">ImGui_ImplVulkanH_FrameSemaphores</ref>)<sp/>*<sp/>wd-&gt;ImageCount);</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(wd-&gt;Frames,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(wd-&gt;Frames[0])<sp/>*<sp/>wd-&gt;ImageCount);</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(wd-&gt;FrameSemaphores,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(wd-&gt;FrameSemaphores[0])<sp/>*<sp/>wd-&gt;ImageCount);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>wd-&gt;ImageCount;<sp/>i++)</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wd-&gt;Frames[i].Backbuffer<sp/>=<sp/>backbuffers[i];</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(old_swapchain)</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkDestroySwapchainKHR(device,<sp/>old_swapchain,<sp/>allocator);</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>Render<sp/>Pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_attachment_description" kindref="compound">VkAttachmentDescription</ref><sp/>attachment<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attachment.format<sp/>=<sp/>wd-&gt;SurfaceFormat.format;</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attachment.samples<sp/>=<sp/>VK_SAMPLE_COUNT_1_BIT;</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attachment.loadOp<sp/>=<sp/>wd-&gt;ClearEnable<sp/>?<sp/>VK_ATTACHMENT_LOAD_OP_CLEAR<sp/>:<sp/>VK_ATTACHMENT_LOAD_OP_DONT_CARE;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attachment.storeOp<sp/>=<sp/>VK_ATTACHMENT_STORE_OP_STORE;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attachment.stencilLoadOp<sp/>=<sp/>VK_ATTACHMENT_LOAD_OP_DONT_CARE;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attachment.stencilStoreOp<sp/>=<sp/>VK_ATTACHMENT_STORE_OP_DONT_CARE;</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attachment.initialLayout<sp/>=<sp/>VK_IMAGE_LAYOUT_UNDEFINED;</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attachment.finalLayout<sp/>=<sp/>VK_IMAGE_LAYOUT_PRESENT_SRC_KHR;</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_attachment_reference" kindref="compound">VkAttachmentReference</ref><sp/>color_attachment<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color_attachment.attachment<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color_attachment.layout<sp/>=<sp/>VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL;</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_subpass_description" kindref="compound">VkSubpassDescription</ref><sp/>subpass<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subpass.pipelineBindPoint<sp/>=<sp/>VK_PIPELINE_BIND_POINT_GRAPHICS;</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subpass.colorAttachmentCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>subpass.pColorAttachments<sp/>=<sp/>&amp;color_attachment;</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_subpass_dependency" kindref="compound">VkSubpassDependency</ref><sp/>dependency<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dependency.srcSubpass<sp/>=<sp/>VK_SUBPASS_EXTERNAL;</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dependency.dstSubpass<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dependency.srcStageMask<sp/>=<sp/>VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT;</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dependency.dstStageMask<sp/>=<sp/>VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT;</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dependency.srcAccessMask<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dependency.dstAccessMask<sp/>=<sp/>VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_render_pass_create_info" kindref="compound">VkRenderPassCreateInfo</ref><sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO;</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.attachmentCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.pAttachments<sp/>=<sp/>&amp;attachment;</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.subpassCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.pSubpasses<sp/>=<sp/>&amp;subpass;</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.dependencyCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.pDependencies<sp/>=<sp/>&amp;dependency;</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkCreateRenderPass(device,<sp/>&amp;<ref refid="structinfo" kindref="compound">info</ref>,<sp/>allocator,<sp/>&amp;wd-&gt;RenderPass);</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>do<sp/>not<sp/>create<sp/>a<sp/>pipeline<sp/>by<sp/>default<sp/>as<sp/>this<sp/>is<sp/>also<sp/>used<sp/>by<sp/>examples&apos;<sp/>main.cpp,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>secondary<sp/>viewport<sp/>in<sp/>multi-viewport<sp/>mode<sp/>may<sp/>want<sp/>to<sp/>create<sp/>one<sp/>with:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ImGui_ImplVulkan_CreatePipeline(device,<sp/>allocator,<sp/>VK_NULL_HANDLE,<sp/>wd-&gt;RenderPass,<sp/>VK_SAMPLE_COUNT_1_BIT,<sp/>&amp;wd-&gt;Pipeline,<sp/>bd-&gt;Subpass);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>The<sp/>Image<sp/>Views</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_image_view_create_info" kindref="compound">VkImageViewCreateInfo</ref><sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO;</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.viewType<sp/>=<sp/>VK_IMAGE_VIEW_TYPE_2D;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.format<sp/>=<sp/>wd-&gt;SurfaceFormat.format;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.components.r<sp/>=<sp/>VK_COMPONENT_SWIZZLE_R;</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.components.g<sp/>=<sp/>VK_COMPONENT_SWIZZLE_G;</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.components.b<sp/>=<sp/>VK_COMPONENT_SWIZZLE_B;</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.components.a<sp/>=<sp/>VK_COMPONENT_SWIZZLE_A;</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_image_subresource_range" kindref="compound">VkImageSubresourceRange</ref><sp/>image_range<sp/>=<sp/>{<sp/>VK_IMAGE_ASPECT_COLOR_BIT,<sp/>0,<sp/>1,<sp/>0,<sp/>1<sp/>};</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.subresourceRange<sp/>=<sp/>image_range;</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>wd-&gt;ImageCount;<sp/>i++)</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan_h___frame" kindref="compound">ImGui_ImplVulkanH_Frame</ref>*<sp/>fd<sp/>=<sp/>&amp;wd-&gt;Frames[i];</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.image<sp/>=<sp/>fd-&gt;Backbuffer;</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkCreateImageView(device,<sp/>&amp;<ref refid="structinfo" kindref="compound">info</ref>,<sp/>allocator,<sp/>&amp;fd-&gt;BackbufferView);</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>Framebuffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkImageView<sp/>attachment[1];</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_framebuffer_create_info" kindref="compound">VkFramebufferCreateInfo</ref><sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.renderPass<sp/>=<sp/>wd-&gt;RenderPass;</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.attachmentCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.pAttachments<sp/>=<sp/>attachment;</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.width<sp/>=<sp/>wd-&gt;Width;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.height<sp/>=<sp/>wd-&gt;Height;</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.layers<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>wd-&gt;ImageCount;<sp/>i++)</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan_h___frame" kindref="compound">ImGui_ImplVulkanH_Frame</ref>*<sp/>fd<sp/>=<sp/>&amp;wd-&gt;Frames[i];</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attachment[0]<sp/>=<sp/>fd-&gt;BackbufferView;</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkCreateFramebuffer(device,<sp/>&amp;<ref refid="structinfo" kindref="compound">info</ref>,<sp/>allocator,<sp/>&amp;fd-&gt;Framebuffer);</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>or<sp/>resize<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplVulkanH_CreateOrResizeWindow(VkInstance<sp/>instance,<sp/>VkPhysicalDevice<sp/>physical_device,<sp/>VkDevice<sp/>device,<sp/><ref refid="struct_im_gui___impl_vulkan_h___window" kindref="compound">ImGui_ImplVulkanH_Window</ref>*<sp/>wd,<sp/>uint32_t<sp/>queue_family,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_allocation_callbacks" kindref="compound">VkAllocationCallbacks</ref>*<sp/>allocator,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height,<sp/>uint32_t<sp/>min_image_count)</highlight></codeline>
<codeline lineno="1460"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_ASSERT(g_FunctionsLoaded<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Need<sp/>to<sp/>call<sp/>ImGui_ImplVulkan_LoadFunctions()<sp/>if<sp/>IMGUI_IMPL_VULKAN_NO_PROTOTYPES<sp/>or<sp/>VK_NO_PROTOTYPES<sp/>are<sp/>set!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)instance;</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplVulkanH_CreateWindowSwapChain(physical_device,<sp/>device,<sp/>wd,<sp/>allocator,<sp/>width,<sp/>height,<sp/>min_image_count);</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ImGui_ImplVulkan_CreatePipeline(device,<sp/>allocator,<sp/>VK_NULL_HANDLE,<sp/>wd-&gt;RenderPass,<sp/>VK_SAMPLE_COUNT_1_BIT,<sp/>&amp;wd-&gt;Pipeline,<sp/>g_VulkanInitInfo.Subpass);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplVulkanH_CreateWindowCommandBuffers(physical_device,<sp/>device,<sp/>wd,<sp/>queue_family,<sp/>allocator);</highlight></codeline>
<codeline lineno="1466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplVulkanH_DestroyWindow(VkInstance<sp/>instance,<sp/>VkDevice<sp/>device,<sp/><ref refid="struct_im_gui___impl_vulkan_h___window" kindref="compound">ImGui_ImplVulkanH_Window</ref>*<sp/>wd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_allocation_callbacks" kindref="compound">VkAllocationCallbacks</ref>*<sp/>allocator)</highlight></codeline>
<codeline lineno="1469"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDeviceWaitIdle(device);<sp/></highlight><highlight class="comment">//<sp/>FIXME:<sp/>We<sp/>could<sp/>wait<sp/>on<sp/>the<sp/>Queue<sp/>if<sp/>we<sp/>had<sp/>the<sp/>queue<sp/>in<sp/>wd-&gt;<sp/>(otherwise<sp/>VulkanH<sp/>functions<sp/>can&apos;t<sp/>use<sp/>globals)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//vkQueueWaitIdle(bd-&gt;Queue);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>wd-&gt;ImageCount;<sp/>i++)</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui_ImplVulkanH_DestroyFrame(device,<sp/>&amp;wd-&gt;Frames[i],<sp/>allocator);</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui_ImplVulkanH_DestroyFrameSemaphores(device,<sp/>&amp;wd-&gt;FrameSemaphores[i],<sp/>allocator);</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_FREE(wd-&gt;Frames);</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_FREE(wd-&gt;FrameSemaphores);</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/>wd-&gt;Frames<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/>wd-&gt;FrameSemaphores<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyPipeline(device,<sp/>wd-&gt;Pipeline,<sp/>allocator);</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyRenderPass(device,<sp/>wd-&gt;RenderPass,<sp/>allocator);</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroySwapchainKHR(device,<sp/>wd-&gt;Swapchain,<sp/>allocator);</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroySurfaceKHR(instance,<sp/>wd-&gt;Surface,<sp/>allocator);</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/>*wd<sp/>=<sp/><ref refid="struct_im_gui___impl_vulkan_h___window" kindref="compound">ImGui_ImplVulkanH_Window</ref>();</highlight></codeline>
<codeline lineno="1488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplVulkanH_DestroyFrame(VkDevice<sp/>device,<sp/><ref refid="struct_im_gui___impl_vulkan_h___frame" kindref="compound">ImGui_ImplVulkanH_Frame</ref>*<sp/>fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_allocation_callbacks" kindref="compound">VkAllocationCallbacks</ref>*<sp/>allocator)</highlight></codeline>
<codeline lineno="1491"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyFence(device,<sp/>fd-&gt;Fence,<sp/>allocator);</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/>vkFreeCommandBuffers(device,<sp/>fd-&gt;CommandPool,<sp/>1,<sp/>&amp;fd-&gt;CommandBuffer);</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyCommandPool(device,<sp/>fd-&gt;CommandPool,<sp/>allocator);</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/>fd-&gt;Fence<sp/>=<sp/>VK_NULL_HANDLE;</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/>fd-&gt;CommandBuffer<sp/>=<sp/>VK_NULL_HANDLE;</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/>fd-&gt;CommandPool<sp/>=<sp/>VK_NULL_HANDLE;</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyImageView(device,<sp/>fd-&gt;BackbufferView,<sp/>allocator);</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroyFramebuffer(device,<sp/>fd-&gt;Framebuffer,<sp/>allocator);</highlight></codeline>
<codeline lineno="1501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplVulkanH_DestroyFrameSemaphores(VkDevice<sp/>device,<sp/><ref refid="struct_im_gui___impl_vulkan_h___frame_semaphores" kindref="compound">ImGui_ImplVulkanH_FrameSemaphores</ref>*<sp/>fsd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_allocation_callbacks" kindref="compound">VkAllocationCallbacks</ref>*<sp/>allocator)</highlight></codeline>
<codeline lineno="1504"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroySemaphore(device,<sp/>fsd-&gt;ImageAcquiredSemaphore,<sp/>allocator);</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/>vkDestroySemaphore(device,<sp/>fsd-&gt;RenderCompleteSemaphore,<sp/>allocator);</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/>fsd-&gt;ImageAcquiredSemaphore<sp/>=<sp/>fsd-&gt;RenderCompleteSemaphore<sp/>=<sp/>VK_NULL_HANDLE;</highlight></codeline>
<codeline lineno="1508"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplVulkanH_DestroyFrameRenderBuffers(VkDevice<sp/>device,<sp/><ref refid="struct_im_gui___impl_vulkan_h___frame_render_buffers" kindref="compound">ImGui_ImplVulkanH_FrameRenderBuffers</ref>*<sp/>buffers,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_allocation_callbacks" kindref="compound">VkAllocationCallbacks</ref>*<sp/>allocator)</highlight></codeline>
<codeline lineno="1511"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffers-&gt;VertexBuffer)<sp/>{<sp/>vkDestroyBuffer(device,<sp/>buffers-&gt;VertexBuffer,<sp/>allocator);<sp/>buffers-&gt;VertexBuffer<sp/>=<sp/>VK_NULL_HANDLE;<sp/>}</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffers-&gt;VertexBufferMemory)<sp/>{<sp/>vkFreeMemory(device,<sp/>buffers-&gt;VertexBufferMemory,<sp/>allocator);<sp/>buffers-&gt;VertexBufferMemory<sp/>=<sp/>VK_NULL_HANDLE;<sp/>}</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffers-&gt;IndexBuffer)<sp/>{<sp/>vkDestroyBuffer(device,<sp/>buffers-&gt;IndexBuffer,<sp/>allocator);<sp/>buffers-&gt;IndexBuffer<sp/>=<sp/>VK_NULL_HANDLE;<sp/>}</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffers-&gt;IndexBufferMemory)<sp/>{<sp/>vkFreeMemory(device,<sp/>buffers-&gt;IndexBufferMemory,<sp/>allocator);<sp/>buffers-&gt;IndexBufferMemory<sp/>=<sp/>VK_NULL_HANDLE;<sp/>}</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/>buffers-&gt;VertexBufferSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/>buffers-&gt;IndexBufferSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1518"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplVulkanH_DestroyWindowRenderBuffers(VkDevice<sp/>device,<sp/><ref refid="struct_im_gui___impl_vulkan_h___window_render_buffers" kindref="compound">ImGui_ImplVulkanH_WindowRenderBuffers</ref>*<sp/>buffers,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_allocation_callbacks" kindref="compound">VkAllocationCallbacks</ref>*<sp/>allocator)</highlight></codeline>
<codeline lineno="1521"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>buffers-&gt;Count;<sp/>n++)</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui_ImplVulkanH_DestroyFrameRenderBuffers(device,<sp/>&amp;buffers-&gt;FrameRenderBuffers[n],<sp/>allocator);</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/>IM_FREE(buffers-&gt;FrameRenderBuffers);</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/>buffers-&gt;FrameRenderBuffers<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/>buffers-&gt;Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/>buffers-&gt;Count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1528"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplVulkanH_DestroyAllViewportsRenderBuffers(VkDevice<sp/>device,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_vk_allocation_callbacks" kindref="compound">VkAllocationCallbacks</ref>*<sp/>allocator)</highlight></codeline>
<codeline lineno="1531"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui_platform_i_o" kindref="compound">ImGuiPlatformIO</ref>&amp;<sp/>platform_io<sp/>=<sp/>ImGui::GetPlatformIO();</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>platform_io.Viewports.Size;<sp/>n++)</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_im_gui___impl_vulkan___viewport_data" kindref="compound">ImGui_ImplVulkan_ViewportData</ref>*<sp/>vd<sp/>=<sp/>(<ref refid="struct_im_gui___impl_vulkan___viewport_data" kindref="compound">ImGui_ImplVulkan_ViewportData</ref>*)platform_io.Viewports[n]-&gt;RendererUserData)</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui_ImplVulkanH_DestroyWindowRenderBuffers(device,<sp/>&amp;vd-&gt;RenderBuffers,<sp/>allocator);</highlight></codeline>
<codeline lineno="1536"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MULTI-VIEWPORT<sp/>/<sp/>PLATFORM<sp/>INTERFACE<sp/>SUPPORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>an<sp/>_advanced_<sp/>and<sp/>_optional_<sp/>feature,<sp/>allowing<sp/>the<sp/>backend<sp/>to<sp/>create<sp/>and<sp/>handle<sp/>multiple<sp/>viewports<sp/>simultaneously.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>you<sp/>are<sp/>new<sp/>to<sp/>dear<sp/>imgui<sp/>or<sp/>creating<sp/>a<sp/>new<sp/>binding<sp/>for<sp/>dear<sp/>imgui,<sp/>it<sp/>is<sp/>recommended<sp/>that<sp/>you<sp/>completely<sp/>ignore<sp/>this<sp/>section<sp/>first..</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplVulkan_CreateWindow(<ref refid="struct_im_gui_viewport" kindref="compound">ImGuiViewport</ref>*<sp/>viewport)</highlight></codeline>
<codeline lineno="1545"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___data" kindref="compound">ImGui_ImplVulkan_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplVulkan_GetBackendData();</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___viewport_data" kindref="compound">ImGui_ImplVulkan_ViewportData</ref>*<sp/>vd<sp/>=<sp/>IM_NEW(<ref refid="struct_im_gui___impl_vulkan___viewport_data" kindref="compound">ImGui_ImplVulkan_ViewportData</ref>)();</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/>viewport-&gt;RendererUserData<sp/>=<sp/>vd;</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan_h___window" kindref="compound">ImGui_ImplVulkanH_Window</ref>*<sp/>wd<sp/>=<sp/>&amp;vd-&gt;Window;</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___init_info" kindref="compound">ImGui_ImplVulkan_InitInfo</ref>*<sp/>v<sp/>=<sp/>&amp;bd-&gt;VulkanInitInfo;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"></highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>surface</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui_platform_i_o" kindref="compound">ImGuiPlatformIO</ref>&amp;<sp/>platform_io<sp/>=<sp/>ImGui::GetPlatformIO();</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/>VkResult<sp/>err<sp/>=<sp/>(VkResult)platform_io.Platform_CreateVkSurface(viewport,<sp/>(ImU64)v-&gt;Instance,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)v-&gt;Allocator,<sp/>(ImU64*)&amp;wd-&gt;Surface);</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>WSI<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/>VkBool32<sp/>res;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/>vkGetPhysicalDeviceSurfaceSupportKHR(v-&gt;PhysicalDevice,<sp/>v-&gt;QueueFamily,<sp/>wd-&gt;Surface,<sp/>&amp;res);</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res<sp/>!=<sp/>VK_TRUE)</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IM_ASSERT(0);<sp/></highlight><highlight class="comment">//<sp/>Error:<sp/>no<sp/>WSI<sp/>support<sp/>on<sp/>physical<sp/>device</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Select<sp/>Surface<sp/>Format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkFormat<sp/>requestSurfaceImageFormat[]<sp/>=<sp/>{<sp/>VK_FORMAT_B8G8R8A8_UNORM,<sp/>VK_FORMAT_R8G8B8A8_UNORM,<sp/>VK_FORMAT_B8G8R8_UNORM,<sp/>VK_FORMAT_R8G8B8_UNORM<sp/>};</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VkColorSpaceKHR<sp/>requestSurfaceColorSpace<sp/>=<sp/>VK_COLORSPACE_SRGB_NONLINEAR_KHR;</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/>wd-&gt;SurfaceFormat<sp/>=<sp/>ImGui_ImplVulkanH_SelectSurfaceFormat(v-&gt;PhysicalDevice,<sp/>wd-&gt;Surface,<sp/>requestSurfaceImageFormat,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)IM_ARRAYSIZE(requestSurfaceImageFormat),<sp/>requestSurfaceColorSpace);</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Select<sp/>Present<sp/>Mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME-VULKAN:<sp/>Even<sp/>thought<sp/>mailbox<sp/>seems<sp/>to<sp/>get<sp/>us<sp/>maximum<sp/>framerate<sp/>with<sp/>a<sp/>single<sp/>window,<sp/>it<sp/>halves<sp/>framerate<sp/>with<sp/>a<sp/>second<sp/>window<sp/>etc.<sp/>(w/<sp/>Nvidia<sp/>and<sp/>SDK<sp/>1.82.1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/>VkPresentModeKHR<sp/>present_modes[]<sp/>=<sp/>{<sp/>VK_PRESENT_MODE_MAILBOX_KHR,<sp/>VK_PRESENT_MODE_IMMEDIATE_KHR,<sp/>VK_PRESENT_MODE_FIFO_KHR<sp/>};</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/>wd-&gt;PresentMode<sp/>=<sp/>ImGui_ImplVulkanH_SelectPresentMode(v-&gt;PhysicalDevice,<sp/>wd-&gt;Surface,<sp/>&amp;present_modes[0],<sp/>IM_ARRAYSIZE(present_modes));</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;[vulkan]<sp/>Secondary<sp/>window<sp/>selected<sp/>PresentMode<sp/>=<sp/>%d\n&quot;,<sp/>wd-&gt;PresentMode);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"></highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>SwapChain,<sp/>RenderPass,<sp/>Framebuffer,<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/>wd-&gt;ClearEnable<sp/>=<sp/>(viewport-&gt;Flags<sp/>&amp;<sp/>ImGuiViewportFlags_NoRendererClear)<sp/>?<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplVulkanH_CreateOrResizeWindow(v-&gt;Instance,<sp/>v-&gt;PhysicalDevice,<sp/>v-&gt;Device,<sp/>wd,<sp/>v-&gt;QueueFamily,<sp/>v-&gt;Allocator,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)viewport-&gt;Size.x,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)viewport-&gt;Size.y,<sp/>v-&gt;MinImageCount);</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/>vd-&gt;WindowOwned<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1581"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplVulkan_DestroyWindow(<ref refid="struct_im_gui_viewport" kindref="compound">ImGuiViewport</ref>*<sp/>viewport)</highlight></codeline>
<codeline lineno="1584"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>main<sp/>viewport<sp/>(owned<sp/>by<sp/>the<sp/>application)<sp/>will<sp/>always<sp/>have<sp/>RendererUserData<sp/>==<sp/>NULL<sp/>since<sp/>we<sp/>didn&apos;t<sp/>create<sp/>the<sp/>data<sp/>for<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___data" kindref="compound">ImGui_ImplVulkan_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplVulkan_GetBackendData();</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_im_gui___impl_vulkan___viewport_data" kindref="compound">ImGui_ImplVulkan_ViewportData</ref>*<sp/>vd<sp/>=<sp/>(<ref refid="struct_im_gui___impl_vulkan___viewport_data" kindref="compound">ImGui_ImplVulkan_ViewportData</ref>*)viewport-&gt;RendererUserData)</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___init_info" kindref="compound">ImGui_ImplVulkan_InitInfo</ref>*<sp/>v<sp/>=<sp/>&amp;bd-&gt;VulkanInitInfo;</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vd-&gt;WindowOwned)</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui_ImplVulkanH_DestroyWindow(v-&gt;Instance,<sp/>v-&gt;Device,<sp/>&amp;vd-&gt;Window,<sp/>v-&gt;Allocator);</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui_ImplVulkanH_DestroyWindowRenderBuffers(v-&gt;Device,<sp/>&amp;vd-&gt;RenderBuffers,<sp/>v-&gt;Allocator);</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IM_DELETE(vd);</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/>viewport-&gt;RendererUserData<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1596"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplVulkan_SetWindowSize(<ref refid="struct_im_gui_viewport" kindref="compound">ImGuiViewport</ref>*<sp/>viewport,<sp/><ref refid="struct_im_vec2" kindref="compound">ImVec2</ref><sp/>size)</highlight></codeline>
<codeline lineno="1599"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___data" kindref="compound">ImGui_ImplVulkan_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplVulkan_GetBackendData();</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___viewport_data" kindref="compound">ImGui_ImplVulkan_ViewportData</ref>*<sp/>vd<sp/>=<sp/>(<ref refid="struct_im_gui___impl_vulkan___viewport_data" kindref="compound">ImGui_ImplVulkan_ViewportData</ref>*)viewport-&gt;RendererUserData;</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(vd<sp/>==<sp/>NULL)<sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>NULL<sp/>for<sp/>the<sp/>main<sp/>viewport<sp/>(which<sp/>is<sp/>left<sp/>to<sp/>the<sp/>user/app<sp/>to<sp/>handle)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___init_info" kindref="compound">ImGui_ImplVulkan_InitInfo</ref>*<sp/>v<sp/>=<sp/>&amp;bd-&gt;VulkanInitInfo;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/>vd-&gt;Window.ClearEnable<sp/>=<sp/>(viewport-&gt;Flags<sp/>&amp;<sp/>ImGuiViewportFlags_NoRendererClear)<sp/>?<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplVulkanH_CreateOrResizeWindow(v-&gt;Instance,<sp/>v-&gt;PhysicalDevice,<sp/>v-&gt;Device,<sp/>&amp;vd-&gt;Window,<sp/>v-&gt;QueueFamily,<sp/>v-&gt;Allocator,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)size.x,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)size.y,<sp/>v-&gt;MinImageCount);</highlight></codeline>
<codeline lineno="1607"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplVulkan_RenderWindow(<ref refid="struct_im_gui_viewport" kindref="compound">ImGuiViewport</ref>*<sp/>viewport,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)</highlight></codeline>
<codeline lineno="1610"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___data" kindref="compound">ImGui_ImplVulkan_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplVulkan_GetBackendData();</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___viewport_data" kindref="compound">ImGui_ImplVulkan_ViewportData</ref>*<sp/>vd<sp/>=<sp/>(<ref refid="struct_im_gui___impl_vulkan___viewport_data" kindref="compound">ImGui_ImplVulkan_ViewportData</ref>*)viewport-&gt;RendererUserData;</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan_h___window" kindref="compound">ImGui_ImplVulkanH_Window</ref>*<sp/>wd<sp/>=<sp/>&amp;vd-&gt;Window;</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___init_info" kindref="compound">ImGui_ImplVulkan_InitInfo</ref>*<sp/>v<sp/>=<sp/>&amp;bd-&gt;VulkanInitInfo;</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/>VkResult<sp/>err;</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan_h___frame" kindref="compound">ImGui_ImplVulkanH_Frame</ref>*<sp/>fd<sp/>=<sp/>&amp;wd-&gt;Frames[wd-&gt;FrameIndex];</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan_h___frame_semaphores" kindref="compound">ImGui_ImplVulkanH_FrameSemaphores</ref>*<sp/>fsd<sp/>=<sp/>&amp;wd-&gt;FrameSemaphores[wd-&gt;SemaphoreIndex];</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkAcquireNextImageKHR(v-&gt;Device,<sp/>wd-&gt;Swapchain,<sp/>UINT64_MAX,<sp/>fsd-&gt;ImageAcquiredSemaphore,<sp/>VK_NULL_HANDLE,<sp/>&amp;wd-&gt;FrameIndex);</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd<sp/>=<sp/>&amp;wd-&gt;Frames[wd-&gt;FrameIndex];</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkWaitForFences(v-&gt;Device,<sp/>1,<sp/>&amp;fd-&gt;Fence,<sp/>VK_TRUE,<sp/>100);</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>==<sp/>VK_SUCCESS)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>==<sp/>VK_TIMEOUT)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkResetCommandPool(v-&gt;Device,<sp/>fd-&gt;CommandPool,<sp/>0);</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_command_buffer_begin_info" kindref="compound">VkCommandBufferBeginInfo</ref><sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.flags<sp/>|=<sp/>VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT;</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkBeginCommandBuffer(fd-&gt;CommandBuffer,<sp/>&amp;<ref refid="structinfo" kindref="compound">info</ref>);</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_im_vec4" kindref="compound">ImVec4</ref><sp/>clear_color<sp/>=<sp/><ref refid="struct_im_vec4" kindref="compound">ImVec4</ref>(0.0f,<sp/>0.0f,<sp/>0.0f,<sp/>1.0f);</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;wd-&gt;ClearValue.color.float32[0],<sp/>&amp;clear_color,<sp/>4<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_render_pass_begin_info" kindref="compound">VkRenderPassBeginInfo</ref><sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO;</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.renderPass<sp/>=<sp/>wd-&gt;RenderPass;</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.framebuffer<sp/>=<sp/>fd-&gt;Framebuffer;</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.renderArea.extent.width<sp/>=<sp/>wd-&gt;Width;</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.renderArea.extent.height<sp/>=<sp/>wd-&gt;Height;</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.clearValueCount<sp/>=<sp/>(viewport-&gt;Flags<sp/>&amp;<sp/>ImGuiViewportFlags_NoRendererClear)<sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.pClearValues<sp/>=<sp/>(viewport-&gt;Flags<sp/>&amp;<sp/>ImGuiViewportFlags_NoRendererClear)<sp/>?<sp/>NULL<sp/>:<sp/>&amp;wd-&gt;ClearValue;</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkCmdBeginRenderPass(fd-&gt;CommandBuffer,<sp/>&amp;<ref refid="structinfo" kindref="compound">info</ref>,<sp/>VK_SUBPASS_CONTENTS_INLINE);</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"></highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui_ImplVulkan_RenderDrawData(viewport-&gt;DrawData,<sp/>fd-&gt;CommandBuffer,<sp/>wd-&gt;Pipeline);</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vkCmdEndRenderPass(fd-&gt;CommandBuffer);</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VkPipelineStageFlags<sp/>wait_stage<sp/>=<sp/>VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT;</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_vk_submit_info" kindref="compound">VkSubmitInfo</ref><sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_SUBMIT_INFO;</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.waitSemaphoreCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.pWaitSemaphores<sp/>=<sp/>&amp;fsd-&gt;ImageAcquiredSemaphore;</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.pWaitDstStageMask<sp/>=<sp/>&amp;wait_stage;</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.commandBufferCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.pCommandBuffers<sp/>=<sp/>&amp;fd-&gt;CommandBuffer;</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.signalSemaphoreCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.pSignalSemaphores<sp/>=<sp/>&amp;fsd-&gt;RenderCompleteSemaphore;</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkEndCommandBuffer(fd-&gt;CommandBuffer);</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkResetFences(v-&gt;Device,<sp/>1,<sp/>&amp;fd-&gt;Fence);</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkQueueSubmit(v-&gt;Queue,<sp/>1,<sp/>&amp;<ref refid="structinfo" kindref="compound">info</ref>,<sp/>fd-&gt;Fence);</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1681"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplVulkan_SwapBuffers(<ref refid="struct_im_gui_viewport" kindref="compound">ImGuiViewport</ref>*<sp/>viewport,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)</highlight></codeline>
<codeline lineno="1684"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___data" kindref="compound">ImGui_ImplVulkan_Data</ref>*<sp/>bd<sp/>=<sp/>ImGui_ImplVulkan_GetBackendData();</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___viewport_data" kindref="compound">ImGui_ImplVulkan_ViewportData</ref>*<sp/>vd<sp/>=<sp/>(<ref refid="struct_im_gui___impl_vulkan___viewport_data" kindref="compound">ImGui_ImplVulkan_ViewportData</ref>*)viewport-&gt;RendererUserData;</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan_h___window" kindref="compound">ImGui_ImplVulkanH_Window</ref>*<sp/>wd<sp/>=<sp/>&amp;vd-&gt;Window;</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan___init_info" kindref="compound">ImGui_ImplVulkan_InitInfo</ref>*<sp/>v<sp/>=<sp/>&amp;bd-&gt;VulkanInitInfo;</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/>VkResult<sp/>err;</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>present_index<sp/>=<sp/>wd-&gt;FrameIndex;</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"></highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui___impl_vulkan_h___frame_semaphores" kindref="compound">ImGui_ImplVulkanH_FrameSemaphores</ref>*<sp/>fsd<sp/>=<sp/>&amp;wd-&gt;FrameSemaphores[wd-&gt;SemaphoreIndex];</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vk_present_info_k_h_r" kindref="compound">VkPresentInfoKHR</ref><sp/><ref refid="structinfo" kindref="compound">info</ref><sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.sType<sp/>=<sp/>VK_STRUCTURE_TYPE_PRESENT_INFO_KHR;</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.waitSemaphoreCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.pWaitSemaphores<sp/>=<sp/>&amp;fsd-&gt;RenderCompleteSemaphore;</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.swapchainCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.pSwapchains<sp/>=<sp/>&amp;wd-&gt;Swapchain;</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structinfo" kindref="compound">info</ref>.pImageIndices<sp/>=<sp/>&amp;present_index;</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>=<sp/>vkQueuePresentKHR(v-&gt;Queue,<sp/>&amp;<ref refid="structinfo" kindref="compound">info</ref>);</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>==<sp/>VK_ERROR_OUT_OF_DATE_KHR<sp/>||<sp/>err<sp/>==<sp/>VK_SUBOPTIMAL_KHR)</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui_ImplVulkanH_CreateOrResizeWindow(v-&gt;Instance,<sp/>v-&gt;PhysicalDevice,<sp/>v-&gt;Device,<sp/>&amp;vd-&gt;Window,<sp/>v-&gt;QueueFamily,<sp/>v-&gt;Allocator,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)viewport-&gt;Size.x,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)viewport-&gt;Size.y,<sp/>v-&gt;MinImageCount);</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_vk_result(err);</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/>wd-&gt;FrameIndex<sp/>=<sp/>(wd-&gt;FrameIndex<sp/>+<sp/>1)<sp/>%<sp/>wd-&gt;ImageCount;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>for<sp/>the<sp/>next<sp/>vkWaitForFences()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/>wd-&gt;SemaphoreIndex<sp/>=<sp/>(wd-&gt;SemaphoreIndex<sp/>+<sp/>1)<sp/>%<sp/>wd-&gt;ImageCount;<sp/></highlight><highlight class="comment">//<sp/>Now<sp/>we<sp/>can<sp/>use<sp/>the<sp/>next<sp/>set<sp/>of<sp/>semaphores</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"></highlight></codeline>
<codeline lineno="1711"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplVulkan_InitPlatformInterface()</highlight></codeline>
<codeline lineno="1712"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_im_gui_platform_i_o" kindref="compound">ImGuiPlatformIO</ref>&amp;<sp/>platform_io<sp/>=<sp/>ImGui::GetPlatformIO();</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ImGui::GetIO().ConfigFlags<sp/>&amp;<sp/>ImGuiConfigFlags_ViewportsEnable)</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IM_ASSERT(platform_io.Platform_CreateVkSurface<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/></highlight><highlight class="stringliteral">&quot;Platform<sp/>needs<sp/>to<sp/>setup<sp/>the<sp/>CreateVkSurface<sp/>handler.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/>platform_io.Renderer_CreateWindow<sp/>=<sp/>ImGui_ImplVulkan_CreateWindow;</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/>platform_io.Renderer_DestroyWindow<sp/>=<sp/>ImGui_ImplVulkan_DestroyWindow;</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/>platform_io.Renderer_SetWindowSize<sp/>=<sp/>ImGui_ImplVulkan_SetWindowSize;</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/>platform_io.Renderer_RenderWindow<sp/>=<sp/>ImGui_ImplVulkan_RenderWindow;</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/>platform_io.Renderer_SwapBuffers<sp/>=<sp/>ImGui_ImplVulkan_SwapBuffers;</highlight></codeline>
<codeline lineno="1721"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ImGui_ImplVulkan_ShutdownPlatformInterface()</highlight></codeline>
<codeline lineno="1724"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui::DestroyPlatformWindows();</highlight></codeline>
<codeline lineno="1726"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/backends/imgui_impl_vulkan.cpp"/>
  </compounddef>
</doxygen>
