<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__gtx__matrix__factorisation" kind="group">
    <compoundname>gtx_matrix_factorisation</compoundname>
    <title>GLM_GTX_matrix_factorisation</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__gtx__matrix__factorisation_1ga904aa227f3fc40a3ae08fe0f6810b5ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>length_t</type>
            <declname>C</declname>
            <defname>C</defname>
          </param>
          <param>
            <type>length_t</type>
            <declname>R</declname>
            <defname>R</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL mat&lt; C, R, T, Q &gt;</type>
        <definition>GLM_FUNC_DECL mat&lt; C, R, T, Q &gt; glm::flipud</definition>
        <argsstring>(mat&lt; C, R, T, Q &gt; const &amp;in)</argsstring>
        <name>flipud</name>
        <param>
          <type>mat&lt; C, R, T, Q &gt; const &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flips the matrix rows up and down.</para>
<para>From GLM_GTX_matrix_factorisation extension. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/matrix_factorisation.hpp" line="41" column="19" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/matrix_factorisation.inl" bodystart="7" bodyend="14" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/matrix_factorisation.hpp" declline="41" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__matrix__factorisation_1gaf44ef34db04c55013bc3d9eee990b80c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>length_t</type>
            <declname>C</declname>
            <defname>C</defname>
          </param>
          <param>
            <type>length_t</type>
            <declname>R</declname>
            <defname>R</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL mat&lt; C, R, T, Q &gt;</type>
        <definition>GLM_FUNC_DECL mat&lt; C, R, T, Q &gt; glm::fliplr</definition>
        <argsstring>(mat&lt; C, R, T, Q &gt; const &amp;in)</argsstring>
        <name>fliplr</name>
        <param>
          <type>mat&lt; C, R, T, Q &gt; const &amp;</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flips the matrix columns right and left.</para>
<para>From GLM_GTX_matrix_factorisation extension. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/matrix_factorisation.hpp" line="47" column="19" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/matrix_factorisation.inl" bodystart="17" bodyend="26" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/matrix_factorisation.hpp" declline="47" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__matrix__factorisation_1ga77022dca1aa38add548f9f56a9f8071a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>length_t</type>
            <declname>C</declname>
            <defname>C</defname>
          </param>
          <param>
            <type>length_t</type>
            <declname>R</declname>
            <defname>R</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL void</type>
        <definition>GLM_FUNC_DECL void glm::qr_decompose</definition>
        <argsstring>(mat&lt; C, R, T, Q &gt; const &amp;in, mat&lt;(C&lt; R ? C :R), R, T, Q &gt; &amp;q, mat&lt; C,(C&lt; R ? C :R), T, Q &gt; &amp;r)</argsstring>
        <name>qr_decompose</name>
        <param>
          <type>mat&lt; C, R, T, Q &gt; const &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>mat&lt;(C&lt; R ? C :R), R, T, Q &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>mat&lt; C,(C&lt; R ? C :R), T, Q &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs QR factorisation of a matrix. Returns 2 matrices, q and r, such that the columns of q are orthonormal and span the same subspace than those of the input matrix, r is an upper triangular matrix, and q*r=in. Given an n-by-m input matrix, q has dimensions min(n,m)-by-m, and r has dimensions n-by-min(n,m).</para>
<para>From GLM_GTX_matrix_factorisation extension. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/matrix_factorisation.hpp" line="55" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/matrix_factorisation.inl" bodystart="29" bodyend="61" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/matrix_factorisation.hpp" declline="55" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__matrix__factorisation_1ga4e022709c9e7eaad9d7cc315d2cdb05c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>length_t</type>
            <declname>C</declname>
            <defname>C</defname>
          </param>
          <param>
            <type>length_t</type>
            <declname>R</declname>
            <defname>R</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL void</type>
        <definition>GLM_FUNC_DECL void glm::rq_decompose</definition>
        <argsstring>(mat&lt; C, R, T, Q &gt; const &amp;in, mat&lt;(C&lt; R ? C :R), R, T, Q &gt; &amp;r, mat&lt; C,(C&lt; R ? C :R), T, Q &gt; &amp;q)</argsstring>
        <name>rq_decompose</name>
        <param>
          <type>mat&lt; C, R, T, Q &gt; const &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>mat&lt;(C&lt; R ? C :R), R, T, Q &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>mat&lt; C,(C&lt; R ? C :R), T, Q &gt; &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs RQ factorisation of a matrix. Returns 2 matrices, r and q, such that r is an upper triangular matrix, the rows of q are orthonormal and span the same subspace than those of the input matrix, and r*q=in. Note that in the context of RQ factorisation, the diagonal is seen as starting in the lower-right corner of the matrix, instead of the usual upper-left. Given an n-by-m input matrix, r has dimensions min(n,m)-by-m, and q has dimensions n-by-min(n,m).</para>
<para>From GLM_GTX_matrix_factorisation extension. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/matrix_factorisation.hpp" line="64" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/matrix_factorisation.inl" bodystart="64" bodyend="84" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/matrix_factorisation.hpp" declline="64" declcolumn="20"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Include &lt;<ref refid="matrix__factorisation_8hpp" kindref="compound">glm/gtx/matrix_factorisation.hpp</ref>&gt; to use the features of this extension.</para>
<para>Functions to factor matrices in various forms </para>
    </detaileddescription>
  </compounddef>
</doxygen>
