<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="sdf__test_8c" kind="file" language="C++">
    <compoundname>sdf_test.c</compoundname>
    <includes refid="stb_8h" local="yes">stb.h</includes>
    <includes refid="stb__truetype_8h" local="yes">stb_truetype.h</includes>
    <includes local="yes">stb_image_write.h</includes>
    <incdepgraph>
      <node id="2">
        <label>stb.h</label>
        <link refid="stb_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>stb_truetype.h</label>
        <link refid="stb__truetype_8h_source"/>
      </node>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c</label>
        <link refid="sdf__test_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>stb_image_write.h</label>
      </node>
      <node id="3">
        <label>stdarg.h</label>
      </node>
      <node id="5">
        <label>stdio.h</label>
      </node>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="6">
        <label>string.h</label>
      </node>
      <node id="7">
        <label>time.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structfontchar" prot="public">fontchar</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="sdf__test_8c_1a5640e9acc84db268e2628d4c5dad308c" prot="public" static="no">
        <name>STB_DEFINE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c" line="1" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c" bodystart="1" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sdf__test_8c_1afaa2f2d0d9d6726cfae6da070e736347" prot="public" static="no">
        <name>STB_TRUETYPE_IMPLEMENTATION</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c" line="4" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c" bodystart="4" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sdf__test_8c_1aefe397a94e8feddc652f92ef40ce9597" prot="public" static="no">
        <name>STB_IMAGE_WRITE_IMPLEMENTATION</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c" line="7" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sdf__test_8c_1a656f5f3b79374cb202a52981d618f51b" prot="public" static="no">
        <name>BITMAP_W</name>
        <initializer>1200</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c" line="27" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sdf__test_8c_1aae2c3ae29687122b55079265ac857b4b" prot="public" static="no">
        <name>BITMAP_H</name>
        <initializer>800</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c" line="28" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c" bodystart="28" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="sdf__test_8c_1afdd610f823f10d42207b1ff46718e2f7" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float sdf_size</definition>
        <argsstring></argsstring>
        <name>sdf_size</name>
        <initializer>= 32.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c" line="11" column="7" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sdf__test_8c_1abd1fe0ef88af2596228389ab423ec6ee" prot="public" static="no" mutable="no">
        <type>float</type>
        <definition>float pixel_dist_scale</definition>
        <argsstring></argsstring>
        <name>pixel_dist_scale</name>
        <initializer>= 64.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c" line="12" column="7" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sdf__test_8c_1a55f7d9f37255ff3301dd118afed3cc96" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int onedge_value</definition>
        <argsstring></argsstring>
        <name>onedge_value</name>
        <initializer>= 128</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c" line="13" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sdf__test_8c_1a78dca952886227190969e885fbdd4fb4" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int padding</definition>
        <argsstring></argsstring>
        <name>padding</name>
        <initializer>= 3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c" line="14" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sdf__test_8c_1a338271ebd05bc3b187abf01a009447df" prot="public" static="no" mutable="no">
        <type><ref refid="structfontchar" kindref="compound">fontchar</ref></type>
        <definition>fontchar fdata[128]</definition>
        <argsstring>[128]</argsstring>
        <name>fdata</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c" line="25" column="10" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sdf__test_8c_1aa7b6b5f472785d97c07c939cc21fda28" prot="public" static="no" mutable="no">
        <type>unsigned char</type>
        <definition>unsigned char bitmap[BITMAP_H][BITMAP_W][3]</definition>
        <argsstring>[BITMAP_H][BITMAP_W][3]</argsstring>
        <name>bitmap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c" line="29" column="15" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sdf__test_8c_1a0ee36e455977d4a9a971dcf5a03e3707" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* sample</definition>
        <argsstring></argsstring>
        <name>sample</name>
        <initializer>= &quot;This is goofy text, size %d!&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c" line="31" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="sdf__test_8c_1a48f07aec56db3f715dd351f2b38bd4b0" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* small_sample</definition>
        <argsstring></argsstring>
        <name>small_sample</name>
        <initializer>= &quot;This is goofy text, size %d! Really needs in-shader supersampling to look good.&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c" line="32" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c" bodystart="32" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="sdf__test_8c_1a7d75211228b1523691400654436377db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void blend_pixel</definition>
        <argsstring>(int x, int y, int color, float alpha)</argsstring>
        <name>blend_pixel</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>color</declname>
        </param>
        <param>
          <type>float</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c" line="34" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c" bodystart="34" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="sdf__test_8c_1a3ef1db368c5f8e896bcdf794fc6d35aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void draw_char</definition>
        <argsstring>(float px, float py, char c, float relative_scale)</argsstring>
        <name>draw_char</name>
        <param>
          <type>float</type>
          <declname>px</declname>
        </param>
        <param>
          <type>float</type>
          <declname>py</declname>
        </param>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <param>
          <type>float</type>
          <declname>relative_scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c" line="41" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c" bodystart="41" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="sdf__test_8c_1a1d7b18d1822a8712cf193ad9e43629ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_text</definition>
        <argsstring>(float x, float y, char *text, float scale)</argsstring>
        <name>print_text</name>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c" line="108" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c" bodystart="108" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="sdf__test_8c_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c" line="118" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c" bodystart="118" bodyend="152"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#define<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stb.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_TRUETYPE_IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stb_truetype.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_IMAGE_WRITE_IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stb_image_write.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>used<sp/>both<sp/>to<sp/>compute<sp/>SDF<sp/>and<sp/>in<sp/>&apos;shader&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sdf_size<sp/>=<sp/>32.0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>larger<sp/>this<sp/>is,<sp/>the<sp/>better<sp/>large<sp/>font<sp/>sizes<sp/>look</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>pixel_dist_scale<sp/>=<sp/>64.0;<sp/><sp/></highlight><highlight class="comment">//<sp/>trades<sp/>off<sp/>precision<sp/>w/<sp/>ability<sp/>to<sp/>handle<sp/>*smaller*<sp/>sizes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>onedge_value<sp/>=<sp/>128;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>padding<sp/>=<sp/>3;<sp/></highlight><highlight class="comment">//<sp/>not<sp/>used<sp/>in<sp/>shader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="structfontchar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>advance;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>xoff;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>yoff;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>w,h;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}<sp/><ref refid="structfontchar" kindref="compound">fontchar</ref>;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><ref refid="structfontchar" kindref="compound">fontchar</ref><sp/>fdata[128];</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BITMAP_W<sp/><sp/>1200</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BITMAP_H<sp/><sp/>800</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>bitmap[BITMAP_H][BITMAP_W][3];</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sample<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>goofy<sp/>text,<sp/>size<sp/>%d!&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*small_sample<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>goofy<sp/>text,<sp/>size<sp/>%d!<sp/>Really<sp/>needs<sp/>in-shader<sp/>supersampling<sp/>to<sp/>look<sp/>good.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>blend_pixel(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>color,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>alpha)</highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>3;<sp/>++i)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bitmap[y][x][i]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>(stb_lerp(alpha,<sp/>bitmap[y][x][i],<sp/>color)+0.5);<sp/></highlight><highlight class="comment">//<sp/>round</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>draw_char(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>px,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>py,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>relative_scale)</highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,y;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><ref refid="structfontchar" kindref="compound">fontchar</ref><sp/>*fc<sp/>=<sp/>&amp;fdata[c];</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fx0<sp/>=<sp/>px<sp/>+<sp/>fc-&gt;xoff*relative_scale;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fy0<sp/>=<sp/>py<sp/>+<sp/>fc-&gt;yoff*relative_scale;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fx1<sp/>=<sp/>fx0<sp/>+<sp/>fc-&gt;w*relative_scale;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fy1<sp/>=<sp/>fy0<sp/>+<sp/>fc-&gt;h*relative_scale;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix0<sp/>=<sp/>(int)<sp/><ref refid="group__core__func__common_1gac433646923ab80af6d9964f1570855d5" kindref="member">floor</ref>(fx0);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy0<sp/>=<sp/>(int)<sp/><ref refid="group__core__func__common_1gac433646923ab80af6d9964f1570855d5" kindref="member">floor</ref>(fy0);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix1<sp/>=<sp/>(int)<sp/><ref refid="group__core__func__common_1ga7a508730e49e5cec65af435d92ee4baf" kindref="member">ceil</ref>(fx1);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iy1<sp/>=<sp/>(int)<sp/><ref refid="group__core__func__common_1ga7a508730e49e5cec65af435d92ee4baf" kindref="member">ceil</ref>(fy1);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clamp<sp/>to<sp/>viewport</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ix0<sp/>&lt;<sp/>0)<sp/>ix0<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iy0<sp/>&lt;<sp/>0)<sp/>iy0<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ix1<sp/>&gt;<sp/>BITMAP_W)<sp/>ix1<sp/>=<sp/>BITMAP_W;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iy1<sp/>&gt;<sp/>BITMAP_H)<sp/>iy1<sp/>=<sp/>BITMAP_H;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y=iy0;<sp/>y<sp/>&lt;<sp/>iy1;<sp/>++y)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x=ix0;<sp/>x<sp/>&lt;<sp/>ix1;<sp/>++x)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sdf_dist,<sp/>pix_dist;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bmx<sp/>=<sp/>stb_linear_remap(x,<sp/>fx0,<sp/>fx1,<sp/>0,<sp/>fc-&gt;w);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bmy<sp/>=<sp/>stb_linear_remap(y,<sp/>fy0,<sp/>fy1,<sp/>0,<sp/>fc-&gt;h);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v00,v01,v10,v11;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v0,v1,v;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sx0<sp/>=<sp/>(int)<sp/>bmx;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sx1<sp/>=<sp/>sx0+1;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sy0<sp/>=<sp/>(int)<sp/>bmy;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sy1<sp/>=<sp/>sy0+1;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>lerp<sp/>weights</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bmx<sp/>=<sp/>bmx<sp/>-<sp/>sx0;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bmy<sp/>=<sp/>bmy<sp/>-<sp/>sy0;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clamp<sp/>to<sp/>edge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sx0<sp/>=<sp/>stb_clamp(sx0,<sp/>0,<sp/>fc-&gt;w-1);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sx1<sp/>=<sp/>stb_clamp(sx1,<sp/>0,<sp/>fc-&gt;w-1);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sy0<sp/>=<sp/>stb_clamp(sy0,<sp/>0,<sp/>fc-&gt;h-1);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sy1<sp/>=<sp/>stb_clamp(sy1,<sp/>0,<sp/>fc-&gt;h-1);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bilinear<sp/>texture<sp/>sample</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v00<sp/>=<sp/>fc-&gt;data[sy0*fc-&gt;w+sx0];</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v01<sp/>=<sp/>fc-&gt;data[sy0*fc-&gt;w+sx1];</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v10<sp/>=<sp/>fc-&gt;data[sy1*fc-&gt;w+sx0];</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v11<sp/>=<sp/>fc-&gt;data[sy1*fc-&gt;w+sx1];</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v0<sp/>=<sp/>stb_lerp(bmx,v00,v01);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v1<sp/>=<sp/>stb_lerp(bmx,v10,v11);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/><sp/>=<sp/>stb_lerp(bmy,v0<sp/>,v1<sp/>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>non-anti-aliased</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v<sp/>&gt;<sp/>onedge_value)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blend_pixel(x,y,0,1.0);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Following<sp/>math<sp/>can<sp/>be<sp/>greatly<sp/>simplified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>distance<sp/>in<sp/>SDF<sp/>value<sp/>to<sp/>distance<sp/>in<sp/>SDF<sp/>bitmap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sdf_dist<sp/>=<sp/>stb_linear_remap(v,<sp/>onedge_value,<sp/>onedge_value+pixel_dist_scale,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>distance<sp/>in<sp/>SDF<sp/>bitmap<sp/>to<sp/>distance<sp/>in<sp/>output<sp/>bitmap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pix_dist<sp/>=<sp/>sdf_dist<sp/>*<sp/>relative_scale;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>anti-alias<sp/>by<sp/>mapping<sp/>1/2<sp/>pixel<sp/>around<sp/>contour<sp/>from<sp/>0..1<sp/>alpha</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>stb_linear_remap(pix_dist,<sp/>-0.5f,<sp/>0.5f,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v<sp/>&gt;<sp/>1)<sp/>v<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blend_pixel(x,y,0,v);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print_text(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale)</highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>text[i];<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fdata[text[i]].data)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>draw_char(x,y,text[i],scale);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>fdata[text[i]].advance<sp/>*<sp/><ref refid="group__gtc__matrix__transform_1gaae2f8b2080622b24b85e1096748599b6" kindref="member">scale</ref>;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)</highlight></codeline>
<codeline lineno="119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="group__gtc__matrix__transform_1gaae2f8b2080622b24b85e1096748599b6" kindref="member">scale</ref>,<sp/>ypos;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><ref refid="structstbtt__fontinfo" kindref="compound">stbtt_fontinfo</ref><sp/>font;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data<sp/>=<sp/>stb_file(</highlight><highlight class="stringliteral">&quot;c:/windows/fonts/times.ttf&quot;</highlight><highlight class="normal">,<sp/>NULL);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/>stbtt_InitFont(&amp;font,<sp/>data,<sp/>0);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/>scale<sp/>=<sp/>stbtt_ScaleForPixelHeight(&amp;font,<sp/>sdf_size);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ch=32;<sp/>ch<sp/>&lt;<sp/>127;<sp/>++ch)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfontchar" kindref="compound">fontchar</ref><sp/>fc;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xoff,yoff,w,h,<sp/>advance;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fc.data<sp/>=<sp/>stbtt_GetCodepointSDF(&amp;font,<sp/>scale,<sp/>ch,<sp/>padding,<sp/>onedge_value,<sp/>pixel_dist_scale,<sp/>&amp;w,<sp/>&amp;h,<sp/>&amp;xoff,<sp/>&amp;yoff);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fc.xoff<sp/>=<sp/>xoff;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fc.yoff<sp/>=<sp/>yoff;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fc.w<sp/>=<sp/>w;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fc.h<sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbtt_GetCodepointHMetrics(&amp;font,<sp/>ch,<sp/>&amp;advance,<sp/>NULL);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fc.advance<sp/>=<sp/>advance<sp/>*<sp/><ref refid="group__gtc__matrix__transform_1gaae2f8b2080622b24b85e1096748599b6" kindref="member">scale</ref>;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fdata[ch]<sp/>=<sp/>fc;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/>ypos<sp/>=<sp/>60;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/>memset(bitmap,<sp/>255,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(bitmap));</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/>print_text(400,<sp/>ypos+30,<sp/>stb_sprintf(</highlight><highlight class="stringliteral">&quot;sdf<sp/>bitmap<sp/>height<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>sdf_size),<sp/>30/sdf_size);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/>ypos<sp/>+=<sp/>80;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(scale<sp/>=<sp/>8.0;<sp/>scale<sp/>&lt;<sp/>120.0;<sp/>scale<sp/>*=<sp/>1.33f)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>print_text(80,<sp/>ypos+scale,<sp/>stb_sprintf(scale<sp/>==<sp/>8.0<sp/>?<sp/>small_sample<sp/>:<sp/>sample,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>scale),<sp/>scale<sp/>/<sp/>sdf_size);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ypos<sp/>+=<sp/>scale*1.05f<sp/>+<sp/>20;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/>stbi_write_png(</highlight><highlight class="stringliteral">&quot;sdf_test.png&quot;</highlight><highlight class="normal">,<sp/>BITMAP_W,<sp/>BITMAP_H,<sp/>3,<sp/>bitmap,<sp/>0);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/sdf/sdf_test.c"/>
  </compounddef>
</doxygen>
