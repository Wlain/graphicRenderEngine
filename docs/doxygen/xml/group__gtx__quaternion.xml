<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__gtx__quaternion" kind="group">
    <compoundname>gtx_quaternion</compoundname>
    <title>GLM_GTX_quaternion</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__gtx__quaternion_1ga5c59409c5d9965f75f3ff90da7ac8e38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL tquat&lt; T, Q &gt;</type>
        <definition>GLM_FUNC_DECL tquat&lt; T, Q &gt; glm::quat_identity</definition>
        <argsstring>()</argsstring>
        <name>quat_identity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an identity quaternion.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__quaternion" kindref="compound">GLM_GTX_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" line="39" column="21" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.inl" bodystart="10" bodyend="13" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" declline="39" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__quaternion_1ga14891c9ef2e9e5c87b8c860b9f8c303f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL <ref refid="structvec" kindref="compound">vec</ref>&lt; 3, T, Q &gt;</type>
        <definition>GLM_FUNC_DECL vec&lt; 3, T, Q &gt; glm::cross</definition>
        <argsstring>(tquat&lt; T, Q &gt; const &amp;q, vec&lt; 3, T, Q &gt; const &amp;v)</argsstring>
        <name>cross</name>
        <param>
          <type>tquat&lt; T, Q &gt; const &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="structvec" kindref="compound">vec</ref>&lt; 3, T, Q &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute a cross product between a quaternion and a vector.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__quaternion" kindref="compound">GLM_GTX_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" line="45" column="19" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.inl" bodystart="22" bodyend="25" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" declline="45" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__quaternion_1ga27d6e063c0d8b58ed1c243f0a811c9f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL <ref refid="structvec" kindref="compound">vec</ref>&lt; 3, T, Q &gt;</type>
        <definition>GLM_FUNC_DECL vec&lt; 3, T, Q &gt; glm::cross</definition>
        <argsstring>(vec&lt; 3, T, Q &gt; const &amp;v, tquat&lt; T, Q &gt; const &amp;q)</argsstring>
        <name>cross</name>
        <param>
          <type><ref refid="structvec" kindref="compound">vec</ref>&lt; 3, T, Q &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>tquat&lt; T, Q &gt; const &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute a cross product between a vector and a quaternion.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__quaternion" kindref="compound">GLM_GTX_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" line="53" column="19" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.inl" bodystart="16" bodyend="19" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" declline="53" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__quaternion_1gae2189377f362a5461731fd72e1fd643c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL tquat&lt; T, Q &gt;</type>
        <definition>GLM_FUNC_DECL tquat&lt; T, Q &gt; glm::squad</definition>
        <argsstring>(tquat&lt; T, Q &gt; const &amp;q1, tquat&lt; T, Q &gt; const &amp;q2, tquat&lt; T, Q &gt; const &amp;s1, tquat&lt; T, Q &gt; const &amp;s2, T const &amp;h)</argsstring>
        <name>squad</name>
        <param>
          <type>tquat&lt; T, Q &gt; const &amp;</type>
          <declname>q1</declname>
        </param>
        <param>
          <type>tquat&lt; T, Q &gt; const &amp;</type>
          <declname>q2</declname>
        </param>
        <param>
          <type>tquat&lt; T, Q &gt; const &amp;</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>tquat&lt; T, Q &gt; const &amp;</type>
          <declname>s2</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute a point on a path according squad equation. q1 and q2 are control points; s1 and s2 are intermediate control points.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__quaternion" kindref="compound">GLM_GTX_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" line="62" column="21" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.inl" bodystart="29" bodyend="37" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" declline="62" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__quaternion_1gadfb3c9580f52f7c5eb2eb805abf6c330" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL tquat&lt; T, Q &gt;</type>
        <definition>GLM_FUNC_DECL tquat&lt; T, Q &gt; glm::intermediate</definition>
        <argsstring>(tquat&lt; T, Q &gt; const &amp;prev, tquat&lt; T, Q &gt; const &amp;curr, tquat&lt; T, Q &gt; const &amp;next)</argsstring>
        <name>intermediate</name>
        <param>
          <type>tquat&lt; T, Q &gt; const &amp;</type>
          <declname>prev</declname>
        </param>
        <param>
          <type>tquat&lt; T, Q &gt; const &amp;</type>
          <declname>curr</declname>
        </param>
        <param>
          <type>tquat&lt; T, Q &gt; const &amp;</type>
          <declname>next</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an intermediate control point for squad interpolation.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__quaternion" kindref="compound">GLM_GTX_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" line="73" column="21" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.inl" bodystart="41" bodyend="49" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" declline="73" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__quaternion_1gaea0a5ee904e6d8a08805be0924899840" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL tquat&lt; T, Q &gt;</type>
        <definition>GLM_FUNC_DECL tquat&lt; T, Q &gt; glm::exp</definition>
        <argsstring>(tquat&lt; T, Q &gt; const &amp;q)</argsstring>
        <name>exp</name>
        <param>
          <type>tquat&lt; T, Q &gt; const &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a exp of a quaternion.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__quaternion" kindref="compound">GLM_GTX_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" line="82" column="21" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.inl" bodystart="52" bodyend="61" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" declline="82" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__quaternion_1ga78f49dcf6c3512600b1f7c07683ade14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL tquat&lt; T, Q &gt;</type>
        <definition>GLM_FUNC_DECL tquat&lt; T, Q &gt; glm::log</definition>
        <argsstring>(tquat&lt; T, Q &gt; const &amp;q)</argsstring>
        <name>log</name>
        <param>
          <type>tquat&lt; T, Q &gt; const &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a log of a quaternion.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__quaternion" kindref="compound">GLM_GTX_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" line="89" column="21" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.inl" bodystart="64" bodyend="84" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" declline="89" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__quaternion_1gad994d2ded9b60abae9e3dfb49b4ab449" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL tquat&lt; T, Q &gt;</type>
        <definition>GLM_FUNC_DECL tquat&lt; T, Q &gt; glm::pow</definition>
        <argsstring>(tquat&lt; T, Q &gt; const &amp;x, T const &amp;y)</argsstring>
        <name>pow</name>
        <param>
          <type>tquat&lt; T, Q &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns x raised to the y power.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__quaternion" kindref="compound">GLM_GTX_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" line="96" column="21" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.inl" bodystart="87" bodyend="108" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" declline="96" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__quaternion_1ga19c474d388c3dd25dd110cf0bd9e6f5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL <ref refid="structvec" kindref="compound">vec</ref>&lt; 3, T, Q &gt;</type>
        <definition>GLM_FUNC_DECL vec&lt; 3, T, Q &gt; glm::rotate</definition>
        <argsstring>(tquat&lt; T, Q &gt; const &amp;q, vec&lt; 3, T, Q &gt; const &amp;v)</argsstring>
        <name>rotate</name>
        <param>
          <type>tquat&lt; T, Q &gt; const &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="structvec" kindref="compound">vec</ref>&lt; 3, T, Q &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns quarternion square root.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__quaternion" kindref="compound">GLM_GTX_quaternion</ref> Rotates a 3 components vector by a quaternion.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__gtx__quaternion" kindref="compound">GLM_GTX_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" line="111" column="19" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.inl" bodystart="111" bodyend="114" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" declline="111" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__quaternion_1gae476a957af1b8ba24beee9d3fa5d8c03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL <ref refid="structvec" kindref="compound">vec</ref>&lt; 4, T, Q &gt;</type>
        <definition>GLM_FUNC_DECL vec&lt; 4, T, Q &gt; glm::rotate</definition>
        <argsstring>(tquat&lt; T, Q &gt; const &amp;q, vec&lt; 4, T, Q &gt; const &amp;v)</argsstring>
        <name>rotate</name>
        <param>
          <type>tquat&lt; T, Q &gt; const &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="structvec" kindref="compound">vec</ref>&lt; 4, T, Q &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Rotates a 4 components vector by a quaternion.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__quaternion" kindref="compound">GLM_GTX_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" line="119" column="19" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.inl" bodystart="117" bodyend="120" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" declline="119" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__quaternion_1ga312385d0a8caa24c1daaa1d00ce4c2d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL T</type>
        <definition>GLM_FUNC_DECL T glm::extractRealComponent</definition>
        <argsstring>(tquat&lt; T, Q &gt; const &amp;q)</argsstring>
        <name>extractRealComponent</name>
        <param>
          <type>tquat&lt; T, Q &gt; const &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extract the real component of a quaternion.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__quaternion" kindref="compound">GLM_GTX_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" line="127" column="17" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.inl" bodystart="123" bodyend="130" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" declline="127" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__quaternion_1ga06eadadb59a3e5b8a69ba8a4ae4e0b9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL mat&lt; 3, 3, T, Q &gt;</type>
        <definition>GLM_FUNC_DECL mat&lt; 3, 3, T, Q &gt; glm::toMat3</definition>
        <argsstring>(tquat&lt; T, Q &gt; const &amp;x)</argsstring>
        <name>toMat3</name>
        <param>
          <type>tquat&lt; T, Q &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts a quaternion to a 3 * 3 matrix.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__quaternion" kindref="compound">GLM_GTX_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" line="134" column="19" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" bodystart="134" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__quaternion_1ga1973d9c79c424425fa1b9aa7696d52d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL mat&lt; 4, 4, T, Q &gt;</type>
        <definition>GLM_FUNC_DECL mat&lt; 4, 4, T, Q &gt; glm::toMat4</definition>
        <argsstring>(tquat&lt; T, Q &gt; const &amp;x)</argsstring>
        <name>toMat4</name>
        <param>
          <type>tquat&lt; T, Q &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts a quaternion to a 4 * 4 matrix.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__quaternion" kindref="compound">GLM_GTX_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" line="141" column="19" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" bodystart="141" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__quaternion_1gadf9ad6430e23ad644faf8a224c52f462" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL tquat&lt; T, Q &gt;</type>
        <definition>GLM_FUNC_DECL tquat&lt; T, Q &gt; glm::toQuat</definition>
        <argsstring>(mat&lt; 3, 3, T, Q &gt; const &amp;x)</argsstring>
        <name>toQuat</name>
        <param>
          <type>mat&lt; 3, 3, T, Q &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts a 3 * 3 matrix to a quaternion.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__quaternion" kindref="compound">GLM_GTX_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" line="148" column="21" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" bodystart="148" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__quaternion_1gaab9faf032d3c068b3230eb7077faba1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL tquat&lt; T, Q &gt;</type>
        <definition>GLM_FUNC_DECL tquat&lt; T, Q &gt; glm::toQuat</definition>
        <argsstring>(mat&lt; 4, 4, T, Q &gt; const &amp;x)</argsstring>
        <name>toQuat</name>
        <param>
          <type>mat&lt; 4, 4, T, Q &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts a 4 * 4 matrix to a quaternion.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__quaternion" kindref="compound">GLM_GTX_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" line="155" column="21" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" bodystart="155" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__quaternion_1ga96eae90cf9040ffe804d14ff0e3b5120" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL tquat&lt; T, Q &gt;</type>
        <definition>GLM_FUNC_DECL tquat&lt; T, Q &gt; glm::shortMix</definition>
        <argsstring>(tquat&lt; T, Q &gt; const &amp;x, tquat&lt; T, Q &gt; const &amp;y, T const &amp;a)</argsstring>
        <name>shortMix</name>
        <param>
          <type>tquat&lt; T, Q &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>tquat&lt; T, Q &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quaternion interpolation using the rotation short path.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__quaternion" kindref="compound">GLM_GTX_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" line="162" column="21" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.inl" bodystart="139" bodyend="173" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" declline="162" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__quaternion_1gadbca938d6865af668031e45c2ed66d8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL tquat&lt; T, Q &gt;</type>
        <definition>GLM_FUNC_DECL tquat&lt; T, Q &gt; glm::fastMix</definition>
        <argsstring>(tquat&lt; T, Q &gt; const &amp;x, tquat&lt; T, Q &gt; const &amp;y, T const &amp;a)</argsstring>
        <name>fastMix</name>
        <param>
          <type>tquat&lt; T, Q &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>tquat&lt; T, Q &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Quaternion normalized linear interpolation.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__quaternion" kindref="compound">GLM_GTX_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" line="171" column="21" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.inl" bodystart="176" bodyend="179" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" declline="171" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__quaternion_1ga1e6e9a78452ed7562237c8cb110a56ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL tquat&lt; T, Q &gt;</type>
        <definition>GLM_FUNC_DECL tquat&lt; T, Q &gt; glm::rotation</definition>
        <argsstring>(vec&lt; 3, T, Q &gt; const &amp;orig, vec&lt; 3, T, Q &gt; const &amp;dest)</argsstring>
        <name>rotation</name>
        <param>
          <type><ref refid="structvec" kindref="compound">vec</ref>&lt; 3, T, Q &gt; const &amp;</type>
          <declname>orig</declname>
        </param>
        <param>
          <type><ref refid="structvec" kindref="compound">vec</ref>&lt; 3, T, Q &gt; const &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the rotation between two vectors. param orig vector, needs to be normalized param dest vector, needs to be normalized</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__quaternion" kindref="compound">GLM_GTX_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" line="182" column="21" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.inl" bodystart="182" bodyend="218" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" declline="182" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__quaternion_1ga67687e2fac0da67cedd31527e8f60184" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL tquat&lt; T, Q &gt;</type>
        <definition>GLM_FUNC_DECL tquat&lt; T, Q &gt; glm::quatLookAt</definition>
        <argsstring>(vec&lt; 3, T, Q &gt; const &amp;direction, vec&lt; 3, T, Q &gt; const &amp;up)</argsstring>
        <name>quatLookAt</name>
        <param>
          <type><ref refid="structvec" kindref="compound">vec</ref>&lt; 3, T, Q &gt; const &amp;</type>
          <declname>direction</declname>
        </param>
        <param>
          <type><ref refid="structvec" kindref="compound">vec</ref>&lt; 3, T, Q &gt; const &amp;</type>
          <declname>up</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build a look at quaternion based on the default handedness.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired forward direction. Needs to be normalized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>up</parametername>
</parameternamelist>
<parameterdescription>
<para>Up vector, how the camera is oriented. Typically (0, 1, 0). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" line="191" column="21" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.inl" bodystart="221" bodyend="228" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" declline="191" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__quaternion_1ga65502f9bbf2b51d9539ee43ddb11febd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL tquat&lt; T, Q &gt;</type>
        <definition>GLM_FUNC_DECL tquat&lt; T, Q &gt; glm::quatLookAtRH</definition>
        <argsstring>(vec&lt; 3, T, Q &gt; const &amp;direction, vec&lt; 3, T, Q &gt; const &amp;up)</argsstring>
        <name>quatLookAtRH</name>
        <param>
          <type><ref refid="structvec" kindref="compound">vec</ref>&lt; 3, T, Q &gt; const &amp;</type>
          <declname>direction</declname>
        </param>
        <param>
          <type><ref refid="structvec" kindref="compound">vec</ref>&lt; 3, T, Q &gt; const &amp;</type>
          <declname>up</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build a right-handed look at quaternion.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired forward direction onto which the -z-axis gets mapped. Needs to be normalized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>up</parametername>
</parameternamelist>
<parameterdescription>
<para>Up vector, how the camera is oriented. Typically (0, 1, 0). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" line="200" column="21" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.inl" bodystart="231" bodyend="240" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" declline="200" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__quaternion_1ga32bb290551004dab9c11cae9d2d9eb76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL tquat&lt; T, Q &gt;</type>
        <definition>GLM_FUNC_DECL tquat&lt; T, Q &gt; glm::quatLookAtLH</definition>
        <argsstring>(vec&lt; 3, T, Q &gt; const &amp;direction, vec&lt; 3, T, Q &gt; const &amp;up)</argsstring>
        <name>quatLookAtLH</name>
        <param>
          <type><ref refid="structvec" kindref="compound">vec</ref>&lt; 3, T, Q &gt; const &amp;</type>
          <declname>direction</declname>
        </param>
        <param>
          <type><ref refid="structvec" kindref="compound">vec</ref>&lt; 3, T, Q &gt; const &amp;</type>
          <declname>up</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build a left-handed look at quaternion.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired forward direction onto which the +z-axis gets mapped. Needs to be normalized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>up</parametername>
</parameternamelist>
<parameterdescription>
<para>Up vector, how the camera is oriented. Typically (0, 1, 0). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" line="209" column="21" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.inl" bodystart="243" bodyend="252" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" declline="209" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__quaternion_1ga229bacc3051770b030042fe266f7b0cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL T</type>
        <definition>GLM_FUNC_DECL T glm::length2</definition>
        <argsstring>(tquat&lt; T, Q &gt; const &amp;q)</argsstring>
        <name>length2</name>
        <param>
          <type>tquat&lt; T, Q &gt; const &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the squared length of x.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__quaternion" kindref="compound">GLM_GTX_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" line="217" column="17" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.inl" bodystart="133" bodyend="136" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/quaternion.hpp" declline="217" declcolumn="17"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Include &lt;<ref refid="gtx_2quaternion_8hpp" kindref="compound">glm/gtx/quaternion.hpp</ref>&gt; to use the features of this extension.</para>
<para>Extented quaternion types and functions </para>
    </detaileddescription>
  </compounddef>
</doxygen>
