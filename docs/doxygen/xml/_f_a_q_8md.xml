<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="_f_a_q_8md" kind="file" language="Markdown">
    <compoundname>FAQ.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>FAQ<sp/>(Frequenty<sp/>Asked<sp/>Questions)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>may<sp/>link<sp/>to<sp/>this<sp/>document<sp/>using<sp/>short<sp/>form:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>https://www.dearimgui.org/faq</highlight></codeline>
<codeline><highlight class="normal">or<sp/>its<sp/>real<sp/>address:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>https://github.com/ocornut/imgui/blob/master/docs/FAQ.md</highlight></codeline>
<codeline><highlight class="normal">or<sp/>view<sp/>this<sp/>file<sp/>with<sp/>any<sp/>Markdown<sp/>viewer.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Index</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>**Q&amp;A:<sp/>Basics**<sp/>|</highlight></codeline>
<codeline><highlight class="normal">:----------------------------------------------------------<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>[Where<sp/>is<sp/>the<sp/>documentation?](#q-where-is-the-documentation)<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>[What<sp/>is<sp/>this<sp/>library<sp/>called?](#q-what-is-this-library-called)<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>[Which<sp/>version<sp/>should<sp/>I<sp/>get?](#q-which-version-should-i-get)<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>**Q&amp;A:<sp/>Integration**<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>**[How<sp/>to<sp/>get<sp/>started?](#q-how-to-get-started)**<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>**[How<sp/>can<sp/>I<sp/>tell<sp/>whether<sp/>to<sp/>dispatch<sp/>mouse/keyboard<sp/>to<sp/>Dear<sp/>ImGui<sp/>or<sp/>my<sp/>application?](#q-how-can-i-tell-whether-to-dispatch-mousekeyboard-to-dear-imgui-or-my-application)**<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>[How<sp/>can<sp/>I<sp/>enable<sp/>keyboard<sp/>or<sp/>gamepad<sp/>controls?](#q-how-can-i-enable-keyboard-or-gamepad-controls)<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>[How<sp/>can<sp/>I<sp/>use<sp/>this<sp/>on<sp/>a<sp/>machine<sp/>without<sp/>mouse,<sp/>keyboard<sp/>or<sp/>screen?<sp/>(input<sp/>share,<sp/>remote<sp/>display)](#q-how-can-i-use-this-on-a-machine-without-mouse-keyboard-or-screen-input-share-remote-display)<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>[I<sp/>integrated<sp/>Dear<sp/>ImGui<sp/>in<sp/>my<sp/>engine<sp/>and<sp/>little<sp/>squares<sp/>are<sp/>showing<sp/>instead<sp/>of<sp/>text...](#q-i-integrated-dear-imgui-in-my-engine-and-little-squares-are-showing-instead-of-text)<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>[I<sp/>integrated<sp/>Dear<sp/>ImGui<sp/>in<sp/>my<sp/>engine<sp/>and<sp/>some<sp/>elements<sp/>are<sp/>clipping<sp/>or<sp/>disappearing<sp/>when<sp/>I<sp/>move<sp/>windows<sp/>around...](#q-i-integrated-dear-imgui-in-my-engine-and-some-elements-are-clipping-or-disappearing-when-i-move-windows-around)<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>[I<sp/>integrated<sp/>Dear<sp/>ImGui<sp/>in<sp/>my<sp/>engine<sp/>and<sp/>some<sp/>elements<sp/>are<sp/>displaying<sp/>outside<sp/>their<sp/>expected<sp/>windows<sp/>boundaries...](#q-i-integrated-dear-imgui-in-my-engine-and-some-elements-are-displaying-outside-their-expected-windows-boundaries)<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>**Q&amp;A:<sp/>Usage**<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>**[About<sp/>the<sp/>ID<sp/>Stack<sp/>system..&lt;br&gt;Why<sp/>is<sp/>my<sp/>widget<sp/>not<sp/>reacting<sp/>when<sp/>I<sp/>click<sp/>on<sp/>it?&lt;br&gt;How<sp/>can<sp/>I<sp/>have<sp/>widgets<sp/>with<sp/>an<sp/>empty<sp/>label?&lt;br&gt;How<sp/>can<sp/>I<sp/>have<sp/>multiple<sp/>widgets<sp/>with<sp/>the<sp/>same<sp/>label?&lt;br&gt;How<sp/>can<sp/>I<sp/>have<sp/>multiple<sp/>windows<sp/>with<sp/>the<sp/>same<sp/>label?](#q-about-the-id-stack-system)**<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>[How<sp/>can<sp/>I<sp/>display<sp/>an<sp/>image?<sp/>What<sp/>is<sp/>ImTextureID,<sp/>how<sp/>does<sp/>it<sp/>work?](#q-how-can-i-display-an-image-what-is-imtextureid-how-does-it-work)|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>[How<sp/>can<sp/>I<sp/>use<sp/>my<sp/>own<sp/>math<sp/>types<sp/>instead<sp/>of<sp/>ImVec2/ImVec4?](#q-how-can-i-use-my-own-math-types-instead-of-imvec2imvec4)<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>[How<sp/>can<sp/>I<sp/>interact<sp/>with<sp/>standard<sp/>C++<sp/>types<sp/>(such<sp/>as<sp/>std::string<sp/>and<sp/>std::vector)?](#q-how-can-i-interact-with-standard-c-types-such-as-stdstring-and-stdvector)<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>[How<sp/>can<sp/>I<sp/>display<sp/>custom<sp/>shapes?<sp/>(using<sp/>low-level<sp/>ImDrawList<sp/>API)](#q-how-can-i-display-custom-shapes-using-low-level-imdrawlist-api)<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>**Q&amp;A:<sp/>Fonts,<sp/>Text**<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>[How<sp/>should<sp/>I<sp/>handle<sp/>DPI<sp/>in<sp/>my<sp/>application?](#q-how-should-i-handle-dpi-in-my-application)<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>[How<sp/>can<sp/>I<sp/>load<sp/>a<sp/>different<sp/>font<sp/>than<sp/>the<sp/>default?](#q-how-can-i-load-a-different-font-than-the-default)<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>[How<sp/>can<sp/>I<sp/>easily<sp/>use<sp/>icons<sp/>in<sp/>my<sp/>application?](#q-how-can-i-easily-use-icons-in-my-application)<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>[How<sp/>can<sp/>I<sp/>load<sp/>multiple<sp/>fonts?](#q-how-can-i-load-multiple-fonts)<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>[How<sp/>can<sp/>I<sp/>display<sp/>and<sp/>input<sp/>non-Latin<sp/>characters<sp/>such<sp/>as<sp/>Chinese,<sp/>Japanese,<sp/>Korean,<sp/>Cyrillic?](#q-how-can-i-display-and-input-non-latin-characters-such-as-chinese-japanese-korean-cyrillic)<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>**Q&amp;A:<sp/>Concerns**<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>[Who<sp/>uses<sp/>Dear<sp/>ImGui?](#q-who-uses-dear-imgui)<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>[Can<sp/>you<sp/>create<sp/>elaborate/serious<sp/>tools<sp/>with<sp/>Dear<sp/>ImGui?](#q-can-you-create-elaborateserious-tools-with-dear-imgui)<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>[Can<sp/>you<sp/>reskin<sp/>the<sp/>look<sp/>of<sp/>Dear<sp/>ImGui?](#q-can-you-reskin-the-look-of-dear-imgui)<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>[Why<sp/>using<sp/>C++<sp/>(as<sp/>opposed<sp/>to<sp/>C)?](#q-why-using-c-as-opposed-to-c)<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>**Q&amp;A:<sp/>Community**<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>[How<sp/>can<sp/>I<sp/>help?](#q-how-can-i-help)<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Q&amp;A:<sp/>Basics</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Q:<sp/>Where<sp/>is<sp/>the<sp/>documentation?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**This<sp/>library<sp/>is<sp/>poorly<sp/>documented<sp/>at<sp/>the<sp/>moment<sp/>and<sp/>expects<sp/>the<sp/>user<sp/>to<sp/>be<sp/>acquainted<sp/>with<sp/>C/C++.**</highlight></codeline>
<codeline><highlight class="normal">-<sp/>The<sp/>[Wiki](https://github.com/ocornut/imgui/wiki)<sp/>is<sp/>a<sp/>hub<sp/>to<sp/>many<sp/>resources<sp/>and<sp/>links.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Dozens<sp/>of<sp/>standalone<sp/>example<sp/>applications<sp/>using<sp/>e.g.<sp/>OpenGL/DirectX<sp/>are<sp/>provided<sp/>in<sp/>the<sp/>[examples/](https://github.com/ocornut/imgui/blob/master/examples/)<sp/>folder<sp/>to<sp/>explain<sp/>how<sp/>to<sp/>integrate<sp/>Dear<sp/>ImGui<sp/>with<sp/>your<sp/>own<sp/>engine/application.<sp/>You<sp/>can<sp/>run<sp/>those<sp/>applications<sp/>and<sp/>explore<sp/>them.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>See<sp/>demo<sp/>code<sp/>in<sp/>[imgui_demo.cpp](https://github.com/ocornut/imgui/blob/master/imgui_demo.cpp)<sp/>and<sp/>particularly<sp/>the<sp/>`ImGui::ShowDemoWindow()`<sp/>function.<sp/>The<sp/>demo<sp/>covers<sp/>most<sp/>features<sp/>of<sp/>Dear<sp/>ImGui,<sp/>so<sp/>you<sp/>can<sp/>read<sp/>the<sp/>code<sp/>and<sp/>see<sp/>its<sp/>output.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>See<sp/>documentation:<sp/>[Backends](https://github.com/ocornut/imgui/blob/master/docs/BACKENDS.md),<sp/>[Examples](https://github.com/ocornut/imgui/blob/master/docs/EXAMPLES.md),<sp/>[Fonts](https://github.com/ocornut/imgui/blob/master/docs/FONTS.md).</highlight></codeline>
<codeline><highlight class="normal">-<sp/>See<sp/>documentation<sp/>and<sp/>comments<sp/>at<sp/>the<sp/>top<sp/>of<sp/>[imgui.cpp](https://github.com/ocornut/imgui/blob/master/imgui.cpp)<sp/>+<sp/>general<sp/>API<sp/>comments<sp/>in<sp/>[imgui.h](https://github.com/ocornut/imgui/blob/master/imgui.h).</highlight></codeline>
<codeline><highlight class="normal">-<sp/>The<sp/>[Glossary](https://github.com/ocornut/imgui/wiki/Glossary)<sp/>page<sp/>may<sp/>be<sp/>useful.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>The<sp/>[Issues](https://github.com/ocornut/imgui/issues)<sp/>and<sp/>[Discussions](https://github.com/ocornut/imgui/discussions)<sp/>sections<sp/>can<sp/>be<sp/>searched<sp/>for<sp/>past<sp/>questions<sp/>and<sp/>issues.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Your<sp/>programming<sp/>IDE<sp/>is<sp/>your<sp/>friend,<sp/>find<sp/>the<sp/>type<sp/>or<sp/>function<sp/>declaration<sp/>to<sp/>find<sp/>comments<sp/>associated<sp/>with<sp/>it.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>The<sp/>`ImGui::ShowMetricsWindow()`<sp/>function<sp/>exposes<sp/>lots<sp/>of<sp/>internal<sp/>information<sp/>and<sp/>tools.<sp/>Although<sp/>it<sp/>is<sp/>primary<sp/>designed<sp/>as<sp/>a<sp/>debugging<sp/>tool,<sp/>having<sp/>access<sp/>to<sp/>that<sp/>information<sp/>tends<sp/>to<sp/>help<sp/>understands<sp/>concepts.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#####<sp/>[Return<sp/>to<sp/>Index](#index)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Q.<sp/>What<sp/>is<sp/>this<sp/>library<sp/>called?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**This<sp/>library<sp/>is<sp/>called<sp/>Dear<sp/>ImGui**.<sp/>Please<sp/>refer<sp/>to<sp/>it<sp/>as<sp/>Dear<sp/>ImGui<sp/>(not<sp/>ImGui,<sp/>not<sp/>IMGUI).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">(The<sp/>library<sp/>misleadingly<sp/>started<sp/>its<sp/>life<sp/>in<sp/>2014<sp/>as<sp/>&quot;ImGui&quot;<sp/>due<sp/>to<sp/>the<sp/>fact<sp/>that<sp/>I<sp/>didn&apos;t<sp/>give<sp/>it<sp/>a<sp/>proper<sp/>name<sp/>when<sp/>I<sp/>released<sp/>1.0,<sp/>and<sp/>had<sp/>no<sp/>particular<sp/>expectation<sp/>that<sp/>it<sp/>would<sp/>take<sp/>off.<sp/>However,<sp/>the<sp/>term<sp/>IMGUI<sp/>(immediate-mode<sp/>graphical<sp/>user<sp/>interface)<sp/>was<sp/>coined<sp/>before<sp/>and<sp/>is<sp/>being<sp/>used<sp/>in<sp/>variety<sp/>of<sp/>other<sp/>situations<sp/>e.g.<sp/>Unity<sp/>uses<sp/>it<sp/>own<sp/>implementation<sp/>of<sp/>the<sp/>IMGUI<sp/>paradigm.<sp/>To<sp/>reduce<sp/>the<sp/>ambiguity<sp/>without<sp/>affecting<sp/>existing<sp/>code<sp/>bases,<sp/>I<sp/>have<sp/>decided<sp/>in<sp/>December<sp/>2015<sp/>a<sp/>fully<sp/>qualified<sp/>name<sp/>&quot;Dear<sp/>ImGui&quot;<sp/>for<sp/>this<sp/>library.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#####<sp/>[Return<sp/>to<sp/>Index](#index)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Q:<sp/>Which<sp/>version<sp/>should<sp/>I<sp/>get?</highlight></codeline>
<codeline><highlight class="normal">I<sp/>occasionally<sp/>tag<sp/>[Releases](https://github.com/ocornut/imgui/releases)<sp/>but<sp/>it<sp/>is<sp/>generally<sp/>safe<sp/>and<sp/>recommended<sp/>to<sp/>sync<sp/>to<sp/>master/latest.<sp/>The<sp/>library<sp/>is<sp/>fairly<sp/>stable<sp/>and<sp/>regressions<sp/>tend<sp/>to<sp/>be<sp/>fixed<sp/>fast<sp/>when<sp/>reported.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>may<sp/>use<sp/>the<sp/>[docking](https://github.com/ocornut/imgui/tree/docking)<sp/>branch<sp/>which<sp/>includes:</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[Docking<sp/>features](https://github.com/ocornut/imgui/issues/2109)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[Multi-viewport<sp/>features](https://github.com/ocornut/imgui/issues/1542)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Many<sp/>projects<sp/>are<sp/>using<sp/>this<sp/>branch<sp/>and<sp/>it<sp/>is<sp/>kept<sp/>in<sp/>sync<sp/>with<sp/>master<sp/>regularly.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#####<sp/>[Return<sp/>to<sp/>Index](#index)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">----</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Q&amp;A:<sp/>Integration</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Q:<sp/>How<sp/>to<sp/>get<sp/>started?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Read<sp/>[EXAMPLES.md](https://github.com/ocornut/imgui/blob/master/docs/EXAMPLES.md).<sp/>&lt;BR&gt;</highlight></codeline>
<codeline><highlight class="normal">Read<sp/>[BACKENDS.md](https://github.com/ocornut/imgui/blob/master/docs/BACKENDS.md).<sp/>&lt;BR&gt;</highlight></codeline>
<codeline><highlight class="normal">Read<sp/>`PROGRAMMER<sp/>GUIDE`<sp/>section<sp/>of<sp/>[imgui.cpp](https://github.com/ocornut/imgui/blob/master/imgui.cpp).<sp/>&lt;BR&gt;</highlight></codeline>
<codeline><highlight class="normal">The<sp/>[Wiki](https://github.com/ocornut/imgui/wiki)<sp/>is<sp/>a<sp/>hub<sp/>to<sp/>many<sp/>resources<sp/>and<sp/>links.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">For<sp/>first-time<sp/>users<sp/>having<sp/>issues<sp/>compiling/linking/running<sp/>or<sp/>issues<sp/>loading<sp/>fonts,<sp/>please<sp/>use<sp/>[GitHub<sp/>Discussions](https://github.com/ocornut/imgui/discussions).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#####<sp/>[Return<sp/>to<sp/>Index](#index)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Q:<sp/>How<sp/>can<sp/>I<sp/>tell<sp/>whether<sp/>to<sp/>dispatch<sp/>mouse/keyboard<sp/>to<sp/>Dear<sp/>ImGui<sp/>or<sp/>my<sp/>application?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>read<sp/>the<sp/>`io.WantCaptureMouse`,<sp/>`io.WantCaptureKeyboard`<sp/>and<sp/>`io.WantTextInput`<sp/>flags<sp/>from<sp/>the<sp/>ImGuiIO<sp/>structure.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>When<sp/>`io.WantCaptureMouse`<sp/>is<sp/>set,<sp/>you<sp/>need<sp/>to<sp/>discard/hide<sp/>the<sp/>mouse<sp/>inputs<sp/>from<sp/>your<sp/>underlying<sp/>application.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>When<sp/>`io.WantCaptureKeyboard`<sp/>is<sp/>set,<sp/>you<sp/>need<sp/>to<sp/>discard/hide<sp/>the<sp/>keyboard<sp/>inputs<sp/>from<sp/>your<sp/>underlying<sp/>application.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>When<sp/>`io.WantTextInput`<sp/>is<sp/>set,<sp/>you<sp/>can<sp/>notify<sp/>your<sp/>OS/engine<sp/>to<sp/>popup<sp/>an<sp/>on-screen<sp/>keyboard,<sp/>if<sp/>available<sp/>(e.g.<sp/>on<sp/>a<sp/>mobile<sp/>phone,<sp/>or<sp/>console<sp/>OS).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Important:<sp/>you<sp/>should<sp/>always<sp/>pass<sp/>your<sp/>mouse/keyboard<sp/>inputs<sp/>to<sp/>Dear<sp/>ImGui,<sp/>regardless<sp/>of<sp/>the<sp/>value<sp/>`io.WantCaptureMouse`/`io.WantCaptureKeyboard`.<sp/>This<sp/>is<sp/>because<sp/>e.g.<sp/>we<sp/>need<sp/>to<sp/>detect<sp/>that<sp/>you<sp/>clicked<sp/>in<sp/>the<sp/>void<sp/>to<sp/>unfocus<sp/>its<sp/>own<sp/>windows,<sp/>and<sp/>other<sp/>reasons.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">void<sp/>MyLowLevelMouseButtonHandler(int<sp/>button,<sp/>bool<sp/>down)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>(1)<sp/>ALWAYS<sp/>forward<sp/>mouse<sp/>data<sp/>to<sp/>ImGui!<sp/>This<sp/>is<sp/>automatic<sp/>with<sp/>default<sp/>backends.<sp/>With<sp/>your<sp/>own<sp/>backend:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ImGuiIO&amp;<sp/>io<sp/>=<sp/>ImGui::GetIO();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>io.MouseDown[button]<sp/>=<sp/>down;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>(2)<sp/>ONLY<sp/>forward<sp/>mouse<sp/>data<sp/>to<sp/>your<sp/>underlying<sp/>app/game.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!io.WantCaptureMouse)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>my_game-&gt;HandleMouseData(...);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Note:**<sp/>The<sp/>`io.WantCaptureMouse`<sp/>is<sp/>more<sp/>correct<sp/>that<sp/>any<sp/>manual<sp/>attempt<sp/>to<sp/>&quot;check<sp/>if<sp/>the<sp/>mouse<sp/>is<sp/>hovering<sp/>a<sp/>window&quot;<sp/>(don&apos;t<sp/>do<sp/>that!).<sp/>It<sp/>handle<sp/>mouse<sp/>dragging<sp/>correctly<sp/>(both<sp/>dragging<sp/>that<sp/>started<sp/>over<sp/>your<sp/>application<sp/>or<sp/>over<sp/>a<sp/>Dear<sp/>ImGui<sp/>window)<sp/>and<sp/>handle<sp/>e.g.<sp/>popup<sp/>and<sp/>modal<sp/>windows<sp/>blocking<sp/>inputs.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Note:**<sp/>Those<sp/>flags<sp/>are<sp/>updated<sp/>by<sp/>`ImGui::NewFrame()`.<sp/>However<sp/>it<sp/>is<sp/>generally<sp/>more<sp/>correct<sp/>and<sp/>easier<sp/>that<sp/>you<sp/>poll<sp/>flags<sp/>from<sp/>the<sp/>previous<sp/>frame,<sp/>then<sp/>submit<sp/>your<sp/>inputs,<sp/>then<sp/>call<sp/>`NewFrame()`.<sp/>If<sp/>you<sp/>attempt<sp/>to<sp/>do<sp/>the<sp/>opposite<sp/>(which<sp/>is<sp/>generally<sp/>harder)<sp/>you<sp/>are<sp/>likely<sp/>going<sp/>to<sp/>submit<sp/>your<sp/>inputs<sp/>after<sp/>`NewFrame()`,<sp/>and<sp/>therefore<sp/>too<sp/>late.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Note:**<sp/>If<sp/>you<sp/>are<sp/>using<sp/>a<sp/>touch<sp/>device,<sp/>you<sp/>may<sp/>find<sp/>use<sp/>for<sp/>an<sp/>early<sp/>call<sp/>to<sp/>`UpdateHoveredWindowAndCaptureFlags()`<sp/>to<sp/>correctly<sp/>dispatch<sp/>your<sp/>initial<sp/>touch.<sp/>We<sp/>will<sp/>work<sp/>on<sp/>better<sp/>out-of-the-box<sp/>touch<sp/>support<sp/>in<sp/>the<sp/>future.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Note:**<sp/>Text<sp/>input<sp/>widget<sp/>releases<sp/>focus<sp/>on<sp/>the<sp/>&quot;KeyDown&quot;<sp/>event<sp/>of<sp/>the<sp/>Return<sp/>key,<sp/>so<sp/>the<sp/>subsequent<sp/>&quot;KeyUp&quot;<sp/>event<sp/>that<sp/>your<sp/>application<sp/>receive<sp/>will<sp/>typically<sp/>have<sp/>`io.WantCaptureKeyboard<sp/>==<sp/>false`.<sp/>Depending<sp/>on<sp/>your<sp/>application<sp/>logic<sp/>it<sp/>may<sp/>or<sp/>not<sp/>be<sp/>inconvenient<sp/>to<sp/>receive<sp/>that<sp/>KeyUp<sp/>event.<sp/>You<sp/>might<sp/>want<sp/>to<sp/>track<sp/>which<sp/>key-downs<sp/>were<sp/>targeted<sp/>for<sp/>Dear<sp/>ImGui,<sp/>e.g.<sp/>with<sp/>an<sp/>array<sp/>of<sp/>bool,<sp/>and<sp/>filter<sp/>out<sp/>the<sp/>corresponding<sp/>key-ups.)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#####<sp/>[Return<sp/>to<sp/>Index](#index)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Q:<sp/>How<sp/>can<sp/>I<sp/>enable<sp/>keyboard<sp/>or<sp/>gamepad<sp/>controls?</highlight></codeline>
<codeline><highlight class="normal">-<sp/>The<sp/>gamepad/keyboard<sp/>navigation<sp/>is<sp/>fairly<sp/>functional<sp/>and<sp/>keeps<sp/>being<sp/>improved.<sp/>The<sp/>initial<sp/>focus<sp/>was<sp/>to<sp/>support<sp/>game<sp/>controllers,<sp/>but<sp/>keyboard<sp/>is<sp/>becoming<sp/>increasingly<sp/>and<sp/>decently<sp/>usable.<sp/>Gamepad<sp/>support<sp/>is<sp/>particularly<sp/>useful<sp/>to<sp/>use<sp/>Dear<sp/>ImGui<sp/>on<sp/>a<sp/>game<sp/>console<sp/>(e.g.<sp/>PS4,<sp/>Switch,<sp/>XB1)<sp/>without<sp/>a<sp/>mouse<sp/>connected!</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Keyboard:<sp/>set<sp/>`io.ConfigFlags<sp/>|=<sp/>ImGuiConfigFlags_NavEnableKeyboard`<sp/>to<sp/>enable.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Gamepad:<sp/>set<sp/>`io.ConfigFlags<sp/>|=<sp/>ImGuiConfigFlags_NavEnableGamepad`<sp/>to<sp/>enable<sp/>(with<sp/>a<sp/>supporting<sp/>backend).</highlight></codeline>
<codeline><highlight class="normal">-<sp/>See<sp/>[Control<sp/>Sheets<sp/>for<sp/>Gamepads](http://www.dearimgui.org/controls_sheets)<sp/>(reference<sp/>PNG/PSD<sp/>for<sp/>for<sp/>PS4,<sp/>XB1,<sp/>Switch<sp/>gamepads).</highlight></codeline>
<codeline><highlight class="normal">-<sp/>See<sp/>`USING<sp/>GAMEPAD/KEYBOARD<sp/>NAVIGATION<sp/>CONTROLS`<sp/>section<sp/>of<sp/>[imgui.cpp](https://github.com/ocornut/imgui/blob/master/imgui.cpp)<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#####<sp/>[Return<sp/>to<sp/>Index](#index)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Q:<sp/>How<sp/>can<sp/>I<sp/>use<sp/>this<sp/>on<sp/>a<sp/>machine<sp/>without<sp/>mouse,<sp/>keyboard<sp/>or<sp/>screen?<sp/>(input<sp/>share,<sp/>remote<sp/>display)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>You<sp/>can<sp/>share<sp/>your<sp/>computer<sp/>mouse<sp/>seamlessly<sp/>with<sp/>your<sp/>console/tablet/phone<sp/>using<sp/>solutions<sp/>such<sp/>as<sp/>[Synergy](https://symless.com/synergy)</highlight></codeline>
<codeline><highlight class="normal">This<sp/>is<sp/>the<sp/>preferred<sp/>solution<sp/>for<sp/>developer<sp/>productivity.</highlight></codeline>
<codeline><highlight class="normal">In<sp/>particular,<sp/>the<sp/>[micro-synergy-client<sp/>repository](https://github.com/symless/micro-synergy-client)<sp/>has<sp/>simple</highlight></codeline>
<codeline><highlight class="normal">and<sp/>portable<sp/>source<sp/>code<sp/>(uSynergy.c/.h)<sp/>for<sp/>a<sp/>small<sp/>embeddable<sp/>client<sp/>that<sp/>you<sp/>can<sp/>use<sp/>on<sp/>any<sp/>platform<sp/>to<sp/>connect</highlight></codeline>
<codeline><highlight class="normal">to<sp/>your<sp/>host<sp/>computer,<sp/>based<sp/>on<sp/>the<sp/>Synergy<sp/>1.x<sp/>protocol.<sp/>Make<sp/>sure<sp/>you<sp/>download<sp/>the<sp/>Synergy<sp/>1<sp/>server<sp/>on<sp/>your<sp/>computer.</highlight></codeline>
<codeline><highlight class="normal">Console<sp/>SDK<sp/>also<sp/>sometimes<sp/>provide<sp/>equivalent<sp/>tooling<sp/>or<sp/>wrapper<sp/>for<sp/>Synergy-like<sp/>protocols.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Game<sp/>console<sp/>users:<sp/>consider<sp/>emulating<sp/>a<sp/>mouse<sp/>cursor<sp/>with<sp/>DualShock4<sp/>touch<sp/>pad<sp/>or<sp/>a<sp/>spare<sp/>analog<sp/>stick<sp/>as<sp/>a<sp/>mouse-emulation<sp/>fallback.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>You<sp/>may<sp/>also<sp/>use<sp/>a<sp/>third<sp/>party<sp/>solution<sp/>such<sp/>as<sp/>[netImgui](https://github.com/sammyfreg/netImgui),<sp/>[Remote<sp/>ImGui](https://github.com/JordiRos/remoteimgui)<sp/>or<sp/>[imgui-ws](https://github.com/ggerganov/imgui-ws)<sp/>which<sp/>sends<sp/>the<sp/>vertices<sp/>to<sp/>render<sp/>over<sp/>the<sp/>local<sp/>network,<sp/>allowing<sp/>you<sp/>to<sp/>use<sp/>Dear<sp/>ImGui<sp/>even<sp/>on<sp/>a<sp/>screen-less<sp/>machine.<sp/>See<sp/>[Wiki](https://github.com/ocornut/imgui/wiki)<sp/>index<sp/>for<sp/>most<sp/>details.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>For<sp/>touch<sp/>inputs,<sp/>you<sp/>can<sp/>increase<sp/>the<sp/>hit<sp/>box<sp/>of<sp/>widgets<sp/>(via<sp/>the<sp/>`style.TouchPadding`<sp/>setting)<sp/>to<sp/>accommodate<sp/>for<sp/>the<sp/>lack<sp/>of<sp/>precision<sp/>of<sp/>touch<sp/>inputs,<sp/>but<sp/>it<sp/>is<sp/>recommended<sp/>you<sp/>use<sp/>a<sp/>mouse<sp/>or<sp/>gamepad<sp/>to<sp/>allow<sp/>optimizing<sp/>for<sp/>screen<sp/>real-estate<sp/>and<sp/>precision.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#####<sp/>[Return<sp/>to<sp/>Index](#index)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Q:<sp/>I<sp/>integrated<sp/>Dear<sp/>ImGui<sp/>in<sp/>my<sp/>engine<sp/>and<sp/>little<sp/>squares<sp/>are<sp/>showing<sp/>instead<sp/>of<sp/>text...</highlight></codeline>
<codeline><highlight class="normal">Your<sp/>renderer<sp/>is<sp/>not<sp/>using<sp/>the<sp/>font<sp/>texture<sp/>correctly<sp/>or<sp/>it<sp/>hasn&apos;t<sp/>been<sp/>uploaded<sp/>to<sp/>the<sp/>GPU.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>If<sp/>this<sp/>happens<sp/>using<sp/>the<sp/>standard<sp/>backends:<sp/>A)<sp/>have<sp/>you<sp/>modified<sp/>the<sp/>font<sp/>atlas<sp/>after<sp/>`ImGui_ImplXXX_NewFrame()`?<sp/>B)<sp/>maybe<sp/>the<sp/>texture<sp/>failed<sp/>to<sp/>upload,<sp/>which<sp/>could<sp/>happens<sp/>if<sp/>for<sp/>some<sp/>reason<sp/>your<sp/>texture<sp/>is<sp/>too<sp/>big.<sp/>Also<sp/>see<sp/>[docs/FONTS.md](https://github.com/ocornut/imgui/blob/master/docs/FONTS.md).</highlight></codeline>
<codeline><highlight class="normal">-<sp/>If<sp/>this<sp/>happens<sp/>with<sp/>a<sp/>custom<sp/>backend:<sp/>make<sp/>sure<sp/>you<sp/>have<sp/>uploaded<sp/>the<sp/>font<sp/>texture<sp/>to<sp/>the<sp/>GPU,<sp/>that<sp/>all<sp/>shaders<sp/>are<sp/>rendering<sp/>states<sp/>are<sp/>setup<sp/>properly<sp/>(e.g.<sp/>texture<sp/>is<sp/>bound).<sp/>Compare<sp/>your<sp/>code<sp/>to<sp/>existing<sp/>backends<sp/>and<sp/>use<sp/>a<sp/>graphics<sp/>debugger<sp/>such<sp/>as<sp/>[RenderDoc](https://renderdoc.org)<sp/>to<sp/>debug<sp/>your<sp/>rendering<sp/>states.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#####<sp/>[Return<sp/>to<sp/>Index](#index)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Q:<sp/>I<sp/>integrated<sp/>Dear<sp/>ImGui<sp/>in<sp/>my<sp/>engine<sp/>and<sp/>some<sp/>elements<sp/>are<sp/>clipping<sp/>or<sp/>disappearing<sp/>when<sp/>I<sp/>move<sp/>windows<sp/>around...</highlight></codeline>
<codeline><highlight class="normal">###<sp/>Q:<sp/>I<sp/>integrated<sp/>Dear<sp/>ImGui<sp/>in<sp/>my<sp/>engine<sp/>and<sp/>some<sp/>elements<sp/>are<sp/>displaying<sp/>outside<sp/>their<sp/>expected<sp/>windows<sp/>boundaries...</highlight></codeline>
<codeline><highlight class="normal">You<sp/>are<sp/>probably<sp/>mishandling<sp/>the<sp/>clipping<sp/>rectangles<sp/>in<sp/>your<sp/>render<sp/>function.</highlight></codeline>
<codeline><highlight class="normal">Each<sp/>draw<sp/>command<sp/>needs<sp/>the<sp/>triangle<sp/>rendered<sp/>using<sp/>the<sp/>clipping<sp/>rectangle<sp/>provided<sp/>in<sp/>the<sp/>ImDrawCmd<sp/>structure<sp/>(`ImDrawCmd-&gt;CllipRect`).</highlight></codeline>
<codeline><highlight class="normal">Rectangles<sp/>provided<sp/>by<sp/>Dear<sp/>ImGui<sp/>are<sp/>defined<sp/>as</highlight></codeline>
<codeline><highlight class="normal">`(x1=left,y1=top,x2=right,y2=bottom)`</highlight></codeline>
<codeline><highlight class="normal">and<sp/>**NOT**<sp/>as</highlight></codeline>
<codeline><highlight class="normal">`(x1,y1,width,height)`</highlight></codeline>
<codeline><highlight class="normal">Refer<sp/>to<sp/>rendering<sp/>backends<sp/>in<sp/>the<sp/>[examples/](https://github.com/ocornut/imgui/tree/master/examples)<sp/>folder<sp/>for<sp/>references<sp/>of<sp/>how<sp/>to<sp/>handle<sp/>the<sp/>`ClipRect`<sp/>field.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#####<sp/>[Return<sp/>to<sp/>Index](#index)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Q&amp;A:<sp/>Usage</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Q:<sp/>About<sp/>the<sp/>ID<sp/>Stack<sp/>system...</highlight></codeline>
<codeline><highlight class="normal">###<sp/>Q:<sp/>Why<sp/>is<sp/>my<sp/>widget<sp/>not<sp/>reacting<sp/>when<sp/>I<sp/>click<sp/>on<sp/>it?</highlight></codeline>
<codeline><highlight class="normal">###<sp/>Q:<sp/>How<sp/>can<sp/>I<sp/>have<sp/>widgets<sp/>with<sp/>an<sp/>empty<sp/>label?</highlight></codeline>
<codeline><highlight class="normal">###<sp/>Q:<sp/>How<sp/>can<sp/>I<sp/>have<sp/>multiple<sp/>widgets<sp/>with<sp/>the<sp/>same<sp/>label?</highlight></codeline>
<codeline><highlight class="normal">###<sp/>Q:<sp/>How<sp/>can<sp/>I<sp/>have<sp/>multiple<sp/>windows<sp/>with<sp/>the<sp/>same<sp/>label?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A<sp/>primer<sp/>on<sp/>labels<sp/>and<sp/>the<sp/>ID<sp/>Stack...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Dear<sp/>ImGui<sp/>internally<sp/>needs<sp/>to<sp/>uniquely<sp/>identify<sp/>UI<sp/>elements.</highlight></codeline>
<codeline><highlight class="normal">Elements<sp/>that<sp/>are<sp/>typically<sp/>not<sp/>clickable<sp/>(such<sp/>as<sp/>calls<sp/>to<sp/>the<sp/>Text<sp/>functions)<sp/>don&apos;t<sp/>need<sp/>an<sp/>ID.</highlight></codeline>
<codeline><highlight class="normal">Interactive<sp/>widgets<sp/>(such<sp/>as<sp/>calls<sp/>to<sp/>Button<sp/>buttons)<sp/>need<sp/>a<sp/>unique<sp/>ID.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Unique<sp/>ID<sp/>are<sp/>used<sp/>internally<sp/>to<sp/>track<sp/>active<sp/>widgets<sp/>and<sp/>occasionally<sp/>associate<sp/>state<sp/>to<sp/>widgets.&lt;BR&gt;</highlight></codeline>
<codeline><highlight class="normal">Unique<sp/>ID<sp/>are<sp/>implicitly<sp/>built<sp/>from<sp/>the<sp/>hash<sp/>of<sp/>multiple<sp/>elements<sp/>that<sp/>identify<sp/>the<sp/>&quot;path&quot;<sp/>to<sp/>the<sp/>UI<sp/>element.**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Since<sp/>Dear<sp/>ImGui<sp/>1.85<sp/>you<sp/>can<sp/>use<sp/>`Demo&gt;Tools&gt;Stack<sp/>Tool`<sp/>or<sp/>call<sp/>`ImGui::ShowStackToolWindow()`.<sp/>The<sp/>tool<sp/>display<sp/>intermediate<sp/>values<sp/>leading<sp/>to<sp/>the<sp/>creation<sp/>of<sp/>a<sp/>unique<sp/>ID,<sp/>making<sp/>things<sp/>easier<sp/>to<sp/>debug<sp/>and<sp/>understand.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">![Stack<sp/>tool](https://user-images.githubusercontent.com/8225057/136235657-a0ea5665-dcd1-423f-9be6-dc3f8ced8f12.png)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>Unique<sp/>ID<sp/>are<sp/>often<sp/>derived<sp/>from<sp/>a<sp/>string<sp/>label<sp/>and<sp/>at<sp/>minimum<sp/>scoped<sp/>within<sp/>their<sp/>host<sp/>window:</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">Begin(&quot;MyWindow&quot;);</highlight></codeline>
<codeline><highlight class="normal">Button(&quot;OK&quot;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Label<sp/>=<sp/>&quot;OK&quot;,<sp/><sp/><sp/><sp/><sp/>ID<sp/>=<sp/>hash<sp/>of<sp/>(&quot;MyWindow&quot;,<sp/>&quot;OK&quot;)</highlight></codeline>
<codeline><highlight class="normal">Button(&quot;Cancel&quot;);<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Label<sp/>=<sp/>&quot;Cancel&quot;,<sp/>ID<sp/>=<sp/>hash<sp/>of<sp/>(&quot;MyWindow&quot;,<sp/>&quot;Cancel&quot;)</highlight></codeline>
<codeline><highlight class="normal">End();</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Other<sp/>elements<sp/>such<sp/>as<sp/>tree<sp/>nodes,<sp/>etc.<sp/>also<sp/>pushes<sp/>to<sp/>the<sp/>ID<sp/>stack:</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">Begin(&quot;MyWindow&quot;);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(TreeNode(&quot;MyTreeNode&quot;))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Button(&quot;OK&quot;);<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Label<sp/>=<sp/>&quot;OK&quot;,<sp/><sp/><sp/><sp/><sp/>ID<sp/>=<sp/>hash<sp/>of<sp/>(&quot;MyWindow&quot;,<sp/>&quot;MyTreeNode&quot;,<sp/>&quot;OK&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>TreePop();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">End();</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Two<sp/>items<sp/>labeled<sp/>&quot;OK&quot;<sp/>in<sp/>different<sp/>windows<sp/>or<sp/>different<sp/>tree<sp/>locations<sp/>won&apos;t<sp/>collide:</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">Begin(&quot;MyFirstWindow&quot;);</highlight></codeline>
<codeline><highlight class="normal">Button(&quot;OK&quot;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Label<sp/>=<sp/>&quot;OK&quot;,<sp/><sp/><sp/><sp/><sp/>ID<sp/>=<sp/>hash<sp/>of<sp/>(&quot;MyFirstWindow&quot;,<sp/>&quot;OK&quot;)</highlight></codeline>
<codeline><highlight class="normal">End();</highlight></codeline>
<codeline><highlight class="normal">Begin(&quot;MyOtherWindow&quot;);</highlight></codeline>
<codeline><highlight class="normal">Button(&quot;OK&quot;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Label<sp/>=<sp/>&quot;OK&quot;,<sp/><sp/><sp/><sp/><sp/>ID<sp/>=<sp/>hash<sp/>of<sp/>(&quot;MyOtherWindow&quot;,<sp/>&quot;OK&quot;)</highlight></codeline>
<codeline><highlight class="normal">End();</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>If<sp/>you<sp/>have<sp/>a<sp/>same<sp/>ID<sp/>twice<sp/>in<sp/>the<sp/>same<sp/>location,<sp/>you&apos;ll<sp/>have<sp/>a<sp/>conflict:</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">Begin(&quot;MyWindow&quot;);</highlight></codeline>
<codeline><highlight class="normal">Button(&quot;OK&quot;);</highlight></codeline>
<codeline><highlight class="normal">Button(&quot;OK&quot;);<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>ERROR:<sp/>ID<sp/>collision<sp/>with<sp/>the<sp/>first<sp/>button!<sp/>Interacting<sp/>with<sp/>either<sp/>button<sp/>will<sp/>trigger<sp/>the<sp/>first<sp/>one.</highlight></codeline>
<codeline><highlight class="normal">Button(&quot;&quot;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>ERROR:<sp/>ID<sp/>collision<sp/>with<sp/>Begin(&quot;MyWindow&quot;)!</highlight></codeline>
<codeline><highlight class="normal">End();</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">Fear<sp/>not!<sp/>this<sp/>is<sp/>easy<sp/>to<sp/>solve<sp/>and<sp/>there<sp/>are<sp/>many<sp/>ways<sp/>to<sp/>solve<sp/>it!</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>Solving<sp/>ID<sp/>conflict<sp/>in<sp/>a<sp/>simple/local<sp/>context:</highlight></codeline>
<codeline><highlight class="normal">When<sp/>passing<sp/>a<sp/>label<sp/>you<sp/>can<sp/>optionally<sp/>specify<sp/>extra<sp/>ID<sp/>information<sp/>within<sp/>string<sp/>itself.</highlight></codeline>
<codeline><highlight class="normal">Use<sp/>&quot;##&quot;<sp/>to<sp/>pass<sp/>a<sp/>complement<sp/>to<sp/>the<sp/>ID<sp/>that<sp/>won&apos;t<sp/>be<sp/>visible<sp/>to<sp/>the<sp/>end-user.</highlight></codeline>
<codeline><highlight class="normal">This<sp/>helps<sp/>solving<sp/>the<sp/>simple<sp/>collision<sp/>cases<sp/>when<sp/>you<sp/>know<sp/>e.g.<sp/>at<sp/>compilation<sp/>time<sp/>which<sp/>items</highlight></codeline>
<codeline><highlight class="normal">are<sp/>going<sp/>to<sp/>be<sp/>created:</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">Begin(&quot;MyWindow&quot;);</highlight></codeline>
<codeline><highlight class="normal">Button(&quot;Play&quot;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Label<sp/>=<sp/>&quot;Play&quot;,<sp/><sp/><sp/>ID<sp/>=<sp/>hash<sp/>of<sp/>(&quot;MyWindow&quot;,<sp/>&quot;Play&quot;)</highlight></codeline>
<codeline><highlight class="normal">Button(&quot;Play##foo1&quot;);<sp/><sp/>//<sp/>Label<sp/>=<sp/>&quot;Play&quot;,<sp/><sp/><sp/>ID<sp/>=<sp/>hash<sp/>of<sp/>(&quot;MyWindow&quot;,<sp/>&quot;Play##foo1&quot;)<sp/><sp/>//<sp/>Different<sp/>from<sp/>other<sp/>buttons</highlight></codeline>
<codeline><highlight class="normal">Button(&quot;Play##foo2&quot;);<sp/><sp/>//<sp/>Label<sp/>=<sp/>&quot;Play&quot;,<sp/><sp/><sp/>ID<sp/>=<sp/>hash<sp/>of<sp/>(&quot;MyWindow&quot;,<sp/>&quot;Play##foo2&quot;)<sp/><sp/>//<sp/>Different<sp/>from<sp/>other<sp/>buttons</highlight></codeline>
<codeline><highlight class="normal">Button(&quot;##foo&quot;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Label<sp/>=<sp/>&quot;&quot;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ID<sp/>=<sp/>hash<sp/>of<sp/>(&quot;MyWindow&quot;,<sp/>&quot;##foo&quot;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Different<sp/>from<sp/>window</highlight></codeline>
<codeline><highlight class="normal">End();</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">-<sp/>If<sp/>you<sp/>want<sp/>to<sp/>completely<sp/>hide<sp/>the<sp/>label,<sp/>but<sp/>still<sp/>need<sp/>an<sp/>ID:</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">Checkbox(&quot;##On&quot;,<sp/>&amp;b);<sp/><sp/>//<sp/>Label<sp/>=<sp/>&quot;&quot;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ID<sp/>=<sp/>hash<sp/>of<sp/>(...,<sp/>&quot;##On&quot;)<sp/><sp/><sp/>//<sp/>No<sp/>visible<sp/>label,<sp/>just<sp/>a<sp/>checkbox!</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Occasionally/rarely<sp/>you<sp/>might<sp/>want<sp/>change<sp/>a<sp/>label<sp/>while<sp/>preserving<sp/>a<sp/>constant<sp/>ID.<sp/>This<sp/>allows</highlight></codeline>
<codeline><highlight class="normal">you<sp/>to<sp/>animate<sp/>labels.<sp/>For<sp/>example<sp/>you<sp/>may<sp/>want<sp/>to<sp/>include<sp/>varying<sp/>information<sp/>in<sp/>a<sp/>window<sp/>title<sp/>bar,</highlight></codeline>
<codeline><highlight class="normal">but<sp/>windows<sp/>are<sp/>uniquely<sp/>identified<sp/>by<sp/>their<sp/>ID.<sp/>Use<sp/>&quot;###&quot;<sp/>to<sp/>pass<sp/>a<sp/>label<sp/>that<sp/>isn&apos;t<sp/>part<sp/>of<sp/>ID:</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">Button(&quot;Hello###ID&quot;);<sp/><sp/>//<sp/>Label<sp/>=<sp/>&quot;Hello&quot;,<sp/><sp/>ID<sp/>=<sp/>hash<sp/>of<sp/>(...,<sp/>&quot;###ID&quot;)</highlight></codeline>
<codeline><highlight class="normal">Button(&quot;World###ID&quot;);<sp/><sp/>//<sp/>Label<sp/>=<sp/>&quot;World&quot;,<sp/><sp/>ID<sp/>=<sp/>hash<sp/>of<sp/>(...,<sp/>&quot;###ID&quot;)<sp/><sp/>//<sp/>Same<sp/>ID,<sp/>different<sp/>label</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">sprintf(buf,<sp/>&quot;My<sp/>game<sp/>(%f<sp/>FPS)###MyGame&quot;,<sp/>fps);</highlight></codeline>
<codeline><highlight class="normal">Begin(buf);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Variable<sp/>title,<sp/><sp/><sp/>ID<sp/>=<sp/>hash<sp/>of<sp/>&quot;MyGame&quot;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Solving<sp/>ID<sp/>conflict<sp/>in<sp/>a<sp/>more<sp/>general<sp/>manner:</highlight></codeline>
<codeline><highlight class="normal">Use<sp/>`PushID()`<sp/>/<sp/>`PopID()`<sp/>to<sp/>create<sp/>scopes<sp/>and<sp/>manipulate<sp/>the<sp/>ID<sp/>stack,<sp/>as<sp/>to<sp/>avoid<sp/>ID<sp/>conflicts</highlight></codeline>
<codeline><highlight class="normal">within<sp/>the<sp/>same<sp/>window.<sp/>This<sp/>is<sp/>the<sp/>most<sp/>convenient<sp/>way<sp/>of<sp/>distinguishing<sp/>ID<sp/>when<sp/>iterating<sp/>and</highlight></codeline>
<codeline><highlight class="normal">creating<sp/>many<sp/>UI<sp/>elements<sp/>programmatically.</highlight></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>push<sp/>a<sp/>pointer,<sp/>a<sp/>string<sp/>or<sp/>an<sp/>integer<sp/>value<sp/>into<sp/>the<sp/>ID<sp/>stack.</highlight></codeline>
<codeline><highlight class="normal">Remember<sp/>that<sp/>ID<sp/>are<sp/>formed<sp/>from<sp/>the<sp/>concatenation<sp/>of<sp/>_everything_<sp/>pushed<sp/>into<sp/>the<sp/>ID<sp/>stack.</highlight></codeline>
<codeline><highlight class="normal">At<sp/>each<sp/>level<sp/>of<sp/>the<sp/>stack<sp/>we<sp/>store<sp/>the<sp/>seed<sp/>used<sp/>for<sp/>items<sp/>at<sp/>this<sp/>level<sp/>of<sp/>the<sp/>ID<sp/>stack.</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">Begin(&quot;Window&quot;);</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>100;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>PushID(i);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Push<sp/>i<sp/>to<sp/>the<sp/>id<sp/>tack</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Button(&quot;Click&quot;);<sp/><sp/><sp/><sp/><sp/>//<sp/>Label<sp/>=<sp/>&quot;Click&quot;,<sp/><sp/>ID<sp/>=<sp/>hash<sp/>of<sp/>(&quot;Window&quot;,<sp/>i,<sp/>&quot;Click&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>PopID();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>100;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MyObject*<sp/>obj<sp/>=<sp/>Objects[i];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>PushID(obj);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Button(&quot;Click&quot;);<sp/><sp/><sp/><sp/><sp/>//<sp/>Label<sp/>=<sp/>&quot;Click&quot;,<sp/><sp/>ID<sp/>=<sp/>hash<sp/>of<sp/>(&quot;Window&quot;,<sp/>obj<sp/>pointer,<sp/>&quot;Click&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>PopID();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>100;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MyObject*<sp/>obj<sp/>=<sp/>Objects[i];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>PushID(obj-&gt;Name);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Button(&quot;Click&quot;);<sp/><sp/><sp/><sp/><sp/>//<sp/>Label<sp/>=<sp/>&quot;Click&quot;,<sp/><sp/>ID<sp/>=<sp/>hash<sp/>of<sp/>(&quot;Window&quot;,<sp/>obj-&gt;Name,<sp/>&quot;Click&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>PopID();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">End();</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">-<sp/>You<sp/>can<sp/>stack<sp/>multiple<sp/>prefixes<sp/>into<sp/>the<sp/>ID<sp/>stack:</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">Button(&quot;Click&quot;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Label<sp/>=<sp/>&quot;Click&quot;,<sp/><sp/>ID<sp/>=<sp/>hash<sp/>of<sp/>(...,<sp/>&quot;Click&quot;)</highlight></codeline>
<codeline><highlight class="normal">PushID(&quot;node&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Button(&quot;Click&quot;);<sp/><sp/><sp/><sp/><sp/>//<sp/>Label<sp/>=<sp/>&quot;Click&quot;,<sp/><sp/>ID<sp/>=<sp/>hash<sp/>of<sp/>(...,<sp/>&quot;node&quot;,<sp/>&quot;Click&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>PushID(my_ptr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Button(&quot;Click&quot;);<sp/><sp/><sp/>//<sp/>Label<sp/>=<sp/>&quot;Click&quot;,<sp/><sp/>ID<sp/>=<sp/>hash<sp/>of<sp/>(...,<sp/>&quot;node&quot;,<sp/>my_ptr,<sp/>&quot;Click&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>PopID();</highlight></codeline>
<codeline><highlight class="normal">PopID();</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Tree<sp/>nodes<sp/>implicitly<sp/>creates<sp/>a<sp/>scope<sp/>for<sp/>you<sp/>by<sp/>calling<sp/>`PushID()`:</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">Button(&quot;Click&quot;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Label<sp/>=<sp/>&quot;Click&quot;,<sp/><sp/>ID<sp/>=<sp/>hash<sp/>of<sp/>(...,<sp/>&quot;Click&quot;)</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(TreeNode(&quot;node&quot;))<sp/><sp/>//<sp/>&lt;--<sp/>this<sp/>function<sp/>call<sp/>will<sp/>do<sp/>a<sp/>PushID()<sp/>for<sp/>you<sp/>(unless<sp/>instructed<sp/>not<sp/>to,<sp/>with<sp/>a<sp/>special<sp/>flag)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Button(&quot;Click&quot;);<sp/><sp/><sp/><sp/><sp/>//<sp/>Label<sp/>=<sp/>&quot;Click&quot;,<sp/><sp/>ID<sp/>=<sp/>hash<sp/>of<sp/>(...,<sp/>&quot;node&quot;,<sp/>&quot;Click&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>TreePop();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">When<sp/>working<sp/>with<sp/>trees,<sp/>ID<sp/>are<sp/>used<sp/>to<sp/>preserve<sp/>the<sp/>open/close<sp/>state<sp/>of<sp/>each<sp/>tree<sp/>node.</highlight></codeline>
<codeline><highlight class="normal">Depending<sp/>on<sp/>your<sp/>use<sp/>cases<sp/>you<sp/>may<sp/>want<sp/>to<sp/>use<sp/>strings,<sp/>indices<sp/>or<sp/>pointers<sp/>as<sp/>ID.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>e.g.<sp/>when<sp/>following<sp/>a<sp/>single<sp/>pointer<sp/>that<sp/>may<sp/>change<sp/>over<sp/>time,<sp/>using<sp/>a<sp/>static<sp/>string<sp/>as<sp/>ID</highlight></codeline>
<codeline><highlight class="normal">will<sp/>preserve<sp/>your<sp/>node<sp/>open/closed<sp/>state<sp/>when<sp/>the<sp/>targeted<sp/>object<sp/>change.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>e.g.<sp/>when<sp/>displaying<sp/>a<sp/>list<sp/>of<sp/>objects,<sp/>using<sp/>indices<sp/>or<sp/>pointers<sp/>as<sp/>ID<sp/>will<sp/>preserve<sp/>the</highlight></codeline>
<codeline><highlight class="normal">node<sp/>open/closed<sp/>state<sp/>differently.<sp/>See<sp/>what<sp/>makes<sp/>more<sp/>sense<sp/>in<sp/>your<sp/>situation!</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#####<sp/>[Return<sp/>to<sp/>Index](#index)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Q:<sp/>How<sp/>can<sp/>I<sp/>display<sp/>an<sp/>image?<sp/>What<sp/>is<sp/>ImTextureID,<sp/>how<sp/>does<sp/>it<sp/>work?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Short<sp/>explanation:</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Refer<sp/>to<sp/>[Image<sp/>Loading<sp/>and<sp/>Displaying<sp/>Examples](https://github.com/ocornut/imgui/wiki/Image-Loading-and-Displaying-Examples)<sp/>on<sp/>the<sp/>[Wiki](https://github.com/ocornut/imgui/wiki).</highlight></codeline>
<codeline><highlight class="normal">-<sp/>You<sp/>may<sp/>use<sp/>functions<sp/>such<sp/>as<sp/>`ImGui::Image()`,<sp/>`ImGui::ImageButton()`<sp/>or<sp/>lower-level<sp/>`ImDrawList::AddImage()`<sp/>to<sp/>emit<sp/>draw<sp/>calls<sp/>that<sp/>will<sp/>use<sp/>your<sp/>own<sp/>textures.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Actual<sp/>textures<sp/>are<sp/>identified<sp/>in<sp/>a<sp/>way<sp/>that<sp/>is<sp/>up<sp/>to<sp/>the<sp/>user/engine.<sp/>Those<sp/>identifiers<sp/>are<sp/>stored<sp/>and<sp/>passed<sp/>as<sp/>ImTextureID<sp/>(void*)<sp/>value.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Loading<sp/>image<sp/>files<sp/>from<sp/>the<sp/>disk<sp/>and<sp/>turning<sp/>them<sp/>into<sp/>a<sp/>texture<sp/>is<sp/>not<sp/>within<sp/>the<sp/>scope<sp/>of<sp/>Dear<sp/>ImGui<sp/>(for<sp/>a<sp/>good<sp/>reason).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Please<sp/>read<sp/>documentations<sp/>or<sp/>tutorials<sp/>on<sp/>your<sp/>graphics<sp/>API<sp/>to<sp/>understand<sp/>how<sp/>to<sp/>display<sp/>textures<sp/>on<sp/>the<sp/>screen<sp/>before<sp/>moving<sp/>onward.**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Long<sp/>explanation:</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Dear<sp/>ImGui&apos;s<sp/>job<sp/>is<sp/>to<sp/>create<sp/>&quot;meshes&quot;,<sp/>defined<sp/>in<sp/>a<sp/>renderer-agnostic<sp/>format<sp/>made<sp/>of<sp/>draw<sp/>commands<sp/>and<sp/>vertices.<sp/>At<sp/>the<sp/>end<sp/>of<sp/>the<sp/>frame<sp/>those<sp/>meshes<sp/>(ImDrawList)<sp/>will<sp/>be<sp/>displayed<sp/>by<sp/>your<sp/>rendering<sp/>function.<sp/>They<sp/>are<sp/>made<sp/>up<sp/>of<sp/>textured<sp/>polygons<sp/>and<sp/>the<sp/>code<sp/>to<sp/>render<sp/>them<sp/>is<sp/>generally<sp/>fairly<sp/>short<sp/>(a<sp/>few<sp/>dozen<sp/>lines).<sp/>In<sp/>the<sp/>examples/<sp/>folder<sp/>we<sp/>provide<sp/>functions<sp/>for<sp/>popular<sp/>graphics<sp/>API<sp/>(OpenGL,<sp/>DirectX,<sp/>etc.).</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Each<sp/>rendering<sp/>function<sp/>decides<sp/>on<sp/>a<sp/>data<sp/>type<sp/>to<sp/>represent<sp/>&quot;textures&quot;.<sp/>The<sp/>concept<sp/>of<sp/>what<sp/>is<sp/>a<sp/>&quot;texture&quot;<sp/>is<sp/>entirely<sp/>tied<sp/>to<sp/>your<sp/>underlying<sp/>engine/graphics<sp/>API.</highlight></codeline>
<codeline><highlight class="normal"><sp/>We<sp/>carry<sp/>the<sp/>information<sp/>to<sp/>identify<sp/>a<sp/>&quot;texture&quot;<sp/>in<sp/>the<sp/>ImTextureID<sp/>type.</highlight></codeline>
<codeline><highlight class="normal">ImTextureID<sp/>is<sp/>nothing<sp/>more<sp/>that<sp/>a<sp/>void*,<sp/>aka<sp/>4/8<sp/>bytes<sp/>worth<sp/>of<sp/>data:<sp/>just<sp/>enough<sp/>to<sp/>store<sp/>1<sp/>pointer<sp/>or<sp/>1<sp/>integer<sp/>of<sp/>your<sp/>choice.</highlight></codeline>
<codeline><highlight class="normal">Dear<sp/>ImGui<sp/>doesn&apos;t<sp/>know<sp/>or<sp/>understand<sp/>what<sp/>you<sp/>are<sp/>storing<sp/>in<sp/>ImTextureID,<sp/>it<sp/>merely<sp/>pass<sp/>ImTextureID<sp/>values<sp/>until<sp/>they<sp/>reach<sp/>your<sp/>rendering<sp/>function.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>In<sp/>the<sp/>[examples/](https://github.com/ocornut/imgui/tree/master/examples)<sp/>backends,<sp/>for<sp/>each<sp/>graphics<sp/>API<sp/>we<sp/>decided<sp/>on<sp/>a<sp/>type<sp/>that<sp/>is<sp/>likely<sp/>to<sp/>be<sp/>a<sp/>good<sp/>representation<sp/>for<sp/>specifying<sp/>an<sp/>image<sp/>from<sp/>the<sp/>end-user<sp/>perspective.<sp/>This<sp/>is<sp/>what<sp/>the<sp/>_examples_<sp/>rendering<sp/>functions<sp/>are<sp/>using:</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">OpenGL:</highlight></codeline>
<codeline><highlight class="normal">-<sp/>ImTextureID<sp/>=<sp/>GLuint</highlight></codeline>
<codeline><highlight class="normal">-<sp/>See<sp/>ImGui_ImplOpenGL3_RenderDrawData()<sp/>function<sp/>in<sp/>imgui_impl_opengl3.cpp</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">DirectX9:</highlight></codeline>
<codeline><highlight class="normal">-<sp/>ImTextureID<sp/>=<sp/>LPDIRECT3DTEXTURE9</highlight></codeline>
<codeline><highlight class="normal">-<sp/>See<sp/>ImGui_ImplDX9_RenderDrawData()<sp/>function<sp/>in<sp/>imgui_impl_dx9.cpp</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">DirectX11:</highlight></codeline>
<codeline><highlight class="normal">-<sp/>ImTextureID<sp/>=<sp/>ID3D11ShaderResourceView*</highlight></codeline>
<codeline><highlight class="normal">-<sp/>See<sp/>ImGui_ImplDX11_RenderDrawData()<sp/>function<sp/>in<sp/>imgui_impl_dx11.cpp</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">DirectX12:</highlight></codeline>
<codeline><highlight class="normal">-<sp/>ImTextureID<sp/>=<sp/>D3D12_GPU_DESCRIPTOR_HANDLE</highlight></codeline>
<codeline><highlight class="normal">-<sp/>See<sp/>ImGui_ImplDX12_RenderDrawData()<sp/>function<sp/>in<sp/>imgui_impl_dx12.cpp</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">For<sp/>example,<sp/>in<sp/>the<sp/>OpenGL<sp/>example<sp/>backend<sp/>we<sp/>store<sp/>raw<sp/>OpenGL<sp/>texture<sp/>identifier<sp/>(GLuint)<sp/>inside<sp/>ImTextureID.</highlight></codeline>
<codeline><highlight class="normal">Whereas<sp/>in<sp/>the<sp/>DirectX11<sp/>example<sp/>backend<sp/>we<sp/>store<sp/>a<sp/>pointer<sp/>to<sp/>ID3D11ShaderResourceView<sp/>inside<sp/>ImTextureID,<sp/>which<sp/>is<sp/>a<sp/>higher-level<sp/>structure<sp/>tying<sp/>together<sp/>both<sp/>the<sp/>texture<sp/>and<sp/>information<sp/>about<sp/>its<sp/>format<sp/>and<sp/>how<sp/>to<sp/>read<sp/>it.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>If<sp/>you<sp/>have<sp/>a<sp/>custom<sp/>engine<sp/>built<sp/>over<sp/>e.g.<sp/>OpenGL,<sp/>instead<sp/>of<sp/>passing<sp/>GLuint<sp/>around<sp/>you<sp/>may<sp/>decide<sp/>to<sp/>use<sp/>a<sp/>high-level<sp/>data<sp/>type<sp/>to<sp/>carry<sp/>information<sp/>about<sp/>the<sp/>texture<sp/>as<sp/>well<sp/>as<sp/>how<sp/>to<sp/>display<sp/>it<sp/>(shaders,<sp/>etc.).<sp/>The<sp/>decision<sp/>of<sp/>what<sp/>to<sp/>use<sp/>as<sp/>ImTextureID<sp/>can<sp/>always<sp/>be<sp/>made<sp/>better<sp/>knowing<sp/>how<sp/>your<sp/>codebase<sp/>is<sp/>designed.<sp/>If<sp/>your<sp/>engine<sp/>has<sp/>high-level<sp/>data<sp/>types<sp/>for<sp/>&quot;textures&quot;<sp/>and<sp/>&quot;material&quot;<sp/>then<sp/>you<sp/>may<sp/>want<sp/>to<sp/>use<sp/>them.</highlight></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>are<sp/>starting<sp/>with<sp/>OpenGL<sp/>or<sp/>DirectX<sp/>or<sp/>Vulkan<sp/>and<sp/>haven&apos;t<sp/>built<sp/>much<sp/>of<sp/>a<sp/>rendering<sp/>engine<sp/>over<sp/>them,<sp/>keeping<sp/>the<sp/>default<sp/>ImTextureID<sp/>representation<sp/>suggested<sp/>by<sp/>the<sp/>example<sp/>backends<sp/>is<sp/>probably<sp/>the<sp/>best<sp/>choice.</highlight></codeline>
<codeline><highlight class="normal">(Advanced<sp/>users<sp/>may<sp/>also<sp/>decide<sp/>to<sp/>keep<sp/>a<sp/>low-level<sp/>type<sp/>in<sp/>ImTextureID,<sp/>and<sp/>use<sp/>ImDrawList<sp/>callback<sp/>and<sp/>pass<sp/>information<sp/>to<sp/>their<sp/>renderer)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">User<sp/>code<sp/>may<sp/>do:</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Cast<sp/>our<sp/>texture<sp/>type<sp/>to<sp/>ImTextureID<sp/>/<sp/>void*</highlight></codeline>
<codeline><highlight class="normal">MyTexture*<sp/>texture<sp/>=<sp/>g_CoffeeTableTexture;</highlight></codeline>
<codeline><highlight class="normal">ImGui::Image((void*)texture,<sp/>ImVec2(texture-&gt;Width,<sp/>texture-&gt;Height));</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">The<sp/>renderer<sp/>function<sp/>called<sp/>after<sp/>ImGui::Render()<sp/>will<sp/>receive<sp/>that<sp/>same<sp/>value<sp/>that<sp/>the<sp/>user<sp/>code<sp/>passed:</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Cast<sp/>ImTextureID<sp/>/<sp/>void*<sp/>stored<sp/>in<sp/>the<sp/>draw<sp/>command<sp/>as<sp/>our<sp/>texture<sp/>type</highlight></codeline>
<codeline><highlight class="normal">MyTexture*<sp/>texture<sp/>=<sp/>(MyTexture*)pcmd-&gt;GetTexID();</highlight></codeline>
<codeline><highlight class="normal">MyEngineBindTexture2D(texture);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">Once<sp/>you<sp/>understand<sp/>this<sp/>design<sp/>you<sp/>will<sp/>understand<sp/>that<sp/>loading<sp/>image<sp/>files<sp/>and<sp/>turning<sp/>them<sp/>into<sp/>displayable<sp/>textures<sp/>is<sp/>not<sp/>within<sp/>the<sp/>scope<sp/>of<sp/>Dear<sp/>ImGui.</highlight></codeline>
<codeline><highlight class="normal">This<sp/>is<sp/>by<sp/>design<sp/>and<sp/>is<sp/>actually<sp/>a<sp/>good<sp/>thing,<sp/>because<sp/>it<sp/>means<sp/>your<sp/>code<sp/>has<sp/>full<sp/>control<sp/>over<sp/>your<sp/>data<sp/>types<sp/>and<sp/>how<sp/>you<sp/>display<sp/>them.</highlight></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>want<sp/>to<sp/>display<sp/>an<sp/>image<sp/>file<sp/>(e.g.<sp/>PNG<sp/>file)<sp/>into<sp/>the<sp/>screen,<sp/>please<sp/>refer<sp/>to<sp/>documentation<sp/>and<sp/>tutorials<sp/>for<sp/>the<sp/>graphics<sp/>API<sp/>you<sp/>are<sp/>using.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Refer<sp/>to<sp/>[Image<sp/>Loading<sp/>and<sp/>Displaying<sp/>Examples](https://github.com/ocornut/imgui/wiki/Image-Loading-and-Displaying-Examples)<sp/>on<sp/>the<sp/>[Wiki](https://github.com/ocornut/imgui/wiki)<sp/>to<sp/>find<sp/>simplified<sp/>examples<sp/>for<sp/>loading<sp/>textures<sp/>with<sp/>OpenGL,<sp/>DirectX9<sp/>and<sp/>DirectX11.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">C/C++<sp/>tip:<sp/>a<sp/>void*<sp/>is<sp/>pointer-sized<sp/>storage.<sp/>You<sp/>may<sp/>safely<sp/>store<sp/>any<sp/>pointer<sp/>or<sp/>integer<sp/>into<sp/>it<sp/>by<sp/>casting<sp/>your<sp/>value<sp/>to<sp/>ImTextureID<sp/>/<sp/>void*,<sp/>and<sp/>vice-versa.</highlight></codeline>
<codeline><highlight class="normal">Because<sp/>both<sp/>end-points<sp/>(user<sp/>code<sp/>and<sp/>rendering<sp/>function)<sp/>are<sp/>under<sp/>your<sp/>control,<sp/>you<sp/>know<sp/>exactly<sp/>what<sp/>is<sp/>stored<sp/>inside<sp/>the<sp/>ImTextureID<sp/>/<sp/>void*.</highlight></codeline>
<codeline><highlight class="normal">Examples:</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">GLuint<sp/>my_tex<sp/>=<sp/>XXX;</highlight></codeline>
<codeline><highlight class="normal">void*<sp/>my_void_ptr;</highlight></codeline>
<codeline><highlight class="normal">my_void_ptr<sp/>=<sp/>(void*)(intptr_t)my_tex;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>cast<sp/>a<sp/>GLuint<sp/>into<sp/>a<sp/>void*<sp/>(we<sp/>don&apos;t<sp/>take<sp/>its<sp/>address!<sp/>we<sp/>literally<sp/>store<sp/>the<sp/>value<sp/>inside<sp/>the<sp/>pointer)</highlight></codeline>
<codeline><highlight class="normal">my_tex<sp/>=<sp/>(GLuint)(intptr_t)my_void_ptr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>cast<sp/>a<sp/>void*<sp/>into<sp/>a<sp/>GLuint</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ID3D11ShaderResourceView*<sp/>my_dx11_srv<sp/>=<sp/>XXX;</highlight></codeline>
<codeline><highlight class="normal">void*<sp/>my_void_ptr;</highlight></codeline>
<codeline><highlight class="normal">my_void_ptr<sp/>=<sp/>(void*)my_dx11_srv;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>cast<sp/>a<sp/>ID3D11ShaderResourceView*<sp/>into<sp/>an<sp/>opaque<sp/>void*</highlight></codeline>
<codeline><highlight class="normal">my_dx11_srv<sp/>=<sp/>(ID3D11ShaderResourceView*)my_void_ptr;<sp/><sp/><sp/>//<sp/>cast<sp/>a<sp/>void*<sp/>into<sp/>a<sp/>ID3D11ShaderResourceView*</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">Finally,<sp/>you<sp/>may<sp/>call<sp/>`ImGui::ShowMetricsWindow()`<sp/>to<sp/>explore/visualize/understand<sp/>how<sp/>the<sp/>ImDrawList<sp/>are<sp/>generated.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#####<sp/>[Return<sp/>to<sp/>Index](#index)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Q:<sp/>How<sp/>can<sp/>I<sp/>use<sp/>my<sp/>own<sp/>math<sp/>types<sp/>instead<sp/>of<sp/>ImVec2/ImVec4?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>edit<sp/>[imconfig.h](https://github.com/ocornut/imgui/blob/master/imconfig.h)<sp/>and<sp/>setup<sp/>the<sp/>`IM_VEC2_CLASS_EXTRA`/`IM_VEC4_CLASS_EXTRA`<sp/>macros<sp/>to<sp/>add<sp/>implicit<sp/>type<sp/>conversions.</highlight></codeline>
<codeline><highlight class="normal">This<sp/>way<sp/>you&apos;ll<sp/>be<sp/>able<sp/>to<sp/>use<sp/>your<sp/>own<sp/>types<sp/>everywhere,<sp/>e.g.<sp/>passing<sp/>`MyVector2`<sp/>or<sp/>`glm::vec2`<sp/>to<sp/>ImGui<sp/>functions<sp/>instead<sp/>of<sp/>`ImVec2`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#####<sp/>[Return<sp/>to<sp/>Index](#index)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Q:<sp/>How<sp/>can<sp/>I<sp/>interact<sp/>with<sp/>standard<sp/>C++<sp/>types<sp/>(such<sp/>as<sp/>std::string<sp/>and<sp/>std::vector)?</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Being<sp/>highly<sp/>portable<sp/>(backends/bindings<sp/>for<sp/>several<sp/>languages,<sp/>frameworks,<sp/>programming<sp/>style,<sp/>obscure<sp/>or<sp/>older<sp/>platforms/compilers),<sp/>and<sp/>aiming<sp/>for<sp/>compatibility<sp/>&amp;<sp/>performance<sp/>suitable<sp/>for<sp/>every<sp/>modern<sp/>real-time<sp/>game<sp/>engines,<sp/>dear<sp/>imgui<sp/>does<sp/>not<sp/>use<sp/>any<sp/>of<sp/>std<sp/>C++<sp/>types.<sp/>We<sp/>use<sp/>raw<sp/>types<sp/>(e.g.<sp/>char*<sp/>instead<sp/>of<sp/>std::string)<sp/>because<sp/>they<sp/>adapt<sp/>to<sp/>more<sp/>use<sp/>cases.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>To<sp/>use<sp/>ImGui::InputText()<sp/>with<sp/>a<sp/>std::string<sp/>or<sp/>any<sp/>resizable<sp/>string<sp/>class,<sp/>see<sp/>[misc/cpp/imgui_stdlib.h](https://github.com/ocornut/imgui/blob/master/misc/cpp/imgui_stdlib.h).</highlight></codeline>
<codeline><highlight class="normal">-<sp/>To<sp/>use<sp/>combo<sp/>boxes<sp/>and<sp/>list<sp/>boxes<sp/>with<sp/>`std::vector`<sp/>or<sp/>any<sp/>other<sp/>data<sp/>structure:<sp/>the<sp/>`BeginCombo()/EndCombo()`<sp/>API</highlight></codeline>
<codeline><highlight class="normal">lets<sp/>you<sp/>iterate<sp/>and<sp/>submit<sp/>items<sp/>yourself,<sp/>so<sp/>does<sp/>the<sp/>`ListBoxHeader()/ListBoxFooter()`<sp/>API.</highlight></codeline>
<codeline><highlight class="normal">Prefer<sp/>using<sp/>them<sp/>over<sp/>the<sp/>old<sp/>and<sp/>awkward<sp/>`Combo()/ListBox()`<sp/>api.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Generally<sp/>for<sp/>most<sp/>high-level<sp/>types<sp/>you<sp/>should<sp/>be<sp/>able<sp/>to<sp/>access<sp/>the<sp/>underlying<sp/>data<sp/>type.</highlight></codeline>
<codeline><highlight class="normal">You<sp/>may<sp/>write<sp/>your<sp/>own<sp/>one-liner<sp/>wrappers<sp/>to<sp/>facilitate<sp/>user<sp/>code<sp/>(tip:<sp/>add<sp/>new<sp/>functions<sp/>in<sp/>ImGui::<sp/>namespace<sp/>from<sp/>your<sp/>code).</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Dear<sp/>ImGui<sp/>applications<sp/>often<sp/>need<sp/>to<sp/>make<sp/>intensive<sp/>use<sp/>of<sp/>strings.<sp/>It<sp/>is<sp/>expected<sp/>that<sp/>many<sp/>of<sp/>the<sp/>strings<sp/>you<sp/>will<sp/>pass</highlight></codeline>
<codeline><highlight class="normal">to<sp/>the<sp/>API<sp/>are<sp/>raw<sp/>literals<sp/>(free<sp/>in<sp/>C/C++)<sp/>or<sp/>allocated<sp/>in<sp/>a<sp/>manner<sp/>that<sp/>won&apos;t<sp/>incur<sp/>a<sp/>large<sp/>cost<sp/>on<sp/>your<sp/>application.</highlight></codeline>
<codeline><highlight class="normal">Please<sp/>bear<sp/>in<sp/>mind<sp/>that<sp/>using<sp/>`std::string`<sp/>on<sp/>applications<sp/>with<sp/>large<sp/>amount<sp/>of<sp/>UI<sp/>may<sp/>incur<sp/>unsatisfactory<sp/>performances.</highlight></codeline>
<codeline><highlight class="normal">Modern<sp/>implementations<sp/>of<sp/>`std::string`<sp/>often<sp/>include<sp/>small-string<sp/>optimization<sp/>(which<sp/>is<sp/>often<sp/>a<sp/>local<sp/>buffer)<sp/>but<sp/>those</highlight></codeline>
<codeline><highlight class="normal">are<sp/>not<sp/>configurable<sp/>and<sp/>not<sp/>the<sp/>same<sp/>across<sp/>implementations.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>If<sp/>you<sp/>are<sp/>finding<sp/>your<sp/>UI<sp/>traversal<sp/>cost<sp/>to<sp/>be<sp/>too<sp/>large,<sp/>make<sp/>sure<sp/>your<sp/>string<sp/>usage<sp/>is<sp/>not<sp/>leading<sp/>to<sp/>excessive<sp/>amount</highlight></codeline>
<codeline><highlight class="normal">of<sp/>heap<sp/>allocations.<sp/>Consider<sp/>using<sp/>literals,<sp/>statically<sp/>sized<sp/>buffers<sp/>and<sp/>your<sp/>own<sp/>helper<sp/>functions.<sp/>A<sp/>common<sp/>pattern</highlight></codeline>
<codeline><highlight class="normal">is<sp/>that<sp/>you<sp/>will<sp/>need<sp/>to<sp/>build<sp/>lots<sp/>of<sp/>strings<sp/>on<sp/>the<sp/>fly,<sp/>and<sp/>their<sp/>maximum<sp/>length<sp/>can<sp/>be<sp/>easily<sp/>be<sp/>scoped<sp/>ahead.</highlight></codeline>
<codeline><highlight class="normal">One<sp/>possible<sp/>implementation<sp/>of<sp/>a<sp/>helper<sp/>to<sp/>facilitate<sp/>printf-style<sp/>building<sp/>of<sp/>strings:<sp/>https://github.com/ocornut/Str</highlight></codeline>
<codeline><highlight class="normal">This<sp/>is<sp/>a<sp/>small<sp/>helper<sp/>where<sp/>you<sp/>can<sp/>instance<sp/>strings<sp/>with<sp/>configurable<sp/>local<sp/>buffers<sp/>length.<sp/>Many<sp/>game<sp/>engines<sp/>will</highlight></codeline>
<codeline><highlight class="normal">provide<sp/>similar<sp/>or<sp/>better<sp/>string<sp/>helpers.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#####<sp/>[Return<sp/>to<sp/>Index](#index)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Q:<sp/>How<sp/>can<sp/>I<sp/>display<sp/>custom<sp/>shapes?<sp/>(using<sp/>low-level<sp/>ImDrawList<sp/>API)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>You<sp/>can<sp/>use<sp/>the<sp/>low-level<sp/>`ImDrawList`<sp/>api<sp/>to<sp/>render<sp/>shapes<sp/>within<sp/>a<sp/>window.</highlight></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">ImGui::Begin(&quot;My<sp/>shapes&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ImDrawList*<sp/>draw_list<sp/>=<sp/>ImGui::GetWindowDrawList();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Get<sp/>the<sp/>current<sp/>ImGui<sp/>cursor<sp/>position</highlight></codeline>
<codeline><highlight class="normal">ImVec2<sp/>p<sp/>=<sp/>ImGui::GetCursorScreenPos();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Draw<sp/>a<sp/>red<sp/>circle</highlight></codeline>
<codeline><highlight class="normal">draw_list-&gt;AddCircleFilled(ImVec2(p.x<sp/>+<sp/>50,<sp/>p.y<sp/>+<sp/>50),<sp/>30.0f,<sp/>IM_COL32(255,<sp/>0,<sp/>0,<sp/>255),<sp/>16);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Draw<sp/>a<sp/>3<sp/>pixel<sp/>thick<sp/>yellow<sp/>line</highlight></codeline>
<codeline><highlight class="normal">draw_list-&gt;AddLine(ImVec2(p.x,<sp/>p.y),<sp/>ImVec2(p.x<sp/>+<sp/>100.0f,<sp/>p.y<sp/>+<sp/>100.0f),<sp/>IM_COL32(255,<sp/>255,<sp/>0,<sp/>255),<sp/>3.0f);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Advance<sp/>the<sp/>ImGui<sp/>cursor<sp/>to<sp/>claim<sp/>space<sp/>in<sp/>the<sp/>window<sp/>(otherwise<sp/>the<sp/>window<sp/>will<sp/>appears<sp/>small<sp/>and<sp/>needs<sp/>to<sp/>be<sp/>resized)</highlight></codeline>
<codeline><highlight class="normal">ImGui::Dummy(ImVec2(200,<sp/>200));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">ImGui::End();</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">![ImDrawList<sp/>usage](https://raw.githubusercontent.com/wiki/ocornut/imgui/tutorials/CustomRendering01.png)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>Refer<sp/>to<sp/>&quot;Demo<sp/>&gt;<sp/>Examples<sp/>&gt;<sp/>Custom<sp/>Rendering&quot;<sp/>in<sp/>the<sp/>demo<sp/>window<sp/>and<sp/>read<sp/>the<sp/>code<sp/>of<sp/>`ShowExampleAppCustomRendering()`<sp/>in<sp/>`imgui_demo.cpp`<sp/>from<sp/>more<sp/>examples.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>To<sp/>generate<sp/>colors:<sp/>you<sp/>can<sp/>use<sp/>the<sp/>macro<sp/>`IM_COL32(255,255,255,255)`<sp/>to<sp/>generate<sp/>them<sp/>at<sp/>compile<sp/>time,<sp/>or<sp/>use<sp/>`ImGui::GetColorU32(IM_COL32(255,255,255,255))`<sp/>or<sp/>`ImGui::GetColorU32(ImVec4(1.0f,1.0f,1.0f,1.0f))`<sp/>to<sp/>generate<sp/>a<sp/>color<sp/>that<sp/>is<sp/>multiplied<sp/>by<sp/>the<sp/>current<sp/>value<sp/>of<sp/>`style.Alpha`.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Math<sp/>operators:<sp/>if<sp/>you<sp/>have<sp/>setup<sp/>`IM_VEC2_CLASS_EXTRA`<sp/>in<sp/>`imconfig.h`<sp/>to<sp/>bind<sp/>your<sp/>own<sp/>math<sp/>types,<sp/>you<sp/>can<sp/>use<sp/>your<sp/>own<sp/>math<sp/>types<sp/>and<sp/>their<sp/>natural<sp/>operators<sp/>instead<sp/>of<sp/>ImVec2.<sp/>ImVec2<sp/>by<sp/>default<sp/>doesn&apos;t<sp/>export<sp/>any<sp/>math<sp/>operators<sp/>in<sp/>the<sp/>public<sp/>API.<sp/>You<sp/>may<sp/>use<sp/>`#define<sp/>IMGUI_DEFINE_MATH_OPERATORS`<sp/>`#include<sp/>&quot;imgui_internal.h&quot;`<sp/>to<sp/>use<sp/>the<sp/>internally<sp/>defined<sp/>math<sp/>operators,<sp/>but<sp/>instead<sp/>prefer<sp/>using<sp/>your<sp/>own<sp/>math<sp/>library<sp/>and<sp/>set<sp/>it<sp/>up<sp/>in<sp/>`imconfig.h`.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>You<sp/>can<sp/>use<sp/>`ImGui::GetBackgroundDrawList()`<sp/>or<sp/>`ImGui::GetForegroundDrawList()`<sp/>to<sp/>access<sp/>draw<sp/>lists<sp/>which<sp/>will<sp/>be<sp/>displayed<sp/>behind<sp/>and<sp/>over<sp/>every<sp/>other<sp/>dear<sp/>imgui<sp/>windows<sp/>(one<sp/>bg/fg<sp/>drawlist<sp/>per<sp/>viewport).<sp/>This<sp/>is<sp/>very<sp/>convenient<sp/>if<sp/>you<sp/>need<sp/>to<sp/>quickly<sp/>display<sp/>something<sp/>on<sp/>the<sp/>screen<sp/>that<sp/>is<sp/>not<sp/>associated<sp/>to<sp/>a<sp/>dear<sp/>imgui<sp/>window.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>You<sp/>can<sp/>also<sp/>create<sp/>your<sp/>own<sp/>empty<sp/>window<sp/>and<sp/>draw<sp/>inside<sp/>it.<sp/>Call<sp/>Begin()<sp/>with<sp/>the<sp/>NoBackground<sp/>|<sp/>NoDecoration<sp/>|<sp/>NoSavedSettings<sp/>|<sp/>NoInputs<sp/>flags<sp/>(The<sp/>`ImGuiWindowFlags_NoDecoration`<sp/>flag<sp/>itself<sp/>is<sp/>a<sp/>shortcut<sp/>for<sp/>NoTitleBar<sp/>|<sp/>NoResize<sp/>|<sp/>NoScrollbar<sp/>|<sp/>NoCollapse).<sp/>Then<sp/>you<sp/>can<sp/>retrieve<sp/>the<sp/>ImDrawList*<sp/>via<sp/>`GetWindowDrawList()`<sp/>and<sp/>draw<sp/>to<sp/>it<sp/>in<sp/>any<sp/>way<sp/>you<sp/>like.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>You<sp/>can<sp/>create<sp/>your<sp/>own<sp/>ImDrawList<sp/>instance.<sp/>You&apos;ll<sp/>need<sp/>to<sp/>initialize<sp/>them<sp/>with<sp/>`ImGui::GetDrawListSharedData()`,<sp/>or<sp/>create<sp/>your<sp/>own<sp/>instancing<sp/>`ImDrawListSharedData`,<sp/>and<sp/>then<sp/>call<sp/>your<sp/>renderer<sp/>function<sp/>with<sp/>your<sp/>own<sp/>ImDrawList<sp/>or<sp/>ImDrawData<sp/>data.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Looking<sp/>for<sp/>fun?<sp/>The<sp/>[ImDrawList<sp/>coding<sp/>party<sp/>2020](https://github.com/ocornut/imgui/issues/3606)<sp/>thread<sp/>is<sp/>full<sp/>of<sp/>&quot;don&apos;t<sp/>do<sp/>this<sp/>at<sp/>home&quot;<sp/>extreme<sp/>uses<sp/>of<sp/>the<sp/>ImDrawList<sp/>API.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#####<sp/>[Return<sp/>to<sp/>Index](#index)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Q&amp;A:<sp/>Fonts,<sp/>Text</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Q:<sp/>How<sp/>should<sp/>I<sp/>handle<sp/>DPI<sp/>in<sp/>my<sp/>application?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>short<sp/>answer<sp/>is:<sp/>obtain<sp/>the<sp/>desired<sp/>DPI<sp/>scale,<sp/>load<sp/>your<sp/>fonts<sp/>resized<sp/>with<sp/>that<sp/>scale<sp/>(always<sp/>round<sp/>down<sp/>fonts<sp/>size<sp/>to<sp/>nearest<sp/>integer),<sp/>and<sp/>scale<sp/>your<sp/>Style<sp/>structure<sp/>accordingly<sp/>using<sp/>`style.ScaleAllSizes()`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Your<sp/>application<sp/>may<sp/>want<sp/>to<sp/>detect<sp/>DPI<sp/>change<sp/>and<sp/>reload<sp/>the<sp/>fonts<sp/>and<sp/>reset<sp/>style<sp/>between<sp/>frames.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Your<sp/>ui<sp/>code<sp/><sp/>should<sp/>avoid<sp/>using<sp/>hardcoded<sp/>constants<sp/>for<sp/>size<sp/>and<sp/>positioning.<sp/>Prefer<sp/>to<sp/>express<sp/>values<sp/>as<sp/>multiple<sp/>of<sp/>reference<sp/>values<sp/>such<sp/>as<sp/>`ImGui::GetFontSize()`<sp/>or<sp/>`ImGui::GetFrameHeight()`.<sp/>So<sp/>e.g.<sp/>instead<sp/>of<sp/>seeing<sp/>a<sp/>hardcoded<sp/>height<sp/>of<sp/>500<sp/>for<sp/>a<sp/>given<sp/>item/window,<sp/>you<sp/>may<sp/>want<sp/>to<sp/>use<sp/>`30*ImGui::GetFontSize()`<sp/>instead.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Down<sp/>the<sp/>line<sp/>Dear<sp/>ImGui<sp/>will<sp/>provide<sp/>a<sp/>variety<sp/>of<sp/>standardized<sp/>reference<sp/>values<sp/>to<sp/>facilitate<sp/>using<sp/>this.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Applications<sp/>in<sp/>the<sp/>`examples/`<sp/>folder<sp/>are<sp/>not<sp/>DPI<sp/>aware<sp/>partly<sp/>because<sp/>they<sp/>are<sp/>unable<sp/>to<sp/>load<sp/>a<sp/>custom<sp/>font<sp/>from<sp/>the<sp/>file-system<sp/>(may<sp/>change<sp/>that<sp/>in<sp/>the<sp/>future).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>reason<sp/>DPI<sp/>is<sp/>not<sp/>auto-magically<sp/>solved<sp/>in<sp/>stock<sp/>examples<sp/>is<sp/>that<sp/>we<sp/>don&apos;t<sp/>yet<sp/>have<sp/>a<sp/>satisfying<sp/>solution<sp/>for<sp/>the<sp/>&quot;multi-dpi&quot;<sp/><sp/>problem<sp/>(using<sp/>the<sp/>`docking`<sp/>branch:<sp/>when<sp/>multiple<sp/>viewport<sp/>windows<sp/>are<sp/>over<sp/>multiple<sp/>monitors<sp/>using<sp/>different<sp/>DPI<sp/>scale).<sp/>The<sp/>current<sp/>way<sp/>to<sp/>handle<sp/>this<sp/>on<sp/>the<sp/>application<sp/>side<sp/>is:</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Create<sp/>and<sp/>maintain<sp/>one<sp/>font<sp/>atlas<sp/>per<sp/>active<sp/>DPI<sp/>scale<sp/>(e.g.<sp/>by<sp/>iterating<sp/>`platform_io.Monitors[]`<sp/>before<sp/>`NewFrame()`).</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Hook<sp/>`platform_io.OnChangedViewport()`<sp/>to<sp/>detect<sp/>when<sp/>a<sp/>`Begin()`<sp/>call<sp/>makes<sp/>a<sp/>Dear<sp/>ImGui<sp/>window<sp/>change<sp/>monitor<sp/>(and<sp/>therefore<sp/>DPI).</highlight></codeline>
<codeline><highlight class="normal">-<sp/>In<sp/>the<sp/>hook:<sp/>swap<sp/>atlas,<sp/>swap<sp/>style<sp/>with<sp/>correctly<sp/>sized<sp/>one,<sp/>remap<sp/>the<sp/>current<sp/>font<sp/>from<sp/>one<sp/>atlas<sp/>to<sp/>the<sp/>other<sp/>(may<sp/>need<sp/>to<sp/>maintain<sp/>a<sp/>remapping<sp/>table<sp/>of<sp/>your<sp/>fonts<sp/>at<sp/>variying<sp/>DPI<sp/>scale).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>approach<sp/>is<sp/>relatively<sp/>easy<sp/>and<sp/>functional<sp/>but<sp/>come<sp/>with<sp/>two<sp/>issues:</highlight></codeline>
<codeline><highlight class="normal">-<sp/>It&apos;s<sp/>not<sp/>possibly<sp/>to<sp/>reliably<sp/>size<sp/>or<sp/>position<sp/>a<sp/>window<sp/>ahead<sp/>of<sp/>`Begin()`<sp/>without<sp/>knowing<sp/>on<sp/>which<sp/>monitor<sp/>it&apos;ll<sp/>land.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Style<sp/>override<sp/>may<sp/>be<sp/>lost<sp/>during<sp/>the<sp/>`Begin()`<sp/>call<sp/>crossing<sp/>monitor<sp/>boundaries.<sp/>You<sp/>may<sp/>need<sp/>to<sp/>do<sp/>some<sp/>custom<sp/>scaling<sp/>mumbo-jumbo<sp/>if<sp/>you<sp/>want<sp/>your<sp/>`OnChangedViewport()`<sp/>handler<sp/>to<sp/>preserve<sp/>style<sp/>overrides.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Please<sp/>note<sp/>that<sp/>if<sp/>you<sp/>are<sp/>not<sp/>using<sp/>multi-viewports<sp/>with<sp/>multi-monitors<sp/>using<sp/>different<sp/>DPI<sp/>scale,<sp/>you<sp/>can<sp/>ignore<sp/>all<sp/>of<sp/>this<sp/>and<sp/>use<sp/>the<sp/>simpler<sp/>technique<sp/>recommended<sp/>at<sp/>the<sp/>top.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Q:<sp/>How<sp/>can<sp/>I<sp/>load<sp/>a<sp/>different<sp/>font<sp/>than<sp/>the<sp/>default?</highlight></codeline>
<codeline><highlight class="normal">Use<sp/>the<sp/>font<sp/>atlas<sp/>to<sp/>load<sp/>the<sp/>TTF/OTF<sp/>file<sp/>you<sp/>want:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">ImGuiIO&amp;<sp/>io<sp/>=<sp/>ImGui::GetIO();</highlight></codeline>
<codeline><highlight class="normal">io.Fonts-&gt;AddFontFromFileTTF(&quot;myfontfile.ttf&quot;,<sp/>size_in_pixels);</highlight></codeline>
<codeline><highlight class="normal">io.Fonts-&gt;GetTexDataAsRGBA32()<sp/>or<sp/>GetTexDataAsAlpha8()</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Default<sp/>is<sp/>ProggyClean.ttf,<sp/>monospace,<sp/>rendered<sp/>at<sp/>size<sp/>13,<sp/>embedded<sp/>in<sp/>dear<sp/>imgui&apos;s<sp/>source<sp/>code.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">(Tip:<sp/>monospace<sp/>fonts<sp/>are<sp/>convenient<sp/>because<sp/>they<sp/>allow<sp/>to<sp/>facilitate<sp/>horizontal<sp/>alignment<sp/>directly<sp/>at<sp/>the<sp/>string<sp/>level.)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">(Read<sp/>the<sp/>[docs/FONTS.md](https://github.com/ocornut/imgui/blob/master/docs/FONTS.md)<sp/>file<sp/>for<sp/>more<sp/>details<sp/>about<sp/>font<sp/>loading.)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">New<sp/>programmers:<sp/>remember<sp/>that<sp/>in<sp/>C/C++<sp/>and<sp/>most<sp/>programming<sp/>languages<sp/>if<sp/>you<sp/>want<sp/>to<sp/>use<sp/>a</highlight></codeline>
<codeline><highlight class="normal">backslash<sp/>\<sp/>within<sp/>a<sp/>string<sp/>literal,<sp/>you<sp/>need<sp/>to<sp/>write<sp/>it<sp/>double<sp/>backslash<sp/>&quot;\\&quot;:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">io.Fonts-&gt;AddFontFromFileTTF(&quot;MyFolder\MyFont.ttf&quot;,<sp/>size);<sp/><sp/>//<sp/>WRONG<sp/>(you<sp/>are<sp/>escaping<sp/>the<sp/>M<sp/>here!)</highlight></codeline>
<codeline><highlight class="normal">io.Fonts-&gt;AddFontFromFileTTF(&quot;MyFolder\\MyFont.ttf&quot;,<sp/>size;<sp/><sp/>//<sp/>CORRECT<sp/>(Windows<sp/>only)</highlight></codeline>
<codeline><highlight class="normal">io.Fonts-&gt;AddFontFromFileTTF(&quot;MyFolder/MyFont.ttf&quot;,<sp/>size);<sp/><sp/>//<sp/>ALSO<sp/>CORRECT</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#####<sp/>[Return<sp/>to<sp/>Index](#index)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Q:<sp/>How<sp/>can<sp/>I<sp/>easily<sp/>use<sp/>icons<sp/>in<sp/>my<sp/>application?</highlight></codeline>
<codeline><highlight class="normal">The<sp/>most<sp/>convenient<sp/>and<sp/>practical<sp/>way<sp/>is<sp/>to<sp/>merge<sp/>an<sp/>icon<sp/>font<sp/>such<sp/>as<sp/>FontAwesome<sp/>inside<sp/>you</highlight></codeline>
<codeline><highlight class="normal">main<sp/>font.<sp/>Then<sp/>you<sp/>can<sp/>refer<sp/>to<sp/>icons<sp/>within<sp/>your<sp/>strings.</highlight></codeline>
<codeline><highlight class="normal">You<sp/>may<sp/>want<sp/>to<sp/>see<sp/>`ImFontConfig::GlyphMinAdvanceX`<sp/>to<sp/>make<sp/>your<sp/>icon<sp/>look<sp/>monospace<sp/>to<sp/>facilitate<sp/>alignment.</highlight></codeline>
<codeline><highlight class="normal">(Read<sp/>the<sp/>[docs/FONTS.md](https://github.com/ocornut/imgui/blob/master/docs/FONTS.md)<sp/>file<sp/>for<sp/>more<sp/>details<sp/>about<sp/>icons<sp/>font<sp/>loading.)</highlight></codeline>
<codeline><highlight class="normal">With<sp/>some<sp/>extra<sp/>effort,<sp/>you<sp/>may<sp/>use<sp/>colorful<sp/>icon<sp/>by<sp/>registering<sp/>custom<sp/>rectangle<sp/>space<sp/>inside<sp/>the<sp/>font<sp/>atlas,</highlight></codeline>
<codeline><highlight class="normal">and<sp/>copying<sp/>your<sp/>own<sp/>graphics<sp/>data<sp/>into<sp/>it.<sp/>See<sp/>docs/FONTS.md<sp/>about<sp/>using<sp/>the<sp/>AddCustomRectFontGlyph<sp/>API.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#####<sp/>[Return<sp/>to<sp/>Index](#index)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Q:<sp/>How<sp/>can<sp/>I<sp/>load<sp/>multiple<sp/>fonts?</highlight></codeline>
<codeline><highlight class="normal">Use<sp/>the<sp/>font<sp/>atlas<sp/>to<sp/>pack<sp/>them<sp/>into<sp/>a<sp/>single<sp/>texture:</highlight></codeline>
<codeline><highlight class="normal">(Read<sp/>the<sp/>[docs/FONTS.md](https://github.com/ocornut/imgui/blob/master/docs/FONTS.md)<sp/>file<sp/>and<sp/>the<sp/>code<sp/>in<sp/>ImFontAtlas<sp/>for<sp/>more<sp/>details.)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">ImGuiIO&amp;<sp/>io<sp/>=<sp/>ImGui::GetIO();</highlight></codeline>
<codeline><highlight class="normal">ImFont*<sp/>font0<sp/>=<sp/>io.Fonts-&gt;AddFontDefault();</highlight></codeline>
<codeline><highlight class="normal">ImFont*<sp/>font1<sp/>=<sp/>io.Fonts-&gt;AddFontFromFileTTF(&quot;myfontfile.ttf&quot;,<sp/>size_in_pixels);</highlight></codeline>
<codeline><highlight class="normal">ImFont*<sp/>font2<sp/>=<sp/>io.Fonts-&gt;AddFontFromFileTTF(&quot;myfontfile2.ttf&quot;,<sp/>size_in_pixels);</highlight></codeline>
<codeline><highlight class="normal">io.Fonts-&gt;GetTexDataAsRGBA32()<sp/>or<sp/>GetTexDataAsAlpha8()</highlight></codeline>
<codeline><highlight class="normal">//<sp/>the<sp/>first<sp/>loaded<sp/>font<sp/>gets<sp/>used<sp/>by<sp/>default</highlight></codeline>
<codeline><highlight class="normal">//<sp/>use<sp/>ImGui::PushFont()/ImGui::PopFont()<sp/>to<sp/>change<sp/>the<sp/>font<sp/>at<sp/>runtime</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Options</highlight></codeline>
<codeline><highlight class="normal">ImFontConfig<sp/>config;</highlight></codeline>
<codeline><highlight class="normal">config.OversampleH<sp/>=<sp/>2;</highlight></codeline>
<codeline><highlight class="normal">config.OversampleV<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">config.GlyphOffset.y<sp/>-=<sp/>1.0f;<sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Move<sp/>everything<sp/>by<sp/>1<sp/>pixels<sp/>up</highlight></codeline>
<codeline><highlight class="normal">config.GlyphExtraSpacing.x<sp/>=<sp/>1.0f;<sp/>//<sp/>Increase<sp/>spacing<sp/>between<sp/>characters</highlight></codeline>
<codeline><highlight class="normal">io.Fonts-&gt;AddFontFromFileTTF(&quot;myfontfile.ttf&quot;,<sp/>size_pixels,<sp/>&amp;config);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Combine<sp/>multiple<sp/>fonts<sp/>into<sp/>one<sp/>(e.g.<sp/>for<sp/>icon<sp/>fonts)</highlight></codeline>
<codeline><highlight class="normal">static<sp/>ImWchar<sp/>ranges[]<sp/>=<sp/>{<sp/>0xf000,<sp/>0xf3ff,<sp/>0<sp/>};</highlight></codeline>
<codeline><highlight class="normal">ImFontConfig<sp/>config;</highlight></codeline>
<codeline><highlight class="normal">config.MergeMode<sp/>=<sp/>true;</highlight></codeline>
<codeline><highlight class="normal">io.Fonts-&gt;AddFontDefault();</highlight></codeline>
<codeline><highlight class="normal">io.Fonts-&gt;AddFontFromFileTTF(&quot;fontawesome-webfont.ttf&quot;,<sp/>16.0f,<sp/>&amp;config,<sp/>ranges);<sp/>//<sp/>Merge<sp/>icon<sp/>font</highlight></codeline>
<codeline><highlight class="normal">io.Fonts-&gt;AddFontFromFileTTF(&quot;myfontfile.ttf&quot;,<sp/>size_pixels,<sp/>NULL,<sp/>&amp;config,<sp/>io.Fonts-&gt;GetGlyphRangesJapanese());<sp/>//<sp/>Merge<sp/>japanese<sp/>glyphs</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#####<sp/>[Return<sp/>to<sp/>Index](#index)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Q:<sp/>How<sp/>can<sp/>I<sp/>display<sp/>and<sp/>input<sp/>non-Latin<sp/>characters<sp/>such<sp/>as<sp/>Chinese,<sp/>Japanese,<sp/>Korean,<sp/>Cyrillic?</highlight></codeline>
<codeline><highlight class="normal">When<sp/>loading<sp/>a<sp/>font,<sp/>pass<sp/>custom<sp/>Unicode<sp/>ranges<sp/>to<sp/>specify<sp/>the<sp/>glyphs<sp/>to<sp/>load.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Add<sp/>default<sp/>Japanese<sp/>ranges</highlight></codeline>
<codeline><highlight class="normal">io.Fonts-&gt;AddFontFromFileTTF(&quot;myfontfile.ttf&quot;,<sp/>size_in_pixels,<sp/>NULL,<sp/>io.Fonts-&gt;GetGlyphRangesJapanese());</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Or<sp/>create<sp/>your<sp/>own<sp/>custom<sp/>ranges<sp/>(e.g.<sp/>for<sp/>a<sp/>game<sp/>you<sp/>can<sp/>feed<sp/>your<sp/>entire<sp/>game<sp/>script<sp/>and<sp/>only<sp/>build<sp/>the<sp/>characters<sp/>the<sp/>game<sp/>need)</highlight></codeline>
<codeline><highlight class="normal">ImVector&lt;ImWchar&gt;<sp/>ranges;</highlight></codeline>
<codeline><highlight class="normal">ImFontGlyphRangesBuilder<sp/>builder;</highlight></codeline>
<codeline><highlight class="normal">builder.AddText(&quot;Hello<sp/>world&quot;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Add<sp/>a<sp/>string<sp/>(here<sp/>&quot;Hello<sp/>world&quot;<sp/>contains<sp/>7<sp/>unique<sp/>characters)</highlight></codeline>
<codeline><highlight class="normal">builder.AddChar(0x7262);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Add<sp/>a<sp/>specific<sp/>character</highlight></codeline>
<codeline><highlight class="normal">builder.AddRanges(io.Fonts-&gt;GetGlyphRangesJapanese());<sp/>//<sp/>Add<sp/>one<sp/>of<sp/>the<sp/>default<sp/>ranges</highlight></codeline>
<codeline><highlight class="normal">builder.BuildRanges(&amp;ranges);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Build<sp/>the<sp/>final<sp/>result<sp/>(ordered<sp/>ranges<sp/>with<sp/>all<sp/>the<sp/>unique<sp/>characters<sp/>submitted)</highlight></codeline>
<codeline><highlight class="normal">io.Fonts-&gt;AddFontFromFileTTF(&quot;myfontfile.ttf&quot;,<sp/>16.0f,<sp/>NULL,<sp/>ranges.Data);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">All<sp/>your<sp/>strings<sp/>needs<sp/>to<sp/>use<sp/>UTF-8<sp/>encoding.<sp/>In<sp/>C++11<sp/>you<sp/>can<sp/>encode<sp/>a<sp/>string<sp/>literal<sp/>in<sp/>UTF-8</highlight></codeline>
<codeline><highlight class="normal">by<sp/>using<sp/>the<sp/>u8&quot;hello&quot;<sp/>syntax.<sp/>Specifying<sp/>literal<sp/>in<sp/>your<sp/>source<sp/>code<sp/>using<sp/>a<sp/>local<sp/>code<sp/>page</highlight></codeline>
<codeline><highlight class="normal">(such<sp/>as<sp/>CP-923<sp/>for<sp/>Japanese<sp/>or<sp/>CP-1251<sp/>for<sp/>Cyrillic)<sp/>will<sp/>NOT<sp/>work!</highlight></codeline>
<codeline><highlight class="normal">Otherwise<sp/>you<sp/>can<sp/>convert<sp/>yourself<sp/>to<sp/>UTF-8<sp/>or<sp/>load<sp/>text<sp/>data<sp/>from<sp/>file<sp/>already<sp/>saved<sp/>as<sp/>UTF-8.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Text<sp/>input:<sp/>it<sp/>is<sp/>up<sp/>to<sp/>your<sp/>application<sp/>to<sp/>pass<sp/>the<sp/>right<sp/>character<sp/>code<sp/>by<sp/>calling<sp/>`io.AddInputCharacter()`.</highlight></codeline>
<codeline><highlight class="normal">The<sp/>applications<sp/>in<sp/>examples/<sp/>are<sp/>doing<sp/>that.</highlight></codeline>
<codeline><highlight class="normal">Windows:<sp/>you<sp/>can<sp/>use<sp/>the<sp/>WM_CHAR<sp/>or<sp/>WM_UNICHAR<sp/>or<sp/>WM_IME_CHAR<sp/>message<sp/>(depending<sp/>if<sp/>your<sp/>app<sp/>is<sp/>built<sp/>using<sp/>Unicode<sp/>or<sp/>MultiByte<sp/>mode).</highlight></codeline>
<codeline><highlight class="normal">You<sp/>may<sp/>also<sp/>use<sp/>MultiByteToWideChar()<sp/>or<sp/>ToUnicode()<sp/>to<sp/>retrieve<sp/>Unicode<sp/>codepoints<sp/>from<sp/>MultiByte<sp/>characters<sp/>or<sp/>keyboard<sp/>state.</highlight></codeline>
<codeline><highlight class="normal">Windows:<sp/>if<sp/>your<sp/>language<sp/>is<sp/>relying<sp/>on<sp/>an<sp/>Input<sp/>Method<sp/>Editor<sp/>(IME),<sp/>you<sp/>can<sp/>write<sp/>your<sp/>HWND<sp/>to<sp/>ImGui::GetMainViewport()-&gt;PlatformHandleRaw</highlight></codeline>
<codeline><highlight class="normal">in<sp/>order<sp/>for<sp/>the<sp/>default<sp/>the<sp/>default<sp/>implementation<sp/>of<sp/>io.SetPlatformImeDataFn()<sp/>to<sp/>set<sp/>your<sp/>Microsoft<sp/>IME<sp/>position<sp/>correctly.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#####<sp/>[Return<sp/>to<sp/>Index](#index)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Q&amp;A:<sp/>Concerns</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Q:<sp/>Who<sp/>uses<sp/>Dear<sp/>ImGui?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>may<sp/>take<sp/>a<sp/>look<sp/>at:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>[Quotes](https://github.com/ocornut/imgui/wiki/Quotes)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[Software<sp/>using<sp/>Dear<sp/>ImGui](https://github.com/ocornut/imgui/wiki/Software-using-dear-imgui)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[Sponsors](https://github.com/ocornut/imgui/wiki/Sponsors)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[Gallery](https://github.com/ocornut/imgui/issues/4451)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#####<sp/>[Return<sp/>to<sp/>Index](#index)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Q:<sp/>Can<sp/>you<sp/>create<sp/>elaborate/serious<sp/>tools<sp/>with<sp/>Dear<sp/>ImGui?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Yes.<sp/>People<sp/>have<sp/>written<sp/>game<sp/>editors,<sp/>data<sp/>browsers,<sp/>debuggers,<sp/>profilers<sp/>and<sp/>all<sp/>sort<sp/>of<sp/>non-trivial<sp/>tools<sp/>with<sp/>the<sp/>library.<sp/>In<sp/>my<sp/>experience<sp/>the<sp/>simplicity<sp/>of<sp/>the<sp/>API<sp/>is<sp/>very<sp/>empowering.<sp/>Your<sp/>UI<sp/>runs<sp/>close<sp/>to<sp/>your<sp/>live<sp/>data.<sp/>Make<sp/>the<sp/>tools<sp/>always-on<sp/>and<sp/>everybody<sp/>in<sp/>the<sp/>team<sp/>will<sp/>be<sp/>inclined<sp/>to<sp/>create<sp/>new<sp/>tools<sp/>(as<sp/>opposed<sp/>to<sp/>more<sp/>&quot;offline&quot;<sp/>UI<sp/>toolkits<sp/>where<sp/>only<sp/>a<sp/>fraction<sp/>of<sp/>your<sp/>team<sp/>effectively<sp/>creates<sp/>tools).<sp/>The<sp/>list<sp/>of<sp/>sponsors<sp/>below<sp/>is<sp/>also<sp/>an<sp/>indicator<sp/>that<sp/>serious<sp/>game<sp/>teams<sp/>have<sp/>been<sp/>using<sp/>the<sp/>library.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Dear<sp/>ImGui<sp/>is<sp/>very<sp/>programmer<sp/>centric<sp/>and<sp/>the<sp/>immediate-mode<sp/>GUI<sp/>paradigm<sp/>might<sp/>require<sp/>you<sp/>to<sp/>readjust<sp/>some<sp/>habits<sp/>before<sp/>you<sp/>can<sp/>realize<sp/>its<sp/>full<sp/>potential.<sp/>Dear<sp/>ImGui<sp/>is<sp/>about<sp/>making<sp/>things<sp/>that<sp/>are<sp/>simple,<sp/>efficient<sp/>and<sp/>powerful.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Dear<sp/>ImGui<sp/>is<sp/>built<sp/>to<sp/>be<sp/>efficient<sp/>and<sp/>scalable<sp/>toward<sp/>the<sp/>needs<sp/>for<sp/>AAA-quality<sp/>applications<sp/>running<sp/>all<sp/>day.<sp/>The<sp/>IMGUI<sp/>paradigm<sp/>offers<sp/>different<sp/>opportunities<sp/>for<sp/>optimization<sp/>that<sp/>the<sp/>more<sp/>typical<sp/>RMGUI<sp/>paradigm.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#####<sp/>[Return<sp/>to<sp/>Index](#index)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Q:<sp/>Can<sp/>you<sp/>reskin<sp/>the<sp/>look<sp/>of<sp/>Dear<sp/>ImGui?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Somehow.<sp/>You<sp/>can<sp/>alter<sp/>the<sp/>look<sp/>of<sp/>the<sp/>interface<sp/>to<sp/>some<sp/>degree:<sp/>changing<sp/>colors,<sp/>sizes,<sp/>padding,<sp/>rounding,<sp/>fonts.<sp/>However,<sp/>as<sp/>Dear<sp/>ImGui<sp/>is<sp/>designed<sp/>and<sp/>optimized<sp/>to<sp/>create<sp/>debug<sp/>tools,<sp/>the<sp/>amount<sp/>of<sp/>skinning<sp/>you<sp/>can<sp/>apply<sp/>is<sp/>limited.<sp/>There<sp/>is<sp/>only<sp/>so<sp/>much<sp/>you<sp/>can<sp/>stray<sp/>away<sp/>from<sp/>the<sp/>default<sp/>look<sp/>and<sp/>feel<sp/>of<sp/>the<sp/>interface.<sp/>Dear<sp/>ImGui<sp/>is<sp/>NOT<sp/>designed<sp/>to<sp/>create<sp/>user<sp/>interface<sp/>for<sp/>games,<sp/>although<sp/>with<sp/>ingenious<sp/>use<sp/>of<sp/>the<sp/>low-level<sp/>API<sp/>you<sp/>can<sp/>do<sp/>it.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">A<sp/>reasonably<sp/>skinned<sp/>application<sp/>may<sp/>look<sp/>like<sp/>(screenshot<sp/>from<sp/>[#2529](https://github.com/ocornut/imgui/issues/2529#issuecomment-524281119))</highlight></codeline>
<codeline><highlight class="normal">![minipars](https://user-images.githubusercontent.com/314805/63589441-d9794f00-c5b1-11e9-8d96-cfc1b93702f7.png)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#####<sp/>[Return<sp/>to<sp/>Index](#index)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Q:<sp/>Why<sp/>using<sp/>C++<sp/>(as<sp/>opposed<sp/>to<sp/>C)?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Dear<sp/>ImGui<sp/>takes<sp/>advantage<sp/>of<sp/>a<sp/>few<sp/>C++<sp/>languages<sp/>features<sp/>for<sp/>convenience<sp/>but<sp/>nothing<sp/>anywhere<sp/>Boost<sp/>insanity/quagmire.<sp/>Dear<sp/>ImGui<sp/>does<sp/>NOT<sp/>require<sp/>C++11<sp/>so<sp/>it<sp/>can<sp/>be<sp/>used<sp/>with<sp/>most<sp/>old<sp/>C++<sp/>compilers.<sp/>Dear<sp/>ImGui<sp/>doesn&apos;t<sp/>use<sp/>any<sp/>C++<sp/>header<sp/>file.<sp/>Language-wise,<sp/>function<sp/>overloading<sp/>and<sp/>default<sp/>parameters<sp/>are<sp/>used<sp/>to<sp/>make<sp/>the<sp/>API<sp/>easier<sp/>to<sp/>use<sp/>and<sp/>code<sp/>more<sp/>terse.<sp/>Doing<sp/>so<sp/>I<sp/>believe<sp/>the<sp/>API<sp/>is<sp/>sitting<sp/>on<sp/>a<sp/>sweet<sp/>spot<sp/>and<sp/>giving<sp/>up<sp/>on<sp/>those<sp/>features<sp/>would<sp/>make<sp/>the<sp/>API<sp/>more<sp/>cumbersome.<sp/>Other<sp/>features<sp/>such<sp/>as<sp/>namespace,<sp/>constructors<sp/>and<sp/>templates<sp/>(in<sp/>the<sp/>case<sp/>of<sp/>the<sp/>ImVector&lt;&gt;<sp/>class)<sp/>are<sp/>also<sp/>relied<sp/>on<sp/>as<sp/>a<sp/>convenience.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">There<sp/>is<sp/>an<sp/>auto-generated<sp/>[c-api<sp/>for<sp/>Dear<sp/>ImGui<sp/>(cimgui)](https://github.com/cimgui/cimgui)<sp/>by<sp/>Sonoro1234<sp/>and<sp/>Stephan<sp/>Dilly.<sp/>It<sp/>is<sp/>designed<sp/>for<sp/>creating<sp/>bindings<sp/>to<sp/>other<sp/>languages.<sp/>If<sp/>possible,<sp/>I<sp/>would<sp/>suggest<sp/>using<sp/>your<sp/>target<sp/>language<sp/>functionalities<sp/>to<sp/>try<sp/>replicating<sp/>the<sp/>function<sp/>overloading<sp/>and<sp/>default<sp/>parameters<sp/>used<sp/>in<sp/>C++<sp/>else<sp/>the<sp/>API<sp/>may<sp/>be<sp/>harder<sp/>to<sp/>use.<sp/>Also<sp/>see<sp/>[Bindings](https://github.com/ocornut/imgui/wiki/Bindings)<sp/>for<sp/>various<sp/>third-party<sp/>bindings.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#####<sp/>[Return<sp/>to<sp/>Index](#index)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">---</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Q&amp;A:<sp/>Community</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Q:<sp/>How<sp/>can<sp/>I<sp/>help?</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Businesses:<sp/>please<sp/>reach<sp/>out<sp/>to<sp/>`contact<sp/>AT<sp/>dearimgui.com`<sp/>if<sp/>you<sp/>work<sp/>in<sp/>a<sp/>place<sp/>using<sp/>Dear<sp/>ImGui!<sp/>We<sp/>can<sp/>discuss<sp/>ways<sp/>for<sp/>your<sp/>company<sp/>to<sp/>fund<sp/>development<sp/>via<sp/>invoiced<sp/>technical<sp/>support,<sp/>maintenance<sp/>or<sp/>sponsoring<sp/>contacts.<sp/>This<sp/>is<sp/>among<sp/>the<sp/>most<sp/>useful<sp/>thing<sp/>you<sp/>can<sp/>do<sp/>for<sp/>Dear<sp/>ImGui.<sp/>With<sp/>increased<sp/>funding,<sp/>we<sp/>can<sp/>hire<sp/>more<sp/>people<sp/>working<sp/>on<sp/>this<sp/>project.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Individuals:<sp/>you<sp/>can<sp/>support<sp/>continued<sp/>maintenance<sp/>and<sp/>development<sp/>via<sp/>PayPal<sp/>donations.<sp/>See<sp/>[README](https://github.com/ocornut/imgui/blob/master/docs/README.md).</highlight></codeline>
<codeline><highlight class="normal">-<sp/>If<sp/>you<sp/>are<sp/>experienced<sp/>with<sp/>Dear<sp/>ImGui<sp/>and<sp/>C++,<sp/>look<sp/>at<sp/>[GitHub<sp/>Issues](https://github.com/ocornut/imgui/issues),<sp/>[GitHub<sp/>Discussions](https://github.com/ocornut/imgui/discussions),<sp/>the<sp/>[Wiki](https://github.com/ocornut/imgui/wiki),<sp/>read<sp/>[docs/TODO.txt](https://github.com/ocornut/imgui/blob/master/docs/TODO.txt)<sp/>and<sp/>see<sp/>how<sp/>you<sp/>want<sp/>to<sp/>help<sp/>and<sp/>can<sp/>help!</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Disclose<sp/>your<sp/>usage<sp/>of<sp/>Dear<sp/>ImGui<sp/>via<sp/>a<sp/>dev<sp/>blog<sp/>post,<sp/>a<sp/>tweet,<sp/>a<sp/>screenshot,<sp/>a<sp/>mention<sp/>somewhere<sp/>etc.</highlight></codeline>
<codeline><highlight class="normal">You<sp/>may<sp/>post<sp/>screenshot<sp/>or<sp/>links<sp/>in<sp/>the<sp/>[gallery<sp/>threads](https://github.com/ocornut/imgui/issues/4451).<sp/>Visuals<sp/>are<sp/>ideal<sp/>as<sp/>they<sp/>inspire<sp/>other<sp/>programmers.<sp/>Disclosing<sp/>your<sp/>use<sp/>of<sp/>Dear<sp/>ImGui<sp/>helps<sp/>the<sp/>library<sp/>grow<sp/>credibility,<sp/>and<sp/>help<sp/>other<sp/>teams<sp/>and<sp/>programmers<sp/>with<sp/>taking<sp/>decisions.</highlight></codeline>
<codeline><highlight class="normal">-<sp/>If<sp/>you<sp/>have<sp/>issues<sp/>or<sp/>if<sp/>you<sp/>need<sp/>to<sp/>hack<sp/>into<sp/>the<sp/>library,<sp/>even<sp/>if<sp/>you<sp/>don&apos;t<sp/>expect<sp/>any<sp/>support<sp/>it<sp/>is<sp/>useful<sp/>that<sp/>you<sp/>share<sp/>your<sp/>issues<sp/>or<sp/>sometimes<sp/>incomplete<sp/>PR.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#####<sp/>[Return<sp/>to<sp/>Index](#index)</highlight></codeline>
<codeline></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/imgui/docs/FAQ.md"/>
  </compounddef>
</doxygen>
