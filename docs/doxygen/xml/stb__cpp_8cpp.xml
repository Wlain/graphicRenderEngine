<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="stb__cpp_8cpp" kind="file" language="C++">
    <compoundname>stb_cpp.cpp</compoundname>
    <includes local="no">conio.h</includes>
    <includes refid="stb_8h" local="yes">stb.h</includes>
    <incdepgraph>
      <node id="3">
        <label>stb.h</label>
        <link refid="stb_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/stb_cpp.cpp</label>
        <link refid="stb__cpp_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>conio.h</label>
      </node>
      <node id="4">
        <label>stdarg.h</label>
      </node>
      <node id="6">
        <label>stdio.h</label>
      </node>
      <node id="5">
        <label>stdlib.h</label>
      </node>
      <node id="7">
        <label>string.h</label>
      </node>
      <node id="8">
        <label>time.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="stb__cpp_8cpp_1ae4242ca3cfe4bca010a56e1cbb6b9f27" prot="public" static="no">
        <name>WIN32_MEAN_AND_LEAN</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/stb_cpp.cpp" line="1" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/stb_cpp.cpp" bodystart="1" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__cpp_8cpp_1ac7bef5d85e3dcd73eef56ad39ffc84a9" prot="public" static="no">
        <name>WIN32_LEAN_AND_MEAN</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/stb_cpp.cpp" line="2" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/stb_cpp.cpp" bodystart="2" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__cpp_8cpp_1a5640e9acc84db268e2628d4c5dad308c" prot="public" static="no">
        <name>STB_DEFINE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/stb_cpp.cpp" line="5" column="10" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/stb_cpp.cpp" bodystart="5" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__cpp_8cpp_1a27a83e7391798e636aaa87ae2f375fa5" prot="public" static="no">
        <name>STB_NPTR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/stb_cpp.cpp" line="7" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/stb_cpp.cpp" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__cpp_8cpp_1a8ac140009b858c701d41cb216a88b978" prot="public" static="no">
        <name>STB_ONLY</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/stb_cpp.cpp" line="9" column="10" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/stb_cpp.cpp" bodystart="9" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="stb__cpp_8cpp_1ad43c3812e6d13e0518d9f8b8f463ffcf" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int count</definition>
        <argsstring></argsstring>
        <name>count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/stb_cpp.cpp" line="13" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/stb_cpp.cpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="stb__cpp_8cpp_1a90f7818e7dce5057abd44333892f6b26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void c</definition>
        <argsstring>(int truth, const char *error)</argsstring>
        <name>c</name>
        <param>
          <type>int</type>
          <declname>truth</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/stb_cpp.cpp" line="14" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/stb_cpp.cpp" bodystart="14" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="stb__cpp_8cpp_1a3e3e3e771ba4990b66028daf2fb6dbd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * expects</definition>
        <argsstring>(stb_matcher *m, char *s, int result, int len, const char *str)</argsstring>
        <name>expects</name>
        <param>
          <type>stb_matcher *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>result</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/stb_cpp.cpp" line="22" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/stb_cpp.cpp" bodystart="22" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="stb__cpp_8cpp_1a2b359e8a6d55502a515bcdda622c6a8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_lex</definition>
        <argsstring>(void)</argsstring>
        <name>test_lex</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/stb_cpp.cpp" line="30" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/stb_cpp.cpp" bodystart="30" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="stb__cpp_8cpp_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/stb_cpp.cpp" line="53" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/stb_cpp.cpp" bodystart="53" bodyend="85"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#define<sp/>WIN32_MEAN_AND_LEAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WIN32_LEAN_AND_MEAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//#include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;conio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_M_AMD64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_NPTR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stb.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//#include<sp/>&quot;stb_file.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>c(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>truth,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*error)</highlight></codeline>
<codeline lineno="15"><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!truth)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Test<sp/>failed:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>error);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++count;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal">}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*expects(stb_matcher<sp/>*m,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res2,len2=0;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/>res2<sp/>=<sp/>stb_lex(m,<sp/>s,<sp/>&amp;len2);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/>c(<ref refid="structresult" kindref="compound">result</ref><sp/>==<sp/>res2<sp/>&amp;&amp;<sp/>len<sp/>==<sp/>len2,<sp/>str);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s<sp/>+<sp/>len;</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_lex(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/>stb_matcher<sp/>*m<sp/>=<sp/>stb_lex_matcher();</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tok_en5<sp/>.3<sp/>20.1<sp/>20.<sp/>.20<sp/>.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/></highlight><highlight class="stringliteral">&quot;tok_en5.3<sp/>20.1<sp/>20.<sp/>.20.1&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/>stb_lex_item(m,<sp/></highlight><highlight class="stringliteral">&quot;[a-zA-Z_][a-zA-Z0-9_]*&quot;</highlight><highlight class="normal">,<sp/>1<sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/>stb_lex_item(m,<sp/></highlight><highlight class="stringliteral">&quot;[0-9]*\\.?[0-9]*&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>2<sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/>stb_lex_item(m,<sp/></highlight><highlight class="stringliteral">&quot;[\r\n\t<sp/>]+&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>3<sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/>stb_lex_item(m,<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>-99<sp/>);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/>s=expects(m,s,1,7,<sp/></highlight><highlight class="stringliteral">&quot;stb_lex<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/>s=expects(m,s,2,2,<sp/></highlight><highlight class="stringliteral">&quot;stb_lex<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/>s=expects(m,s,3,1,<sp/></highlight><highlight class="stringliteral">&quot;stb_lex<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/>s=expects(m,s,2,4,<sp/></highlight><highlight class="stringliteral">&quot;stb_lex<sp/>4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/>s=expects(m,s,3,1,<sp/></highlight><highlight class="stringliteral">&quot;stb_lex<sp/>5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/>s=expects(m,s,2,3,<sp/></highlight><highlight class="stringliteral">&quot;stb_lex<sp/>6&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/>s=expects(m,s,3,1,<sp/></highlight><highlight class="stringliteral">&quot;stb_lex<sp/>7&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/>s=expects(m,s,2,3,<sp/></highlight><highlight class="stringliteral">&quot;stb_lex<sp/>8&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/>s=expects(m,s,2,2,<sp/></highlight><highlight class="stringliteral">&quot;stb_lex<sp/>9&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/>s=expects(m,s,0,0,<sp/></highlight><highlight class="stringliteral">&quot;stb_lex<sp/>10&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/>stb_matcher_free(m);</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/>p<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/></highlight><highlight class="stringliteral">&quot;abcdefghijklmnopqrstuvwxyz&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/>c(stb_ischar(</highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/>p),<sp/></highlight><highlight class="stringliteral">&quot;stb_ischar<sp/>1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/>c(stb_ischar(</highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">,<sp/>p),<sp/></highlight><highlight class="stringliteral">&quot;stb_ischar<sp/>2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/>c(!stb_ischar(</highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">,<sp/>p),<sp/></highlight><highlight class="stringliteral">&quot;stb_ischar<sp/>3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/>c(!stb_ischar(</highlight><highlight class="charliteral">&apos;X&apos;</highlight><highlight class="normal">,<sp/>p),<sp/></highlight><highlight class="stringliteral">&quot;stb_ischar<sp/>4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/>p<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/></highlight><highlight class="stringliteral">&quot;0123456789&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/>c(!stb_ischar(</highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/>p),<sp/></highlight><highlight class="stringliteral">&quot;stb_ischar<sp/>5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/>c(!stb_ischar(</highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">,<sp/>p),<sp/></highlight><highlight class="stringliteral">&quot;stb_ischar<sp/>6&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/>c(!stb_ischar(</highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">,<sp/>p),<sp/></highlight><highlight class="stringliteral">&quot;stb_ischar<sp/>7&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/>c(!stb_ischar(</highlight><highlight class="charliteral">&apos;X&apos;</highlight><highlight class="normal">,<sp/>p),<sp/></highlight><highlight class="stringliteral">&quot;stb_ischar<sp/>8&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/>p<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/></highlight><highlight class="stringliteral">&quot;#####&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/>c(!stb_ischar(</highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/>p),<sp/></highlight><highlight class="stringliteral">&quot;stb_ischar<sp/>a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/>c(!stb_ischar(</highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">,<sp/>p),<sp/></highlight><highlight class="stringliteral">&quot;stb_ischar<sp/>b&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/>c(stb_ischar(</highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">,<sp/>p),<sp/></highlight><highlight class="stringliteral">&quot;stb_ischar<sp/>c&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/>c(!stb_ischar(</highlight><highlight class="charliteral">&apos;X&apos;</highlight><highlight class="normal">,<sp/>p),<sp/></highlight><highlight class="stringliteral">&quot;stb_ischar<sp/>d&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/>p<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/></highlight><highlight class="stringliteral">&quot;xXyY&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/>c(!stb_ischar(</highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/>p),<sp/></highlight><highlight class="stringliteral">&quot;stb_ischar<sp/>e&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/>c(stb_ischar(</highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">,<sp/>p),<sp/></highlight><highlight class="stringliteral">&quot;stb_ischar<sp/>f&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/>c(!stb_ischar(</highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">,<sp/>p),<sp/></highlight><highlight class="stringliteral">&quot;stb_ischar<sp/>g&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/>c(stb_ischar(</highlight><highlight class="charliteral">&apos;X&apos;</highlight><highlight class="normal">,<sp/>p),<sp/></highlight><highlight class="stringliteral">&quot;stb_ischar<sp/>h&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/>test_lex();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_getch();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/stb_cpp.cpp"/>
  </compounddef>
</doxygen>
