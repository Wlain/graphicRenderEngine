<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="internals_guide" kind="page">
    <compoundname>internals_guide</compoundname>
    <title>Internal structure</title>
    <tableofcontents>
      <tocsect>
        <name>Public interface</name>
        <reference>internals_guide_1internals_public</reference>
    </tocsect>
      <tocsect>
        <name>Native interface</name>
        <reference>internals_guide_1internals_native</reference>
    </tocsect>
      <tocsect>
        <name>Internal interface</name>
        <reference>internals_guide_1internals_internal</reference>
    </tocsect>
      <tocsect>
        <name>Platform interface</name>
        <reference>internals_guide_1internals_platform</reference>
    </tocsect>
      <tocsect>
        <name>Event interface</name>
        <reference>internals_guide_1internals_event</reference>
    </tocsect>
      <tocsect>
        <name>Static functions</name>
        <reference>internals_guide_1internals_static</reference>
    </tocsect>
      <tocsect>
        <name>Configuration macros</name>
        <reference>internals_guide_1internals_config</reference>
    </tocsect>
    </tableofcontents>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>There are several interfaces inside GLFW. Each interface has its own area of responsibility and its own naming conventions.</para>
<sect1 id="internals_guide_1internals_public">
<title>Public interface</title>
<para>The most well-known is the public interface, described in the glfw3.h header file. This is implemented in source files shared by all platforms and these files contain no platform-specific code. This code usually ends up calling the platform and internal interfaces to do the actual work.</para>
<para>The public interface uses the OpenGL naming conventions except with GLFW and glfw instead of GL and gl. For struct members, where OpenGL sets no precedent, it use headless camel case.</para>
<para>Examples: <computeroutput>glfwCreateWindow</computeroutput>, <computeroutput>GLFWwindow</computeroutput>, <computeroutput>GLFW_RED_BITS</computeroutput></para>
</sect1>
<sect1 id="internals_guide_1internals_native">
<title>Native interface</title>
<para>The <ref refid="group__native" kindref="compound">native interface</ref> is a small set of publicly available but platform-specific functions, described in the glfw3native.h header file and used to gain access to the underlying window, context and (on some platforms) display handles used by the platform interface.</para>
<para>The function names of the native interface are similar to those of the public interface, but embeds the name of the interface that the returned handle is from.</para>
<para>Examples: <computeroutput>glfwGetX11Window</computeroutput>, <computeroutput>glfwGetWGLContext</computeroutput></para>
</sect1>
<sect1 id="internals_guide_1internals_internal">
<title>Internal interface</title>
<para>The internal interface consists of utility functions used by all other interfaces. It is shared code implemented in the same shared source files as the public and event interfaces. The internal interface is described in the <ref refid="internal_8h_source" kindref="compound">internal.h</ref> header file.</para>
<para>The internal interface is in charge of GLFW&apos;s global data, which it stores in a <computeroutput><ref refid="struct___g_l_f_wlibrary" kindref="compound">_GLFWlibrary</ref></computeroutput> struct named <computeroutput>_glfw</computeroutput>.</para>
<para>The internal interface uses the same style as the public interface, except all global names have a leading underscore.</para>
<para>Examples: <computeroutput>_glfwIsValidContextConfig</computeroutput>, <computeroutput><ref refid="struct___g_l_f_wwindow" kindref="compound">_GLFWwindow</ref></computeroutput>, <computeroutput>_glfw.monitorCount</computeroutput></para>
</sect1>
<sect1 id="internals_guide_1internals_platform">
<title>Platform interface</title>
<para>The platform interface implements all platform-specific operations as a service to the public interface. This includes event processing. The platform interface is never directly called by application code and never directly calls application-provided callbacks. It is also prohibited from modifying the platform-independent part of the internal structs. Instead, it calls the event interface when events interesting to GLFW are received.</para>
<para>The platform interface mirrors those parts of the public interface that needs to perform platform-specific operations on some or all platforms. The are also named the same except that the glfw function prefix is replaced by _glfwPlatform.</para>
<para>Examples: <computeroutput>_glfwPlatformCreateWindow</computeroutput></para>
<para>The platform interface also defines structs that contain platform-specific global and per-object state. Their names mirror those of the internal interface, except that an interface-specific suffix is added.</para>
<para>Examples: <computeroutput><ref refid="struct___g_l_f_wwindow_x11" kindref="compound">_GLFWwindowX11</ref></computeroutput>, <computeroutput><ref refid="struct___g_l_f_wcontext_w_g_l" kindref="compound">_GLFWcontextWGL</ref></computeroutput></para>
<para>These structs are incorporated as members into the internal interface structs using special macros that name them after the specific interface used. This prevents shared code from accidentally using these members.</para>
<para>Examples: <computeroutput>window-&gt;win32.handle</computeroutput>, <computeroutput>_glfw.x11.display</computeroutput></para>
</sect1>
<sect1 id="internals_guide_1internals_event">
<title>Event interface</title>
<para>The event interface is implemented in the same shared source files as the public interface and is responsible for delivering the events it receives to the application, either via callbacks, via window state changes or both.</para>
<para>The function names of the event interface use a <computeroutput>_glfwInput</computeroutput> prefix and the ObjectEvent pattern.</para>
<para>Examples: <computeroutput>_glfwInputWindowFocus</computeroutput>, <computeroutput>_glfwInputCursorPos</computeroutput></para>
</sect1>
<sect1 id="internals_guide_1internals_static">
<title>Static functions</title>
<para>Static functions may be used by any interface and have no prefixes or suffixes. These use headless camel case.</para>
<para>Examples: <computeroutput>isValidElementForJoystick</computeroutput></para>
</sect1>
<sect1 id="internals_guide_1internals_config">
<title>Configuration macros</title>
<para>GLFW uses a number of configuration macros to select at compile time which interfaces and code paths to use. They are defined in the glfw_config.h header file, which is generated from the <computeroutput>glfw_config.h.in</computeroutput> file by CMake.</para>
<para>Configuration macros the same style as tokens in the public interface, except with a leading underscore.</para>
<para>Examples: <computeroutput>_GLFW_WIN32</computeroutput>, <computeroutput>_GLFW_BUILD_DLL</computeroutput> </para>
</sect1>
    </detaileddescription>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/docs/internal.dox"/>
  </compounddef>
</doxygen>
