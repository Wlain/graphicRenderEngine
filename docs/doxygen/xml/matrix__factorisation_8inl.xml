<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="matrix__factorisation_8inl" kind="file" language="C++">
    <compoundname>matrix_factorisation.inl</compoundname>
    <includedby refid="matrix__factorisation_8hpp" local="yes">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/matrix_factorisation.hpp</includedby>
    <invincdepgraph>
      <node id="2">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/matrix_factorisation.hpp</label>
        <link refid="matrix__factorisation_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/matrix_factorisation.inl</label>
        <link refid="matrix__factorisation_8inl"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/gtx/gtx_matrix_factorisation.cpp</label>
        <link refid="gtx__matrix__factorisation_8cpp_source"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespaceglm">glm</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="group__gtx__matrix__factorisation" kindref="compound">GLM_GTX_matrix_factorisation</ref> </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">glm</highlight></codeline>
<codeline lineno="5"><highlight class="normal">{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;length_t<sp/>C,<sp/>length_t<sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>qualifier<sp/>Q&gt;</highlight></codeline>
<codeline lineno="7" refid="group__gtx__matrix__factorisation_1ga904aa227f3fc40a3ae08fe0f6810b5ad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/><ref refid="structglm_1_1mat" kindref="compound">mat&lt;C, R, T, Q&gt;</ref><sp/><ref refid="group__gtx__matrix__factorisation_1ga904aa227f3fc40a3ae08fe0f6810b5ad" kindref="member">flipud</ref>(<ref refid="structglm_1_1mat" kindref="compound">mat&lt;C, R, T, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>in)</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structglm_1_1mat" kindref="compound">mat&lt;R, C, T, Q&gt;</ref><sp/>tin<sp/>=<sp/><ref refid="group__core__func__matrix_1ga4d251df5957b62996391bccb61cc9974" kindref="member">transpose</ref>(in);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tin<sp/>=<sp/><ref refid="group__gtx__matrix__factorisation_1gaf44ef34db04c55013bc3d9eee990b80c" kindref="member">fliplr</ref>(tin);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structglm_1_1mat" kindref="compound">mat&lt;C, R, T, Q&gt;</ref><sp/>out<sp/>=<sp/><ref refid="group__core__func__matrix_1ga4d251df5957b62996391bccb61cc9974" kindref="member">transpose</ref>(tin);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;length_t<sp/>C,<sp/>length_t<sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>qualifier<sp/>Q&gt;</highlight></codeline>
<codeline lineno="17" refid="group__gtx__matrix__factorisation_1gaf44ef34db04c55013bc3d9eee990b80c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/><ref refid="structglm_1_1mat" kindref="compound">mat&lt;C, R, T, Q&gt;</ref><sp/><ref refid="group__gtx__matrix__factorisation_1gaf44ef34db04c55013bc3d9eee990b80c" kindref="member">fliplr</ref>(<ref refid="structglm_1_1mat" kindref="compound">mat&lt;C, R, T, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>in)</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structglm_1_1mat" kindref="compound">mat&lt;C, R, T, Q&gt;</ref><sp/>out;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(length_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>C;<sp/>i++)</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[i]<sp/>=<sp/>in[(C<sp/>-<sp/>i)<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;length_t<sp/>C,<sp/>length_t<sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>qualifier<sp/>Q&gt;</highlight></codeline>
<codeline lineno="29" refid="group__gtx__matrix__factorisation_1ga77022dca1aa38add548f9f56a9f8071a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__gtx__matrix__factorisation_1ga77022dca1aa38add548f9f56a9f8071a" kindref="member">qr_decompose</ref>(<ref refid="structglm_1_1mat" kindref="compound">mat&lt;C, R, T, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>in,<sp/><ref refid="structglm_1_1mat" kindref="compound">mat</ref>&lt;(C<sp/>&lt;<sp/>R<sp/>?<sp/>C<sp/>:<sp/>R),<sp/>R,<sp/>T,<sp/>Q&gt;&amp;<sp/>q,<sp/><ref refid="structglm_1_1mat" kindref="compound">mat</ref>&lt;C,<sp/>(C<sp/>&lt;<sp/>R<sp/>?<sp/>C<sp/>:<sp/>R),<sp/>T,<sp/>Q&gt;&amp;<sp/>r)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Uses<sp/>modified<sp/>Gram-Schmidt<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Source:<sp/>https://en.wikipedia.org/wiki/Gramï¿½Schmidt_process</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>And<sp/>https://en.wikipedia.org/wiki/QR_decomposition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//For<sp/>all<sp/>the<sp/>linearly<sp/>independs<sp/>columns<sp/>of<sp/>the<sp/>input...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(there<sp/>can<sp/>be<sp/>no<sp/>more<sp/>linearly<sp/>independents<sp/>columns<sp/>than<sp/>there<sp/>are<sp/>rows.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(length_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(C<sp/>&lt;<sp/>R<sp/>?<sp/>C<sp/>:<sp/>R);<sp/>i++)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Copy<sp/>in<sp/>Q<sp/>the<sp/>input&apos;s<sp/>i-th<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q[i]<sp/>=<sp/>in[i];</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//j<sp/>=<sp/>[0,i[</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>that<sp/>column<sp/>orthogonal<sp/>to<sp/>all<sp/>the<sp/>previous<sp/>ones<sp/>by<sp/>substracting<sp/>to<sp/>it<sp/>the<sp/>non-orthogonal<sp/>projection<sp/>of<sp/>all<sp/>the<sp/>previous<sp/>columns.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Also:<sp/>Fill<sp/>the<sp/>zero<sp/>elements<sp/>of<sp/>R</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(length_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>i;<sp/>j++)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q[i]<sp/>-=<sp/>dot(q[i],<sp/>q[j])*q[j];</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r[j][i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Now,<sp/>Q<sp/>i-th<sp/>column<sp/>is<sp/>orthogonal<sp/>to<sp/>all<sp/>the<sp/>previous<sp/>columns.<sp/>Normalize<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q[i]<sp/>=<sp/>normalize(q[i]);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//j<sp/>=<sp/>[i,C[</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Finally,<sp/>compute<sp/>the<sp/>corresponding<sp/>coefficients<sp/>of<sp/>R<sp/>by<sp/>computing<sp/>the<sp/>projection<sp/>of<sp/>the<sp/>resulting<sp/>column<sp/>on<sp/>the<sp/>other<sp/>columns<sp/>of<sp/>the<sp/>input.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(length_t<sp/>j<sp/>=<sp/>i;<sp/>j<sp/>&lt;<sp/>C;<sp/>j++)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r[j][i]<sp/>=<sp/>dot(in[j],<sp/>q[i]);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;length_t<sp/>C,<sp/>length_t<sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>qualifier<sp/>Q&gt;</highlight></codeline>
<codeline lineno="64" refid="group__gtx__matrix__factorisation_1ga4e022709c9e7eaad9d7cc315d2cdb05c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__gtx__matrix__factorisation_1ga4e022709c9e7eaad9d7cc315d2cdb05c" kindref="member">rq_decompose</ref>(<ref refid="structglm_1_1mat" kindref="compound">mat&lt;C, R, T, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>in,<sp/><ref refid="structglm_1_1mat" kindref="compound">mat</ref>&lt;(C<sp/>&lt;<sp/>R<sp/>?<sp/>C<sp/>:<sp/>R),<sp/>R,<sp/>T,<sp/>Q&gt;&amp;<sp/>r,<sp/><ref refid="structglm_1_1mat" kindref="compound">mat</ref>&lt;C,<sp/>(C<sp/>&lt;<sp/>R<sp/>?<sp/>C<sp/>:<sp/>R),<sp/>T,<sp/>Q&gt;&amp;<sp/>q)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>From<sp/>https://en.wikipedia.org/wiki/QR_decomposition:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>RQ<sp/>decomposition<sp/>transforms<sp/>a<sp/>matrix<sp/>A<sp/>into<sp/>the<sp/>product<sp/>of<sp/>an<sp/>upper<sp/>triangular<sp/>matrix<sp/>R<sp/>(also<sp/>known<sp/>as<sp/>right-triangular)<sp/>and<sp/>an<sp/>orthogonal<sp/>matrix<sp/>Q.<sp/>The<sp/>only<sp/>difference<sp/>from<sp/>QR<sp/>decomposition<sp/>is<sp/>the<sp/>order<sp/>of<sp/>these<sp/>matrices.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>QR<sp/>decomposition<sp/>is<sp/>Gramï¿½Schmidt<sp/>orthogonalization<sp/>of<sp/>columns<sp/>of<sp/>A,<sp/>started<sp/>from<sp/>the<sp/>first<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>RQ<sp/>decomposition<sp/>is<sp/>Gramï¿½Schmidt<sp/>orthogonalization<sp/>of<sp/>rows<sp/>of<sp/>A,<sp/>started<sp/>from<sp/>the<sp/>last<sp/>row.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structglm_1_1mat" kindref="compound">mat&lt;R, C, T, Q&gt;</ref><sp/>tin<sp/>=<sp/><ref refid="group__core__func__matrix_1ga4d251df5957b62996391bccb61cc9974" kindref="member">transpose</ref>(in);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tin<sp/>=<sp/><ref refid="group__gtx__matrix__factorisation_1gaf44ef34db04c55013bc3d9eee990b80c" kindref="member">fliplr</ref>(tin);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structglm_1_1mat" kindref="compound">mat</ref>&lt;R,<sp/>(C<sp/>&lt;<sp/>R<sp/>?<sp/>C<sp/>:<sp/>R),<sp/>T,<sp/>Q&gt;<sp/>tr;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structglm_1_1mat" kindref="compound">mat</ref>&lt;(C<sp/>&lt;<sp/>R<sp/>?<sp/>C<sp/>:<sp/>R),<sp/>C,<sp/>T,<sp/>Q&gt;<sp/>tq;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__gtx__matrix__factorisation_1ga77022dca1aa38add548f9f56a9f8071a" kindref="member">qr_decompose</ref>(tin,<sp/>tq,<sp/>tr);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tr<sp/>=<sp/><ref refid="group__gtx__matrix__factorisation_1gaf44ef34db04c55013bc3d9eee990b80c" kindref="member">fliplr</ref>(tr);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/><ref refid="group__core__func__matrix_1ga4d251df5957b62996391bccb61cc9974" kindref="member">transpose</ref>(tr);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/><ref refid="group__gtx__matrix__factorisation_1gaf44ef34db04c55013bc3d9eee990b80c" kindref="member">fliplr</ref>(r);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tq<sp/>=<sp/><ref refid="group__gtx__matrix__factorisation_1gaf44ef34db04c55013bc3d9eee990b80c" kindref="member">fliplr</ref>(tq);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/><ref refid="group__core__func__matrix_1ga4d251df5957b62996391bccb61cc9974" kindref="member">transpose</ref>(tq);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}<sp/></highlight><highlight class="comment">//namespace<sp/>glm</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/matrix_factorisation.inl"/>
  </compounddef>
</doxygen>
