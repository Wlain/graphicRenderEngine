<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="namespacetest__derived_euler_angles" kind="namespace" language="C++">
    <compoundname>test_derivedEulerAngles</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="gtx__euler__angle_8cpp_1acaf3bf1b20ad39ca8663c2e75334dda0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool test_derivedEulerAngles::epsilonEqual</definition>
        <argsstring>(glm::mat4 const &amp;mat1, glm::mat4 const &amp;mat2, glm::mat4::value_type const &amp;epsilon)</argsstring>
        <name>epsilonEqual</name>
        <param>
          <type><ref refid="group__core__types_1ga7dcd2365c2e368e6af5b7adeb6a9c8df" kindref="member">glm::mat4</ref> const &amp;</type>
          <declname>mat1</declname>
        </param>
        <param>
          <type><ref refid="group__core__types_1ga7dcd2365c2e368e6af5b7adeb6a9c8df" kindref="member">glm::mat4</ref> const &amp;</type>
          <declname>mat2</declname>
        </param>
        <param>
          <type>glm::mat4::value_type const &amp;</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/gtx/gtx_euler_angle.cpp" line="145" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/gtx/gtx_euler_angle.cpp" bodystart="145" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="gtx__euler__angle_8cpp_1ae9fc7b20071f4f758c566b057903090e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RotationFunc</type>
          </param>
          <param>
            <type>typename TestDerivedFunc</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int test_derivedEulerAngles::test</definition>
        <argsstring>(RotationFunc rotationFunc, TestDerivedFunc testDerivedFunc, const glm::vec3 &amp;basis)</argsstring>
        <name>test</name>
        <param>
          <type>RotationFunc</type>
          <declname>rotationFunc</declname>
        </param>
        <param>
          <type>TestDerivedFunc</type>
          <declname>testDerivedFunc</declname>
        </param>
        <param>
          <type>const <ref refid="group__core__types_1ga1c47e8b3386109bc992b6c48e91b0be7" kindref="member">glm::vec3</ref> &amp;</type>
          <declname>basis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/gtx/gtx_euler_angle.cpp" line="160" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/gtx/gtx_euler_angle.cpp" bodystart="160" bodyend="196"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/gtx/gtx_euler_angle.cpp" line="143" column="1"/>
  </compounddef>
</doxygen>
