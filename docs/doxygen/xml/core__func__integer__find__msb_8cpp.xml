<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="core__func__integer__find__msb_8cpp" kind="file" language="C++">
    <compoundname>core_func_integer_find_msb.cpp</compoundname>
    <includes refid="glm_8hpp" local="no">glm/glm.hpp</includes>
    <includes local="no">cstdio</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">ctime</includes>
    <incdepgraph>
      <node id="66">
        <label>../common.hpp</label>
        <link refid="common_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>detail/_fixes.hpp</label>
        <link refid="__fixes_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>_vectorize.hpp</label>
        <link refid="__vectorize_8hpp"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>compute_vector_relational.hpp</label>
        <link refid="compute__vector__relational_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>detail/func_common.inl</label>
        <link refid="func__common_8inl"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>detail/func_exponential.inl</label>
        <link refid="func__exponential_8inl"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>detail/func_geometric.inl</label>
        <link refid="func__geometric_8inl"/>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>detail/func_integer.inl</label>
        <link refid="func__integer_8inl"/>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>detail/func_matrix.inl</label>
        <link refid="func__matrix_8inl"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>detail/func_packing.inl</label>
        <link refid="func__packing_8inl"/>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>detail/func_trigonometric.inl</label>
        <link refid="func__trigonometric_8inl"/>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>detail/func_vector_relational.inl</label>
        <link refid="func__vector__relational_8inl"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>qualifier.hpp</label>
        <link refid="qualifier_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>detail/setup.hpp</label>
        <link refid="setup_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>detail/type_float.hpp</label>
        <link refid="type__float_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>type_half.hpp</label>
        <link refid="type__half_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>type_half.inl</label>
        <link refid="type__half_8inl"/>
      </node>
      <node id="13">
        <label>detail/type_int.hpp</label>
        <link refid="type__int_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>detail/type_mat.hpp</label>
        <link refid="type__mat_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>detail/type_mat2x2.hpp</label>
        <link refid="type__mat2x2_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>type_mat2x2.inl</label>
        <link refid="type__mat2x2_8inl"/>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>detail/type_mat2x3.hpp</label>
        <link refid="type__mat2x3_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>type_mat2x3.inl</label>
        <link refid="type__mat2x3_8inl"/>
      </node>
      <node id="37">
        <label>detail/type_mat2x4.hpp</label>
        <link refid="type__mat2x4_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>type_mat2x4.inl</label>
        <link refid="type__mat2x4_8inl"/>
      </node>
      <node id="40">
        <label>detail/type_mat3x2.hpp</label>
        <link refid="type__mat3x2_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>type_mat3x2.inl</label>
        <link refid="type__mat3x2_8inl"/>
      </node>
      <node id="43">
        <label>detail/type_mat3x3.hpp</label>
        <link refid="type__mat3x3_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>type_mat3x3.inl</label>
        <link refid="type__mat3x3_8inl"/>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>detail/type_mat3x4.hpp</label>
        <link refid="type__mat3x4_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>type_mat3x4.inl</label>
        <link refid="type__mat3x4_8inl"/>
      </node>
      <node id="49">
        <label>detail/type_mat4x2.hpp</label>
        <link refid="type__mat4x2_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>type_mat4x2.inl</label>
        <link refid="type__mat4x2_8inl"/>
      </node>
      <node id="52">
        <label>detail/type_mat4x3.hpp</label>
        <link refid="type__mat4x3_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>type_mat4x3.inl</label>
        <link refid="type__mat4x3_8inl"/>
      </node>
      <node id="55">
        <label>detail/type_mat4x4.hpp</label>
        <link refid="type__mat4x4_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>type_mat4x4.inl</label>
        <link refid="type__mat4x4_8inl"/>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>detail/type_vec.hpp</label>
        <link refid="type__vec_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>detail/type_vec1.hpp</label>
        <link refid="type__vec1_8hpp_source"/>
      </node>
      <node id="77">
        <label>../detail/type_vec1.inl</label>
        <link refid="type__vec1_8inl"/>
      </node>
      <node id="21">
        <label>detail/type_vec2.hpp</label>
        <link refid="type__vec2_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>type_vec2.inl</label>
        <link refid="type__vec2_8inl_source"/>
      </node>
      <node id="24">
        <label>detail/type_vec3.hpp</label>
        <link refid="type__vec3_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>type_vec3.inl</label>
        <link refid="type__vec3_8inl_source"/>
      </node>
      <node id="27">
        <label>detail/type_vec4.hpp</label>
        <link refid="type__vec4_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>type_vec4.inl</label>
        <link refid="type__vec4_8inl_source"/>
      </node>
      <node id="60">
        <label>../exponential.hpp</label>
        <link refid="exponential_8hpp"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>../ext/vec1.hpp</label>
        <link refid="ext_2vec1_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>fwd.hpp</label>
        <link refid="fwd_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="58">
        <label>../geometric.hpp</label>
        <link refid="geometric_8hpp"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>glm/glm.hpp</label>
        <link refid="glm_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>integer.hpp</label>
        <link refid="integer_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>mat2x2.hpp</label>
        <link refid="mat2x2_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>mat2x3.hpp</label>
        <link refid="mat2x3_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>mat2x4.hpp</label>
        <link refid="mat2x4_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>mat3x2.hpp</label>
        <link refid="mat3x2_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>mat3x3.hpp</label>
        <link refid="mat3x3_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>mat3x4.hpp</label>
        <link refid="mat3x4_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>mat4x2.hpp</label>
        <link refid="mat4x2_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>mat4x3.hpp</label>
        <link refid="mat4x3_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>mat4x4.hpp</label>
        <link refid="mat4x4_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>../matrix.hpp</label>
        <link refid="matrix_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>packing.hpp</label>
        <link refid="packing_8hpp"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>../simd/platform.h</label>
        <link refid="platform_8h"/>
      </node>
      <node id="68">
        <label>trigonometric.hpp</label>
        <link refid="trigonometric_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>vec2.hpp</label>
        <link refid="vec2_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>vec3.hpp</label>
        <link refid="vec3_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>vec4.hpp</label>
        <link refid="vec4_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>../vector_relational.hpp</label>
        <link refid="vector__relational_8hpp"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp</label>
        <link refid="core__func__integer__find__msb_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>cassert</label>
      </node>
      <node id="10">
        <label>cfloat</label>
      </node>
      <node id="9">
        <label>climits</label>
      </node>
      <node id="4">
        <label>cmath</label>
      </node>
      <node id="7">
        <label>cstddef</label>
      </node>
      <node id="78">
        <label>cstdio</label>
      </node>
      <node id="79">
        <label>cstdlib</label>
      </node>
      <node id="18">
        <label>cstring</label>
      </node>
      <node id="80">
        <label>ctime</label>
      </node>
      <node id="11">
        <label>limits</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="core__func__integer__find__msb_8cpp_1aa4d6abc7b58eb11e517993df83b7f0f7" prot="public" static="no">
        <name>LE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" line="6" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" bodystart="6" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core__func__integer__find__msb_8cpp_1a1f9aca42e2010bb82488684dee1a66ea" prot="public" static="no">
        <name>u</name>
        <initializer>99</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" line="232" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" bodystart="232" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="core__func__integer__find__msb_8cpp_1a433c7fadd13f3a906e01c9d9f5c8fb09" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int errors</definition>
        <argsstring></argsstring>
        <name>errors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" line="297" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" bodystart="297" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="core__func__integer__find__msb_8cpp_1af90aa2f32f9c39ddd552c1d27f65dbaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pop</definition>
        <argsstring>(unsigned x)</argsstring>
        <name>pop</name>
        <param>
          <type>unsigned</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" line="8" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" bodystart="8" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="core__func__integer__find__msb_8cpp_1abaa1e000f71f22604a6830addf6f8f01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nlz1</definition>
        <argsstring>(unsigned x)</argsstring>
        <name>nlz1</name>
        <param>
          <type>unsigned</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" line="17" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" bodystart="17" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="core__func__integer__find__msb_8cpp_1ae73031cbd6fa525885cea5be27b97558" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nlz1a</definition>
        <argsstring>(unsigned x)</argsstring>
        <name>nlz1a</name>
        <param>
          <type>unsigned</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" line="30" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" bodystart="30" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="core__func__integer__find__msb_8cpp_1a635a9b105c39b6b680e33038733f3e29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nlz2</definition>
        <argsstring>(unsigned x)</argsstring>
        <name>nlz2</name>
        <param>
          <type>unsigned</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" line="45" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" bodystart="45" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="core__func__integer__find__msb_8cpp_1a26eb10fc78ab8ab90c9ad0a2ed43b0d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nlz2a</definition>
        <argsstring>(unsigned x)</argsstring>
        <name>nlz2a</name>
        <param>
          <type>unsigned</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" line="60" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" bodystart="60" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="core__func__integer__find__msb_8cpp_1a58814a20b9718845bd8a0ee21d9fba36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nlz3</definition>
        <argsstring>(int x)</argsstring>
        <name>nlz3</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" line="73" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" bodystart="73" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="core__func__integer__find__msb_8cpp_1aecb119a86a074f58c2a5dda603e6786d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nlz4</definition>
        <argsstring>(unsigned x)</argsstring>
        <name>nlz4</name>
        <param>
          <type>unsigned</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" line="86" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" bodystart="86" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="core__func__integer__find__msb_8cpp_1aa87dd42080b64354f6059fd526df27be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nlz5</definition>
        <argsstring>(unsigned x)</argsstring>
        <name>nlz5</name>
        <param>
          <type>unsigned</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" line="114" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" bodystart="114" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="core__func__integer__find__msb_8cpp_1a465c8ad891cb1c8a9ce7c1362f63030b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nlz6</definition>
        <argsstring>(unsigned k)</argsstring>
        <name>nlz6</name>
        <param>
          <type>unsigned</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" line="141" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" bodystart="141" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="core__func__integer__find__msb_8cpp_1a541f3c6eb60ecdeaa4261d6cd274ca4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nlz7</definition>
        <argsstring>(unsigned k)</argsstring>
        <name>nlz7</name>
        <param>
          <type>unsigned</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" line="154" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" bodystart="154" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="core__func__integer__find__msb_8cpp_1ad0e03185ce1bc747e9326eb9b4c9a5fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nlz8</definition>
        <argsstring>(unsigned k)</argsstring>
        <name>nlz8</name>
        <param>
          <type>unsigned</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" line="177" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" bodystart="177" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="core__func__integer__find__msb_8cpp_1aa81ccc96d228349363ce458e7562ada2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nlz9</definition>
        <argsstring>(unsigned k)</argsstring>
        <name>nlz9</name>
        <param>
          <type>unsigned</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" line="199" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" bodystart="199" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="core__func__integer__find__msb_8cpp_1a4c85d11c045a56af48deb095b12ecd60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nlz10</definition>
        <argsstring>(unsigned x)</argsstring>
        <name>nlz10</name>
        <param>
          <type>unsigned</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" line="233" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" bodystart="233" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="core__func__integer__find__msb_8cpp_1ac58488792a8b43d0a37f3df5f09c4f2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nlz10a</definition>
        <argsstring>(unsigned x)</argsstring>
        <name>nlz10a</name>
        <param>
          <type>unsigned</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" line="253" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" bodystart="253" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="core__func__integer__find__msb_8cpp_1a2bccf6d8981c628215aab54f4dc5e8c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nlz10b</definition>
        <argsstring>(unsigned x)</argsstring>
        <name>nlz10b</name>
        <param>
          <type>unsigned</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" line="277" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" bodystart="277" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="core__func__integer__find__msb_8cpp_1ab34dedbf30a51859090cbab92fa60edb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void error</definition>
        <argsstring>(int x, int y)</argsstring>
        <name>error</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" line="298" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" bodystart="298" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="core__func__integer__find__msb_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" line="304" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp" bodystart="304" bodyend="440"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;<ref refid="glm_8hpp" kindref="compound">glm/glm.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>define<sp/>&quot;exit&quot;,<sp/>req&apos;d<sp/>by<sp/>XLC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctime&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LE<sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1<sp/>for<sp/>little-endian,<sp/>0<sp/>for<sp/>big-endian.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pop(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/>x<sp/>=<sp/>x<sp/>-<sp/>((x<sp/>&gt;&gt;<sp/>1)<sp/>&amp;<sp/>0x55555555);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/>x<sp/>=<sp/>(x<sp/>&amp;<sp/>0x33333333)<sp/>+<sp/>((x<sp/>&gt;&gt;<sp/>2)<sp/>&amp;<sp/>0x33333333);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/>x<sp/>=<sp/>(x<sp/>+<sp/>(x<sp/>&gt;&gt;<sp/>4))<sp/>&amp;<sp/>0x0F0F0F0F;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/>x<sp/>=<sp/>x<sp/>+<sp/>(x<sp/>&lt;&lt;<sp/>8);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/>x<sp/>=<sp/>x<sp/>+<sp/>(x<sp/>&lt;&lt;<sp/>16);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>&gt;&gt;<sp/>24;</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nlz1(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(32);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;=<sp/>0x0000FFFF)<sp/>{n<sp/>=<sp/>n<sp/>+16;<sp/>x<sp/>=<sp/>x<sp/>&lt;&lt;16;}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;=<sp/>0x00FFFFFF)<sp/>{n<sp/>=<sp/>n<sp/>+<sp/>8;<sp/>x<sp/>=<sp/>x<sp/>&lt;&lt;<sp/>8;}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;=<sp/>0x0FFFFFFF)<sp/>{n<sp/>=<sp/>n<sp/>+<sp/>4;<sp/>x<sp/>=<sp/>x<sp/>&lt;&lt;<sp/>4;}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;=<sp/>0x3FFFFFFF)<sp/>{n<sp/>=<sp/>n<sp/>+<sp/>2;<sp/>x<sp/>=<sp/>x<sp/>&lt;&lt;<sp/>2;}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;=<sp/>0x7FFFFFFF)<sp/>{n<sp/>=<sp/>n<sp/>+<sp/>1;}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nlz1a(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>if<sp/>(x<sp/>==<sp/>0)<sp/>return(32);<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(x)<sp/>&lt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(~x<sp/>&gt;&gt;<sp/>26)<sp/>&amp;<sp/>32;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x<sp/>&gt;&gt;<sp/>16)<sp/>==<sp/>0)<sp/>{n<sp/>=<sp/>n<sp/>+16;<sp/>x<sp/>=<sp/>x<sp/>&lt;&lt;16;}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x<sp/>&gt;&gt;<sp/>24)<sp/>==<sp/>0)<sp/>{n<sp/>=<sp/>n<sp/>+<sp/>8;<sp/>x<sp/>=<sp/>x<sp/>&lt;&lt;<sp/>8;}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x<sp/>&gt;&gt;<sp/>28)<sp/>==<sp/>0)<sp/>{n<sp/>=<sp/>n<sp/>+<sp/>4;<sp/>x<sp/>=<sp/>x<sp/>&lt;&lt;<sp/>4;}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x<sp/>&gt;&gt;<sp/>30)<sp/>==<sp/>0)<sp/>{n<sp/>=<sp/>n<sp/>+<sp/>2;<sp/>x<sp/>=<sp/>x<sp/>&lt;&lt;<sp/>2;}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>n<sp/>-<sp/>(x<sp/>&gt;&gt;<sp/>31);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>On<sp/>basic<sp/>Risc,<sp/>12<sp/>to<sp/>20<sp/>instructions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nlz2(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>y;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/>y<sp/>=<sp/>x<sp/>&gt;&gt;16;<sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>!=<sp/>0)<sp/>{n<sp/>=<sp/>n<sp/>-16;<sp/><sp/>x<sp/>=<sp/>y;}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/>y<sp/>=<sp/>x<sp/>&gt;&gt;<sp/>8;<sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>!=<sp/>0)<sp/>{n<sp/>=<sp/>n<sp/>-<sp/>8;<sp/><sp/>x<sp/>=<sp/>y;}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/>y<sp/>=<sp/>x<sp/>&gt;&gt;<sp/>4;<sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>!=<sp/>0)<sp/>{n<sp/>=<sp/>n<sp/>-<sp/>4;<sp/><sp/>x<sp/>=<sp/>y;}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/>y<sp/>=<sp/>x<sp/>&gt;&gt;<sp/>2;<sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>!=<sp/>0)<sp/>{n<sp/>=<sp/>n<sp/>-<sp/>2;<sp/><sp/>x<sp/>=<sp/>y;}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/>y<sp/>=<sp/>x<sp/>&gt;&gt;<sp/>1;<sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n<sp/>-<sp/>2;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n<sp/>-<sp/>x;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/>As<sp/>above<sp/>but<sp/>coded<sp/>as<sp/>a<sp/>loop<sp/>for<sp/>compactness:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>23<sp/>to<sp/>33<sp/>basic<sp/>Risc<sp/>instructions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nlz2a(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>y;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>c;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/>c<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>x<sp/>&gt;&gt;<sp/>c;<sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>!=<sp/>0)<sp/>{n<sp/>=<sp/>n<sp/>-<sp/>c;<sp/><sp/>x<sp/>=<sp/>y;}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>c<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n<sp/>-<sp/>x;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nlz3(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/>n;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/>y<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="78"><highlight class="normal">L:<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>32<sp/>-<sp/>n;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>n<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/>x<sp/>=<sp/>x<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/>y<sp/>=<sp/>y<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>L;</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nlz4(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y,<sp/>m,<sp/>n;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/>y<sp/>=<sp/>-(x<sp/>&gt;&gt;<sp/>16);<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>left<sp/>half<sp/>of<sp/>x<sp/>is<sp/>0,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/>m<sp/>=<sp/>(y<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>16;<sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>n<sp/>=<sp/>16.<sp/><sp/>If<sp/>left<sp/>half</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>16<sp/>-<sp/>m;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>nonzero,<sp/>set<sp/>n<sp/>=<sp/>0<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/>x<sp/>=<sp/>x<sp/>&gt;&gt;<sp/>m;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>shift<sp/>x<sp/>right<sp/>16.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>x<sp/>is<sp/>of<sp/>the<sp/>form<sp/>0000xxxx.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/>y<sp/>=<sp/>x<sp/>-<sp/>0x100;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>positions<sp/>8-15<sp/>are<sp/>0,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/>m<sp/>=<sp/>(y<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>8;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>8<sp/>to<sp/>n<sp/>and<sp/>shift<sp/>x<sp/>left<sp/>8.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>n<sp/>+<sp/>m;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/>x<sp/>=<sp/>x<sp/>&lt;&lt;<sp/>m;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/>y<sp/>=<sp/>x<sp/>-<sp/>0x1000;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>positions<sp/>12-15<sp/>are<sp/>0,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/>m<sp/>=<sp/>(y<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>4;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>4<sp/>to<sp/>n<sp/>and<sp/>shift<sp/>x<sp/>left<sp/>4.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>n<sp/>+<sp/>m;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/>x<sp/>=<sp/>x<sp/>&lt;&lt;<sp/>m;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/>y<sp/>=<sp/>x<sp/>-<sp/>0x4000;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>positions<sp/>14-15<sp/>are<sp/>0,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/>m<sp/>=<sp/>(y<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>2;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>2<sp/>to<sp/>n<sp/>and<sp/>shift<sp/>x<sp/>left<sp/>2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/>n<sp/>=<sp/>n<sp/>+<sp/>m;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/>x<sp/>=<sp/>x<sp/>&lt;&lt;<sp/>m;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/>y<sp/>=<sp/>x<sp/>&gt;&gt;<sp/>14;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>y<sp/>=<sp/>0,<sp/>1,<sp/>2,<sp/>or<sp/>3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/>m<sp/>=<sp/>y<sp/>&amp;<sp/>~(y<sp/>&gt;&gt;<sp/>1);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>m<sp/>=<sp/>0,<sp/>1,<sp/>2,<sp/>or<sp/>2<sp/>resp.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n<sp/>+<sp/>2<sp/>-<sp/>m;</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nlz5(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pop(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/>x<sp/>=<sp/>x<sp/>|<sp/>(x<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/>x<sp/>=<sp/>x<sp/>|<sp/>(x<sp/>&gt;&gt;<sp/>2);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/>x<sp/>=<sp/>x<sp/>|<sp/>(x<sp/>&gt;&gt;<sp/>4);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/>x<sp/>=<sp/>x<sp/>|<sp/>(x<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/>x<sp/>=<sp/>x<sp/>|<sp/>(x<sp/>&gt;&gt;16);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pop(~x);</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>four<sp/>programs<sp/>below<sp/>are<sp/>not<sp/>valid<sp/>ANSI<sp/>C<sp/>programs.<sp/><sp/>This<sp/>is</highlight></codeline>
<codeline lineno="126"><highlight class="comment">because<sp/>they<sp/>refer<sp/>to<sp/>the<sp/>same<sp/>storage<sp/>locations<sp/>as<sp/>two<sp/>different<sp/>types.</highlight></codeline>
<codeline lineno="127"><highlight class="comment">However,<sp/>they<sp/>work<sp/>with<sp/>xlc/AIX,<sp/>gcc/AIX,<sp/>and<sp/>gcc/NT.<sp/><sp/>If<sp/>you<sp/>try<sp/>to</highlight></codeline>
<codeline lineno="128"><highlight class="comment">code<sp/>them<sp/>more<sp/>compactly<sp/>by<sp/>declaring<sp/>a<sp/>variable<sp/>xx<sp/>to<sp/>be<sp/>&quot;double,&quot;<sp/>and</highlight></codeline>
<codeline lineno="129"><highlight class="comment">then<sp/>using</highlight></codeline>
<codeline lineno="130"><highlight class="comment"></highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/>n<sp/>=<sp/>1054<sp/>-<sp/>(*((unsigned<sp/>*)&amp;xx<sp/>+<sp/>LE)<sp/>&gt;&gt;<sp/>20);</highlight></codeline>
<codeline lineno="132"><highlight class="comment"></highlight></codeline>
<codeline lineno="133"><highlight class="comment">then<sp/>you<sp/>are<sp/>violating<sp/>not<sp/>only<sp/>the<sp/>rule<sp/>above,<sp/>but<sp/>also<sp/>the<sp/>ANSI<sp/>C</highlight></codeline>
<codeline lineno="134"><highlight class="comment">rule<sp/>that<sp/>pointer<sp/>arithmetic<sp/>can<sp/>be<sp/>performed<sp/>only<sp/>on<sp/>pointers<sp/>to</highlight></codeline>
<codeline lineno="135"><highlight class="comment">array<sp/>elements.</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/><sp/>When<sp/>coded<sp/>with<sp/>the<sp/>above<sp/>statement,<sp/>the<sp/>program<sp/>fails<sp/>with<sp/>xlc,</highlight></codeline>
<codeline lineno="137"><highlight class="comment">gcc/AIX,<sp/>and<sp/>gcc/NT,<sp/>at<sp/>some<sp/>optimization<sp/>levels.</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/>BTW,<sp/>these<sp/>programs<sp/>use<sp/>the<sp/>&quot;anonymous<sp/>union&quot;<sp/>feature<sp/>of<sp/>C++,<sp/>not</highlight></codeline>
<codeline lineno="139"><highlight class="comment">available<sp/>in<sp/>C.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nlz6(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>k)</highlight></codeline>
<codeline lineno="142"><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>asInt[2];</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>asDouble;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>asDouble<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(k)<sp/>+<sp/>0.5;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>1054<sp/>-<sp/>(asInt[LE]<sp/>&gt;&gt;<sp/>20);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nlz7(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>k)</highlight></codeline>
<codeline lineno="155"><highlight class="normal">{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>asInt[2];</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>asDouble;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>asDouble<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(k);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>1054<sp/>-<sp/>(asInt[LE]<sp/>&gt;&gt;<sp/>20);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(n<sp/>&amp;<sp/>31)<sp/>+<sp/>(n<sp/>&gt;&gt;<sp/>9);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>In<sp/>single<sp/>qualifier,<sp/>round-to-nearest<sp/>mode,<sp/>the<sp/>basic<sp/>method<sp/>fails<sp/>for:</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/><sp/>k<sp/>=<sp/>0,<sp/>k<sp/>=<sp/>01FFFFFF,<sp/>03FFFFFE<sp/>&lt;=<sp/>k<sp/>&lt;=<sp/>03FFFFFF,</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>07FFFFFC<sp/>&lt;=<sp/>k<sp/>&lt;=<sp/>07FFFFFF,</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0FFFFFF8<sp/>&lt;=<sp/>k<sp/>&lt;=<sp/>0FFFFFFF,</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>7FFFFFC0<sp/>&lt;=<sp/>k<sp/>&lt;=<sp/>7FFFFFFF.</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FFFFFF80<sp/>&lt;=<sp/>k<sp/>&lt;=<sp/>FFFFFFFF.</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/><sp/>For<sp/>k<sp/>=<sp/>0<sp/>it<sp/>gives<sp/>158,<sp/>and<sp/>for<sp/>the<sp/>other<sp/>values<sp/>it<sp/>is<sp/>too<sp/>low<sp/>by<sp/>1.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nlz8(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>k)</highlight></codeline>
<codeline lineno="178"><highlight class="normal">{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>asInt;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>asFloat;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>k<sp/>&amp;<sp/>~(k<sp/>&gt;&gt;<sp/>1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Fix<sp/>problem<sp/>with<sp/>rounding.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>asFloat<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(k)<sp/>+<sp/>0.5f;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>158<sp/>-<sp/>(asInt<sp/>&gt;&gt;<sp/>23);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>example<sp/>below<sp/>shows<sp/>how<sp/>to<sp/>make<sp/>a<sp/>macro<sp/>for<sp/>nlz.<sp/><sp/>It<sp/>uses<sp/>an</highlight></codeline>
<codeline lineno="192"><highlight class="comment">extension<sp/>to<sp/>the<sp/>C<sp/>and<sp/>C++<sp/>languages<sp/>that<sp/>is<sp/>provided<sp/>by<sp/>the<sp/>GNU<sp/>C/C++</highlight></codeline>
<codeline lineno="193"><highlight class="comment">compiler,<sp/>namely,<sp/>that<sp/>of<sp/>allowing<sp/>statements<sp/>and<sp/>declarations<sp/>in</highlight></codeline>
<codeline lineno="194"><highlight class="comment">expressions<sp/>(see<sp/>&quot;Using<sp/>and<sp/>Porting<sp/>GNU<sp/>CC&quot;,<sp/>by<sp/>Richard<sp/>M.<sp/>Stallman</highlight></codeline>
<codeline lineno="195"><highlight class="comment">(1998).<sp/><sp/>The<sp/>underscores<sp/>are<sp/>necessary<sp/>to<sp/>protect<sp/>against<sp/>the</highlight></codeline>
<codeline lineno="196"><highlight class="comment">possibility<sp/>that<sp/>the<sp/>macro<sp/>argument<sp/>will<sp/>conflict<sp/>with<sp/>one<sp/>of<sp/>its<sp/>local</highlight></codeline>
<codeline lineno="197"><highlight class="comment">variables,<sp/>e.g.,<sp/>NLZ(k).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nlz9(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>k)</highlight></codeline>
<codeline lineno="200"><highlight class="normal">{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>asInt;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>asFloat;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>k<sp/>&amp;<sp/>~(k<sp/>&gt;&gt;<sp/>1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Fix<sp/>problem<sp/>with<sp/>rounding.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>asFloat<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(k);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>158<sp/>-<sp/>(asInt<sp/>&gt;&gt;<sp/>23);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>(n<sp/>&amp;<sp/>31)<sp/>+<sp/>(n<sp/>&gt;&gt;<sp/>6);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Fix<sp/>problem<sp/>with<sp/>k<sp/>=<sp/>0.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Below<sp/>are<sp/>three<sp/>nearly<sp/>equivalent<sp/>programs<sp/>for<sp/>computing<sp/>the<sp/>number</highlight></codeline>
<codeline lineno="215"><highlight class="comment">of<sp/>leading<sp/>zeros<sp/>in<sp/>a<sp/>word.<sp/>This<sp/>material<sp/>is<sp/>not<sp/>in<sp/>HD,<sp/>but<sp/>may<sp/>be<sp/>in<sp/>a</highlight></codeline>
<codeline lineno="216"><highlight class="comment">future<sp/>edition.</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/><sp/><sp/>Immediately<sp/>below<sp/>is<sp/>Robert<sp/>Harley&apos;s<sp/>algorithm,<sp/>found<sp/>at<sp/>the</highlight></codeline>
<codeline lineno="218"><highlight class="comment">comp.arch<sp/>newsgroup<sp/>entry<sp/>dated<sp/>7/12/96,<sp/>pointed<sp/>out<sp/>to<sp/>me<sp/>by<sp/>Norbert</highlight></codeline>
<codeline lineno="219"><highlight class="comment">Juffa.</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/><sp/><sp/>Table<sp/>entries<sp/>marked<sp/>&quot;u&quot;<sp/>are<sp/>unused.<sp/>14<sp/>ops<sp/>including<sp/>a<sp/>multiply,</highlight></codeline>
<codeline lineno="221"><highlight class="comment">plus<sp/>an<sp/>indexed<sp/>load.</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/><sp/>The<sp/>smallest<sp/>multiplier<sp/>that<sp/>works<sp/>is<sp/>0x045BCED1<sp/>=<sp/>17*65*129*513<sp/>(all</highlight></codeline>
<codeline lineno="223"><highlight class="comment">of<sp/>form<sp/>2**k<sp/>+<sp/>1).<sp/>There<sp/>are<sp/>no<sp/>multipliers<sp/>of<sp/>three<sp/>terms<sp/>of<sp/>the<sp/>form</highlight></codeline>
<codeline lineno="224"><highlight class="comment">2**k<sp/>+-<sp/>1<sp/>that<sp/>work,<sp/>with<sp/>a<sp/>table<sp/>size<sp/>of<sp/>64<sp/>or<sp/>128.<sp/>There<sp/>are<sp/>some,</highlight></codeline>
<codeline lineno="225"><highlight class="comment">with<sp/>a<sp/>table<sp/>size<sp/>of<sp/>64,<sp/>if<sp/>you<sp/>precede<sp/>the<sp/>multiplication<sp/>with<sp/>x<sp/>=<sp/>x<sp/>-</highlight></codeline>
<codeline lineno="226"><highlight class="comment">(x<sp/>&gt;&gt;<sp/>1),<sp/>but<sp/>that<sp/>seems<sp/>less<sp/>elegant.<sp/>There<sp/>are<sp/>also<sp/>some<sp/>if<sp/>you<sp/>use<sp/>a</highlight></codeline>
<codeline lineno="227"><highlight class="comment">table<sp/>size<sp/>of<sp/>256,<sp/>the<sp/>smallest<sp/>is<sp/>0x01033CBF<sp/>=<sp/>65*255*1025<sp/>(this<sp/>would</highlight></codeline>
<codeline lineno="228"><highlight class="comment">save<sp/>two<sp/>instructions<sp/>in<sp/>the<sp/>form<sp/>of<sp/>this<sp/>algorithm<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="229"><highlight class="comment">multiplication<sp/>expanded<sp/>into<sp/>shifts<sp/>and<sp/>adds,<sp/>but<sp/>the<sp/>table<sp/>size<sp/>is</highlight></codeline>
<codeline lineno="230"><highlight class="comment">getting<sp/>a<sp/>bit<sp/>large).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>u<sp/>99</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nlz10(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>x)</highlight></codeline>
<codeline lineno="234"><highlight class="normal">{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structtable" kindref="compound">table</ref>[64]<sp/>=</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{32,31,<sp/>u,16,<sp/>u,30,<sp/>3,<sp/>u,<sp/><sp/>15,<sp/>u,<sp/>u,<sp/>u,29,10,<sp/>2,<sp/>u,</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u,<sp/>u,12,14,21,<sp/>u,19,<sp/>u,<sp/><sp/><sp/>u,28,<sp/>u,25,<sp/>u,<sp/>9,<sp/>1,<sp/>u,</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>17,<sp/>u,<sp/>4,<sp/>u,<sp/>u,<sp/>u,11,<sp/>u,<sp/><sp/>13,22,20,<sp/>u,26,<sp/>u,<sp/>u,18,</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5,<sp/>u,<sp/>u,23,<sp/>u,27,<sp/>u,<sp/>6,<sp/><sp/><sp/>u,24,<sp/>7,<sp/>u,<sp/>8,<sp/>u,<sp/>0,<sp/>u};</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>x<sp/>|<sp/>(x<sp/>&gt;&gt;<sp/>1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Propagate<sp/>leftmost</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>x<sp/>|<sp/>(x<sp/>&gt;&gt;<sp/>2);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1-bit<sp/>to<sp/>the<sp/>right.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>x<sp/>|<sp/>(x<sp/>&gt;&gt;<sp/>4);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>x<sp/>|<sp/>(x<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>x<sp/>|<sp/>(x<sp/>&gt;&gt;16);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>x*0x06EB14F9;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Multiplier<sp/>is<sp/>7*255**3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structtable" kindref="compound">table</ref>[x<sp/>&gt;&gt;<sp/>26];</highlight></codeline>
<codeline lineno="248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Harley&apos;s<sp/>algorithm<sp/>with<sp/>multiply<sp/>expanded.</highlight></codeline>
<codeline lineno="251"><highlight class="comment">19<sp/>elementary<sp/>ops<sp/>plus<sp/>an<sp/>indexed<sp/>load.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nlz10a(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>x)</highlight></codeline>
<codeline lineno="254"><highlight class="normal">{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structtable" kindref="compound">table</ref>[64]<sp/>=</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{32,31,<sp/>u,16,<sp/>u,30,<sp/>3,<sp/>u,<sp/><sp/>15,<sp/>u,<sp/>u,<sp/>u,29,10,<sp/>2,<sp/>u,</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u,<sp/>u,12,14,21,<sp/>u,19,<sp/>u,<sp/><sp/><sp/>u,28,<sp/>u,25,<sp/>u,<sp/>9,<sp/>1,<sp/>u,</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>17,<sp/>u,<sp/>4,<sp/>u,<sp/>u,<sp/>u,11,<sp/>u,<sp/><sp/>13,22,20,<sp/>u,26,<sp/>u,<sp/>u,18,</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5,<sp/>u,<sp/>u,23,<sp/>u,27,<sp/>u,<sp/>6,<sp/><sp/><sp/>u,24,<sp/>7,<sp/>u,<sp/>8,<sp/>u,<sp/>0,<sp/>u};</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>x<sp/>|<sp/>(x<sp/>&gt;&gt;<sp/>1);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Propagate<sp/>leftmost</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>x<sp/>|<sp/>(x<sp/>&gt;&gt;<sp/>2);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1-bit<sp/>to<sp/>the<sp/>right.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>x<sp/>|<sp/>(x<sp/>&gt;&gt;<sp/>4);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>x<sp/>|<sp/>(x<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>x<sp/>|<sp/>(x<sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(x<sp/>&lt;&lt;<sp/>3)<sp/>-<sp/>x;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Multiply<sp/>by<sp/>7.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(x<sp/>&lt;&lt;<sp/>8)<sp/>-<sp/>x;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Multiply<sp/>by<sp/>255.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(x<sp/>&lt;&lt;<sp/>8)<sp/>-<sp/>x;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(x<sp/>&lt;&lt;<sp/>8)<sp/>-<sp/>x;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structtable" kindref="compound">table</ref>[x<sp/>&gt;&gt;<sp/>26];</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Julius<sp/>Goryavsky&apos;s<sp/>version<sp/>of<sp/>Harley&apos;s<sp/>algorithm.</highlight></codeline>
<codeline lineno="274"><highlight class="comment">17<sp/>elementary<sp/>ops<sp/>plus<sp/>an<sp/>indexed<sp/>load,<sp/>if<sp/>the<sp/>machine</highlight></codeline>
<codeline lineno="275"><highlight class="comment">has<sp/>&quot;and<sp/>not.&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nlz10b(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>x)</highlight></codeline>
<codeline lineno="278"><highlight class="normal">{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structtable" kindref="compound">table</ref>[64]<sp/>=</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{32,20,19,<sp/>u,<sp/>u,18,<sp/>u,<sp/>7,<sp/><sp/>10,17,<sp/>u,<sp/>u,14,<sp/>u,<sp/>6,<sp/>u,</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u,<sp/>9,<sp/>u,16,<sp/>u,<sp/>u,<sp/>1,26,<sp/><sp/><sp/>u,13,<sp/>u,<sp/>u,24,<sp/>5,<sp/>u,<sp/>u,</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u,21,<sp/>u,<sp/>8,11,<sp/>u,15,<sp/>u,<sp/><sp/><sp/>u,<sp/>u,<sp/>u,<sp/>2,27,<sp/>0,25,<sp/>u,</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>22,<sp/>u,12,<sp/>u,<sp/>u,<sp/>3,28,<sp/>u,<sp/><sp/>23,<sp/>u,<sp/>4,29,<sp/>u,<sp/>u,30,31};</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>x<sp/>|<sp/>(x<sp/>&gt;&gt;<sp/>1);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Propagate<sp/>leftmost</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>x<sp/>|<sp/>(x<sp/>&gt;&gt;<sp/>2);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1-bit<sp/>to<sp/>the<sp/>right.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>x<sp/>|<sp/>(x<sp/>&gt;&gt;<sp/>4);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>x<sp/>|<sp/>(x<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>x<sp/>&amp;<sp/>~(x<sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>x*0xFD7049FF;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Activate<sp/>this<sp/>line<sp/>or<sp/>the<sp/>following<sp/>3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>x<sp/>=<sp/>(x<sp/>&lt;&lt;<sp/>9)<sp/>-<sp/>x;<sp/><sp/><sp/><sp/>//<sp/>Multiply<sp/>by<sp/>511.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>x<sp/>=<sp/>(x<sp/>&lt;&lt;<sp/>11)<sp/>-<sp/>x;<sp/><sp/><sp/>//<sp/>Multiply<sp/>by<sp/>2047.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>x<sp/>=<sp/>(x<sp/>&lt;&lt;<sp/>14)<sp/>-<sp/>x;<sp/><sp/><sp/>//<sp/>Multiply<sp/>by<sp/>16383.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structtable" kindref="compound">table</ref>[x<sp/>&gt;&gt;<sp/>26];</highlight></codeline>
<codeline lineno="295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errors;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y)</highlight></codeline>
<codeline lineno="299"><highlight class="normal">{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>errors<sp/>=<sp/>errors<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Error<sp/>for<sp/>x<sp/>=<sp/>%08x,<sp/>got<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>x,<sp/>y);</highlight></codeline>
<codeline lineno="302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="305"><highlight class="normal">{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>ifdef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>n;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>test[]<sp/>=<sp/>{0,32,<sp/>1,31,<sp/>2,30,<sp/>3,30,<sp/>4,29,<sp/>5,29,<sp/>6,29,</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>7,29,<sp/>8,28,<sp/>9,28,<sp/>16,27,<sp/>32,26,<sp/>64,25,<sp/>128,24,<sp/>255,24,<sp/>256,23,</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>512,22,<sp/>1024,21,<sp/>2048,20,<sp/>4096,19,<sp/>8192,18,<sp/>16384,17,<sp/>32768,16,</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>65536,15,<sp/>0x20000,14,<sp/>0x40000,13,<sp/>0x80000,12,<sp/>0x100000,11,</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x200000,10,<sp/>0x400000,9,<sp/>0x800000,8,<sp/>0x1000000,7,<sp/>0x2000000,6,</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x4000000,5,<sp/>0x8000000,4,<sp/>0x0FFFFFFF,4,<sp/>0x10000000,3,</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x3000FFFF,2,<sp/>0x50003333,1,<sp/>0x7FFFFFFF,1,<sp/>0x80000000,0,</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xFFFFFFFF,0};</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Count<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(test)/4;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>std::clock_t<sp/>TimestampBeg<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>std::clock_t<sp/>TimestampEnd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>TimestampBeg<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>Count;<sp/>++k)</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nlz1(test[i])<sp/>!=<sp/>test[i+1])<sp/>error(test[i],<sp/>nlz1(test[i]));}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>TimestampEnd<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;nlz1:<sp/>%d<sp/>clocks\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(TimestampEnd<sp/>-<sp/>TimestampBeg));</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>TimestampBeg<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>Count;<sp/>++k)</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nlz1a(test[i])<sp/>!=<sp/>test[i+1])<sp/>error(test[i],<sp/>nlz1a(test[i]));}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>TimestampEnd<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;nlz1a:<sp/>%d<sp/>clocks\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(TimestampEnd<sp/>-<sp/>TimestampBeg));</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>TimestampBeg<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>Count;<sp/>++k)</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nlz2(test[i])<sp/>!=<sp/>test[i+1])<sp/>error(test[i],<sp/>nlz2(test[i]));}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>TimestampEnd<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;nlz2:<sp/>%d<sp/>clocks\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(TimestampEnd<sp/>-<sp/>TimestampBeg));</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>TimestampBeg<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>Count;<sp/>++k)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nlz2a(test[i])<sp/>!=<sp/>test[i+1])<sp/>error(test[i],<sp/>nlz2a(test[i]));}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>TimestampEnd<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;nlz2a:<sp/>%d<sp/>clocks\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(TimestampEnd<sp/>-<sp/>TimestampBeg));</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>TimestampBeg<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>Count;<sp/>++k)</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nlz3(test[i])<sp/>!=<sp/>test[i+1])<sp/>error(test[i],<sp/>nlz3(test[i]));}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>TimestampEnd<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;nlz3:<sp/>%d<sp/>clocks\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(TimestampEnd<sp/>-<sp/>TimestampBeg));</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>TimestampBeg<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>Count;<sp/>++k)</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nlz4(test[i])<sp/>!=<sp/>test[i+1])<sp/>error(test[i],<sp/>nlz4(test[i]));}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>TimestampEnd<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;nlz4:<sp/>%d<sp/>clocks\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(TimestampEnd<sp/>-<sp/>TimestampBeg));</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>TimestampBeg<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>Count;<sp/>++k)</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nlz5(test[i])<sp/>!=<sp/>test[i+1])<sp/>error(test[i],<sp/>nlz5(test[i]));}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>TimestampEnd<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;nlz5:<sp/>%d<sp/>clocks\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(TimestampEnd<sp/>-<sp/>TimestampBeg));</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>TimestampBeg<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>Count;<sp/>++k)</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nlz6(test[i])<sp/>!=<sp/>test[i+1])<sp/>error(test[i],<sp/>nlz6(test[i]));}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>TimestampEnd<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;nlz6:<sp/>%d<sp/>clocks\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(TimestampEnd<sp/>-<sp/>TimestampBeg));</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>TimestampBeg<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>Count;<sp/>++k)</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nlz7(test[i])<sp/>!=<sp/>test[i+1])<sp/>error(test[i],<sp/>nlz7(test[i]));}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>TimestampEnd<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;nlz7:<sp/>%d<sp/>clocks\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(TimestampEnd<sp/>-<sp/>TimestampBeg));</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>TimestampBeg<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>Count;<sp/>++k)</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nlz8(test[i])<sp/>!=<sp/>test[i+1])<sp/>error(test[i],<sp/>nlz8(test[i]));}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>TimestampEnd<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;nlz8:<sp/>%d<sp/>clocks\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(TimestampEnd<sp/>-<sp/>TimestampBeg));</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>TimestampBeg<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>Count;<sp/>++k)</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nlz9(test[i])<sp/>!=<sp/>test[i+1])<sp/>error(test[i],<sp/>nlz9(test[i]));}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>TimestampEnd<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;nlz9:<sp/>%d<sp/>clocks\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(TimestampEnd<sp/>-<sp/>TimestampBeg));</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>TimestampBeg<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>Count;<sp/>++k)</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nlz10(test[i])<sp/>!=<sp/>test[i+1])<sp/>error(test[i],<sp/>nlz10(test[i]));}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>TimestampEnd<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;nlz10:<sp/>%d<sp/>clocks\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(TimestampEnd<sp/>-<sp/>TimestampBeg));</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>TimestampBeg<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>Count;<sp/>++k)</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nlz10a(test[i])<sp/>!=<sp/>test[i+1])<sp/>error(test[i],<sp/>nlz10a(test[i]));}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>TimestampEnd<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;nlz10a:<sp/>%d<sp/>clocks\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(TimestampEnd<sp/>-<sp/>TimestampBeg));</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>TimestampBeg<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>Count;<sp/>++k)</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nlz10b(test[i])<sp/>!=<sp/>test[i+1])<sp/>error(test[i],<sp/>nlz10b(test[i]));}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>TimestampEnd<sp/>=<sp/>std::clock();</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;nlz10b:<sp/>%d<sp/>clocks\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(TimestampEnd<sp/>-<sp/>TimestampBeg));</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(errors<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Passed<sp/>all<sp/>%d<sp/>cases.\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(test)/8));</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="comment">//NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_integer_find_msb.cpp"/>
  </compounddef>
</doxygen>
