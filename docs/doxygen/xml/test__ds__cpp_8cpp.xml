<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="test__ds__cpp_8cpp" kind="file" language="C++">
    <compoundname>test_ds_cpp.cpp</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">assert.h</includes>
    <includes refid="stb__ds_8h" local="yes">../stb_ds.h</includes>
    <incdepgraph>
      <node id="4">
        <label>../stb_ds.h</label>
        <link refid="stb__ds_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/test_ds_cpp.cpp</label>
        <link refid="test__ds__cpp_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>assert.h</label>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
      <node id="7">
        <label>stdlib.h</label>
      </node>
      <node id="6">
        <label>string.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="test__ds__cpp_8cpp_1a42cae13b246659a61c4bf07208188c16" prot="public" static="no">
        <name>STBDS_ASSERT</name>
        <initializer>assert</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/test_ds_cpp.cpp" line="12" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/test_ds_cpp.cpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__ds__cpp_8cpp_1a5e433f795e968cb88e8037fa283993d5" prot="public" static="no">
        <name>STB_DS_IMPLEMENTATION</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/test_ds_cpp.cpp" line="17" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/test_ds_cpp.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="test__ds__cpp_8cpp_1aee294e4d28fc9af9e71c8811658d6e10" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t churn_inserts</definition>
        <argsstring></argsstring>
        <name>churn_inserts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/test_ds_cpp.cpp" line="20" column="8" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/test_ds_cpp.cpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test__ds__cpp_8cpp_1ad54191edaac9860918e2efe8f0ba6f81" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t churn_deletes</definition>
        <argsstring></argsstring>
        <name>churn_deletes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/test_ds_cpp.cpp" line="20" column="22" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/test_ds_cpp.cpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="test__ds__cpp_8cpp_1a7e21ce7a526072a1000e52315a6964d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void churn</definition>
        <argsstring>(int a, int b, int count)</argsstring>
        <name>churn</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/test_ds_cpp.cpp" line="22" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/test_ds_cpp.cpp" bodystart="22" bodyend="43"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DS_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBDS_UNIT_TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DS_STATS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBDS_STATISTICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DS_PERF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBDS_ASSERT<sp/>assert</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>STBDS_SIPHASH_2_4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_DS_IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../stb_ds.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>churn_inserts,<sp/>churn_deletes;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>churn(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count)</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key,<ref refid="classvalue" kindref="compound">value</ref>;<sp/>}<sp/>*map=NULL;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,n,k;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>a;<sp/>++i)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>hmput(map,i,i+1);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/>count;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=a;<sp/>j<sp/>&lt;<sp/>b;<sp/>++j,++i)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hmput(map,i,i+1);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hmlen(map)<sp/>==<sp/>b);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=a;<sp/>j<sp/>&lt;<sp/>b;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k=i-j-1;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>hmdel(map,k);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(k<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hmlen(map)<sp/>==<sp/>a);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>hmfree(map);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>churn_inserts<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>churn_deletes<sp/>=<sp/>(b-a)<sp/>*<sp/>n;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DS_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>stbds_unit_tests();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>churn(0,100,1);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>churn(3,7,50000);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>churn(3,15,50000);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>churn(16,<sp/>48,<sp/>25000);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>churn(10,<sp/>15,<sp/>25000);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>churn(200,500,<sp/>5000);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>churn(2000,5000,<sp/>500);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>churn(20000,50000,<sp/>50);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Ok!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DS_STATS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX(a,b)<sp/>((a)<sp/>&gt;<sp/>(b)<sp/>?<sp/>(a)<sp/>:<sp/>(b))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max_hit_probes,<sp/>max_miss_probes,<sp/>total_put_probes,<sp/>total_miss_probes,<sp/>churn_misses;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>churn_stats(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count)</highlight></codeline>
<codeline lineno="67"><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key,<ref refid="classvalue" kindref="compound">value</ref>;<sp/>}<sp/>*map=NULL;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,n,k;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>churn_misses<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>a;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>hmput(map,i,i+1);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>max_hit_probes<sp/>=<sp/>MAX(max_hit_probes,<sp/>stbds_hash_probes);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>total_put_probes<sp/>+=<sp/>stbds_hash_probes;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>stbds_hash_probes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/>count;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=a;<sp/>j<sp/>&lt;<sp/>b;<sp/>++j,++i)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hmput(map,i,i+1);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>max_hit_probes<sp/>=<sp/>MAX(max_hit_probes,<sp/>stbds_hash_probes);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>total_put_probes<sp/>+=<sp/>stbds_hash_probes;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbds_hash_probes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>(b-a)*10;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k=i+j;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(void)<sp/>hmgeti(map,k);<sp/></highlight><highlight class="comment">//<sp/>miss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>max_miss_probes<sp/>=<sp/>MAX(max_miss_probes,<sp/>stbds_hash_probes);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>total_miss_probes<sp/>+=<sp/>stbds_hash_probes;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbds_hash_probes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++churn_misses;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hmlen(map)<sp/>==<sp/>b);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=a;<sp/>j<sp/>&lt;<sp/>b;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k=i-j-1;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>hmdel(map,k);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbds_hash_probes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(k);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hmlen(map)<sp/>==<sp/>a);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>hmfree(map);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>churn_inserts<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>churn_deletes<sp/>=<sp/>(b-a)<sp/>*<sp/>n;</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reset_stats(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>stbds_array_grow=0,<sp/></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>stbds_hash_grow=0;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>stbds_hash_shrink=0;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>stbds_hash_rebuild=0;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>stbds_hash_probes=0;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>stbds_hash_alloc=0;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>stbds_rehash_probes=0;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>stbds_rehash_items=0;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>max_hit_probes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>max_miss_probes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>total_put_probes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>total_miss_probes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print_churn_probe_stats(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)</highlight></codeline>
<codeline lineno="124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Probes:<sp/>%3d<sp/>max<sp/>hit,<sp/>%3d<sp/>max<sp/>miss,<sp/>%4.2f<sp/>avg<sp/>hit,<sp/>%4.2f<sp/>avg<sp/>miss:<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>max_hit_probes,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>max_miss_probes,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>total_put_probes<sp/>/<sp/>churn_inserts,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>total_miss_probes<sp/>/<sp/>churn_misses,<sp/>str);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>reset_stats();</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arg,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)</highlight></codeline>
<codeline lineno="131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>churn_stats(0,500000,1);<sp/>print_churn_probe_stats(</highlight><highlight class="stringliteral">&quot;Inserting<sp/>500000<sp/>items&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>churn_stats(0,500000,1);<sp/>print_churn_probe_stats(</highlight><highlight class="stringliteral">&quot;Inserting<sp/>500000<sp/>items&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>churn_stats(0,500000,1);<sp/>print_churn_probe_stats(</highlight><highlight class="stringliteral">&quot;Inserting<sp/>500000<sp/>items&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>churn_stats(0,500000,1);<sp/>print_churn_probe_stats(</highlight><highlight class="stringliteral">&quot;Inserting<sp/>500000<sp/>items&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>churn_stats(49000,50000,500);<sp/>print_churn_probe_stats(</highlight><highlight class="stringliteral">&quot;Deleting/Inserting<sp/>500000<sp/>items&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>churn_stats(49000,50000,500);<sp/>print_churn_probe_stats(</highlight><highlight class="stringliteral">&quot;Deleting/Inserting<sp/>500000<sp/>items&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>churn_stats(49000,50000,500);<sp/>print_churn_probe_stats(</highlight><highlight class="stringliteral">&quot;Deleting/Inserting<sp/>500000<sp/>items&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>churn_stats(49000,50000,500);<sp/>print_churn_probe_stats(</highlight><highlight class="stringliteral">&quot;Deleting/Inserting<sp/>500000<sp/>items&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DS_PERF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WIN32_LEAN_AND_MEAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_NO_REGISTRY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">//#include<sp/>&quot;../stb.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>t0,<sp/>sum,<sp/>mn,mx,count;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>begin(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="154"><highlight class="normal">{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>t0;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>LARGE_INTEGER<sp/>m;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>QueryPerformanceCounter(&amp;m);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>t0<sp/>=<sp/>m.QuadPart;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>mx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>mn<sp/>=<sp/>~(size_t)<sp/>0;</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>measure(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="166"><highlight class="normal">{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>t1,<sp/>t;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>LARGE_INTEGER<sp/>m;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>QueryPerformanceCounter(&amp;m);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>t1<sp/>=<sp/>m.QuadPart;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>t<sp/>=<sp/>t1-t0;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t1<sp/>&lt;<sp/>t0)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;ALERT:<sp/>QueryPerformanceCounter<sp/>was<sp/>unordered!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&lt;<sp/>mn)<sp/>mn<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&gt;<sp/>mx)<sp/>mx<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>sum<sp/>+=<sp/>t;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>++count;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>t0<sp/>=<sp/>t1;</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dont_measure(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="182"><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>t1,<sp/>t;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>LARGE_INTEGER<sp/>m;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>QueryPerformanceCounter(&amp;m);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>t0<sp/>=<sp/>m.QuadPart;</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timer;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>end(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="191"><highlight class="normal">{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>LARGE_INTEGER<sp/>m;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>QueryPerformanceFrequency(&amp;m);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>&gt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>discard<sp/>the<sp/>highest<sp/>and<sp/>lowest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>sum<sp/>-=<sp/>mn;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>sum<sp/>-=<sp/>mx;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>-=<sp/>2;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>timer<sp/>=<sp/>(double)<sp/>(sum)<sp/>/<sp/>count<sp/>/<sp/>m.QuadPart<sp/>*<sp/>1000;</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>build(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>)</highlight></codeline>
<codeline lineno="205"><highlight class="normal">{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key,<ref refid="classvalue" kindref="compound">value</ref>;<sp/>}<sp/>*map=NULL;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,n,k;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>a;<sp/>++i)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>hmput(map,i*<ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>,i+1);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>measure();</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>churn_inserts<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>hmfree(map);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>dont_measure();</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB__INCLUDE_STB_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>build_stb(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>)</highlight></codeline>
<codeline lineno="218"><highlight class="normal">{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>stb_idict<sp/>*d<sp/>=<sp/>stb_idict_new_size(8);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key,<ref refid="classvalue" kindref="compound">value</ref>;<sp/>}<sp/>*map=NULL;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,n,k;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>a;<sp/>++i)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>stb_idict_add(d,<sp/>i*<ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>,<sp/>i+1);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>measure();</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>churn_inserts<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>stb_idict_destroy(d);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>dont_measure();</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>churn_skip(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count)</highlight></codeline>
<codeline lineno="232"><highlight class="normal">{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key,<ref refid="classvalue" kindref="compound">value</ref>;<sp/>}<sp/>*map=NULL;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,n,k;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>a;<sp/>++i)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>hmput(map,i,i+1);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>dont_measure();</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/>count;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=a;<sp/>j<sp/>&lt;<sp/>b;<sp/>++j,++i)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hmput(map,i,i+1);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hmlen(map)<sp/>==<sp/>b);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=a;<sp/>j<sp/>&lt;<sp/>b;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k=i-j-1;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>hmdel(map,k);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(k<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hmlen(map)<sp/>==<sp/>a);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>measure();</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>churn_inserts<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>churn_deletes<sp/>=<sp/>(b-a)<sp/>*<sp/>n;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>hmfree(map);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>dont_measure();</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n[8];<sp/>}<sp/>str32;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>churn32(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>include_startup)</highlight></codeline>
<codeline lineno="259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{<sp/>str32<sp/>key;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>;<sp/>}<sp/>*map=NULL;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,n;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>str32<sp/>key<sp/>=<sp/>{<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>a;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>key.n[0]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>hmput(map,key,i+1);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!include_startup)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>dont_measure();</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/>count;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=a;<sp/>j<sp/>&lt;<sp/>b;<sp/>++j,++i)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>key.n[0]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hmput(map,key,i+1);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hmlen(map)<sp/>==<sp/>b);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=a;<sp/>j<sp/>&lt;<sp/>b;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>key.n[0]<sp/>=<sp/>i-j-1;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hmdel(map,key);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hmlen(map)<sp/>==<sp/>a);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>measure();</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>hmfree(map);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>churn_inserts<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>churn_deletes<sp/>=<sp/>(b-a)<sp/>*<sp/>n;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>dont_measure();</highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n[32];<sp/>}<sp/>str256;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>churn256(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>include_startup)</highlight></codeline>
<codeline lineno="290"><highlight class="normal">{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{<sp/>str256<sp/>key;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>;<sp/>}<sp/>*map=NULL;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,n;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>str256<sp/>key<sp/>=<sp/>{<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>a;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>key.n[0]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>hmput(map,key,i+1);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!include_startup)</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>dont_measure();</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/>count;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=a;<sp/>j<sp/>&lt;<sp/>b;<sp/>++j,++i)<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>key.n[0]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hmput(map,key,i+1);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hmlen(map)<sp/>==<sp/>b);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=a;<sp/>j<sp/>&lt;<sp/>b;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>key.n[0]<sp/>=<sp/>i-j-1;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hmdel(map,key);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hmlen(map)<sp/>==<sp/>a);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>measure();</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>hmfree(map);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>churn_inserts<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>churn_deletes<sp/>=<sp/>(b-a)<sp/>*<sp/>n;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>dont_measure();</highlight></codeline>
<codeline lineno="317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>churn8(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>include_startup)</highlight></codeline>
<codeline lineno="320"><highlight class="normal">{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>key,<ref refid="classvalue" kindref="compound">value</ref>;<sp/>}<sp/>*map=NULL;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,n,k;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>a;<sp/>++i)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>hmput(map,i,i+1);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!include_startup)</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>dont_measure();</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/>count;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=a;<sp/>j<sp/>&lt;<sp/>b;<sp/>++j,++i)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hmput(map,i,i+1);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hmlen(map)<sp/>==<sp/>b);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=a;<sp/>j<sp/>&lt;<sp/>b;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k=i-j-1;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>hmdel(map,k);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(k<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hmlen(map)<sp/>==<sp/>a);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>measure();</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>hmfree(map);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>churn_inserts<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>churn_deletes<sp/>=<sp/>(b-a)<sp/>*<sp/>n;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>dont_measure();</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arg,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)</highlight></codeline>
<codeline lineno="348"><highlight class="normal">{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,s,w;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>worst<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/>2000;<sp/>++n)<sp/>{<sp/>build_stb(2000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/>2,000<sp/>inserts<sp/>creating<sp/>2K<sp/>table\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/>500;<sp/>++n)<sp/>{<sp/>build_stb(20000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/><sp/><sp/><sp/>20,000<sp/>inserts<sp/>creating<sp/>20K<sp/>table\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/>100;<sp/>++n)<sp/>{<sp/>build_stb(200000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/><sp/><sp/>200,000<sp/>inserts<sp/>creating<sp/>200K<sp/>table\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/>10;<sp/>++n)<sp/>{<sp/>build_stb(2000000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/>2,000,000<sp/>inserts<sp/>creating<sp/>2M<sp/>table\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/><sp/>5;<sp/>++n)<sp/>{<sp/>build_stb(20000000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>20,000,000<sp/>inserts<sp/>creating<sp/>20M<sp/>table\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/>2000;<sp/>++n)<sp/>{<sp/>churn8(2000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/>2,000<sp/>inserts<sp/>creating<sp/>2K<sp/>table<sp/>w/<sp/>8-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/>500;<sp/>++n)<sp/>{<sp/>churn8(20000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/><sp/><sp/><sp/>20,000<sp/>inserts<sp/>creating<sp/>20K<sp/>table<sp/>w/<sp/>8-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/>100;<sp/>++n)<sp/>{<sp/>churn8(200000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/><sp/><sp/>200,000<sp/>inserts<sp/>creating<sp/>200K<sp/>table<sp/>w/<sp/>8-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/>10;<sp/>++n)<sp/>{<sp/>churn8(2000000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/>2,000,000<sp/>inserts<sp/>creating<sp/>2M<sp/>table<sp/>w/<sp/>8-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/><sp/>5;<sp/>++n)<sp/>{<sp/>churn8(20000000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>20,000,000<sp/>inserts<sp/>creating<sp/>20M<sp/>table<sp/>w/<sp/>8-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/>2000;<sp/>++n)<sp/>{<sp/>churn32(2000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/>2,000<sp/>inserts<sp/>creating<sp/>2K<sp/>table<sp/>w/<sp/>32-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/>500;<sp/>++n)<sp/>{<sp/>churn32(20000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/><sp/><sp/><sp/>20,000<sp/>inserts<sp/>creating<sp/>20K<sp/>table<sp/>w/<sp/>32-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/>100;<sp/>++n)<sp/>{<sp/>churn32(200000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/><sp/><sp/>200,000<sp/>inserts<sp/>creating<sp/>200K<sp/>table<sp/>w/<sp/>32-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/>10;<sp/>++n)<sp/>{<sp/>churn32(2000000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/>2,000,000<sp/>inserts<sp/>creating<sp/>2M<sp/>table<sp/>w/<sp/>32-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/><sp/>5;<sp/>++n)<sp/>{<sp/>churn32(20000000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>20,000,000<sp/>inserts<sp/>creating<sp/>20M<sp/>table<sp/>w/<sp/>32-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/>2000;<sp/>++n)<sp/>{<sp/>churn256(2000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/>2,000<sp/>inserts<sp/>creating<sp/>2K<sp/>table<sp/>w/<sp/>256-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/>500;<sp/>++n)<sp/>{<sp/>churn256(20000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/><sp/><sp/><sp/>20,000<sp/>inserts<sp/>creating<sp/>20K<sp/>table<sp/>w/<sp/>256-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/>100;<sp/>++n)<sp/>{<sp/>churn256(200000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/><sp/><sp/>200,000<sp/>inserts<sp/>creating<sp/>200K<sp/>table<sp/>w/<sp/>256-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/>10;<sp/>++n)<sp/>{<sp/>churn256(2000000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/>2,000,000<sp/>inserts<sp/>creating<sp/>2M<sp/>table<sp/>w/<sp/>256-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/><sp/>5;<sp/>++n)<sp/>{<sp/>churn256(20000000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>20,000,000<sp/>inserts<sp/>creating<sp/>20M<sp/>table<sp/>w/<sp/>256-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/>2000;<sp/>++n)<sp/>{<sp/>build(2000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/>2,000<sp/>inserts<sp/>creating<sp/>2K<sp/>table<sp/>w/<sp/>4-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/>500;<sp/>++n)<sp/>{<sp/>build(20000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/><sp/><sp/><sp/>20,000<sp/>inserts<sp/>creating<sp/>20K<sp/>table<sp/>w/<sp/>4-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/>100;<sp/>++n)<sp/>{<sp/>build(200000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/><sp/><sp/>200,000<sp/>inserts<sp/>creating<sp/>200K<sp/>table<sp/>w/<sp/>4-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/>10;<sp/>++n)<sp/>{<sp/>build(2000000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/>2,000,000<sp/>inserts<sp/>creating<sp/>2M<sp/>table<sp/>w/<sp/>4-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/><sp/>5;<sp/>++n)<sp/>{<sp/>build(20000000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>20,000,000<sp/>inserts<sp/>creating<sp/>20M<sp/>table<sp/>w/<sp/>4-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/>60;<sp/>++n)<sp/>{<sp/>churn_skip(2000,2100,5000);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>500,000<sp/>inserts<sp/>&amp;<sp/>deletes<sp/>in<sp/>2K<sp/>table\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/>30;<sp/>++n)<sp/>{<sp/>churn_skip(20000,21000,500);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>500,000<sp/>inserts<sp/>&amp;<sp/>deletes<sp/>in<sp/>20K<sp/>table\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/>15;<sp/>++n)<sp/>{<sp/>churn_skip(200000,201000,500);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>500,000<sp/>inserts<sp/>&amp;<sp/>deletes<sp/>in<sp/>200K<sp/>table\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/><sp/>8;<sp/>++n)<sp/>{<sp/>churn_skip(2000000,2001000,500);<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>500,000<sp/>inserts<sp/>&amp;<sp/>deletes<sp/>in<sp/>2M<sp/>table\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/><sp/>5;<sp/>++n)<sp/>{<sp/>churn_skip(20000000,20001000,500);<sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>500,000<sp/>inserts<sp/>&amp;<sp/>deletes<sp/>in<sp/>20M<sp/>table\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/><sp/>1;<sp/>++n)<sp/>{<sp/>churn_skip(200000000u,200001000u,500);<sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>500,000<sp/>inserts<sp/>&amp;<sp/>deletes<sp/>in<sp/>200M<sp/>table\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>even<sp/>though<sp/>the<sp/>above<sp/>measures<sp/>a<sp/>roughly<sp/>fixed<sp/>amount<sp/>of<sp/>work,<sp/>we<sp/>still<sp/>have<sp/>to<sp/>build<sp/>the<sp/>table<sp/>n<sp/>times,<sp/>hence<sp/>the<sp/>fewer<sp/>measurements<sp/>each<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/>60;<sp/>++n)<sp/>{<sp/>churn_skip(1000,3000,250);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/><sp/><sp/>500,000<sp/>inserts<sp/>&amp;<sp/>deletes<sp/>in<sp/>2K<sp/>table\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/>15;<sp/>++n)<sp/>{<sp/>churn_skip(10000,30000,25);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/><sp/><sp/>500,000<sp/>inserts<sp/>&amp;<sp/>deletes<sp/>in<sp/>20K<sp/>table\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/><sp/>7;<sp/>++n)<sp/>{<sp/>churn_skip(100000,300000,10);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/>2,000,000<sp/>inserts<sp/>&amp;<sp/>deletes<sp/>in<sp/>200K<sp/>table\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/><sp/>2;<sp/>++n)<sp/>{<sp/>churn_skip(1000000,3000000,10);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>20,000,000<sp/>inserts<sp/>&amp;<sp/>deletes<sp/>in<sp/>2M<sp/>table\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>search<sp/>for<sp/>bad<sp/>intervals..<sp/>in<sp/>practice<sp/>this<sp/>just<sp/>seems<sp/>to<sp/>measure<sp/>execution<sp/>variance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(s<sp/>=<sp/>2;<sp/>s<sp/>&lt;<sp/>64;<sp/>++s)<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/>50;<sp/>++n)<sp/>{<sp/>build(200000,0,0,s);<sp/>}<sp/>end();</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timer<sp/>&gt;<sp/>worst)<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>worst<sp/>=<sp/>timer;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>s<sp/>&lt;=<sp/>1024;<sp/>s<sp/>*=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/>50;<sp/>++n)<sp/>{<sp/>build(200000,0,0,s);<sp/>}<sp/>end();</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timer<sp/>&gt;<sp/>worst)<sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>worst<sp/>=<sp/>timer;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms(%d)<sp/><sp/><sp/>:<sp/>Worst<sp/>time<sp/>from<sp/>inserting<sp/>200,000<sp/>items<sp/>with<sp/>spacing<sp/>%d.\n&quot;</highlight><highlight class="normal">,<sp/>worst,<sp/>w,<sp/>w);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/test_ds_cpp.cpp"/>
  </compounddef>
</doxygen>
