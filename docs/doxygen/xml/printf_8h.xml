<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="printf_8h" kind="file" language="C++">
    <compoundname>printf.h</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">limits</includes>
    <includes local="no">ostream</includes>
    <includes refid="format_8h" local="yes">format.h</includes>
    <incdepgraph>
      <node id="12">
        <label>core.h</label>
        <link refid="core_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>format.h</label>
        <link refid="format_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h</label>
        <link refid="printf_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>algorithm</label>
      </node>
      <node id="6">
        <label>cmath</label>
      </node>
      <node id="13">
        <label>cstddef</label>
      </node>
      <node id="7">
        <label>cstdint</label>
      </node>
      <node id="14">
        <label>cstdio</label>
      </node>
      <node id="15">
        <label>cstring</label>
      </node>
      <node id="16">
        <label>iterator</label>
      </node>
      <node id="3">
        <label>limits</label>
      </node>
      <node id="8">
        <label>memory</label>
      </node>
      <node id="4">
        <label>ostream</label>
      </node>
      <node id="9">
        <label>stdexcept</label>
      </node>
      <node id="17">
        <label>string</label>
      </node>
      <node id="10">
        <label>system_error</label>
      </node>
      <node id="18">
        <label>type_traits</label>
      </node>
      <node id="11">
        <label>utility</label>
      </node>
    </incdepgraph>
    <innerclass refid="structprintf__formatter" prot="public">printf_formatter</innerclass>
    <innerclass refid="classbasic__printf__parse__context" prot="public">basic_printf_parse_context</innerclass>
    <innerclass refid="classbasic__printf__context" prot="public">basic_printf_context</innerclass>
    <innerclass refid="structint__checker" prot="public">int_checker</innerclass>
    <innerclass refid="structint__checker_3_01true_01_4" prot="public">int_checker&lt; true &gt;</innerclass>
    <innerclass refid="classprintf__precision__handler" prot="public">printf_precision_handler</innerclass>
    <innerclass refid="classis__zero__int" prot="public">is_zero_int</innerclass>
    <innerclass refid="structmake__unsigned__or__bool" prot="public">make_unsigned_or_bool</innerclass>
    <innerclass refid="structmake__unsigned__or__bool_3_01bool_01_4" prot="public">make_unsigned_or_bool&lt; bool &gt;</innerclass>
    <innerclass refid="classarg__converter" prot="public">arg_converter</innerclass>
    <innerclass refid="classchar__converter" prot="public">char_converter</innerclass>
    <innerclass refid="structget__cstring" prot="public">get_cstring</innerclass>
    <innerclass refid="classprintf__width__handler" prot="public">printf_width_handler</innerclass>
    <innerclass refid="classprintf__arg__formatter" prot="public">printf_arg_formatter</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="printf_8h_1a7721cb26804e73c9c73b908277b42c8c" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__printf__context" kindref="compound">basic_printf_context</ref>&lt; detail::buffer_appender&lt; Char &gt;, Char &gt;</type>
        <definition>using basic_printf_context_t =  basic_printf_context&lt;detail::buffer_appender&lt;Char&gt;, Char&gt;</definition>
        <argsstring></argsstring>
        <name>basic_printf_context_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" line="525" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" bodystart="526" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="printf_8h_1ad064b33277ae21e91f72e6666af17daa" prot="public" static="no">
        <type><ref refid="classbasic__printf__context" kindref="compound">basic_printf_context_t</ref>&lt; char &gt;</type>
        <definition>using printf_context =  basic_printf_context_t&lt;char&gt;</definition>
        <argsstring></argsstring>
        <name>printf_context</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" line="528" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" bodystart="528" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="printf_8h_1a86435ef6c23e5bad804886c34ac81a3a" prot="public" static="no">
        <type><ref refid="classbasic__printf__context" kindref="compound">basic_printf_context_t</ref>&lt; wchar_t &gt;</type>
        <definition>using wprintf_context =  basic_printf_context_t&lt;wchar_t&gt;</definition>
        <argsstring></argsstring>
        <name>wprintf_context</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" line="529" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" bodystart="529" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="printf_8h_1a6e093b81d518db186bd7a4df46693d36" prot="public" static="no">
        <type><ref refid="classbasic__format__args" kindref="compound">basic_format_args</ref>&lt; <ref refid="classbasic__printf__context" kindref="compound">printf_context</ref> &gt;</type>
        <definition>using printf_args =  basic_format_args&lt;printf_context&gt;</definition>
        <argsstring></argsstring>
        <name>printf_args</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" line="531" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" bodystart="531" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="printf_8h_1a2f2c17979fd4518c4bf1b770ba9bb566" prot="public" static="no">
        <type><ref refid="classbasic__format__args" kindref="compound">basic_format_args</ref>&lt; <ref refid="classbasic__printf__context" kindref="compound">wprintf_context</ref> &gt;</type>
        <definition>using wprintf_args =  basic_format_args&lt;wprintf_context&gt;</definition>
        <argsstring></argsstring>
        <name>wprintf_args</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" line="532" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" bodystart="532" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="printf_8h_1a1092422aa9ff50b4eaa2068e31ccff0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Context</type>
          </param>
          <param>
            <type>typename Char</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void convert_arg</definition>
        <argsstring>(basic_format_arg&lt; Context &gt; &amp;arg, Char type)</argsstring>
        <name>convert_arg</name>
        <param>
          <type><ref refid="classbasic__format__arg" kindref="compound">basic_format_arg</ref>&lt; Context &gt; &amp;</type>
          <declname>arg</declname>
        </param>
        <param>
          <type>Char</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" line="165" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" bodystart="165" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="printf_8h_1ad1d3cd8b7361fc5358f3aec48e2113a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void parse_flags</definition>
        <argsstring>(basic_format_specs&lt; Char &gt; &amp;specs, const Char *&amp;it, const Char *end)</argsstring>
        <name>parse_flags</name>
        <param>
          <type><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs</ref>&lt; Char &gt; &amp;</type>
          <declname>specs</declname>
        </param>
        <param>
          <type>const Char *&amp;</type>
          <declname>it</declname>
        </param>
        <param>
          <type>const Char *</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" line="304" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" bodystart="304" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="printf_8h_1aed55e442a2239d9b97bea3f0195d33b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
          <param>
            <type>typename GetArg</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int parse_header</definition>
        <argsstring>(const Char *&amp;it, const Char *end, basic_format_specs&lt; Char &gt; &amp;specs, GetArg get_arg)</argsstring>
        <name>parse_header</name>
        <param>
          <type>const Char *&amp;</type>
          <declname>it</declname>
        </param>
        <param>
          <type>const Char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs</ref>&lt; Char &gt; &amp;</type>
          <declname>specs</declname>
        </param>
        <param>
          <type>GetArg</type>
          <declname>get_arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" line="332" column="5" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" bodystart="332" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="printf_8h_1a755ec613824f57d29068751f166ad91b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
          <param>
            <type>typename Context</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vprintf</definition>
        <argsstring>(buffer&lt; Char &gt; &amp;buf, basic_string_view&lt; Char &gt; format, basic_format_args&lt; Context &gt; args)</argsstring>
        <name>vprintf</name>
        <param>
          <type><ref refid="classbuffer" kindref="compound">buffer</ref>&lt; Char &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="classbasic__string__view" kindref="compound">basic_string_view</ref>&lt; Char &gt;</type>
          <declname>format</declname>
        </param>
        <param>
          <type><ref refid="classbasic__format__args" kindref="compound">basic_format_args</ref>&lt; Context &gt;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" line="370" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" bodystart="370" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="printf_8h_1aece57ac974e070300788ffc59bb5f779" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto make_printf_args</definition>
        <argsstring>(const T &amp;... args) -&gt; format_arg_store&lt; printf_context, T... &gt;</argsstring>
        <name>make_printf_args</name>
        <param>
          <type>const T &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Constructs an <computeroutput>~fmt<ref refid="classformat__arg__store" kindref="compound">format_arg_store</ref></computeroutput> object that contains references to arguments and can be implicitly converted to <computeroutput>~fmt::printf_args</computeroutput>. \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" line="541" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" bodystart="541" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="printf_8h_1a579bc9842cdcddbf52f769920d5f6fe2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto make_wprintf_args</definition>
        <argsstring>(const T &amp;... args) -&gt; format_arg_store&lt; wprintf_context, T... &gt;</argsstring>
        <name>make_wprintf_args</name>
        <param>
          <type>const T &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Constructs an <computeroutput>~fmt<ref refid="classformat__arg__store" kindref="compound">format_arg_store</ref></computeroutput> object that contains references to arguments and can be implicitly converted to <computeroutput>~fmt::wprintf_args</computeroutput>. \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" line="553" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" bodystart="553" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="printf_8h_1a3c97e1bb3568e2981b380cfed424c9b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename Char</type>
            <defval>char_t&lt;S&gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto vsprintf</definition>
        <argsstring>(const S &amp;fmt, basic_format_args&lt; basic_printf_context_t&lt; type_identity_t&lt; Char &gt; &gt; &gt; args) -&gt; std::basic_string&lt; Char &gt;</argsstring>
        <name>vsprintf</name>
        <param>
          <type>const S &amp;</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type><ref refid="classbasic__format__args" kindref="compound">basic_format_args</ref>&lt; <ref refid="classbasic__printf__context" kindref="compound">basic_printf_context_t</ref>&lt; type_identity_t&lt; Char &gt; &gt; &gt;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" line="559" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" bodystart="559" bodyend="566"/>
      </memberdef>
      <memberdef kind="function" id="printf_8h_1aa7d2e7e454d3fe606a71504a119dc894" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>typename Char</type>
            <defval>enable_if_t&lt;detail::is_string&lt;S&gt;::<ref refid="classvalue" kindref="compound">value</ref>, char_t&lt;S&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto sprintf</definition>
        <argsstring>(const S &amp;fmt, const T &amp;... args) -&gt; std::basic_string&lt; Char &gt;</argsstring>
        <name>sprintf</name>
        <param>
          <type>const S &amp;</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>const T &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Formats arguments and returns the result as a string.</para>
<para>Example**::</para>
<para>std::string message = fmt::sprintf(&quot;The answer is %d&quot;, 42); \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" line="579" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" bodystart="579" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="printf_8h_1a170da794170b2d9da6b6a50589e71737" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename Char</type>
            <defval>char_t&lt;S&gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto vfprintf</definition>
        <argsstring>(std::FILE *f, const S &amp;fmt, basic_format_args&lt; basic_printf_context_t&lt; type_identity_t&lt; Char &gt; &gt; &gt; args) -&gt; int</argsstring>
        <name>vfprintf</name>
        <param>
          <type>std::FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const S &amp;</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type><ref refid="classbasic__format__args" kindref="compound">basic_format_args</ref>&lt; <ref refid="classbasic__printf__context" kindref="compound">basic_printf_context_t</ref>&lt; type_identity_t&lt; Char &gt; &gt; &gt;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" line="585" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" bodystart="585" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="printf_8h_1a9f315126362cae9675de1642105e631e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>typename Char</type>
            <defval>char_t&lt;S&gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto fprintf</definition>
        <argsstring>(std::FILE *f, const S &amp;fmt, const T &amp;... args) -&gt; int</argsstring>
        <name>fprintf</name>
        <param>
          <type>std::FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type>const S &amp;</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>const T &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Prints formatted data to the file <emphasis>f</emphasis>.</para>
<para>Example**::</para>
<para>fmt::fprintf(stderr, &quot;Don&apos;t %s!&quot;, &quot;panic&quot;); \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" line="607" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" bodystart="607" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="printf_8h_1a7da113acabe92c200be1b833aa49d3a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename Char</type>
            <defval>char_t&lt;S&gt;</defval>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto vprintf</definition>
        <argsstring>(const S &amp;fmt, basic_format_args&lt; basic_printf_context_t&lt; type_identity_t&lt; Char &gt; &gt; &gt; args) -&gt; int</argsstring>
        <name>vprintf</name>
        <param>
          <type>const S &amp;</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type><ref refid="classbasic__format__args" kindref="compound">basic_format_args</ref>&lt; <ref refid="classbasic__printf__context" kindref="compound">basic_printf_context_t</ref>&lt; type_identity_t&lt; Char &gt; &gt; &gt;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" line="614" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" bodystart="614" bodyend="619"/>
      </memberdef>
      <memberdef kind="function" id="printf_8h_1aa3739712ffc6e717626ef803d2782ad5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>FMT_ENABLE_IF(detail::is_string&lt; S &gt;::<ref refid="classvalue" kindref="compound">value</ref>)</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto printf</definition>
        <argsstring>(const S &amp;fmt, const T &amp;... args) -&gt; int</argsstring>
        <name>printf</name>
        <param>
          <type>const S &amp;</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>const T &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Prints formatted data to <computeroutput>stdout</computeroutput>.</para>
<para>Example**::</para>
<para>fmt::printf(&quot;Elapsed time: %.2f seconds&quot;, 1.23); \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" line="631" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" bodystart="631" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="printf_8h_1a8cdd2fe4dc617e57c653a6da8ff65427" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename Char</type>
            <defval>char_t&lt;S&gt;</defval>
          </param>
        </templateparamlist>
        <type>FMT_DEPRECATED auto</type>
        <definition>FMT_DEPRECATED auto vfprintf</definition>
        <argsstring>(std::basic_ostream&lt; Char &gt; &amp;os, const S &amp;fmt, basic_format_args&lt; basic_printf_context_t&lt; type_identity_t&lt; Char &gt; &gt; &gt; args) -&gt; int</argsstring>
        <name>vfprintf</name>
        <param>
          <type>std::basic_ostream&lt; Char &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const S &amp;</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type><ref refid="classbasic__format__args" kindref="compound">basic_format_args</ref>&lt; <ref refid="classbasic__printf__context" kindref="compound">basic_printf_context_t</ref>&lt; type_identity_t&lt; Char &gt; &gt; &gt;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" line="638" column="21" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" bodystart="638" bodyend="646"/>
      </memberdef>
      <memberdef kind="function" id="printf_8h_1a6df97fbc0b4f4d6103d1b2c8eddf94e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>typename Char</type>
            <defval>char_t&lt;S&gt;</defval>
          </param>
        </templateparamlist>
        <type>FMT_DEPRECATED auto</type>
        <definition>FMT_DEPRECATED auto fprintf</definition>
        <argsstring>(std::basic_ostream&lt; Char &gt; &amp;os, const S &amp;fmt, const T &amp;... args) -&gt; int</argsstring>
        <name>fprintf</name>
        <param>
          <type>std::basic_ostream&lt; Char &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const S &amp;</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>const T &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" line="648" column="21" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h" bodystart="648" bodyend="652"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Formatting<sp/>library<sp/>for<sp/>C++<sp/>-<sp/>legacy<sp/>printf<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2012<sp/>-<sp/>2016,<sp/>Victor<sp/>Zverovich</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>the<sp/>license<sp/>information<sp/>refer<sp/>to<sp/>format.h.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_PRINTF_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_PRINTF_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::numeric_limits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;format.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal">FMT_BEGIN_NAMESPACE</highlight></codeline>
<codeline lineno="18"><highlight class="normal">FMT_MODULE_EXPORT_BEGIN</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="structprintf__formatter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structprintf__formatter" kindref="compound">printf_formatter</ref><sp/>{<sp/><ref refid="structprintf__formatter" kindref="compound">printf_formatter</ref>()<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;<sp/>};</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="23" refid="classbasic__printf__parse__context" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbasic__printf__parse__context" kindref="compound">basic_printf_parse_context</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__parse__context" kindref="compound">basic_format_parse_context</ref>&lt;Char&gt;<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__parse__context" kindref="compound">basic_format_parse_context&lt;Char&gt;::basic_format_parse_context</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal">};</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="classbasic__printf__context" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbasic__printf__context" kindref="compound">basic_printf_context</ref><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>OutputIt<sp/>out_;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><ref refid="classbasic__format__args" kindref="compound">basic_format_args&lt;basic_printf_context&gt;</ref><sp/>args_;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>char_type<sp/>=<sp/>Char;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__arg" kindref="compound">format_arg</ref><sp/>=<sp/><ref refid="classbasic__format__arg" kindref="compound">basic_format_arg&lt;basic_printf_context&gt;</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classbasic__printf__parse__context" kindref="compound">parse_context_type</ref><sp/>=<sp/><ref refid="classbasic__printf__parse__context" kindref="compound">basic_printf_parse_context&lt;Char&gt;</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structprintf__formatter" kindref="compound">formatter_type</ref><sp/>=<sp/><ref refid="structprintf__formatter" kindref="compound">printf_formatter&lt;T&gt;</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="classbasic__printf__context_1adfdcf4066bb737766d1d1905f7b3e320" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classbasic__printf__context_1adfdcf4066bb737766d1d1905f7b3e320" kindref="member">basic_printf_context</ref>(OutputIt<sp/>out,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbasic__format__args" kindref="compound">basic_format_args&lt;basic_printf_context&gt;</ref><sp/>args)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>out_(out),<sp/>args_(args)<sp/>{}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>OutputIt<sp/>out()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out_;<sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>advance_to(OutputIt<sp/>it)<sp/>{<sp/>out_<sp/>=<sp/>it;<sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>detail::locale_ref<sp/>locale()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};<sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>format_arg<sp/>arg(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>args_.<ref refid="classbasic__format__args_1a3339d3a4e4daaf7bb0de1a8084e7f086" kindref="member">get</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_error(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::error_handler().on_error(message);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal">};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal">FMT_BEGIN_DETAIL_NAMESPACE</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Checks<sp/>if<sp/>a<sp/>value<sp/>fits<sp/>in<sp/>int<sp/>-<sp/>used<sp/>to<sp/>avoid<sp/>warnings<sp/>about<sp/>comparing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>signed<sp/>and<sp/>unsigned<sp/>integers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="structint__checker" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsSigned&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structint__checker" kindref="compound">int_checker</ref><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fits_in_int(T<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">max</ref><sp/>=<sp/>max_value&lt;int&gt;();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>&lt;=<sp/><ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">max</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fits_in_int(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal">};</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="structint__checker_3_01true_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structint__checker" kindref="compound">int_checker</ref>&lt;true&gt;<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fits_in_int(T<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>&gt;=<sp/>(<ref refid="group__core__func__common_1ga2c2bde1cec025b7ddff83c74a1113719" kindref="member">std::numeric_limits&lt;int&gt;::min</ref>)()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classvalue" kindref="compound">value &lt;= max_value&lt;int&gt;</ref>();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fits_in_int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal">};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="classprintf__precision__handler" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classprintf__precision__handler" kindref="compound">printf_precision_handler</ref><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>FMT_ENABLE_IF(std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral&lt;T&gt;::value)&gt;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operator()(T<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="structint__checker" kindref="compound">int_checker</ref>&lt;std::numeric_limits&lt;T&gt;::is_signed&gt;::fits_in_int(<ref refid="classvalue" kindref="compound">value</ref>))</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FMT_THROW(<ref refid="classformat__error" kindref="compound">format_error</ref>(</highlight><highlight class="stringliteral">&quot;number<sp/>is<sp/>too<sp/>big&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">std::max</ref>)(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classvalue" kindref="compound">value</ref>),<sp/>0);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>FMT_ENABLE_IF(!std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral&lt;T&gt;::value)&gt;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>operator()(T)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_THROW(<ref refid="classformat__error" kindref="compound">format_error</ref>(</highlight><highlight class="stringliteral">&quot;precision<sp/>is<sp/>not<sp/>integer&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal">};</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>argument<sp/>visitor<sp/>that<sp/>returns<sp/>true<sp/>iff<sp/>arg<sp/>is<sp/>a<sp/>zero<sp/>integer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="classis__zero__int" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classis__zero__int" kindref="compound">is_zero_int</ref><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>FMT_ENABLE_IF(std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral&lt;T&gt;::value)&gt;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(T<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>FMT_ENABLE_IF(!std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral&lt;T&gt;::value)&gt;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(T)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal">};</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="structmake__unsigned__or__bool" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmake__unsigned__or__bool" kindref="compound">make_unsigned_or_bool</ref><sp/>:<sp/>std::make_unsigned&lt;T&gt;<sp/>{};</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="structmake__unsigned__or__bool_3_01bool_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmake__unsigned__or__bool" kindref="compound">make_unsigned_or_bool</ref>&lt;bool&gt;<sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>bool;<sp/>};</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="classarg__converter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarg__converter" kindref="compound">arg_converter</ref><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>char_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context::char_type;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><ref refid="classbasic__format__arg" kindref="compound">basic_format_arg&lt;Context&gt;</ref>&amp;<sp/>arg_;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>char_type<sp/>type_;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><ref refid="classarg__converter" kindref="compound">arg_converter</ref>(<ref refid="classbasic__format__arg" kindref="compound">basic_format_arg&lt;Context&gt;</ref>&amp;<sp/>arg,<sp/>char_type<sp/>type)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>arg_(arg),<sp/>type_(type)<sp/>{}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">)<sp/>operator()&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&gt;(<ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/>FMT_ENABLE_IF(std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral&lt;U&gt;::value)&gt;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(U<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_signed<sp/>=<sp/>type_<sp/>==<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal"><sp/>||<sp/>type_<sp/>==<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>target_type<sp/>=<sp/>conditional_t&lt;std::is_same&lt;T,<sp/>void&gt;::value,<sp/>U,<sp/>T&gt;;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(const_check(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(target_type)<sp/>&lt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extra<sp/>casts<sp/>are<sp/>used<sp/>to<sp/>silence<sp/>warnings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_signed)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg_<sp/>=<sp/>detail::make_arg&lt;Context&gt;(</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">target_type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classvalue" kindref="compound">value</ref>)));</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>unsigned_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structmake__unsigned__or__bool" kindref="compound">make_unsigned_or_bool&lt;target_type&gt;::type</ref>;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg_<sp/>=<sp/>detail::make_arg&lt;Context&gt;(</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">unsigned_type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classvalue" kindref="compound">value</ref>)));</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_signed)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>glibc&apos;s<sp/>printf<sp/>doesn&apos;t<sp/>sign<sp/>extend<sp/>arguments<sp/>of<sp/>smaller<sp/>types:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>std::printf(&quot;%lld&quot;,<sp/>-42);<sp/><sp/>//<sp/>prints<sp/>&quot;4294967254&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>we<sp/>don&apos;t<sp/>have<sp/>to<sp/>do<sp/>the<sp/>same<sp/>because<sp/>it&apos;s<sp/>a<sp/>UB.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg_<sp/>=<sp/>detail::make_arg&lt;Context&gt;(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classvalue" kindref="compound">value</ref>));</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg_<sp/>=<sp/>detail::make_arg&lt;Context&gt;(</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">typename<sp/><ref refid="structmake__unsigned__or__bool" kindref="compound">make_unsigned_or_bool&lt;U&gt;::type</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classvalue" kindref="compound">value</ref>));</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,<sp/>FMT_ENABLE_IF(!std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral&lt;U&gt;::value)&gt;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(U)<sp/>{}<sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>conversion<sp/>needed<sp/>for<sp/>non-integral<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal">};</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>an<sp/>integer<sp/>argument<sp/>to<sp/>T<sp/>for<sp/>printf,<sp/>if<sp/>T<sp/>is<sp/>an<sp/>integral<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>T<sp/>is<sp/>void,<sp/>the<sp/>argument<sp/>is<sp/>converted<sp/>to<sp/>corresponding<sp/>signed<sp/>or<sp/>unsigned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type<sp/>depending<sp/>on<sp/>the<sp/>type<sp/>specifier:<sp/>&apos;d&apos;<sp/>and<sp/>&apos;i&apos;<sp/>-<sp/>signed,<sp/>other<sp/>-</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">//<sp/>unsigned).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>convert_arg(<ref refid="classbasic__format__arg" kindref="compound">basic_format_arg&lt;Context&gt;</ref>&amp;<sp/>arg,<sp/>Char<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>visit_format_arg(<ref refid="classarg__converter" kindref="compound">arg_converter&lt;T, Context&gt;</ref>(arg,<sp/>type),<sp/>arg);</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>an<sp/>integer<sp/>argument<sp/>to<sp/>char<sp/>for<sp/>printf.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="classchar__converter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classchar__converter" kindref="compound">char_converter</ref><sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><ref refid="classbasic__format__arg" kindref="compound">basic_format_arg&lt;Context&gt;</ref>&amp;<sp/>arg_;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classchar__converter" kindref="compound">char_converter</ref>(<ref refid="classbasic__format__arg" kindref="compound">basic_format_arg&lt;Context&gt;</ref>&amp;<sp/>arg)<sp/>:<sp/>arg_(arg)<sp/>{}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>FMT_ENABLE_IF(std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral&lt;T&gt;::value)&gt;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(T<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>arg_<sp/>=<sp/>detail::make_arg&lt;Context&gt;(</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">typename<sp/>Context::char_type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classvalue" kindref="compound">value</ref>));</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>FMT_ENABLE_IF(!std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral&lt;T&gt;::value)&gt;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(T)<sp/>{}<sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>conversion<sp/>needed<sp/>for<sp/>non-integral<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal">};</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>argument<sp/>visitor<sp/>that<sp/>return<sp/>a<sp/>pointer<sp/>to<sp/>a<sp/>C<sp/>string<sp/>if<sp/>argument<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">//<sp/>string<sp/>or<sp/>null<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189" refid="structget__cstring" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structget__cstring" kindref="compound">get_cstring</ref><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>operator()(T)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>s)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;<sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal">};</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Checks<sp/>if<sp/>an<sp/>argument<sp/>is<sp/>a<sp/>valid<sp/>printf<sp/>width<sp/>specifier<sp/>and<sp/>sets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">//<sp/>left<sp/>alignment<sp/>if<sp/>it<sp/>is<sp/>negative.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196" refid="classprintf__width__handler" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classprintf__width__handler" kindref="compound">printf_width_handler</ref><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structbasic__format__specs" kindref="compound">format_specs</ref><sp/>=<sp/><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs&lt;Char&gt;</ref>;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><ref refid="structbasic__format__specs" kindref="compound">format_specs</ref>&amp;<sp/>specs_;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classprintf__width__handler" kindref="compound">printf_width_handler</ref>(<ref refid="structbasic__format__specs" kindref="compound">format_specs</ref>&amp;<sp/>specs)<sp/>:<sp/>specs_(specs)<sp/>{}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>FMT_ENABLE_IF(std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral&lt;T&gt;::value)&gt;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>operator()(T<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>width<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_or_64_or_128_t&lt;T&gt;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(detail::is_negative(<ref refid="classvalue" kindref="compound">value</ref>))<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>specs_.align<sp/>=<sp/>align::left;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>width<sp/>=<sp/>0<sp/>-<sp/>width;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int_max<sp/>=<sp/>max_value&lt;int&gt;();</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width<sp/>&gt;<sp/>int_max)<sp/>FMT_THROW(<ref refid="classformat__error" kindref="compound">format_error</ref>(</highlight><highlight class="stringliteral">&quot;number<sp/>is<sp/>too<sp/>big&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(width);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>FMT_ENABLE_IF(!std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral&lt;T&gt;::value)&gt;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>operator()(T)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_THROW(<ref refid="classformat__error" kindref="compound">format_error</ref>(</highlight><highlight class="stringliteral">&quot;width<sp/>is<sp/>not<sp/>integer&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal">};</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>``printf``<sp/>argument<sp/>formatter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="226" refid="classprintf__arg__formatter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classprintf__arg__formatter" kindref="compound">printf_arg_formatter</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarg__formatter" kindref="compound">arg_formatter</ref>&lt;Char&gt;<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarg__formatter" kindref="compound">base</ref><sp/>=<sp/><ref refid="structarg__formatter" kindref="compound">arg_formatter&lt;Char&gt;</ref>;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classbasic__printf__context" kindref="compound">context_type</ref><sp/>=<sp/><ref refid="classbasic__printf__context" kindref="compound">basic_printf_context&lt;OutputIt, Char&gt;</ref>;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structbasic__format__specs" kindref="compound">format_specs</ref><sp/>=<sp/><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs&lt;Char&gt;</ref>;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><ref refid="classbasic__printf__context" kindref="compound">context_type</ref>&amp;<sp/>context_;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>OutputIt<sp/>write_null_pointer(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structis__string" kindref="compound">is_string</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>this-&gt;specs;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>s.type<sp/>=<sp/>presentation_type::none;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>write_bytes(this-&gt;out,<sp/><ref refid="structis__string" kindref="compound">is_string</ref><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;(null)&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;(nil)&quot;</highlight><highlight class="normal">,<sp/>s);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><ref refid="classprintf__arg__formatter" kindref="compound">printf_arg_formatter</ref>(OutputIt<sp/>iter,<sp/><ref refid="structbasic__format__specs" kindref="compound">format_specs</ref>&amp;<sp/>s,<sp/><ref refid="classbasic__printf__context" kindref="compound">context_type</ref>&amp;<sp/>ctx)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structarg__formatter" kindref="compound">base</ref>{iter,<sp/>s,<sp/><ref refid="classlocale__ref" kindref="compound">locale_ref</ref>()},<sp/>context_(ctx)<sp/>{}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>OutputIt<sp/>operator()(<ref refid="structmonostate" kindref="compound">monostate</ref><sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base::operator()(<ref refid="classvalue" kindref="compound">value</ref>);<sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>FMT_ENABLE_IF(detail::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral&lt;T&gt;::value)&gt;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>OutputIt<sp/>operator()(T<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MSVC2013<sp/>fails<sp/>to<sp/>compile<sp/>separate<sp/>overloads<sp/>for<sp/>bool<sp/>and<sp/>Char<sp/>so<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::is_same<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::is_same&lt;T,<sp/>Char&gt;::value)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbasic__format__specs" kindref="compound">format_specs</ref><sp/>fmt_specs<sp/>=<sp/>this-&gt;specs;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fmt_specs.type<sp/>!=<sp/>presentation_type::none<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt_specs.type<sp/>!=<sp/>presentation_type::chr)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classvalue" kindref="compound">value</ref>));</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fmt_specs.sign<sp/>=<sp/>sign::none;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fmt_specs.alt<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fmt_specs.fill[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Ignore<sp/>&apos;0&apos;<sp/>flag<sp/>for<sp/>char<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>align::numeric<sp/>needs<sp/>to<sp/>be<sp/>overwritten<sp/>here<sp/>since<sp/>the<sp/>&apos;0&apos;<sp/>flag<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ignored<sp/>for<sp/>non-numeric<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fmt_specs.align<sp/>==<sp/>align::none<sp/>||<sp/>fmt_specs.align<sp/>==<sp/>align::numeric)</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt_specs.align<sp/>=<sp/>align::right;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>write&lt;Char&gt;(this-&gt;out,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classvalue" kindref="compound">value</ref>),<sp/>fmt_specs);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base::operator()(<ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>FMT_ENABLE_IF(std::is_</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">ing_po</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&lt;T&gt;::value)&gt;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>OutputIt<sp/>operator()(T<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base::operator()(<ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="274" refid="classprintf__arg__formatter_1a0ee64afba0825732d80e28c63992c10f" refkind="member"><highlight class="normal"><sp/><sp/>OutputIt<sp/><ref refid="classprintf__arg__formatter_1a0ee64afba0825732d80e28c63992c10f" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classvalue" kindref="compound">value</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base::operator()(<ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>write_null_pointer(this-&gt;specs.type<sp/>!=<sp/>presentation_type::pointer);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="280" refid="classprintf__arg__formatter_1a48d4afbaf5a4d0e6e0d0e26fe7a902c0" refkind="member"><highlight class="normal"><sp/><sp/>OutputIt<sp/><ref refid="classprintf__arg__formatter_1a48d4afbaf5a4d0e6e0d0e26fe7a902c0" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classvalue" kindref="compound">value</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base::operator()(<ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>write_null_pointer(this-&gt;specs.type<sp/>!=<sp/>presentation_type::pointer);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>OutputIt<sp/>operator()(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base::operator()(<ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="290" refid="classprintf__arg__formatter_1a06c4c8137ac92b3a196c9ca4a6361a0b" refkind="member"><highlight class="normal"><sp/><sp/>OutputIt<sp/><ref refid="classprintf__arg__formatter_1a06c4c8137ac92b3a196c9ca4a6361a0b" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>?<sp/>base::operator()(<ref refid="classvalue" kindref="compound">value</ref>)<sp/>:<sp/>write_null_pointer();</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="295" refid="classprintf__arg__formatter_1af500a78738619292860f14983044a7d4" refkind="member"><highlight class="normal"><sp/><sp/>OutputIt<sp/><ref refid="classprintf__arg__formatter_1af500a78738619292860f14983044a7d4" kindref="member">operator()</ref>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__arg_1_1handle" kindref="compound">basic_format_arg&lt;context_type&gt;::handle</ref><sp/>handle)<sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parse_ctx<sp/>=</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbasic__printf__parse__context" kindref="compound">basic_printf_parse_context&lt;Char&gt;</ref>(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref>());</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>handle.format(parse_ctx,<sp/>context_);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;out;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal">};</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>parse_flags(<ref refid="structbasic__format__specs" kindref="compound">basic_format_specs&lt;Char&gt;</ref>&amp;<sp/>specs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*&amp;<sp/>it,</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>it<sp/>!=<sp/>end;<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(*it)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>specs.align<sp/>=<sp/>align::left;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>specs.sign<sp/>=<sp/>sign::plus;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>specs.fill[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs.sign<sp/>!=<sp/>sign::plus)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specs.sign<sp/>=<sp/>sign::space;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>specs.alt<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>GetArg&gt;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>parse_header(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*&amp;<sp/>it,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>end,</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs&lt;Char&gt;</ref>&amp;<sp/>specs,<sp/>GetArg<sp/>get_arg)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arg_index<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>Char<sp/>c<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>an<sp/>argument<sp/>index<sp/>(if<sp/>followed<sp/>by<sp/>&apos;$&apos;)<sp/>or<sp/>a<sp/>width<sp/>possibly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>preceded<sp/>with<sp/>&apos;0&apos;<sp/>flag(s).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>=<sp/>parse_nonnegative_int(it,<sp/>end,<sp/>-1);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>end<sp/>&amp;&amp;<sp/>*it<sp/>==<sp/></highlight><highlight class="charliteral">&apos;$&apos;</highlight><highlight class="normal">)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>value<sp/>is<sp/>an<sp/>argument<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arg_index<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>!=<sp/>-1<sp/>?<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>:<sp/>max_value&lt;int&gt;();</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>specs.fill[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classvalue" kindref="compound">value</ref><sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nonzero<sp/>value<sp/>means<sp/>that<sp/>we<sp/>parsed<sp/>width<sp/>and<sp/>don&apos;t<sp/>need<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parse<sp/>it<sp/>or<sp/>flags<sp/>again,<sp/>so<sp/>return<sp/>now.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classvalue" kindref="compound">value</ref><sp/>==<sp/>-1)<sp/>FMT_THROW(<ref refid="classformat__error" kindref="compound">format_error</ref>(</highlight><highlight class="stringliteral">&quot;number<sp/>is<sp/>too<sp/>big&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specs.width<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg_index;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>parse_flags(specs,<sp/>it,<sp/>end);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>width.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*it<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>*it<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>specs.width<sp/>=<sp/>parse_nonnegative_int(it,<sp/>end,<sp/>-1);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs.width<sp/>==<sp/>-1)<sp/>FMT_THROW(<ref refid="classformat__error" kindref="compound">format_error</ref>(</highlight><highlight class="stringliteral">&quot;number<sp/>is<sp/>too<sp/>big&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*it<sp/>==<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>specs.width<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(visit_format_arg(</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::printf_width_handler&lt;Char&gt;(specs),<sp/>get_arg(-1)));</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg_index;</highlight></codeline>
<codeline lineno="367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context&gt;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vprintf(<ref refid="classbuffer" kindref="compound">buffer&lt;Char&gt;</ref>&amp;<sp/>buf,<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>format,</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbasic__format__args" kindref="compound">basic_format_args&lt;Context&gt;</ref><sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>OutputIt<sp/>=<sp/>buffer_appender&lt;Char&gt;;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out<sp/>=<sp/>OutputIt(buf);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>context<sp/>=<sp/><ref refid="classbasic__printf__context" kindref="compound">basic_printf_context&lt;OutputIt, Char&gt;</ref>(out,<sp/>args);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parse_ctx<sp/>=<sp/><ref refid="classbasic__printf__parse__context" kindref="compound">basic_printf_parse_context&lt;Char&gt;</ref>(format);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>argument<sp/>with<sp/>specified<sp/>index<sp/>or,<sp/>if<sp/>arg_index<sp/>is<sp/>-1,<sp/>the<sp/>next</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get_arg<sp/>=<sp/>[&amp;](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arg_index)<sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg_index<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arg_index<sp/>=<sp/>parse_ctx.next_arg_id();</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parse_ctx.check_arg_id(--arg_index);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::get_arg(context,<sp/>arg_index);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>start<sp/>=<sp/>parse_ctx.begin();</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>end<sp/>=<sp/>parse_ctx.end();</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!detail::find&lt;false,<sp/>Char&gt;(it,<sp/>end,<sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">,<sp/>it))<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>end;<sp/><sp/></highlight><highlight class="comment">//<sp/>detail::find<sp/>leaves<sp/>it<sp/>==<sp/>nullptr<sp/>if<sp/>it<sp/>doesn&apos;t<sp/>find<sp/>&apos;%&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>Char<sp/>c<sp/>=<sp/>*it++;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>end<sp/>&amp;&amp;<sp/>*it<sp/>==<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>=<sp/>detail::write(</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out,<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref>(start,<sp/>detail::to_unsigned(it<sp/>-<sp/>start)));</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>++it;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>detail::write(out,<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref>(</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start,<sp/>detail::to_unsigned(it<sp/>-<sp/>1<sp/>-<sp/>start)));</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs&lt;Char&gt;</ref><sp/>specs;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>specs.align<sp/>=<sp/>align::right;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>argument<sp/>index,<sp/>flags<sp/>and<sp/>width.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arg_index<sp/>=<sp/>parse_header(it,<sp/>end,<sp/>specs,<sp/>get_arg);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg_index<sp/>==<sp/>0)<sp/>parse_ctx.on_error(</highlight><highlight class="stringliteral">&quot;argument<sp/>not<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>precision.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>end<sp/>&amp;&amp;<sp/>*it<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>it<sp/>!=<sp/>end<sp/>?<sp/>*it<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&lt;=<sp/>c<sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specs.precision<sp/>=<sp/>parse_nonnegative_int(it,<sp/>end,<sp/>0);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specs.precision<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visit_format_arg(detail::printf_precision_handler(),<sp/>get_arg(-1)));</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specs.precision<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>arg<sp/>=<sp/>get_arg(arg_index);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>d,<sp/>i,<sp/>o,<sp/>u,<sp/>x,<sp/>and<sp/>X<sp/>conversion<sp/>specifiers,<sp/>if<sp/>a<sp/>precision<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>specified,<sp/>the<sp/>&apos;0&apos;<sp/>flag<sp/>is<sp/>ignored</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs.precision<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>arg.is_integral())</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>specs.fill[0]<sp/>=</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Ignore<sp/>&apos;0&apos;<sp/>flag<sp/>for<sp/>non-numeric<sp/>types<sp/>or<sp/>if<sp/>&apos;-&apos;<sp/>present.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs.precision<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>arg.type()<sp/>==<sp/>detail::type::cstring_type)<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>str<sp/>=<sp/>visit_format_arg(detail::get_cstring&lt;Char&gt;(),<sp/>arg);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>str_end<sp/>=<sp/>str<sp/>+<sp/>specs.precision;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nul<sp/>=<sp/>std::find(str,<sp/>str_end,<sp/>Char());</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arg<sp/>=<sp/>detail::make_arg&lt;basic_printf_context&lt;OutputIt,<sp/>Char&gt;&gt;(</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref>(</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str,<sp/>detail::to_unsigned(nul<sp/>!=<sp/>str_end<sp/>?<sp/>nul<sp/>-<sp/>str</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>specs.precision)));</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs.alt<sp/>&amp;&amp;<sp/>visit_format_arg(detail::is_zero_int(),<sp/>arg))</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>specs.alt<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(specs.fill[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg.is_arithmetic()<sp/>&amp;&amp;<sp/>specs.align<sp/>!=<sp/>align::left)</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specs.align<sp/>=<sp/>align::numeric;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specs.fill[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//<sp/>Ignore<sp/>&apos;0&apos;<sp/>flag<sp/>for<sp/>non-numeric<sp/>types<sp/>or<sp/>if<sp/>&apos;-&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>flag<sp/>is<sp/>also<sp/>present.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>length<sp/>and<sp/>convert<sp/>the<sp/>argument<sp/>to<sp/>the<sp/>required<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>it<sp/>!=<sp/>end<sp/>?<sp/>*it++<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>Char<sp/>t<sp/>=<sp/>it<sp/>!=<sp/>end<sp/>?<sp/>*it<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>detail::convert_arg;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(c)<sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;h&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/></highlight><highlight class="charliteral">&apos;h&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>it<sp/>!=<sp/>end<sp/>?<sp/>*it<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convert_arg&lt;signed<sp/>char&gt;(arg,<sp/>t);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convert_arg&lt;short&gt;(arg,<sp/>t);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>==<sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>it<sp/>!=<sp/>end<sp/>?<sp/>*it<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convert_arg&lt;long<sp/>long&gt;(arg,<sp/>t);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convert_arg&lt;long&gt;(arg,<sp/>t);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;j&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>convert_arg&lt;intmax_t&gt;(arg,<sp/>t);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>convert_arg&lt;size_t&gt;(arg,<sp/>t);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>convert_arg&lt;std::ptrdiff_t&gt;(arg,<sp/>t);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;L&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printf<sp/>produces<sp/>garbage<sp/>when<sp/>&apos;L&apos;<sp/>is<sp/>omitted<sp/>for<sp/>long<sp/>double,<sp/>no</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>do<sp/>the<sp/>same.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--it;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>convert_arg&lt;void&gt;(arg,<sp/>c);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>end)<sp/>FMT_THROW(<ref refid="classformat__error" kindref="compound">format_error</ref>(</highlight><highlight class="stringliteral">&quot;invalid<sp/>format<sp/>string&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>type<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*it++);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg.is_integral())<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Normalize<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;u&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>=<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visit_format_arg(</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::char_converter&lt;<ref refid="classbasic__printf__context" kindref="compound">basic_printf_context&lt;OutputIt, Char&gt;</ref>&gt;(arg),</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>specs.type<sp/>=<sp/>parse_presentation_type(type);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs.type<sp/>==<sp/>presentation_type::none)</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>parse_ctx.on_error(</highlight><highlight class="stringliteral">&quot;invalid<sp/>type<sp/>specifier&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>start<sp/>=<sp/>it;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Format<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>=<sp/>visit_format_arg(</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::printf_arg_formatter&lt;OutputIt,<sp/>Char&gt;(out,<sp/>specs,<sp/>context),<sp/>arg);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>detail::write(out,<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref>(start,<sp/>to_unsigned(it<sp/>-<sp/>start)));</highlight></codeline>
<codeline lineno="521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="522"><highlight class="normal">FMT_END_DETAIL_NAMESPACE</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classbasic__printf__context" kindref="compound">basic_printf_context_t</ref><sp/>=</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbasic__printf__context" kindref="compound">basic_printf_context&lt;detail::buffer_appender&lt;Char&gt;</ref>,<sp/>Char&gt;;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classbasic__printf__context" kindref="compound">printf_context</ref><sp/>=<sp/><ref refid="classbasic__printf__context" kindref="compound">basic_printf_context_t&lt;char&gt;</ref>;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classbasic__printf__context" kindref="compound">wprintf_context</ref><sp/>=<sp/><ref refid="classbasic__printf__context" kindref="compound">basic_printf_context_t&lt;wchar_t&gt;</ref>;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__args" kindref="compound">printf_args</ref><sp/>=<sp/><ref refid="classbasic__format__args" kindref="compound">basic_format_args&lt;printf_context&gt;</ref>;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__args" kindref="compound">wprintf_args</ref><sp/>=<sp/><ref refid="classbasic__format__args" kindref="compound">basic_format_args&lt;wprintf_context&gt;</ref>;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>T&gt;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>make_printf_args(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;...<sp/>args)</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/><ref refid="classformat__arg__store" kindref="compound">format_arg_store</ref>&lt;<ref refid="classbasic__printf__context" kindref="compound">printf_context</ref>,<sp/>T...&gt;<sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{args...};</highlight></codeline>
<codeline lineno="544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>T&gt;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>make_wprintf_args(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;...<sp/>args)</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/><ref refid="classformat__arg__store" kindref="compound">format_arg_store</ref>&lt;<ref refid="classbasic__printf__context" kindref="compound">wprintf_context</ref>,<sp/>T...&gt;<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{args...};</highlight></codeline>
<codeline lineno="556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char<sp/>=<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">_t&lt;S&gt;&gt;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vsprintf(</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>S&amp;<sp/>fmt,</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbasic__format__args" kindref="compound">basic_format_args</ref>&lt;<ref refid="classbasic__printf__context" kindref="compound">basic_printf_context_t</ref>&lt;type_identity_t&lt;Char&gt;&gt;&gt;<sp/>args)</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/>std::basic_string&lt;Char&gt;<sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><ref refid="classbasic__memory__buffer" kindref="compound">basic_memory_buffer&lt;Char&gt;</ref><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>vprintf(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>to_string_view(fmt),<sp/>args);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__gtx__string__cast_1ga8f0dced1fd45e67e2d77e80ab93c7af5" kindref="member">to_string</ref>(<ref refid="classbuffer" kindref="compound">buffer</ref>);</highlight></codeline>
<codeline lineno="566"><highlight class="normal">}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>T,</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char<sp/>=<sp/>enable_if_t&lt;detail::is_string&lt;S&gt;::value,<sp/>char_t&lt;S&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sprintf(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>S&amp;<sp/>fmt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;...<sp/>args)<sp/>-&gt;<sp/>std::basic_string&lt;Char&gt;<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>context<sp/>=<sp/><ref refid="classbasic__printf__context" kindref="compound">basic_printf_context_t&lt;Char&gt;</ref>;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vsprintf(to_string_view(fmt),<sp/>fmt::make_format_args&lt;context&gt;(args...));</highlight></codeline>
<codeline lineno="582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char<sp/>=<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">_t&lt;S&gt;&gt;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vfprintf(</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>std::FILE*<sp/>f,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>S&amp;<sp/>fmt,</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbasic__format__args" kindref="compound">basic_format_args</ref>&lt;<ref refid="classbasic__printf__context" kindref="compound">basic_printf_context_t</ref>&lt;type_identity_t&lt;Char&gt;&gt;&gt;<sp/>args)</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><ref refid="classbasic__memory__buffer" kindref="compound">basic_memory_buffer&lt;Char&gt;</ref><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>vprintf(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>to_string_view(fmt),<sp/>args);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>.<ref refid="classbuffer_1abef013fc250411a71bd271e27cbcfa5d" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::fwrite(<ref refid="classbuffer" kindref="compound">buffer</ref>.<ref refid="classbuffer_1ae42a4b4e65620def1fc0c5e4be5d3a86" kindref="member">data</ref>(),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Char),<sp/>size,<sp/>f)<sp/>&lt;<sp/>size</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>-1</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(size);</highlight></codeline>
<codeline lineno="595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char<sp/>=<sp/>char_t&lt;S&gt;&gt;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fprintf(std::FILE*<sp/>f,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>S&amp;<sp/>fmt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;...<sp/>args)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>context<sp/>=<sp/><ref refid="classbasic__printf__context" kindref="compound">basic_printf_context_t&lt;Char&gt;</ref>;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vfprintf(f,<sp/>to_string_view(fmt),</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt::make_format_args&lt;context&gt;(args...));</highlight></codeline>
<codeline lineno="611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char<sp/>=<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">_t&lt;S&gt;&gt;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vprintf(</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>S&amp;<sp/>fmt,</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbasic__format__args" kindref="compound">basic_format_args</ref>&lt;<ref refid="classbasic__printf__context" kindref="compound">basic_printf_context_t</ref>&lt;type_identity_t&lt;Char&gt;&gt;&gt;<sp/>args)</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vfprintf(stdout,<sp/>to_string_view(fmt),<sp/>args);</highlight></codeline>
<codeline lineno="619"><highlight class="normal">}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>T,<sp/>FMT_ENABLE_IF(detail::is_string&lt;S&gt;::value)&gt;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>printf(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>S&amp;<sp/>fmt,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;...<sp/>args)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vprintf(</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>to_string_view(fmt),</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fmt::make_format_args&lt;<ref refid="classbasic__printf__context" kindref="compound">basic_printf_context_t</ref>&lt;char_t&lt;S&gt;&gt;&gt;(args...));</highlight></codeline>
<codeline lineno="635"><highlight class="normal">}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char<sp/>=<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">_t&lt;S&gt;&gt;</highlight></codeline>
<codeline lineno="638"><highlight class="normal">FMT_DEPRECATED<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vfprintf(</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>std::basic_ostream&lt;Char&gt;&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>S&amp;<sp/>fmt,</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbasic__format__args" kindref="compound">basic_format_args</ref>&lt;<ref refid="classbasic__printf__context" kindref="compound">basic_printf_context_t</ref>&lt;type_identity_t&lt;Char&gt;&gt;&gt;<sp/>args)</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><ref refid="classbasic__memory__buffer" kindref="compound">basic_memory_buffer&lt;Char&gt;</ref><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>vprintf(<ref refid="classbuffer" kindref="compound">buffer</ref>,<sp/>to_string_view(fmt),<sp/>args);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>os.write(<ref refid="classbuffer" kindref="compound">buffer</ref>.<ref refid="classbuffer_1ae42a4b4e65620def1fc0c5e4be5d3a86" kindref="member">data</ref>(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::streamsize</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classbuffer" kindref="compound">buffer</ref>.<ref refid="classbuffer_1abef013fc250411a71bd271e27cbcfa5d" kindref="member">size</ref>()));</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classbuffer" kindref="compound">buffer</ref>.<ref refid="classbuffer_1abef013fc250411a71bd271e27cbcfa5d" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="646"><highlight class="normal">}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char<sp/>=<sp/>char_t&lt;S&gt;&gt;</highlight></codeline>
<codeline lineno="648"><highlight class="normal">FMT_DEPRECATED<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fprintf(std::basic_ostream&lt;Char&gt;&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>S&amp;<sp/>fmt,</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;...<sp/>args)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vfprintf(os,<sp/>to_string_view(fmt),</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt::make_format_args&lt;<ref refid="classbasic__printf__context" kindref="compound">basic_printf_context_t&lt;Char&gt;</ref>&gt;(args...));</highlight></codeline>
<codeline lineno="652"><highlight class="normal">}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal">FMT_MODULE_EXPORT_END</highlight></codeline>
<codeline lineno="655"><highlight class="normal">FMT_END_NAMESPACE</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>FMT_PRINTF_H_</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h"/>
  </compounddef>
</doxygen>
