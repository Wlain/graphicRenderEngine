<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="test__pattern__formatter_8cpp" kind="file" language="C++">
    <compoundname>test_pattern_formatter.cpp</compoundname>
    <includes refid="includes_8h" local="yes">includes.h</includes>
    <includes refid="test__sink_8h" local="yes">test_sink.h</includes>
    <incdepgraph>
      <node id="52">
        <label>spdlog/async.h</label>
        <link refid="async_8h_source"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>spdlog/async_logger.h</label>
        <link refid="async__logger_8h_source"/>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>common-inl.h</label>
        <link refid="common-inl_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>spdlog/common.h</label>
        <link refid="spdlog_2include_2spdlog_2common_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>spdlog/details/backtracer.h</label>
        <link refid="backtracer_8h_source"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>spdlog/details/circular_q.h</label>
        <link refid="circular__q_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>spdlog/details/console_globals.h</label>
        <link refid="console__globals_8h_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>spdlog/details/file_helper.h</label>
        <link refid="file__helper_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>spdlog/details/log_msg.h</label>
        <link refid="log__msg_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>spdlog/details/log_msg_buffer.h</label>
        <link refid="log__msg__buffer_8h_source"/>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>spdlog/details/mpmc_blocking_q.h</label>
        <link refid="mpmc__blocking__q_8h_source"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>spdlog/details/null_mutex.h</label>
        <link refid="null__mutex_8h_source"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>spdlog/details/os.h</label>
        <link refid="details_2os_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>spdlog/details/registry.h</label>
        <link refid="registry_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>spdlog/details/synchronous_factory.h</label>
        <link refid="synchronous__factory_8h_source"/>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>spdlog/details/thread_pool.h</label>
        <link refid="thread__pool_8h_source"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>spdlog/fmt/bundled/chrono.h</label>
        <link refid="bundled_2chrono_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>spdlog/fmt/bundled/core.h</label>
        <link refid="core_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>spdlog/fmt/bundled/format.h</label>
        <link refid="format_8h_source"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>spdlog/fmt/chrono.h</label>
        <link refid="chrono_8h_source"/>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>spdlog/fmt/fmt.h</label>
        <link refid="fmt_8h_source"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>spdlog/formatter.h</label>
        <link refid="formatter_8h_source"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>spdlog/logger.h</label>
        <link refid="3rdparty_2spdlog_2include_2spdlog_2logger_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>spdlog/pattern_formatter.h</label>
        <link refid="pattern__formatter_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>spdlog/sinks/ansicolor_sink.h</label>
        <link refid="ansicolor__sink_8h_source"/>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
      </node>
      <node id="63">
        <label>spdlog/sinks/base_sink.h</label>
        <link refid="base__sink_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>spdlog/sinks/basic_file_sink.h</label>
        <link refid="basic__file__sink_8h_source"/>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>spdlog/sinks/daily_file_sink.h</label>
        <link refid="daily__file__sink_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>spdlog/sinks/null_sink.h</label>
        <link refid="null__sink_8h_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>spdlog/sinks/ostream_sink.h</label>
        <link refid="ostream__sink_8h_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>spdlog/sinks/rotating_file_sink.h</label>
        <link refid="rotating__file__sink_8h_source"/>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>spdlog/sinks/sink.h</label>
        <link refid="sink_8h_source"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>spdlog/sinks/stdout_color_sinks.h</label>
        <link refid="stdout__color__sinks_8h_source"/>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>spdlog/spdlog.h</label>
        <link refid="spdlog_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>spdlog/tweakme.h</label>
        <link refid="tweakme_8h_source"/>
      </node>
      <node id="50">
        <label>spdlog/version.h</label>
        <link refid="version_8h_source"/>
      </node>
      <node id="3">
        <label>catch.hpp</label>
        <link refid="catch_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>includes.h</label>
        <link refid="includes_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp</label>
        <link refid="test__pattern__formatter_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="78">
        <label>test_sink.h</label>
        <link refid="test__sink_8h_source"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>utils.h</label>
        <link refid="3rdparty_2spdlog_2tests_2utils_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>algorithm</label>
      </node>
      <node id="76">
        <label>array</label>
      </node>
      <node id="30">
        <label>atomic</label>
      </node>
      <node id="9">
        <label>cassert</label>
      </node>
      <node id="12">
        <label>chrono</label>
      </node>
      <node id="38">
        <label>cmath</label>
      </node>
      <node id="56">
        <label>condition_variable</label>
      </node>
      <node id="8">
        <label>cstddef</label>
      </node>
      <node id="6">
        <label>cstdint</label>
      </node>
      <node id="20">
        <label>cstdio</label>
      </node>
      <node id="34">
        <label>cstring</label>
      </node>
      <node id="58">
        <label>ctime</label>
      </node>
      <node id="14">
        <label>exception</label>
      </node>
      <node id="21">
        <label>fstream</label>
      </node>
      <node id="15">
        <label>functional</label>
      </node>
      <node id="31">
        <label>initializer_list</label>
      </node>
      <node id="24">
        <label>iomanip</label>
      </node>
      <node id="4">
        <label>iosfwd</label>
      </node>
      <node id="22">
        <label>iostream</label>
      </node>
      <node id="35">
        <label>iterator</label>
      </node>
      <node id="36">
        <label>limits</label>
      </node>
      <node id="69">
        <label>locale</label>
      </node>
      <node id="13">
        <label>memory</label>
      </node>
      <node id="44">
        <label>mutex</label>
      </node>
      <node id="11">
        <label>ostream</label>
      </node>
      <node id="18">
        <label>random</label>
      </node>
      <node id="23">
        <label>sstream</label>
      </node>
      <node id="39">
        <label>stdexcept</label>
      </node>
      <node id="25">
        <label>stdlib.h</label>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="40">
        <label>system_error</label>
      </node>
      <node id="59">
        <label>thread</label>
      </node>
      <node id="62">
        <label>tuple</label>
      </node>
      <node id="10">
        <label>type_traits</label>
      </node>
      <node id="43">
        <label>unordered_map</label>
      </node>
      <node id="17">
        <label>utility</label>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="classcustom__test__flag" prot="public">custom_test_flag</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="test__pattern__formatter_8cpp_1a0ac65b1c07de4d3b48ceab19973549e3" prot="public" static="yes" mutable="no">
        <type>const char *const</type>
        <definition>const char* const test_path</definition>
        <argsstring></argsstring>
        <name>test_path</name>
        <initializer>= &quot;/a/b//myfile.cpp&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="401" column="25" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="401" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1a9f732f135a2984fb46eddab83ade5f7f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>static std::string log_to_str</definition>
        <argsstring>(const std::string &amp;msg, const Args &amp;... args)</argsstring>
        <name>log_to_str</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>const Args &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="8" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="8" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1a96e8b57bf4ac9c32c16be178e30fdf84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;custom eol&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;custom eol&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="21" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="21" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1ab02851ce47b41fa5947d031751da5a86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;empty format&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;empty format&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="28" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="28" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1a2545da143c7ca526afbeeab2b184bfc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;empty format2&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;empty format2&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="33" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="33" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1aa2fd3d68582de6f6fe26dca369d6560d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;level&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;level&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="38" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="38" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1a5604752641da11ab7c8fb5db3b92a7db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;short level&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;short level&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="43" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="43" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1a7f2d5bc79906aea4baeb53c13dd74b4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;name&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;name&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="48" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1aa6a72581062cfd7f34b42aab54c19fbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;date MM/DD/YY &quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;date MM/DD/YY &quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="53" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="53" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1a1af933d7affa4199bd953785ef1d3589" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;color range test1&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;color range test1&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="62" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="62" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1a513f511dfacdb5dacf76231f5f23ce3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;color range test2&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;color range test2&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="77" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="77" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1aee4445870dc55cce428e625c0a303c04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;color range test3&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;color range test3&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="89" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="89" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1a1e13f926c00b55920749cbaa1a42d435" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;color range test4&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;color range test4&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="100" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="100" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1a5eeb8e66323b97632443218d943c2867" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;color range test5&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;color range test5&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="113" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="113" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1a0fef45b75fffb108593bbe466d482cea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;color range test6&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;color range test6&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="124" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="124" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1a360e2fc7a9bbe59f2db5d93e0f64c6e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;level_left_padded&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;level_left_padded&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="139" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="139" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1a39c018caef09dcb7b528c48875ae23c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;level_right_padded&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;level_right_padded&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="145" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="145" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1a740972689d959eb8f8696577b55b773a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;level_center_padded&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;level_center_padded&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="151" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="151" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1a7af80f58a45c1a7c6284a959a28e2bb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;short level_left_padded&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;short level_left_padded&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="157" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="157" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1a08c58fa8ae06442c7bddcdf7cb19b12b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;short level_right_padded&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;short level_right_padded&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="163" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="163" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1aac66d76b8f646ba907c7286998abc30d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;short level_center_padded&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;short level_center_padded&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="169" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="169" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1ad4098942952b622fdeca144d29834432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;left_padded_short&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;left_padded_short&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="175" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="175" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1a1a7f599a1df56aaf821644cb3cc36e1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;right_padded_short&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;right_padded_short&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="181" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="181" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1a79f9dab2e261114f112f1b51ce3b889c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;center_padded_short&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;center_padded_short&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="187" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="187" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1aa7d7f46e00cc8d3de9d63017d4fc22f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;left_padded_huge&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;left_padded_huge&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="193" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="193" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1a0995c7d1252d0778b521ee9cd37d8dfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;left_padded_max&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;left_padded_max&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="202" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="202" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1a822352744e19ad5f24ec7449eb3c816e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;paddinng_truncate&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;paddinng_truncate&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="213" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="213" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1a8ef04a44f954697670fdf01b382bce7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;padding_truncate_funcname&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;padding_truncate_funcname&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="230" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="230" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1ab797b8304c0bf9bac2c0cfd53e795bd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;padding_funcname&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;padding_funcname&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="247" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="247" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1a5cec70fdd5df4d15c4e2f3496ab994c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;clone-default-formatter&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;clone-default-<ref refid="structformatter" kindref="compound">formatter</ref>&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="264" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="264" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1a03d4112c851af059a9c6e3f10bdb299c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;clone-default-formatter2&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;clone-default-formatter2&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="283" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="283" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1a1295f81fcb6e6496ad05d72f06aa572e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;clone-formatter&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;clone-<ref refid="structformatter" kindref="compound">formatter</ref>&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="302" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="302" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1a8dfa7aa32c8e64f5b9680f206128c86d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;clone-formatter-2&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;clone-<ref refid="structformatter" kindref="compound">formatter</ref>-2&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="321" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="321" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1aa6cd157d46245a06d51167c144705a20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;clone-custom_formatter&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;clone-<ref refid="structcustom__formatter" kindref="compound">custom_formatter</ref>&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="370" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="370" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1adeec5082b1346f42329d76bae1d5793b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;short filename formatter-1&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;short filename <ref refid="structformatter" kindref="compound">formatter</ref>-1&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="404" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="404" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1a1718981ca3996afaceb5f85dffb57a94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;short filename formatter-2&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;short filename <ref refid="structformatter" kindref="compound">formatter</ref>-2&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="420" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="420" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1a63583d1392a214b89ed2c48ce6d45635" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;short filename formatter-3&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;short filename <ref refid="structformatter" kindref="compound">formatter</ref>-3&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="436" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="436" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1a6ab9ef5b6e82a1bf5a0cc92f7e301482" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;full filename formatter&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;full filename <ref refid="structformatter" kindref="compound">formatter</ref>&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="452" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="452" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1af56023e6c31d7f53f0c2bf658363e369" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;custom flags&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;custom flags&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="468" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="468" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1afc554a699119eb6cb18188ac2749a8d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;custom flags-padding&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;custom flags-padding&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="486" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="486" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="test__pattern__formatter_8cpp_1a2ff98ab0c4a86314f4b12c994d6fbbc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_CASE</definition>
        <argsstring>(&quot;custom flags-exception&quot;, &quot;[pattern_formatter]&quot;)</argsstring>
        <name>TEST_CASE</name>
        <param>
          <type>&quot;custom flags-exception&quot;</type>
        </param>
        <param>
          <type>&quot;&quot;</type>
          <array>[pattern_formatter]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" line="504" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp" bodystart="504" bodyend="512"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;includes.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;test_sink.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>spdlog::memory_buf_t;</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>log<sp/>to<sp/>str<sp/>and<sp/>return<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>log_to_str(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;msg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Args<sp/>&amp;...<sp/>args)</highlight></codeline>
<codeline lineno="9"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>oss;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>oss_sink<sp/>=<sp/>std::make_shared&lt;spdlog::sinks::ostream_sink_mt&gt;(oss);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classspdlog_1_1logger" kindref="compound">spdlog::logger</ref><sp/>oss_logger(</highlight><highlight class="stringliteral">&quot;pattern_tester&quot;</highlight><highlight class="normal">,<sp/>oss_sink);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>oss_logger.set_level(spdlog::level::info);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>oss_logger.set_formatter(std::unique_ptr&lt;spdlog::formatter&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classspdlog_1_1pattern__formatter" kindref="compound">spdlog::pattern_formatter</ref>(args...)));</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>oss_logger.info(msg);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oss.str();</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;custom<sp/>eol&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="22"><highlight class="normal">{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>msg<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello<sp/>custom<sp/>eol<sp/>test&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>eol<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(msg,<sp/></highlight><highlight class="stringliteral">&quot;%v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;;)&quot;</highlight><highlight class="normal">)<sp/>==<sp/>msg<sp/>+<sp/>eol);</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;empty<sp/>format&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;Some<sp/>message&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">).empty());</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;empty<sp/>format2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;Some<sp/>message&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;level&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;Some<sp/>message&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[%l]<sp/>%v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;[info]<sp/>Some<sp/>message\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;short<sp/>level&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;Some<sp/>message&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[%L]<sp/>%v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;[I]<sp/>Some<sp/>message\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;Some<sp/>message&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[%n]<sp/>%v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;[pattern_tester]<sp/>Some<sp/>message\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;date<sp/>MM/DD/YY<sp/>&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>now_tm<sp/>=<sp/>spdlog::details::os::localtime();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>oss;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>oss<sp/>&lt;&lt;<sp/>std::setfill(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/>std::setw(2)<sp/>&lt;&lt;<sp/>now_tm.tm_mon<sp/>+<sp/>1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::setw(2)<sp/>&lt;&lt;<sp/>now_tm.tm_mday<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::setw(2)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(now_tm.tm_year<sp/>+<sp/>1900)<sp/>%<sp/>1000<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Some<sp/>message\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;Some<sp/>message&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%D<sp/>%v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/>oss.str());</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;color<sp/>range<sp/>test1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structformatter" kindref="compound">formatter</ref><sp/>=<sp/>std::make_shared&lt;spdlog::pattern_formatter&gt;(</highlight><highlight class="stringliteral">&quot;%^%v%$&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>memory_buf_t<sp/>buf;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>spdlog::fmt_lib::format_to(std::back_inserter(buf),<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>memory_buf_t<sp/>formatted;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>logger_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspdlog_1_1details_1_1log__msg" kindref="compound">spdlog::details::log_msg</ref><sp/>msg(logger_name,<sp/>spdlog::level::info,<sp/>spdlog::string_view_t(buf.data(),<sp/>buf.size()));</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structformatter" kindref="compound">formatter</ref>-&gt;format(msg,<sp/>formatted);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(msg.color_range_start<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(msg.color_range_end<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%^%v%$&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;hello\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;color<sp/>range<sp/>test2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structformatter" kindref="compound">formatter</ref><sp/>=<sp/>std::make_shared&lt;spdlog::pattern_formatter&gt;(</highlight><highlight class="stringliteral">&quot;%^%$&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>logger_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspdlog_1_1details_1_1log__msg" kindref="compound">spdlog::details::log_msg</ref><sp/>msg(logger_name,<sp/>spdlog::level::info,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>memory_buf_t<sp/>formatted;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structformatter" kindref="compound">formatter</ref>-&gt;format(msg,<sp/>formatted);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(msg.color_range_start<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(msg.color_range_end<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%^%$&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;color<sp/>range<sp/>test3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="90"><highlight class="normal">{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structformatter" kindref="compound">formatter</ref><sp/>=<sp/>std::make_shared&lt;spdlog::pattern_formatter&gt;(</highlight><highlight class="stringliteral">&quot;%^***%$&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>logger_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspdlog_1_1details_1_1log__msg" kindref="compound">spdlog::details::log_msg</ref><sp/>msg(logger_name,<sp/>spdlog::level::info,<sp/></highlight><highlight class="stringliteral">&quot;ignored&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>memory_buf_t<sp/>formatted;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structformatter" kindref="compound">formatter</ref>-&gt;format(msg,<sp/>formatted);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(msg.color_range_start<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(msg.color_range_end<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;color<sp/>range<sp/>test4&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structformatter" kindref="compound">formatter</ref><sp/>=<sp/>std::make_shared&lt;spdlog::pattern_formatter&gt;(</highlight><highlight class="stringliteral">&quot;XX%^YYY%$&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>logger_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspdlog_1_1details_1_1log__msg" kindref="compound">spdlog::details::log_msg</ref><sp/>msg(logger_name,<sp/>spdlog::level::info,<sp/></highlight><highlight class="stringliteral">&quot;ignored&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>memory_buf_t<sp/>formatted;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structformatter" kindref="compound">formatter</ref>-&gt;format(msg,<sp/>formatted);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(msg.color_range_start<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(msg.color_range_end<sp/>==<sp/>5);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;ignored&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;XX%^YYY%$&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;XXYYY\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;color<sp/>range<sp/>test5&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="114"><highlight class="normal">{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structformatter" kindref="compound">formatter</ref><sp/>=<sp/>std::make_shared&lt;spdlog::pattern_formatter&gt;(</highlight><highlight class="stringliteral">&quot;**%^&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>logger_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspdlog_1_1details_1_1log__msg" kindref="compound">spdlog::details::log_msg</ref><sp/>msg(logger_name,<sp/>spdlog::level::info,<sp/></highlight><highlight class="stringliteral">&quot;ignored&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>memory_buf_t<sp/>formatted;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structformatter" kindref="compound">formatter</ref>-&gt;format(msg,<sp/>formatted);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(msg.color_range_start<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(msg.color_range_end<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;color<sp/>range<sp/>test6&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structformatter" kindref="compound">formatter</ref><sp/>=<sp/>std::make_shared&lt;spdlog::pattern_formatter&gt;(</highlight><highlight class="stringliteral">&quot;**%$&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>logger_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspdlog_1_1details_1_1log__msg" kindref="compound">spdlog::details::log_msg</ref><sp/>msg(logger_name,<sp/>spdlog::level::info,<sp/></highlight><highlight class="stringliteral">&quot;ignored&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>memory_buf_t<sp/>formatted;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structformatter" kindref="compound">formatter</ref>-&gt;format(msg,<sp/>formatted);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(msg.color_range_start<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(msg.color_range_end<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>padding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;level_left_padded&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;Some<sp/>message&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[%8l]<sp/>%v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;[<sp/><sp/><sp/><sp/>info]<sp/>Some<sp/>message\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;Some<sp/>message&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[%8!l]<sp/>%v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;[<sp/><sp/><sp/><sp/>info]<sp/>Some<sp/>message\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;level_right_padded&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="146"><highlight class="normal">{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;Some<sp/>message&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[%-8l]<sp/>%v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;[info<sp/><sp/><sp/><sp/>]<sp/>Some<sp/>message\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;Some<sp/>message&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[%-8!l]<sp/>%v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;[info<sp/><sp/><sp/><sp/>]<sp/>Some<sp/>message\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;level_center_padded&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;Some<sp/>message&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[%=8l]<sp/>%v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;[<sp/><sp/>info<sp/><sp/>]<sp/>Some<sp/>message\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;Some<sp/>message&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[%=8!l]<sp/>%v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;[<sp/><sp/>info<sp/><sp/>]<sp/>Some<sp/>message\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;short<sp/>level_left_padded&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="158"><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;Some<sp/>message&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[%3L]<sp/>%v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;[<sp/><sp/>I]<sp/>Some<sp/>message\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;Some<sp/>message&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[%3!L]<sp/>%v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;[<sp/><sp/>I]<sp/>Some<sp/>message\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;short<sp/>level_right_padded&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="164"><highlight class="normal">{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;Some<sp/>message&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[%-3L]<sp/>%v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;[I<sp/><sp/>]<sp/>Some<sp/>message\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;Some<sp/>message&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[%-3!L]<sp/>%v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;[I<sp/><sp/>]<sp/>Some<sp/>message\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;short<sp/>level_center_padded&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="170"><highlight class="normal">{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;Some<sp/>message&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[%=3L]<sp/>%v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;[<sp/>I<sp/>]<sp/>Some<sp/>message\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;Some<sp/>message&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[%=3!L]<sp/>%v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;[<sp/>I<sp/>]<sp/>Some<sp/>message\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;left_padded_short&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="176"><highlight class="normal">{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;Some<sp/>message&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[%3n]<sp/>%v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;[pattern_tester]<sp/>Some<sp/>message\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;Some<sp/>message&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[%3!n]<sp/>%v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;[pat]<sp/>Some<sp/>message\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;right_padded_short&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="182"><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;Some<sp/>message&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[%-3n]<sp/>%v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;[pattern_tester]<sp/>Some<sp/>message\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;Some<sp/>message&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[%-3!n]<sp/>%v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;[pat]<sp/>Some<sp/>message\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;center_padded_short&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="188"><highlight class="normal">{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;Some<sp/>message&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[%=3n]<sp/>%v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;[pattern_tester]<sp/>Some<sp/>message\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;Some<sp/>message&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[%=3!n]<sp/>%v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;[pat]<sp/>Some<sp/>message\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;left_padded_huge&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="194"><highlight class="normal">{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;Some<sp/>message&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[%-300n]<sp/>%v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[pattern_tester<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]<sp/>Some<sp/>message\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;Some<sp/>message&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[%-300!n]<sp/>%v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[pattern_tester<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]<sp/>Some<sp/>message\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;left_padded_max&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="203"><highlight class="normal">{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;Some<sp/>message&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[%-64n]<sp/>%v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[pattern_tester<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]<sp/>Some<sp/>message\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;Some<sp/>message&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[%-64!n]<sp/>%v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;[pattern_tester<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]<sp/>Some<sp/>message\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>padding<sp/>+<sp/>truncate<sp/>flag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;paddinng_truncate&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="214"><highlight class="normal">{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;123456&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%6!v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;123456\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;123456&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%5!v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;12345\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;123456&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%7!v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;<sp/>123456\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;123456&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%-6!v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;123456\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;123456&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%-5!v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;12345\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;123456&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%-7!v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;123456<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;123456&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%=6!v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;123456\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;123456&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%=5!v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;12345\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;123456&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%=7!v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;123456<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(log_to_str(</highlight><highlight class="stringliteral">&quot;123456&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%0!v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;padding_truncate_funcname&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="231"><highlight class="normal">{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classspdlog_1_1sinks_1_1test__sink" kindref="compound">spdlog::sinks::test_sink_st</ref><sp/>test_sink;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pattern<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;%v<sp/>[%5!!]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structformatter" kindref="compound">formatter</ref><sp/>=<sp/>std::unique_ptr&lt;spdlog::formatter&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classspdlog_1_1pattern__formatter" kindref="compound">spdlog::pattern_formatter</ref>(pattern));</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>test_sink.set_formatter(std::move(<ref refid="structformatter" kindref="compound">formatter</ref>));</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspdlog_1_1details_1_1log__msg" kindref="compound">spdlog::details::log_msg</ref><sp/>msg1{<ref refid="structspdlog_1_1source__loc" kindref="compound">spdlog::source_loc</ref>{</highlight><highlight class="stringliteral">&quot;ignored&quot;</highlight><highlight class="normal">,<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;func&quot;</highlight><highlight class="normal">},<sp/></highlight><highlight class="stringliteral">&quot;test_logger&quot;</highlight><highlight class="normal">,<sp/>spdlog::level::info,<sp/></highlight><highlight class="stringliteral">&quot;message&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>test_sink.log(msg1);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(test_sink.lines()[0]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;message<sp/>[<sp/>func]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspdlog_1_1details_1_1log__msg" kindref="compound">spdlog::details::log_msg</ref><sp/>msg2{<ref refid="structspdlog_1_1source__loc" kindref="compound">spdlog::source_loc</ref>{</highlight><highlight class="stringliteral">&quot;ignored&quot;</highlight><highlight class="normal">,<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;function&quot;</highlight><highlight class="normal">},<sp/></highlight><highlight class="stringliteral">&quot;test_logger&quot;</highlight><highlight class="normal">,<sp/>spdlog::level::info,<sp/></highlight><highlight class="stringliteral">&quot;message&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>test_sink.log(msg2);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(test_sink.lines()[1]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;message<sp/>[funct]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;padding_funcname&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="248"><highlight class="normal">{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classspdlog_1_1sinks_1_1test__sink" kindref="compound">spdlog::sinks::test_sink_st</ref><sp/>test_sink;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pattern<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;%v<sp/>[%10!]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structformatter" kindref="compound">formatter</ref><sp/>=<sp/>std::unique_ptr&lt;spdlog::formatter&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classspdlog_1_1pattern__formatter" kindref="compound">spdlog::pattern_formatter</ref>(pattern));</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>test_sink.set_formatter(std::move(<ref refid="structformatter" kindref="compound">formatter</ref>));</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspdlog_1_1details_1_1log__msg" kindref="compound">spdlog::details::log_msg</ref><sp/>msg1{<ref refid="structspdlog_1_1source__loc" kindref="compound">spdlog::source_loc</ref>{</highlight><highlight class="stringliteral">&quot;ignored&quot;</highlight><highlight class="normal">,<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;func&quot;</highlight><highlight class="normal">},<sp/></highlight><highlight class="stringliteral">&quot;test_logger&quot;</highlight><highlight class="normal">,<sp/>spdlog::level::info,<sp/></highlight><highlight class="stringliteral">&quot;message&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>test_sink.log(msg1);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(test_sink.lines()[0]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;message<sp/>[<sp/><sp/><sp/><sp/><sp/><sp/>func]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspdlog_1_1details_1_1log__msg" kindref="compound">spdlog::details::log_msg</ref><sp/>msg2{<ref refid="structspdlog_1_1source__loc" kindref="compound">spdlog::source_loc</ref>{</highlight><highlight class="stringliteral">&quot;ignored&quot;</highlight><highlight class="normal">,<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;func567890123&quot;</highlight><highlight class="normal">},<sp/></highlight><highlight class="stringliteral">&quot;test_logger&quot;</highlight><highlight class="normal">,<sp/>spdlog::level::info,<sp/></highlight><highlight class="stringliteral">&quot;message&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>test_sink.log(msg2);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(test_sink.lines()[1]<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;message<sp/>[func567890123]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;clone-default-formatter&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="265"><highlight class="normal">{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>formatter_1<sp/>=<sp/>std::make_shared&lt;spdlog::pattern_formatter&gt;();</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>formatter_2<sp/>=<sp/>formatter_1-&gt;clone();</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>logger_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspdlog_1_1details_1_1log__msg" kindref="compound">spdlog::details::log_msg</ref><sp/>msg(logger_name,<sp/>spdlog::level::info,<sp/></highlight><highlight class="stringliteral">&quot;some<sp/>message&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>memory_buf_t<sp/>formatted_1;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>memory_buf_t<sp/>formatted_2;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>formatter_1-&gt;format(msg,<sp/>formatted_1);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>formatter_2-&gt;format(msg,<sp/>formatted_2);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SPDLOG_USE_STD_FORMAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(formatted_1<sp/>==<sp/>formatted_2);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(<ref refid="group__gtx__string__cast_1ga8f0dced1fd45e67e2d77e80ab93c7af5" kindref="member">fmt::to_string</ref>(formatted_1)<sp/>==<sp/><ref refid="group__gtx__string__cast_1ga8f0dced1fd45e67e2d77e80ab93c7af5" kindref="member">fmt::to_string</ref>(formatted_2));</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;clone-default-formatter2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="284"><highlight class="normal">{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>formatter_1<sp/>=<sp/>std::make_shared&lt;spdlog::pattern_formatter&gt;(</highlight><highlight class="stringliteral">&quot;%+&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>formatter_2<sp/>=<sp/>formatter_1-&gt;clone();</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>logger_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspdlog_1_1details_1_1log__msg" kindref="compound">spdlog::details::log_msg</ref><sp/>msg(logger_name,<sp/>spdlog::level::info,<sp/></highlight><highlight class="stringliteral">&quot;some<sp/>message&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>memory_buf_t<sp/>formatted_1;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>memory_buf_t<sp/>formatted_2;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>formatter_1-&gt;format(msg,<sp/>formatted_1);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>formatter_2-&gt;format(msg,<sp/>formatted_2);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SPDLOG_USE_STD_FORMAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(formatted_1<sp/>==<sp/>formatted_2);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(<ref refid="group__gtx__string__cast_1ga8f0dced1fd45e67e2d77e80ab93c7af5" kindref="member">fmt::to_string</ref>(formatted_1)<sp/>==<sp/><ref refid="group__gtx__string__cast_1ga8f0dced1fd45e67e2d77e80ab93c7af5" kindref="member">fmt::to_string</ref>(formatted_2));</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;clone-formatter&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="303"><highlight class="normal">{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>formatter_1<sp/>=<sp/>std::make_shared&lt;spdlog::pattern_formatter&gt;(</highlight><highlight class="stringliteral">&quot;%D<sp/>%X<sp/>[%]<sp/>[%n]<sp/>%v&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>formatter_2<sp/>=<sp/>formatter_1-&gt;clone();</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>logger_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspdlog_1_1details_1_1log__msg" kindref="compound">spdlog::details::log_msg</ref><sp/>msg(logger_name,<sp/>spdlog::level::info,<sp/></highlight><highlight class="stringliteral">&quot;some<sp/>message&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>memory_buf_t<sp/>formatted_1;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>memory_buf_t<sp/>formatted_2;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>formatter_1-&gt;format(msg,<sp/>formatted_1);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>formatter_2-&gt;format(msg,<sp/>formatted_2);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SPDLOG_USE_STD_FORMAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(formatted_1<sp/>==<sp/>formatted_2);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(<ref refid="group__gtx__string__cast_1ga8f0dced1fd45e67e2d77e80ab93c7af5" kindref="member">fmt::to_string</ref>(formatted_1)<sp/>==<sp/><ref refid="group__gtx__string__cast_1ga8f0dced1fd45e67e2d77e80ab93c7af5" kindref="member">fmt::to_string</ref>(formatted_2));</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;clone-formatter-2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="322"><highlight class="normal">{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>spdlog::pattern_time_type;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>formatter_1<sp/>=<sp/>std::make_shared&lt;spdlog::pattern_formatter&gt;(</highlight><highlight class="stringliteral">&quot;%D<sp/>%X<sp/>[%]<sp/>[%n]<sp/>%v&quot;</highlight><highlight class="normal">,<sp/>pattern_time_type::utc,<sp/></highlight><highlight class="stringliteral">&quot;xxxxxx\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>formatter_2<sp/>=<sp/>formatter_1-&gt;clone();</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>logger_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;test2&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspdlog_1_1details_1_1log__msg" kindref="compound">spdlog::details::log_msg</ref><sp/>msg(logger_name,<sp/>spdlog::level::info,<sp/></highlight><highlight class="stringliteral">&quot;some<sp/>message&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>memory_buf_t<sp/>formatted_1;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>memory_buf_t<sp/>formatted_2;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>formatter_1-&gt;format(msg,<sp/>formatted_1);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>formatter_2-&gt;format(msg,<sp/>formatted_2);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SPDLOG_USE_STD_FORMAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(formatted_1<sp/>==<sp/>formatted_2);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(<ref refid="group__gtx__string__cast_1ga8f0dced1fd45e67e2d77e80ab93c7af5" kindref="member">fmt::to_string</ref>(formatted_1)<sp/>==<sp/><ref refid="group__gtx__string__cast_1ga8f0dced1fd45e67e2d77e80ab93c7af5" kindref="member">fmt::to_string</ref>(formatted_2));</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341" refid="classcustom__test__flag" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classcustom__test__flag" kindref="compound">custom_test_flag</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classspdlog_1_1custom__flag__formatter" kindref="compound">spdlog::custom_flag_formatter</ref></highlight></codeline>
<codeline lineno="342"><highlight class="normal">{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classcustom__test__flag" kindref="compound">custom_test_flag</ref>(std::string<sp/>txt)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>some_txt{std::move(txt)}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>format(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structspdlog_1_1details_1_1log__msg" kindref="compound">spdlog::details::log_msg</ref><sp/>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::tm<sp/>&amp;,<sp/>spdlog::memory_buf_t<sp/>&amp;dest)</highlight><highlight class="keyword"><sp/>override</highlight></codeline>
<codeline lineno="349"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(some_txt<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;throw_me&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classspdlog_1_1spdlog__ex" kindref="compound">spdlog::spdlog_ex</ref>(</highlight><highlight class="stringliteral">&quot;custom_flag_exception_test&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>some_txt<sp/>=<sp/>std::string(padinfo_.width_,<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">)<sp/>+<sp/>some_txt;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest.append(some_txt.data(),<sp/>some_txt.data()<sp/>+<sp/>some_txt.size());</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspdlog_1_1details_1_1padding__info" kindref="compound">spdlog::details::padding_info</ref><sp/>get_padding_info()</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>padinfo_;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>some_txt;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;custom_flag_formatter&gt;<sp/>clone()</highlight><highlight class="keyword"><sp/>const<sp/>override</highlight></codeline>
<codeline lineno="365"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>spdlog::details::make_unique&lt;custom_test_flag&gt;(some_txt);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal">};</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test<sp/>clone<sp/>with<sp/>custom<sp/>flag<sp/>formatters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;clone-custom_formatter&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="371"><highlight class="normal">{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>formatter_1<sp/>=<sp/>std::make_shared&lt;spdlog::pattern_formatter&gt;();</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>formatter_1-&gt;add_flag&lt;<ref refid="classcustom__test__flag" kindref="compound">custom_test_flag</ref>&gt;(</highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;custom_output&quot;</highlight><highlight class="normal">).set_pattern(</highlight><highlight class="stringliteral">&quot;[%n]<sp/>[%t]<sp/>%v&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>formatter_2<sp/>=<sp/>formatter_1-&gt;clone();</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>logger_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;logger-name&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspdlog_1_1details_1_1log__msg" kindref="compound">spdlog::details::log_msg</ref><sp/>msg(logger_name,<sp/>spdlog::level::info,<sp/></highlight><highlight class="stringliteral">&quot;some<sp/>message&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>memory_buf_t<sp/>formatted_1;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>memory_buf_t<sp/>formatted_2;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>formatter_1-&gt;format(msg,<sp/>formatted_1);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>formatter_2-&gt;format(msg,<sp/>formatted_2);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>expected<sp/>=<sp/>spdlog::fmt_lib::format(</highlight><highlight class="stringliteral">&quot;[logger-name]<sp/>[custom_output]<sp/>some<sp/>message{}&quot;</highlight><highlight class="normal">,<sp/>spdlog::details::os::default_eol);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SPDLOG_USE_STD_FORMAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(formatted_1<sp/>==<sp/>expected);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(formatted_2<sp/>==<sp/>expected);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(<ref refid="group__gtx__string__cast_1ga8f0dced1fd45e67e2d77e80ab93c7af5" kindref="member">fmt::to_string</ref>(formatted_1)<sp/>==<sp/>expected);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(<ref refid="group__gtx__string__cast_1ga8f0dced1fd45e67e2d77e80ab93c7af5" kindref="member">fmt::to_string</ref>(formatted_2)<sp/>==<sp/>expected);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>source<sp/>location<sp/>formatting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>test_path<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\\a\\b\\c/myfile.cpp&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>test_path<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/a/b//myfile.cpp&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;short<sp/>filename<sp/>formatter-1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="405"><highlight class="normal">{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classspdlog_1_1pattern__formatter" kindref="compound">spdlog::pattern_formatter</ref><sp/><ref refid="structformatter" kindref="compound">formatter</ref>(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>memory_buf_t<sp/>formatted;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>logger_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;logger-name&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspdlog_1_1source__loc" kindref="compound">spdlog::source_loc</ref><sp/>source_loc{test_path,<sp/>123,<sp/></highlight><highlight class="stringliteral">&quot;some_func()&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspdlog_1_1details_1_1log__msg" kindref="compound">spdlog::details::log_msg</ref><sp/>msg(source_loc,<sp/></highlight><highlight class="stringliteral">&quot;logger-name&quot;</highlight><highlight class="normal">,<sp/>spdlog::level::info,<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structformatter" kindref="compound">formatter</ref>.format(msg,<sp/>formatted);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SPDLOG_USE_STD_FORMAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(formatted<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;myfile.cpp&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(<ref refid="group__gtx__string__cast_1ga8f0dced1fd45e67e2d77e80ab93c7af5" kindref="member">fmt::to_string</ref>(formatted)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;myfile.cpp&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;short<sp/>filename<sp/>formatter-2&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="421"><highlight class="normal">{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classspdlog_1_1pattern__formatter" kindref="compound">spdlog::pattern_formatter</ref><sp/><ref refid="structformatter" kindref="compound">formatter</ref>(</highlight><highlight class="stringliteral">&quot;%s:%#&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>memory_buf_t<sp/>formatted;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>logger_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;logger-name&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspdlog_1_1source__loc" kindref="compound">spdlog::source_loc</ref><sp/>source_loc{</highlight><highlight class="stringliteral">&quot;myfile.cpp&quot;</highlight><highlight class="normal">,<sp/>123,<sp/></highlight><highlight class="stringliteral">&quot;some_func()&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspdlog_1_1details_1_1log__msg" kindref="compound">spdlog::details::log_msg</ref><sp/>msg(source_loc,<sp/></highlight><highlight class="stringliteral">&quot;logger-name&quot;</highlight><highlight class="normal">,<sp/>spdlog::level::info,<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structformatter" kindref="compound">formatter</ref>.format(msg,<sp/>formatted);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SPDLOG_USE_STD_FORMAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(formatted<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;myfile.cpp:123&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(<ref refid="group__gtx__string__cast_1ga8f0dced1fd45e67e2d77e80ab93c7af5" kindref="member">fmt::to_string</ref>(formatted)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;myfile.cpp:123&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;short<sp/>filename<sp/>formatter-3&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="437"><highlight class="normal">{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classspdlog_1_1pattern__formatter" kindref="compound">spdlog::pattern_formatter</ref><sp/><ref refid="structformatter" kindref="compound">formatter</ref>(</highlight><highlight class="stringliteral">&quot;%s<sp/>%v&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>memory_buf_t<sp/>formatted;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>logger_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;logger-name&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspdlog_1_1source__loc" kindref="compound">spdlog::source_loc</ref><sp/>source_loc{</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>123,<sp/></highlight><highlight class="stringliteral">&quot;some_func()&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspdlog_1_1details_1_1log__msg" kindref="compound">spdlog::details::log_msg</ref><sp/>msg(source_loc,<sp/></highlight><highlight class="stringliteral">&quot;logger-name&quot;</highlight><highlight class="normal">,<sp/>spdlog::level::info,<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structformatter" kindref="compound">formatter</ref>.format(msg,<sp/>formatted);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SPDLOG_USE_STD_FORMAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(formatted<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(<ref refid="group__gtx__string__cast_1ga8f0dced1fd45e67e2d77e80ab93c7af5" kindref="member">fmt::to_string</ref>(formatted)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;full<sp/>filename<sp/>formatter&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="453"><highlight class="normal">{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classspdlog_1_1pattern__formatter" kindref="compound">spdlog::pattern_formatter</ref><sp/><ref refid="structformatter" kindref="compound">formatter</ref>(</highlight><highlight class="stringliteral">&quot;%g&quot;</highlight><highlight class="normal">,<sp/>spdlog::pattern_time_type::local,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>memory_buf_t<sp/>formatted;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>logger_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;logger-name&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspdlog_1_1source__loc" kindref="compound">spdlog::source_loc</ref><sp/>source_loc{test_path,<sp/>123,<sp/></highlight><highlight class="stringliteral">&quot;some_func()&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspdlog_1_1details_1_1log__msg" kindref="compound">spdlog::details::log_msg</ref><sp/>msg(source_loc,<sp/></highlight><highlight class="stringliteral">&quot;logger-name&quot;</highlight><highlight class="normal">,<sp/>spdlog::level::info,<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structformatter" kindref="compound">formatter</ref>.format(msg,<sp/>formatted);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SPDLOG_USE_STD_FORMAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(formatted<sp/>==<sp/>test_path);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(<ref refid="group__gtx__string__cast_1ga8f0dced1fd45e67e2d77e80ab93c7af5" kindref="member">fmt::to_string</ref>(formatted)<sp/>==<sp/>test_path);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;custom<sp/>flags&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="469"><highlight class="normal">{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structformatter" kindref="compound">formatter</ref><sp/>=<sp/>std::make_shared&lt;spdlog::pattern_formatter&gt;();</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structformatter" kindref="compound">formatter</ref>-&gt;add_flag&lt;<ref refid="classcustom__test__flag" kindref="compound">custom_test_flag</ref>&gt;(</highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;custom1&quot;</highlight><highlight class="normal">).add_flag&lt;custom_test_flag&gt;(</highlight><highlight class="charliteral">&apos;u&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;custom2&quot;</highlight><highlight class="normal">).set_pattern(</highlight><highlight class="stringliteral">&quot;[%n]<sp/>[%t]<sp/>[%u]<sp/>%v&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>memory_buf_t<sp/>formatted;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspdlog_1_1details_1_1log__msg" kindref="compound">spdlog::details::log_msg</ref><sp/>msg(<ref refid="structspdlog_1_1source__loc" kindref="compound">spdlog::source_loc</ref>{},<sp/></highlight><highlight class="stringliteral">&quot;logger-name&quot;</highlight><highlight class="normal">,<sp/>spdlog::level::info,<sp/></highlight><highlight class="stringliteral">&quot;some<sp/>message&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structformatter" kindref="compound">formatter</ref>-&gt;format(msg,<sp/>formatted);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>expected<sp/>=<sp/>spdlog::fmt_lib::format(</highlight><highlight class="stringliteral">&quot;[logger-name]<sp/>[custom1]<sp/>[custom2]<sp/>some<sp/>message{}&quot;</highlight><highlight class="normal">,<sp/>spdlog::details::os::default_eol);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SPDLOG_USE_STD_FORMAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(formatted<sp/>==<sp/>expected);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(<ref refid="group__gtx__string__cast_1ga8f0dced1fd45e67e2d77e80ab93c7af5" kindref="member">fmt::to_string</ref>(formatted)<sp/>==<sp/>expected);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal">}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;custom<sp/>flags-padding&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="487"><highlight class="normal">{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structformatter" kindref="compound">formatter</ref><sp/>=<sp/>std::make_shared&lt;spdlog::pattern_formatter&gt;();</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structformatter" kindref="compound">formatter</ref>-&gt;add_flag&lt;<ref refid="classcustom__test__flag" kindref="compound">custom_test_flag</ref>&gt;(</highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;custom1&quot;</highlight><highlight class="normal">).add_flag&lt;custom_test_flag&gt;(</highlight><highlight class="charliteral">&apos;u&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;custom2&quot;</highlight><highlight class="normal">).set_pattern(</highlight><highlight class="stringliteral">&quot;[%n]<sp/>[%t]<sp/>[%5u]<sp/>%v&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>memory_buf_t<sp/>formatted;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspdlog_1_1details_1_1log__msg" kindref="compound">spdlog::details::log_msg</ref><sp/>msg(<ref refid="structspdlog_1_1source__loc" kindref="compound">spdlog::source_loc</ref>{},<sp/></highlight><highlight class="stringliteral">&quot;logger-name&quot;</highlight><highlight class="normal">,<sp/>spdlog::level::info,<sp/></highlight><highlight class="stringliteral">&quot;some<sp/>message&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structformatter" kindref="compound">formatter</ref>-&gt;format(msg,<sp/>formatted);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>expected<sp/>=<sp/>spdlog::fmt_lib::format(</highlight><highlight class="stringliteral">&quot;[logger-name]<sp/>[custom1]<sp/>[<sp/><sp/><sp/><sp/><sp/>custom2]<sp/>some<sp/>message{}&quot;</highlight><highlight class="normal">,<sp/>spdlog::details::os::default_eol);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SPDLOG_USE_STD_FORMAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(formatted<sp/>==<sp/>expected);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>REQUIRE(<ref refid="group__gtx__string__cast_1ga8f0dced1fd45e67e2d77e80ab93c7af5" kindref="member">fmt::to_string</ref>(formatted)<sp/>==<sp/>expected);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal">}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal">TEST_CASE(</highlight><highlight class="stringliteral">&quot;custom<sp/>flags-exception&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;[pattern_formatter]&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="505"><highlight class="normal">{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structformatter" kindref="compound">formatter</ref><sp/>=<sp/>std::make_shared&lt;spdlog::pattern_formatter&gt;();</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structformatter" kindref="compound">formatter</ref>-&gt;add_flag&lt;<ref refid="classcustom__test__flag" kindref="compound">custom_test_flag</ref>&gt;(</highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;throw_me&quot;</highlight><highlight class="normal">).add_flag&lt;custom_test_flag&gt;(</highlight><highlight class="charliteral">&apos;u&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;custom2&quot;</highlight><highlight class="normal">).set_pattern(</highlight><highlight class="stringliteral">&quot;[%n]<sp/>[%t]<sp/>[%u]<sp/>%v&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>memory_buf_t<sp/>formatted;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structspdlog_1_1details_1_1log__msg" kindref="compound">spdlog::details::log_msg</ref><sp/>msg(<ref refid="structspdlog_1_1source__loc" kindref="compound">spdlog::source_loc</ref>{},<sp/></highlight><highlight class="stringliteral">&quot;logger-name&quot;</highlight><highlight class="normal">,<sp/>spdlog::level::info,<sp/></highlight><highlight class="stringliteral">&quot;some<sp/>message&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK_THROWS_AS(<ref refid="structformatter" kindref="compound">formatter</ref>-&gt;format(msg,<sp/>formatted),<sp/><ref refid="classspdlog_1_1spdlog__ex" kindref="compound">spdlog::spdlog_ex</ref>);</highlight></codeline>
<codeline lineno="512"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp"/>
  </compounddef>
</doxygen>
