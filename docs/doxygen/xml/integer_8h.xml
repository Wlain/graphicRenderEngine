<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="integer_8h" kind="file" language="C++">
    <compoundname>integer.h</compoundname>
    <includedby refid="func__integer__simd_8inl" local="yes">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/detail/func_integer_simd.inl</includedby>
    <includedby refid="bitfield_8inl" local="yes">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtc/bitfield.inl</includedby>
    <invincdepgraph>
      <node id="2">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/detail/func_integer_simd.inl</label>
        <link refid="func__integer__simd_8inl"/>
      </node>
      <node id="5">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/ext.hpp</label>
        <link refid="ext_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtc/bitfield.hpp</label>
        <link refid="bitfield_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtc/bitfield.inl</label>
        <link refid="bitfield_8inl"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/bit.hpp</label>
        <link refid="bit_8hpp"/>
      </node>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/simd/integer.h</label>
        <link refid="integer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_setup_force_cxx98.cpp</label>
        <link refid="core__setup__force__cxx98_8cpp_source"/>
      </node>
      <node id="7">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_setup_force_size_t_length.cpp</label>
        <link refid="core__setup__force__size__t__length_8cpp_source"/>
      </node>
      <node id="8">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_setup_precision.cpp</label>
        <link refid="core__setup__precision_8cpp_source"/>
      </node>
      <node id="12">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/gtc/gtc_bitfield.cpp</label>
        <link refid="gtc__bitfield_8cpp_source"/>
      </node>
      <node id="9">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/gtx/gtx.cpp</label>
        <link refid="gtx_8cpp_source"/>
      </node>
      <node id="10">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/gtx/gtx_quaternion.cpp</label>
        <link refid="gtx__quaternion_8cpp_source"/>
      </node>
    </invincdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>simd </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GLM_ARCH<sp/>&amp;<sp/>GLM_ARCH_SSE2_BIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal">GLM_FUNC_QUALIFIER<sp/>glm_uvec4<sp/>glm_i128_interleave(glm_uvec4<sp/>x)</highlight></codeline>
<codeline lineno="9"><highlight class="normal">{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>glm_uvec4<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mask4<sp/>=<sp/>_mm_set1_epi32(0x0000FFFF);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>glm_uvec4<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mask3<sp/>=<sp/>_mm_set1_epi32(0x00FF00FF);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>glm_uvec4<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mask2<sp/>=<sp/>_mm_set1_epi32(0x0F0F0F0F);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>glm_uvec4<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mask1<sp/>=<sp/>_mm_set1_epi32(0x33333333);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>glm_uvec4<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mask0<sp/>=<sp/>_mm_set1_epi32(0x55555555);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>glm_uvec4<sp/>Reg1;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>glm_uvec4<sp/>Reg2;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>REG1<sp/>=<sp/>x;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>REG2<sp/>=<sp/>y;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Reg1<sp/>=<sp/>_mm_unpacklo_epi64(x,<sp/>y);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG1<sp/>=<sp/>((REG1<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>REG1)<sp/>&amp;<sp/>glm::uint64(0x0000FFFF0000FFFF);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG2<sp/>=<sp/>((REG2<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>REG2)<sp/>&amp;<sp/>glm::uint64(0x0000FFFF0000FFFF);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg2<sp/>=<sp/>_mm_slli_si128(Reg1,<sp/>2);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_or_si128(Reg2,<sp/>Reg1);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_and_si128(Reg1,<sp/>Mask4);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG1<sp/>=<sp/>((REG1<sp/>&lt;&lt;<sp/><sp/>8)<sp/>|<sp/>REG1)<sp/>&amp;<sp/>glm::uint64(0x00FF00FF00FF00FF);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG2<sp/>=<sp/>((REG2<sp/>&lt;&lt;<sp/><sp/>8)<sp/>|<sp/>REG2)<sp/>&amp;<sp/>glm::uint64(0x00FF00FF00FF00FF);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg2<sp/>=<sp/>_mm_slli_si128(Reg1,<sp/>1);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_or_si128(Reg2,<sp/>Reg1);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_and_si128(Reg1,<sp/>Mask3);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG1<sp/>=<sp/>((REG1<sp/>&lt;&lt;<sp/><sp/>4)<sp/>|<sp/>REG1)<sp/>&amp;<sp/>glm::uint64(0x0F0F0F0F0F0F0F0F);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG2<sp/>=<sp/>((REG2<sp/>&lt;&lt;<sp/><sp/>4)<sp/>|<sp/>REG2)<sp/>&amp;<sp/>glm::uint64(0x0F0F0F0F0F0F0F0F);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg2<sp/>=<sp/>_mm_slli_epi32(Reg1,<sp/>4);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_or_si128(Reg2,<sp/>Reg1);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_and_si128(Reg1,<sp/>Mask2);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG1<sp/>=<sp/>((REG1<sp/>&lt;&lt;<sp/><sp/>2)<sp/>|<sp/>REG1)<sp/>&amp;<sp/>glm::uint64(0x3333333333333333);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG2<sp/>=<sp/>((REG2<sp/>&lt;&lt;<sp/><sp/>2)<sp/>|<sp/>REG2)<sp/>&amp;<sp/>glm::uint64(0x3333333333333333);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg2<sp/>=<sp/>_mm_slli_epi32(Reg1,<sp/>2);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_or_si128(Reg2,<sp/>Reg1);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_and_si128(Reg1,<sp/>Mask1);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG1<sp/>=<sp/>((REG1<sp/>&lt;&lt;<sp/><sp/>1)<sp/>|<sp/>REG1)<sp/>&amp;<sp/>glm::uint64(0x5555555555555555);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG2<sp/>=<sp/>((REG2<sp/>&lt;&lt;<sp/><sp/>1)<sp/>|<sp/>REG2)<sp/>&amp;<sp/>glm::uint64(0x5555555555555555);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg2<sp/>=<sp/>_mm_slli_epi32(Reg1,<sp/>1);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_or_si128(Reg2,<sp/>Reg1);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_and_si128(Reg1,<sp/>Mask0);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//return<sp/>REG1<sp/>|<sp/>(REG2<sp/>&lt;&lt;<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg2<sp/>=<sp/>_mm_slli_epi32(Reg1,<sp/>1);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg2<sp/>=<sp/>_mm_srli_si128(Reg2,<sp/>8);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_or_si128(Reg1,<sp/>Reg2);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Reg1;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal">GLM_FUNC_QUALIFIER<sp/>glm_uvec4<sp/>glm_i128_interleave2(glm_uvec4<sp/>x,<sp/>glm_uvec4<sp/>y)</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>glm_uvec4<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mask4<sp/>=<sp/>_mm_set1_epi32(0x0000FFFF);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>glm_uvec4<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mask3<sp/>=<sp/>_mm_set1_epi32(0x00FF00FF);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>glm_uvec4<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mask2<sp/>=<sp/>_mm_set1_epi32(0x0F0F0F0F);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>glm_uvec4<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mask1<sp/>=<sp/>_mm_set1_epi32(0x33333333);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>glm_uvec4<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mask0<sp/>=<sp/>_mm_set1_epi32(0x55555555);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>glm_uvec4<sp/>Reg1;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>glm_uvec4<sp/>Reg2;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>REG1<sp/>=<sp/>x;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>REG2<sp/>=<sp/>y;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_unpacklo_epi64(x,<sp/>y);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG1<sp/>=<sp/>((REG1<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>REG1)<sp/>&amp;<sp/>glm::uint64(0x0000FFFF0000FFFF);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG2<sp/>=<sp/>((REG2<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>REG2)<sp/>&amp;<sp/>glm::uint64(0x0000FFFF0000FFFF);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg2<sp/>=<sp/>_mm_slli_si128(Reg1,<sp/>2);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_or_si128(Reg2,<sp/>Reg1);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_and_si128(Reg1,<sp/>Mask4);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG1<sp/>=<sp/>((REG1<sp/>&lt;&lt;<sp/><sp/>8)<sp/>|<sp/>REG1)<sp/>&amp;<sp/>glm::uint64(0x00FF00FF00FF00FF);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG2<sp/>=<sp/>((REG2<sp/>&lt;&lt;<sp/><sp/>8)<sp/>|<sp/>REG2)<sp/>&amp;<sp/>glm::uint64(0x00FF00FF00FF00FF);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg2<sp/>=<sp/>_mm_slli_si128(Reg1,<sp/>1);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_or_si128(Reg2,<sp/>Reg1);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_and_si128(Reg1,<sp/>Mask3);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG1<sp/>=<sp/>((REG1<sp/>&lt;&lt;<sp/><sp/>4)<sp/>|<sp/>REG1)<sp/>&amp;<sp/>glm::uint64(0x0F0F0F0F0F0F0F0F);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG2<sp/>=<sp/>((REG2<sp/>&lt;&lt;<sp/><sp/>4)<sp/>|<sp/>REG2)<sp/>&amp;<sp/>glm::uint64(0x0F0F0F0F0F0F0F0F);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg2<sp/>=<sp/>_mm_slli_epi32(Reg1,<sp/>4);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_or_si128(Reg2,<sp/>Reg1);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_and_si128(Reg1,<sp/>Mask2);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG1<sp/>=<sp/>((REG1<sp/>&lt;&lt;<sp/><sp/>2)<sp/>|<sp/>REG1)<sp/>&amp;<sp/>glm::uint64(0x3333333333333333);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG2<sp/>=<sp/>((REG2<sp/>&lt;&lt;<sp/><sp/>2)<sp/>|<sp/>REG2)<sp/>&amp;<sp/>glm::uint64(0x3333333333333333);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg2<sp/>=<sp/>_mm_slli_epi32(Reg1,<sp/>2);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_or_si128(Reg2,<sp/>Reg1);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_and_si128(Reg1,<sp/>Mask1);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG1<sp/>=<sp/>((REG1<sp/>&lt;&lt;<sp/><sp/>1)<sp/>|<sp/>REG1)<sp/>&amp;<sp/>glm::uint64(0x5555555555555555);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//REG2<sp/>=<sp/>((REG2<sp/>&lt;&lt;<sp/><sp/>1)<sp/>|<sp/>REG2)<sp/>&amp;<sp/>glm::uint64(0x5555555555555555);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg2<sp/>=<sp/>_mm_slli_epi32(Reg1,<sp/>1);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_or_si128(Reg2,<sp/>Reg1);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_and_si128(Reg1,<sp/>Mask0);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//return<sp/>REG1<sp/>|<sp/>(REG2<sp/>&lt;&lt;<sp/>1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg2<sp/>=<sp/>_mm_slli_epi32(Reg1,<sp/>1);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg2<sp/>=<sp/>_mm_srli_si128(Reg2,<sp/>8);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>Reg1<sp/>=<sp/>_mm_or_si128(Reg1,<sp/>Reg2);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Reg1;</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="comment">//GLM_ARCH<sp/>&amp;<sp/>GLM_ARCH_SSE2_BIT</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/simd/integer.h"/>
  </compounddef>
</doxygen>
