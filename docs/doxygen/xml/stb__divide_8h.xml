<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="stb__divide_8h" kind="file" language="C++">
    <compoundname>stb_divide.h</compoundname>
    <includedby refid="test__c__compilation_8c" local="yes">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/test_c_compilation.c</includedby>
    <includedby refid="test__cpp__compilation_8cpp" local="yes">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/test_cpp_compilation.cpp</includedby>
    <invincdepgraph>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/stb_divide.h</label>
        <link refid="stb__divide_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/test_c_compilation.c</label>
        <link refid="test__c__compilation_8c_source"/>
      </node>
      <node id="3">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/test_cpp_compilation.cpp</label>
        <link refid="test__cpp__compilation_8cpp_source"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="stb__divide_8h_1abf6483e451c975b2779f948c30984943" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stb_div_trunc</definition>
        <argsstring>(int value_to_be_divided, int value_to_divide_by)</argsstring>
        <name>stb_div_trunc</name>
        <param>
          <type>int</type>
          <declname>value_to_be_divided</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value_to_divide_by</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/stb_divide.h" line="94" column="12" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/stb_divide.h" declline="94" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="stb__divide_8h_1ab5cc5072b173511f62b3d13a0df3559a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stb_div_floor</definition>
        <argsstring>(int value_to_be_divided, int value_to_divide_by)</argsstring>
        <name>stb_div_floor</name>
        <param>
          <type>int</type>
          <declname>value_to_be_divided</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value_to_divide_by</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/stb_divide.h" line="95" column="12" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/stb_divide.h" declline="95" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="stb__divide_8h_1a66b95302eee42de4c142ebca7ad58122" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stb_div_eucl</definition>
        <argsstring>(int value_to_be_divided, int value_to_divide_by)</argsstring>
        <name>stb_div_eucl</name>
        <param>
          <type>int</type>
          <declname>value_to_be_divided</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value_to_divide_by</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/stb_divide.h" line="96" column="12" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/stb_divide.h" declline="96" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="stb__divide_8h_1a017cfc51501f984307e7dec987f383cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stb_mod_trunc</definition>
        <argsstring>(int value_to_be_divided, int value_to_divide_by)</argsstring>
        <name>stb_mod_trunc</name>
        <param>
          <type>int</type>
          <declname>value_to_be_divided</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value_to_divide_by</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/stb_divide.h" line="97" column="12" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/stb_divide.h" declline="97" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="stb__divide_8h_1a30710dea5f2272ed3728faf88c4f567f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stb_mod_floor</definition>
        <argsstring>(int value_to_be_divided, int value_to_divide_by)</argsstring>
        <name>stb_mod_floor</name>
        <param>
          <type>int</type>
          <declname>value_to_be_divided</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value_to_divide_by</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/stb_divide.h" line="98" column="12" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/stb_divide.h" declline="98" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="stb__divide_8h_1addd0e6270b1ae27315931956e9db4503" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stb_mod_eucl</definition>
        <argsstring>(int value_to_be_divided, int value_to_divide_by)</argsstring>
        <name>stb_mod_eucl</name>
        <param>
          <type>int</type>
          <declname>value_to_be_divided</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value_to_divide_by</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/stb_divide.h" line="99" column="12" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/stb_divide.h" declline="99" declcolumn="12"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>stb_divide.h<sp/>-<sp/>v0.94<sp/>-<sp/>public<sp/>domain<sp/>-<sp/>Sean<sp/>Barrett,<sp/>Feb<sp/>2010</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Three<sp/>kinds<sp/>of<sp/>divide/modulus<sp/>of<sp/>signed<sp/>integers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>HISTORY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>v0.94<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Fix<sp/>integer<sp/>overflow<sp/>issues</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>v0.93<sp/><sp/>2020-02-02<sp/><sp/>Write<sp/>useful<sp/>exit()<sp/>value<sp/>from<sp/>main()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>v0.92<sp/><sp/>2019-02-25<sp/><sp/>Fix<sp/>warning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>v0.91<sp/><sp/>2010-02-27<sp/><sp/>Fix<sp/>euclidean<sp/>division<sp/>by<sp/>INT_MIN<sp/>for<sp/>non-truncating<sp/>C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Check<sp/>result<sp/>with<sp/>64-bit<sp/>math<sp/>to<sp/>catch<sp/>such<sp/>cases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>v0.90<sp/><sp/>2010-02-24<sp/><sp/>First<sp/>public<sp/>release</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>USAGE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>*ONE*<sp/>source<sp/>file,<sp/>put:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>#define<sp/>STB_DIVIDE_IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//<sp/>#define<sp/>C_INTEGER_DIVISION_TRUNCATES<sp/><sp/>//<sp/>see<sp/>Note<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>//<sp/>#define<sp/>C_INTEGER_DIVISION_FLOORS<sp/><sp/><sp/><sp/><sp/>//<sp/>see<sp/>Note<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>#include<sp/>&quot;stb_divide.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Other<sp/>source<sp/>files<sp/>should<sp/>just<sp/>include<sp/>stb_divide.h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>1:<sp/>On<sp/>platforms/compilers<sp/>that<sp/>you<sp/>know<sp/>signed<sp/>C<sp/>division</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>truncates,<sp/>you<sp/>can<sp/>#define<sp/>C_INTEGER_DIVISION_TRUNCATES.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>2:<sp/>On<sp/>platforms/compilers<sp/>that<sp/>you<sp/>know<sp/>signed<sp/>C<sp/>division</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>floors<sp/>(rounds<sp/>to<sp/>negative<sp/>infinity),<sp/>you<sp/>can<sp/>#define</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C_INTEGER_DIVISION_FLOORS.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>can<sp/>#define<sp/>STB_DIVIDE_TEST<sp/>in<sp/>which<sp/>case<sp/>the<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>generate<sp/>a<sp/>main()<sp/>and<sp/>compiling<sp/>the<sp/>result<sp/>will<sp/>create<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>program<sp/>that<sp/>tests<sp/>the<sp/>implementation.<sp/>Run<sp/>it<sp/>with<sp/>no<sp/>arguments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>any<sp/>output<sp/>indicates<sp/>an<sp/>error;<sp/>run<sp/>it<sp/>with<sp/>any<sp/>argument<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>will<sp/>also<sp/>print<sp/>the<sp/>test<sp/>results.<sp/>Define<sp/>STB_DIVIDE_TEST_64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>a<sp/>64-bit<sp/>integer<sp/>type<sp/>to<sp/>avoid<sp/>overflows<sp/>in<sp/>the<sp/>result-checking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>give<sp/>false<sp/>negatives.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ABOUT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>provides<sp/>three<sp/>different<sp/>consistent<sp/>divide/mod<sp/>pairs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implemented<sp/>on<sp/>top<sp/>of<sp/>arbitrary<sp/>C/C++<sp/>division,<sp/>including<sp/>correct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>handling<sp/>of<sp/>overflow<sp/>of<sp/>intermediate<sp/>calculations:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>trunc:<sp/><sp/><sp/>a/b<sp/>truncates<sp/>to<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a%b<sp/>has<sp/>same<sp/>sign<sp/>as<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>floor:<sp/><sp/><sp/>a/b<sp/>truncates<sp/>to<sp/>-inf,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a%b<sp/>has<sp/>same<sp/>sign<sp/>as<sp/>b</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>eucl:<sp/><sp/><sp/><sp/>a/b<sp/>truncates<sp/>to<sp/>sign(b)*inf,<sp/>a%b<sp/>is<sp/>non-negative</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Not<sp/>necessarily<sp/>optimal;<sp/>I<sp/>tried<sp/>to<sp/>keep<sp/>it<sp/>generally<sp/>efficient,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>there<sp/>may<sp/>be<sp/>better<sp/>ways.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Briefly,<sp/>for<sp/>those<sp/>who<sp/>are<sp/>not<sp/>familiar<sp/>with<sp/>the<sp/>problem,<sp/>we<sp/>note</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>reason<sp/>these<sp/>divides<sp/>exist<sp/>and<sp/>are<sp/>interesting:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>&apos;trunc&apos;<sp/>is<sp/>easy<sp/>to<sp/>implement<sp/>in<sp/>hardware<sp/>(strip<sp/>the<sp/>signs,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compute,<sp/>reapply<sp/>the<sp/>signs),<sp/>thus<sp/>is<sp/>commonly<sp/>defined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>by<sp/>many<sp/>languages<sp/>(including<sp/>C99)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>&apos;floor&apos;<sp/>is<sp/>simple<sp/>to<sp/>define<sp/>and<sp/>better<sp/>behaved<sp/>than<sp/>trunc;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>example<sp/>it<sp/>divides<sp/>integers<sp/>into<sp/>fixed-size<sp/>buckets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>without<sp/>an<sp/>extra-wide<sp/>bucket<sp/>at<sp/>0,<sp/>and<sp/>for<sp/>a<sp/>fixed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>divisor<sp/>N<sp/>there<sp/>are<sp/>only<sp/>|N|<sp/>possible<sp/>moduli.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>&apos;eucl&apos;<sp/>guarantees<sp/>fixed-sized<sp/>buckets<sp/>*and*<sp/>a<sp/>non-negative</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>modulus<sp/>and<sp/>defines<sp/>division<sp/>to<sp/>be<sp/>whatever<sp/>is<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>achieve<sp/>that<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>&quot;The<sp/>Euclidean<sp/>definition<sp/>of<sp/>the<sp/>functions<sp/>div<sp/>and<sp/>mod&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/>by<sp/>Raymond<sp/>Boute<sp/>(1992),<sp/>or<sp/>&quot;Division<sp/>and<sp/>Modulus<sp/>for<sp/>Computer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Scientists&quot;<sp/>by<sp/>Daan<sp/>Leijen<sp/>(2001)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>assume<sp/>of<sp/>the<sp/>built-in<sp/>C<sp/>division:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>(a)<sp/>modulus<sp/>is<sp/>the<sp/>remainder<sp/>for<sp/>the<sp/>corresponding<sp/>division</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>(b)<sp/>a/b<sp/>truncates<sp/>if<sp/>a<sp/>and<sp/>b<sp/>are<sp/>the<sp/>same<sp/>sign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Property<sp/>(a)<sp/>requires<sp/>(a/b)*b<sp/>+<sp/>(a%b)==a,<sp/>and<sp/>is<sp/>required<sp/>by<sp/>C.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Property<sp/>(b)<sp/>seems<sp/>to<sp/>be<sp/>true<sp/>of<sp/>all<sp/>hardware<sp/>but<sp/>is<sp/>*not*<sp/>satisfied</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/>by<sp/>the<sp/>euclidean<sp/>division<sp/>operator<sp/>we<sp/>define,<sp/>so<sp/>it&apos;s<sp/>possibly<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/>always<sp/>true.<sp/>If<sp/>any<sp/>such<sp/>platform<sp/>turns<sp/>up,<sp/>we<sp/>can<sp/>add<sp/>more<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(Possibly<sp/>only<sp/>stb_div_trunc<sp/>currently<sp/>relies<sp/>on<sp/>property<sp/>(b).)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LICENSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>See<sp/>end<sp/>of<sp/>file<sp/>for<sp/>license<sp/>information.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>INCLUDE_STB_DIVIDE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INCLUDE_STB_DIVIDE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_div_trunc(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_to_be_divided,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_to_divide_by);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_div_floor(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_to_be_divided,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_to_divide_by);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_div_eucl<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_to_be_divided,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_to_divide_by);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_mod_trunc(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_to_be_divided,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_to_divide_by);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_mod_floor(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_to_be_divided,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_to_divide_by);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_mod_eucl<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_to_be_divided,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_to_divide_by);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DIVIDE_IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__STDC_VERSION)<sp/>&amp;&amp;<sp/>__STDC_VERSION__<sp/>&gt;=<sp/>19901</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>C_INTEGER_DIVISION_TRUNCATES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>C_INTEGER_DIVISION_TRUNCATES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>INT_MIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>if<sp/>you<sp/>have<sp/>no<sp/>limits.h,<sp/>#define<sp/>INT_MIN<sp/>yourself</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>following<sp/>macros<sp/>are<sp/>designed<sp/>to<sp/>allow<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>other<sp/>platforms<sp/>by<sp/>simulating<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_DIVIDE_TEST_FLOOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>stb__div(a,b)<sp/><sp/>((a)/(b))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>stb__mod(a,b)<sp/><sp/>((a)%(b))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>implement<sp/>floor-style<sp/>divide<sp/>on<sp/>trunc<sp/>platform</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>C_INTEGER_DIVISION_TRUNCATES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#error<sp/>&quot;floor<sp/>test<sp/>requires<sp/>truncating<sp/>division&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#undef<sp/>C_INTEGER_DIVISION_TRUNCATES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__div(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v2)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>q<sp/>=<sp/>v1/v2,<sp/>r<sp/>=<sp/>v1%v2;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((r<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>v2<sp/>&lt;<sp/>0)<sp/>||<sp/>(r<sp/>&lt;<sp/>0<sp/>&amp;&amp;<sp/>v2<sp/>&gt;<sp/>0))</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>q-1;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>q;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb__mod(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v2)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>v1%v2;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((r<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>v2<sp/>&lt;<sp/>0)<sp/>||<sp/>(r<sp/>&lt;<sp/>0<sp/>&amp;&amp;<sp/>v2<sp/>&gt;<sp/>0))</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r+v2;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_div_trunc(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v2)</highlight></codeline>
<codeline lineno="148"><highlight class="normal">{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>C_INTEGER_DIVISION_TRUNCATES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v1/v2;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v1<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>v2<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-stb__div(-v1,v2);<sp/><sp/></highlight><highlight class="comment">//<sp/>both<sp/>negative<sp/>to<sp/>avoid<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v1<sp/>&lt;=<sp/>0<sp/>&amp;&amp;<sp/>v2<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v1<sp/>!=<sp/>INT_MIN)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-stb__div(v1,-v2);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>both<sp/>negative<sp/>to<sp/>avoid<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-stb__div(v1+v2,-v2)-1;<sp/></highlight><highlight class="comment">//<sp/>push<sp/>v1<sp/>away<sp/>from<sp/>wrap<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v1/v2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>same<sp/>sign,<sp/>so<sp/>expect<sp/>truncation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_div_floor(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v2)</highlight></codeline>
<codeline lineno="165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>C_INTEGER_DIVISION_FLOORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v1/v2;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v1<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>v2<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v2<sp/>+<sp/>1<sp/>&gt;=<sp/>INT_MIN<sp/>+<sp/>v1)<sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>increasing<sp/>v1&apos;s<sp/>magnitude<sp/>overflows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-stb__div((v2+1)-v1,v2);<sp/></highlight><highlight class="comment">//<sp/>nope,<sp/>so<sp/>just<sp/>compute<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-stb__div(-v1,v2)<sp/>+<sp/>((-v1)%v2<sp/>?<sp/>-1<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v1<sp/>&lt;<sp/>0<sp/>&amp;&amp;<sp/>v2<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v1<sp/>!=<sp/>INT_MIN)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v1<sp/>+<sp/>1<sp/>&gt;=<sp/>INT_MIN<sp/>+<sp/>v2)<sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>increasing<sp/>v1&apos;s<sp/>magnitude<sp/>overflows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-stb__div((v1+1)-v2,-v2);<sp/></highlight><highlight class="comment">//<sp/>nope,<sp/>so<sp/>just<sp/>compute<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-stb__div(-v1,v2)<sp/>+<sp/>(stb__mod(v1,-v2)<sp/>?<sp/>-1<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>it<sp/>must<sp/>be<sp/>possible<sp/>to<sp/>compute<sp/>-(v1+v2)<sp/>without<sp/>overflowing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-stb__div(-(v1+v2),v2)<sp/>+<sp/>(stb__mod(-(v1+v2),v2)<sp/>?<sp/>-2<sp/>:<sp/>-1);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v1/v2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>same<sp/>sign,<sp/>so<sp/>expect<sp/>truncation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_div_eucl(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v2)</highlight></codeline>
<codeline lineno="189"><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>q,r;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>C_INTEGER_DIVISION_TRUNCATES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/>q<sp/>=<sp/>v1/v2;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/>r<sp/>=<sp/>v1%v2;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handle<sp/>every<sp/>quadrant<sp/>separately,<sp/>since<sp/>we<sp/>can&apos;t<sp/>rely<sp/>on<sp/>q<sp/>and<sp/>r<sp/>flor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v1<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v2<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stb__div(v1,v2);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v2<sp/>!=<sp/>INT_MIN)</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>-stb__div(v1,-v2),<sp/>r<sp/>=<sp/>stb__mod(v1,-v2);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>0,<sp/>r<sp/>=<sp/>v1;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v1<sp/>!=<sp/>INT_MIN)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v2<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>-stb__div(-v1,v2),<sp/>r<sp/>=<sp/>-stb__mod(-v1,v2);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v2<sp/>!=<sp/>INT_MIN)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>stb__div(-v1,-v2),<sp/>r<sp/>=<sp/>-stb__mod(-v1,-v2);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>if<sp/>v2<sp/>is<sp/>INT_MIN,<sp/>then<sp/>we<sp/>can&apos;t<sp/>use<sp/>-v2,<sp/>but<sp/>we<sp/>can&apos;t<sp/>divide<sp/>by<sp/>v2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>1,<sp/>r<sp/>=<sp/>v1-q*v2;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>if<sp/>v1<sp/>is<sp/>INT_MIN,<sp/>we<sp/>have<sp/>to<sp/>move<sp/>away<sp/>from<sp/>overflow<sp/>place</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v2<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>-stb__div(-(v1+v2),v2)-1,<sp/>r<sp/>=<sp/>-stb__mod(-(v1+v2),v2);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v2<sp/>!=<sp/>INT_MIN)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>stb__div(-(v1-v2),-v2)+1,<sp/>r<sp/>=<sp/>-stb__mod(-(v1-v2),-v2);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>INT_MIN<sp/>/<sp/>INT_MIN,<sp/>we<sp/>need<sp/>to<sp/>be<sp/>extra-careful<sp/>to<sp/>avoid<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>1,<sp/>r<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>q;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>q<sp/>+<sp/>(v2<sp/>&gt;<sp/>0<sp/>?<sp/>-1<sp/>:<sp/>1);</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_mod_trunc(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v2)</highlight></codeline>
<codeline lineno="225"><highlight class="normal">{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>C_INTEGER_DIVISION_TRUNCATES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v1%v2;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v1<sp/>&gt;=<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>modulus<sp/>result<sp/>should<sp/>always<sp/>be<sp/>positive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>stb__mod(v1,v2);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r<sp/>-<sp/>(v2<sp/>&lt;<sp/>0<sp/>?<sp/>v2<sp/>:<sp/>-v2);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>modulus<sp/>result<sp/>should<sp/>always<sp/>be<sp/>negative</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>stb__mod(v1,v2);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r<sp/>+<sp/>(v2<sp/>&lt;<sp/>0<sp/>?<sp/>v2<sp/>:<sp/>-v2);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_mod_floor(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v2)</highlight></codeline>
<codeline lineno="246"><highlight class="normal">{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>C_INTEGER_DIVISION_FLOORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v1%v2;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v2<sp/>&gt;=<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>result<sp/>should<sp/>always<sp/>be<sp/>positive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>stb__mod(v1,v2);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r<sp/>+<sp/>v2;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>result<sp/>should<sp/>always<sp/>be<sp/>negative</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>stb__mod(v1,v2);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r<sp/>+<sp/>v2;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stb_mod_eucl(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v2)</highlight></codeline>
<codeline lineno="267"><highlight class="normal">{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>stb__mod(v1,v2);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r<sp/>-<sp/>(v2<sp/>&lt;<sp/>0<sp/>?<sp/>v2<sp/>:<sp/>-v2);<sp/></highlight><highlight class="comment">//<sp/>negative<sp/>abs()<sp/>[to<sp/>avoid<sp/>overflow]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_DIVIDE_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>show=0;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>err=0;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbdiv_check(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>q,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dir)</highlight></codeline>
<codeline lineno="285"><highlight class="normal">{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((dir<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>r<sp/>&lt;<sp/>0)<sp/>||<sp/>(dir<sp/>&lt;<sp/>0<sp/>&amp;&amp;<sp/>r<sp/>&gt;<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;FAILED:<sp/>%s(%d,%d)<sp/>remainder<sp/>%d<sp/>in<sp/>wrong<sp/>direction\n&quot;</highlight><highlight class="normal">,<sp/>type,a,b,r);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err++;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b<sp/>!=<sp/>INT_MIN)<sp/></highlight><highlight class="comment">//<sp/>can&apos;t<sp/>compute<sp/>abs(),<sp/>but<sp/>if<sp/>b==INT_MIN<sp/>all<sp/>remainders<sp/>are<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>&lt;=<sp/>-<ref refid="group__core__func__common_1ga693d77696ff36572a0da79efec965acd" kindref="member">abs</ref>(b)<sp/>||<sp/>r<sp/>&gt;=<sp/><ref refid="group__core__func__common_1ga693d77696ff36572a0da79efec965acd" kindref="member">abs</ref>(b))<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;FAILED:<sp/>%s(%d,%d)<sp/>remainder<sp/>%d<sp/>out<sp/>of<sp/>range\n&quot;</highlight><highlight class="normal">,<sp/>type,a,b,r);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err++;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>STB_DIVIDE_TEST_64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>STB_DIVIDE_TEST_64<sp/>q64<sp/>=<sp/>q,<sp/>r64=r,<sp/>a64=a,<sp/>b64=b;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q64*b64+r64<sp/>!=<sp/>a64)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;FAILED:<sp/>%s(%d,%d)<sp/>remainder<sp/>%d<sp/>doesn&apos;t<sp/>match<sp/>quotient<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>type,a,b,r,q);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>err++;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q*b+r<sp/>!=<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;FAILED:<sp/>%s(%d,%d)<sp/>remainder<sp/>%d<sp/>doesn&apos;t<sp/>match<sp/>quotient<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>type,a,b,r,q);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>err++;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="312"><highlight class="normal">{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>q,r;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(show)<sp/>printf(</highlight><highlight class="stringliteral">&quot;(%+11d,%+d)<sp/>|<sp/><sp/>&quot;</highlight><highlight class="normal">,<sp/>a,b);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/>q<sp/>=<sp/>stb_div_trunc(a,b),<sp/>r<sp/>=<sp/>stb_mod_trunc(a,b);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(show)<sp/>printf(</highlight><highlight class="stringliteral">&quot;(%+11d,%+2d)<sp/><sp/>&quot;</highlight><highlight class="normal">,<sp/>q,r);<sp/>stbdiv_check(q,r,a,b,<sp/></highlight><highlight class="stringliteral">&quot;trunc&quot;</highlight><highlight class="normal">,a);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/>q<sp/>=<sp/>stb_div_floor(a,b),<sp/>r<sp/>=<sp/>stb_mod_floor(a,b);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(show)<sp/>printf(</highlight><highlight class="stringliteral">&quot;(%+11d,%+2d)<sp/><sp/>&quot;</highlight><highlight class="normal">,<sp/>q,r);<sp/>stbdiv_check(q,r,a,b,<sp/></highlight><highlight class="stringliteral">&quot;floor&quot;</highlight><highlight class="normal">,b);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/>q<sp/>=<sp/>stb_div_eucl<sp/>(a,b),<sp/>r<sp/>=<sp/>stb_mod_eucl<sp/>(a,b);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(show)<sp/>printf(</highlight><highlight class="stringliteral">&quot;(%+11d,%+2d)\n&quot;</highlight><highlight class="normal">,<sp/>q,r);<sp/>stbdiv_check(q,r,a,b,<sp/></highlight><highlight class="stringliteral">&quot;euclidean&quot;</highlight><highlight class="normal">,1);</highlight></codeline>
<codeline lineno="321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>testh(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="324"><highlight class="normal">{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>q,r;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(show)<sp/>printf(</highlight><highlight class="stringliteral">&quot;(%08x,%08x)<sp/>|\n&quot;</highlight><highlight class="normal">,<sp/>a,b);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/>q<sp/>=<sp/>stb_div_trunc(a,b),<sp/>r<sp/>=<sp/>stb_mod_trunc(a,b);<sp/>stbdiv_check(q,r,a,b,<sp/></highlight><highlight class="stringliteral">&quot;trunc&quot;</highlight><highlight class="normal">,a);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(show)<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(%08x,%08x)&quot;</highlight><highlight class="normal">,<sp/>q,r);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/>q<sp/>=<sp/>stb_div_floor(a,b),<sp/>r<sp/>=<sp/>stb_mod_floor(a,b);<sp/>stbdiv_check(q,r,a,b,<sp/></highlight><highlight class="stringliteral">&quot;floor&quot;</highlight><highlight class="normal">,b);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(show)<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>(%08x,%08x)&quot;</highlight><highlight class="normal">,<sp/>q,r);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/>q<sp/>=<sp/>stb_div_eucl<sp/>(a,b),<sp/>r<sp/>=<sp/>stb_mod_eucl<sp/>(a,b);<sp/>stbdiv_check(q,r,a,b,<sp/></highlight><highlight class="stringliteral">&quot;euclidean&quot;</highlight><highlight class="normal">,1);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(show)<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>(%08x,%08x)\n<sp/>&quot;</highlight><highlight class="normal">,<sp/>q,r);</highlight></codeline>
<codeline lineno="333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)</highlight></codeline>
<codeline lineno="336"><highlight class="normal">{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argc<sp/>&gt;<sp/>1)<sp/>show=1;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/>test(8,3);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/>test(8,-3);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/>test(-8,3);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/>test(-8,-3);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/>test(1,2);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/>test(1,-2);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/>test(-1,2);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/>test(-1,-2);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/>test(8,4);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/>test(8,-4);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/>test(-8,4);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/>test(-8,-4);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/>test(INT_MAX,1);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/>test(INT_MIN,1);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/>test(INT_MIN+1,1);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/>test(INT_MAX,-1);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//test(INT_MIN,-1);<sp/>//<sp/>this<sp/>traps<sp/>in<sp/>MSVC,<sp/>so<sp/>we<sp/>leave<sp/>it<sp/>untested</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/>test(INT_MIN+1,-1);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/>test(INT_MIN,-2);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/>test(INT_MIN+1,2);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/>test(INT_MIN+1,-2);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/>test(INT_MAX,2);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/>test(INT_MAX,-2);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/>test(INT_MIN+1,2);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/>test(INT_MIN+1,-2);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/>test(INT_MIN,2);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/>test(INT_MIN,-2);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/>test(INT_MIN,7);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/>test(INT_MIN,-7);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/>test(INT_MIN+1,4);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/>test(INT_MIN+1,-4);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/>testh(-7,<sp/>INT_MIN);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/>testh(-1,<sp/>INT_MIN);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/>testh(1,<sp/>INT_MIN);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/>testh(7,<sp/>INT_MIN);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/>testh(INT_MAX-1,<sp/>INT_MIN);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/>testh(INT_MAX,<sp/><sp/><sp/>INT_MIN);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/>testh(INT_MIN,<sp/><sp/><sp/>INT_MIN);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/>testh(INT_MIN+1,<sp/>INT_MIN);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/>testh(INT_MAX-1,<sp/>INT_MAX);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/>testh(INT_MAX<sp/><sp/>,<sp/>INT_MAX);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/>testh(INT_MIN<sp/><sp/>,<sp/>INT_MAX);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/>testh(INT_MIN+1,<sp/>INT_MAX);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err<sp/>&gt;<sp/>0<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>STB_DIVIDE_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>STB_DIVIDE_IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>INCLUDE_STB_DIVIDE_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="394"><highlight class="comment">------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="395"><highlight class="comment">This<sp/>software<sp/>is<sp/>available<sp/>under<sp/>2<sp/>licenses<sp/>--<sp/>choose<sp/>whichever<sp/>you<sp/>prefer.</highlight></codeline>
<codeline lineno="396"><highlight class="comment">------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="397"><highlight class="comment">ALTERNATIVE<sp/>A<sp/>-<sp/>MIT<sp/>License</highlight></codeline>
<codeline lineno="398"><highlight class="comment">Copyright<sp/>(c)<sp/>2017<sp/>Sean<sp/>Barrett</highlight></codeline>
<codeline lineno="399"><highlight class="comment">Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy<sp/>of</highlight></codeline>
<codeline lineno="400"><highlight class="comment">this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in</highlight></codeline>
<codeline lineno="401"><highlight class="comment">the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to</highlight></codeline>
<codeline lineno="402"><highlight class="comment">use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies</highlight></codeline>
<codeline lineno="403"><highlight class="comment">of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do</highlight></codeline>
<codeline lineno="404"><highlight class="comment">so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="405"><highlight class="comment">The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="406"><highlight class="comment">copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="407"><highlight class="comment">THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="408"><highlight class="comment">IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="409"><highlight class="comment">FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="410"><highlight class="comment">AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="411"><highlight class="comment">LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="412"><highlight class="comment">OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="413"><highlight class="comment">SOFTWARE.</highlight></codeline>
<codeline lineno="414"><highlight class="comment">------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="415"><highlight class="comment">ALTERNATIVE<sp/>B<sp/>-<sp/>Public<sp/>Domain<sp/>(www.unlicense.org)</highlight></codeline>
<codeline lineno="416"><highlight class="comment">This<sp/>is<sp/>free<sp/>and<sp/>unencumbered<sp/>software<sp/>released<sp/>into<sp/>the<sp/>public<sp/>domain.</highlight></codeline>
<codeline lineno="417"><highlight class="comment">Anyone<sp/>is<sp/>free<sp/>to<sp/>copy,<sp/>modify,<sp/>publish,<sp/>use,<sp/>compile,<sp/>sell,<sp/>or<sp/>distribute<sp/>this</highlight></codeline>
<codeline lineno="418"><highlight class="comment">software,<sp/>either<sp/>in<sp/>source<sp/>code<sp/>form<sp/>or<sp/>as<sp/>a<sp/>compiled<sp/>binary,<sp/>for<sp/>any<sp/>purpose,</highlight></codeline>
<codeline lineno="419"><highlight class="comment">commercial<sp/>or<sp/>non-commercial,<sp/>and<sp/>by<sp/>any<sp/>means.</highlight></codeline>
<codeline lineno="420"><highlight class="comment">In<sp/>jurisdictions<sp/>that<sp/>recognize<sp/>copyright<sp/>laws,<sp/>the<sp/>author<sp/>or<sp/>authors<sp/>of<sp/>this</highlight></codeline>
<codeline lineno="421"><highlight class="comment">software<sp/>dedicate<sp/>any<sp/>and<sp/>all<sp/>copyright<sp/>interest<sp/>in<sp/>the<sp/>software<sp/>to<sp/>the<sp/>public</highlight></codeline>
<codeline lineno="422"><highlight class="comment">domain.<sp/>We<sp/>make<sp/>this<sp/>dedication<sp/>for<sp/>the<sp/>benefit<sp/>of<sp/>the<sp/>public<sp/>at<sp/>large<sp/>and<sp/>to</highlight></codeline>
<codeline lineno="423"><highlight class="comment">the<sp/>detriment<sp/>of<sp/>our<sp/>heirs<sp/>and<sp/>successors.<sp/>We<sp/>intend<sp/>this<sp/>dedication<sp/>to<sp/>be<sp/>an</highlight></codeline>
<codeline lineno="424"><highlight class="comment">overt<sp/>act<sp/>of<sp/>relinquishment<sp/>in<sp/>perpetuity<sp/>of<sp/>all<sp/>present<sp/>and<sp/>future<sp/>rights<sp/>to</highlight></codeline>
<codeline lineno="425"><highlight class="comment">this<sp/>software<sp/>under<sp/>copyright<sp/>law.</highlight></codeline>
<codeline lineno="426"><highlight class="comment">THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="427"><highlight class="comment">IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="428"><highlight class="comment">FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="429"><highlight class="comment">AUTHORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="430"><highlight class="comment">ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION</highlight></codeline>
<codeline lineno="431"><highlight class="comment">WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="432"><highlight class="comment">------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="433"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/stb_divide.h"/>
  </compounddef>
</doxygen>
