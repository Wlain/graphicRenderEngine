<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="test__ds_8c" kind="file" language="C++">
    <compoundname>test_ds.c</compoundname>
    <includes local="no">assert.h</includes>
    <includes refid="stb__ds_8h" local="yes">../stb_ds.h</includes>
    <incdepgraph>
      <node id="3">
        <label>../stb_ds.h</label>
        <link refid="stb__ds_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/test_ds.c</label>
        <link refid="test__ds_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>assert.h</label>
      </node>
      <node id="4">
        <label>stddef.h</label>
      </node>
      <node id="6">
        <label>stdlib.h</label>
      </node>
      <node id="5">
        <label>string.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="test__ds_8c_1a42cae13b246659a61c4bf07208188c16" prot="public" static="no">
        <name>STBDS_ASSERT</name>
        <initializer>assert</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/test_ds.c" line="31" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/test_ds.c" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test__ds_8c_1a5e433f795e968cb88e8037fa283993d5" prot="public" static="no">
        <name>STB_DS_IMPLEMENTATION</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/test_ds.c" line="35" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/test_ds.c" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="test__ds_8c_1aee294e4d28fc9af9e71c8811658d6e10" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t churn_inserts</definition>
        <argsstring></argsstring>
        <name>churn_inserts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/test_ds.c" line="38" column="8" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/test_ds.c" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test__ds_8c_1ad54191edaac9860918e2efe8f0ba6f81" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t churn_deletes</definition>
        <argsstring></argsstring>
        <name>churn_deletes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/test_ds.c" line="38" column="22" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/test_ds.c" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="test__ds_8c_1a7e21ce7a526072a1000e52315a6964d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void churn</definition>
        <argsstring>(int a, int b, int count)</argsstring>
        <name>churn</name>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/test_ds.c" line="40" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/test_ds.c" bodystart="40" bodyend="61"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifdef<sp/>DS_PERF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_CRT_SECURE_NO_WARNINGS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_CRT_NONSTDC_NO_DEPRECATE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_CRT_NON_CONFORMING_SWPRINTFS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>STBDS_INTERNAL_SMALL_BUCKET<sp/><sp/><sp/><sp/>//<sp/>make<sp/>64-bit<sp/>bucket<sp/>fit<sp/>both<sp/>keys<sp/>and<sp/>hash<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>STBDS_SIPHASH_2_4<sp/><sp/><sp/><sp/><sp/>//<sp/>performance<sp/>test<sp/>1_3<sp/>against<sp/>2_4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>STBDS_INTERNAL_BUCKET_START<sp/><sp/><sp/><sp/>//<sp/>don&apos;t<sp/>bother<sp/>offseting<sp/>differently<sp/>within<sp/>bucket<sp/>for<sp/>different<sp/>hash<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>STBDS_FLUSH_CACHE<sp/><sp/>(1u&lt;&lt;20)<sp/>//<sp/>do<sp/>this<sp/>much<sp/>memory<sp/>traffic<sp/>to<sp/>flush<sp/>the<sp/>cache<sp/>between<sp/>some<sp/>benchmarking<sp/>measurements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WIN32_LEAN_AND_MEAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_DEFINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_NO_REGISTRY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../stb.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DS_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBDS_UNIT_TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBDS_SMALL_BUCKET</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DS_STATS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBDS_STATISTICS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>DS_PERF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBDS_ASSERT<sp/>assert</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_DS_IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../stb_ds.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>churn_inserts,<sp/>churn_deletes;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>churn(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count)</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key,<ref refid="classvalue" kindref="compound">value</ref>;<sp/>}<sp/>*map=NULL;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,n,k;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>a;<sp/>++i)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>hmput(map,i,i+1);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/>count;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=a;<sp/>j<sp/>&lt;<sp/>b;<sp/>++j,++i)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hmput(map,i,i+1);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hmlen(map)<sp/>==<sp/>b);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=a;<sp/>j<sp/>&lt;<sp/>b;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k=i-j-1;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>hmdel(map,k);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(k<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hmlen(map)<sp/>==<sp/>a);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>hmfree(map);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>churn_inserts<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>churn_deletes<sp/>=<sp/>(b-a)<sp/>*<sp/>n;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DS_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*temp=NULL;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>stbds_unit_tests();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>arrins(temp,<sp/>0,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>arrins(temp,<sp/>arrlen(temp),<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>churn(0,100,1);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>churn(3,7,50000);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>churn(3,15,50000);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>churn(16,<sp/>48,<sp/>25000);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>churn(10,<sp/>15,<sp/>25000);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>churn(200,500,<sp/>5000);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>churn(2000,5000,<sp/>500);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>churn(20000,50000,<sp/>50);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Ok!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DS_STATS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAX(a,b)<sp/>((a)<sp/>&gt;<sp/>(b)<sp/>?<sp/>(a)<sp/>:<sp/>(b))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max_hit_probes,<sp/>max_miss_probes,<sp/>total_put_probes,<sp/>total_miss_probes,<sp/>churn_misses;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>churn_stats(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count)</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key,<ref refid="classvalue" kindref="compound">value</ref>;<sp/>}<sp/>*map=NULL;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,n,k;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>churn_misses<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>a;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>hmput(map,i,i+1);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>max_hit_probes<sp/>=<sp/>MAX(max_hit_probes,<sp/>stbds_hash_probes);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>total_put_probes<sp/>+=<sp/>stbds_hash_probes;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>stbds_hash_probes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/>count;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=a;<sp/>j<sp/>&lt;<sp/>b;<sp/>++j,++i)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hmput(map,i,i+1);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>max_hit_probes<sp/>=<sp/>MAX(max_hit_probes,<sp/>stbds_hash_probes);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>total_put_probes<sp/>+=<sp/>stbds_hash_probes;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbds_hash_probes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j<sp/>&lt;<sp/>(b-a)*10;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k=i+j;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(void)<sp/>hmgeti(map,k);<sp/></highlight><highlight class="comment">//<sp/>miss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>max_miss_probes<sp/>=<sp/>MAX(max_miss_probes,<sp/>stbds_hash_probes);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>total_miss_probes<sp/>+=<sp/>stbds_hash_probes;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbds_hash_probes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++churn_misses;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hmlen(map)<sp/>==<sp/>b);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=a;<sp/>j<sp/>&lt;<sp/>b;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k=i-j-1;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>hmdel(map,k);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbds_hash_probes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(k);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hmlen(map)<sp/>==<sp/>a);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>hmfree(map);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>churn_inserts<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>churn_deletes<sp/>=<sp/>(b-a)<sp/>*<sp/>n;</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reset_stats(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>stbds_array_grow=0,<sp/></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>stbds_hash_grow=0;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>stbds_hash_shrink=0;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>stbds_hash_rebuild=0;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>stbds_hash_probes=0;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>stbds_hash_alloc=0;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>stbds_rehash_probes=0;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>stbds_rehash_items=0;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>max_hit_probes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>max_miss_probes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>total_put_probes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>total_miss_probes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print_churn_probe_stats(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Probes:<sp/>%3d<sp/>max<sp/>hit,<sp/>%3d<sp/>max<sp/>miss,<sp/>%4.2f<sp/>avg<sp/>hit,<sp/>%4.2f<sp/>avg<sp/>miss:<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>max_hit_probes,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>max_miss_probes,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>total_put_probes<sp/>/<sp/>churn_inserts,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>total_miss_probes<sp/>/<sp/>churn_misses,<sp/>str);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>reset_stats();</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arg,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)</highlight></codeline>
<codeline lineno="152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>churn_stats(0,500000,1);<sp/>print_churn_probe_stats(</highlight><highlight class="stringliteral">&quot;Inserting<sp/>500000<sp/>items&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>churn_stats(0,500000,1);<sp/>print_churn_probe_stats(</highlight><highlight class="stringliteral">&quot;Inserting<sp/>500000<sp/>items&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>churn_stats(0,500000,1);<sp/>print_churn_probe_stats(</highlight><highlight class="stringliteral">&quot;Inserting<sp/>500000<sp/>items&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>churn_stats(0,500000,1);<sp/>print_churn_probe_stats(</highlight><highlight class="stringliteral">&quot;Inserting<sp/>500000<sp/>items&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>churn_stats(49000,50000,500);<sp/>print_churn_probe_stats(</highlight><highlight class="stringliteral">&quot;Deleting/Inserting<sp/>500000<sp/>items&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>churn_stats(49000,50000,500);<sp/>print_churn_probe_stats(</highlight><highlight class="stringliteral">&quot;Deleting/Inserting<sp/>500000<sp/>items&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>churn_stats(49000,50000,500);<sp/>print_churn_probe_stats(</highlight><highlight class="stringliteral">&quot;Deleting/Inserting<sp/>500000<sp/>items&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>churn_stats(49000,50000,500);<sp/>print_churn_probe_stats(</highlight><highlight class="stringliteral">&quot;Deleting/Inserting<sp/>500000<sp/>items&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DS_PERF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//char<sp/>*strdup(const<sp/>char<sp/>*foo)<sp/>{<sp/>return<sp/>0;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment">//int<sp/>stricmp(const<sp/>char<sp/>*a,<sp/>const<sp/>char<sp/>*b)<sp/>{<sp/>return<sp/>0;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">//int<sp/>strnicmp(const<sp/>char<sp/>*a,<sp/>const<sp/>char<sp/>*b,<sp/>size_t<sp/>n)<sp/>{<sp/>return<sp/>0;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>__int64<sp/>t0,<sp/>xsum,<sp/>mn,mx,count;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>begin(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="173"><highlight class="normal">{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>LARGE_INTEGER<sp/>m;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>QueryPerformanceCounter(&amp;m);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>t0<sp/>=<sp/>m.QuadPart;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>xsum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>mx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>mn<sp/>=<sp/>~(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>__int64)<sp/>0;</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>measure(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>__int64<sp/>t1,<sp/>t;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>LARGE_INTEGER<sp/>m;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>QueryPerformanceCounter(&amp;m);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>t1<sp/>=<sp/>m.QuadPart;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>t<sp/>=<sp/>t1-t0;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t1<sp/>&lt;<sp/>t0)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;ALERT:<sp/>QueryPerformanceCounter<sp/>was<sp/>unordered!\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&lt;<sp/>mn)<sp/>mn<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>&gt;<sp/>mx)<sp/>mx<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>xsum<sp/>+=<sp/>t;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>++count;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>t0<sp/>=<sp/>t1;</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dont_measure(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="200"><highlight class="normal">{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>LARGE_INTEGER<sp/>m;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>QueryPerformanceCounter(&amp;m);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>t0<sp/>=<sp/>m.QuadPart;</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timer;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>end(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="208"><highlight class="normal">{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>LARGE_INTEGER<sp/>m;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>QueryPerformanceFrequency(&amp;m);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(count<sp/>&gt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>discard<sp/>the<sp/>highest<sp/>and<sp/>lowest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>xsum<sp/>-=<sp/>mn;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>xsum<sp/>-=<sp/>mx;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>-=<sp/>2;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>timer<sp/>=<sp/>(double)<sp/>(xsum)<sp/>/<sp/>count<sp/>/<sp/>m.QuadPart<sp/>*<sp/>1000;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>timer;</highlight></codeline>
<codeline lineno="220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>build(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>)</highlight></codeline>
<codeline lineno="223"><highlight class="normal">{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key,<ref refid="classvalue" kindref="compound">value</ref>;<sp/>}<sp/>*map=NULL;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,n;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>a;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>i*<ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>hmput(map,n,i+1);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>measure();</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>churn_inserts<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>hmfree(map);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>dont_measure();</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB__INCLUDE_STB_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>build_stb(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>)</highlight></codeline>
<codeline lineno="238"><highlight class="normal">{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>stb_idict<sp/>*d<sp/>=<sp/>stb_idict_new_size(8);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>a;<sp/>++i)</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>stb_idict_add(d,<sp/>i*<ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>,<sp/>i+1);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>measure();</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>churn_inserts<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>stb_idict_destroy(d);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>dont_measure();</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>multibuild_stb(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tables)</highlight></codeline>
<codeline lineno="250"><highlight class="normal">{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>stb_idict<sp/>*d[50000];</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,q;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(q=0;<sp/>q<sp/>&lt;<sp/>tables;<sp/>++q)</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>d[q]<sp/>=<sp/>stb_idict_new_size(8);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>dont_measure();</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>a;<sp/>++i)</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(q=0;<sp/>q<sp/>&lt;<sp/>tables;<sp/>++q)</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_idict_add(d[q],<sp/>i*<ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>+q*771,<sp/>i+1);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>measure();</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>churn_inserts<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(q=0;<sp/>q<sp/>&lt;<sp/>tables;<sp/>++q)</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>stb_idict_destroy(d[q]);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>dont_measure();</highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>multisearch_stb(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tables)</highlight></codeline>
<codeline lineno="267"><highlight class="normal">{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>stb_idict<sp/>*d[50000];</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,q,total=0,v;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(q=0;<sp/>q<sp/>&lt;<sp/>tables;<sp/>++q)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>d[q]<sp/>=<sp/>stb_idict_new_size(8);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(q=0;<sp/>q<sp/>&lt;<sp/>tables;<sp/>++q)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>a;<sp/>++i)</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_idict_add(d[q],<sp/>i*<ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>+q*771,<sp/>i+1);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>dont_measure();</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=start;<sp/>i<sp/>&lt;<sp/>end;<sp/>++i)</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(q=0;<sp/>q<sp/>&lt;<sp/>tables;<sp/>++q)</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stb_idict_get_flag(d[q],<sp/>i*<ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>+q*771,<sp/>&amp;v))</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>+=<sp/>v;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>measure();</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>churn_inserts<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(q=0;<sp/>q<sp/>&lt;<sp/>tables;<sp/>++q)</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>stb_idict_destroy(d[q]);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>dont_measure();</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>total;</highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>multisearch(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tables)</highlight></codeline>
<codeline lineno="290"><highlight class="normal">{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key,<ref refid="classvalue" kindref="compound">value</ref>;<sp/>}<sp/>*hash[50000];</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,q,total=0;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(q=0;<sp/>q<sp/>&lt;<sp/>tables;<sp/>++q)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>hash[q]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(q=0;<sp/>q<sp/>&lt;<sp/>tables;<sp/>++q)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>a;<sp/>++i)</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hmput(hash[q],<sp/>i*<ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>+q*771,<sp/>i+1);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>dont_measure();</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=start;<sp/>i<sp/>&lt;<sp/>end;<sp/>++i)</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(q=0;<sp/>q<sp/>&lt;<sp/>tables;<sp/>++q)</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>+=<sp/>hmget(hash[q],<sp/>i*<ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>+q*771);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>measure();</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>churn_inserts<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(q=0;<sp/>q<sp/>&lt;<sp/>tables;<sp/>++q)</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>hmfree(hash[q]);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>dont_measure();</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>total;</highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>churn_skip(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count)</highlight></codeline>
<codeline lineno="311"><highlight class="normal">{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key,<ref refid="classvalue" kindref="compound">value</ref>;<sp/>}<sp/>*map=NULL;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,n,k;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>a;<sp/>++i)</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>hmput(map,i,i+1);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>dont_measure();</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/>count;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=a;<sp/>j<sp/>&lt;<sp/>b;<sp/>++j,++i)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hmput(map,i,i+1);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hmlen(map)<sp/>==<sp/>b);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=a;<sp/>j<sp/>&lt;<sp/>b;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k=i-j-1;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>hmdel(map,k);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(k<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hmlen(map)<sp/>==<sp/>a);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>measure();</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>churn_inserts<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>churn_deletes<sp/>=<sp/>(b-a)<sp/>*<sp/>n;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>hmfree(map);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>dont_measure();</highlight></codeline>
<codeline lineno="334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n[8];<sp/>}<sp/>str32;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>churn32(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>include_startup)</highlight></codeline>
<codeline lineno="338"><highlight class="normal">{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{<sp/>str32<sp/>key;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>;<sp/>}<sp/>*map=NULL;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,n;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>str32<sp/>key<sp/>=<sp/>{<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>a;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>key.n[0]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>hmput(map,key,i+1);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!include_startup)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>dont_measure();</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/>count;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=a;<sp/>j<sp/>&lt;<sp/>b;<sp/>++j,++i)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>key.n[0]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hmput(map,key,i+1);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hmlen(map)<sp/>==<sp/>b);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=a;<sp/>j<sp/>&lt;<sp/>b;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>key.n[0]<sp/>=<sp/>i-j-1;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hmdel(map,key);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hmlen(map)<sp/>==<sp/>a);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>measure();</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>hmfree(map);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>churn_inserts<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>churn_deletes<sp/>=<sp/>(b-a)<sp/>*<sp/>n;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>dont_measure();</highlight></codeline>
<codeline lineno="365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n[32];<sp/>}<sp/>str256;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>churn256(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>include_startup)</highlight></codeline>
<codeline lineno="369"><highlight class="normal">{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{<sp/>str256<sp/>key;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>;<sp/>}<sp/>*map=NULL;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,n;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>str256<sp/>key<sp/>=<sp/>{<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>a;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>key.n[0]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>hmput(map,key,i+1);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!include_startup)</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>dont_measure();</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/>count;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=a;<sp/>j<sp/>&lt;<sp/>b;<sp/>++j,++i)<sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>key.n[0]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hmput(map,key,i+1);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hmlen(map)<sp/>==<sp/>b);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=a;<sp/>j<sp/>&lt;<sp/>b;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>key.n[0]<sp/>=<sp/>i-j-1;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hmdel(map,key);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hmlen(map)<sp/>==<sp/>a);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>measure();</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>hmfree(map);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>churn_inserts<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>churn_deletes<sp/>=<sp/>(b-a)<sp/>*<sp/>n;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>dont_measure();</highlight></codeline>
<codeline lineno="396"><highlight class="normal">}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>churn8(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>include_startup)</highlight></codeline>
<codeline lineno="399"><highlight class="normal">{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>key,<ref refid="classvalue" kindref="compound">value</ref>;<sp/>}<sp/>*map=NULL;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,n,k;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>a;<sp/>++i)</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>hmput(map,i,i+1);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!include_startup)</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>dont_measure();</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/>count;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=a;<sp/>j<sp/>&lt;<sp/>b;<sp/>++j,++i)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hmput(map,i,i+1);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hmlen(map)<sp/>==<sp/>b);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=a;<sp/>j<sp/>&lt;<sp/>b;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k=i-j-1;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>hmdel(map,k);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(k<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hmlen(map)<sp/>==<sp/>a);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>measure();</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>hmfree(map);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>churn_inserts<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>churn_deletes<sp/>=<sp/>(b-a)<sp/>*<sp/>n;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>dont_measure();</highlight></codeline>
<codeline lineno="423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>multichurn4(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>include_startup,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tables)</highlight></codeline>
<codeline lineno="426"><highlight class="normal">{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key,<ref refid="classvalue" kindref="compound">value</ref>;<sp/>}<sp/>*map[50000];</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,n,k,q;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(q=0;<sp/>q<sp/>&lt;<sp/>tables;<sp/>++q)</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>map[q]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>dont_measure();</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>a;<sp/>++i)</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(q=0;<sp/>q<sp/>&lt;<sp/>tables;<sp/>++q)</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hmput(map[q],i,i+1);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!include_startup)</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>dont_measure();</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/>count;<sp/>++n)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=a;<sp/>j<sp/>&lt;<sp/>b;<sp/>++j,++i)<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(q=0;<sp/>q<sp/>&lt;<sp/>tables;<sp/>++q)</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hmput(map[q],i,i+1);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hmlen(map[0])<sp/>==<sp/>b);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=a;<sp/>j<sp/>&lt;<sp/>b;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k=i-j-1;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(q=0;<sp/>q<sp/>&lt;<sp/>tables;<sp/>++q)</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>hmdel(map[q],k);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(k<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hmlen(map[0])<sp/>==<sp/>a);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>measure();</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(q=0;<sp/>q<sp/>&lt;<sp/>tables;<sp/>++q)</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>hmfree(map[q]);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>churn_inserts<sp/>=<sp/>i<sp/>*<sp/>tables;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>churn_deletes<sp/>=<sp/>(b-a)<sp/>*<sp/>n<sp/>*<sp/>tables;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>dont_measure();</highlight></codeline>
<codeline lineno="458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>__int64<sp/>start;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>__int64<sp/>end;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>table_size;</highlight></codeline>
<codeline lineno="464"><highlight class="normal">}<sp/>mstats[32][4000];</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>first_step<sp/>=<sp/>64;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last_step<sp/>=<sp/>384-48;<sp/></highlight><highlight class="comment">//<sp/>32M</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>measure_build4(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>step_log2)</highlight></codeline>
<codeline lineno="470"><highlight class="normal">{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>length;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,k=0;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref><sp/>=<sp/>1<sp/>&lt;&lt;<sp/>step_log2;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>__int64<sp/>t0,t1;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key,<ref refid="classvalue" kindref="compound">value</ref>;<sp/>}<sp/>*map=NULL;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rdtsc_scale;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>begin();</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>t0<sp/>=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>mstats[0][0].start<sp/>=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>256;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>hmput(map,k,k+1);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>+=<sp/><ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>mstats[0][first_step-1].end<sp/>=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>mstats[0][first_step-1].table_size<sp/>=<sp/>k<sp/>&gt;&gt;<sp/>step_log2;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=first_step;<sp/>j<sp/>&lt;<sp/>last_step;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>(1&lt;&lt;(j&gt;&gt;4));<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hmput(map,<sp/>k,k+1);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>+=<sp/><ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>mstats[0][j].end<sp/>=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>mstats[0][j].table_size<sp/>=<sp/>k<sp/>&gt;&gt;<sp/>step_log2;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>t1<sp/>=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>measure();</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>hmfree(map);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>length<sp/>=<sp/>end();</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>rdtsc_scale<sp/>=<sp/>length<sp/>/<sp/>(t1-t0)<sp/>*<sp/>1000;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=1;<sp/>j<sp/>&lt;<sp/>last_step;<sp/>++j)</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>mstats[0][j].start<sp/>=<sp/>mstats[0][0].start;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=first_step-1;<sp/>j<sp/>&lt;<sp/>last_step;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%12.4f,%12d,%12d,0,0,0\n&quot;</highlight><highlight class="normal">,<sp/>(mstats[0][j].end<sp/>-<sp/>mstats[0][j].start)<sp/>*<sp/>rdtsc_scale,<sp/>mstats[0][j].table_size,<sp/>mstats[0][j].table_size);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STBDS_FLUSH_CACHE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cache_index;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>dummy[8][STBDS_FLUSH_CACHE];</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flush_cache(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="513"><highlight class="normal">{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>memmove(dummy[cache_index],dummy[cache_index]+1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(dummy[cache_index])-1);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>cache_index<sp/>=<sp/>(cache_index+1)%8;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dummy[cache_index][0];</highlight></codeline>
<codeline lineno="517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flush_cache(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>measure_average_lookup4(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>step_log2)</highlight></codeline>
<codeline lineno="523"><highlight class="normal">{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>length;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,k=0,q;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref><sp/>=<sp/>1<sp/>&lt;&lt;<sp/>step_log2;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>__int64<sp/>t0,t1;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key,<ref refid="classvalue" kindref="compound">value</ref>;<sp/>}<sp/>*map=NULL;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rdtsc_scale;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>begin();</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>t0<sp/>=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>128;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>hmput(map,k,k+1);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>+=<sp/><ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=first_step;<sp/>j<sp/>&lt;=<sp/>last_step;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>total<sp/>+=<sp/>flush_cache();</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>mstats[0][j].start<sp/>=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(q=i=0;<sp/>i<sp/>&lt;<sp/>50000;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>+=<sp/>hmget(map,<sp/>q);<sp/></highlight><highlight class="comment">//<sp/>hit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++q<sp/>==<sp/>k)<sp/>q<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>mstats[0][j].end<sp/>=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>mstats[0][j].table_size<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>total<sp/>+=<sp/>flush_cache();</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>mstats[1][j].start<sp/>=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>50000;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>+=<sp/>hmget(map,<sp/>i+k);<sp/></highlight><highlight class="comment">//<sp/>miss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>mstats[1][j].end<sp/>=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>mstats[1][j].table_size<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>expand<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>(1&lt;&lt;(j&gt;&gt;4));<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hmput(map,<sp/>k,k+1);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>+=<sp/><ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>t1<sp/>=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>measure();</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>hmfree(map);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>length<sp/>=<sp/>end();</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>rdtsc_scale<sp/>=<sp/>length<sp/>/<sp/>(t1-t0)<sp/>*<sp/>1000;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=first_step;<sp/>j<sp/>&lt;=<sp/>last_step;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>time,table_size,numins,numhit,nummiss,numperflush</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%12.4f,%12d,0,50000,0,0\n&quot;</highlight><highlight class="normal">,<sp/>(mstats[0][j].end<sp/>-<sp/>mstats[0][j].start)<sp/>*<sp/>rdtsc_scale,<sp/>mstats[0][j].table_size);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=first_step;<sp/>j<sp/>&lt;=<sp/>last_step;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%12.4f,%12d,0,0,50000,0\n&quot;</highlight><highlight class="normal">,<sp/>(mstats[1][j].end<sp/>-<sp/>mstats[1][j].start)<sp/>*<sp/>rdtsc_scale,<sp/>mstats[1][j].table_size);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>total;</highlight></codeline>
<codeline lineno="576"><highlight class="normal">}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>measure_worst_lookup4_a(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>step_log2)</highlight></codeline>
<codeline lineno="579"><highlight class="normal">{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>length;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,k=0,q,worst_q,n,z,attempts;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref><sp/>=<sp/>1<sp/>&lt;&lt;<sp/>step_log2;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>__int64<sp/>t0,t1;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>__int64<sp/>m0,m1,worst;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key,<ref refid="classvalue" kindref="compound">value</ref>;<sp/>}<sp/>*map=NULL;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rdtsc_scale;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>begin();</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>t0<sp/>=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>memset(mstats,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mstats));</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=first_step;<sp/>j<sp/>&lt;=<sp/>last_step;<sp/>++j)</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>mstats[0][j].end<sp/>=<sp/>mstats[1][j].end<sp/>=<sp/>~(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>__int64)<sp/>0;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(attempts=0;<sp/>attempts<sp/>&lt;<sp/>2;<sp/>++attempts)<sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>stbds_rand_seed(0);<sp/></highlight><highlight class="comment">//<sp/>force<sp/>us<sp/>to<sp/>get<sp/>the<sp/>same<sp/>table<sp/>every<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>128;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hmput(map,k,k+1);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>+=<sp/><ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=first_step;<sp/>j<sp/>&lt;=<sp/>last_step;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>__int64<sp/>times[32];</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>worst<sp/>hit<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(z=0;<sp/>z<sp/>&lt;<sp/>2;<sp/>++z)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>try<sp/>the<sp/>bisectioning<sp/>measurement<sp/>4<sp/>times</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worst<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/>10;<sp/>++n)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>test<sp/>400<sp/>keys<sp/>total</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>worst<sp/>time<sp/>to<sp/>hit<sp/>20<sp/>keys</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q=0;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worst_q<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>+=<sp/>flush_cache();</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m0<sp/>=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>20;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>+=<sp/>hmget(map,<sp/>q);<sp/></highlight><highlight class="comment">//<sp/>hit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++q<sp/>==<sp/>k)<sp/>q<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>n,<sp/>check<sp/>if<sp/>this<sp/>is<sp/>the<sp/>worst<sp/>lookup<sp/>we&apos;ve<sp/>seen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m1<sp/>-<sp/>m0<sp/>&gt;<sp/>worst)<sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worst<sp/>=<sp/>m1-m0;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worst_q<sp/>=<sp/>q<sp/>-<sp/>i;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(worst_q<sp/>&lt;<sp/>0)<sp/>q<sp/>+=<sp/>k;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>after<sp/>400<sp/>keys,<sp/>take<sp/>the<sp/>worst<sp/>20<sp/>keys,<sp/>and<sp/>try<sp/>each<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worst<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>worst_q;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>20;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>+=<sp/>flush_cache();</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m0<sp/>=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>+=<sp/>hmget(map,<sp/>q);<sp/></highlight><highlight class="comment">//<sp/>hit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m1<sp/>-<sp/>m0<sp/>&gt;<sp/>worst)</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worst<sp/>=<sp/>m1-m0;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++q<sp/>==<sp/>k)<sp/>q<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>times[z]<sp/>=<sp/>worst;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>worst<sp/>time<sp/>in<sp/>the<sp/>bunch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>worst<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>z;<sp/>++i)</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(times[i]<sp/>&gt;<sp/>worst)</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worst<sp/>=<sp/>times[i];</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>take<sp/>the<sp/>best<sp/>of<sp/>&apos;attempts&apos;,<sp/>to<sp/>discard<sp/>outliers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(worst<sp/>&lt;<sp/>mstats[0][j].end)</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mstats[0][j].end<sp/>=<sp/>worst;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mstats[0][j].start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mstats[0][j].table_size<sp/>=<sp/>k<sp/>&gt;&gt;<sp/>step_log2;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>worst<sp/>miss<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(z=0;<sp/>z<sp/>&lt;<sp/>8;<sp/>++z)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>try<sp/>the<sp/>bisectioning<sp/>measurement<sp/>8<sp/>times</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worst<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/>20;<sp/>++n)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>test<sp/>400<sp/>keys<sp/>total</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>worst<sp/>time<sp/>to<sp/>hit<sp/>20<sp/>keys</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q=k;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worst_q<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>+=<sp/>flush_cache();</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m0<sp/>=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>20;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>+=<sp/>hmget(map,<sp/>q);<sp/></highlight><highlight class="comment">//<sp/>hit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>each<sp/>n,<sp/>check<sp/>if<sp/>this<sp/>is<sp/>the<sp/>worst<sp/>lookup<sp/>we&apos;ve<sp/>seen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m1<sp/>-<sp/>m0<sp/>&gt;<sp/>worst)<sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worst<sp/>=<sp/>m1-m0;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worst_q<sp/>=<sp/>q<sp/>-<sp/>i;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>after<sp/>400<sp/>keys,<sp/>take<sp/>the<sp/>worst<sp/>20<sp/>keys,<sp/>and<sp/>try<sp/>each<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worst<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>worst_q;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>20;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>+=<sp/>flush_cache();</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m0<sp/>=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>+=<sp/>hmget(map,<sp/>q);<sp/></highlight><highlight class="comment">//<sp/>hit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m1<sp/>-<sp/>m0<sp/>&gt;<sp/>worst)</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worst<sp/>=<sp/>m1-m0;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>times[z]<sp/>=<sp/>worst;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>worst<sp/>time<sp/>in<sp/>the<sp/>bunch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>worst<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>z;<sp/>++i)</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(times[i]<sp/>&gt;<sp/>worst)</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worst<sp/>=<sp/>times[i];</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(worst<sp/>&lt;<sp/>mstats[1][j].end)</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mstats[1][j].end<sp/>=<sp/>worst;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mstats[1][j].start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mstats[1][j].table_size<sp/>=<sp/>k<sp/>&gt;&gt;<sp/>step_log2;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>expand<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>(1&lt;&lt;(j&gt;&gt;4));<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hmput(map,<sp/>k,k+1);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>+=<sp/><ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>hmfree(map);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/>t1<sp/>=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>measure();</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>length<sp/>=<sp/>end();</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>rdtsc_scale<sp/>=<sp/>length<sp/>/<sp/>(t1-t0)<sp/>*<sp/>1000;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=first_step;<sp/>j<sp/>&lt;=<sp/>last_step;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%12.4f,%12d,0,1,0,1\n&quot;</highlight><highlight class="normal">,<sp/>(mstats[0][j].end<sp/>-<sp/>mstats[0][j].start)<sp/>*<sp/>rdtsc_scale,<sp/>mstats[0][j].table_size);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=first_step;<sp/>j<sp/>&lt;=<sp/>last_step;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%12.4f,%12d,0,0,1,1\n&quot;</highlight><highlight class="normal">,<sp/>(mstats[1][j].end<sp/>-<sp/>mstats[1][j].start)<sp/>*<sp/>rdtsc_scale,<sp/>mstats[1][j].table_size);</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>total;</highlight></codeline>
<codeline lineno="714"><highlight class="normal">}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>measure_worst_lookup4_b(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>step_log2)</highlight></codeline>
<codeline lineno="717"><highlight class="normal">{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>length;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,k=0,q,worst_q,n,z,attempts;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref><sp/>=<sp/>1<sp/>&lt;&lt;<sp/>step_log2;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>__int64<sp/>t0,t1;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>__int64<sp/>m0,m1,worst;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key,<ref refid="classvalue" kindref="compound">value</ref>;<sp/>}<sp/>*map=NULL;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rdtsc_scale;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>begin();</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/>t0<sp/>=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/>memset(mstats,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(mstats));</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=first_step;<sp/>j<sp/>&lt;=<sp/>last_step;<sp/>++j)</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>mstats[0][j].end<sp/>=<sp/>mstats[1][j].end<sp/>=<sp/>~(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>__int64)<sp/>0;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>k<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/>stbds_rand_seed(0);<sp/></highlight><highlight class="comment">//<sp/>force<sp/>us<sp/>to<sp/>get<sp/>the<sp/>same<sp/>table<sp/>every<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>128;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>hmput(map,k,k+1);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>+=<sp/><ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=first_step;<sp/>j<sp/>&lt;=<sp/>last_step;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>__int64<sp/>times[32];</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>worst<sp/>hit<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(z=0;<sp/>z<sp/>&lt;<sp/>8;<sp/>++z)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>try<sp/>this<sp/>8<sp/>times</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>worst<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q=0;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>5000;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>+=<sp/>hmget(map,<sp/>q);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m0<sp/>=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>+=<sp/>hmget(map,<sp/>q);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m1<sp/>-<sp/>m0<sp/>&gt;<sp/>worst)<sp/>{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worst<sp/>=<sp/>m1-m0;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worst_q<sp/>=<sp/>q<sp/>-<sp/>i;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++q<sp/>==<sp/>k)<sp/>q<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>retry<sp/>with<sp/>the<sp/>worst<sp/>one,<sp/>but<sp/>find<sp/>the<sp/>shortest<sp/>time<sp/>for<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>worst<sp/>=<sp/>~(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>__int64)<sp/>0;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>+=<sp/>flush_cache();</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m0<sp/>=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>+=<sp/>hmget(map,worst_q);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m1-m0<sp/>&lt;<sp/>worst)</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worst<sp/>=<sp/>m1-m0;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>times[z]<sp/>=<sp/>worst;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>worst<sp/>of<sp/>those</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>worst<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>z;<sp/>++i)</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(times[i]<sp/>&gt;<sp/>worst)</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worst<sp/>=<sp/>times[i];</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>mstats[0][j].start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>mstats[0][j].end<sp/>=<sp/>worst;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>mstats[0][j].table_size<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>worst<sp/>miss<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(z=0;<sp/>z<sp/>&lt;<sp/>8;<sp/>++z)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>try<sp/>this<sp/>8<sp/>times</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>worst<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>q=k;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>5000;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>+=<sp/>hmget(map,<sp/>q);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m0<sp/>=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>+=<sp/>hmget(map,<sp/>q);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m1<sp/>-<sp/>m0<sp/>&gt;<sp/>worst)<sp/>{</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worst<sp/>=<sp/>m1-m0;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worst_q<sp/>=<sp/>q<sp/>-<sp/>i;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;%6llu<sp/>&quot;,<sp/>m1-m0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>retry<sp/>with<sp/>the<sp/>worst<sp/>one,<sp/>but<sp/>find<sp/>the<sp/>shortest<sp/>time<sp/>for<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>worst<sp/>=<sp/>~(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>__int64)<sp/>0;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>+=<sp/>flush_cache();</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m0<sp/>=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>+=<sp/>hmget(map,worst_q);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1<sp/>=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m1-m0<sp/>&lt;<sp/>worst)</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worst<sp/>=<sp/>m1-m0;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>times[z]<sp/>=<sp/>worst;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>worst<sp/>of<sp/>those</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>worst<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>z;<sp/>++i)</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(times[i]<sp/>&gt;<sp/>worst)</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>worst<sp/>=<sp/>times[i];</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>mstats[1][j].start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>mstats[1][j].end<sp/>=<sp/>worst;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>mstats[1][j].table_size<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>expand<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>(1&lt;&lt;(j&gt;&gt;4));<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hmput(map,<sp/>k,k+1);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>+=<sp/><ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/>hmfree(map);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/>t1<sp/>=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/>measure();</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/>length<sp/>=<sp/>end();</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/>rdtsc_scale<sp/>=<sp/>length<sp/>/<sp/>(t1-t0)<sp/>*<sp/>1000;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=first_step+1;<sp/>j<sp/>&lt;=<sp/>last_step;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%12.4f,%12d,0,1,0,1\n&quot;</highlight><highlight class="normal">,<sp/>(mstats[0][j].end<sp/>-<sp/>mstats[0][j].start)<sp/>*<sp/>rdtsc_scale,<sp/>mstats[0][j].table_size);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=first_step+1;<sp/>j<sp/>&lt;=<sp/>last_step;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%12.4f,%12d,0,0,1,1\n&quot;</highlight><highlight class="normal">,<sp/>(mstats[1][j].end<sp/>-<sp/>mstats[1][j].start)<sp/>*<sp/>rdtsc_scale,<sp/>mstats[1][j].table_size);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>total;</highlight></codeline>
<codeline lineno="836"><highlight class="normal">}</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>measure_uncached_lookup4(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>step_log2)</highlight></codeline>
<codeline lineno="839"><highlight class="normal">{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>length;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,j,k=0,q;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref><sp/>=<sp/>1<sp/>&lt;&lt;<sp/>step_log2;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>__int64<sp/>t0,t1;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key,<ref refid="classvalue" kindref="compound">value</ref>;<sp/>}<sp/>*map=NULL;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rdtsc_scale;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/>begin();</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/>t0<sp/>=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/>map<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>128;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>hmput(map,k,k+1);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>+=<sp/><ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=first_step;<sp/>j<sp/>&lt;=<sp/>last_step;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>mstats[0][j].start<sp/>=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>mstats[0][j].end<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(q=i=0;<sp/>i<sp/>&lt;<sp/>512;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i<sp/>&amp;<sp/>3)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mstats[0][j].end<sp/>+=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>+=<sp/>flush_cache();</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mstats[0][j].start<sp/>+=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>+=<sp/>hmget(map,<sp/>q);<sp/></highlight><highlight class="comment">//<sp/>hit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++q<sp/>==<sp/>k)<sp/>q<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>mstats[0][j].end<sp/>+=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>mstats[0][j].table_size<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>total<sp/>+=<sp/>flush_cache();</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>mstats[1][j].end<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>mstats[1][j].start<sp/>=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>512;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i<sp/>&amp;<sp/>3)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mstats[1][j].end<sp/>+=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>+=<sp/>flush_cache();</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mstats[1][j].start<sp/>+=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>+=<sp/>hmget(map,<sp/>i+k);<sp/></highlight><highlight class="comment">//<sp/>miss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>mstats[1][j].end<sp/>+=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>mstats[1][j].table_size<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>expand<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>(1&lt;&lt;(j&gt;&gt;4));<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hmput(map,<sp/>k,k+1);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>+=<sp/><ref refid="group__core__func__common_1ga015a1261ff23e12650211aa872863cce" kindref="member">step</ref>;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/>hmfree(map);</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/>t1<sp/>=<sp/>__rdtsc();</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/>measure();</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/>length<sp/>=<sp/>end();</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/>rdtsc_scale<sp/>=<sp/>length<sp/>/<sp/>(t1-t0)<sp/>*<sp/>1000;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=first_step;<sp/>j<sp/>&lt;=<sp/>last_step;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%12.4f,%12d,0,512,0,4\n&quot;</highlight><highlight class="normal">,<sp/>(mstats[0][j].end<sp/>-<sp/>mstats[0][j].start)<sp/>*<sp/>rdtsc_scale,<sp/>mstats[0][j].table_size);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=first_step;<sp/>j<sp/>&lt;=<sp/>last_step;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%12.4f,%12d,0,0,512,4\n&quot;</highlight><highlight class="normal">,<sp/>(mstats[1][j].end<sp/>-<sp/>mstats[1][j].start)<sp/>*<sp/>rdtsc_scale,<sp/>mstats[1][j].table_size);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>total;</highlight></codeline>
<codeline lineno="903"><highlight class="normal">}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arg,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**argv)</highlight></codeline>
<codeline lineno="909"><highlight class="normal">{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,s,w;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>worst<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;#<sp/>size_t=%d,&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>cache-lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STBDS_SMALL_BUCKET</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;cacheline=%d,&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;cacheline=%d,&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)==8<sp/>?<sp/>2<sp/>:<sp/>1);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STBDS_FLUSH_CACHE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%d,&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>stbds_log2(STBDS_FLUSH_CACHE));</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;0,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STBDS_BUCKET_START<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>bother<sp/>offseting<sp/>differently<sp/>within<sp/>bucket<sp/>for<sp/>different<sp/>hash<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;STBDS_BUCKET_START,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STBDS_SIPHASH_2_4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;STBDS_SIPHASH_2_4,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/>measure_worst_lookup4_b(0);</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//measure_worst_lookup4_a(0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/>measure_average_lookup4(0);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/>measure_uncached_lookup4(0);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/>measure_build4(0);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/>2000;<sp/>++n)<sp/>{<sp/>build_stb(2000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/>2,000<sp/>inserts<sp/>creating<sp/>2K<sp/>table\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/>500;<sp/>++n)<sp/>{<sp/>build_stb(20000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/><sp/><sp/><sp/>20,000<sp/>inserts<sp/>creating<sp/>20K<sp/>table\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/>100;<sp/>++n)<sp/>{<sp/>build_stb(200000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/><sp/><sp/>200,000<sp/>inserts<sp/>creating<sp/>200K<sp/>table\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/>10;<sp/>++n)<sp/>{<sp/>build_stb(2000000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/>2,000,000<sp/>inserts<sp/>creating<sp/>2M<sp/>table\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/><sp/>5;<sp/>++n)<sp/>{<sp/>build_stb(20000000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>20,000,000<sp/>inserts<sp/>creating<sp/>20M<sp/>table\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/>2000;<sp/>++n)<sp/>{<sp/>churn32(2000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/>2,000<sp/>inserts<sp/>creating<sp/>2K<sp/>table<sp/>w/<sp/>32-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/>500;<sp/>++n)<sp/>{<sp/>churn32(20000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/><sp/><sp/><sp/>20,000<sp/>inserts<sp/>creating<sp/>20K<sp/>table<sp/>w/<sp/>32-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/>100;<sp/>++n)<sp/>{<sp/>churn32(200000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/><sp/><sp/>200,000<sp/>inserts<sp/>creating<sp/>200K<sp/>table<sp/>w/<sp/>32-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/>10;<sp/>++n)<sp/>{<sp/>churn32(2000000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/>2,000,000<sp/>inserts<sp/>creating<sp/>2M<sp/>table<sp/>w/<sp/>32-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/><sp/>5;<sp/>++n)<sp/>{<sp/>churn32(20000000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>20,000,000<sp/>inserts<sp/>creating<sp/>20M<sp/>table<sp/>w/<sp/>32-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/>2000;<sp/>++n)<sp/>{<sp/>churn256(2000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/>2,000<sp/>inserts<sp/>creating<sp/>2K<sp/>table<sp/>w/<sp/>256-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/>500;<sp/>++n)<sp/>{<sp/>churn256(20000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/><sp/><sp/><sp/>20,000<sp/>inserts<sp/>creating<sp/>20K<sp/>table<sp/>w/<sp/>256-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/>100;<sp/>++n)<sp/>{<sp/>churn256(200000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/><sp/><sp/>200,000<sp/>inserts<sp/>creating<sp/>200K<sp/>table<sp/>w/<sp/>256-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/>10;<sp/>++n)<sp/>{<sp/>churn256(2000000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/>2,000,000<sp/>inserts<sp/>creating<sp/>2M<sp/>table<sp/>w/<sp/>256-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/><sp/>5;<sp/>++n)<sp/>{<sp/>churn256(20000000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>20,000,000<sp/>inserts<sp/>creating<sp/>20M<sp/>table<sp/>w/<sp/>256-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/>20;<sp/>++n)<sp/>{<sp/>multisearch_stb(2000,0,2000,1,1000);<sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>2,000,000<sp/>hits<sp/>on<sp/>1,000<sp/><sp/><sp/>2K<sp/>table<sp/>w/<sp/>4-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/>10;<sp/>++n)<sp/>{<sp/>multisearch_stb(20000,0,2000,1,1000);<sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>2,000,000<sp/>hits<sp/>on<sp/>1,000<sp/><sp/>20K<sp/>table<sp/>w/<sp/>4-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/><sp/>6;<sp/>++n)<sp/>{<sp/>multisearch_stb(200000,0,2000,1,1000);<sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>2,000,000<sp/>hits<sp/>on<sp/>1,000<sp/>200K<sp/>table<sp/>w/<sp/>4-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/><sp/>2;<sp/>++n)<sp/>{<sp/>multisearch_stb(2000000,0,20000,1,100);<sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>2,000,000<sp/>hits<sp/>on<sp/><sp/><sp/>100<sp/><sp/><sp/>2M<sp/>table<sp/>w/<sp/>4-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/>20;<sp/>++n)<sp/>{<sp/>multisearch<sp/><sp/><sp/><sp/>(2000,0,2000,1,1000);<sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>2,000,000<sp/>hits<sp/>on<sp/>1,000<sp/><sp/><sp/>2K<sp/>table<sp/>w/<sp/>4-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/>10;<sp/>++n)<sp/>{<sp/>multisearch<sp/><sp/><sp/><sp/>(20000,0,2000,1,1000);<sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>2,000,000<sp/>hits<sp/>on<sp/>1,000<sp/><sp/>20K<sp/>table<sp/>w/<sp/>4-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/><sp/>6;<sp/>++n)<sp/>{<sp/>multisearch<sp/><sp/><sp/><sp/>(200000,0,2000,1,1000);<sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>2,000,000<sp/>hits<sp/>on<sp/>1,000<sp/>200K<sp/>table<sp/>w/<sp/>4-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/><sp/>2;<sp/>++n)<sp/>{<sp/>multisearch<sp/><sp/><sp/><sp/>(2000000,0,20000,1,100);<sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>2,000,000<sp/>hits<sp/>on<sp/><sp/><sp/>100<sp/><sp/><sp/>2M<sp/>table<sp/>w/<sp/>4-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/><sp/>2;<sp/>++n)<sp/>{<sp/>multibuild_stb(2000,0,0,1,10000);<sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>20,000,000<sp/>inserts<sp/>creating<sp/>10,000<sp/><sp/><sp/>2K<sp/>table<sp/>w/<sp/>4-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/><sp/>2;<sp/>++n)<sp/>{<sp/>multibuild_stb(20000,0,0,1,1000);<sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>20,000,000<sp/>inserts<sp/>creating<sp/><sp/>1,000<sp/><sp/>20K<sp/>table<sp/>w/<sp/>4-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/><sp/>2;<sp/>++n)<sp/>{<sp/>multibuild_stb(200000,0,0,1,100);<sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>20,000,000<sp/>inserts<sp/>creating<sp/><sp/><sp/><sp/>100<sp/>200K<sp/>table<sp/>w/<sp/>4-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/><sp/>2;<sp/>++n)<sp/>{<sp/>multibuild_stb(2000000,0,0,1,10);<sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>20,000,000<sp/>inserts<sp/>creating<sp/><sp/><sp/><sp/><sp/>10<sp/><sp/><sp/>2M<sp/>table<sp/>w/<sp/>4-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/><sp/>2;<sp/>++n)<sp/>{<sp/>multichurn4(2000,0,0,1,10000);<sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>20,000,000<sp/>inserts<sp/>creating<sp/>10,000<sp/><sp/><sp/>2K<sp/>table<sp/>w/<sp/>4-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/><sp/>2;<sp/>++n)<sp/>{<sp/>multichurn4(20000,0,0,1,1000);<sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>20,000,000<sp/>inserts<sp/>creating<sp/><sp/>1,000<sp/><sp/>20K<sp/>table<sp/>w/<sp/>4-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/><sp/>2;<sp/>++n)<sp/>{<sp/>multichurn4(200000,0,0,1,100);<sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>20,000,000<sp/>inserts<sp/>creating<sp/><sp/><sp/><sp/>100<sp/>200K<sp/>table<sp/>w/<sp/>4-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/><sp/>2;<sp/>++n)<sp/>{<sp/>multichurn4(2000000,0,0,1,10);<sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>20,000,000<sp/>inserts<sp/>creating<sp/><sp/><sp/><sp/><sp/>10<sp/><sp/><sp/>2M<sp/>table<sp/>w/<sp/>4-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/>2000;<sp/>++n)<sp/>{<sp/>build(2000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/>2,000<sp/>inserts<sp/>creating<sp/>2K<sp/>table<sp/>w/<sp/>4-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/>500;<sp/>++n)<sp/>{<sp/>build(20000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/><sp/><sp/><sp/>20,000<sp/>inserts<sp/>creating<sp/>20K<sp/>table<sp/>w/<sp/>4-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/>100;<sp/>++n)<sp/>{<sp/>build(200000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/><sp/><sp/>200,000<sp/>inserts<sp/>creating<sp/>200K<sp/>table<sp/>w/<sp/>4-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/>10;<sp/>++n)<sp/>{<sp/>build(2000000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/>2,000,000<sp/>inserts<sp/>creating<sp/>2M<sp/>table<sp/>w/<sp/>4-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/><sp/>5;<sp/>++n)<sp/>{<sp/>build(20000000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>20,000,000<sp/>inserts<sp/>creating<sp/>20M<sp/>table<sp/>w/<sp/>4-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/>2000;<sp/>++n)<sp/>{<sp/>churn8(2000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/>2,000<sp/>inserts<sp/>creating<sp/>2K<sp/>table<sp/>w/<sp/>8-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/>500;<sp/>++n)<sp/>{<sp/>churn8(20000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/><sp/><sp/><sp/>20,000<sp/>inserts<sp/>creating<sp/>20K<sp/>table<sp/>w/<sp/>8-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/>100;<sp/>++n)<sp/>{<sp/>churn8(200000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/><sp/><sp/>200,000<sp/>inserts<sp/>creating<sp/>200K<sp/>table<sp/>w/<sp/>8-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/>10;<sp/>++n)<sp/>{<sp/>churn8(2000000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/>2,000,000<sp/>inserts<sp/>creating<sp/>2M<sp/>table<sp/>w/<sp/>8-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/><sp/>5;<sp/>++n)<sp/>{<sp/>churn8(20000000,0,0,1);<sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>20,000,000<sp/>inserts<sp/>creating<sp/>20M<sp/>table<sp/>w/<sp/>8-byte<sp/>key\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/>60;<sp/>++n)<sp/>{<sp/>churn_skip(2000,2100,5000);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>500,000<sp/>inserts<sp/>&amp;<sp/>deletes<sp/>in<sp/>2K<sp/>table\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/>30;<sp/>++n)<sp/>{<sp/>churn_skip(20000,21000,500);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>500,000<sp/>inserts<sp/>&amp;<sp/>deletes<sp/>in<sp/>20K<sp/>table\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/>15;<sp/>++n)<sp/>{<sp/>churn_skip(200000,201000,500);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>500,000<sp/>inserts<sp/>&amp;<sp/>deletes<sp/>in<sp/>200K<sp/>table\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/><sp/>8;<sp/>++n)<sp/>{<sp/>churn_skip(2000000,2001000,500);<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>500,000<sp/>inserts<sp/>&amp;<sp/>deletes<sp/>in<sp/>2M<sp/>table\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/><sp/>5;<sp/>++n)<sp/>{<sp/>churn_skip(20000000,20001000,500);<sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>500,000<sp/>inserts<sp/>&amp;<sp/>deletes<sp/>in<sp/>20M<sp/>table\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/><sp/>1;<sp/>++n)<sp/>{<sp/>churn_skip(200000000u,200001000u,500);<sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>500,000<sp/>inserts<sp/>&amp;<sp/>deletes<sp/>in<sp/>200M<sp/>table\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>even<sp/>though<sp/>the<sp/>above<sp/>measures<sp/>a<sp/>roughly<sp/>fixed<sp/>amount<sp/>of<sp/>work,<sp/>we<sp/>still<sp/>have<sp/>to<sp/>build<sp/>the<sp/>table<sp/>n<sp/>times,<sp/>hence<sp/>the<sp/>fewer<sp/>measurements<sp/>each<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/>60;<sp/>++n)<sp/>{<sp/>churn_skip(1000,3000,250);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/><sp/><sp/>500,000<sp/>inserts<sp/>&amp;<sp/>deletes<sp/>in<sp/>2K<sp/>table\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/>15;<sp/>++n)<sp/>{<sp/>churn_skip(10000,30000,25);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/><sp/><sp/>500,000<sp/>inserts<sp/>&amp;<sp/>deletes<sp/>in<sp/>20K<sp/>table\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/><sp/>7;<sp/>++n)<sp/>{<sp/>churn_skip(100000,300000,10);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/><sp/>2,000,000<sp/>inserts<sp/>&amp;<sp/>deletes<sp/>in<sp/>200K<sp/>table\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/><sp/><sp/><sp/>2;<sp/>++n)<sp/>{<sp/>churn_skip(1000000,3000000,10);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>end();<sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms<sp/>:<sp/>20,000,000<sp/>inserts<sp/>&amp;<sp/>deletes<sp/>in<sp/>2M<sp/>table\n&quot;</highlight><highlight class="normal">,<sp/>timer);</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>search<sp/>for<sp/>bad<sp/>intervals..<sp/>in<sp/>practice<sp/>this<sp/>just<sp/>seems<sp/>to<sp/>measure<sp/>execution<sp/>variance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(s<sp/>=<sp/>2;<sp/>s<sp/>&lt;<sp/>64;<sp/>++s)<sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/>50;<sp/>++n)<sp/>{<sp/>build(200000,0,0,s);<sp/>}<sp/>end();</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timer<sp/>&gt;<sp/>worst)<sp/>{</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>worst<sp/>=<sp/>timer;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>s<sp/>&lt;=<sp/>1024;<sp/>s<sp/>*=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/>begin();<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(n=0;<sp/>n<sp/>&lt;<sp/>50;<sp/>++n)<sp/>{<sp/>build(200000,0,0,s);<sp/>}<sp/>end();</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(timer<sp/>&gt;<sp/>worst)<sp/>{</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>worst<sp/>=<sp/>timer;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;<sp/><sp/>//<sp/>%7.2fms(%d)<sp/><sp/><sp/>:<sp/>Worst<sp/>time<sp/>from<sp/>inserting<sp/>200,000<sp/>items<sp/>with<sp/>spacing<sp/>%d.\n&quot;</highlight><highlight class="normal">,<sp/>worst,<sp/>w,<sp/>w);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/test_ds.c"/>
  </compounddef>
</doxygen>
