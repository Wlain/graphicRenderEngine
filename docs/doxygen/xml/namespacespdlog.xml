<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="namespacespdlog" kind="namespace" language="C++">
    <compoundname>spdlog</compoundname>
    <innerclass refid="structspdlog_1_1async__factory__impl" prot="public">spdlog::async_factory_impl</innerclass>
    <innerclass refid="classspdlog_1_1async__logger" prot="public">spdlog::async_logger</innerclass>
    <innerclass refid="classspdlog_1_1custom__flag__formatter" prot="public">spdlog::custom_flag_formatter</innerclass>
    <innerclass refid="structspdlog_1_1file__event__handlers" prot="public">spdlog::file_event_handlers</innerclass>
    <innerclass refid="classspdlog_1_1formatter" prot="public">spdlog::formatter</innerclass>
    <innerclass refid="structspdlog_1_1is__convertible__to__any__format__string" prot="public">spdlog::is_convertible_to_any_format_string</innerclass>
    <innerclass refid="structspdlog_1_1is__convertible__to__basic__format__string" prot="public">spdlog::is_convertible_to_basic_format_string</innerclass>
    <innerclass refid="classspdlog_1_1logger" prot="public">spdlog::logger</innerclass>
    <innerclass refid="classspdlog_1_1pattern__formatter" prot="public">spdlog::pattern_formatter</innerclass>
    <innerclass refid="structspdlog_1_1source__loc" prot="public">spdlog::source_loc</innerclass>
    <innerclass refid="classspdlog_1_1spdlog__ex" prot="public">spdlog::spdlog_ex</innerclass>
    <innerclass refid="classspdlog_1_1stopwatch" prot="public">spdlog::stopwatch</innerclass>
    <innerclass refid="structspdlog_1_1synchronous__factory" prot="public">spdlog::synchronous_factory</innerclass>
    <innernamespace refid="namespacespdlog_1_1cfg">spdlog::cfg</innernamespace>
    <innernamespace refid="namespacespdlog_1_1details">spdlog::details</innernamespace>
    <innernamespace refid="namespacespdlog_1_1fmt__lib">spdlog::fmt_lib</innernamespace>
    <innernamespace refid="namespacespdlog_1_1level">spdlog::level</innernamespace>
    <innernamespace refid="namespacespdlog_1_1sinks">spdlog::sinks</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="async__logger_8h_1a42e109759a11c9514d3f6313a7709852" prot="public" static="no" strong="yes">
        <type></type>
        <name>async_overflow_policy</name>
        <enumvalue id="async__logger_8h_1a42e109759a11c9514d3f6313a7709852a14511f2f5564650d129ca7cabc333278" prot="public">
          <name>block</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="async__logger_8h_1a42e109759a11c9514d3f6313a7709852a6d09cc54ae10145444aa2f43fe46d9f2" prot="public">
          <name>overrun_oldest</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/async_logger.h" line="22" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/async_logger.h" bodystart="23" bodyend="27"/>
      </memberdef>
      <memberdef kind="enum" id="spdlog_2include_2spdlog_2common_8h_1ab7d59ff9d834b3a3f0e553bfc302edc0" prot="public" static="no" strong="yes">
        <type></type>
        <name>color_mode</name>
        <enumvalue id="spdlog_2include_2spdlog_2common_8h_1ab7d59ff9d834b3a3f0e553bfc302edc0af9f90eeaf400d228facde6bc48da5cfb" prot="public">
          <name>always</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="spdlog_2include_2spdlog_2common_8h_1ab7d59ff9d834b3a3f0e553bfc302edc0a2bd9c0ed00116be1258e0cc66617d7c8" prot="public">
          <name>automatic</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="spdlog_2include_2spdlog_2common_8h_1ab7d59ff9d834b3a3f0e553bfc302edc0ac7561db7a418dd39b2201dfe110ab4a4" prot="public">
          <name>never</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/common.h" line="256" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/common.h" bodystart="257" bodyend="261"/>
      </memberdef>
      <memberdef kind="enum" id="spdlog_2include_2spdlog_2common_8h_1ad598fbd8338772e66ae09e8723a07ced" prot="public" static="no" strong="yes">
        <type></type>
        <name>pattern_time_type</name>
        <enumvalue id="spdlog_2include_2spdlog_2common_8h_1ad598fbd8338772e66ae09e8723a07cedaf5ddaf0ca7929578b408c909429f68f2" prot="public">
          <name>local</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="spdlog_2include_2spdlog_2common_8h_1ad598fbd8338772e66ae09e8723a07ceda52d33cb937bbdab234ab1729a0f8225b" prot="public">
          <name>utc</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/common.h" line="267" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/common.h" bodystart="268" bodyend="271"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="async_8h_1a962b94a80258f9a202d590888349577c" prot="public" static="no">
        <type><ref refid="structspdlog_1_1async__factory__impl" kindref="compound">async_factory_impl</ref>&lt; async_overflow_policy::block &gt;</type>
        <definition>using spdlog::async_factory = typedef async_factory_impl&lt;async_overflow_policy::block&gt;</definition>
        <argsstring></argsstring>
        <name>async_factory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/async.h" line="60" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/async.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="async_8h_1a796f2e548cff4f12a5b2a52b07d3128b" prot="public" static="no">
        <type><ref refid="structspdlog_1_1async__factory__impl" kindref="compound">async_factory_impl</ref>&lt; async_overflow_policy::overrun_oldest &gt;</type>
        <definition>using spdlog::async_factory_nonblock = typedef async_factory_impl&lt;async_overflow_policy::overrun_oldest&gt;</definition>
        <argsstring></argsstring>
        <name>async_factory_nonblock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/async.h" line="61" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/async.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="spdlog_2include_2spdlog_2common_8h_1acf7ce125b3622e44f8f1702d699e0b06" prot="public" static="no">
        <type>std::string</type>
        <definition>using spdlog::filename_t = typedef std::string</definition>
        <argsstring></argsstring>
        <name>filename_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/common.h" line="122" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/common.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="spdlog_2include_2spdlog_2common_8h_1a173dd7064323e4807d720eabcc95fc73" prot="public" static="no">
        <type>std::chrono::system_clock</type>
        <definition>using spdlog::log_clock = typedef std::chrono::system_clock</definition>
        <argsstring></argsstring>
        <name>log_clock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/common.h" line="126" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/common.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="spdlog_2include_2spdlog_2common_8h_1a422c57d3088160b517e5a74e5f318253" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1sinks_1_1sink" kindref="compound">sinks::sink</ref> &gt;</type>
        <definition>using spdlog::sink_ptr = typedef std::shared_ptr&lt;sinks::sink&gt;</definition>
        <argsstring></argsstring>
        <name>sink_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/common.h" line="127" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/common.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="spdlog_2include_2spdlog_2common_8h_1aa9b5c2298bf713fbe02b7e538d797ecd" prot="public" static="no">
        <type>std::initializer_list&lt; sink_ptr &gt;</type>
        <definition>using spdlog::sinks_init_list = typedef std::initializer_list&lt;sink_ptr&gt;</definition>
        <argsstring></argsstring>
        <name>sinks_init_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/common.h" line="128" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/common.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="spdlog_2include_2spdlog_2common_8h_1a17095dbbb312b0ad42ebb05694e19b41" prot="public" static="no">
        <type>std::function&lt; void(const std::string &amp;err_msg)&gt;</type>
        <definition>using spdlog::err_handler = typedef std::function&lt;void(const std::string &amp;err_msg)&gt;</definition>
        <argsstring></argsstring>
        <name>err_handler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/common.h" line="129" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/common.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="spdlog_2include_2spdlog_2common_8h_1ab1e9c8f66f23b10ea93694f7d0780f5f" prot="public" static="no">
        <type>fmt::basic_string_view&lt; char &gt;</type>
        <definition>using spdlog::string_view_t = typedef fmt::basic_string_view&lt;char&gt;</definition>
        <argsstring></argsstring>
        <name>string_view_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/common.h" line="154" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/common.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="spdlog_2include_2spdlog_2common_8h_1aea76058cddbce57c4ee8b6a1985de360" prot="public" static="no">
        <type>fmt::basic_memory_buffer&lt; char, 250 &gt;</type>
        <definition>using spdlog::memory_buf_t = typedef fmt::basic_memory_buffer&lt;char, 250&gt;</definition>
        <argsstring></argsstring>
        <name>memory_buf_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/common.h" line="155" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/common.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="spdlog_2include_2spdlog_2common_8h_1a2803eef37fa678cddc5ee625fc936484" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>fmt::format_string&lt; Args... &gt;</type>
        <definition>using spdlog::format_string_t = typedef fmt::format_string&lt;Args...&gt;</definition>
        <argsstring></argsstring>
        <name>format_string_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/common.h" line="158" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/common.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="spdlog_2include_2spdlog_2common_8h_1a87778d401efc6a7ddc240cab201573e4" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>typename std::remove_cv&lt; typename std::remove_reference&lt; T &gt;::type &gt;::type</type>
        <definition>using spdlog::remove_cvref_t = typedef typename std::remove_cv&lt;typename std::remove_reference&lt;T&gt;::type&gt;::type</definition>
        <argsstring></argsstring>
        <name>remove_cvref_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/common.h" line="161" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/common.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="spdlog_2include_2spdlog_2common_8h_1a8585bf495310a6ce695191739351709b" prot="public" static="no">
        <type>std::atomic&lt; int &gt;</type>
        <definition>using spdlog::level_t = typedef std::atomic&lt;int&gt;</definition>
        <argsstring></argsstring>
        <name>level_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/common.h" line="194" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/common.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="spdlog_8h_1a349fb42bd8e759a32021b46fcdaca6c6" prot="public" static="no">
        <type><ref refid="structspdlog_1_1synchronous__factory" kindref="compound">synchronous_factory</ref></type>
        <definition>using spdlog::default_factory = typedef synchronous_factory</definition>
        <argsstring></argsstring>
        <name>default_factory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" line="25" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="async_8h_1a816ea44810cdc2c91fe6f4dc8440c366" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Sink</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>SinkArgs</declname>
            <defname>SinkArgs</defname>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">spdlog::logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt; spdlog::logger &gt; spdlog::create_async</definition>
        <argsstring>(std::string logger_name, SinkArgs &amp;&amp;... sink_args)</argsstring>
        <name>create_async</name>
        <param>
          <type>std::string</type>
          <declname>logger_name</declname>
        </param>
        <param>
          <type>SinkArgs &amp;&amp;...</type>
          <declname>sink_args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/async.h" line="64" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/async.h" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="async_8h_1af5991cd45ae11b84cc004bc43b6b75da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Sink</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>SinkArgs</declname>
            <defname>SinkArgs</defname>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">spdlog::logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt; spdlog::logger &gt; spdlog::create_async_nb</definition>
        <argsstring>(std::string logger_name, SinkArgs &amp;&amp;... sink_args)</argsstring>
        <name>create_async_nb</name>
        <param>
          <type>std::string</type>
          <declname>logger_name</declname>
        </param>
        <param>
          <type>SinkArgs &amp;&amp;...</type>
          <declname>sink_args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/async.h" line="70" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/async.h" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="async_8h_1afc9262edd6352dd95b60f653c3eda7ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void spdlog::init_thread_pool</definition>
        <argsstring>(size_t q_size, size_t thread_count, std::function&lt; void()&gt; on_thread_start, std::function&lt; void()&gt; on_thread_stop)</argsstring>
        <name>init_thread_pool</name>
        <param>
          <type>size_t</type>
          <declname>q_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>thread_count</declname>
        </param>
        <param>
          <type>std::function&lt; void()&gt;</type>
          <declname>on_thread_start</declname>
        </param>
        <param>
          <type>std::function&lt; void()&gt;</type>
          <declname>on_thread_stop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/async.h" line="76" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/async.h" bodystart="76" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="async_8h_1a4a4810f4db03046f10ae35b43abb8184" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void spdlog::init_thread_pool</definition>
        <argsstring>(size_t q_size, size_t thread_count, std::function&lt; void()&gt; on_thread_start)</argsstring>
        <name>init_thread_pool</name>
        <param>
          <type>size_t</type>
          <declname>q_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>thread_count</declname>
        </param>
        <param>
          <type>std::function&lt; void()&gt;</type>
          <declname>on_thread_start</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/async.h" line="83" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/async.h" bodystart="83" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="async_8h_1a17a4d95759b4076827905fd8f6b10d36" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void spdlog::init_thread_pool</definition>
        <argsstring>(size_t q_size, size_t thread_count)</argsstring>
        <name>init_thread_pool</name>
        <param>
          <type>size_t</type>
          <declname>q_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>thread_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/async.h" line="88" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/async.h" bodystart="88" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="async_8h_1a16a3355d0b9d9341212a9948bb9fa362" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1details_1_1thread__pool" kindref="compound">spdlog::details::thread_pool</ref> &gt;</type>
        <definition>std::shared_ptr&lt; spdlog::details::thread_pool &gt; spdlog::thread_pool</definition>
        <argsstring>()</argsstring>
        <name>thread_pool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/async.h" line="95" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/async.h" bodystart="95" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="common-inl_8h_1ac3d8b7e83aad48720518fbac80836c3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPDLOG_INLINE void</type>
        <definition>SPDLOG_API void spdlog::throw_spdlog_ex</definition>
        <argsstring>(const std::string &amp;msg, int last_errno)</argsstring>
        <name>throw_spdlog_ex</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>last_errno</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/common-inl.h" line="72" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/common-inl.h" bodystart="72" bodyend="75" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/common.h" declline="287" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="common-inl_8h_1a35f74b3de70966b485634cefddc89482" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPDLOG_INLINE void</type>
        <definition>SPDLOG_API void spdlog::throw_spdlog_ex</definition>
        <argsstring>(std::string msg)</argsstring>
        <name>throw_spdlog_ex</name>
        <param>
          <type>std::string</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/common-inl.h" line="77" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/common-inl.h" bodystart="77" bodyend="80" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/common.h" declline="288" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="bin__to__hex_8h_1ab2b79a541b4b50a97290477b38bd7468" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type><ref refid="classspdlog_1_1details_1_1dump__info" kindref="compound">details::dump_info</ref>&lt; typename Container::const_iterator &gt;</type>
        <definition>details::dump_info&lt; typename Container::const_iterator &gt; spdlog::to_hex</definition>
        <argsstring>(const Container &amp;container, size_t size_per_line=32)</argsstring>
        <name>to_hex</name>
        <param>
          <type>const Container &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size_per_line</declname>
          <defval>32</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bin_to_hex.h" line="72" column="27" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bin_to_hex.h" bodystart="72" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="bin__to__hex_8h_1a79c212fa4641d0fd0f211c66b2565145" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename It</type>
          </param>
        </templateparamlist>
        <type><ref refid="classspdlog_1_1details_1_1dump__info" kindref="compound">details::dump_info</ref>&lt; It &gt;</type>
        <definition>details::dump_info&lt; It &gt; spdlog::to_hex</definition>
        <argsstring>(const It range_begin, const It range_end, size_t size_per_line=32)</argsstring>
        <name>to_hex</name>
        <param>
          <type>const It</type>
          <declname>range_begin</declname>
        </param>
        <param>
          <type>const It</type>
          <declname>range_end</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size_per_line</declname>
          <defval>32</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bin_to_hex.h" line="95" column="27" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bin_to_hex.h" bodystart="95" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="logger-inl_8h_1a722a6537a51b47603039c380f22472e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPDLOG_INLINE void</type>
        <definition>void spdlog::swap</definition>
        <argsstring>(logger &amp;a, logger &amp;b)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/logger-inl.h" line="62" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/logger-inl.h" bodystart="62" bodyend="65" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/logger.h" declline="441" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="basic__file__sink_8h_1a2eb74c26f4058613a40baf1e1e612782" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
            <defval><ref refid="structspdlog_1_1synchronous__factory" kindref="compound">spdlog::synchronous_factory</ref></defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt; logger &gt; spdlog::basic_logger_mt</definition>
        <argsstring>(const std::string &amp;logger_name, const filename_t &amp;filename, bool truncate=false, const file_event_handlers &amp;event_handlers={})</argsstring>
        <name>basic_logger_mt</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <param>
          <type>const filename_t &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>truncate</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const <ref refid="structspdlog_1_1file__event__handlers" kindref="compound">file_event_handlers</ref> &amp;</type>
          <declname>event_handlers</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/basic_file_sink.h" line="43" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/basic_file_sink.h" bodystart="43" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="basic__file__sink_8h_1a90913683372b5b66851e62af08032942" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
            <defval><ref refid="structspdlog_1_1synchronous__factory" kindref="compound">spdlog::synchronous_factory</ref></defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt; logger &gt; spdlog::basic_logger_st</definition>
        <argsstring>(const std::string &amp;logger_name, const filename_t &amp;filename, bool truncate=false, const file_event_handlers &amp;event_handlers={})</argsstring>
        <name>basic_logger_st</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <param>
          <type>const filename_t &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>truncate</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const <ref refid="structspdlog_1_1file__event__handlers" kindref="compound">file_event_handlers</ref> &amp;</type>
          <declname>event_handlers</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/basic_file_sink.h" line="50" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/basic_file_sink.h" bodystart="50" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="daily__file__sink_8h_1a567e25496cb556661b8ab863102f431b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
            <defval><ref refid="structspdlog_1_1synchronous__factory" kindref="compound">spdlog::synchronous_factory</ref></defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt; logger &gt; spdlog::daily_logger_mt</definition>
        <argsstring>(const std::string &amp;logger_name, const filename_t &amp;filename, int hour=0, int minute=0, bool truncate=false, uint16_t max_files=0, const file_event_handlers &amp;event_handlers={})</argsstring>
        <name>daily_logger_mt</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <param>
          <type>const filename_t &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hour</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>minute</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>truncate</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>max_files</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="structspdlog_1_1file__event__handlers" kindref="compound">file_event_handlers</ref> &amp;</type>
          <declname>event_handlers</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/daily_file_sink.h" line="266" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/daily_file_sink.h" bodystart="266" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="daily__file__sink_8h_1a82e1fd25637249d1448014986861b41e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
            <defval><ref refid="structspdlog_1_1synchronous__factory" kindref="compound">spdlog::synchronous_factory</ref></defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt; logger &gt; spdlog::daily_logger_format_mt</definition>
        <argsstring>(const std::string &amp;logger_name, const filename_t &amp;filename, int hour=0, int minute=0, bool truncate=false, uint16_t max_files=0, const file_event_handlers &amp;event_handlers={})</argsstring>
        <name>daily_logger_format_mt</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <param>
          <type>const filename_t &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hour</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>minute</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>truncate</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>max_files</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="structspdlog_1_1file__event__handlers" kindref="compound">file_event_handlers</ref> &amp;</type>
          <declname>event_handlers</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/daily_file_sink.h" line="273" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/daily_file_sink.h" bodystart="273" bodyend="278"/>
      </memberdef>
      <memberdef kind="function" id="daily__file__sink_8h_1a16799bacf5fa6f6585f26e13fef9c999" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
            <defval><ref refid="structspdlog_1_1synchronous__factory" kindref="compound">spdlog::synchronous_factory</ref></defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt; logger &gt; spdlog::daily_logger_st</definition>
        <argsstring>(const std::string &amp;logger_name, const filename_t &amp;filename, int hour=0, int minute=0, bool truncate=false, uint16_t max_files=0, const file_event_handlers &amp;event_handlers={})</argsstring>
        <name>daily_logger_st</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <param>
          <type>const filename_t &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hour</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>minute</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>truncate</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>max_files</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="structspdlog_1_1file__event__handlers" kindref="compound">file_event_handlers</ref> &amp;</type>
          <declname>event_handlers</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/daily_file_sink.h" line="281" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/daily_file_sink.h" bodystart="281" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="daily__file__sink_8h_1ae930db93e3f9686d875059200b82c09c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
            <defval><ref refid="structspdlog_1_1synchronous__factory" kindref="compound">spdlog::synchronous_factory</ref></defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt; logger &gt; spdlog::daily_logger_format_st</definition>
        <argsstring>(const std::string &amp;logger_name, const filename_t &amp;filename, int hour=0, int minute=0, bool truncate=false, uint16_t max_files=0, const file_event_handlers &amp;event_handlers={})</argsstring>
        <name>daily_logger_format_st</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <param>
          <type>const filename_t &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hour</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>minute</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>truncate</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>max_files</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="structspdlog_1_1file__event__handlers" kindref="compound">file_event_handlers</ref> &amp;</type>
          <declname>event_handlers</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/daily_file_sink.h" line="288" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/daily_file_sink.h" bodystart="288" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="hourly__file__sink_8h_1af895bbb97e7104f4bc7f6ca5f1333d30" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
            <defval><ref refid="structspdlog_1_1synchronous__factory" kindref="compound">spdlog::synchronous_factory</ref></defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt; logger &gt; spdlog::hourly_logger_mt</definition>
        <argsstring>(const std::string &amp;logger_name, const filename_t &amp;filename, bool truncate=false, uint16_t max_files=0, const file_event_handlers &amp;event_handlers={})</argsstring>
        <name>hourly_logger_mt</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <param>
          <type>const filename_t &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>truncate</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>max_files</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="structspdlog_1_1file__event__handlers" kindref="compound">file_event_handlers</ref> &amp;</type>
          <declname>event_handlers</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/hourly_file_sink.h" line="184" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/hourly_file_sink.h" bodystart="184" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="hourly__file__sink_8h_1ae3927806345c2426fd6295199d48899d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
            <defval><ref refid="structspdlog_1_1synchronous__factory" kindref="compound">spdlog::synchronous_factory</ref></defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt; logger &gt; spdlog::hourly_logger_st</definition>
        <argsstring>(const std::string &amp;logger_name, const filename_t &amp;filename, bool truncate=false, uint16_t max_files=0, const file_event_handlers &amp;event_handlers={})</argsstring>
        <name>hourly_logger_st</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <param>
          <type>const filename_t &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>truncate</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>max_files</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="structspdlog_1_1file__event__handlers" kindref="compound">file_event_handlers</ref> &amp;</type>
          <declname>event_handlers</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/hourly_file_sink.h" line="191" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/hourly_file_sink.h" bodystart="191" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="mongo__sink_8h_1a7b6dc01feb47b7edf1e81f12fc5ba01d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
            <defval><ref refid="structspdlog_1_1synchronous__factory" kindref="compound">spdlog::synchronous_factory</ref></defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt; logger &gt; spdlog::mongo_logger_mt</definition>
        <argsstring>(const std::string &amp;logger_name, const std::string &amp;db_name, const std::string &amp;collection_name, const std::string &amp;uri=&quot;mongodb://localhost:27017&quot;)</argsstring>
        <name>mongo_logger_mt</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>db_name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>collection_name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>uri</declname>
          <defval>&quot;mongodb://localhost:27017&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/mongo_sink.h" line="86" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/mongo_sink.h" bodystart="86" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="mongo__sink_8h_1ac7fd607a05c6d8b2aabfac20da088070" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
            <defval><ref refid="structspdlog_1_1synchronous__factory" kindref="compound">spdlog::synchronous_factory</ref></defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt; logger &gt; spdlog::mongo_logger_st</definition>
        <argsstring>(const std::string &amp;logger_name, const std::string &amp;db_name, const std::string &amp;collection_name, const std::string &amp;uri=&quot;mongodb://localhost:27017&quot;)</argsstring>
        <name>mongo_logger_st</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>db_name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>collection_name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>uri</declname>
          <defval>&quot;mongodb://localhost:27017&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/mongo_sink.h" line="93" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/mongo_sink.h" bodystart="93" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="null__sink_8h_1aa9e94b5c1bfdb03b39e0261959c52081" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
            <defval><ref refid="structspdlog_1_1synchronous__factory" kindref="compound">spdlog::synchronous_factory</ref></defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt; logger &gt; spdlog::null_logger_mt</definition>
        <argsstring>(const std::string &amp;logger_name)</argsstring>
        <name>null_logger_mt</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/null_sink.h" line="29" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/null_sink.h" bodystart="29" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="null__sink_8h_1a24151c0ff6d5554331d4bfff733d9153" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
            <defval><ref refid="structspdlog_1_1synchronous__factory" kindref="compound">spdlog::synchronous_factory</ref></defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt; logger &gt; spdlog::null_logger_st</definition>
        <argsstring>(const std::string &amp;logger_name)</argsstring>
        <name>null_logger_st</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/null_sink.h" line="37" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/null_sink.h" bodystart="37" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="qt__sinks_8h_1a1ecb573fa1f6b519fc09587863e0430e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
            <defval><ref refid="structspdlog_1_1synchronous__factory" kindref="compound">spdlog::synchronous_factory</ref></defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt; logger &gt; spdlog::qt_logger_mt</definition>
        <argsstring>(const std::string &amp;logger_name, QTextEdit *qt_object, const std::string &amp;meta_method=&quot;append&quot;)</argsstring>
        <name>qt_logger_mt</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <param>
          <type>QTextEdit *</type>
          <declname>qt_object</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>meta_method</declname>
          <defval>&quot;append&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/qt_sinks.h" line="66" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/qt_sinks.h" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="qt__sinks_8h_1ac0f90f341e47140bde0434a13970eb52" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
            <defval><ref refid="structspdlog_1_1synchronous__factory" kindref="compound">spdlog::synchronous_factory</ref></defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt; logger &gt; spdlog::qt_logger_st</definition>
        <argsstring>(const std::string &amp;logger_name, QTextEdit *qt_object, const std::string &amp;meta_method=&quot;append&quot;)</argsstring>
        <name>qt_logger_st</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <param>
          <type>QTextEdit *</type>
          <declname>qt_object</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>meta_method</declname>
          <defval>&quot;append&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/qt_sinks.h" line="72" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/qt_sinks.h" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="qt__sinks_8h_1a5a7d7bf2ce714305a2dfffb54f2f0c33" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
            <defval><ref refid="structspdlog_1_1synchronous__factory" kindref="compound">spdlog::synchronous_factory</ref></defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt; logger &gt; spdlog::qt_logger_mt</definition>
        <argsstring>(const std::string &amp;logger_name, QPlainTextEdit *qt_object, const std::string &amp;meta_method=&quot;appendPlainText&quot;)</argsstring>
        <name>qt_logger_mt</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <param>
          <type>QPlainTextEdit *</type>
          <declname>qt_object</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>meta_method</declname>
          <defval>&quot;appendPlainText&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/qt_sinks.h" line="78" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/qt_sinks.h" bodystart="78" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="qt__sinks_8h_1ae2fe3b4728ce6ad2d03b4f4cef3c860c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
            <defval><ref refid="structspdlog_1_1synchronous__factory" kindref="compound">spdlog::synchronous_factory</ref></defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt; logger &gt; spdlog::qt_logger_st</definition>
        <argsstring>(const std::string &amp;logger_name, QPlainTextEdit *qt_object, const std::string &amp;meta_method=&quot;appendPlainText&quot;)</argsstring>
        <name>qt_logger_st</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <param>
          <type>QPlainTextEdit *</type>
          <declname>qt_object</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>meta_method</declname>
          <defval>&quot;appendPlainText&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/qt_sinks.h" line="85" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/qt_sinks.h" bodystart="85" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="qt__sinks_8h_1a17cd68c7141e6d1e9929a978d1e35e3d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
            <defval><ref refid="structspdlog_1_1synchronous__factory" kindref="compound">spdlog::synchronous_factory</ref></defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt; logger &gt; spdlog::qt_logger_mt</definition>
        <argsstring>(const std::string &amp;logger_name, QObject *qt_object, const std::string &amp;meta_method)</argsstring>
        <name>qt_logger_mt</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <param>
          <type>QObject *</type>
          <declname>qt_object</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>meta_method</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/qt_sinks.h" line="92" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/qt_sinks.h" bodystart="92" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="qt__sinks_8h_1abce42d3adc858ac2c275a4be787a294f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
            <defval><ref refid="structspdlog_1_1synchronous__factory" kindref="compound">spdlog::synchronous_factory</ref></defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt; logger &gt; spdlog::qt_logger_st</definition>
        <argsstring>(const std::string &amp;logger_name, QObject *qt_object, const std::string &amp;meta_method)</argsstring>
        <name>qt_logger_st</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <param>
          <type>QObject *</type>
          <declname>qt_object</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>meta_method</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/qt_sinks.h" line="98" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/qt_sinks.h" bodystart="98" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="rotating__file__sink_8h_1a2221b0abb5e0550ec1937e28b4828b7f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
            <defval><ref refid="structspdlog_1_1synchronous__factory" kindref="compound">spdlog::synchronous_factory</ref></defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt; logger &gt; spdlog::rotating_logger_mt</definition>
        <argsstring>(const std::string &amp;logger_name, const filename_t &amp;filename, size_t max_file_size, size_t max_files, bool rotate_on_open=false, const file_event_handlers &amp;event_handlers={})</argsstring>
        <name>rotating_logger_mt</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <param>
          <type>const filename_t &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_file_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_files</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>rotate_on_open</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const <ref refid="structspdlog_1_1file__event__handlers" kindref="compound">file_event_handlers</ref> &amp;</type>
          <declname>event_handlers</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/rotating_file_sink.h" line="63" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/rotating_file_sink.h" bodystart="63" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="rotating__file__sink_8h_1a0475c4de58684c741de8b4bb0fc0aaef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
            <defval><ref refid="structspdlog_1_1synchronous__factory" kindref="compound">spdlog::synchronous_factory</ref></defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt; logger &gt; spdlog::rotating_logger_st</definition>
        <argsstring>(const std::string &amp;logger_name, const filename_t &amp;filename, size_t max_file_size, size_t max_files, bool rotate_on_open=false, const file_event_handlers &amp;event_handlers={})</argsstring>
        <name>rotating_logger_st</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <param>
          <type>const filename_t &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_file_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_files</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>rotate_on_open</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const <ref refid="structspdlog_1_1file__event__handlers" kindref="compound">file_event_handlers</ref> &amp;</type>
          <declname>event_handlers</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/rotating_file_sink.h" line="71" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/rotating_file_sink.h" bodystart="71" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="stdout__color__sinks-inl_8h_1a343c512a2450fe6e48c0d7543c30bb4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
          </param>
        </templateparamlist>
        <type>SPDLOG_INLINE std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>SPDLOG_INLINE std::shared_ptr&lt; logger &gt; spdlog::stdout_color_mt</definition>
        <argsstring>(const std::string &amp;logger_name, color_mode mode)</argsstring>
        <name>stdout_color_mt</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <param>
          <type>color_mode</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_color_sinks-inl.h" line="16" column="31" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_color_sinks-inl.h" bodystart="16" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="stdout__color__sinks-inl_8h_1a614d4af1a7531f9277bafc480a979aac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
          </param>
        </templateparamlist>
        <type>SPDLOG_INLINE std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>SPDLOG_INLINE std::shared_ptr&lt; logger &gt; spdlog::stdout_color_st</definition>
        <argsstring>(const std::string &amp;logger_name, color_mode mode)</argsstring>
        <name>stdout_color_st</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <param>
          <type>color_mode</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_color_sinks-inl.h" line="22" column="31" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_color_sinks-inl.h" bodystart="22" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="stdout__color__sinks-inl_8h_1a6bd2afc2351f7646a8b8e4a694c31238" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
          </param>
        </templateparamlist>
        <type>SPDLOG_INLINE std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>SPDLOG_INLINE std::shared_ptr&lt; logger &gt; spdlog::stderr_color_mt</definition>
        <argsstring>(const std::string &amp;logger_name, color_mode mode)</argsstring>
        <name>stderr_color_mt</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <param>
          <type>color_mode</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_color_sinks-inl.h" line="28" column="31" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_color_sinks-inl.h" bodystart="28" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="stdout__color__sinks-inl_8h_1a564e6b6e5807399cb074502015ab4490" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
          </param>
        </templateparamlist>
        <type>SPDLOG_INLINE std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>SPDLOG_INLINE std::shared_ptr&lt; logger &gt; spdlog::stderr_color_st</definition>
        <argsstring>(const std::string &amp;logger_name, color_mode mode)</argsstring>
        <name>stderr_color_st</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <param>
          <type>color_mode</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_color_sinks-inl.h" line="34" column="31" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_color_sinks-inl.h" bodystart="34" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="stdout__color__sinks_8h_1ae250bdfb99a0bd44c401707f21b8f856" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
            <defval><ref refid="structspdlog_1_1synchronous__factory" kindref="compound">spdlog::synchronous_factory</ref></defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt; logger &gt; spdlog::stdout_color_mt</definition>
        <argsstring>(const std::string &amp;logger_name, color_mode mode=color_mode::automatic)</argsstring>
        <name>stdout_color_mt</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <param>
          <type>color_mode</type>
          <declname>mode</declname>
          <defval>color_mode::automatic</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_color_sinks.h" line="30" column="17" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_color_sinks-inl.h" bodystart="16" bodyend="19" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_color_sinks.h" declline="30" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stdout__color__sinks_8h_1a07f4a8a8e3783e661caef977ea24f534" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
            <defval><ref refid="structspdlog_1_1synchronous__factory" kindref="compound">spdlog::synchronous_factory</ref></defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt; logger &gt; spdlog::stdout_color_st</definition>
        <argsstring>(const std::string &amp;logger_name, color_mode mode=color_mode::automatic)</argsstring>
        <name>stdout_color_st</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <param>
          <type>color_mode</type>
          <declname>mode</declname>
          <defval>color_mode::automatic</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_color_sinks.h" line="33" column="17" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_color_sinks-inl.h" bodystart="22" bodyend="25" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_color_sinks.h" declline="33" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stdout__color__sinks_8h_1ac25ac04f182a0f51db3ac7d98b3e564b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
            <defval><ref refid="structspdlog_1_1synchronous__factory" kindref="compound">spdlog::synchronous_factory</ref></defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt; logger &gt; spdlog::stderr_color_mt</definition>
        <argsstring>(const std::string &amp;logger_name, color_mode mode=color_mode::automatic)</argsstring>
        <name>stderr_color_mt</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <param>
          <type>color_mode</type>
          <declname>mode</declname>
          <defval>color_mode::automatic</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_color_sinks.h" line="36" column="17" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_color_sinks-inl.h" bodystart="28" bodyend="31" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_color_sinks.h" declline="36" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stdout__color__sinks_8h_1a4ff5f41910270b3b947d0a280e39e7a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
            <defval><ref refid="structspdlog_1_1synchronous__factory" kindref="compound">spdlog::synchronous_factory</ref></defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt; logger &gt; spdlog::stderr_color_st</definition>
        <argsstring>(const std::string &amp;logger_name, color_mode mode=color_mode::automatic)</argsstring>
        <name>stderr_color_st</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <param>
          <type>color_mode</type>
          <declname>mode</declname>
          <defval>color_mode::automatic</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_color_sinks.h" line="39" column="17" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_color_sinks-inl.h" bodystart="34" bodyend="37" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_color_sinks.h" declline="39" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stdout__sinks-inl_8h_1a516fdf34980f5784cea05c235482f390" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
          </param>
        </templateparamlist>
        <type>SPDLOG_INLINE std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>SPDLOG_INLINE std::shared_ptr&lt; logger &gt; spdlog::stdout_logger_mt</definition>
        <argsstring>(const std::string &amp;logger_name)</argsstring>
        <name>stdout_logger_mt</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_sinks-inl.h" line="117" column="31" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_sinks-inl.h" bodystart="117" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="stdout__sinks-inl_8h_1aab8d90e1cf494b2e3083822355e5a068" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
          </param>
        </templateparamlist>
        <type>SPDLOG_INLINE std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>SPDLOG_INLINE std::shared_ptr&lt; logger &gt; spdlog::stdout_logger_st</definition>
        <argsstring>(const std::string &amp;logger_name)</argsstring>
        <name>stdout_logger_st</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_sinks-inl.h" line="123" column="31" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_sinks-inl.h" bodystart="123" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="stdout__sinks-inl_8h_1aa93a6b05fecf99174e4bce4a70f7757c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
          </param>
        </templateparamlist>
        <type>SPDLOG_INLINE std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>SPDLOG_INLINE std::shared_ptr&lt; logger &gt; spdlog::stderr_logger_mt</definition>
        <argsstring>(const std::string &amp;logger_name)</argsstring>
        <name>stderr_logger_mt</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_sinks-inl.h" line="129" column="31" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_sinks-inl.h" bodystart="129" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="stdout__sinks-inl_8h_1aa84aa6273e35e45d5ad91faf1ec7e805" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
          </param>
        </templateparamlist>
        <type>SPDLOG_INLINE std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>SPDLOG_INLINE std::shared_ptr&lt; logger &gt; spdlog::stderr_logger_st</definition>
        <argsstring>(const std::string &amp;logger_name)</argsstring>
        <name>stderr_logger_st</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_sinks-inl.h" line="135" column="31" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_sinks-inl.h" bodystart="135" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="stdout__sinks_8h_1a12568bcc67950ec896044eb5f0bb1762" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
            <defval><ref refid="structspdlog_1_1synchronous__factory" kindref="compound">spdlog::synchronous_factory</ref></defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt; logger &gt; spdlog::stdout_logger_mt</definition>
        <argsstring>(const std::string &amp;logger_name)</argsstring>
        <name>stdout_logger_mt</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_sinks.h" line="72" column="17" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_sinks-inl.h" bodystart="117" bodyend="120" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_sinks.h" declline="72" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stdout__sinks_8h_1aecc40776b11842c2a000c7631339a883" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
            <defval><ref refid="structspdlog_1_1synchronous__factory" kindref="compound">spdlog::synchronous_factory</ref></defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt; logger &gt; spdlog::stdout_logger_st</definition>
        <argsstring>(const std::string &amp;logger_name)</argsstring>
        <name>stdout_logger_st</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_sinks.h" line="75" column="17" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_sinks-inl.h" bodystart="123" bodyend="126" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_sinks.h" declline="75" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stdout__sinks_8h_1a241db0aed3fd1767d02861af390f7bd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
            <defval><ref refid="structspdlog_1_1synchronous__factory" kindref="compound">spdlog::synchronous_factory</ref></defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt; logger &gt; spdlog::stderr_logger_mt</definition>
        <argsstring>(const std::string &amp;logger_name)</argsstring>
        <name>stderr_logger_mt</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_sinks.h" line="78" column="17" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_sinks-inl.h" bodystart="129" bodyend="132" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_sinks.h" declline="78" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="stdout__sinks_8h_1a24b357ea84f505a96424f0f1e1ea6d5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
            <defval><ref refid="structspdlog_1_1synchronous__factory" kindref="compound">spdlog::synchronous_factory</ref></defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt; logger &gt; spdlog::stderr_logger_st</definition>
        <argsstring>(const std::string &amp;logger_name)</argsstring>
        <name>stderr_logger_st</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_sinks.h" line="81" column="17" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_sinks-inl.h" bodystart="135" bodyend="138" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_sinks.h" declline="81" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="syslog__sink_8h_1a1b26532fc0c7d6a3f82266cbbeb7923d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
            <defval><ref refid="structspdlog_1_1synchronous__factory" kindref="compound">spdlog::synchronous_factory</ref></defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt; logger &gt; spdlog::syslog_logger_mt</definition>
        <argsstring>(const std::string &amp;logger_name, const std::string &amp;syslog_ident=&quot;&quot;, int syslog_option=0, int syslog_facility=LOG_USER, bool enable_formatting=false)</argsstring>
        <name>syslog_logger_mt</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>syslog_ident</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>int</type>
          <declname>syslog_option</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>syslog_facility</declname>
          <defval>LOG_USER</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>enable_formatting</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/syslog_sink.h" line="97" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/syslog_sink.h" bodystart="97" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="syslog__sink_8h_1a09b8b20ea9c8366df2c57ca989a2ce42" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
            <defval><ref refid="structspdlog_1_1synchronous__factory" kindref="compound">spdlog::synchronous_factory</ref></defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt; logger &gt; spdlog::syslog_logger_st</definition>
        <argsstring>(const std::string &amp;logger_name, const std::string &amp;syslog_ident=&quot;&quot;, int syslog_option=0, int syslog_facility=LOG_USER, bool enable_formatting=false)</argsstring>
        <name>syslog_logger_st</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>syslog_ident</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>int</type>
          <declname>syslog_option</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>syslog_facility</declname>
          <defval>LOG_USER</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>enable_formatting</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/syslog_sink.h" line="104" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/syslog_sink.h" bodystart="104" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="systemd__sink_8h_1a2f1bee78b6c7525950c68392a117e32a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
            <defval><ref refid="structspdlog_1_1synchronous__factory" kindref="compound">spdlog::synchronous_factory</ref></defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt; logger &gt; spdlog::systemd_logger_mt</definition>
        <argsstring>(const std::string &amp;logger_name, const std::string &amp;ident=&quot;&quot;, bool enable_formatting=false)</argsstring>
        <name>systemd_logger_mt</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>ident</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>enable_formatting</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/systemd_sink.h" line="107" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/systemd_sink.h" bodystart="107" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="systemd__sink_8h_1a9192a93199e2cb0e680215ec78cbd058" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
            <defval><ref refid="structspdlog_1_1synchronous__factory" kindref="compound">spdlog::synchronous_factory</ref></defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt; logger &gt; spdlog::systemd_logger_st</definition>
        <argsstring>(const std::string &amp;logger_name, const std::string &amp;ident=&quot;&quot;, bool enable_formatting=false)</argsstring>
        <name>systemd_logger_st</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>ident</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>enable_formatting</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/systemd_sink.h" line="114" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/systemd_sink.h" bodystart="114" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="udp__sink_8h_1ac0f76381612ccf7bd3d77c916ee94884" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Factory</type>
            <defval><ref refid="structspdlog_1_1synchronous__factory" kindref="compound">spdlog::synchronous_factory</ref></defval>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt; logger &gt; spdlog::udp_logger_mt</definition>
        <argsstring>(const std::string &amp;logger_name, sinks::udp_sink_config skin_config)</argsstring>
        <name>udp_logger_mt</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>logger_name</declname>
        </param>
        <param>
          <type><ref refid="structspdlog_1_1sinks_1_1udp__sink__config" kindref="compound">sinks::udp_sink_config</ref></type>
          <declname>skin_config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/udp_sink.h" line="69" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/udp_sink.h" bodystart="69" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="spdlog-inl_8h_1a2ce7922734103b5a2d1289c6053a8808" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPDLOG_INLINE void</type>
        <definition>SPDLOG_API void spdlog::initialize_logger</definition>
        <argsstring>(std::shared_ptr&lt; logger &gt; logger)</argsstring>
        <name>initialize_logger</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
          <declname>logger</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" line="15" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" bodystart="15" bodyend="18" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" declline="47" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="spdlog-inl_8h_1a2ea9bbc022884118624667da30a0d149" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPDLOG_INLINE std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
        <definition>SPDLOG_API std::shared_ptr&lt; logger &gt; spdlog::get</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>get</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" line="20" column="31" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" bodystart="20" bodyend="23" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" declline="52" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="spdlog-inl_8h_1acc4462a0284624191f0942f772d3a682" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPDLOG_INLINE void</type>
        <definition>SPDLOG_API void spdlog::set_formatter</definition>
        <argsstring>(std::unique_ptr&lt; spdlog::formatter &gt; formatter)</argsstring>
        <name>set_formatter</name>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classspdlog_1_1formatter" kindref="compound">spdlog::formatter</ref> &gt;</type>
          <declname>formatter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" line="25" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" bodystart="25" bodyend="28" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" declline="55" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="spdlog-inl_8h_1ae7550434e7e8db53188e988741659f2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPDLOG_INLINE void</type>
        <definition>SPDLOG_API void spdlog::set_pattern</definition>
        <argsstring>(std::string pattern, pattern_time_type time_type)</argsstring>
        <name>set_pattern</name>
        <param>
          <type>std::string</type>
          <declname>pattern</declname>
        </param>
        <param>
          <type>pattern_time_type</type>
          <declname>time_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" line="30" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" bodystart="30" bodyend="33" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" declline="59" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="spdlog-inl_8h_1a711d93cee8b66bea59fad5d6bb846520" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPDLOG_INLINE void</type>
        <definition>SPDLOG_API void spdlog::enable_backtrace</definition>
        <argsstring>(size_t n_messages)</argsstring>
        <name>enable_backtrace</name>
        <param>
          <type>size_t</type>
          <declname>n_messages</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" line="35" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" bodystart="35" bodyend="38" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" declline="62" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="spdlog-inl_8h_1a04d6b3af3f40c02a52279cdc0a7afcff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPDLOG_INLINE void</type>
        <definition>SPDLOG_API void spdlog::disable_backtrace</definition>
        <argsstring>()</argsstring>
        <name>disable_backtrace</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" line="40" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" bodystart="40" bodyend="43" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" declline="65" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="spdlog-inl_8h_1a7b5639f2df6f424744bf6a5420aa0ddb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPDLOG_INLINE void</type>
        <definition>SPDLOG_API void spdlog::dump_backtrace</definition>
        <argsstring>()</argsstring>
        <name>dump_backtrace</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" line="45" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" bodystart="45" bodyend="48" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" declline="68" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="spdlog-inl_8h_1ac6302bb2b9f87e5602fa4ed07d68b9e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPDLOG_INLINE level::level_enum</type>
        <definition>SPDLOG_API level::level_enum spdlog::get_level</definition>
        <argsstring>()</argsstring>
        <name>get_level</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" line="50" column="33" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" bodystart="50" bodyend="53" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" declline="71" declcolumn="30"/>
      </memberdef>
      <memberdef kind="function" id="spdlog-inl_8h_1ada6c5679f4cf39bb79bfbbae653acc02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPDLOG_INLINE bool</type>
        <definition>SPDLOG_API bool spdlog::should_log</definition>
        <argsstring>(level::level_enum log_level)</argsstring>
        <name>should_log</name>
        <param>
          <type>level::level_enum</type>
          <declname>log_level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" line="55" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" bodystart="55" bodyend="58" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" declline="77" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="spdlog-inl_8h_1a420294e88f1c1ab1ab827c385e311c79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPDLOG_INLINE void</type>
        <definition>SPDLOG_API void spdlog::set_level</definition>
        <argsstring>(level::level_enum log_level)</argsstring>
        <name>set_level</name>
        <param>
          <type>level::level_enum</type>
          <declname>log_level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" line="60" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" bodystart="60" bodyend="63" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" declline="74" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="spdlog-inl_8h_1abcfc3d450223e6ac6d90afaeb6993666" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPDLOG_INLINE void</type>
        <definition>SPDLOG_API void spdlog::flush_on</definition>
        <argsstring>(level::level_enum log_level)</argsstring>
        <name>flush_on</name>
        <param>
          <type>level::level_enum</type>
          <declname>log_level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" line="65" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" bodystart="65" bodyend="68" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" declline="80" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="spdlog-inl_8h_1a181655619b41b734d22386eea52ac121" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPDLOG_INLINE void</type>
        <definition>SPDLOG_API void spdlog::flush_every</definition>
        <argsstring>(std::chrono::seconds interval)</argsstring>
        <name>flush_every</name>
        <param>
          <type>std::chrono::seconds</type>
          <declname>interval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" line="70" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" bodystart="70" bodyend="73" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" declline="84" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="spdlog-inl_8h_1a7a3afca7257bf5a90dd47dd95e3cee7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPDLOG_INLINE void</type>
        <definition>SPDLOG_API void spdlog::set_error_handler</definition>
        <argsstring>(void(*handler)(const std::string &amp;msg))</argsstring>
        <name>set_error_handler</name>
        <param>
          <type>void(*)(const std::string &amp;msg)</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" line="75" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" bodystart="75" bodyend="78" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" declline="87" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="spdlog-inl_8h_1a0744a4789e19b39d80bd18efccc5c49f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPDLOG_INLINE void</type>
        <definition>SPDLOG_API void spdlog::register_logger</definition>
        <argsstring>(std::shared_ptr&lt; logger &gt; logger)</argsstring>
        <name>register_logger</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;</type>
          <declname>logger</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" line="80" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" bodystart="80" bodyend="83" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" declline="90" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="spdlog-inl_8h_1acd2549db52c78e99c0c4400b9350e356" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPDLOG_INLINE void</type>
        <definition>SPDLOG_API void spdlog::apply_all</definition>
        <argsstring>(const std::function&lt; void(std::shared_ptr&lt; logger &gt;)&gt; &amp;fun)</argsstring>
        <name>apply_all</name>
        <param>
          <type>const std::function&lt; void(std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">logger</ref> &gt;)&gt; &amp;</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" line="85" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" bodystart="85" bodyend="88" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" declline="95" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="spdlog-inl_8h_1aae7cf2be87ddada8e5dc0c6e41ffc887" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPDLOG_INLINE void</type>
        <definition>SPDLOG_API void spdlog::drop</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>drop</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" line="90" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" bodystart="90" bodyend="93" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" declline="98" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="spdlog-inl_8h_1af5f9a5c8606600fdac171e998b2f0a33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPDLOG_INLINE void</type>
        <definition>SPDLOG_API void spdlog::drop_all</definition>
        <argsstring>()</argsstring>
        <name>drop_all</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" line="95" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" bodystart="95" bodyend="98" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" declline="101" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="spdlog-inl_8h_1a7775e1780d52934ac4c4b7944b2b1559" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPDLOG_INLINE void</type>
        <definition>SPDLOG_API void spdlog::shutdown</definition>
        <argsstring>()</argsstring>
        <name>shutdown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" line="100" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" bodystart="100" bodyend="103" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" declline="104" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="spdlog-inl_8h_1a7fc8dab46af5b58d51d3b999ce010100" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPDLOG_INLINE void</type>
        <definition>SPDLOG_API void spdlog::set_automatic_registration</definition>
        <argsstring>(bool automatic_registration)</argsstring>
        <name>set_automatic_registration</name>
        <param>
          <type>bool</type>
          <declname>automatic_registration</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" line="105" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" bodystart="105" bodyend="108" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" declline="107" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="spdlog-inl_8h_1a8bfbc0528acec460b90b9f860a4b4043" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPDLOG_INLINE std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">spdlog::logger</ref> &gt;</type>
        <definition>SPDLOG_API std::shared_ptr&lt; spdlog::logger &gt; spdlog::default_logger</definition>
        <argsstring>()</argsstring>
        <name>default_logger</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" line="110" column="31" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" bodystart="110" bodyend="113" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" declline="124" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="spdlog-inl_8h_1a705f094f9897041b4e98bfe3c567ada0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPDLOG_INLINE <ref refid="classspdlog_1_1logger" kindref="compound">spdlog::logger</ref> *</type>
        <definition>SPDLOG_API spdlog::logger * spdlog::default_logger_raw</definition>
        <argsstring>()</argsstring>
        <name>default_logger_raw</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" line="115" column="30" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" bodystart="115" bodyend="118" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" declline="126" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="spdlog-inl_8h_1ad1f0e7767254eef0c4e23a6a2a40549c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SPDLOG_INLINE void</type>
        <definition>SPDLOG_API void spdlog::set_default_logger</definition>
        <argsstring>(std::shared_ptr&lt; spdlog::logger &gt; default_logger)</argsstring>
        <name>set_default_logger</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">spdlog::logger</ref> &gt;</type>
          <declname>default_logger</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" line="120" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h" bodystart="120" bodyend="123" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" declline="128" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="spdlog_8h_1a37d2e3fc1177952eca2c369b47beae66" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Sink</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>SinkArgs</declname>
            <defname>SinkArgs</defname>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classspdlog_1_1logger" kindref="compound">spdlog::logger</ref> &gt;</type>
        <definition>std::shared_ptr&lt; spdlog::logger &gt; spdlog::create</definition>
        <argsstring>(std::string logger_name, SinkArgs &amp;&amp;... sink_args)</argsstring>
        <name>create</name>
        <param>
          <type>std::string</type>
          <declname>logger_name</declname>
        </param>
        <param>
          <type>SinkArgs &amp;&amp;...</type>
          <declname>sink_args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" line="34" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" bodystart="34" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="spdlog_8h_1ab7004914a7898ecdf8dc0014e49aa6f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void spdlog::log</definition>
        <argsstring>(source_loc source, level::level_enum lvl, format_string_t&lt; Args... &gt; fmt, Args &amp;&amp;... args)</argsstring>
        <name>log</name>
        <param>
          <type><ref refid="structspdlog_1_1source__loc" kindref="compound">source_loc</ref></type>
          <declname>source</declname>
        </param>
        <param>
          <type>level::level_enum</type>
          <declname>lvl</declname>
        </param>
        <param>
          <type>format_string_t&lt; Args... &gt;</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" line="131" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" bodystart="131" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="spdlog_8h_1a0b3e732fb4140019be5435c33925b00e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void spdlog::log</definition>
        <argsstring>(level::level_enum lvl, format_string_t&lt; Args... &gt; fmt, Args &amp;&amp;... args)</argsstring>
        <name>log</name>
        <param>
          <type>level::level_enum</type>
          <declname>lvl</declname>
        </param>
        <param>
          <type>format_string_t&lt; Args... &gt;</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" line="137" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" bodystart="137" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="spdlog_8h_1a488b1edbc9d1591b52a7c95a3af15d17" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void spdlog::trace</definition>
        <argsstring>(format_string_t&lt; Args... &gt; fmt, Args &amp;&amp;... args)</argsstring>
        <name>trace</name>
        <param>
          <type>format_string_t&lt; Args... &gt;</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" line="143" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" bodystart="143" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="spdlog_8h_1ae201964a5af2303776eb41d50c8f8ff1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void spdlog::debug</definition>
        <argsstring>(format_string_t&lt; Args... &gt; fmt, Args &amp;&amp;... args)</argsstring>
        <name>debug</name>
        <param>
          <type>format_string_t&lt; Args... &gt;</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" line="149" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" bodystart="149" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="spdlog_8h_1ac4074fcd794acabfa75c85fff311f1ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void spdlog::info</definition>
        <argsstring>(format_string_t&lt; Args... &gt; fmt, Args &amp;&amp;... args)</argsstring>
        <name>info</name>
        <param>
          <type>format_string_t&lt; Args... &gt;</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" line="155" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" bodystart="155" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="spdlog_8h_1a4837f386d8281ca6c6d60bd8530dd616" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void spdlog::warn</definition>
        <argsstring>(format_string_t&lt; Args... &gt; fmt, Args &amp;&amp;... args)</argsstring>
        <name>warn</name>
        <param>
          <type>format_string_t&lt; Args... &gt;</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" line="161" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" bodystart="161" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="spdlog_8h_1a4064bfca5221239f853e5a4ba5158592" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void spdlog::error</definition>
        <argsstring>(format_string_t&lt; Args... &gt; fmt, Args &amp;&amp;... args)</argsstring>
        <name>error</name>
        <param>
          <type>format_string_t&lt; Args... &gt;</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" line="167" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" bodystart="167" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="spdlog_8h_1a938e762bb336615007e4bbe773be65c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void spdlog::critical</definition>
        <argsstring>(format_string_t&lt; Args... &gt; fmt, Args &amp;&amp;... args)</argsstring>
        <name>critical</name>
        <param>
          <type>format_string_t&lt; Args... &gt;</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" line="173" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" bodystart="173" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="spdlog_8h_1a1491657c0531c0759eccaba3dd962db7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void spdlog::log</definition>
        <argsstring>(source_loc source, level::level_enum lvl, const T &amp;msg)</argsstring>
        <name>log</name>
        <param>
          <type><ref refid="structspdlog_1_1source__loc" kindref="compound">source_loc</ref></type>
          <declname>source</declname>
        </param>
        <param>
          <type>level::level_enum</type>
          <declname>lvl</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" line="179" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" bodystart="179" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="spdlog_8h_1aee9d401c7cb3cd8538a139af836c5ec5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void spdlog::log</definition>
        <argsstring>(level::level_enum lvl, const T &amp;msg)</argsstring>
        <name>log</name>
        <param>
          <type>level::level_enum</type>
          <declname>lvl</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" line="185" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" bodystart="185" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="spdlog_8h_1a99302a3f872e2cba98f81ac1a2f63321" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void spdlog::trace</definition>
        <argsstring>(const T &amp;msg)</argsstring>
        <name>trace</name>
        <param>
          <type>const T &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" line="241" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" bodystart="241" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="spdlog_8h_1a93c284cebdb3b3dab204f2a87344e4b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void spdlog::debug</definition>
        <argsstring>(const T &amp;msg)</argsstring>
        <name>debug</name>
        <param>
          <type>const T &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" line="247" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" bodystart="247" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="spdlog_8h_1ad68b6f9b65e1e8daab0117d75f0c39b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void spdlog::info</definition>
        <argsstring>(const T &amp;msg)</argsstring>
        <name>info</name>
        <param>
          <type>const T &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" line="253" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" bodystart="253" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="spdlog_8h_1ab3df0dca3174a057e99fc327e8c25c57" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void spdlog::warn</definition>
        <argsstring>(const T &amp;msg)</argsstring>
        <name>warn</name>
        <param>
          <type>const T &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" line="259" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" bodystart="259" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="spdlog_8h_1aa274f8a5f4f20ff435d27500ff589234" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void spdlog::error</definition>
        <argsstring>(const T &amp;msg)</argsstring>
        <name>error</name>
        <param>
          <type>const T &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" line="265" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" bodystart="265" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="spdlog_8h_1a2c707fb3d3d12a244ebfe3e40b417edc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void spdlog::critical</definition>
        <argsstring>(const T &amp;msg)</argsstring>
        <name>critical</name>
        <param>
          <type>const T &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" line="271" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h" bodystart="271" bodyend="274"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/async.h" line="25" column="1"/>
  </compounddef>
</doxygen>
