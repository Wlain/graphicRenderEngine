<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__gtx__dual__quaternion" kind="group">
    <compoundname>gtx_dual_quaternion</compoundname>
    <title>GLM_GTX_dual_quaternion</title>
    <innerclass refid="structglm_1_1tdualquat" prot="public">glm::tdualquat</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__gtx__dual__quaternion_1ga4888200ed911e4887c2423fed74ad362" prot="public" static="no">
        <type>tdualquat&lt; float, lowp &gt;</type>
        <definition>typedef tdualquat&lt;float, lowp&gt; glm::lowp_dualquat</definition>
        <argsstring></argsstring>
        <name>lowp_dualquat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dual-quaternion of low single-qualifier floating-point numbers.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__dual__quaternion" kindref="compound">GLM_GTX_dual_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" line="187" column="18" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__gtx__dual__quaternion_1gaa88fe93eb823d1aba8d6df8028572cb5" prot="public" static="no">
        <type>tdualquat&lt; float, mediump &gt;</type>
        <definition>typedef tdualquat&lt;float, mediump&gt; glm::mediump_dualquat</definition>
        <argsstring></argsstring>
        <name>mediump_dualquat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dual-quaternion of medium single-qualifier floating-point numbers.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__dual__quaternion" kindref="compound">GLM_GTX_dual_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" line="192" column="18" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__gtx__dual__quaternion_1ga98557c3577757f2ced8f35b1de7fa234" prot="public" static="no">
        <type>tdualquat&lt; float, highp &gt;</type>
        <definition>typedef tdualquat&lt;float, highp&gt; glm::highp_dualquat</definition>
        <argsstring></argsstring>
        <name>highp_dualquat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dual-quaternion of high single-qualifier floating-point numbers.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__dual__quaternion" kindref="compound">GLM_GTX_dual_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" line="197" column="18" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__gtx__dual__quaternion_1ga797f6d2679ab6773c1f057b97bf95111" prot="public" static="no">
        <type>tdualquat&lt; float, lowp &gt;</type>
        <definition>typedef tdualquat&lt;float, lowp&gt; glm::lowp_fdualquat</definition>
        <argsstring></argsstring>
        <name>lowp_fdualquat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dual-quaternion of low single-qualifier floating-point numbers.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__dual__quaternion" kindref="compound">GLM_GTX_dual_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" line="203" column="18" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__gtx__dual__quaternion_1ga93e9def86ffeedd48d9c79a6afacfa6c" prot="public" static="no">
        <type>tdualquat&lt; float, mediump &gt;</type>
        <definition>typedef tdualquat&lt;float, mediump&gt; glm::mediump_fdualquat</definition>
        <argsstring></argsstring>
        <name>mediump_fdualquat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dual-quaternion of medium single-qualifier floating-point numbers.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__dual__quaternion" kindref="compound">GLM_GTX_dual_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" line="208" column="18" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__gtx__dual__quaternion_1ga8c46d61c38b2b6d9c5091c667dd20fe8" prot="public" static="no">
        <type>tdualquat&lt; float, highp &gt;</type>
        <definition>typedef tdualquat&lt;float, highp&gt; glm::highp_fdualquat</definition>
        <argsstring></argsstring>
        <name>highp_fdualquat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dual-quaternion of high single-qualifier floating-point numbers.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__dual__quaternion" kindref="compound">GLM_GTX_dual_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" line="213" column="18" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__gtx__dual__quaternion_1ga361a2ea6cce1446a8ab7e7803156c16c" prot="public" static="no">
        <type>tdualquat&lt; double, lowp &gt;</type>
        <definition>typedef tdualquat&lt;double, lowp&gt; glm::lowp_ddualquat</definition>
        <argsstring></argsstring>
        <name>lowp_ddualquat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dual-quaternion of low double-qualifier floating-point numbers.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__dual__quaternion" kindref="compound">GLM_GTX_dual_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" line="219" column="18" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__gtx__dual__quaternion_1ga5727116ab20b2a1d40387766d723dd6c" prot="public" static="no">
        <type>tdualquat&lt; double, mediump &gt;</type>
        <definition>typedef tdualquat&lt;double, mediump&gt; glm::mediump_ddualquat</definition>
        <argsstring></argsstring>
        <name>mediump_ddualquat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dual-quaternion of medium double-qualifier floating-point numbers.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__dual__quaternion" kindref="compound">GLM_GTX_dual_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" line="224" column="18" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__gtx__dual__quaternion_1ga83e4c5d27c8b0a264a3f3aed24f3f84e" prot="public" static="no">
        <type>tdualquat&lt; double, highp &gt;</type>
        <definition>typedef tdualquat&lt;double, highp&gt; glm::highp_ddualquat</definition>
        <argsstring></argsstring>
        <name>highp_ddualquat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dual-quaternion of high double-qualifier floating-point numbers.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__dual__quaternion" kindref="compound">GLM_GTX_dual_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" line="229" column="18" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__gtx__dual__quaternion_1ga2f6227b5f9dc08a2e7682065a84b3aa9" prot="public" static="no">
        <type>highp_fdualquat</type>
        <definition>typedef highp_fdualquat glm::dualquat</definition>
        <argsstring></argsstring>
        <name>dualquat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dual-quaternion of floating-point numbers.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__dual__quaternion" kindref="compound">GLM_GTX_dual_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" line="236" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__gtx__dual__quaternion_1ga436906129bc69ca5059555cafcbac9fd" prot="public" static="no">
        <type>highp_fdualquat</type>
        <definition>typedef highp_fdualquat glm::fdualquat</definition>
        <argsstring></argsstring>
        <name>fdualquat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dual-quaternion of single-qualifier floating-point numbers.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__dual__quaternion" kindref="compound">GLM_GTX_dual_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" line="241" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__gtx__dual__quaternion_1ga373431ffdd82d5c03c258217a9e1f1a6" prot="public" static="no">
        <type>highp_ddualquat</type>
        <definition>typedef highp_ddualquat glm::ddualquat</definition>
        <argsstring></argsstring>
        <name>ddualquat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dual-quaternion of default double-qualifier floating-point numbers.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__dual__quaternion" kindref="compound">GLM_GTX_dual_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" line="260" column="24" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" bodystart="260" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__gtx__dual__quaternion_1gab46d6dc0b98dde7ae3b0435b4d3943bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL tdualquat&lt; T, Q &gt;</type>
        <definition>GLM_FUNC_DECL tdualquat&lt; T, Q &gt; glm::operator+</definition>
        <argsstring>(tdualquat&lt; T, Q &gt; const &amp;q)</argsstring>
        <name>operator+</name>
        <param>
          <type>tdualquat&lt; T, Q &gt; const &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" line="93" column="25" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.inl" bodystart="136" bodyend="139" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" declline="93" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__dual__quaternion_1gaee3fe69a30659803ee54ed25e9475e88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL tdualquat&lt; T, Q &gt;</type>
        <definition>GLM_FUNC_DECL tdualquat&lt; T, Q &gt; glm::operator-</definition>
        <argsstring>(tdualquat&lt; T, Q &gt; const &amp;q)</argsstring>
        <name>operator-</name>
        <param>
          <type>tdualquat&lt; T, Q &gt; const &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" line="96" column="25" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.inl" bodystart="142" bodyend="145" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" declline="96" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__dual__quaternion_1ga52cdf9120c1d187f4e23e607e838d923" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL tdualquat&lt; T, Q &gt;</type>
        <definition>GLM_FUNC_DECL tdualquat&lt; T, Q &gt; glm::operator+</definition>
        <argsstring>(tdualquat&lt; T, Q &gt; const &amp;q, tdualquat&lt; T, Q &gt; const &amp;p)</argsstring>
        <name>operator+</name>
        <param>
          <type>tdualquat&lt; T, Q &gt; const &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>tdualquat&lt; T, Q &gt; const &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" line="101" column="25" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.inl" bodystart="150" bodyend="153" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" declline="101" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__dual__quaternion_1gaa0d91bdb254fd8fe2df044129799cd09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL tdualquat&lt; T, Q &gt;</type>
        <definition>GLM_FUNC_DECL tdualquat&lt; T, Q &gt; glm::operator*</definition>
        <argsstring>(tdualquat&lt; T, Q &gt; const &amp;q, tdualquat&lt; T, Q &gt; const &amp;p)</argsstring>
        <name>operator*</name>
        <param>
          <type>tdualquat&lt; T, Q &gt; const &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>tdualquat&lt; T, Q &gt; const &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" line="104" column="25" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.inl" bodystart="156" bodyend="159" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" declline="104" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__dual__quaternion_1ga0f9b810dd4632a6237bd0cf39ae4ebd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL <ref refid="structvec" kindref="compound">vec</ref>&lt; 3, T, Q &gt;</type>
        <definition>GLM_FUNC_DECL vec&lt; 3, T, Q &gt; glm::operator*</definition>
        <argsstring>(tdualquat&lt; T, Q &gt; const &amp;q, vec&lt; 3, T, Q &gt; const &amp;v)</argsstring>
        <name>operator*</name>
        <param>
          <type>tdualquat&lt; T, Q &gt; const &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="structvec" kindref="compound">vec</ref>&lt; 3, T, Q &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" line="107" column="19" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.inl" bodystart="162" bodyend="167" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" declline="107" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__dual__quaternion_1gafbb8c7fbab45ab4b0ba834c4fec36899" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL <ref refid="structvec" kindref="compound">vec</ref>&lt; 3, T, Q &gt;</type>
        <definition>GLM_FUNC_DECL vec&lt; 3, T, Q &gt; glm::operator*</definition>
        <argsstring>(vec&lt; 3, T, Q &gt; const &amp;v, tdualquat&lt; T, Q &gt; const &amp;q)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="structvec" kindref="compound">vec</ref>&lt; 3, T, Q &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>tdualquat&lt; T, Q &gt; const &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" line="110" column="19" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.inl" bodystart="170" bodyend="173" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" declline="110" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__dual__quaternion_1gaa86ce0c9df34f822fec9293fededc1d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL <ref refid="structvec" kindref="compound">vec</ref>&lt; 4, T, Q &gt;</type>
        <definition>GLM_FUNC_DECL vec&lt; 4, T, Q &gt; glm::operator*</definition>
        <argsstring>(tdualquat&lt; T, Q &gt; const &amp;q, vec&lt; 4, T, Q &gt; const &amp;v)</argsstring>
        <name>operator*</name>
        <param>
          <type>tdualquat&lt; T, Q &gt; const &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type><ref refid="structvec" kindref="compound">vec</ref>&lt; 4, T, Q &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" line="113" column="19" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.inl" bodystart="176" bodyend="179" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" declline="113" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__dual__quaternion_1gaae633eef518cdd7b110aa315df3a75eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL <ref refid="structvec" kindref="compound">vec</ref>&lt; 4, T, Q &gt;</type>
        <definition>GLM_FUNC_DECL vec&lt; 4, T, Q &gt; glm::operator*</definition>
        <argsstring>(vec&lt; 4, T, Q &gt; const &amp;v, tdualquat&lt; T, Q &gt; const &amp;q)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="structvec" kindref="compound">vec</ref>&lt; 4, T, Q &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>tdualquat&lt; T, Q &gt; const &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" line="116" column="19" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.inl" bodystart="182" bodyend="185" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" declline="116" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__dual__quaternion_1ga48ecbaf8884199baf0780e59bbe67d83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL tdualquat&lt; T, Q &gt;</type>
        <definition>GLM_FUNC_DECL tdualquat&lt; T, Q &gt; glm::operator*</definition>
        <argsstring>(tdualquat&lt; T, Q &gt; const &amp;q, T const &amp;s)</argsstring>
        <name>operator*</name>
        <param>
          <type>tdualquat&lt; T, Q &gt; const &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" line="119" column="25" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.inl" bodystart="188" bodyend="191" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" declline="119" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__dual__quaternion_1ga018fe9f1ad19040338c576260e7b7574" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL tdualquat&lt; T, Q &gt;</type>
        <definition>GLM_FUNC_DECL tdualquat&lt; T, Q &gt; glm::operator*</definition>
        <argsstring>(T const &amp;s, tdualquat&lt; T, Q &gt; const &amp;q)</argsstring>
        <name>operator*</name>
        <param>
          <type>T const &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>tdualquat&lt; T, Q &gt; const &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" line="122" column="25" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.inl" bodystart="194" bodyend="197" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" declline="122" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__dual__quaternion_1ga17ce17ed970043442772a579caa39476" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL tdualquat&lt; T, Q &gt;</type>
        <definition>GLM_FUNC_DECL tdualquat&lt; T, Q &gt; glm::operator/</definition>
        <argsstring>(tdualquat&lt; T, Q &gt; const &amp;q, T const &amp;s)</argsstring>
        <name>operator/</name>
        <param>
          <type>tdualquat&lt; T, Q &gt; const &amp;</type>
          <declname>q</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" line="125" column="25" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.inl" bodystart="200" bodyend="203" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" declline="125" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__dual__quaternion_1ga82faf668287e9ca3c9751d873a85970d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL bool</type>
        <definition>GLM_FUNC_DECL bool glm::operator==</definition>
        <argsstring>(tdualquat&lt; T, Q &gt; const &amp;q1, tdualquat&lt; T, Q &gt; const &amp;q2)</argsstring>
        <name>operator==</name>
        <param>
          <type>tdualquat&lt; T, Q &gt; const &amp;</type>
          <declname>q1</declname>
        </param>
        <param>
          <type>tdualquat&lt; T, Q &gt; const &amp;</type>
          <declname>q2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" line="130" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.inl" bodystart="208" bodyend="211" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" declline="130" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__dual__quaternion_1ga41964adca31c6e6b52f1367104d15646" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL bool</type>
        <definition>GLM_FUNC_DECL bool glm::operator!=</definition>
        <argsstring>(tdualquat&lt; T, Q &gt; const &amp;q1, tdualquat&lt; T, Q &gt; const &amp;q2)</argsstring>
        <name>operator!=</name>
        <param>
          <type>tdualquat&lt; T, Q &gt; const &amp;</type>
          <declname>q1</declname>
        </param>
        <param>
          <type>tdualquat&lt; T, Q &gt; const &amp;</type>
          <declname>q2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" line="133" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.inl" bodystart="214" bodyend="217" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" declline="133" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__dual__quaternion_1ga41273c54a79788b6a4a5063f557921e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL tdualquat&lt; T, Q &gt;</type>
        <definition>GLM_FUNC_DECL tdualquat&lt; T, Q &gt; glm::dual_quat_identity</definition>
        <argsstring>()</argsstring>
        <name>dual_quat_identity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an identity dual quaternion.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__dual__quaternion" kindref="compound">GLM_GTX_dual_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" line="139" column="25" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.inl" bodystart="222" bodyend="227" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" declline="139" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__dual__quaternion_1gaa9b943e6c49ea62724777d61a8931718" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL tdualquat&lt; T, Q &gt;</type>
        <definition>GLM_FUNC_DECL tdualquat&lt; T, Q &gt; glm::normalize</definition>
        <argsstring>(tdualquat&lt; T, Q &gt; const &amp;q)</argsstring>
        <name>normalize</name>
        <param>
          <type>tdualquat&lt; T, Q &gt; const &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the normalized quaternion.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__dual__quaternion" kindref="compound">GLM_GTX_dual_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" line="145" column="25" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.inl" bodystart="230" bodyend="233" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" declline="145" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__dual__quaternion_1gaefdc712720645ce7c4fc837e37d902d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL tdualquat&lt; T, Q &gt;</type>
        <definition>GLM_FUNC_DECL tdualquat&lt; T, Q &gt; glm::lerp</definition>
        <argsstring>(tdualquat&lt; T, Q &gt; const &amp;x, tdualquat&lt; T, Q &gt; const &amp;y, T const &amp;a)</argsstring>
        <name>lerp</name>
        <param>
          <type>tdualquat&lt; T, Q &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>tdualquat&lt; T, Q &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the linear interpolation of two dual quaternion.</para>
<para><simplesect kind="see"><para>gtc_dual_quaternion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" line="151" column="25" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.inl" bodystart="236" bodyend="245" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" declline="151" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__dual__quaternion_1gaa1e464c3d5cbb905447d6e9bbd1dd808" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL tdualquat&lt; T, Q &gt;</type>
        <definition>GLM_FUNC_DECL tdualquat&lt; T, Q &gt; glm::inverse</definition>
        <argsstring>(tdualquat&lt; T, Q &gt; const &amp;q)</argsstring>
        <name>inverse</name>
        <param>
          <type>tdualquat&lt; T, Q &gt; const &amp;</type>
          <declname>q</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the q inverse.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__dual__quaternion" kindref="compound">GLM_GTX_dual_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" line="157" column="25" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.inl" bodystart="248" bodyend="253" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" declline="157" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__dual__quaternion_1ga5a0b3bf8ca6d42e6fbfd590cea3b5795" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL mat&lt; 2, 4, T, Q &gt;</type>
        <definition>GLM_FUNC_DECL mat&lt; 2, 4, T, Q &gt; glm::mat2x4_cast</definition>
        <argsstring>(tdualquat&lt; T, Q &gt; const &amp;x)</argsstring>
        <name>mat2x4_cast</name>
        <param>
          <type>tdualquat&lt; T, Q &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts a quaternion to a 2 * 4 matrix.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__dual__quaternion" kindref="compound">GLM_GTX_dual_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" line="163" column="19" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.inl" bodystart="256" bodyend="259" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" declline="163" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__dual__quaternion_1gacd7c91027b92e07cc5596145b87027b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL mat&lt; 3, 4, T, Q &gt;</type>
        <definition>GLM_FUNC_DECL mat&lt; 3, 4, T, Q &gt; glm::mat3x4_cast</definition>
        <argsstring>(tdualquat&lt; T, Q &gt; const &amp;x)</argsstring>
        <name>mat3x4_cast</name>
        <param>
          <type>tdualquat&lt; T, Q &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts a quaternion to a 3 * 4 matrix.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__dual__quaternion" kindref="compound">GLM_GTX_dual_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" line="169" column="19" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.inl" bodystart="262" bodyend="295" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" declline="169" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__dual__quaternion_1ga752ed38a7e05cea2cd8aa5936f7187dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL tdualquat&lt; T, Q &gt;</type>
        <definition>GLM_FUNC_DECL tdualquat&lt; T, Q &gt; glm::dualquat_cast</definition>
        <argsstring>(mat&lt; 2, 4, T, Q &gt; const &amp;x)</argsstring>
        <name>dualquat_cast</name>
        <param>
          <type>mat&lt; 2, 4, T, Q &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts a 2 * 4 matrix (matrix which holds real and dual parts) to a quaternion.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__dual__quaternion" kindref="compound">GLM_GTX_dual_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" line="175" column="25" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.inl" bodystart="298" bodyend="303" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" declline="175" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__dual__quaternion_1gaf0936dbcf46ae51820ba445e2f097ee8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL tdualquat&lt; T, Q &gt;</type>
        <definition>GLM_FUNC_DECL tdualquat&lt; T, Q &gt; glm::dualquat_cast</definition>
        <argsstring>(mat&lt; 3, 4, T, Q &gt; const &amp;x)</argsstring>
        <name>dualquat_cast</name>
        <param>
          <type>mat&lt; 3, 4, T, Q &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts a 3 * 4 matrix (augmented matrix rotation + translation) to a quaternion.</para>
<para><simplesect kind="see"><para><ref refid="group__gtx__dual__quaternion" kindref="compound">GLM_GTX_dual_quaternion</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" line="181" column="25" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.inl" bodystart="306" bodyend="354" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/dual_quaternion.hpp" declline="181" declcolumn="25"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Include &lt;<ref refid="dual__quaternion_8hpp" kindref="compound">glm/gtx/dual_quaternion.hpp</ref>&gt; to use the features of this extension.</para>
<para>Defines a templated dual-quaternion type and several dual-quaternion operations. </para>
    </detaileddescription>
  </compounddef>
</doxygen>
