<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="glew__init__tail_8c" kind="file" language="C++">
    <compoundname>glew_init_tail.c</compoundname>
      <sectiondef kind="var">
      <memberdef kind="variable" id="glew__init__tail_8c_1af111099ad1336306f737fec3b72ef476" prot="public" static="no" mutable="no">
        <type>GLboolean</type>
        <definition>GLboolean glewExperimental</definition>
        <argsstring></argsstring>
        <name>glewExperimental</name>
        <initializer>= GL_FALSE</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glew/auto/src/glew_init_tail.c" line="33" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glew/auto/src/glew_init_tail.c" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="glew__init__tail_8c_1a25a0e391e819e1d9f32eb341716a332c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const GLubyte *GLEWAPIENTRY</type>
        <definition>const GLubyte *GLEWAPIENTRY glewGetErrorString</definition>
        <argsstring>(GLenum error)</argsstring>
        <name>glewGetErrorString</name>
        <param>
          <type>GLenum</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glew/auto/src/glew_init_tail.c" line="3" column="29" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glew/auto/src/glew_init_tail.c" bodystart="3" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="glew__init__tail_8c_1a132ce02750da0c3c6042470e65405fa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const GLubyte *GLEWAPIENTRY</type>
        <definition>const GLubyte *GLEWAPIENTRY glewGetString</definition>
        <argsstring>(GLenum name)</argsstring>
        <name>glewGetString</name>
        <param>
          <type>GLenum</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glew/auto/src/glew_init_tail.c" line="17" column="29" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glew/auto/src/glew_init_tail.c" bodystart="17" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="glew__init__tail_8c_1aa313d7a7f9f9974100fa6545f0c7356f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLenum GLEWAPIENTRY</type>
        <definition>GLenum GLEWAPIENTRY glewInit</definition>
        <argsstring>(void)</argsstring>
        <name>glewInit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glew/auto/src/glew_init_tail.c" line="35" column="21" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glew/auto/src/glew_init_tail.c" bodystart="35" bodyend="55"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLubyte<sp/>*<sp/>GLEWAPIENTRY<sp/>glewGetErrorString<sp/>(GLenum<sp/>error)</highlight></codeline>
<codeline lineno="4"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLubyte*<sp/>_glewErrorString[]<sp/>=</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLubyte*)</highlight><highlight class="stringliteral">&quot;No<sp/>error&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLubyte*)</highlight><highlight class="stringliteral">&quot;Missing<sp/>GL<sp/>version&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLubyte*)</highlight><highlight class="stringliteral">&quot;GL<sp/>1.1<sp/>and<sp/>up<sp/>are<sp/>not<sp/>supported&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLubyte*)</highlight><highlight class="stringliteral">&quot;GLX<sp/>1.2<sp/>and<sp/>up<sp/>are<sp/>not<sp/>supported&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLubyte*)</highlight><highlight class="stringliteral">&quot;Unknown<sp/>error&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max_error<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(_glewErrorString)/</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*_glewErrorString)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_glewErrorString[(size_t)error<sp/>&gt;<sp/>max_error<sp/>?<sp/>max_error<sp/>:<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)error];</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLubyte<sp/>*<sp/>GLEWAPIENTRY<sp/>glewGetString<sp/>(GLenum<sp/>name)</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLubyte*<sp/>_glewString[]<sp/>=</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLubyte*)NULL,</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLubyte*)</highlight><highlight class="stringliteral">&quot;GLEW_VERSION_STRING&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLubyte*)</highlight><highlight class="stringliteral">&quot;GLEW_VERSION_MAJOR_STRING&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLubyte*)</highlight><highlight class="stringliteral">&quot;GLEW_VERSION_MINOR_STRING&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLubyte*)</highlight><highlight class="stringliteral">&quot;GLEW_VERSION_MICRO_STRING&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max_string<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(_glewString)/</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*_glewString)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_glewString[(size_t)name<sp/>&gt;<sp/>max_string<sp/>?<sp/>0<sp/>:<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)name];</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal">GLboolean<sp/>glewExperimental<sp/>=<sp/>GL_FALSE;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">GLenum<sp/>GLEWAPIENTRY<sp/>glewInit<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>GLenum<sp/>r;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GLEW_EGL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>PFNEGLGETCURRENTDISPLAYPROC<sp/>getCurrentDisplay<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>r<sp/>=<sp/>glewContextInit();</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>r<sp/>!=<sp/>0<sp/>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GLEW_EGL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>getCurrentDisplay<sp/>=<sp/>(PFNEGLGETCURRENTDISPLAYPROC)<sp/>glewGetProcAddress(</highlight><highlight class="stringliteral">&quot;eglGetCurrentDisplay&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eglewInit(getCurrentDisplay());</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(GLEW_OSMESA)<sp/>||<sp/>defined(__ANDROID__)<sp/>||<sp/>defined(__native_client__)<sp/>||<sp/>defined(__HAIKU__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_WIN32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wglewInit();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>!defined(__APPLE__)<sp/>||<sp/>defined(GLEW_APPLE_GLX)<sp/></highlight><highlight class="comment">/*<sp/>_UNIX<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>glxewInit();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>_WIN32<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN32)<sp/>&amp;&amp;<sp/>defined(GLEW_BUILD)<sp/>&amp;&amp;<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>GCC<sp/>requires<sp/>a<sp/>DLL<sp/>entry<sp/>point<sp/>even<sp/>without<sp/>any<sp/>standard<sp/>library<sp/>included.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Types<sp/>extracted<sp/>from<sp/>windows.h<sp/>to<sp/>avoid<sp/>polluting<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>file.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__stdcall<sp/>DllMainCRTStartup(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>instance,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>reason,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>reserved)</highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>(void)<sp/>instance;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>(void)<sp/>reason;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>(void)<sp/>reserved;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glew/auto/src/glew_init_tail.c"/>
  </compounddef>
</doxygen>
