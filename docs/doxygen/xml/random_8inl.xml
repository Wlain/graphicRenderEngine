<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="random_8inl" kind="file" language="C++">
    <compoundname>random.inl</compoundname>
    <includes refid="geometric_8hpp" local="yes">../geometric.hpp</includes>
    <includes refid="exponential_8hpp" local="yes">../exponential.hpp</includes>
    <includes refid="trigonometric_8hpp" local="yes">../trigonometric.hpp</includes>
    <includes refid="ext_2vec1_8hpp" local="yes">../ext/vec1.hpp</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">ctime</includes>
    <includes local="no">cassert</includes>
    <includes local="no">cmath</includes>
    <includedby refid="random_8hpp" local="yes">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtc/random.hpp</includedby>
    <incdepgraph>
      <node id="27">
        <label>../common.hpp</label>
        <link refid="common_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>detail/_fixes.hpp</label>
        <link refid="__fixes_8hpp"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>_vectorize.hpp</label>
        <link refid="__vectorize_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>compute_vector_relational.hpp</label>
        <link refid="compute__vector__relational_8hpp_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>detail/func_common.inl</label>
        <link refid="func__common_8inl"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>detail/func_exponential.inl</label>
        <link refid="func__exponential_8inl"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>detail/func_geometric.inl</label>
        <link refid="func__geometric_8inl"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>detail/func_trigonometric.inl</label>
        <link refid="func__trigonometric_8inl"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>detail/func_vector_relational.inl</label>
        <link refid="func__vector__relational_8inl"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>qualifier.hpp</label>
        <link refid="qualifier_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>setup.hpp</label>
        <link refid="setup_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>type_float.hpp</label>
        <link refid="type__float_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>type_int.hpp</label>
        <link refid="type__int_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>detail/type_mat.hpp</label>
        <link refid="type__mat_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>type_vec.hpp</label>
        <link refid="type__vec_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>detail/type_vec1.hpp</label>
        <link refid="type__vec1_8hpp_source"/>
      </node>
      <node id="36">
        <label>../detail/type_vec1.inl</label>
        <link refid="type__vec1_8inl"/>
      </node>
      <node id="18">
        <label>detail/type_vec2.hpp</label>
        <link refid="type__vec2_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>type_vec2.inl</label>
        <link refid="type__vec2_8inl_source"/>
      </node>
      <node id="3">
        <label>detail/type_vec3.hpp</label>
        <link refid="type__vec3_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>type_vec3.inl</label>
        <link refid="type__vec3_8inl_source"/>
      </node>
      <node id="20">
        <label>detail/type_vec4.hpp</label>
        <link refid="type__vec4_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>type_vec4.inl</label>
        <link refid="type__vec4_8inl_source"/>
      </node>
      <node id="16">
        <label>../exponential.hpp</label>
        <link refid="exponential_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>../ext/vec1.hpp</label>
        <link refid="ext_2vec1_8hpp"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>../fwd.hpp</label>
        <link refid="fwd_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>../geometric.hpp</label>
        <link refid="geometric_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtc/random.inl</label>
        <link refid="random_8inl"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>../simd/platform.h</label>
        <link refid="platform_8h"/>
      </node>
      <node id="31">
        <label>../trigonometric.hpp</label>
        <link refid="trigonometric_8hpp"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>../vector_relational.hpp</label>
        <link refid="vector__relational_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>cassert</label>
      </node>
      <node id="22">
        <label>cmath</label>
      </node>
      <node id="8">
        <label>cstddef</label>
      </node>
      <node id="37">
        <label>cstdlib</label>
      </node>
      <node id="12">
        <label>cstring</label>
      </node>
      <node id="38">
        <label>ctime</label>
      </node>
      <node id="13">
        <label>limits</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/ext.hpp</label>
        <link refid="ext_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtc/random.hpp</label>
        <link refid="random_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtc/random.inl</label>
        <link refid="random_8inl"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_func_common.cpp</label>
        <link refid="core__func__common_8cpp_source"/>
      </node>
      <node id="4">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_setup_force_cxx98.cpp</label>
        <link refid="core__setup__force__cxx98_8cpp_source"/>
      </node>
      <node id="5">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_setup_force_size_t_length.cpp</label>
        <link refid="core__setup__force__size__t__length_8cpp_source"/>
      </node>
      <node id="6">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/core/core_setup_precision.cpp</label>
        <link refid="core__setup__precision_8cpp_source"/>
      </node>
      <node id="10">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/gtc/gtc_random.cpp</label>
        <link refid="gtc__random_8cpp_source"/>
      </node>
      <node id="7">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/gtx/gtx.cpp</label>
        <link refid="gtx_8cpp_source"/>
      </node>
      <node id="8">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/gtx/gtx_quaternion.cpp</label>
        <link refid="gtx__quaternion_8cpp_source"/>
      </node>
      <node id="11">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/test/gtx/gtx_simd_mat4.cpp</label>
        <link refid="gtx__simd__mat4_8cpp"/>
      </node>
      <node id="12">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/core/particleEmitter.cpp</label>
        <link refid="particle_emitter_8cpp_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structglm_1_1detail_1_1compute__rand" prot="public">glm::detail::compute_rand</innerclass>
    <innerclass refid="structglm_1_1detail_1_1compute__rand_3_011_00_01uint8_00_01_p_01_4" prot="public">glm::detail::compute_rand&lt; 1, uint8, P &gt;</innerclass>
    <innerclass refid="structglm_1_1detail_1_1compute__rand_3_012_00_01uint8_00_01_p_01_4" prot="public">glm::detail::compute_rand&lt; 2, uint8, P &gt;</innerclass>
    <innerclass refid="structglm_1_1detail_1_1compute__rand_3_013_00_01uint8_00_01_p_01_4" prot="public">glm::detail::compute_rand&lt; 3, uint8, P &gt;</innerclass>
    <innerclass refid="structglm_1_1detail_1_1compute__rand_3_014_00_01uint8_00_01_p_01_4" prot="public">glm::detail::compute_rand&lt; 4, uint8, P &gt;</innerclass>
    <innerclass refid="structglm_1_1detail_1_1compute__rand_3_01_l_00_01uint16_00_01_q_01_4" prot="public">glm::detail::compute_rand&lt; L, uint16, Q &gt;</innerclass>
    <innerclass refid="structglm_1_1detail_1_1compute__rand_3_01_l_00_01uint32_00_01_q_01_4" prot="public">glm::detail::compute_rand&lt; L, uint32, Q &gt;</innerclass>
    <innerclass refid="structglm_1_1detail_1_1compute__rand_3_01_l_00_01uint64_00_01_q_01_4" prot="public">glm::detail::compute_rand&lt; L, uint64, Q &gt;</innerclass>
    <innerclass refid="structglm_1_1detail_1_1compute__linear_rand" prot="public">glm::detail::compute_linearRand</innerclass>
    <innerclass refid="structglm_1_1detail_1_1compute__linear_rand_3_01_l_00_01int8_00_01_q_01_4" prot="public">glm::detail::compute_linearRand&lt; L, int8, Q &gt;</innerclass>
    <innerclass refid="structglm_1_1detail_1_1compute__linear_rand_3_01_l_00_01uint8_00_01_q_01_4" prot="public">glm::detail::compute_linearRand&lt; L, uint8, Q &gt;</innerclass>
    <innerclass refid="structglm_1_1detail_1_1compute__linear_rand_3_01_l_00_01int16_00_01_q_01_4" prot="public">glm::detail::compute_linearRand&lt; L, int16, Q &gt;</innerclass>
    <innerclass refid="structglm_1_1detail_1_1compute__linear_rand_3_01_l_00_01uint16_00_01_q_01_4" prot="public">glm::detail::compute_linearRand&lt; L, uint16, Q &gt;</innerclass>
    <innerclass refid="structglm_1_1detail_1_1compute__linear_rand_3_01_l_00_01int32_00_01_q_01_4" prot="public">glm::detail::compute_linearRand&lt; L, int32, Q &gt;</innerclass>
    <innerclass refid="structglm_1_1detail_1_1compute__linear_rand_3_01_l_00_01uint32_00_01_q_01_4" prot="public">glm::detail::compute_linearRand&lt; L, uint32, Q &gt;</innerclass>
    <innerclass refid="structglm_1_1detail_1_1compute__linear_rand_3_01_l_00_01int64_00_01_q_01_4" prot="public">glm::detail::compute_linearRand&lt; L, int64, Q &gt;</innerclass>
    <innerclass refid="structglm_1_1detail_1_1compute__linear_rand_3_01_l_00_01uint64_00_01_q_01_4" prot="public">glm::detail::compute_linearRand&lt; L, uint64, Q &gt;</innerclass>
    <innerclass refid="structglm_1_1detail_1_1compute__linear_rand_3_01_l_00_01float_00_01_q_01_4" prot="public">glm::detail::compute_linearRand&lt; L, float, Q &gt;</innerclass>
    <innerclass refid="structglm_1_1detail_1_1compute__linear_rand_3_01_l_00_01double_00_01_q_01_4" prot="public">glm::detail::compute_linearRand&lt; L, double, Q &gt;</innerclass>
    <innerclass refid="structglm_1_1detail_1_1compute__linear_rand_3_01_l_00_01long_01double_00_01_q_01_4" prot="public">glm::detail::compute_linearRand&lt; L, long double, Q &gt;</innerclass>
    <innernamespace refid="namespaceglm">glm</innernamespace>
    <innernamespace refid="namespaceglm_1_1detail">glm::detail</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="group__gtc__random" kindref="compound">GLM_GTC_random</ref> </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../geometric.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../exponential.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../trigonometric.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../ext/vec1.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctime&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">glm{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail</highlight></codeline>
<codeline lineno="15"><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;length_t<sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>qualifier<sp/>Q&gt;</highlight></codeline>
<codeline lineno="17" refid="structglm_1_1detail_1_1compute__rand" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structglm_1_1detail_1_1compute__rand" kindref="compound">compute_rand</ref></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, T, Q&gt;</ref><sp/>call();</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;qualifier<sp/>P&gt;</highlight></codeline>
<codeline lineno="23" refid="structglm_1_1detail_1_1compute__rand_3_011_00_01uint8_00_01_p_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structglm_1_1detail_1_1compute__rand" kindref="compound">compute_rand</ref>&lt;1,<sp/>uint8,<sp/>P&gt;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;1, uint8, P&gt;</ref><sp/>call()</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;1, uint8, P&gt;</ref>(</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::rand()<sp/>%<sp/><ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">std::numeric_limits&lt;uint8&gt;::max</ref>());</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;qualifier<sp/>P&gt;</highlight></codeline>
<codeline lineno="33" refid="structglm_1_1detail_1_1compute__rand_3_012_00_01uint8_00_01_p_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structglm_1_1detail_1_1compute__rand" kindref="compound">compute_rand</ref>&lt;2,<sp/>uint8,<sp/>P&gt;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;2, uint8, P&gt;</ref><sp/>call()</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;2, uint8, P&gt;</ref>(</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::rand()<sp/>%<sp/><ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">std::numeric_limits&lt;uint8&gt;::max</ref>(),</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::rand()<sp/>%<sp/><ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">std::numeric_limits&lt;uint8&gt;::max</ref>());</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;qualifier<sp/>P&gt;</highlight></codeline>
<codeline lineno="44" refid="structglm_1_1detail_1_1compute__rand_3_013_00_01uint8_00_01_p_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structglm_1_1detail_1_1compute__rand" kindref="compound">compute_rand</ref>&lt;3,<sp/>uint8,<sp/>P&gt;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;3, uint8, P&gt;</ref><sp/>call()</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;3, uint8, P&gt;</ref>(</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::rand()<sp/>%<sp/><ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">std::numeric_limits&lt;uint8&gt;::max</ref>(),</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::rand()<sp/>%<sp/><ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">std::numeric_limits&lt;uint8&gt;::max</ref>(),</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::rand()<sp/>%<sp/><ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">std::numeric_limits&lt;uint8&gt;::max</ref>());</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;qualifier<sp/>P&gt;</highlight></codeline>
<codeline lineno="56" refid="structglm_1_1detail_1_1compute__rand_3_014_00_01uint8_00_01_p_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structglm_1_1detail_1_1compute__rand" kindref="compound">compute_rand</ref>&lt;4,<sp/>uint8,<sp/>P&gt;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;4, uint8, P&gt;</ref><sp/>call()</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;4, uint8, P&gt;</ref>(</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::rand()<sp/>%<sp/><ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">std::numeric_limits&lt;uint8&gt;::max</ref>(),</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::rand()<sp/>%<sp/><ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">std::numeric_limits&lt;uint8&gt;::max</ref>(),</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::rand()<sp/>%<sp/><ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">std::numeric_limits&lt;uint8&gt;::max</ref>(),</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::rand()<sp/>%<sp/><ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">std::numeric_limits&lt;uint8&gt;::max</ref>());</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;length_t<sp/>L,<sp/>qualifier<sp/>Q&gt;</highlight></codeline>
<codeline lineno="69" refid="structglm_1_1detail_1_1compute__rand_3_01_l_00_01uint16_00_01_q_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structglm_1_1detail_1_1compute__rand" kindref="compound">compute_rand</ref>&lt;L,<sp/>uint16,<sp/>Q&gt;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, uint16, Q&gt;</ref><sp/>call()</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, uint16, Q&gt;</ref>(<ref refid="structglm_1_1detail_1_1compute__rand" kindref="compound">compute_rand&lt;L, uint8, Q&gt;::call</ref>())<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(8))<sp/>|</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, uint16, Q&gt;</ref>(<ref refid="structglm_1_1detail_1_1compute__rand" kindref="compound">compute_rand&lt;L, uint8, Q&gt;::call</ref>())<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0));</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;length_t<sp/>L,<sp/>qualifier<sp/>Q&gt;</highlight></codeline>
<codeline lineno="80" refid="structglm_1_1detail_1_1compute__rand_3_01_l_00_01uint32_00_01_q_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structglm_1_1detail_1_1compute__rand" kindref="compound">compute_rand</ref>&lt;L,<sp/>uint32,<sp/>Q&gt;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, uint32, Q&gt;</ref><sp/>call()</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, uint32, Q&gt;</ref>(<ref refid="structglm_1_1detail_1_1compute__rand" kindref="compound">compute_rand&lt;L, uint16, Q&gt;::call</ref>())<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(16))<sp/>|</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, uint32, Q&gt;</ref>(<ref refid="structglm_1_1detail_1_1compute__rand" kindref="compound">compute_rand&lt;L, uint16, Q&gt;::call</ref>())<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0));</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;length_t<sp/>L,<sp/>qualifier<sp/>Q&gt;</highlight></codeline>
<codeline lineno="91" refid="structglm_1_1detail_1_1compute__rand_3_01_l_00_01uint64_00_01_q_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structglm_1_1detail_1_1compute__rand" kindref="compound">compute_rand</ref>&lt;L,<sp/>uint64,<sp/>Q&gt;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, uint64, Q&gt;</ref><sp/>call()</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, uint64, Q&gt;</ref>(<ref refid="structglm_1_1detail_1_1compute__rand" kindref="compound">compute_rand&lt;L, uint32, Q&gt;::call</ref>())<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(32))<sp/>|</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, uint64, Q&gt;</ref>(<ref refid="structglm_1_1detail_1_1compute__rand" kindref="compound">compute_rand&lt;L, uint32, Q&gt;::call</ref>())<sp/>&lt;&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0));</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;length_t<sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>qualifier<sp/>Q&gt;</highlight></codeline>
<codeline lineno="102" refid="structglm_1_1detail_1_1compute__linear_rand" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structglm_1_1detail_1_1compute__linear_rand" kindref="compound">compute_linearRand</ref></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, T, Q&gt;</ref><sp/>call(<ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, T, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Min,<sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, T, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Max);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;length_t<sp/>L,<sp/>qualifier<sp/>Q&gt;</highlight></codeline>
<codeline lineno="108" refid="structglm_1_1detail_1_1compute__linear_rand_3_01_l_00_01int8_00_01_q_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structglm_1_1detail_1_1compute__linear_rand" kindref="compound">compute_linearRand</ref>&lt;L,<sp/>int8,<sp/>Q&gt;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, int8, Q&gt;</ref><sp/>call(<ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, int8, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Min,<sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, int8, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Max)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, int8, Q&gt;</ref>(<ref refid="structglm_1_1detail_1_1compute__rand" kindref="compound">compute_rand&lt;L, uint8, Q&gt;::call</ref>()<sp/>%<sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, uint8, Q&gt;</ref>(Max<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int8</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>-<sp/>Min)))<sp/>+<sp/>Min;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;length_t<sp/>L,<sp/>qualifier<sp/>Q&gt;</highlight></codeline>
<codeline lineno="117" refid="structglm_1_1detail_1_1compute__linear_rand_3_01_l_00_01uint8_00_01_q_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structglm_1_1detail_1_1compute__linear_rand" kindref="compound">compute_linearRand</ref>&lt;L,<sp/>uint8,<sp/>Q&gt;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, uint8, Q&gt;</ref><sp/>call(<ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, uint8, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Min,<sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, uint8, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Max)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structglm_1_1detail_1_1compute__rand" kindref="compound">compute_rand&lt;L, uint8, Q&gt;::call</ref>()<sp/>%<sp/>(Max<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>-<sp/>Min))<sp/>+<sp/>Min;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;length_t<sp/>L,<sp/>qualifier<sp/>Q&gt;</highlight></codeline>
<codeline lineno="126" refid="structglm_1_1detail_1_1compute__linear_rand_3_01_l_00_01int16_00_01_q_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structglm_1_1detail_1_1compute__linear_rand" kindref="compound">compute_linearRand</ref>&lt;L,<sp/>int16,<sp/>Q&gt;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, int16, Q&gt;</ref><sp/>call(<ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, int16, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Min,<sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, int16, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Max)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, int16, Q&gt;</ref>(<ref refid="structglm_1_1detail_1_1compute__rand" kindref="compound">compute_rand&lt;L, uint16, Q&gt;::call</ref>()<sp/>%<sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, uint16, Q&gt;</ref>(Max<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int16</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>-<sp/>Min)))<sp/>+<sp/>Min;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;length_t<sp/>L,<sp/>qualifier<sp/>Q&gt;</highlight></codeline>
<codeline lineno="135" refid="structglm_1_1detail_1_1compute__linear_rand_3_01_l_00_01uint16_00_01_q_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structglm_1_1detail_1_1compute__linear_rand" kindref="compound">compute_linearRand</ref>&lt;L,<sp/>uint16,<sp/>Q&gt;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, uint16, Q&gt;</ref><sp/>call(<ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, uint16, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Min,<sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, uint16, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Max)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structglm_1_1detail_1_1compute__rand" kindref="compound">compute_rand&lt;L, uint16, Q&gt;::call</ref>()<sp/>%<sp/>(Max<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>-<sp/>Min))<sp/>+<sp/>Min;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;length_t<sp/>L,<sp/>qualifier<sp/>Q&gt;</highlight></codeline>
<codeline lineno="144" refid="structglm_1_1detail_1_1compute__linear_rand_3_01_l_00_01int32_00_01_q_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structglm_1_1detail_1_1compute__linear_rand" kindref="compound">compute_linearRand</ref>&lt;L,<sp/>int32,<sp/>Q&gt;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, int32, Q&gt;</ref><sp/>call(<ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, int32, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Min,<sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, int32, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Max)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, int32, Q&gt;</ref>(<ref refid="structglm_1_1detail_1_1compute__rand" kindref="compound">compute_rand&lt;L, uint32, Q&gt;::call</ref>()<sp/>%<sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, uint32, Q&gt;</ref>(Max<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>-<sp/>Min)))<sp/>+<sp/>Min;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;length_t<sp/>L,<sp/>qualifier<sp/>Q&gt;</highlight></codeline>
<codeline lineno="153" refid="structglm_1_1detail_1_1compute__linear_rand_3_01_l_00_01uint32_00_01_q_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structglm_1_1detail_1_1compute__linear_rand" kindref="compound">compute_linearRand</ref>&lt;L,<sp/>uint32,<sp/>Q&gt;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, uint32, Q&gt;</ref><sp/>call(<ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, uint32, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Min,<sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, uint32, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Max)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structglm_1_1detail_1_1compute__rand" kindref="compound">compute_rand&lt;L, uint32, Q&gt;::call</ref>()<sp/>%<sp/>(Max<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>-<sp/>Min))<sp/>+<sp/>Min;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;length_t<sp/>L,<sp/>qualifier<sp/>Q&gt;</highlight></codeline>
<codeline lineno="162" refid="structglm_1_1detail_1_1compute__linear_rand_3_01_l_00_01int64_00_01_q_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structglm_1_1detail_1_1compute__linear_rand" kindref="compound">compute_linearRand</ref>&lt;L,<sp/>int64,<sp/>Q&gt;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, int64, Q&gt;</ref><sp/>call(<ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, int64, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Min,<sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, int64, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Max)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, int64, Q&gt;</ref>(<ref refid="structglm_1_1detail_1_1compute__rand" kindref="compound">compute_rand&lt;L, uint64, Q&gt;::call</ref>()<sp/>%<sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, uint64, Q&gt;</ref>(Max<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int64</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>-<sp/>Min)))<sp/>+<sp/>Min;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;length_t<sp/>L,<sp/>qualifier<sp/>Q&gt;</highlight></codeline>
<codeline lineno="171" refid="structglm_1_1detail_1_1compute__linear_rand_3_01_l_00_01uint64_00_01_q_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structglm_1_1detail_1_1compute__linear_rand" kindref="compound">compute_linearRand</ref>&lt;L,<sp/>uint64,<sp/>Q&gt;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, uint64, Q&gt;</ref><sp/>call(<ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, uint64, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Min,<sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, uint64, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Max)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structglm_1_1detail_1_1compute__rand" kindref="compound">compute_rand&lt;L, uint64, Q&gt;::call</ref>()<sp/>%<sp/>(Max<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>-<sp/>Min))<sp/>+<sp/>Min;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;length_t<sp/>L,<sp/>qualifier<sp/>Q&gt;</highlight></codeline>
<codeline lineno="180" refid="structglm_1_1detail_1_1compute__linear_rand_3_01_l_00_01float_00_01_q_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structglm_1_1detail_1_1compute__linear_rand" kindref="compound">compute_linearRand</ref>&lt;L,<sp/>float,<sp/>Q&gt;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, float, Q&gt;</ref><sp/>call(<ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, float, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Min,<sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, float, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Max)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, float, Q&gt;</ref>(<ref refid="structglm_1_1detail_1_1compute__rand" kindref="compound">compute_rand&lt;L, uint32, Q&gt;::call</ref>())<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">std::numeric_limits&lt;uint32&gt;::max</ref>())<sp/>*<sp/>(Max<sp/>-<sp/>Min)<sp/>+<sp/>Min;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;length_t<sp/>L,<sp/>qualifier<sp/>Q&gt;</highlight></codeline>
<codeline lineno="189" refid="structglm_1_1detail_1_1compute__linear_rand_3_01_l_00_01double_00_01_q_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structglm_1_1detail_1_1compute__linear_rand" kindref="compound">compute_linearRand</ref>&lt;L,<sp/>double,<sp/>Q&gt;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, double, Q&gt;</ref><sp/>call(<ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, double, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Min,<sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, double, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Max)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, double, Q&gt;</ref>(<ref refid="structglm_1_1detail_1_1compute__rand" kindref="compound">compute_rand&lt;L, uint64, Q&gt;::call</ref>())<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">std::numeric_limits&lt;uint64&gt;::max</ref>())<sp/>*<sp/>(Max<sp/>-<sp/>Min)<sp/>+<sp/>Min;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;length_t<sp/>L,<sp/>qualifier<sp/>Q&gt;</highlight></codeline>
<codeline lineno="198" refid="structglm_1_1detail_1_1compute__linear_rand_3_01_l_00_01long_01double_00_01_q_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structglm_1_1detail_1_1compute__linear_rand" kindref="compound">compute_linearRand</ref>&lt;L,<sp/>long<sp/>double,<sp/>Q&gt;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, long double, Q&gt;</ref><sp/>call(<ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, long double, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Min,<sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, long double, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Max)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, long double, Q&gt;</ref>(<ref refid="structglm_1_1detail_1_1compute__rand" kindref="compound">compute_rand&lt;L, uint64, Q&gt;::call</ref>())<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">std::numeric_limits&lt;uint64&gt;::max</ref>())<sp/>*<sp/>(Max<sp/>-<sp/>Min)<sp/>+<sp/>Min;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight><highlight class="comment">//namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>genType&gt;</highlight></codeline>
<codeline lineno="208" refid="group__gtc__random_1ga04e241ab88374a477a2c2ceadd2fa03d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/>genType<sp/><ref refid="group__gtc__random_1gaa22fa43ee9d191ec4ee2f113d2974567" kindref="member">linearRand</ref>(genType<sp/>Min,<sp/>genType<sp/>Max)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1detail_1_1compute__linear_rand" kindref="compound">detail::compute_linearRand&lt;1, genType, highp&gt;::call</ref>(</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;1, genType, highp&gt;</ref>(Min),</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;1, genType, highp&gt;</ref>(Max)).x;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;length_t<sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>qualifier<sp/>Q&gt;</highlight></codeline>
<codeline lineno="216" refid="group__gtc__random_1gaa22fa43ee9d191ec4ee2f113d2974567" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, T, Q&gt;</ref><sp/><ref refid="group__gtc__random_1gaa22fa43ee9d191ec4ee2f113d2974567" kindref="member">linearRand</ref>(<ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, T, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Min,<sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;L, T, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Max)</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1detail_1_1compute__linear_rand" kindref="compound">detail::compute_linearRand&lt;L, T, Q&gt;::call</ref>(Min,<sp/>Max);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>genType&gt;</highlight></codeline>
<codeline lineno="222" refid="group__gtc__random_1ga5193a83e49e4fdc5652c084711083574" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/>genType<sp/><ref refid="group__gtc__random_1ga5193a83e49e4fdc5652c084711083574" kindref="member">gaussRand</ref>(genType<sp/>Mean,<sp/>genType<sp/>Deviation)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>genType<sp/>w,<sp/>x1,<sp/>x2;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1<sp/>=<sp/><ref refid="group__gtc__random_1gaa22fa43ee9d191ec4ee2f113d2974567" kindref="member">linearRand</ref>(genType(-1),<sp/>genType(1));</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2<sp/>=<sp/><ref refid="group__gtc__random_1gaa22fa43ee9d191ec4ee2f113d2974567" kindref="member">linearRand</ref>(genType(-1),<sp/>genType(1));</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>w<sp/>=<sp/>x1<sp/>*<sp/>x1<sp/>+<sp/>x2<sp/>*<sp/>x2;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(w<sp/>&gt;<sp/>genType(1));</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x2<sp/>*<sp/>Deviation<sp/>*<sp/>Deviation<sp/>*<sp/><ref refid="group__core__func__exponential_1ga1f904e09827e939a56e4158f45ca8ede" kindref="member">sqrt</ref>((genType(-2)<sp/>*<sp/><ref refid="group__core__func__exponential_1gad26901b9f2fdd30612867a8dcfa73fbc" kindref="member">log</ref>(w))<sp/>/<sp/>w)<sp/>+<sp/>Mean;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;length_t<sp/>L,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>qualifier<sp/>Q&gt;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/><ref refid="structvec" kindref="compound">vec&lt;L, T, Q&gt;</ref><sp/>gaussRand(<ref refid="structvec" kindref="compound">vec&lt;L, T, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Mean,<sp/><ref refid="structvec" kindref="compound">vec&lt;L, T, Q&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>Deviation)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::functor2&lt;L,<sp/>T,<sp/>Q&gt;::call(gaussRand,<sp/>Mean,<sp/>Deviation);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="244" refid="group__gtc__random_1ga5d06c2fa63362899b6b3b92fd7574b84" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;2, T, defaultp&gt;</ref><sp/><ref refid="group__gtc__random_1ga5d06c2fa63362899b6b3b92fd7574b84" kindref="member">diskRand</ref>(T<sp/>Radius)</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;2, T, defaultp&gt;</ref><sp/>Result(T(0));</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>LenRadius(T(0));</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/><ref refid="group__gtc__random_1gaa22fa43ee9d191ec4ee2f113d2974567" kindref="member">linearRand</ref>(</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;2, T, defaultp&gt;</ref>(-Radius),</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;2, T, defaultp&gt;</ref>(Radius));</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LenRadius<sp/>=<sp/>length(Result);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(LenRadius<sp/>&gt;<sp/>Radius);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="262" refid="group__gtc__random_1gaee9e73396e6d094699de6684ea17ce3c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;3, T, defaultp&gt;</ref><sp/><ref refid="group__gtc__random_1gaee9e73396e6d094699de6684ea17ce3c" kindref="member">ballRand</ref>(T<sp/>Radius)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;3, T, defaultp&gt;</ref><sp/>Result(T(0));</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>LenRadius(T(0));</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Result<sp/>=<sp/><ref refid="group__gtc__random_1gaa22fa43ee9d191ec4ee2f113d2974567" kindref="member">linearRand</ref>(</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;3, T, defaultp&gt;</ref>(-Radius),</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;3, T, defaultp&gt;</ref>(Radius));</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LenRadius<sp/>=<sp/>length(Result);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(LenRadius<sp/>&gt;<sp/>Radius);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Result;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="280" refid="group__gtc__random_1gaed9dfacc8a20e691e22aafa944b1d3bf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;2, T, defaultp&gt;</ref><sp/><ref refid="group__gtc__random_1gaed9dfacc8a20e691e22aafa944b1d3bf" kindref="member">circularRand</ref>(T<sp/>Radius)</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>a<sp/>=<sp/><ref refid="group__gtc__random_1gaa22fa43ee9d191ec4ee2f113d2974567" kindref="member">linearRand</ref>(T(0),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(6.283185307179586476925286766559));</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;2, T, defaultp&gt;</ref>(<ref refid="group__core__func__trigonometric_1ga54745147add8b4fa05642f5c71f6833e" kindref="member">glm::cos</ref>(a),<sp/><ref refid="group__core__func__trigonometric_1ga3fcdcfa2d2ac38de9ba1885cd1c79414" kindref="member">glm::sin</ref>(a))<sp/>*<sp/>Radius;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="287" refid="group__gtc__random_1ga33e342051ba8122d91ec76b8a240d6e4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>GLM_FUNC_QUALIFIER<sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;3, T, defaultp&gt;</ref><sp/><ref refid="group__gtc__random_1ga33e342051ba8122d91ec76b8a240d6e4" kindref="member">sphericalRand</ref>(T<sp/>Radius)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>theta<sp/>=<sp/><ref refid="group__gtc__random_1gaa22fa43ee9d191ec4ee2f113d2974567" kindref="member">linearRand</ref>(T(0),<sp/>T(6.283185307179586476925286766559f));</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>phi<sp/>=<sp/><ref refid="group__core__func__trigonometric_1gaf621a212fa21c1009344895a52e9c82c" kindref="member">std::acos</ref>(<ref refid="group__gtc__random_1gaa22fa43ee9d191ec4ee2f113d2974567" kindref="member">linearRand</ref>(T(-1.0f),<sp/>T(1.0f)));</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>x<sp/>=<sp/><ref refid="group__core__func__trigonometric_1ga3fcdcfa2d2ac38de9ba1885cd1c79414" kindref="member">std::sin</ref>(phi)<sp/>*<sp/><ref refid="group__core__func__trigonometric_1ga54745147add8b4fa05642f5c71f6833e" kindref="member">std::cos</ref>(theta);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>y<sp/>=<sp/><ref refid="group__core__func__trigonometric_1ga3fcdcfa2d2ac38de9ba1885cd1c79414" kindref="member">std::sin</ref>(phi)<sp/>*<sp/><ref refid="group__core__func__trigonometric_1ga3fcdcfa2d2ac38de9ba1885cd1c79414" kindref="member">std::sin</ref>(theta);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>z<sp/>=<sp/><ref refid="group__core__func__trigonometric_1ga54745147add8b4fa05642f5c71f6833e" kindref="member">std::cos</ref>(phi);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structglm_1_1vec" kindref="compound">vec&lt;3, T, defaultp&gt;</ref>(x,<sp/>y,<sp/>z)<sp/>*<sp/>Radius;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight><highlight class="comment">//namespace<sp/>glm</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtc/random.inl"/>
  </compounddef>
</doxygen>
