<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="stb__glprog_8h" kind="file" language="C++">
    <compoundname>stb_glprog.h</compoundname>
    <includedby refid="cave__main_8c" local="yes">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_main.c</includedby>
    <includedby refid="cave__mesher_8c" local="yes">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_mesher.c</includedby>
    <includedby refid="cave__render_8c" local="yes">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_render.c</includedby>
    <invincdepgraph>
      <node id="2">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_main.c</label>
        <link refid="cave__main_8c_source"/>
      </node>
      <node id="3">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_mesher.c</label>
        <link refid="cave__mesher_8c_source"/>
      </node>
      <node id="4">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/cave_render.c</label>
        <link refid="cave__render_8c_source"/>
      </node>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h</label>
        <link refid="stb__glprog_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="stb__glprog_8h_1a92da8f0259bcaf1ec21c504965d7cf6d" prot="public" static="no">
        <name>STBGL_VERTEX_SHADER</name>
        <initializer>GL_VERTEX_SHADER</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" line="160" column="10" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stb__glprog_8h_1a8210b967d89596e63378e7a4a8ebc9ce" prot="public" static="no">
        <name>STBGL_FRAGMENT_SHADER</name>
        <initializer>GL_FRAGMENT_SHADER</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" line="161" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="stb__glprog_8h_1a40e75cc08efa43f853e710a6462a29e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLuint</type>
        <definition>GLuint stbgl_create_program</definition>
        <argsstring>(char const **vertex_source, char const **frag_source, char const **binds, char *error, int error_buflen)</argsstring>
        <name>stbgl_create_program</name>
        <param>
          <type>char const **</type>
          <declname>vertex_source</declname>
        </param>
        <param>
          <type>char const **</type>
          <declname>frag_source</declname>
        </param>
        <param>
          <type>char const **</type>
          <declname>binds</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>error</declname>
        </param>
        <param>
          <type>int</type>
          <declname>error_buflen</declname>
        </param>
        <briefdescription>
<para>EASY API. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" line="63" column="15" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" declline="63" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="stb__glprog_8h_1ae2eb5b006d79c1520dbf622c5a48c9cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stgbl_delete_program</definition>
        <argsstring>(GLuint program)</argsstring>
        <name>stgbl_delete_program</name>
        <param>
          <type>GLuint</type>
          <declname>program</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" line="85" column="13" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" declline="85" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="stb__glprog_8h_1a207d9a52abed8b5672d7518150d671ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLuint</type>
        <definition>GLuint stbgl_compile_shader</definition>
        <argsstring>(GLenum type, char const **sources, int num_sources, char *error, int error_buflen)</argsstring>
        <name>stbgl_compile_shader</name>
        <param>
          <type>GLenum</type>
          <declname>type</declname>
        </param>
        <param>
          <type>char const **</type>
          <declname>sources</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_sources</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>error</declname>
        </param>
        <param>
          <type>int</type>
          <declname>error_buflen</declname>
        </param>
        <briefdescription>
<para>FLEXIBLE API. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" line="91" column="15" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" declline="91" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="stb__glprog_8h_1a1125326b76660713a4e8ad6e5656baa1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLuint</type>
        <definition>GLuint stbgl_link_program</definition>
        <argsstring>(GLuint vertex_shader, GLuint fragment_shader, char const **binds, int num_binds, char *error, int error_buflen)</argsstring>
        <name>stbgl_link_program</name>
        <param>
          <type>GLuint</type>
          <declname>vertex_shader</declname>
        </param>
        <param>
          <type>GLuint</type>
          <declname>fragment_shader</declname>
        </param>
        <param>
          <type>char const **</type>
          <declname>binds</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_binds</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>error</declname>
        </param>
        <param>
          <type>int</type>
          <declname>error_buflen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" line="102" column="15" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" declline="102" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="stb__glprog_8h_1aaff23264e9d3715f2cd2a364898b3f0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stbgl_delete_shader</definition>
        <argsstring>(GLuint shader)</argsstring>
        <name>stbgl_delete_shader</name>
        <param>
          <type>GLuint</type>
          <declname>shader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" line="109" column="13" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" declline="109" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="stb__glprog_8h_1a188b0d913a30b6ebbdd3629aad89fe45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLint</type>
        <definition>GLint stbgl_find_uniform</definition>
        <argsstring>(GLuint prog, char *uniform)</argsstring>
        <name>stbgl_find_uniform</name>
        <param>
          <type>GLuint</type>
          <declname>prog</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>uniform</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" line="115" column="14" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" declline="115" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="stb__glprog_8h_1a2620e87839f260b78eea5cd662fe0253" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stbgl_find_uniforms</definition>
        <argsstring>(GLuint prog, GLint *locations, char const **uniforms, int num_uniforms)</argsstring>
        <name>stbgl_find_uniforms</name>
        <param>
          <type>GLuint</type>
          <declname>prog</declname>
        </param>
        <param>
          <type>GLint *</type>
          <declname>locations</declname>
        </param>
        <param>
          <type>char const **</type>
          <declname>uniforms</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_uniforms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" line="117" column="13" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" declline="117" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="stb__glprog_8h_1ab6c9aabf76a35fa89ef35acd64cdd1a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stbglUseProgram</definition>
        <argsstring>(GLuint program)</argsstring>
        <name>stbglUseProgram</name>
        <param>
          <type>GLuint</type>
          <declname>program</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" line="125" column="13" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" declline="125" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="stb__glprog_8h_1a265dee9b58835d90f7506a8b20d9217d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stbglVertexAttribPointer</definition>
        <argsstring>(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)</argsstring>
        <name>stbglVertexAttribPointer</name>
        <param>
          <type>GLuint</type>
          <declname>index</declname>
        </param>
        <param>
          <type>GLint</type>
          <declname>size</declname>
        </param>
        <param>
          <type>GLenum</type>
          <declname>type</declname>
        </param>
        <param>
          <type>GLboolean</type>
          <declname>normalized</declname>
        </param>
        <param>
          <type>GLsizei</type>
          <declname>stride</declname>
        </param>
        <param>
          <type>const GLvoid *</type>
          <declname>pointer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" line="126" column="13" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" declline="126" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="stb__glprog_8h_1a9c550b3836b06a4993b1401605653c7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stbglEnableVertexAttribArray</definition>
        <argsstring>(GLuint index)</argsstring>
        <name>stbglEnableVertexAttribArray</name>
        <param>
          <type>GLuint</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" line="127" column="13" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" declline="127" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="stb__glprog_8h_1a6e0cf99bd61c0ac06ddee977bf2ad82e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stbglDisableVertexAttribArray</definition>
        <argsstring>(GLuint index)</argsstring>
        <name>stbglDisableVertexAttribArray</name>
        <param>
          <type>GLuint</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" line="128" column="13" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" declline="128" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="stb__glprog_8h_1a42f06dca111aeb535f2a855a1bb67b88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stbglUniform1fv</definition>
        <argsstring>(GLint loc, GLsizei count, const GLfloat *v)</argsstring>
        <name>stbglUniform1fv</name>
        <param>
          <type>GLint</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>GLsizei</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const GLfloat *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" line="129" column="13" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" declline="129" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="stb__glprog_8h_1af2c4135afc8285d4f68502fdb6b59171" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stbglUniform2fv</definition>
        <argsstring>(GLint loc, GLsizei count, const GLfloat *v)</argsstring>
        <name>stbglUniform2fv</name>
        <param>
          <type>GLint</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>GLsizei</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const GLfloat *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" line="130" column="13" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" declline="130" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="stb__glprog_8h_1a252326a1e2ad9dde401ac5c6fbe12c84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stbglUniform3fv</definition>
        <argsstring>(GLint loc, GLsizei count, const GLfloat *v)</argsstring>
        <name>stbglUniform3fv</name>
        <param>
          <type>GLint</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>GLsizei</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const GLfloat *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" line="131" column="13" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" declline="131" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="stb__glprog_8h_1abe59b33d15b159f1eaa0ad71c94d72b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stbglUniform4fv</definition>
        <argsstring>(GLint loc, GLsizei count, const GLfloat *v)</argsstring>
        <name>stbglUniform4fv</name>
        <param>
          <type>GLint</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>GLsizei</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const GLfloat *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" line="132" column="13" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" declline="132" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="stb__glprog_8h_1a0eba5330d9e5ff55d29746e888a501f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stbglUniform1iv</definition>
        <argsstring>(GLint loc, GLsizei count, const GLint *v)</argsstring>
        <name>stbglUniform1iv</name>
        <param>
          <type>GLint</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>GLsizei</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const GLint *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" line="133" column="13" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" declline="133" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="stb__glprog_8h_1a99bac589cd4f23eb17910fd2718aa4ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stbglUniform2iv</definition>
        <argsstring>(GLint loc, GLsizei count, const GLint *v)</argsstring>
        <name>stbglUniform2iv</name>
        <param>
          <type>GLint</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>GLsizei</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const GLint *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" line="134" column="13" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" declline="134" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="stb__glprog_8h_1ab4b9774757f2a6cbd025d9b070b1b749" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stbglUniform3iv</definition>
        <argsstring>(GLint loc, GLsizei count, const GLint *v)</argsstring>
        <name>stbglUniform3iv</name>
        <param>
          <type>GLint</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>GLsizei</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const GLint *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" line="135" column="13" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" declline="135" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="stb__glprog_8h_1a26b07ea9d3ca3d6bc3550e1477ee3054" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stbglUniform4iv</definition>
        <argsstring>(GLint loc, GLsizei count, const GLint *v)</argsstring>
        <name>stbglUniform4iv</name>
        <param>
          <type>GLint</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>GLsizei</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const GLint *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" line="136" column="13" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" declline="136" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="stb__glprog_8h_1a59668a43314baddf019b2de65adf533c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stbglUniform1f</definition>
        <argsstring>(GLint loc, float v0)</argsstring>
        <name>stbglUniform1f</name>
        <param>
          <type>GLint</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" line="137" column="13" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" declline="137" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="stb__glprog_8h_1abafe35afbc43665776dfddd321dcc331" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stbglUniform2f</definition>
        <argsstring>(GLint loc, float v0, float v1)</argsstring>
        <name>stbglUniform2f</name>
        <param>
          <type>GLint</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" line="138" column="13" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" declline="138" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="stb__glprog_8h_1a42921e4e6b59627bf39b4dccc0b334a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stbglUniform3f</definition>
        <argsstring>(GLint loc, float v0, float v1, float v2)</argsstring>
        <name>stbglUniform3f</name>
        <param>
          <type>GLint</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" line="139" column="13" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" declline="139" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="stb__glprog_8h_1aad031616bd9146760b90a3b0c7ea4091" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stbglUniform4f</definition>
        <argsstring>(GLint loc, float v0, float v1, float v2, float v3)</argsstring>
        <name>stbglUniform4f</name>
        <param>
          <type>GLint</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" line="140" column="13" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" declline="140" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="stb__glprog_8h_1a76ccc6fc647c6ac4f8cc4d094d4a6334" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stbglUniform1i</definition>
        <argsstring>(GLint loc, GLint v0)</argsstring>
        <name>stbglUniform1i</name>
        <param>
          <type>GLint</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>GLint</type>
          <declname>v0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" line="141" column="13" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" declline="141" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="stb__glprog_8h_1ac019f4c0cd647e055d895e1274e34285" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stbglUniform2i</definition>
        <argsstring>(GLint loc, GLint v0, GLint v1)</argsstring>
        <name>stbglUniform2i</name>
        <param>
          <type>GLint</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>GLint</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>GLint</type>
          <declname>v1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" line="142" column="13" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" declline="142" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="stb__glprog_8h_1ad26bef9dd61d1e840b99f589aeb67ac6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stbglUniform3i</definition>
        <argsstring>(GLint loc, GLint v0, GLint v1, GLint v2)</argsstring>
        <name>stbglUniform3i</name>
        <param>
          <type>GLint</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>GLint</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>GLint</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>GLint</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" line="143" column="13" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" declline="143" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="stb__glprog_8h_1a0c5c8a6cb1918271c42ff45b622faf27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stbglUniform4i</definition>
        <argsstring>(GLint loc, GLint v0, GLint v1, GLint v2, GLint v3)</argsstring>
        <name>stbglUniform4i</name>
        <param>
          <type>GLint</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>GLint</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>GLint</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>GLint</type>
          <declname>v2</declname>
        </param>
        <param>
          <type>GLint</type>
          <declname>v3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" line="144" column="13" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h" declline="144" declcolumn="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>stb_glprog<sp/>v0.02<sp/>public<sp/>domain<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>functions<sp/>to<sp/>reduce<sp/>GLSL<sp/>boilerplate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://nothings.org/stb/stb_glprog.h<sp/><sp/><sp/>especially<sp/>with<sp/>GL1<sp/>+<sp/>ARB<sp/>extensions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Following<sp/>defines<sp/>*before*<sp/>including<sp/>have<sp/>following<sp/>effects:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>STB_GLPROG_IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>creates<sp/>the<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>STB_GLPROG_STATIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forces<sp/>the<sp/>implementation<sp/>to<sp/>be<sp/>static<sp/>(private<sp/>to<sp/>file<sp/>that<sp/>creates<sp/>it)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>STB_GLPROG_ARB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uses<sp/>ARB<sp/>extension<sp/>names<sp/>for<sp/>GLSL<sp/>functions<sp/>and<sp/>enumerants<sp/>instead<sp/>of<sp/>core<sp/>names</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>STB_GLPROG_ARB_DEFINE_EXTENSIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instantiates<sp/>function<sp/>pointers<sp/>needed,<sp/>static<sp/>to<sp/>implementing<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>avoid<sp/>collisions<sp/>(but<sp/>will<sp/>collide<sp/>if<sp/>implementing<sp/>file<sp/>also</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defines<sp/>any;<sp/>best<sp/>to<sp/>isolate<sp/>this<sp/>to<sp/>its<sp/>own<sp/>file<sp/>in<sp/>this<sp/>case).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>will<sp/>try<sp/>to<sp/>automatically<sp/>#include<sp/>glext.h,<sp/>but<sp/>if<sp/>it&apos;s<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>the<sp/>default<sp/>include<sp/>directories<sp/>you&apos;ll<sp/>need<sp/>to<sp/>include<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yourself<sp/>and<sp/>define<sp/>the<sp/>next<sp/>macro.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>STB_GLPROG_SUPPRESS_GLEXT_INCLUDE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>disables<sp/>the<sp/>automatic<sp/>#include<sp/>of<sp/>glext.h<sp/>which<sp/>is<sp/>normally</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>forced<sp/>by<sp/>STB_GLPROG_ARB_DEFINE_EXTENSIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>So,<sp/>e.g.,<sp/>sample<sp/>usage<sp/>on<sp/>an<sp/>old<sp/>Windows<sp/>compiler:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>#define<sp/>STB_GLPROG_IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>#define<sp/>STB_GLPROG_ARB_DEFINE_EXTENSIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>#include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>#include<sp/>&quot;gl/gl.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>#include<sp/>&quot;stb_glprog.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>though<sp/>that<sp/>the<sp/>header-file<sp/>version<sp/>of<sp/>this<sp/>(when<sp/>you<sp/>don&apos;t<sp/>define</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STB_GLPROG_IMPLEMENTATION)<sp/>still<sp/>uses<sp/>GLint<sp/>and<sp/>such,<sp/>so<sp/>you<sp/>basically</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>can<sp/>only<sp/>include<sp/>it<sp/>in<sp/>places<sp/>where<sp/>you&apos;re<sp/>already<sp/>including<sp/>GL,<sp/>especially</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>Windows<sp/>where<sp/>including<sp/>&quot;gl.h&quot;<sp/>requires<sp/>(some<sp/>of)<sp/>&quot;windows.h&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>following<sp/>comment<sp/>blocks<sp/>for<sp/>function<sp/>documentation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Version<sp/>history:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>2013-12-08<sp/><sp/><sp/>v0.02<sp/><sp/><sp/>slightly<sp/>simplified<sp/>API<sp/>and<sp/>reduced<sp/>GL<sp/>resource<sp/>usage<sp/>(@rygorous)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>2013-12-08<sp/><sp/><sp/>v0.01<sp/><sp/><sp/>initial<sp/>release</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>header<sp/>file<sp/>section<sp/>starts<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(INCLUDE_STB_GLPROG_H)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INCLUDE_STB_GLPROG_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_GLPROG_STATIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>GLuint<sp/>stbgl_create_program(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>**vertex_source,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>**frag_source,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>**binds,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*error,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_buflen);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>returns<sp/>a<sp/>compiled<sp/>program<sp/>or<sp/>0<sp/>if<sp/>there&apos;s<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>free<sp/>the<sp/>created<sp/>program,<sp/>call<sp/>stbgl_delete_program.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>stbgl_create_program(</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char<sp/>**vertex_source,<sp/><sp/><sp/>//<sp/>NULL<sp/>or<sp/>one<sp/>or<sp/>more<sp/>strings<sp/>with<sp/>the<sp/>vertex<sp/>shader<sp/>source,<sp/>with<sp/>a<sp/>final<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char<sp/>**frag_source,<sp/><sp/><sp/><sp/><sp/>//<sp/>NULL<sp/>or<sp/>one<sp/>or<sp/>more<sp/>strings<sp/>with<sp/>the<sp/>fragment<sp/>shader<sp/>source,<sp/>with<sp/>a<sp/>final<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char<sp/>**binds,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>NULL<sp/>or<sp/>zero<sp/>or<sp/>more<sp/>strings<sp/>with<sp/>attribute<sp/>bind<sp/>names,<sp/>with<sp/>a<sp/>final<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char<sp/>*error,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>output<sp/>location<sp/>where<sp/>compile<sp/>error<sp/>message<sp/>is<sp/>placed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>error_buflen)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>length<sp/>of<sp/>error<sp/>output<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>GLuint<sp/>with<sp/>the<sp/>GL<sp/>program<sp/>object<sp/>handle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>an<sp/>individual<sp/>bind<sp/>string<sp/>is<sp/>&quot;&quot;,<sp/>no<sp/>name<sp/>is<sp/>bound<sp/>to<sp/>that<sp/>slot<sp/>(this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>allows<sp/>you<sp/>to<sp/>create<sp/>binds<sp/>that<sp/>aren&apos;t<sp/>continuous<sp/>integers<sp/>starting<sp/>at<sp/>0).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>vertex<sp/>shader<sp/>is<sp/>NULL,<sp/>then<sp/>fixed-function<sp/>vertex<sp/>pipeline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>used,<sp/>if<sp/>that&apos;s<sp/>legal<sp/>in<sp/>your<sp/>version<sp/>of<sp/>GL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>fragment<sp/>shader<sp/>is<sp/>NULL,<sp/>then<sp/>fixed-function<sp/>fragment<sp/>pipeline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>used,<sp/>if<sp/>that&apos;s<sp/>legal<sp/>in<sp/>your<sp/>version<sp/>of<sp/>GL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stgbl_delete_program(GLuint<sp/>program);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/>deletes<sp/>a<sp/>program<sp/>created<sp/>by<sp/>stbgl_create_program<sp/>or<sp/>stbgl_link_program</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>GLuint<sp/>stbgl_compile_shader(GLenum<sp/>type,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>**sources,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_sources,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*error,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_buflen);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compiles<sp/>a<sp/>shader.<sp/>returns<sp/>the<sp/>shader<sp/>on<sp/>success<sp/>or<sp/>0<sp/>on<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>either:<sp/><sp/>GL_VERTEX_SHADER<sp/>or<sp/>GL_FRAGMENT_SHADER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/><sp/><sp/><sp/>GL_VERTEX_SHADER_ARB<sp/>or<sp/>GL_FRAGMENT_SHADER_ARB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/><sp/><sp/><sp/>STBGL_VERTEX_SHADER<sp/>or<sp/>STBGL_FRAGMENT_SHADER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>sources<sp/><sp/><sp/><sp/><sp/><sp/><sp/>array<sp/>of<sp/>strings<sp/>containing<sp/>the<sp/>shader<sp/>source</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>num_sources<sp/><sp/><sp/>number<sp/>of<sp/>string<sp/>in<sp/>sources,<sp/>or<sp/>-1<sp/>meaning<sp/>sources<sp/>is<sp/>NULL-terminated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>error<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string<sp/>to<sp/>output<sp/>compiler<sp/>error<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>error_buflen<sp/><sp/>length<sp/>of<sp/>error<sp/>buffer<sp/>in<sp/>chars</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>GLuint<sp/>stbgl_link_program(GLuint<sp/>vertex_shader,<sp/>GLuint<sp/>fragment_shader,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>**binds,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_binds,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*error,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_buflen);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">//<sp/>links<sp/>a<sp/>shader.<sp/>returns<sp/>the<sp/>linked<sp/>program<sp/>on<sp/>success<sp/>or<sp/>0<sp/>on<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>vertex_shader<sp/><sp/><sp/><sp/>a<sp/>compiled<sp/>vertex<sp/>shader<sp/>from<sp/>stbgl_compile_shader,<sp/>or<sp/>0<sp/>for<sp/>fixed-function<sp/>(if<sp/>legal)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>fragment_shader<sp/><sp/>a<sp/>compiled<sp/>fragment<sp/>shader<sp/>from<sp/>stbgl_compile_shader,<sp/>or<sp/>0<sp/>for<sp/>fixed-function<sp/>(if<sp/>legal)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbgl_delete_shader(GLuint<sp/>shader);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//<sp/>deletes<sp/>a<sp/>shader<sp/>created<sp/>by<sp/>stbgl_compile_shader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>GLint<sp/>stbgl_find_uniform(GLuint<sp/>prog,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*uniform);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbgl_find_uniforms(GLuint<sp/>prog,<sp/>GLint<sp/>*locations,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>**uniforms,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_uniforms);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Given<sp/>the<sp/>locations<sp/>array<sp/>that<sp/>is<sp/>num_uniforms<sp/>long,<sp/>fills<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>locations<sp/>of<sp/>each<sp/>of<sp/>those<sp/>uniforms<sp/>for<sp/>the<sp/>specified<sp/>program.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>num_uniforms<sp/>is<sp/>-1,<sp/>then<sp/>uniforms[]<sp/>must<sp/>be<sp/>NULL-terminated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>following<sp/>functions<sp/>just<sp/>wrap<sp/>the<sp/>difference<sp/>in<sp/>naming<sp/>between<sp/>GL2+<sp/>and<sp/>ARB,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//<sp/>so<sp/>you<sp/>don&apos;t<sp/>need<sp/>them<sp/>unless<sp/>you&apos;re<sp/>using<sp/>both<sp/>ARB<sp/>and<sp/>GL2+<sp/>in<sp/>the<sp/>same<sp/>codebase,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>you&apos;re<sp/>relying<sp/>on<sp/>this<sp/>lib<sp/>to<sp/>provide<sp/>the<sp/>extensions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglUseProgram(GLuint<sp/>program);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglVertexAttribPointer(GLuint<sp/>index,<sp/><sp/>GLint<sp/>size,<sp/><sp/>GLenum<sp/>type,<sp/><sp/>GLboolean<sp/>normalized,<sp/><sp/>GLsizei<sp/>stride,<sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLvoid<sp/>*<sp/>pointer);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglEnableVertexAttribArray(GLuint<sp/>index);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglDisableVertexAttribArray(GLuint<sp/>index);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglUniform1fv(GLint<sp/>loc,<sp/>GLsizei<sp/>count,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLfloat<sp/>*v);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglUniform2fv(GLint<sp/>loc,<sp/>GLsizei<sp/>count,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLfloat<sp/>*v);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglUniform3fv(GLint<sp/>loc,<sp/>GLsizei<sp/>count,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLfloat<sp/>*v);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglUniform4fv(GLint<sp/>loc,<sp/>GLsizei<sp/>count,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLfloat<sp/>*v);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglUniform1iv(GLint<sp/>loc,<sp/>GLsizei<sp/>count,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLint<sp/>*v);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglUniform2iv(GLint<sp/>loc,<sp/>GLsizei<sp/>count,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLint<sp/>*v);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglUniform3iv(GLint<sp/>loc,<sp/>GLsizei<sp/>count,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLint<sp/>*v);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglUniform4iv(GLint<sp/>loc,<sp/>GLsizei<sp/>count,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLint<sp/>*v);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglUniform1f(GLint<sp/>loc,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v0);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglUniform2f(GLint<sp/>loc,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v0,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v1);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglUniform3f(GLint<sp/>loc,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v0,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v2);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglUniform4f(GLint<sp/>loc,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v0,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v2,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v3);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglUniform1i(GLint<sp/>loc,<sp/>GLint<sp/>v0);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglUniform2i(GLint<sp/>loc,<sp/>GLint<sp/>v0,<sp/>GLint<sp/>v1);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglUniform3i(GLint<sp/>loc,<sp/>GLint<sp/>v0,<sp/>GLint<sp/>v1,<sp/>GLint<sp/>v2);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglUniform4i(GLint<sp/>loc,<sp/>GLint<sp/>v0,<sp/>GLint<sp/>v1,<sp/>GLint<sp/>v2,<sp/>GLint<sp/>v3);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>STB_GLPROG_STATIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_GLPROG_ARB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBGL_VERTEX_SHADER<sp/><sp/><sp/><sp/>GL_VERTEX_SHADER_ARB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBGL_FRAGMENT_SHADER<sp/><sp/>GL_FRAGMENT_SHADER_ARB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBGL_VERTEX_SHADER<sp/><sp/><sp/><sp/>GL_VERTEX_SHADER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBGL_FRAGMENT_SHADER<sp/><sp/>GL_FRAGMENT_SHADER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>INCLUDE_STB_GLPROG_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_GLPROG_IMPLEMENTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>strncpy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_GLPROG_STATIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_GLPROG_DECLARE<sp/>static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_GLPROG_DECLARE<sp/>extern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>user<sp/>wants<sp/>this<sp/>file<sp/>to<sp/>define<sp/>the<sp/>GL<sp/>extensions<sp/>itself</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_GLPROG_ARB_DEFINE_EXTENSIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_GLPROG_ARB<sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>sure<sp/>later<sp/>code<sp/>uses<sp/>the<sp/>extensions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB_GLPROG_SUPPRESS_GLEXT_INCLUDE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;glext.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_GLPROG_EXTENSIONS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="188"><highlight class="preprocessor"><sp/><sp/><sp/>STB_GLPROG_FUNC(ATTACHOBJECT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>AttachObject<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>\</highlight></codeline>
<codeline lineno="189"><highlight class="preprocessor"><sp/><sp/><sp/>STB_GLPROG_FUNC(BINDATTRIBLOCATION<sp/><sp/>,<sp/>BindAttribLocation<sp/><sp/>)<sp/>\</highlight></codeline>
<codeline lineno="190"><highlight class="preprocessor"><sp/><sp/><sp/>STB_GLPROG_FUNC(COMPILESHADER<sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>CompileShader<sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>\</highlight></codeline>
<codeline lineno="191"><highlight class="preprocessor"><sp/><sp/><sp/>STB_GLPROG_FUNC(CREATEPROGRAMOBJECT<sp/>,<sp/>CreateProgramObject<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="192"><highlight class="preprocessor"><sp/><sp/><sp/>STB_GLPROG_FUNC(CREATESHADEROBJECT<sp/><sp/>,<sp/>CreateShaderObject<sp/><sp/>)<sp/>\</highlight></codeline>
<codeline lineno="193"><highlight class="preprocessor"><sp/><sp/><sp/>STB_GLPROG_FUNC(DELETEOBJECT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>DeleteObject<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>\</highlight></codeline>
<codeline lineno="194"><highlight class="preprocessor"><sp/><sp/><sp/>STB_GLPROG_FUNC(DETACHOBJECT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>DetachObject<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>\</highlight></codeline>
<codeline lineno="195"><highlight class="preprocessor"><sp/><sp/><sp/>STB_GLPROG_FUNC(DISABLEVERTEXATTRIBARRAY,<sp/>DisableVertexAttribArray)<sp/>\</highlight></codeline>
<codeline lineno="196"><highlight class="preprocessor"><sp/><sp/><sp/>STB_GLPROG_FUNC(ENABLEVERTEXATTRIBARRAY,<sp/><sp/>EnableVertexAttribArray<sp/>)<sp/>\</highlight></codeline>
<codeline lineno="197"><highlight class="preprocessor"><sp/><sp/><sp/>STB_GLPROG_FUNC(GETATTACHEDOBJECTS<sp/><sp/>,<sp/>GetAttachedObjects<sp/><sp/>)<sp/>\</highlight></codeline>
<codeline lineno="198"><highlight class="preprocessor"><sp/><sp/><sp/>STB_GLPROG_FUNC(GETOBJECTPARAMETERIV,<sp/>GetObjectParameteriv)<sp/>\</highlight></codeline>
<codeline lineno="199"><highlight class="preprocessor"><sp/><sp/><sp/>STB_GLPROG_FUNC(GETINFOLOG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>GetInfoLog<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>\</highlight></codeline>
<codeline lineno="200"><highlight class="preprocessor"><sp/><sp/><sp/>STB_GLPROG_FUNC(GETUNIFORMLOCATION<sp/><sp/>,<sp/>GetUniformLocation<sp/><sp/>)<sp/>\</highlight></codeline>
<codeline lineno="201"><highlight class="preprocessor"><sp/><sp/><sp/>STB_GLPROG_FUNC(LINKPROGRAM<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>LinkProgram<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>\</highlight></codeline>
<codeline lineno="202"><highlight class="preprocessor"><sp/><sp/><sp/>STB_GLPROG_FUNC(SHADERSOURCE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>ShaderSource<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>\</highlight></codeline>
<codeline lineno="203"><highlight class="preprocessor"><sp/><sp/><sp/>STB_GLPROG_FUNC(UNIFORM1F<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>Uniform1f<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>\</highlight></codeline>
<codeline lineno="204"><highlight class="preprocessor"><sp/><sp/><sp/>STB_GLPROG_FUNC(UNIFORM2F<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>Uniform2f<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>\</highlight></codeline>
<codeline lineno="205"><highlight class="preprocessor"><sp/><sp/><sp/>STB_GLPROG_FUNC(UNIFORM3F<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>Uniform3f<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>\</highlight></codeline>
<codeline lineno="206"><highlight class="preprocessor"><sp/><sp/><sp/>STB_GLPROG_FUNC(UNIFORM4F<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>Uniform4f<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>\</highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor"><sp/><sp/><sp/>STB_GLPROG_FUNC(UNIFORM1I<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>Uniform1i<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>\</highlight></codeline>
<codeline lineno="208"><highlight class="preprocessor"><sp/><sp/><sp/>STB_GLPROG_FUNC(UNIFORM2I<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>Uniform2i<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>\</highlight></codeline>
<codeline lineno="209"><highlight class="preprocessor"><sp/><sp/><sp/>STB_GLPROG_FUNC(UNIFORM3I<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>Uniform3i<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>\</highlight></codeline>
<codeline lineno="210"><highlight class="preprocessor"><sp/><sp/><sp/>STB_GLPROG_FUNC(UNIFORM4I<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>Uniform4i<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>\</highlight></codeline>
<codeline lineno="211"><highlight class="preprocessor"><sp/><sp/><sp/>STB_GLPROG_FUNC(UNIFORM1FV<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>Uniform1fv<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>\</highlight></codeline>
<codeline lineno="212"><highlight class="preprocessor"><sp/><sp/><sp/>STB_GLPROG_FUNC(UNIFORM2FV<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>Uniform2fv<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>\</highlight></codeline>
<codeline lineno="213"><highlight class="preprocessor"><sp/><sp/><sp/>STB_GLPROG_FUNC(UNIFORM3FV<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>Uniform3fv<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>\</highlight></codeline>
<codeline lineno="214"><highlight class="preprocessor"><sp/><sp/><sp/>STB_GLPROG_FUNC(UNIFORM4FV<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>Uniform4fv<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>\</highlight></codeline>
<codeline lineno="215"><highlight class="preprocessor"><sp/><sp/><sp/>STB_GLPROG_FUNC(UNIFORM1IV<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>Uniform1iv<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>\</highlight></codeline>
<codeline lineno="216"><highlight class="preprocessor"><sp/><sp/><sp/>STB_GLPROG_FUNC(UNIFORM2IV<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>Uniform2iv<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>\</highlight></codeline>
<codeline lineno="217"><highlight class="preprocessor"><sp/><sp/><sp/>STB_GLPROG_FUNC(UNIFORM3IV<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>Uniform3iv<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>\</highlight></codeline>
<codeline lineno="218"><highlight class="preprocessor"><sp/><sp/><sp/>STB_GLPROG_FUNC(UNIFORM4IV<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>Uniform4iv<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>\</highlight></codeline>
<codeline lineno="219"><highlight class="preprocessor"><sp/><sp/><sp/>STB_GLPROG_FUNC(USEPROGRAMOBJECT<sp/><sp/><sp/><sp/>,<sp/>UseProgramObject<sp/><sp/><sp/><sp/>)<sp/>\</highlight></codeline>
<codeline lineno="220"><highlight class="preprocessor"><sp/><sp/><sp/>STB_GLPROG_FUNC(VERTEXATTRIBPOINTER<sp/>,<sp/>VertexAttribPointer<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">//<sp/>define<sp/>the<sp/>static<sp/>function<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STB_GLPROG_FUNC(x,y)<sp/><sp/>static<sp/>PFNGL##x##ARBPROC<sp/>gl##y##ARB;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal">STB_GLPROG_EXTENSIONS</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>STB_GLPROG_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">//<sp/>define<sp/>the<sp/>GetProcAddress</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>WINGDIAPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>STB__HAS_WGLPROC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(__stdcall<sp/>*stbgl__voidfunc)(void);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>__declspec(dllimport)<sp/>stbgl__voidfunc<sp/>wglGetProcAddress(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBGL__GET_FUNC(x)<sp/><sp/><sp/>wglGetProcAddress(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;need<sp/>to<sp/>define<sp/>how<sp/>this<sp/>platform<sp/>gets<sp/>extensions&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>function<sp/>that<sp/>fills<sp/>out<sp/>the<sp/>function<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_glprog_init(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="245"><highlight class="normal">{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>initialized<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>not<sp/>thread<sp/>safe!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(initialized)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>STB_GLPROG_FUNC(x,y)<sp/>gl##y##ARB<sp/>=<sp/>(PFNGL##x##ARBPROC)<sp/>STBGL__GET_FUNC(&quot;gl&quot;</highlight><highlight class="normal"><sp/>#y<sp/>&quot;ARB&quot;);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/>STB_GLPROG_EXTENSIONS</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#undef<sp/>STB_GLPROG_FUNC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>STB_GLPROG_EXTENSIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_glprog_init(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="256"><highlight class="normal">{</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">//<sp/>define<sp/>generic<sp/>names<sp/>for<sp/>many<sp/>of<sp/>the<sp/>gl<sp/>functions<sp/>or<sp/>extensions<sp/>for<sp/>later<sp/>use;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">//<sp/>note<sp/>that<sp/>in<sp/>some<sp/>cases<sp/>there<sp/>are<sp/>two<sp/>functions<sp/>in<sp/>core<sp/>and<sp/>one<sp/>function<sp/>in<sp/>ARB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_GLPROG_ARB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbglCreateShader<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glCreateShaderObjectARB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbglDeleteShader<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glDeleteObjectARB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbglAttachShader<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glAttachObjectARB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbglDetachShader<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glDetachObjectARB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbglShaderSource<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glShaderSourceARB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbglCompileShader<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glCompileShaderARB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbglGetShaderStatus(a,b)<sp/><sp/>glGetObjectParameterivARB(a,<sp/>GL_OBJECT_COMPILE_STATUS_ARB,<sp/>b)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbglGetShaderInfoLog<sp/><sp/><sp/><sp/><sp/><sp/>glGetInfoLogARB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbglCreateProgram<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glCreateProgramObjectARB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbglDeleteProgram<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glDeleteObjectARB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbglLinkProgram<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glLinkProgramARB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbglGetProgramStatus(a,b)<sp/>glGetObjectParameterivARB(a,<sp/>GL_OBJECT_LINK_STATUS_ARB,<sp/>b)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbglGetProgramInfoLog<sp/><sp/><sp/><sp/><sp/>glGetInfoLogARB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbglGetAttachedShaders<sp/><sp/><sp/><sp/>glGetAttachedObjectsARB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbglBindAttribLocation<sp/><sp/><sp/><sp/>glBindAttribLocationARB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbglGetUniformLocation<sp/><sp/><sp/><sp/>glGetUniformLocationARB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbgl_UseProgram<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glUseProgramObjectARB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbglCreateShader<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glCreateShader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbglDeleteShader<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glDeleteShader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbglAttachShader<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glAttachShader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbglDetachShader<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glDetachShader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbglShaderSource<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glShaderSource</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbglCompileShader<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glCompileShader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbglGetShaderStatus(a,b)<sp/><sp/>glGetShaderiv(a,<sp/>GL_COMPILE_STATUS,<sp/>b)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbglGetShaderInfoLog<sp/><sp/><sp/><sp/><sp/><sp/>glGetShaderInfoLog</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbglCreateProgram<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glCreateProgram</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbglDeleteProgram<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glDeleteProgram</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbglLinkProgram<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glLinkProgram</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbglGetProgramStatus(a,b)<sp/>glGetProgramiv(a,<sp/>GL_LINK_STATUS,<sp/>b)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbglGetProgramInfoLog<sp/><sp/><sp/><sp/><sp/>glGetProgramInfoLog</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbglGetAttachedShaders<sp/><sp/><sp/><sp/>glGetAttachedShaders</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbglBindAttribLocation<sp/><sp/><sp/><sp/>glBindAttribLocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbglGetUniformLocation<sp/><sp/><sp/><sp/>glGetUniformLocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>stbgl_UseProgram<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glUseProgram</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="comment">//<sp/>perform<sp/>a<sp/>safe<sp/>strcat<sp/>of<sp/>3<sp/>strings,<sp/>given<sp/>that<sp/>we<sp/>can&apos;t<sp/>rely<sp/>on<sp/>portable<sp/>snprintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>you<sp/>need<sp/>to<sp/>break<sp/>on<sp/>error,<sp/>this<sp/>is<sp/>the<sp/>best<sp/>place<sp/>to<sp/>place<sp/>a<sp/>breakpoint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stb_glprog_error(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*error,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_buflen,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str1,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str2,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str3)</highlight></codeline>
<codeline lineno="305"><highlight class="normal">{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>strlen(str1);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/>strncpy(error,<sp/>str1,<sp/>error_buflen);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>error_buflen<sp/>&amp;&amp;<sp/>str2)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>strncpy(error+n,<sp/>str2,<sp/>error_buflen<sp/>-<sp/>n);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>+=<sp/>strlen(str2);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>error_buflen<sp/>&amp;&amp;<sp/>str3)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strncpy(error+n,<sp/>str3,<sp/>error_buflen<sp/>-<sp/>n);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/>error[error_buflen-1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal">STB_GLPROG_DECLARE<sp/>GLuint<sp/>stbgl_compile_shader(GLenum<sp/>type,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>**sources,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_sources,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*error,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_buflen)</highlight></codeline>
<codeline lineno="319"><highlight class="normal">{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>(type<sp/>==<sp/>STBGL_VERTEX_SHADER<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;vertex&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;fragment&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/>GLint<sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/>GLuint<sp/>shader;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>the<sp/>extensions<sp/>if<sp/>we<sp/>haven&apos;t<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/>stb_glprog_init();</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/>shader<sp/>=<sp/>stbglCreateShader(type);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!shader)<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_glprog_error(error,<sp/>error_buflen,<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>allocate<sp/>shader<sp/>object<sp/>in<sp/>stbgl_compile_shader<sp/>for<sp/>&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/>NULL);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>num_sources<sp/>is<sp/>negative,<sp/>assume<sp/>source<sp/>is<sp/>NULL-terminated<sp/>and<sp/>count<sp/>the<sp/>non-NULL<sp/>ones</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_sources<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(num_sources<sp/>=<sp/>0;<sp/>sources[num_sources]<sp/>!=<sp/>NULL;<sp/>++num_sources)</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/>stbglShaderSource(shader,<sp/>num_sources,<sp/>sources,<sp/>NULL);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/>stbglCompileShader(shader);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/>stbglGetShaderStatus(shader,<sp/>&amp;<ref refid="structresult" kindref="compound">result</ref>);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structresult" kindref="compound">result</ref>)</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shader;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>errors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/>stb_glprog_error(error,<sp/>error_buflen,<sp/></highlight><highlight class="stringliteral">&quot;Compile<sp/>error<sp/>for<sp/>&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>shader:<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/>len<sp/>=<sp/>strlen(error);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&lt;<sp/>error_buflen)</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbglGetShaderInfoLog(shader,<sp/>error_buflen-len,<sp/>NULL,<sp/>error+len);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/>stbglDeleteShader(shader);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal">STB_GLPROG_DECLARE<sp/>GLuint<sp/>stbgl_link_program(GLuint<sp/>vertex_shader,<sp/>GLuint<sp/>fragment_shader,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>**binds,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_binds,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*error,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_buflen)</highlight></codeline>
<codeline lineno="360"><highlight class="normal">{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/>GLint<sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/>GLuint<sp/>prog<sp/>=<sp/>stbglCreateProgram();</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!prog)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stb_glprog_error(error,<sp/>error_buflen,<sp/></highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>allocate<sp/>program<sp/>object<sp/>in<sp/>stbgl_link_program&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>attach</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vertex_shader)</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbglAttachShader(prog,<sp/>vertex_shader);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fragment_shader)</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbglAttachShader(prog,<sp/>fragment_shader);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>attribute<sp/>binds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(binds)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>num_binds<sp/>is<sp/>negative,<sp/>then<sp/>it<sp/>is<sp/>NULL<sp/>terminated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_binds<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(num_binds=0;<sp/>binds[num_binds];<sp/>++num_binds)</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>num_binds;<sp/>++i)</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(binds[i]<sp/>&amp;&amp;<sp/>binds[i][0])<sp/></highlight><highlight class="comment">//<sp/>empty<sp/>binds<sp/>can<sp/>be<sp/>NULL<sp/>or<sp/>&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbglBindAttribLocation(prog,<sp/>i,<sp/>binds[i]);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>link</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/>stbglLinkProgram(prog);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>detach</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vertex_shader)</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbglDetachShader(prog,<sp/>vertex_shader);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fragment_shader)</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbglDetachShader(prog,<sp/>fragment_shader);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>errors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/>stbglGetProgramStatus(prog,<sp/>&amp;<ref refid="structresult" kindref="compound">result</ref>);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structresult" kindref="compound">result</ref>)</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>prog;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/>stb_glprog_error(error,<sp/>error_buflen,<sp/></highlight><highlight class="stringliteral">&quot;Link<sp/>error:<sp/>&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/>len<sp/>=<sp/>strlen(error);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&lt;<sp/>error_buflen)</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbglGetProgramInfoLog(prog,<sp/>error_buflen-len,<sp/>NULL,<sp/>error+len);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/>stbglDeleteProgram(prog);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal">STB_GLPROG_DECLARE<sp/>GLuint<sp/>stbgl_create_program(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>**vertex_source,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>**frag_source,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>**binds,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*error,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_buflen)</highlight></codeline>
<codeline lineno="419"><highlight class="normal">{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/>GLuint<sp/>vertex,<sp/>fragment,<sp/>prog=0;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/>vertex<sp/>=<sp/>stbgl_compile_shader(STBGL_VERTEX_SHADER,<sp/>vertex_source,<sp/>-1,<sp/>error,<sp/>error_buflen);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vertex)<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fragment<sp/>=<sp/>stbgl_compile_shader(STBGL_FRAGMENT_SHADER,<sp/>frag_source,<sp/>-1,<sp/>error,<sp/>error_buflen);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fragment)</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prog<sp/>=<sp/>stbgl_link_program(vertex,<sp/>fragment,<sp/>binds,<sp/>-1,<sp/>error,<sp/>error_buflen);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fragment)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stbglDeleteShader(fragment);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stbglDeleteShader(vertex);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>prog;</highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal">STB_GLPROG_DECLARE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbgl_delete_shader(GLuint<sp/>shader)</highlight></codeline>
<codeline lineno="434"><highlight class="normal">{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/>stbglDeleteShader(shader);</highlight></codeline>
<codeline lineno="436"><highlight class="normal">}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal">STB_GLPROG_DECLARE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stgbl_delete_program(GLuint<sp/>program)</highlight></codeline>
<codeline lineno="439"><highlight class="normal">{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/>stbglDeleteProgram(program);</highlight></codeline>
<codeline lineno="441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal">GLint<sp/>stbgl_find_uniform(GLuint<sp/>prog,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*uniform)</highlight></codeline>
<codeline lineno="444"><highlight class="normal">{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stbglGetUniformLocation(prog,<sp/>uniform);</highlight></codeline>
<codeline lineno="446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal">STB_GLPROG_DECLARE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbgl_find_uniforms(GLuint<sp/>prog,<sp/>GLint<sp/>*locations,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>**uniforms,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_uniforms)</highlight></codeline>
<codeline lineno="449"><highlight class="normal">{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_uniforms<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num_uniforms<sp/>=<sp/>999999;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i<sp/>&lt;<sp/>num_uniforms<sp/>&amp;&amp;<sp/>uniforms[i];<sp/>++i)</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>locations[i]<sp/>=<sp/>stbglGetUniformLocation(prog,<sp/>uniforms[i]);</highlight></codeline>
<codeline lineno="455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal">STB_GLPROG_DECLARE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglUseProgram(GLuint<sp/>program)</highlight></codeline>
<codeline lineno="458"><highlight class="normal">{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/>stbgl_UseProgram(program);</highlight></codeline>
<codeline lineno="460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>STB_GLPROG_ARB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBGL_ARBIFY(name)<sp/><sp/><sp/>name##ARB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STBGL_ARBIFY(name)<sp/><sp/><sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal">STB_GLPROG_DECLARE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglVertexAttribPointer(GLuint<sp/>index,<sp/><sp/>GLint<sp/>size,<sp/><sp/>GLenum<sp/>type,<sp/><sp/>GLboolean<sp/>normalized,<sp/><sp/>GLsizei<sp/>stride,<sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLvoid<sp/>*<sp/>pointer)</highlight></codeline>
<codeline lineno="469"><highlight class="normal">{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/>STBGL_ARBIFY(glVertexAttribPointer)(index,<sp/>size,<sp/>type,<sp/>normalized,<sp/>stride,<sp/>pointer);</highlight></codeline>
<codeline lineno="471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal">STB_GLPROG_DECLARE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglEnableVertexAttribArray<sp/>(GLuint<sp/>index)<sp/>{<sp/>STBGL_ARBIFY(glEnableVertexAttribArray<sp/>)(index);<sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal">STB_GLPROG_DECLARE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglDisableVertexAttribArray(GLuint<sp/>index)<sp/>{<sp/>STBGL_ARBIFY(glDisableVertexAttribArray)(index);<sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal">STB_GLPROG_DECLARE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglUniform1fv(GLint<sp/>loc,<sp/>GLsizei<sp/>count,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLfloat<sp/>*v)<sp/>{<sp/>STBGL_ARBIFY(glUniform1fv)(loc,count,v);<sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal">STB_GLPROG_DECLARE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglUniform2fv(GLint<sp/>loc,<sp/>GLsizei<sp/>count,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLfloat<sp/>*v)<sp/>{<sp/>STBGL_ARBIFY(glUniform2fv)(loc,count,v);<sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal">STB_GLPROG_DECLARE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglUniform3fv(GLint<sp/>loc,<sp/>GLsizei<sp/>count,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLfloat<sp/>*v)<sp/>{<sp/>STBGL_ARBIFY(glUniform3fv)(loc,count,v);<sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal">STB_GLPROG_DECLARE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglUniform4fv(GLint<sp/>loc,<sp/>GLsizei<sp/>count,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLfloat<sp/>*v)<sp/>{<sp/>STBGL_ARBIFY(glUniform4fv)(loc,count,v);<sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal">STB_GLPROG_DECLARE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglUniform1iv(GLint<sp/>loc,<sp/>GLsizei<sp/>count,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLint<sp/><sp/><sp/>*v)<sp/>{<sp/>STBGL_ARBIFY(glUniform1iv)(loc,count,v);<sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal">STB_GLPROG_DECLARE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglUniform2iv(GLint<sp/>loc,<sp/>GLsizei<sp/>count,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLint<sp/><sp/><sp/>*v)<sp/>{<sp/>STBGL_ARBIFY(glUniform2iv)(loc,count,v);<sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal">STB_GLPROG_DECLARE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglUniform3iv(GLint<sp/>loc,<sp/>GLsizei<sp/>count,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLint<sp/><sp/><sp/>*v)<sp/>{<sp/>STBGL_ARBIFY(glUniform3iv)(loc,count,v);<sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal">STB_GLPROG_DECLARE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglUniform4iv(GLint<sp/>loc,<sp/>GLsizei<sp/>count,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLint<sp/><sp/><sp/>*v)<sp/>{<sp/>STBGL_ARBIFY(glUniform4iv)(loc,count,v);<sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal">STB_GLPROG_DECLARE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglUniform1f(GLint<sp/>loc,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v0)</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>STBGL_ARBIFY(glUniform1f)(loc,v0);<sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal">STB_GLPROG_DECLARE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglUniform2f(GLint<sp/>loc,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v0,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v1)</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>STBGL_ARBIFY(glUniform2f)(loc,v0,v1);<sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal">STB_GLPROG_DECLARE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglUniform3f(GLint<sp/>loc,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v0,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v2)</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>STBGL_ARBIFY(glUniform3f)(loc,v0,v1,v2);<sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal">STB_GLPROG_DECLARE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglUniform4f(GLint<sp/>loc,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v0,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v2,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v3)</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>STBGL_ARBIFY(glUniform4f)(loc,v0,v1,v2,v3);<sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal">STB_GLPROG_DECLARE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglUniform1i(GLint<sp/>loc,<sp/>GLint<sp/>v0)</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>STBGL_ARBIFY(glUniform1i)(loc,v0);<sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal">STB_GLPROG_DECLARE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglUniform2i(GLint<sp/>loc,<sp/>GLint<sp/>v0,<sp/>GLint<sp/>v1)</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>STBGL_ARBIFY(glUniform2i)(loc,v0,v1);<sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal">STB_GLPROG_DECLARE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglUniform3i(GLint<sp/>loc,<sp/>GLint<sp/>v0,<sp/>GLint<sp/>v1,<sp/>GLint<sp/>v2)</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>STBGL_ARBIFY(glUniform3i)(loc,v0,v1,v2);<sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal">STB_GLPROG_DECLARE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stbglUniform4i(GLint<sp/>loc,<sp/>GLint<sp/>v0,<sp/>GLint<sp/>v1,<sp/>GLint<sp/>v2,<sp/>GLint<sp/>v3)</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>STBGL_ARBIFY(glUniform4i)(loc,v0,v1,v2,v3);<sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/stb/tests/caveview/stb_glprog.h"/>
  </compounddef>
</doxygen>
