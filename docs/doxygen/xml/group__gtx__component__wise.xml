<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="group__gtx__component__wise" kind="group">
    <compoundname>gtx_component_wise</compoundname>
    <title>GLM_GTX_component_wise</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__gtx__component__wise_1ga3f5d893b2805999d155de26f7a9593d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename floatType</type>
          </param>
          <param>
            <type>length_t</type>
            <declname>L</declname>
            <defname>L</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL <ref refid="structvec" kindref="compound">vec</ref>&lt; L, floatType, Q &gt;</type>
        <definition>GLM_FUNC_DECL vec&lt; L, floatType, Q &gt; glm::compNormalize</definition>
        <argsstring>(vec&lt; L, T, Q &gt; const &amp;v)</argsstring>
        <name>compNormalize</name>
        <param>
          <type><ref refid="structvec" kindref="compound">vec</ref>&lt; L, T, Q &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert an integer vector to a normalized float vector. If the parameter value type is already a floating qualifier type, the value is passed through. <simplesect kind="see"><para><ref refid="group__gtx__component__wise" kindref="compound">GLM_GTX_component_wise</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/component_wise.hpp" line="38" column="19" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/component_wise.inl" bodystart="78" bodyend="83" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/component_wise.hpp" declline="38" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__component__wise_1gab0e4a1a73c60f93d8bfbe97f331476a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>length_t</type>
            <declname>L</declname>
            <defname>L</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename floatType</type>
          </param>
          <param>
            <type>qualifier</type>
            <declname>Q</declname>
            <defname>Q</defname>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL <ref refid="structvec" kindref="compound">vec</ref>&lt; L, T, Q &gt;</type>
        <definition>GLM_FUNC_DECL vec&lt; L, T, Q &gt; glm::compScale</definition>
        <argsstring>(vec&lt; L, floatType, Q &gt; const &amp;v)</argsstring>
        <name>compScale</name>
        <param>
          <type><ref refid="structvec" kindref="compound">vec</ref>&lt; L, floatType, Q &gt; const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a normalized float vector to an integer vector. If the parameter value type is already a floating qualifier type, the value is passed through. <simplesect kind="see"><para><ref refid="group__gtx__component__wise" kindref="compound">GLM_GTX_component_wise</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/component_wise.hpp" line="44" column="19" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/component_wise.inl" bodystart="86" bodyend="91" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/component_wise.hpp" declline="44" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__component__wise_1gaf71833350e15e74d31cbf8a3e7f27051" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename genType</type>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL genType::value_type</type>
        <definition>GLM_FUNC_DECL genType::value_type glm::compAdd</definition>
        <argsstring>(genType const &amp;v)</argsstring>
        <name>compAdd</name>
        <param>
          <type>genType const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add all vector components together. <simplesect kind="see"><para><ref refid="group__gtx__component__wise" kindref="compound">GLM_GTX_component_wise</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/component_wise.hpp" line="49" column="44" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/component_wise.hpp" declline="49" declcolumn="44"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__component__wise_1gae8ab88024197202c9479d33bdc5a8a5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename genType</type>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL genType::value_type</type>
        <definition>GLM_FUNC_DECL genType::value_type glm::compMul</definition>
        <argsstring>(genType const &amp;v)</argsstring>
        <name>compMul</name>
        <param>
          <type>genType const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiply all vector components together. <simplesect kind="see"><para><ref refid="group__gtx__component__wise" kindref="compound">GLM_GTX_component_wise</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/component_wise.hpp" line="54" column="44" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/component_wise.hpp" declline="54" declcolumn="44"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__component__wise_1gab5d0832b5c7bb01b8d7395973bfb1425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename genType</type>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL genType::value_type</type>
        <definition>GLM_FUNC_DECL genType::value_type glm::compMin</definition>
        <argsstring>(genType const &amp;v)</argsstring>
        <name>compMin</name>
        <param>
          <type>genType const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the minimum value between single vector components. <simplesect kind="see"><para><ref refid="group__gtx__component__wise" kindref="compound">GLM_GTX_component_wise</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/component_wise.hpp" line="59" column="44" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/component_wise.hpp" declline="59" declcolumn="44"/>
      </memberdef>
      <memberdef kind="function" id="group__gtx__component__wise_1gabfa4bb19298c8c73d4217ba759c496b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename genType</type>
          </param>
        </templateparamlist>
        <type>GLM_FUNC_DECL genType::value_type</type>
        <definition>GLM_FUNC_DECL genType::value_type glm::compMax</definition>
        <argsstring>(genType const &amp;v)</argsstring>
        <name>compMax</name>
        <param>
          <type>genType const &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the maximum value between single vector components. <simplesect kind="see"><para><ref refid="group__gtx__component__wise" kindref="compound">GLM_GTX_component_wise</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/component_wise.hpp" line="64" column="44" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glm/glm/gtx/component_wise.hpp" declline="64" declcolumn="44"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Include &lt;<ref refid="component__wise_8hpp" kindref="compound">glm/gtx/component_wise.hpp</ref>&gt; to use the features of this extension.</para>
<para>Operations between components of a type </para>
    </detaileddescription>
  </compounddef>
</doxygen>
