<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="core_8h" kind="file" language="C++">
    <compoundname>core.h</compoundname>
    <includes local="no">cstddef</includes>
    <includes local="no">cstdio</includes>
    <includes local="no">cstring</includes>
    <includes local="no">iterator</includes>
    <includes local="no">limits</includes>
    <includes local="no">string</includes>
    <includes local="no">type_traits</includes>
    <includedby refid="args_8h" local="yes">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/args.h</includedby>
    <includedby refid="format_8h" local="yes">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/format.h</includedby>
    <includedby refid="fmt_8h" local="no">/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/fmt.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h</label>
        <link refid="core_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>cstddef</label>
      </node>
      <node id="3">
        <label>cstdio</label>
      </node>
      <node id="4">
        <label>cstring</label>
      </node>
      <node id="5">
        <label>iterator</label>
      </node>
      <node id="6">
        <label>limits</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="8">
        <label>type_traits</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="45">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/src/x11_init.c</label>
        <link refid="x11__init_8c_source"/>
      </node>
      <node id="46">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/glfw/tests/events.c</label>
        <link refid="events_8c_source"/>
      </node>
      <node id="4">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/bench/async_bench.cpp</label>
        <link refid="async__bench_8cpp_source"/>
      </node>
      <node id="5">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/bench/bench.cpp</label>
        <link refid="bench_8cpp_source"/>
      </node>
      <node id="84">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/bench/formatter-bench.cpp</label>
        <link refid="formatter-bench_8cpp_source"/>
      </node>
      <node id="9">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/bench/latency.cpp</label>
        <link refid="latency_8cpp_source"/>
      </node>
      <node id="10">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/example/example.cpp</label>
        <link refid="example_8cpp_source"/>
      </node>
      <node id="76">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/async.h</label>
        <link refid="async_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/async_logger-inl.h</label>
        <link refid="async__logger-inl_8h_source"/>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="75">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/async_logger.h</label>
        <link refid="async__logger_8h_source"/>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/cfg/argv.h</label>
        <link refid="argv_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/cfg/env.h</label>
        <link refid="env_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/cfg/helpers-inl.h</label>
        <link refid="helpers-inl_8h_source"/>
        <childnode refid="54" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/cfg/helpers.h</label>
        <link refid="helpers_8h_source"/>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/common-inl.h</label>
        <link refid="common-inl_8h_source"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/common.h</label>
        <link refid="spdlog_2include_2spdlog_2common_8h_source"/>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="150" relation="include">
        </childnode>
        <childnode refid="151" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="156" relation="include">
        </childnode>
        <childnode refid="152" relation="include">
        </childnode>
        <childnode refid="153" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="154" relation="include">
        </childnode>
        <childnode refid="155" relation="include">
        </childnode>
        <childnode refid="158" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="136" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="140" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="147" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
        <childnode refid="144" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
        <childnode refid="149" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/details/backtracer-inl.h</label>
        <link refid="backtracer-inl_8h_source"/>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="71">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/details/backtracer.h</label>
        <link refid="backtracer_8h_source"/>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/details/file_helper-inl.h</label>
        <link refid="file__helper-inl_8h_source"/>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/details/file_helper.h</label>
        <link refid="file__helper_8h_source"/>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/details/fmt_helper.h</label>
        <link refid="fmt__helper_8h_source"/>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/details/log_msg-inl.h</label>
        <link refid="log__msg-inl_8h_source"/>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/details/log_msg.h</label>
        <link refid="log__msg_8h_source"/>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="136" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="130" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="140" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
      </node>
      <node id="121">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/details/log_msg_buffer-inl.h</label>
        <link refid="log__msg__buffer-inl_8h_source"/>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="70">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/details/log_msg_buffer.h</label>
        <link refid="log__msg__buffer_8h_source"/>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
      </node>
      <node id="150">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/details/os-inl.h</label>
        <link refid="os-inl_8h_source"/>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="151">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/details/os.h</label>
        <link refid="details_2os_8h_source"/>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="150" relation="include">
        </childnode>
        <childnode refid="152" relation="include">
        </childnode>
        <childnode refid="153" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="154" relation="include">
        </childnode>
        <childnode refid="155" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/details/registry-inl.h</label>
        <link refid="registry-inl_8h_source"/>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="156">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/details/registry.h</label>
        <link refid="registry_8h_source"/>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="157" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
      </node>
      <node id="157">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/details/synchronous_factory.h</label>
        <link refid="synchronous__factory_8h_source"/>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="138" relation="include">
        </childnode>
        <childnode refid="140" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="135" relation="include">
        </childnode>
        <childnode refid="148" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
        <childnode refid="142" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
      </node>
      <node id="152">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/details/tcp_client-windows.h</label>
        <link refid="tcp__client-windows_8h_source"/>
      </node>
      <node id="153">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/details/tcp_client.h</label>
        <link refid="tcp__client_8h_source"/>
        <childnode refid="143" relation="include">
        </childnode>
      </node>
      <node id="123">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/details/thread_pool-inl.h</label>
        <link refid="thread__pool-inl_8h_source"/>
        <childnode refid="77" relation="include">
        </childnode>
      </node>
      <node id="122">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/details/thread_pool.h</label>
        <link refid="thread__pool_8h_source"/>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
      </node>
      <node id="154">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/details/udp_client-windows.h</label>
        <link refid="udp__client-windows_8h_source"/>
      </node>
      <node id="155">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/details/udp_client.h</label>
        <link refid="udp__client_8h_source"/>
        <childnode refid="144" relation="include">
        </childnode>
      </node>
      <node id="158">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bin_to_hex.h</label>
        <link refid="bin__to__hex_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/args.h</label>
        <link refid="args_8h_source"/>
      </node>
      <node id="6">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/chrono.h</label>
        <link refid="bundled_2chrono_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/color.h</label>
        <link refid="3rdparty_2spdlog_2include_2spdlog_2fmt_2bundled_2color_8h_source"/>
      </node>
      <node id="33">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/compile.h</label>
        <link refid="bundled_2compile_8h_source"/>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h</label>
        <link refid="core_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/format-inl.h</label>
        <link refid="format-inl_8h_source"/>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/format.h</label>
        <link refid="format_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/locale.h</label>
        <link refid="locale_8h_source"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/os.h</label>
        <link refid="fmt_2bundled_2os_8h_source"/>
      </node>
      <node id="38">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/ostream.h</label>
        <link refid="ostream_8h_source"/>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/printf.h</label>
        <link refid="printf_8h_source"/>
      </node>
      <node id="41">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/ranges.h</label>
        <link refid="bundled_2ranges_8h_source"/>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/xchar.h</label>
        <link refid="bundled_2xchar_8h_source"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/chrono.h</label>
        <link refid="chrono_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/compile.h</label>
        <link refid="compile_8h_source"/>
      </node>
      <node id="48">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/fmt.h</label>
        <link refid="fmt_8h_source"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="159" relation="include">
        </childnode>
        <childnode refid="146" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/ostr.h</label>
        <link refid="ostr_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/ranges.h</label>
        <link refid="ranges_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/xchar.h</label>
        <link refid="xchar_8h_source"/>
      </node>
      <node id="125">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/formatter.h</label>
        <link refid="formatter_8h_source"/>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/logger-inl.h</label>
        <link refid="logger-inl_8h_source"/>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/logger.h</label>
        <link refid="3rdparty_2spdlog_2include_2spdlog_2logger_8h_source"/>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/pattern_formatter-inl.h</label>
        <link refid="pattern__formatter-inl_8h_source"/>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="126">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/pattern_formatter.h</label>
        <link refid="pattern__formatter_8h_source"/>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="131" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="127">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/ansicolor_sink-inl.h</label>
        <link refid="ansicolor__sink-inl_8h_source"/>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="134">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/ansicolor_sink.h</label>
        <link refid="ansicolor__sink_8h_source"/>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="135" relation="include">
        </childnode>
      </node>
      <node id="128">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/base_sink-inl.h</label>
        <link refid="base__sink-inl_8h_source"/>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="136">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/base_sink.h</label>
        <link refid="base__sink_8h_source"/>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="138" relation="include">
        </childnode>
        <childnode refid="139" relation="include">
        </childnode>
        <childnode refid="140" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
        <childnode refid="142" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
        <childnode refid="144" relation="include">
        </childnode>
        <childnode refid="145" relation="include">
        </childnode>
        <childnode refid="146" relation="include">
        </childnode>
      </node>
      <node id="61">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/basic_file_sink-inl.h</label>
        <link refid="basic__file__sink-inl_8h_source"/>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/basic_file_sink.h</label>
        <link refid="basic__file__sink_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/daily_file_sink.h</label>
        <link refid="daily__file__sink_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="129">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/dist_sink.h</label>
        <link refid="dist__sink_8h_source"/>
        <childnode refid="130" relation="include">
        </childnode>
      </node>
      <node id="130">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/dup_filter_sink.h</label>
        <link refid="dup__filter__sink_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/hourly_file_sink.h</label>
        <link refid="hourly__file__sink_8h_source"/>
      </node>
      <node id="137">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/mongo_sink.h</label>
        <link refid="mongo__sink_8h_source"/>
      </node>
      <node id="138">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/null_sink.h</label>
        <link refid="null__sink_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="139">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/ostream_sink.h</label>
        <link refid="ostream__sink_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="140">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/qt_sinks.h</label>
        <link refid="qt__sinks_8h_source"/>
      </node>
      <node id="124">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/ringbuffer_sink.h</label>
        <link refid="ringbuffer__sink_8h_source"/>
      </node>
      <node id="63">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/rotating_file_sink-inl.h</label>
        <link refid="rotating__file__sink-inl_8h_source"/>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="64">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/rotating_file_sink.h</label>
        <link refid="rotating__file__sink_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="147">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/sink-inl.h</label>
        <link refid="sink-inl_8h_source"/>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="133">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/sink.h</label>
        <link refid="sink_8h_source"/>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="134" relation="include">
        </childnode>
        <childnode refid="136" relation="include">
        </childnode>
        <childnode refid="147" relation="include">
        </childnode>
        <childnode refid="148" relation="include">
        </childnode>
        <childnode refid="149" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_color_sinks-inl.h</label>
        <link refid="stdout__color__sinks-inl_8h_source"/>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="135">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_color_sinks.h</label>
        <link refid="stdout__color__sinks_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="131">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_sinks-inl.h</label>
        <link refid="stdout__sinks-inl_8h_source"/>
        <childnode refid="79" relation="include">
        </childnode>
      </node>
      <node id="148">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/stdout_sinks.h</label>
        <link refid="stdout__sinks_8h_source"/>
        <childnode refid="131" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="141">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/syslog_sink.h</label>
        <link refid="syslog__sink_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="142">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/systemd_sink.h</label>
        <link refid="systemd__sink_8h_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="143">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/tcp_sink.h</label>
        <link refid="tcp__sink_8h_source"/>
      </node>
      <node id="144">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/udp_sink.h</label>
        <link refid="udp__sink_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="145">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/win_eventlog_sink.h</label>
        <link refid="win__eventlog__sink_8h_source"/>
      </node>
      <node id="132">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/wincolor_sink-inl.h</label>
        <link refid="wincolor__sink-inl_8h_source"/>
      </node>
      <node id="149">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/sinks/wincolor_sink.h</label>
        <link refid="wincolor__sink_8h_source"/>
        <childnode refid="132" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog-inl.h</label>
        <link refid="spdlog-inl_8h_source"/>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/spdlog.h</label>
        <link refid="spdlog_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
      </node>
      <node id="159">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/stopwatch.h</label>
        <link refid="stopwatch_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/src/async.cpp</label>
        <link refid="async_8cpp_source"/>
      </node>
      <node id="54">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/src/cfg.cpp</label>
        <link refid="cfg_8cpp_source"/>
      </node>
      <node id="78">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/src/color_sinks.cpp</label>
        <link refid="color__sinks_8cpp_source"/>
      </node>
      <node id="58">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/src/file_sinks.cpp</label>
        <link refid="file__sinks_8cpp_source"/>
      </node>
      <node id="36">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/src/fmt.cpp</label>
        <link refid="fmt_8cpp_source"/>
      </node>
      <node id="56">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/src/spdlog.cpp</label>
        <link refid="spdlog_8cpp_source"/>
      </node>
      <node id="79">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/src/stdout_sinks.cpp</label>
        <link refid="stdout__sinks_8cpp_source"/>
      </node>
      <node id="11">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/includes.h</label>
        <link refid="includes_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_async.cpp</label>
        <link refid="test__async_8cpp_source"/>
      </node>
      <node id="13">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_backtrace.cpp</label>
        <link refid="test__backtrace_8cpp_source"/>
      </node>
      <node id="14">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_cfg.cpp</label>
        <link refid="test__cfg_8cpp_source"/>
      </node>
      <node id="15">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_create_dir.cpp</label>
        <link refid="test__create__dir_8cpp_source"/>
      </node>
      <node id="16">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_daily_logger.cpp</label>
        <link refid="test__daily__logger_8cpp_source"/>
      </node>
      <node id="17">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_dup_filter.cpp</label>
        <link refid="test__dup__filter_8cpp_source"/>
      </node>
      <node id="18">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_errors.cpp</label>
        <link refid="test__errors_8cpp_source"/>
      </node>
      <node id="19">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_file_helper.cpp</label>
        <link refid="test__file__helper_8cpp_source"/>
      </node>
      <node id="20">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_file_logging.cpp</label>
        <link refid="test__file__logging_8cpp_source"/>
      </node>
      <node id="21">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_fmt_helper.cpp</label>
        <link refid="test__fmt__helper_8cpp_source"/>
      </node>
      <node id="22">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_macros.cpp</label>
        <link refid="test__macros_8cpp_source"/>
      </node>
      <node id="23">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_misc.cpp</label>
        <link refid="test__misc_8cpp_source"/>
      </node>
      <node id="24">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_mpmc_q.cpp</label>
        <link refid="test__mpmc__q_8cpp_source"/>
      </node>
      <node id="25">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_pattern_formatter.cpp</label>
        <link refid="test__pattern__formatter_8cpp_source"/>
      </node>
      <node id="26">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_registry.cpp</label>
        <link refid="test__registry_8cpp_source"/>
      </node>
      <node id="146">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_sink.h</label>
        <link refid="test__sink_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_stdout_api.cpp</label>
        <link refid="test__stdout__api_8cpp_source"/>
      </node>
      <node id="28">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_stopwatch.cpp</label>
        <link refid="test__stopwatch_8cpp_source"/>
      </node>
      <node id="29">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_systemd.cpp</label>
        <link refid="test__systemd_8cpp_source"/>
      </node>
      <node id="30">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/test_time_point.cpp</label>
        <link refid="test__time__point_8cpp_source"/>
      </node>
      <node id="31">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/tests/utils.cpp</label>
        <link refid="utils_8cpp_source"/>
      </node>
      <node id="109">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/core/camera.cpp</label>
        <link refid="camera_8cpp_source"/>
      </node>
      <node id="110">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/core/framebuffer.cpp</label>
        <link refid="framebuffer_8cpp_source"/>
      </node>
      <node id="111">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/core/glfwRenderer.cpp</label>
        <link refid="glfw_renderer_8cpp_source"/>
      </node>
      <node id="117">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/core/glfwRenderer.h</label>
        <link refid="glfw_renderer_8h_source"/>
        <childnode refid="111" relation="include">
        </childnode>
      </node>
      <node id="92">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/core/inspector.cpp</label>
        <link refid="inspector_8cpp_source"/>
      </node>
      <node id="114">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/core/inspector.h</label>
        <link refid="inspector_8h_source"/>
        <childnode refid="92" relation="include">
        </childnode>
      </node>
      <node id="94">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/core/material.cpp</label>
        <link refid="material_8cpp_source"/>
      </node>
      <node id="93">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/core/material.h</label>
        <link refid="material_8h_source"/>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
      </node>
      <node id="99">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/core/mesh.cpp</label>
        <link refid="mesh_8cpp_source"/>
      </node>
      <node id="118">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/core/mesh.h</label>
        <link refid="mesh_8h_source"/>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/core/modelImporter.cpp</label>
        <link refid="model_importer_8cpp_source"/>
      </node>
      <node id="95">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/core/modelImporter.h</label>
        <link refid="model_importer_8h_source"/>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="100">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/core/particleEmitter.cpp</label>
        <link refid="particle_emitter_8cpp_source"/>
      </node>
      <node id="107">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/core/particleEmitter.h</label>
        <link refid="particle_emitter_8h_source"/>
        <childnode refid="100" relation="include">
        </childnode>
      </node>
      <node id="96">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/core/renderPass.cpp</label>
        <link refid="render_pass_8cpp_source"/>
      </node>
      <node id="106">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/core/renderPass.h</label>
        <link refid="render_pass_8h_source"/>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/core/renderer.cpp</label>
        <link refid="renderer_8cpp_source"/>
      </node>
      <node id="108">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/core/renderer.h</label>
        <link refid="renderer_8h_source"/>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
      </node>
      <node id="90">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/core/shader.cpp</label>
        <link refid="shader_8cpp_source"/>
      </node>
      <node id="91">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/core/shader.h</label>
        <link refid="shader_8h_source"/>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="97">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/core/skybox.cpp</label>
        <link refid="skybox_8cpp_source"/>
      </node>
      <node id="101">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/core/sprite.cpp</label>
        <link refid="sprite_8cpp_source"/>
      </node>
      <node id="102">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/core/sprite.h</label>
        <link refid="sprite_8h_source"/>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
      </node>
      <node id="104">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/core/spriteAtlas.cpp</label>
        <link refid="sprite_atlas_8cpp_source"/>
      </node>
      <node id="103">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/core/spriteAtlas.h</label>
        <link refid="sprite_atlas_8h_source"/>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
      </node>
      <node id="98">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/core/spriteBatch.cpp</label>
        <link refid="sprite_batch_8cpp_source"/>
      </node>
      <node id="105">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/core/spriteBatch.h</label>
        <link refid="sprite_batch_8h_source"/>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
      </node>
      <node id="112">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/core/texture.cpp</label>
        <link refid="texture_8cpp_source"/>
      </node>
      <node id="119">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/core/uniformSet.cpp</label>
        <link refid="uniform_set_8cpp_source"/>
      </node>
      <node id="115">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/core/worldLights.cpp</label>
        <link refid="world_lights_8cpp_source"/>
      </node>
      <node id="113">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/core/worldLights.h</label>
        <link refid="world_lights_8h_source"/>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
      </node>
      <node id="87">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/utils/commonMacro.h</label>
        <link refid="common_macro_8h_source"/>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
      </node>
      <node id="116">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/utils/glCommonDefine.h</label>
        <link refid="gl_common_define_8h_source"/>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/utils/logger.cpp</label>
        <link refid="logger_8cpp_source"/>
      </node>
      <node id="86">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/utils/logger.h</label>
        <link refid="utils_2logger_8h_source"/>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
      </node>
      <node id="120">
        <label>/Users/cwb/developer/learning/graphicRenderEngine/ceres/utils/utils.h</label>
        <link refid="utils_2utils_8h_source"/>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structtype__identity" prot="public">type_identity</innerclass>
    <innerclass refid="structmonostate" prot="public">monostate</innerclass>
    <innerclass refid="structstd__string__view" prot="public">std_string_view</innerclass>
    <innerclass refid="classbasic__string__view" prot="public">basic_string_view</innerclass>
    <innerclass refid="structis__char" prot="public">is_char</innerclass>
    <innerclass refid="structis__char_3_01char_01_4" prot="public">is_char&lt; char &gt;</innerclass>
    <innerclass refid="structcompile__string" prot="public">compile_string</innerclass>
    <innerclass refid="structis__compile__string" prot="public">is_compile_string</innerclass>
    <innerclass refid="structis__string" prot="public">is_string</innerclass>
    <innerclass refid="structchar__t__impl" prot="public">char_t_impl</innerclass>
    <innerclass refid="structchar__t__impl_3_01_s_00_01enable__if__t_3_01is__string_3_01_s_01_4_1_1value_01_4_01_4" prot="public">char_t_impl&lt; S, enable_if_t&lt; is_string&lt; S &gt;::value &gt; &gt;</innerclass>
    <innerclass refid="structerror__handler" prot="public">error_handler</innerclass>
    <innerclass refid="classbasic__format__parse__context" prot="public">basic_format_parse_context</innerclass>
    <innerclass refid="structformatter" prot="public">formatter</innerclass>
    <innerclass refid="structis__contiguous" prot="public">is_contiguous</innerclass>
    <innerclass refid="structis__contiguous_3_01std_1_1basic__string_3_01_char_01_4_01_4" prot="public">is_contiguous&lt; std::basic_string&lt; Char &gt; &gt;</innerclass>
    <innerclass refid="classbuffer" prot="public">buffer</innerclass>
    <innerclass refid="structbuffer__traits" prot="public">buffer_traits</innerclass>
    <innerclass refid="classfixed__buffer__traits" prot="public">fixed_buffer_traits</innerclass>
    <innerclass refid="classiterator__buffer" prot="public">iterator_buffer</innerclass>
    <innerclass refid="classiterator__buffer_3_01_t_01_5_00_01_t_00_01fixed__buffer__traits_01_4" prot="public">iterator_buffer&lt; T *, T, fixed_buffer_traits &gt;</innerclass>
    <innerclass refid="classiterator__buffer_3_01_t_01_5_00_01_t_01_4" prot="public">iterator_buffer&lt; T *, T &gt;</innerclass>
    <innerclass refid="classiterator__buffer_3_01std_1_1back__insert__iterator_3_01_container_01_4_00_01enable__if__t_3f9dd5967f8d169dc7f82f3e912e020ba" prot="public">iterator_buffer&lt; std::back_insert_iterator&lt; Container &gt;, enable_if_t&lt; is_contiguous&lt; Container &gt;::value, typename Container::value_type &gt; &gt;</innerclass>
    <innerclass refid="classcounting__buffer" prot="public">counting_buffer</innerclass>
    <innerclass refid="structfallback__formatter" prot="public">fallback_formatter</innerclass>
    <innerclass refid="structview" prot="public">view</innerclass>
    <innerclass refid="structnamed__arg" prot="public">named_arg</innerclass>
    <innerclass refid="structnamed__arg__info" prot="public">named_arg_info</innerclass>
    <innerclass refid="structarg__data" prot="public">arg_data</innerclass>
    <innerclass refid="structarg__data_3_01_t_00_01_char_00_01_n_u_m___a_r_g_s_00_010_01_4" prot="public">arg_data&lt; T, Char, NUM_ARGS, 0 &gt;</innerclass>
    <innerclass refid="structis__named__arg" prot="public">is_named_arg</innerclass>
    <innerclass refid="structis__statically__named__arg" prot="public">is_statically_named_arg</innerclass>
    <innerclass refid="structis__named__arg_3_01named__arg_3_01_char_00_01_t_01_4_01_4" prot="public">is_named_arg&lt; named_arg&lt; Char, T &gt; &gt;</innerclass>
    <innerclass refid="structtype__constant" prot="public">type_constant</innerclass>
    <innerclass refid="structunformattable" prot="public">unformattable</innerclass>
    <innerclass refid="structunformattable__char" prot="public">unformattable_char</innerclass>
    <innerclass refid="structunformattable__const" prot="public">unformattable_const</innerclass>
    <innerclass refid="structunformattable__pointer" prot="public">unformattable_pointer</innerclass>
    <innerclass refid="structstring__value" prot="public">string_value</innerclass>
    <innerclass refid="structnamed__arg__value" prot="public">named_arg_value</innerclass>
    <innerclass refid="structcustom__value" prot="public">custom_value</innerclass>
    <innerclass refid="classvalue" prot="public">value</innerclass>
    <innerclass refid="structarg__mapper" prot="public">arg_mapper</innerclass>
    <innerclass refid="structarg__mapper_1_1formattable" prot="public">arg_mapper::formattable</innerclass>
    <innerclass refid="classappender" prot="public">appender</innerclass>
    <innerclass refid="classbasic__format__arg" prot="public">basic_format_arg</innerclass>
    <innerclass refid="classbasic__format__arg_1_1handle" prot="public">basic_format_arg::handle</innerclass>
    <innerclass refid="structis__output__iterator" prot="public">is_output_iterator</innerclass>
    <innerclass refid="structis__output__iterator_3_01_it_00_01_t_00_01void__t_3_01typename_01std_1_1iterator__traits_384cf523dd4e4d9030033492a363e38c5" prot="public">is_output_iterator&lt; It, T, void_t&lt; typename std::iterator_traits&lt; It &gt;::iterator_category, decltype(*std::declval&lt; It &gt;()=std::declval&lt; T &gt;())&gt; &gt;</innerclass>
    <innerclass refid="structis__back__insert__iterator" prot="public">is_back_insert_iterator</innerclass>
    <innerclass refid="structis__back__insert__iterator_3_01std_1_1back__insert__iterator_3_01_container_01_4_01_4" prot="public">is_back_insert_iterator&lt; std::back_insert_iterator&lt; Container &gt; &gt;</innerclass>
    <innerclass refid="structis__contiguous__back__insert__iterator" prot="public">is_contiguous_back_insert_iterator</innerclass>
    <innerclass refid="structis__contiguous__back__insert__iterator_3_01std_1_1back__insert__iterator_3_01_container_01_4_01_4" prot="public">is_contiguous_back_insert_iterator&lt; std::back_insert_iterator&lt; Container &gt; &gt;</innerclass>
    <innerclass refid="structis__contiguous__back__insert__iterator_3_01appender_01_4" prot="public">is_contiguous_back_insert_iterator&lt; appender &gt;</innerclass>
    <innerclass refid="classlocale__ref" prot="public">locale_ref</innerclass>
    <innerclass refid="classbasic__format__context" prot="public">basic_format_context</innerclass>
    <innerclass refid="classformat__arg__store" prot="public">format_arg_store</innerclass>
    <innerclass refid="classbasic__format__args" prot="public">basic_format_args</innerclass>
    <innerclass refid="structfill__t" prot="public">fill_t</innerclass>
    <innerclass refid="structbasic__format__specs" prot="public">basic_format_specs</innerclass>
    <innerclass refid="structarg__ref" prot="public">arg_ref</innerclass>
    <innerclass refid="unionarg__ref_1_1value" prot="public">arg_ref::value</innerclass>
    <innerclass refid="structdynamic__format__specs" prot="public">dynamic_format_specs</innerclass>
    <innerclass refid="structauto__id" prot="public">auto_id</innerclass>
    <innerclass refid="classspecs__setter" prot="public">specs_setter</innerclass>
    <innerclass refid="classdynamic__specs__handler" prot="public">dynamic_specs_handler</innerclass>
    <innerclass refid="classcompile__parse__context" prot="public">compile_parse_context</innerclass>
    <innerclass refid="structfloat__specs" prot="public">float_specs</innerclass>
    <innerclass refid="classspecs__checker" prot="public">specs_checker</innerclass>
    <innerclass refid="classformat__string__checker" prot="public">format_string_checker</innerclass>
    <innerclass refid="structformatter_3_01_t_00_01_char_00_01enable__if__t_3_01detail_1_1type__constant_3_01_t_00_01_ce66aa95d8f86570b04dc47971fbb1e4b" prot="public">formatter&lt; T, Char, enable_if_t&lt; detail::type_constant&lt; T, Char &gt;::value !=detail::type::custom_type &gt; &gt;</innerclass>
    <innerclass refid="structbasic__runtime" prot="public">basic_runtime</innerclass>
    <innerclass refid="classbasic__format__string" prot="public">basic_format_string</innerclass>
    <innerclass refid="structformat__to__n__result" prot="public">format_to_n_result</innerclass>
    <innernamespace refid="namespacealign">align</innernamespace>
    <innernamespace refid="namespacesign">sign</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="core_8h_1a1a322107307b020b6eac933958da94f6" prot="public" static="no">
        <name>FMT_VERSION</name>
        <initializer>80101</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="20" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a058e2c3eea88d232a1056a0bc6487e37" prot="public" static="no">
        <name>FMT_CLANG_VERSION</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="25" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a4f5db4f97e31a127b1236d1ff412bb0c" prot="public" static="no">
        <name>FMT_GCC_VERSION</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="32" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a650e97dce87ef8442c0e92d42ae4f614" prot="public" static="no">
        <name>FMT_GCC_PRAGMA</name>
        <param><defname>arg</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="40" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a061a90c1c2008acd7b0161cde41c1a11" prot="public" static="no">
        <name>FMT_ICC_VERSION</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="49" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a52376c1ced87b19c8b3ece64cc64f22e" prot="public" static="no">
        <name>FMT_NVCC</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="55" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a363cb0623e6975ff2b357a52a03e4728" prot="public" static="no">
        <name>FMT_MSC_VER</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="62" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1ac9487321d6c482c5f5550eb04b2bbf1e" prot="public" static="no">
        <name>FMT_MSC_WARNING</name>
        <param><defname>...</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="63" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a749169f277bb21ccf12b1c665e68e88a" prot="public" static="no">
        <name>FMT_HAS_FEATURE</name>
        <param><defname>x</defname></param>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="69" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1afa144e698f8df527d6e51688eb9abbd1" prot="public" static="no">
        <name>FMT_HAS_INCLUDE</name>
        <param><defname>x</defname></param>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="77" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a55d7b78b0300ddda018f77208e80f3e9" prot="public" static="no">
        <name>FMT_HAS_CPP_ATTRIBUTE</name>
        <param><defname>x</defname></param>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="83" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1ac80313a502c4d9c77c9a0531cb682a99" prot="public" static="no">
        <name>FMT_CPLUSPLUS</name>
        <initializer>__cplusplus</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="89" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a2766aa9d7506047bc81bd56a766f3ab3" prot="public" static="no">
        <name>FMT_HAS_CPP14_ATTRIBUTE</name>
        <param><defname>attribute</defname></param>
        <initializer>  (FMT_CPLUSPLUS &gt;= 201402L &amp;&amp; FMT_HAS_CPP_ATTRIBUTE(attribute))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="92" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a8f0f9ef09a5242ac73edf22e57578edf" prot="public" static="no">
        <name>FMT_HAS_CPP17_ATTRIBUTE</name>
        <param><defname>attribute</defname></param>
        <initializer>  (FMT_CPLUSPLUS &gt;= 201703L &amp;&amp; FMT_HAS_CPP_ATTRIBUTE(attribute))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="95" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a739a7ff96b6dfd65a4de8fe003f5b233" prot="public" static="no">
        <name>FMT_USE_CONSTEXPR</name>
        <initializer>    (FMT_HAS_FEATURE(cxx_relaxed_constexpr) || FMT_MSC_VER &gt;= 1912 || \
     (FMT_GCC_VERSION &gt;= 600 &amp;&amp; __cplusplus &gt;= 201402L)) &amp;&amp;           \
        !FMT_NVCC &amp;&amp; !FMT_ICC_VERSION</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="101" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a69201cb276383873487bf68b4ef8b4cd" prot="public" static="no">
        <name>FMT_CONSTEXPR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="110" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1af4388801466a5994a363d6005616371a" prot="public" static="no">
        <name>FMT_CONSTEXPR_DECL</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="111" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1acebe0f930dd6aecc374db251062e9d10" prot="public" static="no">
        <name>FMT_CONSTEXPR20</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="119" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1ab93c46c5456b5163b059f017d5905ffe" prot="public" static="no">
        <name>FMT_CONSTEXPR_CHAR_TRAITS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="135" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a5d3b416a99857b69e3b7de8e88c71ff3" prot="public" static="no">
        <name>FMT_EXCEPTIONS</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="144" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a65490b89e8bd22fd0b8ae4491643d60c" prot="public" static="no">
        <name>FMT_USE_NOEXCEPT</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="150" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a809ce36bdf78b55c536fbca340bfec9c" prot="public" static="no">
        <name>FMT_DETECTED_NOEXCEPT</name>
        <initializer>throw()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="158" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a8e7a33185c7fc32dd026773a8ece00b8" prot="public" static="no">
        <name>FMT_HAS_CXX11_NOEXCEPT</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="159" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1aef128913e8400683b1cbd1a3a2e11df3" prot="public" static="no">
        <name>FMT_NOEXCEPT</name>
        <initializer>FMT_DETECTED_NOEXCEPT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="164" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1ac9411ed6305aee71472718fa55fcc352" prot="public" static="no">
        <name>FMT_NORETURN</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="176" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a35d4bc2bf717ac7731de7713c54175bb" prot="public" static="no">
        <name>FMT_FALLTHROUGH</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="193" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a37e9e5fe4b5f536b45979411c2568232" prot="public" static="no">
        <name>FMT_NODISCARD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="200" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a446fd9514a10077873710caef73120aa" prot="public" static="no">
        <name>FMT_USE_FLOAT</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="205" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1ade2a9cd15dd7f657a176f36d546333a5" prot="public" static="no">
        <name>FMT_USE_DOUBLE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="208" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a146d2f76f42b33f8fc7264f25a961d16" prot="public" static="no">
        <name>FMT_USE_LONG_DOUBLE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="211" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1aba4c375a41fe80858992762b3bc5c75e" prot="public" static="no">
        <name>FMT_INLINE</name>
        <initializer>inline</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="218" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a8aba8a78c514e176e0dd0a159de7a369" prot="public" static="no">
        <name>FMT_DEPRECATED</name>
        <initializer>/* deprecated */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="231" column="23" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a887c191adf8cfaf06ed40b5c4d487343" prot="public" static="no">
        <name>FMT_BEGIN_NAMESPACE</name>
        <initializer>    namespace fmt {           \
    inline namespace v8 {</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="237" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1ae0d2fbdf031547a949fc7e1c0b3c97f1" prot="public" static="no">
        <name>FMT_END_NAMESPACE</name>
        <initializer>    }                       \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="240" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a89d845f93bbf31e93277429b48e36a1e" prot="public" static="no">
        <name>FMT_MODULE_EXPORT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="246" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a405a25ede2658f5f1bd426ce7d10f3ee" prot="public" static="no">
        <name>FMT_MODULE_EXPORT_BEGIN</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="247" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1aeb35a85f8082b71051f31f5a27d7ebab" prot="public" static="no">
        <name>FMT_MODULE_EXPORT_END</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="248" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a940fe09371b00f5b516a670932319fc7" prot="public" static="no">
        <name>FMT_BEGIN_DETAIL_NAMESPACE</name>
        <initializer>namespace detail {</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="249" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a3e1d803a3ded650bd16f1e1bfd043ebe" prot="public" static="no">
        <name>FMT_END_DETAIL_NAMESPACE</name>
        <initializer>}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="250" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a60c618bb53b658cf4c0cb959b69d67ba" prot="public" static="no">
        <name>FMT_CLASS_API</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="261" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a9a4960b70582ed2620911a0b75dce0b5" prot="public" static="no">
        <name>FMT_API</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="269" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a24004c4d3ba31dd35664e85862d20061" prot="public" static="no">
        <name>FMT_UNICODE</name>
        <initializer>!FMT_MSC_VER</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="284" column="11" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a1adadf095006629612166782177c39f2" prot="public" static="no">
        <name>FMT_CONSTEVAL</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="296" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="296" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1ad2e7a7a4232d2ec901971c995a034fac" prot="public" static="no">
        <name>FMT_USE_NONTYPE_TEMPLATE_PARAMETERS</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="306" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1ab02671eb0d43965fe2957e844f427451" prot="public" static="no">
        <name>FMT_ENABLE_IF</name>
        <param><defname>...</defname></param>
        <initializer>enable_if_t&lt;(__VA_ARGS__), int&gt; = 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="344" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="344" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a03e7ee720f43adc7d83c652a6a5dd5f8" prot="public" static="no">
        <name>FMT_ASSERT</name>
        <param><defname>condition</defname></param>
        <param><defname>message</defname></param>
        <initializer>      ((condition) /* void() fails with -Winvalid-constexpr on clang 4.0.1 */ \
           ? (void)0                                                          \
           : ::fmt::detail::assert_fail(__FILE__, __LINE__, (message)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="378" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="378" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a13e53e6202856108f878beff6278417b" prot="public" static="no">
        <name>FMT_USE_INT128</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="411" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="411" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1a1b33b94a68ab12b7b4e7051da8a361f5" prot="public" static="no">
        <name>FMT_TYPE_CONSTANT</name>
        <param><defname>Type</defname></param>
        <param><defname>constant</defname></param>
        <initializer>  template &lt;typename Char&gt;                \
  struct <ref refid="structtype__constant" kindref="compound">type_constant</ref>&lt;Type, Char&gt;        \
      : std::integral_constant&lt;type, type::constant&gt; {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1158" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="core_8h_1aa62d290f1ebdec389e706cd0a9db66af" prot="public" static="no">
        <name>FMT_BUFFER_CONTEXT</name>
        <param><defname>Char</defname></param>
        <initializer>  <ref refid="classbasic__format__context" kindref="compound">basic_format_context</ref>&lt;detail::buffer_appender&lt;Char&gt;, Char&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1801" column="9" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1801" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="core_8h_1a57d5661a9537aa419c8ebc24667a96e9" prot="public" static="no" strong="yes">
        <type>unsigned char</type>
        <name>byte</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="388" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="388" bodyend="388"/>
      </memberdef>
      <memberdef kind="enum" id="core_8h_1af569c2ccf030fa7d40b7be3495c70b06" prot="public" static="no" strong="yes">
        <type></type>
        <name>int128_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="414" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="414" bodyend="414"/>
      </memberdef>
      <memberdef kind="enum" id="core_8h_1af6093adda0d3b4c981a52cecc7174053" prot="public" static="no" strong="yes">
        <type></type>
        <name>uint128_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="415" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="415" bodyend="415"/>
      </memberdef>
      <memberdef kind="enum" id="core_8h_1ab7c1afc09f67635c2c376638fcc0db5f" prot="public" static="no" strong="yes">
        <type></type>
        <name>type</name>
        <enumvalue id="core_8h_1ab7c1afc09f67635c2c376638fcc0db5fa73ddc4daf8ea1ceb20179c284cfeb878" prot="public">
          <name>none_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1ab7c1afc09f67635c2c376638fcc0db5fa06d324fffd90570dc177e7d1aabcb4dd" prot="public">
          <name>int_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1ab7c1afc09f67635c2c376638fcc0db5fa3c383a94c25cfa30af585e9cc4c1f395" prot="public">
          <name>uint_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1ab7c1afc09f67635c2c376638fcc0db5fac01eca37c575543a14a5e4b150348c0a" prot="public">
          <name>long_long_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1ab7c1afc09f67635c2c376638fcc0db5faa3f9d61ae41ea1110330fd2f5c4965dc" prot="public">
          <name>ulong_long_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1ab7c1afc09f67635c2c376638fcc0db5faecf38f9991052ed7003df04b819cd478" prot="public">
          <name>int128_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1ab7c1afc09f67635c2c376638fcc0db5fa3e36c658caeae0ad96bf06dc49216553" prot="public">
          <name>uint128_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1ab7c1afc09f67635c2c376638fcc0db5fa5c3e61d27b2bdaf4ddb98aadc356e863" prot="public">
          <name>bool_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1ab7c1afc09f67635c2c376638fcc0db5fabdf69faf97b2619c533f3ee73208d6e6" prot="public">
          <name>char_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1ab7c1afc09f67635c2c376638fcc0db5fad3f651749fd17ed60828db3d8c918219" prot="public">
          <name>last_integer_type</name>
          <initializer>= char_type</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1ab7c1afc09f67635c2c376638fcc0db5fafd7170216efb2a7d32648e80919fb0ff" prot="public">
          <name>float_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1ab7c1afc09f67635c2c376638fcc0db5faaaacacbe6cfde1582c36c02ebed184cc" prot="public">
          <name>double_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1ab7c1afc09f67635c2c376638fcc0db5faa035716d6974f4772007421d9da94b7e" prot="public">
          <name>long_double_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1ab7c1afc09f67635c2c376638fcc0db5fa9b0037530522f724121f3fcc18407aff" prot="public">
          <name>last_numeric_type</name>
          <initializer>= long_double_type</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1ab7c1afc09f67635c2c376638fcc0db5faa2a29726625aeaf3218b1df220a74b1f" prot="public">
          <name>cstring_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1ab7c1afc09f67635c2c376638fcc0db5fa4771e2c3115bb1af6ce17d9d35a0eb48" prot="public">
          <name>string_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1ab7c1afc09f67635c2c376638fcc0db5fac4c3a6c59d8a6e74dc8b960f585f494a" prot="public">
          <name>pointer_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1ab7c1afc09f67635c2c376638fcc0db5fa30b646549b4a4e783335c2ca40542c08" prot="public">
          <name>custom_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1131" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1131" bodyend="1152"/>
      </memberdef>
      <memberdef kind="enum" id="core_8h_1a2dbb833ef0dcc466dd02ee76badaf709" prot="public" static="no" strong="no">
        <type></type>
        <name>@94</name>
        <enumvalue id="core_8h_1a2dbb833ef0dcc466dd02ee76badaf709aa78c25a5df184172695de374af97f6a7" prot="public">
          <name>long_short</name>
          <initializer>= sizeof(long) == sizeof(int)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1291" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1291" bodyend="1291"/>
      </memberdef>
      <memberdef kind="enum" id="core_8h_1aea33efd5e2c69d615faad5c5965510aa" prot="public" static="no" strong="no">
        <type></type>
        <name>@95</name>
        <enumvalue id="core_8h_1aea33efd5e2c69d615faad5c5965510aaa20ec9c2d5cac838e8e340c1b371ae6db" prot="public">
          <name>packed_arg_bits</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1496" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1496" bodyend="1496"/>
      </memberdef>
      <memberdef kind="enum" id="core_8h_1a0b887f38fa71033f0904f8e2330b6815" prot="public" static="no" strong="no">
        <type></type>
        <name>@96</name>
        <enumvalue id="core_8h_1a0b887f38fa71033f0904f8e2330b6815aa2aec61a0142d05c79e16212132aa26b" prot="public">
          <name>max_packed_args</name>
          <initializer>= 62 / packed_arg_bits</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1498" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1498" bodyend="1498"/>
      </memberdef>
      <memberdef kind="enum" id="core_8h_1aa2b783136ba43a2ea6893a45c86f4ac0" prot="public" static="no" strong="no">
        <type>unsigned long long</type>
        <name>@97</name>
        <enumvalue id="core_8h_1aa2b783136ba43a2ea6893a45c86f4ac0a144043c49b42deecce880eb6ba67fd4d" prot="public">
          <name>is_unpacked_bit</name>
          <initializer>= 1ULL &lt;&lt; 63</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1499" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1499" bodyend="1499"/>
      </memberdef>
      <memberdef kind="enum" id="core_8h_1a3a42bb830f59e962ed973d3eccb08038" prot="public" static="no" strong="no">
        <type>unsigned long long</type>
        <name>@98</name>
        <enumvalue id="core_8h_1a3a42bb830f59e962ed973d3eccb08038a3d9e0b7b59aae7e5693ae2b8da34cabe" prot="public">
          <name>has_named_args_bit</name>
          <initializer>= 1ULL &lt;&lt; 62</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1500" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1500" bodyend="1500"/>
      </memberdef>
      <memberdef kind="enum" id="core_8h_1adfa139c9a1902753b3696794759b2c48" prot="public" static="no" strong="yes">
        <type>unsigned char</type>
        <name>presentation_type</name>
        <enumvalue id="core_8h_1adfa139c9a1902753b3696794759b2c48a334c4a4c42fdb79d7ebc3e73b517e6f8" prot="public">
          <name>none</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1adfa139c9a1902753b3696794759b2c48a1feea25ecb958229287f885aebe7c49b" prot="public">
          <name>dec</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1adfa139c9a1902753b3696794759b2c48a1cdbdf89f2d1bd3dd9e698b2b320cb86" prot="public">
          <name>oct</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1adfa139c9a1902753b3696794759b2c48ad760bcac7fbf52a418de91c27c14d68f" prot="public">
          <name>hex_lower</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1adfa139c9a1902753b3696794759b2c48af12799540739d60381b627d662b5bf6c" prot="public">
          <name>hex_upper</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1adfa139c9a1902753b3696794759b2c48a2e9d2820a44d3b4e9677aa880694ae1d" prot="public">
          <name>bin_lower</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1adfa139c9a1902753b3696794759b2c48a76681d3b581bdd3d96a61d9ee68a2f0e" prot="public">
          <name>bin_upper</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1adfa139c9a1902753b3696794759b2c48a66ce284aa83a6a1ef3be40f84306d126" prot="public">
          <name>hexfloat_lower</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1adfa139c9a1902753b3696794759b2c48a357a3ac50fe49a6d66acad03ae376064" prot="public">
          <name>hexfloat_upper</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1adfa139c9a1902753b3696794759b2c48a157555f731870b580669d4ae2e789292" prot="public">
          <name>exp_lower</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1adfa139c9a1902753b3696794759b2c48ae1b1fd27ead9e496ec42c0e7fa19effc" prot="public">
          <name>exp_upper</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1adfa139c9a1902753b3696794759b2c48a1029c89672ee8198610d395987e71114" prot="public">
          <name>fixed_lower</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1adfa139c9a1902753b3696794759b2c48a73ae375863f4a035518a76b2934fed84" prot="public">
          <name>fixed_upper</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1adfa139c9a1902753b3696794759b2c48ab13d73a11320f7d1f83412f9b8b67eb2" prot="public">
          <name>general_lower</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1adfa139c9a1902753b3696794759b2c48a38a425448fb167f44965e8edb6943ae0" prot="public">
          <name>general_upper</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1adfa139c9a1902753b3696794759b2c48a599e41d8cd8cf1ea79e494df54ede29a" prot="public">
          <name>chr</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1adfa139c9a1902753b3696794759b2c48ab45cffe084dd3d20d928bee85e7b0f21" prot="public">
          <name>string</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1adfa139c9a1902753b3696794759b2c48accac8a66d468e2522611be86933cc0d9" prot="public">
          <name>pointer</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="2056" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="2056" bodyend="2076"/>
      </memberdef>
      <memberdef kind="enum" id="core_8h_1a7fc0249f0f8ba720115d2430f5b86cba" prot="public" static="no" strong="yes">
        <type></type>
        <name>arg_id_kind</name>
        <enumvalue id="core_8h_1a7fc0249f0f8ba720115d2430f5b86cbaa334c4a4c42fdb79d7ebc3e73b517e6f8" prot="public">
          <name>none</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1a7fc0249f0f8ba720115d2430f5b86cbaa6a992d5529f459a44fee58c733255e86" prot="public">
          <name>index</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1a7fc0249f0f8ba720115d2430f5b86cbaab068931cc450442b63f5b3d276ea4297" prot="public">
          <name>name</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="2103" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="2103" bodyend="2103"/>
      </memberdef>
      <memberdef kind="enum" id="core_8h_1a824a8e3e13800e82ebdc3fb042eeed91" prot="public" static="no" strong="yes">
        <type>unsigned char</type>
        <name>float_format</name>
        <enumvalue id="core_8h_1a824a8e3e13800e82ebdc3fb042eeed91a958153f1b8b96ec4c4eb2147429105d9" prot="public">
          <name>general</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1a824a8e3e13800e82ebdc3fb042eeed91ab0ab0254bd58eb87eaee3172ba49fefb" prot="public">
          <name>exp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1a824a8e3e13800e82ebdc3fb042eeed91acec315e3d0975e5cc2811d5d8725f149" prot="public">
          <name>fixed</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="core_8h_1a824a8e3e13800e82ebdc3fb042eeed91ab8d1b43eae73587ba56baef574709ecb" prot="public">
          <name>hex</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="2730" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="2730" bodyend="2735"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="core_8h_1a012819c9e8b5e04872a271f50f8b8196" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>B</declname>
            <defname>B</defname>
          </param>
          <param>
            <type>typename T</type>
            <defval>void</defval>
          </param>
        </templateparamlist>
        <type>typename std::enable_if&lt; B, T &gt;::type</type>
        <definition>using enable_if_t =  typename std::enable_if&lt;B, T&gt;::type</definition>
        <argsstring></argsstring>
        <name>enable_if_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="321" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="321" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="core_8h_1acdb0eff728aec08ed6fff07d2885ea9d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>B</declname>
            <defname>B</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>typename std::conditional&lt; B, T, F &gt;::type</type>
        <definition>using conditional_t =  typename std::conditional&lt;B, T, F&gt;::type</definition>
        <argsstring></argsstring>
        <name>conditional_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="323" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="323" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="core_8h_1a0d337b508cc2fb5a92d8e72db201e53b" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>B</declname>
            <defname>B</defname>
          </param>
        </templateparamlist>
        <type>std::integral_constant&lt; bool, B &gt;</type>
        <definition>using bool_constant =  std::integral_constant&lt;bool, B&gt;</definition>
        <argsstring></argsstring>
        <name>bool_constant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="324" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="324" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="core_8h_1a3a08cea569e6926ac8d7d74dd7178b5f" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename std::remove_reference&lt; T &gt;::type</type>
        <definition>using remove_reference_t =  typename std::remove_reference&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>remove_reference_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="326" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="core_8h_1a31ee6e9231fa50c7fdd7292f0c45f13e" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename std::remove_const&lt; T &gt;::type</type>
        <definition>using remove_const_t =  typename std::remove_const&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>remove_const_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="328" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="core_8h_1ada5b2a956a74d40f6afec72d7d0adc27" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename std::remove_cv&lt; remove_reference_t&lt; T &gt; &gt;::type</type>
        <definition>using remove_cvref_t =  typename std::remove_cv&lt;remove_reference_t&lt;T&gt; &gt;::type</definition>
        <argsstring></argsstring>
        <name>remove_cvref_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="330" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="330" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="core_8h_1aca42c1976d1b12998afcabf8f39e8c23" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename <ref refid="structtype__identity" kindref="compound">type_identity</ref>&lt; T &gt;::type</type>
        <definition>using type_identity_t =  typename type_identity&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>type_identity_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="332" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="332" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="core_8h_1a204ca715c2febee035464fa53dfc50c4" prot="public" static="no">
        <type><ref refid="classbasic__string__view" kindref="compound">basic_string_view</ref>&lt; char &gt;</type>
        <definition>using string_view =  basic_string_view&lt;char&gt;</definition>
        <argsstring></argsstring>
        <name>string_view</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="540" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="540" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="core_8h_1a3c674f92fe25aa74e8d3d5449ec85efb" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>typename detail::char_t_impl&lt; S &gt;::type</type>
        <definition>using char_t =  typename detail::char_t_impl&lt;S&gt;::type</definition>
        <argsstring></argsstring>
        <name>char_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>String&apos;s character type. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="623" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="623" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="core_8h_1a7f31f076b2eb408741895533f9222baa" prot="public" static="no">
        <type><ref refid="classbasic__format__parse__context" kindref="compound">basic_format_parse_context</ref>&lt; char &gt;</type>
        <definition>using format_parse_context =  basic_format_parse_context&lt;char&gt;</definition>
        <argsstring></argsstring>
        <name>format_parse_context</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="699" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="699" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="core_8h_1a74c7602dbb427c519ab26d4feecf9149" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Context</type>
          </param>
        </templateparamlist>
        <type>std::is_constructible&lt; typename Context::template formatter_type&lt; T &gt; &gt;</type>
        <definition>using has_formatter =  std::is_constructible&lt;typename Context::template formatter_type&lt;T&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>has_formatter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="715" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="716" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="core_8h_1aa91f761428845b1b6d78bb83c6c69557" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>conditional_t&lt; std::is_same&lt; T, char &gt;::<ref refid="classvalue" kindref="compound">value</ref>, <ref refid="classappender" kindref="compound">appender</ref>, std::back_insert_iterator&lt; <ref refid="classbuffer" kindref="compound">buffer</ref>&lt; T &gt; &gt; &gt;</type>
        <definition>using buffer_appender =  conditional_t&lt;std::is_same&lt;T, char&gt;::value, appender, std::back_insert_iterator&lt;buffer&lt;T&gt; &gt;&gt;</definition>
        <argsstring></argsstring>
        <name>buffer_appender</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1022" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1023" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="core_8h_1ad017e68fdc62329b58d9acc5efa45867" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Char</type>
          </param>
        </templateparamlist>
        <type>std::is_constructible&lt; <ref refid="structfallback__formatter" kindref="compound">fallback_formatter</ref>&lt; T, Char &gt; &gt;</type>
        <definition>using has_fallback_formatter =  std::is_constructible&lt;fallback_formatter&lt;T, Char&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>has_fallback_formatter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1046" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1047" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="core_8h_1a9174fa0aac401969efb266e326f42951" prot="public" static="no">
        <type>conditional_t&lt; long_short, int, long long &gt;</type>
        <definition>using long_type =  conditional_t&lt;long_short, int, long long&gt;</definition>
        <argsstring></argsstring>
        <name>long_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1292" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="core_8h_1a2e24c039447f0eda42b5a1185f0dd743" prot="public" static="no">
        <type>conditional_t&lt; long_short, unsigned, unsigned long long &gt;</type>
        <definition>using ulong_type =  conditional_t&lt;long_short, unsigned, unsigned long long&gt;</definition>
        <argsstring></argsstring>
        <name>ulong_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1293" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1293" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="core_8h_1adc4b00dc3259d8fce83f914a5b38f354" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Context</type>
          </param>
        </templateparamlist>
        <type><ref refid="structtype__constant" kindref="compound">type_constant</ref>&lt; decltype(<ref refid="structarg__mapper" kindref="compound">arg_mapper</ref>&lt; Context &gt;().map(std::declval&lt; const T &amp; &gt;())), typename Context::char_type &gt;</type>
        <definition>using mapped_type_constant =  type_constant&lt;decltype(arg_mapper&lt;Context&gt;().map(std::declval&lt;const T&amp;&gt;())), typename Context::char_type&gt;</definition>
        <argsstring></argsstring>
        <name>mapped_type_constant</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1492" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1494" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="core_8h_1ab8ddf9531fc4ac7ce28574db20c8f20e" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>using void_t =  void</definition>
        <argsstring></argsstring>
        <name>void_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1641" column="12" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1641" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="core_8h_1aaaef905b4cc5da6969d9ee839d668406" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__format__context" kindref="compound">basic_format_context</ref>&lt; detail::buffer_appender&lt; Char &gt;, Char &gt;</type>
        <definition>using buffer_context =  basic_format_context&lt;detail::buffer_appender&lt;Char&gt;, Char&gt;</definition>
        <argsstring></argsstring>
        <name>buffer_context</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1796" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1797" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="core_8h_1a3e6224930832371a8c75d3e519873a9e" prot="public" static="no">
        <type><ref refid="classbasic__format__context" kindref="compound">buffer_context</ref>&lt; char &gt;</type>
        <definition>using format_context =  buffer_context&lt;char&gt;</definition>
        <argsstring></argsstring>
        <name>format_context</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1798" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1798" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="core_8h_1a887ba223931b931af78809677a4df3fb" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Char</type>
            <defval>char</defval>
          </param>
        </templateparamlist>
        <type>bool_constant&lt; !std::is_base_of&lt; detail::unformattable, decltype(detail::arg_mapper&lt; <ref refid="classbasic__format__context" kindref="compound">buffer_context</ref>&lt; Char &gt; &gt;().map(std::declval&lt; T &gt;()))&gt;::<ref refid="classvalue" kindref="compound">value</ref> &amp;&amp;!detail::has_fallback_formatter&lt; T, Char &gt;::<ref refid="classvalue" kindref="compound">value</ref> &gt;</type>
        <definition>using is_formattable =  bool_constant&lt; !std::is_base_of&lt;detail::unformattable, decltype(detail::arg_mapper&lt;buffer_context&lt;Char&gt; &gt;().map( std::declval&lt;T&gt;()))&gt;::value &amp;&amp; !detail::has_fallback_formatter&lt;T, Char&gt;::value&gt;</definition>
        <argsstring></argsstring>
        <name>is_formattable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1805" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1809" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="core_8h_1abd8c737296655b44480da4fb422add24" prot="public" static="no">
        <type><ref refid="classbasic__format__args" kindref="compound">basic_format_args</ref>&lt; <ref refid="classbasic__format__context" kindref="compound">format_context</ref> &gt;</type>
        <definition>using format_args =  basic_format_args&lt;format_context&gt;</definition>
        <argsstring></argsstring>
        <name>format_args</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An alias to <computeroutput><ref refid="classbasic__format__args" kindref="compound">basic_format_args</ref>&lt;format_context&gt;</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="2016" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="2016" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="core_8h_1a287c722ae78d5cb37bb7887b87e8f769" prot="public" static="no">
        <type>align::type</type>
        <definition>using align_t =  align::type</definition>
        <argsstring></argsstring>
        <name>align_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="2023" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="2023" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="core_8h_1ad65908bd5d03f057bd2009ce3f40f9f3" prot="public" static="no">
        <type><ref refid="structsign_1_1type" kindref="compound">sign::type</ref></type>
        <definition>using sign_t =  sign::type</definition>
        <argsstring></argsstring>
        <name>sign_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="2027" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="2027" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="core_8h_1a92e212323f243ceed8554e67489039d3" prot="public" static="no">
        <type><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs</ref>&lt; char &gt;</type>
        <definition>using format_specs =  basic_format_specs&lt;char&gt;</definition>
        <argsstring></argsstring>
        <name>format_specs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="2099" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="2099" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="core_8h_1a56a828fb91283babdb0eef8e0d9010cb" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classbasic__format__string" kindref="compound">basic_format_string</ref>&lt; char, type_identity_t&lt; Args &gt;... &gt;</type>
        <definition>using format_string =  basic_format_string&lt;char, type_identity_t&lt;Args&gt;...&gt;</definition>
        <argsstring></argsstring>
        <name>format_string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="3087" column="1" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="3087" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="core_8h_1addc1f7fdbc14748b158ba0d8fdcc1d07" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int invalid_arg_index</definition>
        <argsstring></argsstring>
        <name>invalid_arg_index</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="2865" column="15" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="2865" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="core_8h_1aa2c46459e52094a4dd8501aebcbefa80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>FMT_BEGIN_DETAIL_NAMESPACE FMT_CONSTEXPR void</type>
        <definition>FMT_BEGIN_DETAIL_NAMESPACE FMT_CONSTEXPR void ignore_unused</definition>
        <argsstring>(const T &amp;...)</argsstring>
        <name>ignore_unused</name>
        <param>
          <type>const T &amp;</type>
          <declname>...</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="352" column="32" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="352" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a28a45c39fb6710745256cf0f73b8858a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr FMT_INLINE auto</type>
        <definition>constexpr FMT_INLINE auto is_constant_evaluated</definition>
        <argsstring>(bool default_value=false) FMT_NOEXCEPT -&gt; bool</argsstring>
        <name>is_constant_evaluated</name>
        <param>
          <type>bool</type>
          <declname>default_value</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="354" column="27" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="354" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a0290cb3baf281d15619c15fe252ea48c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr FMT_INLINE auto</type>
        <definition>constexpr FMT_INLINE auto const_check</definition>
        <argsstring>(T value) -&gt; T</argsstring>
        <name>const_check</name>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="365" column="39" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="365" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a83171a94d099c61981453a40b3f63691" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FMT_NORETURN FMT_API void</type>
        <definition>FMT_NORETURN FMT_API void assert_fail</definition>
        <argsstring>(const char *file, int line, const char *message)</argsstring>
        <name>assert_fail</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="369" column="27" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" declline="369" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1abe5962a4a6f975968fe6950f78e57b52" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto convert_for_visit</definition>
        <argsstring>(T) -&gt; monostate</argsstring>
        <name>convert_for_visit</name>
        <param>
          <type>T</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="417" column="25" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="417" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1abd7b6da8e7d4699f92f3d6adf12aa0ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Int</type>
          </param>
        </templateparamlist>
        <type>FMT_CONSTEXPR auto</type>
        <definition>FMT_CONSTEXPR auto to_unsigned</definition>
        <argsstring>(Int value) -&gt; typename std::make_unsigned&lt; Int &gt;::type</argsstring>
        <name>to_unsigned</name>
        <param>
          <type>Int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="424" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="424" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1aae4a0ddbc1cb67c09ed7ec28c9110f76" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FMT_MSC_WARNING</definition>
        <argsstring>(suppress :4566) const expr unsigned char micro[]</argsstring>
        <name>FMT_MSC_WARNING</name>
        <param>
          <type>suppress :4566</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="430" column="1" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" declline="430" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1aa775e2eb7e88a4d76cd37d63126aef11" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto is_utf8</definition>
        <argsstring>() -&gt; bool</argsstring>
        <name>is_utf8</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="432" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="432" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1ac6e2c026c2e92e67b212b2a70f1778ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
          <param>
            <type>FMT_ENABLE_IF(<ref refid="structis__char" kindref="compound">is_char</ref>&lt; Char &gt;::<ref refid="classvalue" kindref="compound">value</ref>)</type>
          </param>
        </templateparamlist>
        <type>FMT_INLINE auto</type>
        <definition>FMT_INLINE auto to_string_view</definition>
        <argsstring>(const Char *s) -&gt; basic_string_view&lt; Char &gt;</argsstring>
        <name>to_string_view</name>
        <param>
          <type>const Char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="548" column="17" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="548" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a6409fdc726ab041ce234dfef80621fcc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
          <param>
            <type>typename Traits</type>
          </param>
          <param>
            <type>typename Alloc</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto to_string_view</definition>
        <argsstring>(const std::basic_string&lt; Char, Traits, Alloc &gt; &amp;s) -&gt; basic_string_view&lt; Char &gt;</argsstring>
        <name>to_string_view</name>
        <param>
          <type>const std::basic_string&lt; Char, Traits, Alloc &gt; &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="552" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="552" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a734cb3a351d7fd8cb7d6d8ebdae01160" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto to_string_view</definition>
        <argsstring>(basic_string_view&lt; Char &gt; s) -&gt; basic_string_view&lt; Char &gt;</argsstring>
        <name>to_string_view</name>
        <param>
          <type><ref refid="classbasic__string__view" kindref="compound">basic_string_view</ref>&lt; Char &gt;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="557" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="557" bodyend="560"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a8838d956438b825d00cce3f7a589f87b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
          <param>
            <type>FMT_ENABLE_IF(!std::is_empty&lt; detail::std_string_view&lt; Char &gt; &gt;::<ref refid="classvalue" kindref="compound">value</ref>)</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto to_string_view</definition>
        <argsstring>(detail::std_string_view&lt; Char &gt; s) -&gt; basic_string_view&lt; Char &gt;</argsstring>
        <name>to_string_view</name>
        <param>
          <type>detail::std_string_view&lt; Char &gt;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="563" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="563" bodyend="566"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a12cd3d335b810619d8f3ac468f0ae015" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>FMT_ENABLE_IF(<ref refid="structis__compile__string" kindref="compound">is_compile_string</ref>&lt; S &gt;::<ref refid="classvalue" kindref="compound">value</ref>)</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto to_string_view</definition>
        <argsstring>(const S &amp;s) -&gt; basic_string_view&lt; typename S::char_type &gt;</argsstring>
        <name>to_string_view</name>
        <param>
          <type>const S &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="576" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="576" bodyend="579"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a49b1bbbb16f786276327a5d5dea94f9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FMT_BEGIN_DETAIL_NAMESPACE void</type>
        <definition>FMT_BEGIN_DETAIL_NAMESPACE void to_string_view</definition>
        <argsstring>(...)</argsstring>
        <name>to_string_view</name>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="583" column="6" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" declline="583" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a9d2350f89ca3bfbbf53d13157df1629c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
          </param>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>FMT_ENABLE_IF(!<ref refid="structis__compile__string" kindref="compound">is_compile_string</ref>&lt; S &gt;::<ref refid="classvalue" kindref="compound">value</ref>)</type>
          </param>
        </templateparamlist>
        <type>FMT_INLINE void</type>
        <definition>FMT_INLINE void check_format_string</definition>
        <argsstring>(const S &amp;)</argsstring>
        <name>check_format_string</name>
        <param>
          <type>const S &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="601" column="17" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="601" bodyend="607"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a1663e9bcddba002ba86aeba2eef5d054" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
          </param>
          <param>
            <type>typename S</type>
          </param>
          <param>
            <type>FMT_ENABLE_IF(<ref refid="structis__compile__string" kindref="compound">is_compile_string</ref>&lt; S &gt;::<ref refid="classvalue" kindref="compound">value</ref>)</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void check_format_string</definition>
        <argsstring>(S)</argsstring>
        <name>check_format_string</name>
        <param>
          <type>S</type>
          <defname>format_str</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="2942" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="2942" bodyend="2949" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" declline="609" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1ac2dddff5c4f81bcda40833bc485853b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FMT_NORETURN FMT_API void</type>
        <definition>FMT_NORETURN FMT_API void throw_format_error</definition>
        <argsstring>(const char *message)</argsstring>
        <name>throw_format_error</name>
        <param>
          <type>const char *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="611" column="27" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" declline="611" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a61cb94144cf48d21c29bc3343e9c11f9" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Context</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr FMT_BEGIN_DETAIL_NAMESPACE auto</type>
        <definition>constexpr FMT_BEGIN_DETAIL_NAMESPACE auto has_const_formatter_impl</definition>
        <argsstring>(T *) -&gt; decltype(typename Context::template formatter_type&lt; T &gt;().format(std::declval&lt; const T &amp; &gt;(), std::declval&lt; Context &amp; &gt;()), true)</argsstring>
        <name>has_const_formatter_impl</name>
        <param>
          <type>T *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="728" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="728" bodyend="733"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1aceece8f2dee76c77ba701a68e72c4496" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Context</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto has_const_formatter_impl</definition>
        <argsstring>(...) -&gt; bool</argsstring>
        <name>has_const_formatter_impl</name>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="735" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="735" bodyend="737"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1af1bd84ed55d3f25b69a382e0e6252131" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Context</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto has_const_formatter</definition>
        <argsstring>() -&gt; bool</argsstring>
        <name>has_const_formatter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="739" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="739" bodyend="741"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1ad107c89b3560dbdb447bd42976dfd2d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Container</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto get_container</definition>
        <argsstring>(std::back_insert_iterator&lt; Container &gt; it) -&gt; Container &amp;</argsstring>
        <name>get_container</name>
        <param>
          <type>std::back_insert_iterator&lt; Container &gt;</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="745" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="745" bodyend="753"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a060ff34574606b33db21d39b17152349" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
          <param>
            <type>typename InputIt</type>
          </param>
          <param>
            <type>typename OutputIt</type>
          </param>
        </templateparamlist>
        <type>FMT_CONSTEXPR auto</type>
        <definition>FMT_CONSTEXPR auto copy_str</definition>
        <argsstring>(InputIt begin, InputIt end, OutputIt out) -&gt; OutputIt</argsstring>
        <name>copy_str</name>
        <param>
          <type>InputIt</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InputIt</type>
          <declname>end</declname>
        </param>
        <param>
          <type>OutputIt</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="756" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="756" bodyend="760"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a6669f12174479094569a124472989b24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>FMT_ENABLE_IF( std::is_same&lt; remove_const_t&lt; T &gt;, U &gt;::<ref refid="classvalue" kindref="compound">value</ref> &amp;&amp;<ref refid="structis__char" kindref="compound">is_char</ref>&lt; U &gt;::<ref refid="classvalue" kindref="compound">value</ref>)</type>
          </param>
        </templateparamlist>
        <type>FMT_CONSTEXPR auto</type>
        <definition>FMT_CONSTEXPR auto copy_str</definition>
        <argsstring>(T *begin, T *end, U *out) -&gt; U *</argsstring>
        <name>copy_str</name>
        <param>
          <type>T *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>end</declname>
        </param>
        <param>
          <type>U *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="765" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="765" bodyend="770"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1aaecdbbf70c37826c908a21204c7328aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename OutputIt</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto get_buffer</definition>
        <argsstring>(OutputIt out) -&gt; iterator_buffer&lt; OutputIt, T &gt;</argsstring>
        <name>get_buffer</name>
        <param>
          <type>OutputIt</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1027" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1027" bodyend="1029"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1abcfb1e47d1276db7c3313c512a36c180" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Buffer</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto get_iterator</definition>
        <argsstring>(Buffer &amp;buf) -&gt; decltype(buf.out())</argsstring>
        <name>get_iterator</name>
        <param>
          <type>Buffer &amp;</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1032" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1032" bodyend="1034"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1aa0b2a25de3cc16ea39c033e76561b1be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto get_iterator</definition>
        <argsstring>(buffer&lt; T &gt; &amp;buf) -&gt; buffer_appender&lt; T &gt;</argsstring>
        <name>get_iterator</name>
        <param>
          <type><ref refid="classbuffer" kindref="compound">buffer</ref>&lt; T &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1035" column="18" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1035" bodyend="1037"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a392f70e36dbd911806400ea3886385a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void init_named_args</definition>
        <argsstring>(named_arg_info&lt; Char &gt; *, int, int)</argsstring>
        <name>init_named_args</name>
        <param>
          <type><ref refid="structnamed__arg__info" kindref="compound">named_arg_info</ref>&lt; Char &gt; *</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1090" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1090" bodyend="1090"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a094fff347f100dafed94e2745dbe7ac6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Tail</declname>
            <defname>Tail</defname>
          </param>
          <param>
            <type>FMT_ENABLE_IF(!<ref refid="structis__named__arg" kindref="compound">is_named_arg</ref>&lt; T &gt;::<ref refid="classvalue" kindref="compound">value</ref>)</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void init_named_args</definition>
        <argsstring>(named_arg_info&lt; Char &gt; *named_args, int arg_count, int named_arg_count, const T &amp;, const Tail &amp;... args)</argsstring>
        <name>init_named_args</name>
        <param>
          <type><ref refid="structnamed__arg__info" kindref="compound">named_arg_info</ref>&lt; Char &gt; *</type>
          <declname>named_args</declname>
        </param>
        <param>
          <type>int</type>
          <declname>arg_count</declname>
        </param>
        <param>
          <type>int</type>
          <declname>named_arg_count</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <defname>arg</defname>
        </param>
        <param>
          <type>const Tail &amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1100" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1100" bodyend="1103"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1afd2f97d8696d7ff96540188b2d791623" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>FMT_CONSTEXPR FMT_INLINE void</type>
        <definition>FMT_CONSTEXPR FMT_INLINE void init_named_args</definition>
        <argsstring>(std::nullptr_t, int, int, const Args &amp;...)</argsstring>
        <name>init_named_args</name>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>const Args &amp;</type>
          <declname>...</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1114" column="31" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1114" bodyend="1115"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a501bb1bb2f0cc5706178ed237958e73b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>B</declname>
            <defname>B</defname>
            <defval>false</defval>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto count</definition>
        <argsstring>() -&gt; size_t</argsstring>
        <name>count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1117" column="30" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1117" bodyend="1117"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a66b93840aa6a29b3802202f99668f78a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>B1</declname>
            <defname>B1</defname>
          </param>
          <param>
            <type>bool</type>
            <declname>B2</declname>
            <defname>B2</defname>
          </param>
          <param>
            <type>bool...</type>
            <declname>Tail</declname>
            <defname>Tail</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto count</definition>
        <argsstring>() -&gt; size_t</argsstring>
        <name>count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1118" column="32" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1118" bodyend="1120"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a5bb1750c4eb31fcbaeee9cffcc65040d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto count_named_args</definition>
        <argsstring>() -&gt; size_t</argsstring>
        <name>count_named_args</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1122" column="28" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1122" bodyend="1124"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1aaf91a6a3b2e298235c8d45bec2854878" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto count_statically_named_args</definition>
        <argsstring>() -&gt; size_t</argsstring>
        <name>count_statically_named_args</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1127" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1127" bodyend="1129"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a28a0b194200ca87b7ede510532a62c8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FMT_TYPE_CONSTANT</definition>
        <argsstring>(int, int_type)</argsstring>
        <name>FMT_TYPE_CONSTANT</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>int_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1163" column="1" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" declline="1163" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a2acc96773ff46dd16e5cb99500f0ffdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FMT_TYPE_CONSTANT</definition>
        <argsstring>(unsigned, uint_type)</argsstring>
        <name>FMT_TYPE_CONSTANT</name>
        <param>
          <type>unsigned</type>
        </param>
        <param>
          <type>uint_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1164" column="1" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" declline="1164" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a6c4020b1f238129f2b159dec9d9fa524" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FMT_TYPE_CONSTANT</definition>
        <argsstring>(long long, long_long_type)</argsstring>
        <name>FMT_TYPE_CONSTANT</name>
        <param>
          <type>long long</type>
        </param>
        <param>
          <type>long_long_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1165" column="1" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" declline="1165" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a57ad1629f1eec50c84b08cf96d9e5569" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FMT_TYPE_CONSTANT</definition>
        <argsstring>(unsigned long long, ulong_long_type)</argsstring>
        <name>FMT_TYPE_CONSTANT</name>
        <param>
          <type>unsigned long long</type>
        </param>
        <param>
          <type>ulong_long_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1166" column="1" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" declline="1166" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a50f8c126b6f7347c0ef5c2ac4a4bb257" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FMT_TYPE_CONSTANT</definition>
        <argsstring>(int128_t, int128_type)</argsstring>
        <name>FMT_TYPE_CONSTANT</name>
        <param>
          <type>int128_t</type>
        </param>
        <param>
          <type>int128_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1167" column="1" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" declline="1167" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a8176c7b30683f44bad7609a77109bc9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FMT_TYPE_CONSTANT</definition>
        <argsstring>(uint128_t, uint128_type)</argsstring>
        <name>FMT_TYPE_CONSTANT</name>
        <param>
          <type>uint128_t</type>
        </param>
        <param>
          <type>uint128_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1168" column="1" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" declline="1168" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a476aa2b29156dd885af7ef7f1b59a958" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FMT_TYPE_CONSTANT</definition>
        <argsstring>(bool, bool_type)</argsstring>
        <name>FMT_TYPE_CONSTANT</name>
        <param>
          <type>bool</type>
        </param>
        <param>
          <type>bool_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1169" column="1" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" declline="1169" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a32a9cbbd10c80626fa7bc91005948ecc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FMT_TYPE_CONSTANT</definition>
        <argsstring>(Char, char_type)</argsstring>
        <name>FMT_TYPE_CONSTANT</name>
        <param>
          <type>Char</type>
        </param>
        <param>
          <type>char_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1170" column="1" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" declline="1170" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1af2d63c0767980a627598bd121738130c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FMT_TYPE_CONSTANT</definition>
        <argsstring>(float, float_type)</argsstring>
        <name>FMT_TYPE_CONSTANT</name>
        <param>
          <type>float</type>
        </param>
        <param>
          <type>float_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1171" column="1" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" declline="1171" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a13aee15645359b1386a7e88711299f00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FMT_TYPE_CONSTANT</definition>
        <argsstring>(double, double_type)</argsstring>
        <name>FMT_TYPE_CONSTANT</name>
        <param>
          <type>double</type>
        </param>
        <param>
          <type>double_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1172" column="1" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" declline="1172" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a1ed9257c37993959e88910a3da1a3e39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FMT_TYPE_CONSTANT</definition>
        <argsstring>(long double, long_double_type)</argsstring>
        <name>FMT_TYPE_CONSTANT</name>
        <param>
          <type>long double</type>
        </param>
        <param>
          <type>long_double_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1173" column="1" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" declline="1173" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1add58a660e515d132ce977d60b33ca3f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FMT_TYPE_CONSTANT</definition>
        <argsstring>(const Char *, cstring_type)</argsstring>
        <name>FMT_TYPE_CONSTANT</name>
        <param>
          <type>const Char *</type>
        </param>
        <param>
          <type>cstring_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1174" column="1" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" declline="1174" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a8de0188118c0d0babded54b9976135ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FMT_TYPE_CONSTANT</definition>
        <argsstring>(basic_string_view&lt; Char &gt;, string_type)</argsstring>
        <name>FMT_TYPE_CONSTANT</name>
        <param>
          <type><ref refid="classbasic__string__view" kindref="compound">basic_string_view</ref>&lt; Char &gt;</type>
        </param>
        <param>
          <type>string_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1175" column="1" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" declline="1175" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a3d68b5e5b931b112d819d3ec001d2506" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>FMT_TYPE_CONSTANT</definition>
        <argsstring>(const void *, pointer_type)</argsstring>
        <name>FMT_TYPE_CONSTANT</name>
        <param>
          <type>const void *</type>
        </param>
        <param>
          <type>pointer_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1176" column="1" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" declline="1176" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a7d29dc4ad70a11d68dcc8071470424b5" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool is_integral_type</definition>
        <argsstring>(type t)</argsstring>
        <name>is_integral_type</name>
        <param>
          <type>type</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1178" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1178" bodyend="1180"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1ae58e4b28c1d1256d6933587888f37217" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>constexpr bool</type>
        <definition>constexpr bool is_arithmetic_type</definition>
        <argsstring>(type t)</argsstring>
        <name>is_arithmetic_type</name>
        <param>
          <type>type</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1182" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1182" bodyend="1184"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1aef082bed5a0764bf11135801ae7c5a7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Context</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>FMT_CONSTEXPR auto</type>
        <definition>FMT_CONSTEXPR auto make_arg</definition>
        <argsstring>(const T &amp;value) -&gt; basic_format_arg&lt; Context &gt;</argsstring>
        <name>make_arg</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1693" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1693" bodyend="1698" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" declline="1287" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a05783ffcc62709c2284ee0da45486a98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Visitor</type>
          </param>
          <param>
            <type>typename Context</type>
          </param>
        </templateparamlist>
        <type>FMT_CONSTEXPR FMT_INLINE auto</type>
        <definition>FMT_CONSTEXPR FMT_INLINE auto visit_format_arg</definition>
        <argsstring>(Visitor &amp;&amp;vis, const basic_format_arg&lt; Context &gt; &amp;arg) -&gt; decltype(vis(0))</argsstring>
        <name>visit_format_arg</name>
        <param>
          <type>Visitor &amp;&amp;</type>
          <declname>vis</declname>
        </param>
        <param>
          <type>const <ref refid="classbasic__format__arg" kindref="compound">basic_format_arg</ref>&lt; Context &gt; &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Visits an argument dispatching to the appropriate visit method based on the argument type. For example, if the argument type is <computeroutput>double</computeroutput> then <computeroutput>vis(value)</computeroutput> will be called with the value of type <computeroutput>double</computeroutput>. \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1587" column="31" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1587" bodyend="1625"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a6b13306dfd0dee2fa4fd36de9e973541" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
          <param>
            <type>typename InputIt</type>
          </param>
        </templateparamlist>
        <type>FMT_BEGIN_DETAIL_NAMESPACE auto</type>
        <definition>FMT_BEGIN_DETAIL_NAMESPACE auto copy_str</definition>
        <argsstring>(InputIt begin, InputIt end, appender out) -&gt; appender</argsstring>
        <name>copy_str</name>
        <param>
          <type>InputIt</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>InputIt</type>
          <declname>end</declname>
        </param>
        <param>
          <type><ref refid="classappender" kindref="compound">appender</ref></type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1630" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1630" bodyend="1633"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1aa3596f04691dca000e69e8bc042d8163" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto encode_types</definition>
        <argsstring>() -&gt; unsigned long long</argsstring>
        <name>encode_types</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1682" column="27" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1682" bodyend="1684"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1abbd123930c75c297da923d49a59d3515" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Context</type>
          </param>
          <param>
            <type>typename Arg</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto encode_types</definition>
        <argsstring>() -&gt; unsigned long long</argsstring>
        <name>encode_types</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1687" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1687" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a6b1f225f5aa4925954c941e3c19a532e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>IS_PACKED</declname>
            <defname>IS_PACKED</defname>
          </param>
          <param>
            <type>typename Context</type>
          </param>
          <param>
            <type>type</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>FMT_ENABLE_IF(IS_PACKED)</type>
          </param>
        </templateparamlist>
        <type>FMT_CONSTEXPR FMT_INLINE auto</type>
        <definition>FMT_CONSTEXPR FMT_INLINE auto make_arg</definition>
        <argsstring>(T &amp;&amp;val) -&gt; value&lt; Context &gt;</argsstring>
        <name>make_arg</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1705" column="31" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1705" bodyend="1732"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a8f2d4bf9b52be21037c502aa30f0e6e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>IS_PACKED</declname>
            <defname>IS_PACKED</defname>
          </param>
          <param>
            <type>typename Context</type>
          </param>
          <param>
            <type>type</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>FMT_ENABLE_IF(!IS_PACKED)</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto make_arg</definition>
        <argsstring>(const T &amp;value) -&gt; basic_format_arg&lt; Context &gt;</argsstring>
        <name>make_arg</name>
        <param>
          <type>const T &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1736" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1736" bodyend="1738"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a61919fb242708a0cc41b106d850b67b5" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Context</type>
            <defval><ref refid="classbasic__format__context" kindref="compound">format_context</ref></defval>
          </param>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto make_format_args</definition>
        <argsstring>(Args &amp;&amp;... args) -&gt; format_arg_store&lt; Context, remove_cvref_t&lt; Args &gt;... &gt;</argsstring>
        <name>make_format_args</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Constructs a <computeroutput>~fmt<ref refid="classformat__arg__store" kindref="compound">format_arg_store</ref></computeroutput> object that contains references to arguments and can be implicitly converted to <computeroutput>~fmt::format_args</computeroutput>. <computeroutput>Context</computeroutput> can be omitted in which case it defaults to <computeroutput>~fmt::context</computeroutput>. See <computeroutput>~fmt::arg</computeroutput> for lifetime considerations. \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1870" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1870" bodyend="1873"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a2c8e80c1b1c8b7747e99b8e9a24a0429" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto arg</definition>
        <argsstring>(const Char *name, const T &amp;arg) -&gt; detail::named_arg&lt; Char, T &gt;</argsstring>
        <name>arg</name>
        <param>
          <type>const Char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Returns a named argument to be used in a formatting function. It should only be used in a call to a formatting function or <computeroutput><ref refid="classdynamic__format__arg__store_1a710e994685e69fd1cd4f56d29efc0d95" kindref="member">dynamic_format_arg_store::push_back</ref></computeroutput>.</para>
<para>Example**::</para>
<para>fmt::print(&quot;Elapsed time: {s:.2f} seconds&quot;, fmt::arg(&quot;s&quot;, 1.23)); \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="1887" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="1887" bodyend="1890"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a1d2097aafa5a771a9df557e1179ca795" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool is_ascii_letter</definition>
        <argsstring>(Char c)</argsstring>
        <name>is_ascii_letter</name>
        <param>
          <type>Char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="2228" column="28" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="2228" bodyend="2230"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a6d9f9a857354c6d9c3188aad04ca7c6f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
          <param>
            <type>FMT_ENABLE_IF(std::is_integral&lt; Char &gt;::<ref refid="classvalue" kindref="compound">value</ref>)</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto to_ascii</definition>
        <argsstring>(Char value) -&gt; Char</argsstring>
        <name>to_ascii</name>
        <param>
          <type>Char</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="2234" column="16" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="2234" bodyend="2236"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a0a7277f95959a3ddf0eb2267c35755e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
        </templateparamlist>
        <type>FMT_CONSTEXPR auto</type>
        <definition>FMT_CONSTEXPR auto code_point_length</definition>
        <argsstring>(const Char *begin) -&gt; int</argsstring>
        <name>code_point_length</name>
        <param>
          <type>const Char *</type>
          <declname>begin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="2244" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="2244" bodyend="2254"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a02307ec0131a3aa9df2db7c2f10b69f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>IS_CONSTEXPR</declname>
            <defname>IS_CONSTEXPR</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Ptr</type>
            <defval>const T*</defval>
          </param>
        </templateparamlist>
        <type>FMT_CONSTEXPR auto</type>
        <definition>FMT_CONSTEXPR auto find</definition>
        <argsstring>(Ptr first, Ptr last, T value, Ptr &amp;out) -&gt; bool</argsstring>
        <name>find</name>
        <param>
          <type>Ptr</type>
          <declname>first</declname>
        </param>
        <param>
          <type>Ptr</type>
          <declname>last</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <param>
          <type>Ptr &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="2258" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="2258" bodyend="2263"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1af820c4962813d609bca0a94b389eab71" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>auto</type>
        <definition>auto find&lt; false, char &gt;</definition>
        <argsstring>(const char *first, const char *last, char value, const char *&amp;out) -&gt; bool</argsstring>
        <name>find&lt; false, char &gt;</name>
        <param>
          <type>const char *</type>
          <declname>first</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>last</declname>
        </param>
        <param>
          <type>char</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const char *&amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="2266" column="8" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="2266" bodyend="2271"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1ac51bc4cc7c73f12b3605eee5c2d29700" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
        </templateparamlist>
        <type>FMT_CONSTEXPR auto</type>
        <definition>FMT_CONSTEXPR auto parse_nonnegative_int</definition>
        <argsstring>(const Char *&amp;begin, const Char *end, int error_value) noexcept -&gt; int</argsstring>
        <name>parse_nonnegative_int</name>
        <param>
          <type>const Char *&amp;</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const Char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type>int</type>
          <declname>error_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="2276" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="2276" bodyend="2296"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1afd7cdd9328f0b043d3d621397e6edafb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
          <param>
            <type>typename Handler</type>
          </param>
        </templateparamlist>
        <type>FMT_CONSTEXPR auto</type>
        <definition>FMT_CONSTEXPR auto parse_align</definition>
        <argsstring>(const Char *begin, const Char *end, Handler &amp;&amp;handler) -&gt; const Char *</argsstring>
        <name>parse_align</name>
        <param>
          <type>const Char *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const Char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type>Handler &amp;&amp;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="2300" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="2300" bodyend="2337"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a00a37b07f38260f9b8e417066fd8e002" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
        </templateparamlist>
        <type>FMT_CONSTEXPR bool</type>
        <definition>FMT_CONSTEXPR bool is_name_start</definition>
        <argsstring>(Char c)</argsstring>
        <name>is_name_start</name>
        <param>
          <type>Char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="2339" column="32" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="2339" bodyend="2341"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a920a1a89c38eb38a14cff86cfae43574" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
          <param>
            <type>typename IDHandler</type>
          </param>
        </templateparamlist>
        <type>FMT_CONSTEXPR auto</type>
        <definition>FMT_CONSTEXPR auto do_parse_arg_id</definition>
        <argsstring>(const Char *begin, const Char *end, IDHandler &amp;&amp;handler) -&gt; const Char *</argsstring>
        <name>do_parse_arg_id</name>
        <param>
          <type>const Char *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const Char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type>IDHandler &amp;&amp;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="2344" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="2344" bodyend="2371"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1ac060efb49e1b5f28c95afb81e42bab63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
          <param>
            <type>typename IDHandler</type>
          </param>
        </templateparamlist>
        <type>FMT_CONSTEXPR FMT_INLINE auto</type>
        <definition>FMT_CONSTEXPR FMT_INLINE auto parse_arg_id</definition>
        <argsstring>(const Char *begin, const Char *end, IDHandler &amp;&amp;handler) -&gt; const Char *</argsstring>
        <name>parse_arg_id</name>
        <param>
          <type>const Char *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const Char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type>IDHandler &amp;&amp;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="2374" column="31" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="2374" bodyend="2380"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a77faec73155438f608a4941fe507d77c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
          <param>
            <type>typename Handler</type>
          </param>
        </templateparamlist>
        <type>FMT_CONSTEXPR auto</type>
        <definition>FMT_CONSTEXPR auto parse_width</definition>
        <argsstring>(const Char *begin, const Char *end, Handler &amp;&amp;handler) -&gt; const Char *</argsstring>
        <name>parse_width</name>
        <param>
          <type>const Char *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const Char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type>Handler &amp;&amp;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="2383" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="2383" bodyend="2414"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a45c3c961ad59bc2badc4e96c9a2848f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
          <param>
            <type>typename Handler</type>
          </param>
        </templateparamlist>
        <type>FMT_CONSTEXPR auto</type>
        <definition>FMT_CONSTEXPR auto parse_precision</definition>
        <argsstring>(const Char *begin, const Char *end, Handler &amp;&amp;handler) -&gt; const Char *</argsstring>
        <name>parse_precision</name>
        <param>
          <type>const Char *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const Char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type>Handler &amp;&amp;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="2417" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="2417" bodyend="2452"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a5396fe922be0e52d1244d53543663246" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
        </templateparamlist>
        <type>FMT_CONSTEXPR auto</type>
        <definition>FMT_CONSTEXPR auto parse_presentation_type</definition>
        <argsstring>(Char type) -&gt; presentation_type</argsstring>
        <name>parse_presentation_type</name>
        <param>
          <type>Char</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="2455" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="2455" bodyend="2494"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a08ecf40311aefa39e7687042008ad9f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
          <param>
            <type>typename SpecHandler</type>
          </param>
        </templateparamlist>
        <type>FMT_CONSTEXPR FMT_INLINE auto</type>
        <definition>FMT_CONSTEXPR FMT_INLINE auto parse_format_specs</definition>
        <argsstring>(const Char *begin, const Char *end, SpecHandler &amp;&amp;handler) -&gt; const Char *</argsstring>
        <name>parse_format_specs</name>
        <param>
          <type>const Char *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const Char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type>SpecHandler &amp;&amp;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="2499" column="31" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="2499" bodyend="2569"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a20ef5c2b6156c3892c678d6f28c7c015" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
          <param>
            <type>typename Handler</type>
          </param>
        </templateparamlist>
        <type>FMT_CONSTEXPR auto</type>
        <definition>FMT_CONSTEXPR auto parse_replacement_field</definition>
        <argsstring>(const Char *begin, const Char *end, Handler &amp;&amp;handler) -&gt; const Char *</argsstring>
        <name>parse_replacement_field</name>
        <param>
          <type>const Char *</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const Char *</type>
          <declname>end</declname>
        </param>
        <param>
          <type>Handler &amp;&amp;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="2572" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="2572" bodyend="2609"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a6b409b31dce81863f7fd62b664724951" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>IS_CONSTEXPR</declname>
            <defname>IS_CONSTEXPR</defname>
          </param>
          <param>
            <type>typename Char</type>
          </param>
          <param>
            <type>typename Handler</type>
          </param>
        </templateparamlist>
        <type>FMT_CONSTEXPR FMT_INLINE void</type>
        <definition>FMT_CONSTEXPR FMT_INLINE void parse_format_string</definition>
        <argsstring>(basic_string_view&lt; Char &gt; format_str, Handler &amp;&amp;handler)</argsstring>
        <name>parse_format_string</name>
        <param>
          <type><ref refid="classbasic__string__view" kindref="compound">basic_string_view</ref>&lt; Char &gt;</type>
          <declname>format_str</declname>
        </param>
        <param>
          <type>Handler &amp;&amp;</type>
          <declname>handler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="2612" column="31" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="2612" bodyend="2662"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a231d5356fa71cf67e1383f18affdb95e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename ParseContext</type>
          </param>
        </templateparamlist>
        <type>FMT_CONSTEXPR auto</type>
        <definition>FMT_CONSTEXPR auto parse_format_specs</definition>
        <argsstring>(ParseContext &amp;ctx) -&gt; decltype(ctx.begin())</argsstring>
        <name>parse_format_specs</name>
        <param>
          <type>ParseContext &amp;</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="2665" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="2665" bodyend="2676"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a87452f7297edb4e77df49d428fab96e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ErrorHandler</type>
          </param>
        </templateparamlist>
        <type>FMT_CONSTEXPR void</type>
        <definition>FMT_CONSTEXPR void check_int_type_spec</definition>
        <argsstring>(presentation_type type, ErrorHandler &amp;&amp;eh)</argsstring>
        <name>check_int_type_spec</name>
        <param>
          <type>presentation_type</type>
          <declname>type</declname>
        </param>
        <param>
          <type>ErrorHandler &amp;&amp;</type>
          <declname>eh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="2709" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="2709" bodyend="2713"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a2ee3e169ebb4dd11af57bac8fb7d3e12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
          <param>
            <type>typename ErrorHandler</type>
            <defval><ref refid="structerror__handler" kindref="compound">error_handler</ref></defval>
          </param>
        </templateparamlist>
        <type>FMT_CONSTEXPR auto</type>
        <definition>FMT_CONSTEXPR auto check_char_specs</definition>
        <argsstring>(const basic_format_specs&lt; Char &gt; &amp;specs, ErrorHandler &amp;&amp;eh={}) -&gt; bool</argsstring>
        <name>check_char_specs</name>
        <param>
          <type>const <ref refid="structbasic__format__specs" kindref="compound">basic_format_specs</ref>&lt; Char &gt; &amp;</type>
          <declname>specs</declname>
        </param>
        <param>
          <type>ErrorHandler &amp;&amp;</type>
          <declname>eh</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="2717" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="2717" bodyend="2727"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1af402a8945eb3b523a09d4ddb1a080a45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ErrorHandler</type>
            <defval><ref refid="structerror__handler" kindref="compound">error_handler</ref></defval>
          </param>
          <param>
            <type>typename Char</type>
          </param>
        </templateparamlist>
        <type>FMT_CONSTEXPR auto</type>
        <definition>FMT_CONSTEXPR auto parse_float_type_spec</definition>
        <argsstring>(const basic_format_specs&lt; Char &gt; &amp;specs, ErrorHandler &amp;&amp;eh={}) -&gt; float_specs</argsstring>
        <name>parse_float_type_spec</name>
        <param>
          <type>const <ref refid="structbasic__format__specs" kindref="compound">basic_format_specs</ref>&lt; Char &gt; &amp;</type>
          <declname>specs</declname>
        </param>
        <param>
          <type>ErrorHandler &amp;&amp;</type>
          <declname>eh</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="2749" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="2749" bodyend="2790"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1aab044179d86d2046d8277ee07a0e3837" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ErrorHandler</type>
            <defval><ref refid="structerror__handler" kindref="compound">error_handler</ref></defval>
          </param>
        </templateparamlist>
        <type>FMT_CONSTEXPR auto</type>
        <definition>FMT_CONSTEXPR auto check_cstring_type_spec</definition>
        <argsstring>(presentation_type type, ErrorHandler &amp;&amp;eh={}) -&gt; bool</argsstring>
        <name>check_cstring_type_spec</name>
        <param>
          <type>presentation_type</type>
          <declname>type</declname>
        </param>
        <param>
          <type>ErrorHandler &amp;&amp;</type>
          <declname>eh</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="2793" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="2793" bodyend="2799"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a4e043de59a6d4d807f45ceecd6cc9ccd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ErrorHandler</type>
            <defval><ref refid="structerror__handler" kindref="compound">error_handler</ref></defval>
          </param>
        </templateparamlist>
        <type>FMT_CONSTEXPR void</type>
        <definition>FMT_CONSTEXPR void check_string_type_spec</definition>
        <argsstring>(presentation_type type, ErrorHandler &amp;&amp;eh={})</argsstring>
        <name>check_string_type_spec</name>
        <param>
          <type>presentation_type</type>
          <declname>type</declname>
        </param>
        <param>
          <type>ErrorHandler &amp;&amp;</type>
          <declname>eh</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="2802" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="2802" bodyend="2806"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a769653db0f7b114092edb39237877070" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ErrorHandler</type>
          </param>
        </templateparamlist>
        <type>FMT_CONSTEXPR void</type>
        <definition>FMT_CONSTEXPR void check_pointer_type_spec</definition>
        <argsstring>(presentation_type type, ErrorHandler &amp;&amp;eh)</argsstring>
        <name>check_pointer_type_spec</name>
        <param>
          <type>presentation_type</type>
          <declname>type</declname>
        </param>
        <param>
          <type>ErrorHandler &amp;&amp;</type>
          <declname>eh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="2809" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="2809" bodyend="2813"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1afc7c992232fc1487f47dd2cf18fa997d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>typename Char</type>
          </param>
        </templateparamlist>
        <type>FMT_CONSTEXPR auto</type>
        <definition>FMT_CONSTEXPR auto get_arg_index_by_name</definition>
        <argsstring>(basic_string_view&lt; Char &gt; name) -&gt; int</argsstring>
        <name>get_arg_index_by_name</name>
        <param>
          <type><ref refid="classbasic__string__view" kindref="compound">basic_string_view</ref>&lt; Char &gt;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="2881" column="20" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="2881" bodyend="2888"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a9f9d96e25e444d96cf019afa1c1eb518" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Char</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vformat_to</definition>
        <argsstring>(buffer&lt; Char &gt; &amp;buf, basic_string_view&lt; Char &gt; fmt, basic_format_args&lt; FMT_BUFFER_CONTEXT(type_identity_t&lt; Char &gt;)&gt; args, locale_ref loc={})</argsstring>
        <name>vformat_to</name>
        <param>
          <type><ref refid="classbuffer" kindref="compound">buffer</ref>&lt; Char &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="classbasic__string__view" kindref="compound">basic_string_view</ref>&lt; Char &gt;</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type><ref refid="classbasic__format__args" kindref="compound">basic_format_args</ref>&lt; FMT_BUFFER_CONTEXT(type_identity_t&lt; Char &gt;)&gt;</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="classlocale__ref" kindref="compound">locale_ref</ref></type>
          <declname>loc</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="2952" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/format.h" bodystart="2909" bodyend="2989" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" declline="2952" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a4e0222b1158d1d1997662e32d985d72f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>FMT_API void</type>
        <definition>void vprint_mojibake</definition>
        <argsstring>(std::FILE *, string_view, format_args)</argsstring>
        <name>vprint_mojibake</name>
        <param>
          <type>std::FILE *</type>
        </param>
        <param>
          <type><ref refid="classbasic__string__view" kindref="compound">string_view</ref></type>
        </param>
        <param>
          <type><ref refid="classbasic__format__args" kindref="compound">format_args</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="2959" column="13" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="2959" bodyend="2959" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" declline="2957" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a495f03845608df33e628ac790e76f713" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto runtime</definition>
        <argsstring>(const S &amp;s) -&gt; basic_runtime&lt; char_t&lt; S &gt; &gt;</argsstring>
        <name>runtime</name>
        <param>
          <type>const S &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Creates a runtime format string.</para>
<para>Example**::</para>
<para>Check format string at runtime instead of compile-time. fmt::print(fmt::runtime(&quot;{:d}&quot;), &quot;I am not a number&quot;); \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="3098" column="18" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="3098" bodyend="3100"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1af648791a5d0b00e0852dfdc69c929641" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FMT_API auto</type>
        <definition>FMT_API auto vformat</definition>
        <argsstring>(string_view fmt, format_args args) -&gt; std::string</argsstring>
        <name>vformat</name>
        <param>
          <type><ref refid="classbasic__string__view" kindref="compound">string_view</ref></type>
          <declname>fmt</declname>
        </param>
        <param>
          <type><ref refid="classbasic__format__args" kindref="compound">format_args</ref></type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="3103" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/format-inl.h" bodystart="2584" bodyend="2590" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" declline="3103" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a040af707f7f42f401696d0e7263d07cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>FMT_NODISCARD FMT_INLINE auto</type>
        <definition>FMT_NODISCARD FMT_INLINE auto format</definition>
        <argsstring>(format_string&lt; T... &gt; fmt, T &amp;&amp;... args) -&gt; std::string</argsstring>
        <name>format</name>
        <param>
          <type><ref refid="classbasic__format__string" kindref="compound">format_string</ref>&lt; T... &gt;</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>T &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Formats <computeroutput>args</computeroutput> according to specifications in <computeroutput>fmt</computeroutput> and returns the result as a string.</para>
<para>Example**::</para>
<para>#include &lt;fmt/core.h&gt; std::string message = fmt::format(&quot;The answer is {}.&quot;, 42); \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="3117" column="31" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="3117" bodyend="3120"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1aa91ecf3a785a511067ba5a78adb0cec1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIt</type>
          </param>
          <param>
            <type>FMT_ENABLE_IF(detail::is_output_iterator&lt; OutputIt, char &gt;::<ref refid="classvalue" kindref="compound">value</ref>)</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto vformat_to</definition>
        <argsstring>(OutputIt out, string_view fmt, format_args args) -&gt; OutputIt</argsstring>
        <name>vformat_to</name>
        <param>
          <type>OutputIt</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classbasic__string__view" kindref="compound">string_view</ref></type>
          <declname>fmt</declname>
        </param>
        <param>
          <type><ref refid="classbasic__format__args" kindref="compound">format_args</ref></type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Formats a string and writes the output to <computeroutput>out</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="3125" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="3125" bodyend="3130"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1acccb7c60aa962b39ef947435def89471" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIt</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>FMT_ENABLE_IF(detail::is_output_iterator&lt; OutputIt, char &gt;::<ref refid="classvalue" kindref="compound">value</ref>)</type>
          </param>
        </templateparamlist>
        <type>FMT_INLINE auto</type>
        <definition>FMT_INLINE auto format_to</definition>
        <argsstring>(OutputIt out, format_string&lt; T... &gt; fmt, T &amp;&amp;... args) -&gt; OutputIt</argsstring>
        <name>format_to</name>
        <param>
          <type>OutputIt</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="classbasic__format__string" kindref="compound">format_string</ref>&lt; T... &gt;</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>T &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Formats <computeroutput>args</computeroutput> according to specifications in <computeroutput>fmt</computeroutput>, writes the result to the output iterator <computeroutput>out</computeroutput> and returns the iterator past the end of the output range. <computeroutput>format_to</computeroutput> does not append a terminating null character.</para>
<para>Example**::</para>
<para>auto out = std::vector&lt;char&gt;(); fmt::format_to(std::back_inserter(out), &quot;{}&quot;, 42); \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="3146" column="17" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="3146" bodyend="3149"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a45a3c74fd5764c3be13025cacbcb02b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIt</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>FMT_ENABLE_IF(detail::is_output_iterator&lt; OutputIt, char &gt;::<ref refid="classvalue" kindref="compound">value</ref>)</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto vformat_to_n</definition>
        <argsstring>(OutputIt out, size_t n, string_view fmt, format_args args) -&gt; format_to_n_result&lt; OutputIt &gt;</argsstring>
        <name>vformat_to_n</name>
        <param>
          <type>OutputIt</type>
          <declname>out</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classbasic__string__view" kindref="compound">string_view</ref></type>
          <declname>fmt</declname>
        </param>
        <param>
          <type><ref refid="classbasic__format__args" kindref="compound">format_args</ref></type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="3160" column="6" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="3160" bodyend="3166"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1ab8774a69f055bd85de86ff0e85b2e22f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OutputIt</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>FMT_ENABLE_IF(detail::is_output_iterator&lt; OutputIt, char &gt;::<ref refid="classvalue" kindref="compound">value</ref>)</type>
          </param>
        </templateparamlist>
        <type>FMT_INLINE auto</type>
        <definition>FMT_INLINE auto format_to_n</definition>
        <argsstring>(OutputIt out, size_t n, format_string&lt; T... &gt; fmt, T &amp;&amp;... args) -&gt; format_to_n_result&lt; OutputIt &gt;</argsstring>
        <name>format_to_n</name>
        <param>
          <type>OutputIt</type>
          <declname>out</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classbasic__format__string" kindref="compound">format_string</ref>&lt; T... &gt;</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>T &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Formats <computeroutput>args</computeroutput> according to specifications in <computeroutput>fmt</computeroutput>, writes up to <computeroutput>n</computeroutput> characters of the result to the output iterator <computeroutput>out</computeroutput> and returns the total (not truncated) output size and the iterator past the end of the output range. <computeroutput>format_to_n</computeroutput> does not append a terminating null character. \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="3178" column="17" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="3178" bodyend="3181"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a0f9a011c5e8bf359e75651cbdc411941" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>FMT_NODISCARD FMT_INLINE auto</type>
        <definition>FMT_NODISCARD FMT_INLINE auto formatted_size</definition>
        <argsstring>(format_string&lt; T... &gt; fmt, T &amp;&amp;... args) -&gt; size_t</argsstring>
        <name>formatted_size</name>
        <param>
          <type><ref refid="classbasic__format__string" kindref="compound">format_string</ref>&lt; T... &gt;</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>T &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of chars in the output of <computeroutput>format(fmt, args...)</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="3185" column="31" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="3185" bodyend="3190"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a429465d7a760d1cdc8380415d815d41d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FMT_API void</type>
        <definition>FMT_API void vprint</definition>
        <argsstring>(string_view fmt, format_args args)</argsstring>
        <name>vprint</name>
        <param>
          <type><ref refid="classbasic__string__view" kindref="compound">string_view</ref></type>
          <declname>fmt</declname>
        </param>
        <param>
          <type><ref refid="classbasic__format__args" kindref="compound">format_args</ref></type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="3192" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/format-inl.h" bodystart="2637" bodyend="2639" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" declline="3192" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a9ecd9e6c1688eb3aa54cdf85a873103c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FMT_API void</type>
        <definition>FMT_API void vprint</definition>
        <argsstring>(std::FILE *f, string_view fmt, format_args args)</argsstring>
        <name>vprint</name>
        <param>
          <type>std::FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classbasic__string__view" kindref="compound">string_view</ref></type>
          <declname>fmt</declname>
        </param>
        <param>
          <type><ref refid="classbasic__format__args" kindref="compound">format_args</ref></type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="3193" column="14" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/format-inl.h" bodystart="2620" bodyend="2624" declfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" declline="3193" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a59025bfaf390e425b4e274c966a77557" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>FMT_INLINE void</type>
        <definition>FMT_INLINE void print</definition>
        <argsstring>(format_string&lt; T... &gt; fmt, T &amp;&amp;... args)</argsstring>
        <name>print</name>
        <param>
          <type><ref refid="classbasic__format__string" kindref="compound">format_string</ref>&lt; T... &gt;</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>T &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Formats <computeroutput>args</computeroutput> according to specifications in <computeroutput>fmt</computeroutput> and writes the output to <computeroutput>stdout</computeroutput>.</para>
<para>Example**::</para>
<para>fmt::print(&quot;Elapsed time: {0:.2f} seconds&quot;, 1.23); \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="3206" column="17" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="3206" bodyend="3210"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1aa9847417b16aed6980a2e595ba6fe933" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>FMT_INLINE void</type>
        <definition>FMT_INLINE void print</definition>
        <argsstring>(std::FILE *f, format_string&lt; T... &gt; fmt, T &amp;&amp;... args)</argsstring>
        <name>print</name>
        <param>
          <type>std::FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classbasic__format__string" kindref="compound">format_string</ref>&lt; T... &gt;</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>T &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>\rst Formats <computeroutput>args</computeroutput> according to specifications in <computeroutput>fmt</computeroutput> and writes the output to the file <computeroutput>f</computeroutput>.</para>
<para>Example**::</para>
<para>fmt::print(stderr, &quot;Don&apos;t {}!&quot;, &quot;panic&quot;); \endrst </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" line="3223" column="17" bodyfile="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h" bodystart="3223" bodyend="3227"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Formatting<sp/>library<sp/>for<sp/>C++<sp/>-<sp/>the<sp/>core<sp/>API<sp/>for<sp/>char/UTF-8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2012<sp/>-<sp/>present,<sp/>Victor<sp/>Zverovich</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>the<sp/>license<sp/>information<sp/>refer<sp/>to<sp/>format.h.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_CORE_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_CORE_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>std::byte</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::FILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>fmt<sp/>library<sp/>version<sp/>in<sp/>the<sp/>form<sp/>major<sp/>*<sp/>10000<sp/>+<sp/>minor<sp/>*<sp/>100<sp/>+<sp/>patch.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_VERSION<sp/>80101</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)<sp/>&amp;&amp;<sp/>!defined(__ibmxl__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_CLANG_VERSION<sp/>(__clang_major__<sp/>*<sp/>100<sp/>+<sp/>__clang_minor__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_CLANG_VERSION<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUC__)<sp/>&amp;&amp;<sp/>!defined(__clang__)<sp/>&amp;&amp;<sp/>!defined(__INTEL_COMPILER)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>!defined(__NVCOMPILER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_GCC_VERSION<sp/>(__GNUC__<sp/>*<sp/>100<sp/>+<sp/>__GNUC_MINOR__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_GCC_VERSION<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_GCC_PRAGMA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Workaround<sp/>_Pragma<sp/>bug<sp/>https://gcc.gnu.org/bugzilla/show_bug.cgi?id=59884.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>FMT_GCC_VERSION<sp/>&gt;=<sp/>504</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FMT_GCC_PRAGMA(arg)<sp/>_Pragma(arg)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FMT_GCC_PRAGMA(arg)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__ICL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_ICC_VERSION<sp/>__ICL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__INTEL_COMPILER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_ICC_VERSION<sp/>__INTEL_COMPILER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_ICC_VERSION<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__NVCC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_NVCC<sp/>__NVCC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_NVCC<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_MSC_VER<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_MSC_WARNING(...)<sp/>__pragma(warning(__VA_ARGS__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_MSC_VER<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_MSC_WARNING(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__has_feature</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_HAS_FEATURE(x)<sp/>__has_feature(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_HAS_FEATURE(x)<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__has_include)<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(!defined(__INTELLISENSE__)<sp/>||<sp/>FMT_MSC_VER<sp/>&gt;<sp/>1900)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(!FMT_ICC_VERSION<sp/>||<sp/>FMT_ICC_VERSION<sp/>&gt;=<sp/>1600)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_HAS_INCLUDE(x)<sp/>__has_include(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_HAS_INCLUDE(x)<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__has_cpp_attribute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_HAS_CPP_ATTRIBUTE(x)<sp/>__has_cpp_attribute(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_HAS_CPP_ATTRIBUTE(x)<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSVC_LANG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_CPLUSPLUS<sp/>_MSVC_LANG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_CPLUSPLUS<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_HAS_CPP14_ATTRIBUTE(attribute)<sp/>\</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor"><sp/><sp/>(FMT_CPLUSPLUS<sp/>&gt;=<sp/>201402L<sp/>&amp;&amp;<sp/>FMT_HAS_CPP_ATTRIBUTE(attribute))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_HAS_CPP17_ATTRIBUTE(attribute)<sp/>\</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"><sp/><sp/>(FMT_CPLUSPLUS<sp/>&gt;=<sp/>201703L<sp/>&amp;&amp;<sp/>FMT_HAS_CPP_ATTRIBUTE(attribute))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>relaxed<sp/>C++14<sp/>constexpr<sp/>is<sp/>supported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GCC<sp/>doesn&apos;t<sp/>allow<sp/>throw<sp/>in<sp/>constexpr<sp/>until<sp/>version<sp/>6<sp/>(bug<sp/>67371).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_USE_CONSTEXPR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_USE_CONSTEXPR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(FMT_HAS_FEATURE(cxx_relaxed_constexpr)<sp/>||<sp/>FMT_MSC_VER<sp/>&gt;=<sp/>1912<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(FMT_GCC_VERSION<sp/>&gt;=<sp/>600<sp/>&amp;&amp;<sp/>__cplusplus<sp/>&gt;=<sp/>201402L))<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!FMT_NVCC<sp/>&amp;&amp;<sp/>!FMT_ICC_VERSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_USE_CONSTEXPR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_CONSTEXPR<sp/>constexpr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_CONSTEXPR_DECL<sp/>constexpr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_CONSTEXPR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_CONSTEXPR_DECL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>((__cplusplus<sp/>&gt;=<sp/>202002L)<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(!defined(_GLIBCXX_RELEASE)<sp/>||<sp/>_GLIBCXX_RELEASE<sp/>&gt;<sp/>9))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(__cplusplus<sp/>&gt;=<sp/>201709L<sp/>&amp;&amp;<sp/>FMT_GCC_VERSION<sp/>&gt;=<sp/>1002)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_CONSTEXPR20<sp/>constexpr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_CONSTEXPR20</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>constexpr<sp/>std::char_traits&lt;&gt;::compare,length<sp/>is<sp/>supported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GLIBCXX__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>__cplusplus<sp/>&gt;=<sp/>201703L<sp/>&amp;&amp;<sp/>defined(_GLIBCXX_RELEASE)<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_GLIBCXX_RELEASE<sp/>&gt;=<sp/>7<sp/><sp/></highlight><highlight class="comment">//<sp/>GCC<sp/>7+<sp/>libstdc++<sp/>has<sp/>_GLIBCXX_RELEASE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FMT_CONSTEXPR_CHAR_TRAITS<sp/>constexpr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_LIBCPP_VERSION)<sp/>&amp;&amp;<sp/>__cplusplus<sp/>&gt;=<sp/>201703L<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="129"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_LIBCPP_VERSION<sp/>&gt;=<sp/>4000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_CONSTEXPR_CHAR_TRAITS<sp/>constexpr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>FMT_MSC_VER<sp/>&gt;=<sp/>1914<sp/>&amp;&amp;<sp/>_MSVC_LANG<sp/>&gt;=<sp/>201703L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_CONSTEXPR_CHAR_TRAITS<sp/>constexpr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_CONSTEXPR_CHAR_TRAITS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_CONSTEXPR_CHAR_TRAITS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>exceptions<sp/>are<sp/>disabled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>(defined(__GNUC__)<sp/>&amp;&amp;<sp/>!defined(__EXCEPTIONS))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>FMT_MSC_VER<sp/>&amp;&amp;<sp/>!_HAS_EXCEPTIONS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FMT_EXCEPTIONS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FMT_EXCEPTIONS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Define<sp/>FMT_USE_NOEXCEPT<sp/>to<sp/>make<sp/>fmt<sp/>use<sp/>noexcept<sp/>(C++11<sp/>feature).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_USE_NOEXCEPT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_USE_NOEXCEPT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_USE_NOEXCEPT<sp/>||<sp/>FMT_HAS_FEATURE(cxx_noexcept)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="154"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>FMT_GCC_VERSION<sp/>&gt;=<sp/>408<sp/>||<sp/>FMT_MSC_VER<sp/>&gt;=<sp/>1900</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_DETECTED_NOEXCEPT<sp/>noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_HAS_CXX11_NOEXCEPT<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_DETECTED_NOEXCEPT<sp/>throw()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_HAS_CXX11_NOEXCEPT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_NOEXCEPT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>FMT_EXCEPTIONS<sp/>||<sp/>FMT_HAS_CXX11_NOEXCEPT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FMT_NOEXCEPT<sp/>FMT_DETECTED_NOEXCEPT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FMT_NOEXCEPT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[[noreturn]]<sp/>is<sp/>disabled<sp/>on<sp/>MSVC<sp/>and<sp/>NVCC<sp/>because<sp/>of<sp/>bogus<sp/>unreachable<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">//<sp/>warnings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_EXCEPTIONS<sp/>&amp;&amp;<sp/>FMT_HAS_CPP_ATTRIBUTE(noreturn)<sp/>&amp;&amp;<sp/>!FMT_MSC_VER<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="173"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>!FMT_NVCC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_NORETURN<sp/>[[noreturn]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_NORETURN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__cplusplus<sp/>==<sp/>201103L<sp/>||<sp/>__cplusplus<sp/>==<sp/>201402L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(__INTEL_COMPILER)<sp/>||<sp/>defined(__PGI)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FMT_FALLTHROUGH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>elif<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FMT_FALLTHROUGH<sp/>[[clang::fallthrough]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>elif<sp/>FMT_GCC_VERSION<sp/>&gt;=<sp/>700<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="185"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(!defined(__EDG_VERSION__)<sp/>||<sp/>__EDG_VERSION__<sp/>&gt;=<sp/>520)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FMT_FALLTHROUGH<sp/>[[gnu::fallthrough]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FMT_FALLTHROUGH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>FMT_HAS_CPP17_ATTRIBUTE(fallthrough)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_FALLTHROUGH<sp/>[[fallthrough]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_FALLTHROUGH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_NODISCARD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>FMT_HAS_CPP17_ATTRIBUTE(nodiscard)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FMT_NODISCARD<sp/>[[nodiscard]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FMT_NODISCARD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_USE_FLOAT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_USE_FLOAT<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_USE_DOUBLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_USE_DOUBLE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_USE_LONG_DOUBLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_USE_LONG_DOUBLE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_INLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>FMT_GCC_VERSION<sp/>||<sp/>FMT_CLANG_VERSION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FMT_INLINE<sp/>inline<sp/>__attribute__((always_inline))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FMT_INLINE<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_DEPRECATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>FMT_HAS_CPP14_ATTRIBUTE(deprecated)<sp/>||<sp/>FMT_MSC_VER<sp/>&gt;=<sp/>1900</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FMT_DEPRECATED<sp/>[[deprecated]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>if<sp/>(defined(__GNUC__)<sp/>&amp;&amp;<sp/>!defined(__LCC__))<sp/>||<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>FMT_DEPRECATED<sp/>__attribute__((deprecated))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>elif<sp/>FMT_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>FMT_DEPRECATED<sp/>__declspec(deprecated)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>FMT_DEPRECATED<sp/></highlight><highlight class="comment">/*<sp/>deprecated<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_BEGIN_NAMESPACE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_BEGIN_NAMESPACE<sp/>\</highlight></codeline>
<codeline lineno="238"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>namespace<sp/>fmt<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="239"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>inline<sp/>namespace<sp/>v8<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_END_NAMESPACE<sp/>\</highlight></codeline>
<codeline lineno="241"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="242"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_MODULE_EXPORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_MODULE_EXPORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_MODULE_EXPORT_BEGIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_MODULE_EXPORT_END</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_BEGIN_DETAIL_NAMESPACE<sp/>namespace<sp/>detail<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_END_DETAIL_NAMESPACE<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(FMT_HEADER_ONLY)<sp/>&amp;&amp;<sp/>defined(_WIN32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_CLASS_API<sp/>FMT_MSC_WARNING(suppress<sp/>:<sp/>4275)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>ifdef<sp/>FMT_EXPORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FMT_API<sp/>__declspec(dllexport)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>elif<sp/>defined(FMT_SHARED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FMT_API<sp/>__declspec(dllimport)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_CLASS_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(FMT_EXPORT)<sp/>||<sp/>defined(FMT_SHARED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>if<sp/>defined(__GNUC__)<sp/>||<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>FMT_API<sp/>__attribute__((visibility(&quot;default&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="comment">//<sp/>libc++<sp/>supports<sp/>string_view<sp/>in<sp/>pre-c++17.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(FMT_HAS_INCLUDE(&lt;string_view&gt;)<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="274"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(__cplusplus<sp/>&gt;<sp/>201402L<sp/>||<sp/>defined(_LIBCPP_VERSION)))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="275"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(defined(_MSVC_LANG)<sp/>&amp;&amp;<sp/>_MSVC_LANG<sp/>&gt;<sp/>201402L<sp/>&amp;&amp;<sp/>_MSC_VER<sp/>&gt;=<sp/>1910)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;string_view&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_USE_STRING_VIEW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>FMT_HAS_INCLUDE(&quot;experimental/string_view&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>__cplusplus<sp/>&gt;=<sp/>201402L</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&lt;experimental/string_view&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_USE_EXPERIMENTAL_STRING_VIEW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_UNICODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_UNICODE<sp/>!FMT_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_CONSTEVAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>((FMT_GCC_VERSION<sp/>&gt;=<sp/>1000<sp/>||<sp/>FMT_CLANG_VERSION<sp/>&gt;=<sp/>1101)<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="289"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__cplusplus<sp/>&gt;<sp/>201703L<sp/>&amp;&amp;<sp/>!defined(__apple_build_version__))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="290"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(defined(__cpp_consteval)<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="291"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!FMT_MSC_VER<sp/>||<sp/>_MSC_FULL_VER<sp/>&gt;=<sp/>193030704))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="comment">//<sp/>consteval<sp/>is<sp/>broken<sp/>in<sp/>MSVC<sp/>before<sp/>VS2022<sp/>and<sp/>Apple<sp/>clang<sp/>13.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FMT_CONSTEVAL<sp/>consteval</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FMT_HAS_CONSTEVAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FMT_CONSTEVAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_USE_NONTYPE_TEMPLATE_PARAMETERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(__cpp_nontype_template_args)<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="302"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((FMT_GCC_VERSION<sp/>&gt;=<sp/>903<sp/>&amp;&amp;<sp/>__cplusplus<sp/>&gt;=<sp/>201709L)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="303"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__cpp_nontype_template_args<sp/>&gt;=<sp/>201911L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FMT_USE_NONTYPE_TEMPLATE_PARAMETERS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FMT_USE_NONTYPE_TEMPLATE_PARAMETERS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Enable<sp/>minimal<sp/>optimizations<sp/>for<sp/>more<sp/>compact<sp/>code<sp/>in<sp/>debug<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal">FMT_GCC_PRAGMA(</highlight><highlight class="stringliteral">&quot;GCC<sp/>push_options&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__OPTIMIZE__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal">FMT_GCC_PRAGMA(</highlight><highlight class="stringliteral">&quot;GCC<sp/>optimize(\&quot;Og\&quot;)&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal">FMT_BEGIN_NAMESPACE</highlight></codeline>
<codeline lineno="317"><highlight class="normal">FMT_MODULE_EXPORT_BEGIN</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implementations<sp/>of<sp/>enable_if_t<sp/>and<sp/>other<sp/>metafunctions<sp/>for<sp/>older<sp/>systems.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>enable_if_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;B,<sp/>T&gt;::type;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F&gt;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>conditional_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::conditional&lt;B,<sp/>T,<sp/>F&gt;::type;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>B&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>bool_constant<sp/>=<sp/>std::integral_constant&lt;bool,<sp/>B&gt;;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>remove_reference_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_reference&lt;T&gt;::type;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>remove_const_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_const&lt;T&gt;::type;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>remove_cvref_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_cv&lt;remove_reference_t&lt;T&gt;&gt;::type;</highlight></codeline>
<codeline lineno="331" refid="structtype__identity" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtype__identity" kindref="compound">type_identity</ref><sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>T;<sp/>};</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type_identity_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>type_identity&lt;T&gt;::type;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334" refid="structmonostate" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmonostate" kindref="compound">monostate</ref><sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="structmonostate" kindref="compound">monostate</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="336"><highlight class="normal">};</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>enable_if<sp/>helper<sp/>to<sp/>be<sp/>used<sp/>in<sp/>template<sp/>parameters<sp/>which<sp/>results<sp/>in<sp/>much</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="comment">//<sp/>shorter<sp/>symbols:<sp/>https://godbolt.org/z/sWw4vP.<sp/>Extra<sp/>parentheses<sp/>are<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>workaround<sp/>a<sp/>bug<sp/>in<sp/>MSVC<sp/>2019<sp/>(see<sp/>#1140<sp/>and<sp/>#1186).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FMT_DOC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_ENABLE_IF(...)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_ENABLE_IF(...)<sp/>enable_if_t&lt;(__VA_ARGS__),<sp/>int&gt;<sp/>=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal">FMT_BEGIN_DETAIL_NAMESPACE</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Suppress<sp/>&quot;unused<sp/>variable&quot;<sp/>warnings<sp/>with<sp/>the<sp/>method<sp/>described<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://herbsutter.com/2009/10/18/mailbag-shutting-up-compiler-warnings/.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(void)var<sp/>does<sp/>not<sp/>work<sp/>on<sp/>many<sp/>Intel<sp/>compilers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>T&gt;<sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ignore_unused(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;...)<sp/>{}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>is_constant_evaluated(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>default_value<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_NOEXCEPT<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cpp_lib_is_constant_evaluated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>ignore_unused(default_value);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::is_constant_evaluated();</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>default_value;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>function<sp/>to<sp/>suppress<sp/>&quot;conditional<sp/>expression<sp/>is<sp/>constant&quot;<sp/>warnings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>const_check(T<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>-&gt;<sp/>T<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal">FMT_NORETURN<sp/>FMT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>assert_fail(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FMT_ASSERT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>ifdef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FMT_ASSERT<sp/>is<sp/>not<sp/>empty<sp/>to<sp/>avoid<sp/>-Werror=empty-body.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FMT_ASSERT(condition,<sp/>message)<sp/>\</highlight></codeline>
<codeline lineno="376"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>::fmt::detail::ignore_unused((condition),<sp/>(message))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>FMT_ASSERT(condition,<sp/>message)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="379"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((condition)<sp/></highlight><highlight class="comment">/*<sp/>void()<sp/>fails<sp/>with<sp/>-Winvalid-constexpr<sp/>on<sp/>clang<sp/>4.0.1<sp/>*/</highlight><highlight class="preprocessor"><sp/>\</highlight></codeline>
<codeline lineno="380"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>(void)0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="381"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>::fmt::detail::assert_fail(__FILE__,<sp/>__LINE__,<sp/>(message)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cpp_lib_byte</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal"><sp/>=<sp/><ref refid="group__gtx__raw__data_1gacd7fe1f2ad60a57f7d7ad4f1e6836efd" kindref="member">std::byte</ref>;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>byte<sp/>:<sp/>unsigned<sp/>char<sp/>{};</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(FMT_USE_STRING_VIEW)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structstd__string__view" kindref="compound">std_string_view</ref><sp/>=<sp/>std::basic_string_view&lt;Char&gt;;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(FMT_USE_EXPERIMENTAL_STRING_VIEW)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structstd__string__view" kindref="compound">std_string_view</ref><sp/>=<sp/>std::experimental::basic_string_view&lt;Char&gt;;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397" refid="structstd__string__view" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstd__string__view" kindref="compound">std_string_view</ref><sp/>{};</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FMT_USE_INT128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Do<sp/>nothing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__SIZEOF_INT128__)<sp/>&amp;&amp;<sp/>!FMT_NVCC<sp/>&amp;&amp;<sp/>\</highlight></codeline>
<codeline lineno="403"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>!(FMT_CLANG_VERSION<sp/>&amp;&amp;<sp/>FMT_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_USE_INT128<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>int128_t<sp/>=<sp/>__int128_t;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>uint128_t<sp/>=<sp/>__uint128_t;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>convert_for_visit(T<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>-&gt;<sp/>T<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="409"><highlight class="normal">}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>FMT_USE_INT128<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!FMT_USE_INT128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>int128_t<sp/>{};</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>uint128_t<sp/>{};</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reduce<sp/>template<sp/>instantiations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>convert_for_visit(T)<sp/>-&gt;<sp/><ref refid="structmonostate" kindref="compound">monostate</ref><sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="419"><highlight class="normal">}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Casts<sp/>a<sp/>nonnegative<sp/>integer<sp/>to<sp/>unsigned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Int&gt;</highlight></codeline>
<codeline lineno="424"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>to_unsigned(Int<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>-&gt;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::make_unsigned&lt;Int&gt;::type<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>FMT_ASSERT(<ref refid="classvalue" kindref="compound">value</ref><sp/>&gt;=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;negative<sp/>value&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">typename<sp/>std::make_unsigned&lt;Int&gt;::type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal">FMT_MSC_WARNING(suppress<sp/>:<sp/>4566)<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>micro[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\u00B5&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>is_utf8()<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>buggy<sp/>sign<sp/>extensions<sp/>in<sp/>MSVC&apos;s<sp/>constant<sp/>evaluation<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>https://developercommunity.visualstudio.com/t/C-difference-in-behavior-for-unsigned/1233612</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>uchar<sp/>=<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FMT_UNICODE<sp/>||<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(micro)<sp/>==<sp/>3<sp/>&amp;&amp;<sp/>uchar(micro[0])<sp/>==<sp/>0xC2<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uchar(micro[1])<sp/>==<sp/>0xB5);</highlight></codeline>
<codeline lineno="438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="439"><highlight class="normal">FMT_END_DETAIL_NAMESPACE</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="448" refid="classbasic__string__view" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbasic__string__view" kindref="compound">basic_string_view</ref><sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>data_;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size_;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>value_type<sp/>=<sp/>Char;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>iterator<sp/>=<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view</ref>()<sp/>FMT_NOEXCEPT<sp/>:<sp/>data_(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">),<sp/>size_(0)<sp/>{}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="460" refid="classbasic__string__view_1a034a8a79389ecc31954bdf773c680de7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="classbasic__string__view_1a034a8a79389ecc31954bdf773c680de7" kindref="member">basic_string_view</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>s,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count)<sp/>FMT_NOEXCEPT</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>data_(s),</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_(count)<sp/>{}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR_CHAR_TRAITS</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>FMT_INLINE</highlight></codeline>
<codeline lineno="472" refid="classbasic__string__view_1a961254412253f97e1273cdaacb1af1a3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classbasic__string__view_1a961254412253f97e1273cdaacb1af1a3" kindref="member">basic_string_view</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>s)</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>data_(s),</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_(detail::const_check(std::is_same&lt;Char,<sp/>char&gt;::<ref refid="classvalue" kindref="compound">value</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!detail::is_constant_evaluated(true))</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>std::strlen(reinterpret_cast&lt;const<sp/>char*&gt;(s))</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>std::char_traits&lt;Char&gt;::length(s))<sp/>{}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Alloc&gt;</highlight></codeline>
<codeline lineno="481" refid="classbasic__string__view_1a1e4a7e97cbd0ebcd9ca924714d33319c" refkind="member"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/><ref refid="classbasic__string__view_1a1e4a7e97cbd0ebcd9ca924714d33319c" kindref="member">basic_string_view</ref>(</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::basic_string&lt;Char,<sp/>Traits,<sp/>Alloc&gt;&amp;<sp/>s)<sp/>FMT_NOEXCEPT</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>data_(s.data()),</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_(s.size())<sp/>{}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S,<sp/>FMT_ENABLE_IF(std::is_same&lt;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S,<sp/>detail::std_string_view&lt;Char&gt;&gt;::<ref refid="classvalue" kindref="compound">value</ref>)&gt;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view</ref>(S<sp/>s)<sp/>FMT_NOEXCEPT<sp/>:<sp/>data_(s.data()),</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_(s.size())<sp/>{}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="492" refid="classbasic__string__view_1a412831997be4db05ecb111fe51792be1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classbasic__string__view_1a412831997be4db05ecb111fe51792be1" kindref="member">data</ref>()<sp/>const<sp/>FMT_NOEXCEPT<sp/>-&gt;<sp/>const<sp/>Char*<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_;<sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="495" refid="classbasic__string__view_1afdfceff7bfe9fdb7faf4f8bd35c3fc2c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classbasic__string__view_1afdfceff7bfe9fdb7faf4f8bd35c3fc2c" kindref="member">size</ref>()<sp/>const<sp/>FMT_NOEXCEPT<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size_;<sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>begin()<sp/>const<sp/>FMT_NOEXCEPT<sp/>-&gt;<sp/>iterator<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_;<sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end()<sp/>const<sp/>FMT_NOEXCEPT<sp/>-&gt;<sp/>iterator<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_<sp/>+<sp/>size_;<sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator[](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FMT_NOEXCEPT<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char&amp;<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_[pos];</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>remove_prefix(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>data_<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>size_<sp/>-=<sp/>n;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Lexicographically<sp/>compare<sp/>this<sp/>string<sp/>reference<sp/>to<sp/>other.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR_CHAR_TRAITS<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>compare(<ref refid="classbasic__string__view" kindref="compound">basic_string_view</ref><sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>str_size<sp/>=<sp/>size_<sp/>&lt;<sp/>other.size_<sp/>?<sp/>size_<sp/>:<sp/>other.size_;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>std::char_traits&lt;Char&gt;::compare(data_,<sp/>other.data_,<sp/>str_size);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structresult" kindref="compound">result</ref><sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/>size_<sp/>==<sp/>other.size_<sp/>?<sp/>0<sp/>:<sp/>(size_<sp/>&lt;<sp/>other.size_<sp/>?<sp/>-1<sp/>:<sp/>1);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR_CHAR_TRAITS<sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator==(<ref refid="classbasic__string__view" kindref="compound">basic_string_view</ref><sp/>lhs,</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view</ref><sp/>rhs)</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.compare(rhs)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator!=(<ref refid="classbasic__string__view" kindref="compound">basic_string_view</ref><sp/>lhs,<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view</ref><sp/>rhs)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.compare(rhs)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator&lt;(<ref refid="classbasic__string__view" kindref="compound">basic_string_view</ref><sp/>lhs,<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view</ref><sp/>rhs)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.compare(rhs)<sp/>&lt;<sp/>0;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator&lt;=(<ref refid="classbasic__string__view" kindref="compound">basic_string_view</ref><sp/>lhs,<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view</ref><sp/>rhs)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.compare(rhs)<sp/>&lt;=<sp/>0;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator&gt;(<ref refid="classbasic__string__view" kindref="compound">basic_string_view</ref><sp/>lhs,<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view</ref><sp/>rhs)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.compare(rhs)<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator&gt;=(<ref refid="classbasic__string__view" kindref="compound">basic_string_view</ref><sp/>lhs,<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view</ref><sp/>rhs)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.compare(rhs)<sp/>&gt;=<sp/>0;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal">};</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>=<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;char&gt;</ref>;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="543" refid="structis__char" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__char" kindref="compound">is_char</ref><sp/>:<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="544" refid="structis__char_3_01char_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__char" kindref="compound">is_char</ref>&lt;char&gt;<sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>string<sp/>view<sp/>of<sp/>`s`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/>FMT_ENABLE_IF(is_</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">&lt;Char&gt;::value)&gt;</highlight></codeline>
<codeline lineno="548"><highlight class="normal">FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>to_string_view(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>s)<sp/>-&gt;<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Alloc&gt;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>to_string_view(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::basic_string&lt;Char,<sp/>Traits,<sp/>Alloc&gt;&amp;<sp/>s)</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="555"><highlight class="normal">}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>to_string_view(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>s)</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="560"><highlight class="normal">}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ENABLE_IF(!std::is_empty&lt;detail::std_string_view&lt;Char&gt;&gt;::<ref refid="classvalue" kindref="compound">value</ref>)&gt;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>to_string_view(detail::std_string_view&lt;Char&gt;<sp/>s)</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="566"><highlight class="normal">}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>base<sp/>class<sp/>for<sp/>compile-time<sp/>strings.<sp/>It<sp/>is<sp/>defined<sp/>in<sp/>the<sp/>fmt<sp/>namespace<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="comment">//<sp/>make<sp/>formatting<sp/>functions<sp/>visible<sp/>via<sp/>ADL,<sp/>e.g.<sp/>format(FMT_STRING(&quot;{}&quot;),<sp/>42).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570" refid="structcompile__string" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcompile__string" kindref="compound">compile_string</ref><sp/>{};</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S&gt;</highlight></codeline>
<codeline lineno="573" refid="structis__compile__string" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__compile__string" kindref="compound">is_compile_string</ref><sp/>:<sp/>std::is_base_of&lt;compile_string,<sp/>S&gt;<sp/>{};</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S,<sp/>FMT_ENABLE_IF(is_compile_</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&lt;S&gt;::value)&gt;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>to_string_view(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>S&amp;<sp/>s)</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;typename S::char_type&gt;</ref><sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;typename S::char_type&gt;</ref>(s);</highlight></codeline>
<codeline lineno="579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal">FMT_BEGIN_DETAIL_NAMESPACE</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>to_string_view(...);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>fmt::to_string_view;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specifies<sp/>whether<sp/>S<sp/>is<sp/>a<sp/>string<sp/>type<sp/>convertible<sp/>to<sp/>fmt::basic_string_view.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>should<sp/>be<sp/>a<sp/>constexpr<sp/>function<sp/>but<sp/>MSVC<sp/>2017<sp/>fails<sp/>to<sp/>compile<sp/>it<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="comment">//<sp/>enable_if<sp/>and<sp/>MSVC<sp/>2015<sp/>fails<sp/>to<sp/>compile<sp/>it<sp/>as<sp/>an<sp/>alias<sp/>template.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S&gt;</highlight></codeline>
<codeline lineno="590" refid="structis__string" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__string" kindref="compound">is_string</ref><sp/>:<sp/>std::is_class&lt;decltype(to_string_view(std::declval&lt;S&gt;()))&gt;<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal">};</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593" refid="structchar__t__impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structchar__t__impl" kindref="compound">char_t_impl</ref><sp/>{};</highlight></codeline>
<codeline lineno="594" refid="structchar__t__impl_3_01_s_00_01enable__if__t_3_01is__string_3_01_s_01_4_1_1value_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structchar__t__impl" kindref="compound">char_t_impl</ref>&lt;S,<sp/>enable_if_t&lt;<ref refid="structis__string" kindref="compound">is_string</ref>&lt;S&gt;::<ref refid="classvalue" kindref="compound">value</ref>&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(to_string_view(std::declval&lt;S&gt;()));</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>result::value_type;</highlight></codeline>
<codeline lineno="597"><highlight class="normal">};</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Reports<sp/>a<sp/>compile-time<sp/>error<sp/>if<sp/>S<sp/>is<sp/>not<sp/>a<sp/>valid<sp/>format<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S,<sp/>FMT_ENABLE_IF(!<ref refid="structis__compile__string" kindref="compound">is_compile_string&lt;S&gt;::value</ref>)&gt;</highlight></codeline>
<codeline lineno="601"><highlight class="normal">FMT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_format_string(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>S&amp;)<sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FMT_ENFORCE_COMPILE_STRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="structis__compile__string" kindref="compound">is_compile_string&lt;S&gt;::value</ref>,</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FMT_ENFORCE_COMPILE_STRING<sp/>requires<sp/>all<sp/>format<sp/>strings<sp/>to<sp/>use<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;FMT_STRING.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal">}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S,<sp/>FMT_ENABLE_IF(<ref refid="structis__compile__string" kindref="compound">is_compile_string&lt;S&gt;::value</ref>)&gt;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_format_string(S);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal">FMT_NORETURN<sp/>FMT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>throw_format_error(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613" refid="structerror__handler" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structerror__handler" kindref="compound">error_handler</ref><sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="structerror__handler" kindref="compound">error_handler</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="structerror__handler" kindref="compound">error_handler</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structerror__handler" kindref="compound">error_handler</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>intentionally<sp/>not<sp/>constexpr<sp/>to<sp/>give<sp/>a<sp/>compile-time<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>FMT_NORETURN<sp/>FMT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_error(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message);</highlight></codeline>
<codeline lineno="619"><highlight class="normal">};</highlight></codeline>
<codeline lineno="620"><highlight class="normal">FMT_END_DETAIL_NAMESPACE</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>char_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>detail::char_t_impl&lt;S&gt;::type;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ErrorHandler<sp/>=<sp/>detail::error_handler&gt;</highlight></codeline>
<codeline lineno="633" refid="classbasic__format__parse__context" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbasic__format__parse__context" kindref="compound">basic_format_parse_context</ref><sp/>:<sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal"><sp/>ErrorHandler<sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>format_str_;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>next_arg_id_;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>char_type<sp/>=<sp/>Char;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>iterator<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>basic_string_view&lt;Char&gt;::iterator;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__parse__context" kindref="compound">basic_format_parse_context</ref>(</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>format_str,<sp/>ErrorHandler<sp/>eh<sp/>=<sp/>{},</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__parse__context_1a9eb66391da04f3f435cb4664fc9d9170" kindref="member">next_arg_id</ref><sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>ErrorHandler(eh),<sp/>format_str_(format_str),<sp/>next_arg_id_(<ref refid="classbasic__format__parse__context_1a9eb66391da04f3f435cb4664fc9d9170" kindref="member">next_arg_id</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="651" refid="classbasic__format__parse__context_1af6d5dc3ccce733a267ba8d029ee48d0a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__parse__context_1af6d5dc3ccce733a267ba8d029ee48d0a" kindref="member">begin</ref>()<sp/>const<sp/>FMT_NOEXCEPT<sp/>-&gt;<sp/>iterator<sp/>{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>format_str_.begin();</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="658" refid="classbasic__format__parse__context_1a6d560f19885b2b94856acb01546ab18d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__parse__context_1a6d560f19885b2b94856acb01546ab18d" kindref="member">end</ref>()<sp/>const<sp/>FMT_NOEXCEPT<sp/>-&gt;<sp/>iterator<sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>format_str_.end();</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="663" refid="classbasic__format__parse__context_1ac123ab6c1c6e58db3ab0a917def4add8" refkind="member"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__parse__context_1ac123ab6c1c6e58db3ab0a917def4add8" kindref="member">advance_to</ref>(iterator<sp/>it)<sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>format_str_.remove_prefix(detail::to_unsigned(it<sp/>-<sp/><ref refid="classbasic__format__parse__context_1af6d5dc3ccce733a267ba8d029ee48d0a" kindref="member">begin</ref>()));</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="671" refid="classbasic__format__parse__context_1a9eb66391da04f3f435cb4664fc9d9170" refkind="member"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__parse__context_1a9eb66391da04f3f435cb4664fc9d9170" kindref="member">next_arg_id</ref>()<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>check<sp/>if<sp/>the<sp/>argument<sp/>id<sp/>is<sp/>valid<sp/>to<sp/>avoid<sp/>overhead<sp/>and<sp/>because<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>be<sp/>checked<sp/>during<sp/>formatting<sp/>anyway.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next_arg_id_<sp/>&gt;=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>next_arg_id_++;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>on_error(</highlight><highlight class="stringliteral">&quot;cannot<sp/>switch<sp/>from<sp/>manual<sp/>to<sp/>automatic<sp/>argument<sp/>indexing&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="683" refid="classbasic__format__parse__context_1a7a548535000cbd315a9ac35996950eec" refkind="member"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__parse__context_1a7a548535000cbd315a9ac35996950eec" kindref="member">check_arg_id</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next_arg_id_<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>on_error(</highlight><highlight class="stringliteral">&quot;cannot<sp/>switch<sp/>from<sp/>automatic<sp/>to<sp/>manual<sp/>argument<sp/>indexing&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>next_arg_id_<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__parse__context_1a7a548535000cbd315a9ac35996950eec" kindref="member">check_arg_id</ref>(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_error(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>ErrorHandler::on_error(message);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structerror__handler" kindref="compound">error_handler</ref>()<sp/>const<sp/>-&gt;<sp/>ErrorHandler<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal">};</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__parse__context" kindref="compound">format_parse_context</ref><sp/>=<sp/><ref refid="classbasic__format__parse__context" kindref="compound">basic_format_parse_context&lt;char&gt;</ref>;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbasic__format__arg" kindref="compound">basic_format_arg</ref>;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbasic__format__args" kindref="compound">basic_format_args</ref>;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdynamic__format__arg__store" kindref="compound">dynamic_format_arg_store</ref>;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>formatter<sp/>for<sp/>objects<sp/>of<sp/>type<sp/>T.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char<sp/>=<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Enable<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="707" refid="structformatter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structformatter" kindref="compound">formatter</ref><sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>deleted<sp/>default<sp/>constructor<sp/>indicates<sp/>a<sp/>disabled<sp/>formatter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><ref refid="structformatter" kindref="compound">formatter</ref>()<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="710"><highlight class="normal">};</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specifies<sp/>if<sp/>T<sp/>has<sp/>an<sp/>enabled<sp/>formatter<sp/>specialization.<sp/>A<sp/>type<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="comment">//<sp/>formattable<sp/>even<sp/>if<sp/>it<sp/>doesn&apos;t<sp/>have<sp/>a<sp/>formatter<sp/>e.g.<sp/>via<sp/>a<sp/>conversion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context&gt;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_formatter<sp/>=</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>std::is_constructible&lt;typename<sp/>Context::template<sp/>formatter_type&lt;T&gt;&gt;;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Checks<sp/>whether<sp/>T<sp/>is<sp/>a<sp/>container<sp/>with<sp/>contiguous<sp/>storage.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719" refid="structis__contiguous" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__contiguous" kindref="compound">is_contiguous</ref><sp/>:<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="721" refid="structis__contiguous_3_01std_1_1basic__string_3_01_char_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__contiguous" kindref="compound">is_contiguous</ref>&lt;std::basic_string&lt;Char&gt;&gt;<sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classappender" kindref="compound">appender</ref>;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal">FMT_BEGIN_DETAIL_NAMESPACE</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>has_const_formatter_impl(T*)</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context::template<sp/>formatter_type&lt;T&gt;().format(</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::declval&lt;const<sp/>T&amp;&gt;(),<sp/>std::declval&lt;Context&amp;&gt;()),</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="733"><highlight class="normal">}</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context&gt;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>has_const_formatter_impl(...)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="737"><highlight class="normal">}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context&gt;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>has_const_formatter()<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>has_const_formatter_impl&lt;Context&gt;(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="741"><highlight class="normal">}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Extracts<sp/>a<sp/>reference<sp/>to<sp/>the<sp/>container<sp/>from<sp/>back_insert_iterator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get_container(std::back_insert_iterator&lt;Container&gt;<sp/>it)</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/>Container&amp;<sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>bi_iterator<sp/>=<sp/>std::back_insert_iterator&lt;Container&gt;;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">accessor<sp/>:<sp/>bi_iterator<sp/>{</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>accessor(bi_iterator<sp/>iter)<sp/>:<sp/>bi_iterator(iter)<sp/>{}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>bi_iterator::container;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*accessor(it).container;</highlight></codeline>
<codeline lineno="753"><highlight class="normal">}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt&gt;</highlight></codeline>
<codeline lineno="756"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>copy_str(InputIt<sp/>begin,<sp/>InputIt<sp/>end,<sp/>OutputIt<sp/>out)</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/>OutputIt<sp/>{</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(begin<sp/>!=<sp/>end)<sp/>*out++<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*begin++);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="760"><highlight class="normal">}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U,</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ENABLE_IF(</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;remove_const_t&lt;T&gt;,<sp/>U&gt;::<ref refid="classvalue" kindref="compound">value</ref>&amp;&amp;<sp/><ref refid="structis__char" kindref="compound">is_char&lt;U&gt;::value</ref>)&gt;</highlight></codeline>
<codeline lineno="765"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>copy_str(T*<sp/>begin,<sp/>T*<sp/>end,<sp/>U*<sp/>out)<sp/>-&gt;<sp/>U*<sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_constant_evaluated())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>copy_str&lt;Char,<sp/>T*,<sp/>U*&gt;(begin,<sp/>end,<sp/>out);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>to_unsigned(end<sp/>-<sp/>begin);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>memcpy(out,<sp/>begin,<sp/>size<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(U));</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out<sp/>+<sp/>size;</highlight></codeline>
<codeline lineno="770"><highlight class="normal">}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="778" refid="classbuffer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbuffer" kindref="compound">buffer</ref><sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/>T*<sp/>ptr_;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size_;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>capacity_;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>initialize<sp/>ptr_<sp/>since<sp/>it<sp/>is<sp/>not<sp/>accessed<sp/>to<sp/>save<sp/>a<sp/>few<sp/>cycles.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/>FMT_MSC_WARNING(suppress<sp/>:<sp/>26495)</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz)<sp/>FMT_NOEXCEPT<sp/>:<sp/>size_(sz),<sp/>capacity_(sz)<sp/>{}</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR20<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>(T*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>cap<sp/>=<sp/>0)<sp/>FMT_NOEXCEPT<sp/>:<sp/>ptr_(p),</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_(sz),</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>capacity_(cap)<sp/>{}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR20<sp/><ref refid="classbuffer" kindref="compound">~buffer</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>(<ref refid="classbuffer" kindref="compound">buffer</ref>&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="798" refid="classbuffer_1a4a777af6a90beeac06af14d9f2939611" refkind="member"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classbuffer_1a4a777af6a90beeac06af14d9f2939611" kindref="member">set</ref>(T*<sp/>buf_data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buf_capacity)<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr_<sp/>=<sp/>buf_data;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>capacity_<sp/>=<sp/>buf_capacity;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="804" refid="classbuffer_1a98dcf71107dcb329422606c9ff0b3369" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>FMT_CONSTEXPR20<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classbuffer_1a98dcf71107dcb329422606c9ff0b3369" kindref="member">grow</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classbuffer_1a43a14b8b348aed58d76766eb59dd6578" kindref="member">capacity</ref>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>value_type<sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>const_reference<sp/>=<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>begin()<sp/>FMT_NOEXCEPT<sp/>-&gt;<sp/>T*<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr_;<sp/>}</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end()<sp/>FMT_NOEXCEPT<sp/>-&gt;<sp/>T*<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr_<sp/>+<sp/>size_;<sp/>}</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>begin()<sp/>const<sp/>FMT_NOEXCEPT<sp/>-&gt;<sp/>const<sp/>T*<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr_;<sp/>}</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end()<sp/>const<sp/>FMT_NOEXCEPT<sp/>-&gt;<sp/>const<sp/>T*<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr_<sp/>+<sp/>size_;<sp/>}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="820" refid="classbuffer_1abef013fc250411a71bd271e27cbcfa5d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classbuffer_1abef013fc250411a71bd271e27cbcfa5d" kindref="member">size</ref>()<sp/>const<sp/>FMT_NOEXCEPT<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size_;<sp/>}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="823" refid="classbuffer_1a43a14b8b348aed58d76766eb59dd6578" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classbuffer_1a43a14b8b348aed58d76766eb59dd6578" kindref="member">capacity</ref>()<sp/>const<sp/>FMT_NOEXCEPT<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>capacity_;<sp/>}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="826" refid="classbuffer_1ae42a4b4e65620def1fc0c5e4be5d3a86" refkind="member"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classbuffer_1ae42a4b4e65620def1fc0c5e4be5d3a86" kindref="member">data</ref>()<sp/>FMT_NOEXCEPT<sp/>-&gt;<sp/>T*<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr_;<sp/>}</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="829" refid="classbuffer_1adacd68ee6427f5fe3861bb87c58043b7" refkind="member"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classbuffer_1adacd68ee6427f5fe3861bb87c58043b7" kindref="member">data</ref>()<sp/>const<sp/>FMT_NOEXCEPT<sp/>-&gt;<sp/>const<sp/>T*<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr_;<sp/>}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="832" refid="classbuffer_1a46672f0d8544fc2b27544928cd6408df" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classbuffer_1a46672f0d8544fc2b27544928cd6408df" kindref="member">clear</ref>()<sp/>{<sp/>size_<sp/>=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tries<sp/>resizing<sp/>the<sp/>buffer<sp/>to<sp/>contain<sp/>*count*<sp/>elements.<sp/>If<sp/>T<sp/>is<sp/>a<sp/>POD<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>new<sp/>elements<sp/>may<sp/>not<sp/>be<sp/>initialized.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR20<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>try_resize(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>try_reserve(count);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>size_<sp/>=<sp/>count<sp/>&lt;=<sp/>capacity_<sp/>?<sp/>count<sp/>:<sp/>capacity_;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tries<sp/>increasing<sp/>the<sp/>buffer<sp/>capacity<sp/>to<sp/>*new_capacity*.<sp/>It<sp/>can<sp/>increase<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>capacity<sp/>by<sp/>a<sp/>smaller<sp/>amount<sp/>than<sp/>requested<sp/>but<sp/>guarantees<sp/>there<sp/>is<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>at<sp/>least<sp/>one<sp/>additional<sp/>element<sp/>either<sp/>by<sp/>increasing<sp/>the<sp/>capacity<sp/>or<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>flushing<sp/>the<sp/>buffer<sp/>if<sp/>it<sp/>is<sp/>full.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR20<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>try_reserve(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>new_capacity)<sp/>{</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_capacity<sp/>&gt;<sp/>capacity_)<sp/><ref refid="classbuffer_1a98dcf71107dcb329422606c9ff0b3369" kindref="member">grow</ref>(new_capacity);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR20<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>push_back(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>try_reserve(size_<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr_[size_++]<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="855" refid="classbuffer_1a85153eafa666890bc7d531ed4ebb3ecc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classbuffer_1a85153eafa666890bc7d531ed4ebb3ecc" kindref="member">append</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U*<sp/>begin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U*<sp/>end);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>I&gt;<sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator[](I<sp/>index)<sp/>-&gt;<sp/>T&amp;<sp/>{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr_[index];</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>I&gt;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator[](I<sp/>index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr_[index];</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="864"><highlight class="normal">};</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866" refid="structbuffer__traits" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbuffer__traits" kindref="compound">buffer_traits</ref><sp/>{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structbuffer__traits" kindref="compound">buffer_traits</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>count()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>limit(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size;<sp/>}</highlight></codeline>
<codeline lineno="870"><highlight class="normal">};</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872" refid="classfixed__buffer__traits" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfixed__buffer__traits" kindref="compound">fixed_buffer_traits</ref><sp/>{</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>limit_;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classfixed__buffer__traits" kindref="compound">fixed_buffer_traits</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>limit)<sp/>:<sp/>limit_(limit)<sp/>{}</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>count()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count_;<sp/>}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>limit(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>limit_<sp/>&gt;<sp/>count_<sp/>?<sp/>limit_<sp/>-<sp/>count_<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>count_<sp/>+=<sp/>size;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size<sp/>&lt;<sp/>n<sp/>?<sp/>size<sp/>:<sp/>n;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="885"><highlight class="normal">};</highlight></codeline>
<codeline lineno="886"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>buffer<sp/>that<sp/>writes<sp/>to<sp/>an<sp/>output<sp/>iterator<sp/>when<sp/>flushed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits<sp/>=<sp/>buffer_traits&gt;</highlight></codeline>
<codeline lineno="889" refid="classiterator__buffer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classiterator__buffer" kindref="compound">iterator_buffer</ref><sp/>final<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Traits,<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/>OutputIt<sp/>out_;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>buffer_size<sp/>=<sp/>256<sp/>};</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/>T<sp/>data_[buffer_size];</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="896" refid="classiterator__buffer_1af02ef23c0352b4d47071434233c8aeed" refkind="member"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR20<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classiterator__buffer_1af02ef23c0352b4d47071434233c8aeed" kindref="member">grow</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;<ref refid="classbuffer_1abef013fc250411a71bd271e27cbcfa5d" kindref="member">size</ref>()<sp/>==<sp/>buffer_size)<sp/>flush();</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>flush()<sp/>{</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>this-&gt;<ref refid="classbuffer_1abef013fc250411a71bd271e27cbcfa5d" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classbuffer_1a46672f0d8544fc2b27544928cd6408df" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/>out_<sp/>=<sp/>copy_str&lt;T&gt;(data_,<sp/>data_<sp/>+<sp/>this-&gt;limit(size),<sp/>out_);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classiterator__buffer" kindref="compound">iterator_buffer</ref>(OutputIt<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>buffer_size)</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>Traits(n),<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>&lt;T&gt;(data_,<sp/>0,<sp/>buffer_size),<sp/>out_(out)<sp/>{}</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><ref refid="classiterator__buffer" kindref="compound">iterator_buffer</ref>(<ref refid="classiterator__buffer" kindref="compound">iterator_buffer</ref>&amp;&amp;<sp/>other)</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>Traits(other),<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>&lt;T&gt;(data_,<sp/>0,<sp/>buffer_size),<sp/>out_(other.out_)<sp/>{}</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><ref refid="classiterator__buffer" kindref="compound">~iterator_buffer</ref>()<sp/>{<sp/>flush();<sp/>}</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out()<sp/>-&gt;<sp/>OutputIt<sp/>{</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>flush();</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out_;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>count()<sp/>const<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Traits::count()<sp/>+<sp/>this-&gt;<ref refid="classbuffer_1abef013fc250411a71bd271e27cbcfa5d" kindref="member">size</ref>();<sp/>}</highlight></codeline>
<codeline lineno="918"><highlight class="normal">};</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="921" refid="classiterator__buffer_3_01_t_01_5_00_01_t_00_01fixed__buffer__traits_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classiterator__buffer" kindref="compound">iterator_buffer</ref>&lt;T*,<sp/>T,<sp/><ref refid="classfixed__buffer__traits" kindref="compound">fixed_buffer_traits</ref>&gt;<sp/>final</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classfixed__buffer__traits" kindref="compound">fixed_buffer_traits</ref>,</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classbuffer" kindref="compound">buffer&lt;T&gt;</ref><sp/>{</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/>T*<sp/>out_;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>buffer_size<sp/>=<sp/>256<sp/>};</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/>T<sp/>data_[buffer_size];</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="930" refid="classiterator__buffer_3_01_t_01_5_00_01_t_00_01fixed__buffer__traits_01_4_1abe39769721f1e487ced0052cc3172b6d" refkind="member"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR20<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classiterator__buffer_3_01_t_01_5_00_01_t_00_01fixed__buffer__traits_01_4_1abe39769721f1e487ced0052cc3172b6d" kindref="member">grow</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;<ref refid="classbuffer_1abef013fc250411a71bd271e27cbcfa5d" kindref="member">size</ref>()<sp/>==<sp/>this-&gt;<ref refid="classbuffer_1a43a14b8b348aed58d76766eb59dd6578" kindref="member">capacity</ref>())<sp/>flush();</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>flush()<sp/>{</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>this-&gt;limit(this-&gt;<ref refid="classbuffer_1abef013fc250411a71bd271e27cbcfa5d" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;<ref refid="classbuffer_1ae42a4b4e65620def1fc0c5e4be5d3a86" kindref="member">data</ref>()<sp/>==<sp/>out_)<sp/>{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out_<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classbuffer_1a4a777af6a90beeac06af14d9f2939611" kindref="member">set</ref>(data_,<sp/>buffer_size);</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classbuffer_1a46672f0d8544fc2b27544928cd6408df" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classiterator__buffer" kindref="compound">iterator_buffer</ref>(T*<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>buffer_size)</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classfixed__buffer__traits" kindref="compound">fixed_buffer_traits</ref>(n),<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>&lt;T&gt;(out,<sp/>0,<sp/>n),<sp/>out_(out)<sp/>{}</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><ref refid="classiterator__buffer" kindref="compound">iterator_buffer</ref>(<ref refid="classiterator__buffer" kindref="compound">iterator_buffer</ref>&amp;&amp;<sp/>other)</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classfixed__buffer__traits" kindref="compound">fixed_buffer_traits</ref>(other),</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>&lt;T&gt;(std::move(other)),</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_(other.out_)<sp/>{</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;<ref refid="classbuffer_1ae42a4b4e65620def1fc0c5e4be5d3a86" kindref="member">data</ref>()<sp/>!=<sp/>out_)<sp/>{</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classbuffer_1a4a777af6a90beeac06af14d9f2939611" kindref="member">set</ref>(data_,<sp/>buffer_size);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classbuffer_1a46672f0d8544fc2b27544928cd6408df" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><ref refid="classiterator__buffer" kindref="compound">~iterator_buffer</ref>()<sp/>{<sp/>flush();<sp/>}</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out()<sp/>-&gt;<sp/>T*<sp/>{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>flush();</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out_;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>count()<sp/>const<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fixed_buffer_traits::count()<sp/>+<sp/>this-&gt;<ref refid="classbuffer_1abef013fc250411a71bd271e27cbcfa5d" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="964"><highlight class="normal">};</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966" refid="classiterator__buffer_3_01_t_01_5_00_01_t_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classiterator__buffer" kindref="compound">iterator_buffer</ref>&lt;T*,<sp/>T&gt;<sp/>final<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classbuffer" kindref="compound">buffer&lt;T&gt;</ref><sp/>{</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="968" refid="classiterator__buffer_3_01_t_01_5_00_01_t_01_4_1a999c00e421733e68ed34cca800058897" refkind="member"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR20<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classiterator__buffer_3_01_t_01_5_00_01_t_01_4_1a999c00e421733e68ed34cca800058897" kindref="member">grow</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classiterator__buffer" kindref="compound">iterator_buffer</ref>(T*<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>=<sp/>0)<sp/>:<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>&lt;T&gt;(out,<sp/>0,<sp/>~size_t())<sp/>{}</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out()<sp/>-&gt;<sp/>T*<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;*this-&gt;end();<sp/>}</highlight></codeline>
<codeline lineno="974"><highlight class="normal">};</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>buffer<sp/>that<sp/>writes<sp/>to<sp/>a<sp/>container<sp/>with<sp/>the<sp/>contiguous<sp/>storage.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="978" refid="classiterator__buffer_3_01std_1_1back__insert__iterator_3_01_container_01_4_00_01enable__if__t_3f9dd5967f8d169dc7f82f3e912e020ba" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classiterator__buffer" kindref="compound">iterator_buffer</ref>&lt;std::back_insert_iterator&lt;Container&gt;,</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;is_contiguous&lt;Container&gt;::value,</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>Container::value_type&gt;&gt;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/>final<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>&lt;typename<sp/>Container::value_type&gt;<sp/>{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/>Container&amp;<sp/>container_;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="986" refid="classiterator__buffer_3_01std_1_1back__insert__iterator_3_01_container_01_4_00_01enable__if__t_3f9dd5967f8d169dc7f82f3e912e020ba_1adadd2153610bc6f2af3d24c72bb4cc07" refkind="member"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR20<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classiterator__buffer_3_01std_1_1back__insert__iterator_3_01_container_01_4_00_01enable__if__t_3f9dd5967f8d169dc7f82f3e912e020ba_1adadd2153610bc6f2af3d24c72bb4cc07" kindref="member">grow</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classbuffer_1a43a14b8b348aed58d76766eb59dd6578" kindref="member">capacity</ref>)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>container_.resize(<ref refid="classbuffer_1a43a14b8b348aed58d76766eb59dd6578" kindref="member">capacity</ref>);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classbuffer_1a4a777af6a90beeac06af14d9f2939611" kindref="member">set</ref>(&amp;container_[0],<sp/><ref refid="classbuffer_1a43a14b8b348aed58d76766eb59dd6578" kindref="member">capacity</ref>);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classiterator__buffer" kindref="compound">iterator_buffer</ref>(Container&amp;<sp/>c)</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>&lt;typename<sp/>Container::value_type&gt;(c.size()),<sp/>container_(c)<sp/>{}</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classiterator__buffer" kindref="compound">iterator_buffer</ref>(std::back_insert_iterator&lt;Container&gt;<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classiterator__buffer" kindref="compound">iterator_buffer</ref>(get_container(out))<sp/>{}</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out()<sp/>-&gt;<sp/>std::back_insert_iterator&lt;Container&gt;<sp/>{</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::back_inserter(container_);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="999"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>buffer<sp/>that<sp/>counts<sp/>the<sp/>number<sp/>of<sp/>code<sp/>units<sp/>written<sp/>discarding<sp/>the<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002" refid="classcounting__buffer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>=<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classcounting__buffer" kindref="compound">counting_buffer</ref><sp/>final<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classbuffer" kindref="compound">buffer</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>buffer_size<sp/>=<sp/>256<sp/>};</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/>T<sp/>data_[buffer_size];</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1009" refid="classcounting__buffer_1a52038490ed76389d50224146c86450dd" refkind="member"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR20<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcounting__buffer_1a52038490ed76389d50224146c86450dd" kindref="member">grow</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;<ref refid="classbuffer_1abef013fc250411a71bd271e27cbcfa5d" kindref="member">size</ref>()<sp/>!=<sp/>buffer_size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/>count_<sp/>+=<sp/>this-&gt;<ref refid="classbuffer_1abef013fc250411a71bd271e27cbcfa5d" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classbuffer_1a46672f0d8544fc2b27544928cd6408df" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><ref refid="classcounting__buffer" kindref="compound">counting_buffer</ref>()<sp/>:<sp/><ref refid="classbuffer" kindref="compound">buffer</ref>&lt;T&gt;(data_,<sp/>0,<sp/>buffer_size)<sp/>{}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>count()<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count_<sp/>+<sp/>this-&gt;<ref refid="classbuffer_1abef013fc250411a71bd271e27cbcfa5d" kindref="member">size</ref>();<sp/>}</highlight></codeline>
<codeline lineno="1019"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>buffer_appender<sp/>=<sp/>conditional_t&lt;std::is_same&lt;T,<sp/>char&gt;::value,<sp/><ref refid="classappender" kindref="compound">appender</ref>,</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::back_insert_iterator&lt;buffer&lt;T&gt;&gt;&gt;;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Maps<sp/>an<sp/>output<sp/>iterator<sp/>to<sp/>a<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt&gt;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get_buffer(OutputIt<sp/>out)<sp/>-&gt;<sp/><ref refid="classiterator__buffer" kindref="compound">iterator_buffer&lt;OutputIt, T&gt;</ref><sp/>{</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classiterator__buffer" kindref="compound">iterator_buffer&lt;OutputIt, T&gt;</ref>(out);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Buffer&gt;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get_iterator(Buffer&amp;<sp/>buf)<sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(buf.out())<sp/>{</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf.out();</highlight></codeline>
<codeline lineno="1034"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get_iterator(<ref refid="classbuffer" kindref="compound">buffer&lt;T&gt;</ref>&amp;<sp/>buf)<sp/>-&gt;<sp/>buffer_appender&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buffer_appender&lt;T&gt;(buf);</highlight></codeline>
<codeline lineno="1037"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char<sp/>=<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Enable<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="1040" refid="structfallback__formatter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfallback__formatter" kindref="compound">fallback_formatter</ref><sp/>{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><ref refid="structfallback__formatter" kindref="compound">fallback_formatter</ref>()<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Specifies<sp/>if<sp/>T<sp/>has<sp/>an<sp/>enabled<sp/>fallback_formatter<sp/>specialization.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>has_fallback_formatter<sp/>=</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/>std::is_constructible&lt;fallback_formatter&lt;T,<sp/>Char&gt;&gt;;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049" refid="structview" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structview" kindref="compound">view</ref><sp/>{};</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051" refid="structnamed__arg" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnamed__arg" kindref="compound">named_arg</ref><sp/>:<sp/><ref refid="structview" kindref="compound">view</ref><sp/>{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>name;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><ref refid="structnamed__arg" kindref="compound">named_arg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>v)<sp/>:<sp/>name(n),<sp/><ref refid="classvalue" kindref="compound">value</ref>(v)<sp/>{}</highlight></codeline>
<codeline lineno="1055"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057" refid="structnamed__arg__info" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnamed__arg__info" kindref="compound">named_arg_info</ref><sp/>{</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>name;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>NUM_ARGS,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>NUM_NAMED_ARGS&gt;</highlight></codeline>
<codeline lineno="1063" refid="structarg__data" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structarg__data" kindref="compound">arg_data</ref><sp/>{</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>args_[0].named_args<sp/>points<sp/>to<sp/>named_args_<sp/>to<sp/>avoid<sp/>bloating<sp/>format_args.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+1<sp/>to<sp/>workaround<sp/>a<sp/>bug<sp/>in<sp/>gcc<sp/>7.5<sp/>that<sp/>causes<sp/>duplicated-branches<sp/>warning.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/>T<sp/>args_[1<sp/>+<sp/>(NUM_ARGS<sp/>!=<sp/>0<sp/>?<sp/>NUM_ARGS<sp/>:<sp/>+1)];</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><ref refid="structnamed__arg__info" kindref="compound">named_arg_info&lt;Char&gt;</ref><sp/>named_args_[NUM_NAMED_ARGS];</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>U&gt;</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><ref refid="structarg__data" kindref="compound">arg_data</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U&amp;...<sp/>init)<sp/>:<sp/>args_{T(named_args_,<sp/>NUM_NAMED_ARGS),<sp/>init...}<sp/>{}</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><ref refid="structarg__data" kindref="compound">arg_data</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarg__data" kindref="compound">arg_data</ref>&amp;<sp/>other)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>args()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>args_<sp/>+<sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>named_args()<sp/>-&gt;<sp/><ref refid="structnamed__arg__info" kindref="compound">named_arg_info&lt;Char&gt;</ref>*<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>named_args_;<sp/>}</highlight></codeline>
<codeline lineno="1074"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>NUM_ARGS&gt;</highlight></codeline>
<codeline lineno="1077" refid="structarg__data_3_01_t_00_01_char_00_01_n_u_m___a_r_g_s_00_010_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structarg__data" kindref="compound">arg_data</ref>&lt;T,<sp/>Char,<sp/>NUM_ARGS,<sp/>0&gt;<sp/>{</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>+1<sp/>to<sp/>workaround<sp/>a<sp/>bug<sp/>in<sp/>gcc<sp/>7.5<sp/>that<sp/>causes<sp/>duplicated-branches<sp/>warning.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/>T<sp/>args_[NUM_ARGS<sp/>!=<sp/>0<sp/>?<sp/>NUM_ARGS<sp/>:<sp/>+1];</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>U&gt;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/><ref refid="structarg__data" kindref="compound">arg_data</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>U&amp;...<sp/>init)<sp/>:<sp/>args_{init...}<sp/>{}</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>args()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>args_;<sp/>}</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>named_args()<sp/>-&gt;<sp/>std::nullptr_t<sp/>{</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1087"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_named_args(<ref refid="structnamed__arg__info" kindref="compound">named_arg_info&lt;Char&gt;</ref>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092" refid="structis__named__arg" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__named__arg" kindref="compound">is_named_arg</ref><sp/>:<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="1093" refid="structis__statically__named__arg" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__statically__named__arg" kindref="compound">is_statically_named_arg</ref><sp/>:<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="1096" refid="structis__named__arg_3_01named__arg_3_01_char_00_01_t_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__named__arg" kindref="compound">is_named_arg</ref>&lt;<ref refid="structnamed__arg" kindref="compound">named_arg</ref>&lt;Char,<sp/>T&gt;&gt;<sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Tail,</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ENABLE_IF(!<ref refid="structis__named__arg" kindref="compound">is_named_arg&lt;T&gt;::value</ref>)&gt;</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_named_args(<ref refid="structnamed__arg__info" kindref="compound">named_arg_info&lt;Char&gt;</ref>*<sp/>named_args,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arg_count,</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>named_arg_count,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tail&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/>init_named_args(named_args,<sp/>arg_count<sp/>+<sp/>1,<sp/>named_arg_count,<sp/>args...);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Tail,</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ENABLE_IF(<ref refid="structis__named__arg" kindref="compound">is_named_arg&lt;T&gt;::value</ref>)&gt;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_named_args(<ref refid="structnamed__arg__info" kindref="compound">named_arg_info&lt;Char&gt;</ref>*<sp/>named_args,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arg_count,</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>named_arg_count,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>arg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tail&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/>named_args[named_arg_count++]<sp/>=<sp/>{arg.name,<sp/>arg_count};</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/>init_named_args(named_args,<sp/>arg_count<sp/>+<sp/>1,<sp/>named_arg_count,<sp/>args...);</highlight></codeline>
<codeline lineno="1111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal">FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init_named_args(std::nullptr_t,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Args&amp;...)<sp/>{}</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>B<sp/>=<sp/>false&gt;<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>count()<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>B<sp/>?<sp/>1<sp/>:<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>B1,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>B2,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">...<sp/>Tail&gt;<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>count()<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(B1<sp/>?<sp/>1<sp/>:<sp/>0)<sp/>+<sp/>count&lt;B2,<sp/>Tail...&gt;();</highlight></codeline>
<codeline lineno="1120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>count_named_args()<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count&lt;is_named_arg&lt;Args&gt;::value...&gt;();</highlight></codeline>
<codeline lineno="1124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>count_statically_named_args()<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count&lt;is_statically_named_arg&lt;Args&gt;::value...&gt;();</highlight></codeline>
<codeline lineno="1129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>type<sp/>{</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/>none_type,</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Integer<sp/>types<sp/>should<sp/>go<sp/>first,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/>int_type,</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/>uint_type,</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/>long_long_type,</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/>ulong_long_type,</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/>int128_type,</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/>uint128_type,</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/>bool_type,</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/>char_type,</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/>last_integer_type<sp/>=<sp/>char_type,</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>followed<sp/>by<sp/>floating-point<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/>float_type,</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/>double_type,</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/>long_double_type,</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/>last_numeric_type<sp/>=<sp/>long_double_type,</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/>cstring_type,</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/>string_type,</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/>pointer_type,</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/>custom_type</highlight></codeline>
<codeline lineno="1152"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Maps<sp/>core<sp/>type<sp/>T<sp/>to<sp/>the<sp/>corresponding<sp/>type<sp/>enum<sp/>constant.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="1156" refid="structtype__constant" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtype__constant" kindref="compound">type_constant</ref><sp/>:<sp/>std::integral_constant&lt;type,<sp/>type::custom_type&gt;<sp/>{};</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_TYPE_CONSTANT(Type,<sp/>constant)<sp/>\</highlight></codeline>
<codeline lineno="1159"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;typename<sp/>Char&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1160"><highlight class="preprocessor"><sp/><sp/>struct<sp/>type_constant&lt;Type,<sp/>Char&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1161"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>std::integral_constant&lt;type,<sp/>type::constant&gt;<sp/>{}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal">FMT_TYPE_CONSTANT(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/>int_type);</highlight></codeline>
<codeline lineno="1164"><highlight class="normal">FMT_TYPE_CONSTANT(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">,<sp/>uint_type);</highlight></codeline>
<codeline lineno="1165"><highlight class="normal">FMT_TYPE_CONSTANT(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>long_long_type);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal">FMT_TYPE_CONSTANT(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">,<sp/>ulong_long_type);</highlight></codeline>
<codeline lineno="1167"><highlight class="normal">FMT_TYPE_CONSTANT(int128_t,<sp/>int128_type);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal">FMT_TYPE_CONSTANT(uint128_t,<sp/>uint128_type);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal">FMT_TYPE_CONSTANT(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/>bool_type);</highlight></codeline>
<codeline lineno="1170"><highlight class="normal">FMT_TYPE_CONSTANT(Char,<sp/>char_type);</highlight></codeline>
<codeline lineno="1171"><highlight class="normal">FMT_TYPE_CONSTANT(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/>float_type);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal">FMT_TYPE_CONSTANT(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>double_type);</highlight></codeline>
<codeline lineno="1173"><highlight class="normal">FMT_TYPE_CONSTANT(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/>long_double_type);</highlight></codeline>
<codeline lineno="1174"><highlight class="normal">FMT_TYPE_CONSTANT(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*,<sp/>cstring_type);</highlight></codeline>
<codeline lineno="1175"><highlight class="normal">FMT_TYPE_CONSTANT(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref>,<sp/>string_type);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal">FMT_TYPE_CONSTANT(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/>pointer_type);</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_integral_type(type<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t<sp/>&gt;<sp/>type::none_type<sp/>&amp;&amp;<sp/>t<sp/>&lt;=<sp/>type::last_integer_type;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_arithmetic_type(type<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>t<sp/>&gt;<sp/>type::none_type<sp/>&amp;&amp;<sp/>t<sp/>&lt;=<sp/>type::last_numeric_type;</highlight></codeline>
<codeline lineno="1184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186" refid="structunformattable" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structunformattable" kindref="compound">unformattable</ref><sp/>{};</highlight></codeline>
<codeline lineno="1187" refid="structunformattable__char" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structunformattable__char" kindref="compound">unformattable_char</ref><sp/>:<sp/><ref refid="structunformattable" kindref="compound">unformattable</ref><sp/>{};</highlight></codeline>
<codeline lineno="1188" refid="structunformattable__const" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structunformattable__const" kindref="compound">unformattable_const</ref><sp/>:<sp/><ref refid="structunformattable" kindref="compound">unformattable</ref><sp/>{};</highlight></codeline>
<codeline lineno="1189" refid="structunformattable__pointer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structunformattable__pointer" kindref="compound">unformattable_pointer</ref><sp/>:<sp/><ref refid="structunformattable" kindref="compound">unformattable</ref><sp/>{};</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191" refid="structstring__value" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstring__value" kindref="compound">string_value</ref><sp/>{</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>data;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight></codeline>
<codeline lineno="1196" refid="structnamed__arg__value" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnamed__arg__value" kindref="compound">named_arg_value</ref><sp/>{</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structnamed__arg__info" kindref="compound">named_arg_info&lt;Char&gt;</ref>*<sp/>data;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201" refid="structcustom__value" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcustom__value" kindref="compound">custom_value</ref><sp/>{</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>parse_context<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context::parse_context_type;</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/>void<sp/>(*format)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>arg,<sp/>parse_context&amp;<sp/>parse_ctx,<sp/>Context&amp;<sp/>ctx);</highlight></codeline>
<codeline lineno="1205"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>formatting<sp/>argument<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1208" refid="classvalue" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classvalue" kindref="compound">value</ref><sp/>{</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>char_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context::char_type;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structmonostate" kindref="compound">monostate</ref><sp/>no_value;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>int_value;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>uint_value;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>long_long_value;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ulong_long_value;</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/>int128_t<sp/>int128_value;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/>uint128_t<sp/>uint128_value;</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bool_value;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/>char_type<sp/>char_value;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>float_value;</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>double_value;</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>long_double_value;</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pointer;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstring__value" kindref="compound">string_value&lt;char_type&gt;</ref><sp/>string;</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcustom__value" kindref="compound">custom_value&lt;Context&gt;</ref><sp/>custom;</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnamed__arg__value" kindref="compound">named_arg_value&lt;char_type&gt;</ref><sp/>named_args;</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>FMT_INLINE<sp/><ref refid="classvalue" kindref="compound">value</ref>()<sp/>:<sp/>no_value()<sp/>{}</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>FMT_INLINE<sp/><ref refid="classvalue" kindref="compound">value</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val)<sp/>:<sp/>int_value(val)<sp/>{}</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>FMT_INLINE<sp/><ref refid="classvalue" kindref="compound">value</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>val)<sp/>:<sp/>uint_value(val)<sp/>{}</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>FMT_INLINE<sp/><ref refid="classvalue" kindref="compound">value</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val)<sp/>:<sp/>long_long_value(val)<sp/>{}</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>FMT_INLINE<sp/><ref refid="classvalue" kindref="compound">value</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val)<sp/>:<sp/>ulong_long_value(val)<sp/>{}</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/>FMT_INLINE<sp/><ref refid="classvalue" kindref="compound">value</ref>(int128_t<sp/>val)<sp/>:<sp/>int128_value(val)<sp/>{}</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/>FMT_INLINE<sp/><ref refid="classvalue" kindref="compound">value</ref>(uint128_t<sp/>val)<sp/>:<sp/>uint128_value(val)<sp/>{}</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>FMT_INLINE<sp/><ref refid="classvalue" kindref="compound">value</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val)<sp/>:<sp/>float_value(val)<sp/>{}</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>FMT_INLINE<sp/><ref refid="classvalue" kindref="compound">value</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val)<sp/>:<sp/>double_value(val)<sp/>{}</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/>FMT_INLINE<sp/><ref refid="classvalue" kindref="compound">value</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val)<sp/>:<sp/>long_double_value(val)<sp/>{}</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>FMT_INLINE<sp/><ref refid="classvalue" kindref="compound">value</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>val)<sp/>:<sp/>bool_value(val)<sp/>{}</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>FMT_INLINE<sp/><ref refid="classvalue" kindref="compound">value</ref>(char_type<sp/>val)<sp/>:<sp/>char_value(val)<sp/>{}</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/><ref refid="classvalue" kindref="compound">value</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>char_type*<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.data<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_constant_evaluated())<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.size<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/><ref refid="classvalue" kindref="compound">value</ref>(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;char_type&gt;</ref><sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.data<sp/>=<sp/>val.data();</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">.size<sp/>=<sp/>val.size();</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/>FMT_INLINE<sp/><ref refid="classvalue" kindref="compound">value</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>val)<sp/>:<sp/>pointer(val)<sp/>{}</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/>FMT_INLINE<sp/><ref refid="classvalue" kindref="compound">value</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structnamed__arg__info" kindref="compound">named_arg_info&lt;char_type&gt;</ref>*<sp/>args,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>named_args{args,<sp/>size}<sp/>{}</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/><ref refid="classvalue" kindref="compound">value</ref>(T&amp;<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>value_type<sp/>=<sp/>remove_cvref_t&lt;T&gt;;</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/>custom.value<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">value_type*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;val);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>formatter<sp/>type<sp/>through<sp/>the<sp/>context<sp/>to<sp/>allow<sp/>different<sp/>contexts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>different<sp/>extension<sp/>points,<sp/>e.g.<sp/>`formatter&lt;T&gt;`<sp/>for<sp/>`format`<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>`printf_formatter&lt;T&gt;`<sp/>for<sp/>`printf`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/>custom.format<sp/>=<sp/>format_custom_arg&lt;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_type,</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conditional_t&lt;has_formatter&lt;value_type,<sp/>Context&gt;::value,</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context::template<sp/>formatter_type&lt;value_type&gt;,</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfallback__formatter" kindref="compound">fallback_formatter&lt;value_type, char_type&gt;</ref>&gt;&gt;;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><ref refid="classvalue" kindref="compound">value</ref>(<ref refid="structunformattable" kindref="compound">unformattable</ref>);</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><ref refid="classvalue" kindref="compound">value</ref>(<ref refid="structunformattable__char" kindref="compound">unformattable_char</ref>);</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><ref refid="classvalue" kindref="compound">value</ref>(<ref refid="structunformattable__const" kindref="compound">unformattable_const</ref>);</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><ref refid="classvalue" kindref="compound">value</ref>(<ref refid="structunformattable__pointer" kindref="compound">unformattable_pointer</ref>);</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Formats<sp/>an<sp/>argument<sp/>of<sp/>a<sp/>custom<sp/>type,<sp/>such<sp/>as<sp/>a<sp/>user-defined<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Formatter&gt;</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>format_custom_arg(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>arg,</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context::parse_context_type&amp;<sp/>parse_ctx,</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Context&amp;<sp/>ctx)<sp/>{</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>Formatter();</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/>parse_ctx.advance_to(f.parse(parse_ctx));</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>qualified_type<sp/>=</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conditional_t&lt;has_const_formatter&lt;T,<sp/>Context&gt;(),<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T,<sp/>T&gt;;</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx.advance_to(f.format(*</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">qualified_type*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(arg),<sp/>ctx));</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1284"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>make_arg(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>-&gt;<sp/><ref refid="classbasic__format__arg" kindref="compound">basic_format_arg&lt;Context&gt;</ref>;</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>minimize<sp/>the<sp/>number<sp/>of<sp/>types<sp/>we<sp/>need<sp/>to<sp/>deal<sp/>with,<sp/>long<sp/>is<sp/>translated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight><highlight class="comment">//<sp/>either<sp/>to<sp/>int<sp/>or<sp/>to<sp/>long<sp/>long<sp/>depending<sp/>on<sp/>its<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>long_short<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(long)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>};</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>long_type<sp/>=<sp/>conditional_t&lt;long_short,<sp/>int,<sp/>long<sp/>long&gt;;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ulong_type<sp/>=<sp/>conditional_t&lt;long_short,<sp/>unsigned,<sp/>unsigned<sp/>long<sp/>long&gt;;</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Maps<sp/>formatting<sp/>arguments<sp/>to<sp/>core<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight><highlight class="comment">//<sp/>arg_mapper<sp/>reports<sp/>errors<sp/>by<sp/>returning<sp/>unformattable<sp/>instead<sp/>of<sp/>using</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight><highlight class="comment">//<sp/>static_assert<sp/>because<sp/>it&apos;s<sp/>used<sp/>in<sp/>the<sp/>is_formattable<sp/>trait.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1298" refid="structarg__mapper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structarg__mapper" kindref="compound">arg_mapper</ref><sp/>{</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>char_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context::char_type;</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>val)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;<sp/>}</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>val)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>val)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;<sp/>}</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>val)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>val)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;<sp/>}</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>val)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;<sp/>}</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val)<sp/>-&gt;<sp/>long_type<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;<sp/>}</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val)<sp/>-&gt;<sp/>ulong_type<sp/>{</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;<sp/>}</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>val)</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(int128_t<sp/>val)<sp/>-&gt;<sp/>int128_t<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;<sp/>}</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(uint128_t<sp/>val)<sp/>-&gt;<sp/>uint128_t<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;<sp/>}</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>val)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;<sp/>}</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>FMT_ENABLE_IF(std::is_same&lt;T,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">&gt;::value<sp/>||</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;T,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">_type&gt;::value)&gt;</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(T<sp/>val)<sp/>-&gt;<sp/>char_type<sp/>{</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>enable_if_t&lt;(std::is_same&lt;T,<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">&gt;::value<sp/>||</highlight></codeline>
<codeline lineno="1330"><highlight class="normal">#ifdef<sp/>__cpp_</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">8_t</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;T,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">8_t&gt;::value<sp/>||</highlight></codeline>
<codeline lineno="1332"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;T,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">16_t&gt;::value<sp/>||</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;T,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">32_t&gt;::value)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_same&lt;T,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">_type&gt;::value,</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;<sp/>=<sp/>0&gt;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(T)<sp/>-&gt;<sp/><ref refid="structunformattable__char" kindref="compound">unformattable_char</ref><sp/>{</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;<sp/>}</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;<sp/>}</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(char_type*<sp/>val)<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>char_type*<sp/>{</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>char_type*<sp/>val)<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>char_type*<sp/>{</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ENABLE_IF(<ref refid="structis__string" kindref="compound">is_string&lt;T&gt;::value</ref><sp/>&amp;&amp;<sp/>!std::is_pointer&lt;T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;char_type,<sp/>char_t&lt;T&gt;&gt;::<ref refid="classvalue" kindref="compound">value</ref>)&gt;</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>val)</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;char_type&gt;</ref><sp/>{</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>to_string_view(val);</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ENABLE_IF(<ref refid="structis__string" kindref="compound">is_string&lt;T&gt;::value</ref><sp/>&amp;&amp;<sp/>!std::is_pointer&lt;T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_same&lt;char_type,<sp/>char_t&lt;T&gt;&gt;::<ref refid="classvalue" kindref="compound">value</ref>)&gt;</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;)<sp/>-&gt;<sp/><ref refid="structunformattable__char" kindref="compound">unformattable_char</ref><sp/>{</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ENABLE_IF(</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_constructible&lt;<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;char_type&gt;</ref>,<sp/>T&gt;::<ref refid="classvalue" kindref="compound">value</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="structis__string" kindref="compound">is_string&lt;T&gt;::value</ref><sp/>&amp;&amp;<sp/>!has_formatter&lt;T,<sp/>Context&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!has_fallback_formatter&lt;T,<sp/>char_type&gt;::value)&gt;</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>val)</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;char_type&gt;</ref><sp/>{</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;char_type&gt;</ref>(val);</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ENABLE_IF(</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_constructible&lt;<ref refid="structstd__string__view" kindref="compound">std_string_view&lt;char_type&gt;</ref>,<sp/>T&gt;::<ref refid="classvalue" kindref="compound">value</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_constructible&lt;<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;char_type&gt;</ref>,<sp/>T&gt;::<ref refid="classvalue" kindref="compound">value</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="structis__string" kindref="compound">is_string&lt;T&gt;::value</ref><sp/>&amp;&amp;<sp/>!has_formatter&lt;T,<sp/>Context&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!has_fallback_formatter&lt;T,<sp/>char_type&gt;::value)&gt;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>val)</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;char_type&gt;</ref><sp/>{</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structstd__string__view" kindref="compound">std_string_view&lt;char_type&gt;</ref>(val);</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>cstring_result<sp/>=<sp/>conditional_t&lt;std::is_same&lt;char_type,<sp/>char&gt;::value,</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/><ref refid="structunformattable__pointer" kindref="compound">unformattable_pointer</ref>&gt;;</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/>FMT_DEPRECATED<sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>val)</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>cstring_result<sp/>{</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>map(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(val));</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/>FMT_DEPRECATED<sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>val)</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>cstring_result<sp/>{</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>map(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(val));</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/>FMT_DEPRECATED<sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>val)</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>cstring_result<sp/>{</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>map(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(val));</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/>FMT_DEPRECATED<sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>val)</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/>cstring_result<sp/>{</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>map(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(val));</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>val)<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;<sp/>}</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>val)<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>{</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(std::nullptr_t<sp/>val)<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>{</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>use<sp/>SFINAE<sp/>instead<sp/>of<sp/>a<sp/>const<sp/>T*<sp/>parameter<sp/>to<sp/>avoid<sp/>conflicting<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>C<sp/>array<sp/>overload.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ENABLE_IF(</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_member_pointer&lt;T&gt;::value<sp/>||</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_function&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_pointer&lt;T&gt;::type&gt;::<ref refid="classvalue" kindref="compound">value</ref><sp/>||</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(std::is_convertible&lt;const<sp/>T&amp;,<sp/>const<sp/>void*&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_convertible&lt;const<sp/>T&amp;,<sp/>const<sp/>char_type*&gt;::value))&gt;</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;)<sp/>-&gt;<sp/><ref refid="structunformattable__pointer" kindref="compound">unformattable_pointer</ref><sp/>{</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>std::size_t<sp/>N,</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ENABLE_IF(!std::is_same&lt;T,<sp/>wchar_t&gt;::value)&gt;</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>(&amp;values)[N])<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>(&amp;)[N]<sp/>{</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values;</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ENABLE_IF(</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_enum&lt;T&gt;::value&amp;&amp;<sp/>std::is_convertible&lt;T,<sp/>int&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!has_formatter&lt;T,<sp/>Context&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!has_fallback_formatter&lt;T,<sp/>char_type&gt;::value)&gt;</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>val)</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(std::declval&lt;arg_mapper&gt;().map(</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">typename<sp/>std::underlying_type&lt;T&gt;::type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(val)))<sp/>{</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>map(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">typename<sp/>std::underlying_type&lt;T&gt;::type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(val));</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(<ref refid="group__gtx__raw__data_1gacd7fe1f2ad60a57f7d7ad4f1e6836efd" kindref="member">detail::byte</ref><sp/>val)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>map(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(val));</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U<sp/>=<sp/>remove_cvref_t&lt;T&gt;&gt;</highlight></codeline>
<codeline lineno="1450" refid="structarg__mapper_1_1formattable" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structarg__mapper_1_1formattable" kindref="compound">formattable</ref></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>bool_constant&lt;has_const_formatter&lt;U,<sp/>Context&gt;()<sp/>||</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_const&lt;remove_reference_t&lt;T&gt;&gt;::value<sp/>||</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>has_fallback_formatter&lt;U,<sp/>char_type&gt;::value&gt;<sp/>{};</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_MSC_VER<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>FMT_MSC_VER<sp/>&lt;<sp/>1910</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Workaround<sp/>a<sp/>bug<sp/>in<sp/>MSVC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>do_map(T&amp;&amp;<sp/>val)<sp/>-&gt;<sp/>T&amp;<sp/>{</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>FMT_ENABLE_IF(formattable&lt;T&gt;::value)&gt;</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>do_map(T&amp;&amp;<sp/>val)<sp/>-&gt;<sp/>T&amp;<sp/>{</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>FMT_ENABLE_IF(!formattable&lt;T&gt;::value)&gt;</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>do_map(T&amp;&amp;)<sp/>-&gt;<sp/><ref refid="structunformattable__const" kindref="compound">unformattable_const</ref><sp/>{</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U<sp/>=<sp/>remove_cvref_t&lt;T&gt;,</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ENABLE_IF(!is_</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&lt;U&gt;::value<sp/>&amp;&amp;<sp/>!is_</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">&lt;U&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_array&lt;U&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(has_formatter&lt;U,<sp/>Context&gt;::value<sp/>||</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>has_fallback_formatter&lt;U,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">_type&gt;::value))&gt;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(T&amp;&amp;<sp/>val)</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(this-&gt;do_map(std::forward&lt;T&gt;(val)))<sp/>{</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>do_map(std::forward&lt;T&gt;(val));</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/>FMT_ENABLE_IF(is_named_arg&lt;T&gt;::value)&gt;</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="structnamed__arg" kindref="compound">named_arg</ref>)</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(std::declval&lt;arg_mapper&gt;().map(<ref refid="structnamed__arg" kindref="compound">named_arg</ref>.value))<sp/>{</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>map(<ref refid="structnamed__arg" kindref="compound">named_arg</ref>.value);</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>map(...)<sp/>-&gt;<sp/><ref refid="structunformattable" kindref="compound">unformattable</ref><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};<sp/>}</highlight></codeline>
<codeline lineno="1488"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>type<sp/>constant<sp/>after<sp/>applying<sp/>arg_mapper&lt;Context&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context&gt;</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structtype__constant" kindref="compound">mapped_type_constant</ref><sp/>=</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtype__constant" kindref="compound">type_constant&lt;decltype(arg_mapper&lt;Context&gt;</ref>().map(std::declval&lt;const<sp/>T&amp;&gt;())),</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context::char_type&gt;;</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>packed_arg_bits<sp/>=<sp/>4<sp/>};</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Maximum<sp/>number<sp/>of<sp/>arguments<sp/>with<sp/>packed<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>max_packed_args<sp/>=<sp/>62<sp/>/<sp/>packed_arg_bits<sp/>};</highlight></codeline>
<codeline lineno="1499"><highlight class="normal">enum<sp/>:<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>{<sp/>is_unpacked_bit<sp/>=<sp/>1ULL<sp/>&lt;&lt;<sp/>63<sp/>};</highlight></codeline>
<codeline lineno="1500"><highlight class="normal">enum<sp/>:<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>{<sp/>has_named_args_bit<sp/>=<sp/>1ULL<sp/>&lt;&lt;<sp/>62<sp/>};</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal">FMT_END_DETAIL_NAMESPACE</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>output<sp/>iterator<sp/>that<sp/>appends<sp/>to<sp/>a<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>used<sp/>to<sp/>reduce<sp/>symbol<sp/>sizes<sp/>for<sp/>the<sp/>common<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1506" refid="classappender" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classappender" kindref="compound">appender</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::back_insert_iterator&lt;detail::buffer&lt;char&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>base<sp/>=<sp/>std::back_insert_iterator&lt;detail::buffer&lt;char&gt;&gt;;</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get_buffer(<ref refid="classappender" kindref="compound">appender</ref><sp/>out)<sp/>-&gt;<sp/>detail::buffer&lt;char&gt;&amp;<sp/>{</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::get_container(out);</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::back_insert_iterator&lt;detail::buffer&lt;char&gt;&gt;::back_insert_iterator;</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><ref refid="classappender" kindref="compound">appender</ref>(base<sp/>it)<sp/>FMT_NOEXCEPT<sp/>:<sp/>base(it)<sp/>{}</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classappender" kindref="compound">_Unchecked_type</ref><sp/>=<sp/><ref refid="classappender" kindref="compound">appender</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>iterator<sp/>as<sp/>checked.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator++()<sp/>FMT_NOEXCEPT<sp/>-&gt;<sp/><ref refid="classappender" kindref="compound">appender</ref>&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator++(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>FMT_NOEXCEPT<sp/>-&gt;<sp/><ref refid="classappender" kindref="compound">appender</ref><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1522"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>formatting<sp/>argument.<sp/>It<sp/>is<sp/>a<sp/>trivially<sp/>copyable/constructible<sp/>type<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight><highlight class="comment">//<sp/>allow<sp/>storage<sp/>in<sp/>basic_memory_buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1526" refid="classbasic__format__arg" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbasic__format__arg" kindref="compound">basic_format_arg</ref><sp/>{</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/>detail::value&lt;Context&gt;<sp/>value_;</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/>detail::type<sp/>type_;</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ContextType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>detail::make_arg(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="classvalue" kindref="compound">value</ref>)</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/><ref refid="classbasic__format__arg" kindref="compound">basic_format_arg&lt;ContextType&gt;</ref>;</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Visitor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Ctx&gt;</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>visit_format_arg(Visitor&amp;&amp;<sp/>vis,</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__arg" kindref="compound">basic_format_arg&lt;Ctx&gt;</ref>&amp;<sp/>arg)</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(vis(0));</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbasic__format__args" kindref="compound">basic_format_args</ref>&lt;Context&gt;;</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdynamic__format__arg__store" kindref="compound">dynamic_format_arg_store</ref>&lt;Context&gt;;</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>char_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context::char_type;</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>NUM_ARGS,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>NUM_NAMED_ARGS&gt;</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">detail::arg_data;</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><ref refid="classbasic__format__arg" kindref="compound">basic_format_arg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>detail::named_arg_info&lt;char_type&gt;*<sp/>args,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>value_(args,<sp/>size)<sp/>{}</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1552" refid="classbasic__format__arg_1_1handle" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbasic__format__arg_1_1handle" kindref="compound">handle</ref><sp/>{</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__arg_1_1handle" kindref="compound">handle</ref>(detail::custom_value&lt;Context&gt;<sp/>custom)<sp/>:<sp/>custom_(custom)<sp/>{}</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>format(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context::parse_context_type&amp;<sp/>parse_ctx,</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Context&amp;<sp/>ctx)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>custom_.format(custom_.value,<sp/>parse_ctx,<sp/>ctx);</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::custom_value&lt;Context&gt;<sp/>custom_;</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__arg" kindref="compound">basic_format_arg</ref>()<sp/>:<sp/>type_(detail::type::none_type)<sp/>{}</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()<sp/>const<sp/>FMT_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_<sp/>!=<sp/>detail::type::none_type;</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>type()<sp/>const<sp/>-&gt;<sp/>detail::type<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_;<sp/>}</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structis__integral" kindref="compound">is_integral</ref>()<sp/>const<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::is_integral_type(type_);<sp/>}</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>is_arithmetic()<sp/>const<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::is_arithmetic_type(type_);</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1577"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Visitor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context&gt;</highlight></codeline>
<codeline lineno="1587"><highlight class="normal">FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>visit_format_arg(</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/>Visitor&amp;&amp;<sp/>vis,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__arg" kindref="compound">basic_format_arg&lt;Context&gt;</ref>&amp;<sp/>arg)<sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(vis(0))<sp/>{</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(arg.type_)<sp/>{</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::none_type:</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::int_type:</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vis(arg.value_.int_value);</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::uint_type:</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vis(arg.value_.uint_value);</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::long_long_type:</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vis(arg.value_.long_long_value);</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::ulong_long_type:</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vis(arg.value_.ulong_long_value);</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::int128_type:</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vis(detail::convert_for_visit(arg.value_.int128_value));</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::uint128_type:</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vis(detail::convert_for_visit(arg.value_.uint128_value));</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::bool_type:</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vis(arg.value_.bool_value);</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::char_type:</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vis(arg.value_.char_value);</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::float_type:</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vis(arg.value_.float_value);</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::double_type:</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vis(arg.value_.double_value);</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::long_double_type:</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vis(arg.value_.long_double_value);</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::cstring_type:</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vis(arg.value_.string.data);</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::string_type:</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>sv<sp/>=<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;typename Context::char_type&gt;</ref>;</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vis(sv(arg.value_.string.data,<sp/>arg.value_.string.size));</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::pointer_type:</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vis(arg.value_.pointer);</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::custom_type:</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vis(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__arg_1_1handle" kindref="compound">basic_format_arg&lt;Context&gt;::handle</ref>(arg.value_.custom));</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vis(<ref refid="structmonostate" kindref="compound">monostate</ref>());</highlight></codeline>
<codeline lineno="1625"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight></codeline>
<codeline lineno="1627"><highlight class="normal">FMT_BEGIN_DETAIL_NAMESPACE</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputIt&gt;</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>copy_str(InputIt<sp/>begin,<sp/>InputIt<sp/>end,<sp/><ref refid="classappender" kindref="compound">appender</ref><sp/>out)<sp/>-&gt;<sp/><ref refid="classappender" kindref="compound">appender</ref><sp/>{</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/>get_container(out).append(begin,<sp/>end);</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="1633"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_GCC_VERSION<sp/>&amp;&amp;<sp/>FMT_GCC_VERSION<sp/>&lt;<sp/>500</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>workaround<sp/>for<sp/>gcc<sp/>4.8<sp/>to<sp/>make<sp/>void_t<sp/>work<sp/>in<sp/>a<sp/>SFINAE<sp/>context.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">void_t_impl<sp/>{<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>void;<sp/>};</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>void_t<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>detail::void_t_impl&lt;Ts...&gt;::type;</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>void_t<sp/>=<sp/>void;</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>It,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Enable<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="1645" refid="structis__output__iterator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__output__iterator" kindref="compound">is_output_iterator</ref><sp/>:<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>It,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1648" refid="structis__output__iterator_3_01_it_00_01_t_00_01void__t_3_01typename_01std_1_1iterator__traits_384cf523dd4e4d9030033492a363e38c5" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__output__iterator" kindref="compound">is_output_iterator</ref>&lt;</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/>It,<sp/>T,</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/>void_t&lt;typename<sp/>std::iterator_traits&lt;It&gt;::iterator_category,</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(*std::declval&lt;It&gt;()<sp/>=<sp/>std::declval&lt;T&gt;())&gt;&gt;</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"></highlight></codeline>
<codeline lineno="1654"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt&gt;</highlight></codeline>
<codeline lineno="1655" refid="structis__back__insert__iterator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__back__insert__iterator" kindref="compound">is_back_insert_iterator</ref><sp/>:<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="1657" refid="structis__back__insert__iterator_3_01std_1_1back__insert__iterator_3_01_container_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__back__insert__iterator" kindref="compound">is_back_insert_iterator&lt;std::back_insert_iterator&lt;Container&gt;</ref>&gt;</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt&gt;</highlight></codeline>
<codeline lineno="1661" refid="structis__contiguous__back__insert__iterator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__contiguous__back__insert__iterator" kindref="compound">is_contiguous_back_insert_iterator</ref><sp/>:<sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Container&gt;</highlight></codeline>
<codeline lineno="1663" refid="structis__contiguous__back__insert__iterator_3_01std_1_1back__insert__iterator_3_01_container_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__contiguous__back__insert__iterator" kindref="compound">is_contiguous_back_insert_iterator</ref>&lt;std::back_insert_iterator&lt;Container&gt;&gt;</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="structis__contiguous" kindref="compound">is_contiguous</ref>&lt;Container&gt;<sp/>{};</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="1666" refid="structis__contiguous__back__insert__iterator_3_01appender_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__contiguous__back__insert__iterator" kindref="compound">is_contiguous_back_insert_iterator</ref>&lt;<ref refid="classappender" kindref="compound">appender</ref>&gt;<sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>type-erased<sp/>reference<sp/>to<sp/>an<sp/>std::locale<sp/>to<sp/>avoid<sp/>heavy<sp/>&lt;locale&gt;<sp/>include.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1669" refid="classlocale__ref" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classlocale__ref" kindref="compound">locale_ref</ref><sp/>{</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>locale_;<sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>type-erased<sp/>pointer<sp/>to<sp/>std::locale.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="classlocale__ref" kindref="compound">locale_ref</ref>()<sp/>:<sp/>locale_(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Locale&gt;<sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classlocale__ref" kindref="compound">locale_ref</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Locale&amp;<sp/>loc);</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FMT_NOEXCEPT<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>locale_<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Locale&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/>Locale;</highlight></codeline>
<codeline lineno="1680"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>encode_types()<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1684"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Arg,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>encode_types()<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structtype__constant" kindref="compound">mapped_type_constant&lt;Arg, Context&gt;::value</ref>)<sp/>|</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(encode_types&lt;Context,<sp/>Args...&gt;()<sp/>&lt;&lt;<sp/>packed_arg_bits);</highlight></codeline>
<codeline lineno="1690"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1693"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>make_arg(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>-&gt;<sp/><ref refid="classbasic__format__arg" kindref="compound">basic_format_arg&lt;Context&gt;</ref><sp/>{</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><ref refid="classbasic__format__arg" kindref="compound">basic_format_arg&lt;Context&gt;</ref><sp/>arg;</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/>arg.type_<sp/>=<sp/><ref refid="structtype__constant" kindref="compound">mapped_type_constant&lt;T, Context&gt;::value</ref>;</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/>arg.value_<sp/>=<sp/><ref refid="structarg__mapper" kindref="compound">arg_mapper&lt;Context&gt;</ref>().map(<ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg;</highlight></codeline>
<codeline lineno="1698"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>type<sp/>template<sp/>parameter<sp/>is<sp/>there<sp/>to<sp/>avoid<sp/>an<sp/>ODR<sp/>violation<sp/>when<sp/>using</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>fallback<sp/>formatter<sp/>in<sp/>one<sp/>translation<sp/>unit<sp/>and<sp/>an<sp/>implicit<sp/>conversion<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight><highlight class="comment">//<sp/>another<sp/>(not<sp/>recommended).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IS_PACKED,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context,<sp/>type,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ENABLE_IF(IS_PACKED)&gt;</highlight></codeline>
<codeline lineno="1705"><highlight class="normal">FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>make_arg(T&amp;&amp;<sp/>val)<sp/>-&gt;<sp/><ref refid="classvalue" kindref="compound">value&lt;Context&gt;</ref><sp/>{</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>arg<sp/>=<sp/><ref refid="structarg__mapper" kindref="compound">arg_mapper&lt;Context&gt;</ref>().map(std::forward&lt;T&gt;(val));</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>formattable_char<sp/>=</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_same&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(arg),<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structunformattable__char" kindref="compound">unformattable_char</ref>&amp;&gt;::<ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(formattable_char,<sp/></highlight><highlight class="stringliteral">&quot;Mixing<sp/>character<sp/>types<sp/>is<sp/>disallowed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>formattable_const<sp/>=</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_same&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(arg),<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structunformattable__const" kindref="compound">unformattable_const</ref>&amp;&gt;::<ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(formattable_const,<sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>format<sp/>a<sp/>const<sp/>argument.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"></highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Formatting<sp/>of<sp/>arbitrary<sp/>pointers<sp/>is<sp/>disallowed.<sp/>If<sp/>you<sp/>want<sp/>to<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>pointer<sp/>cast<sp/>it<sp/>to<sp/>&quot;void<sp/>*&quot;<sp/>or<sp/>&quot;const<sp/>void<sp/>*&quot;.<sp/>In<sp/>particular,<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>forbids<sp/>formatting<sp/>of<sp/>&quot;[const]<sp/>volatile<sp/>char<sp/>*&quot;<sp/>which<sp/>is<sp/>printed<sp/>as<sp/>bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>by<sp/>iostreams.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>formattable_pointer<sp/>=</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_same&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(arg),<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structunformattable__pointer" kindref="compound">unformattable_pointer</ref>&amp;&gt;::<ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(formattable_pointer,</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Formatting<sp/>of<sp/>non-void<sp/>pointers<sp/>is<sp/>disallowed.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>formattable<sp/>=</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_same&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(arg),<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structunformattable" kindref="compound">unformattable</ref>&amp;&gt;::<ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>formattable,</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>format<sp/>an<sp/>argument.<sp/>To<sp/>make<sp/>type<sp/>T<sp/>formattable<sp/>provide<sp/>a<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;formatter&lt;T&gt;<sp/>specialization:<sp/>https://fmt.dev/latest/api.html#udt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{arg};</highlight></codeline>
<codeline lineno="1732"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"></highlight></codeline>
<codeline lineno="1734"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IS_PACKED,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context,<sp/>type,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ENABLE_IF(!IS_PACKED)&gt;</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>make_arg(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>-&gt;<sp/><ref refid="classbasic__format__arg" kindref="compound">basic_format_arg&lt;Context&gt;</ref><sp/>{</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>make_arg&lt;Context&gt;(<ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="1738"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1739"><highlight class="normal">FMT_END_DETAIL_NAMESPACE</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"></highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formatting<sp/>context.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1742" refid="classbasic__format__context" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbasic__format__context" kindref="compound">basic_format_context</ref><sp/>{</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1745" refid="classbasic__format__context_1a71fea7d34edb618df612644dfd02a896" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__context_1a71fea7d34edb618df612644dfd02a896" kindref="member">char_type</ref><sp/>=<sp/>Char;</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"></highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/>OutputIt<sp/>out_;</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><ref refid="classbasic__format__args" kindref="compound">basic_format_args&lt;basic_format_context&gt;</ref><sp/>args_;</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/>detail::locale_ref<sp/>loc_;</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"></highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>iterator<sp/>=<sp/>OutputIt;</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__arg" kindref="compound">format_arg</ref><sp/>=<sp/><ref refid="classbasic__format__arg" kindref="compound">basic_format_arg&lt;basic_format_context&gt;</ref>;</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__parse__context" kindref="compound">parse_context_type</ref><sp/>=<sp/><ref refid="classbasic__format__parse__context" kindref="compound">basic_format_parse_context&lt;Char&gt;</ref>;</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structformatter" kindref="compound">formatter_type</ref><sp/>=<sp/><ref refid="structformatter" kindref="compound">formatter&lt;T, char_type&gt;</ref>;</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"></highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><ref refid="classbasic__format__context" kindref="compound">basic_format_context</ref>(<ref refid="classbasic__format__context" kindref="compound">basic_format_context</ref>&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><ref refid="classbasic__format__context" kindref="compound">basic_format_context</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__context" kindref="compound">basic_format_context</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__context" kindref="compound">basic_format_context</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1765" refid="classbasic__format__context_1ac67f872e1b934d196fd3771773103339" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__context_1ac67f872e1b934d196fd3771773103339" kindref="member">basic_format_context</ref>(</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>OutputIt<sp/>out,<sp/><ref refid="classbasic__format__args" kindref="compound">basic_format_args&lt;basic_format_context&gt;</ref><sp/>ctx_args,</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>detail::locale_ref<sp/>loc<sp/>=<sp/>detail::locale_ref())</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>out_(out),<sp/>args_(ctx_args),<sp/>loc_(loc)<sp/>{}</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>arg(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/>format_arg<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>args_.<ref refid="classbasic__format__args_1a3339d3a4e4daaf7bb0de1a8084e7f086" kindref="member">get</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>arg(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;char_type&gt;</ref><sp/>name)<sp/>-&gt;<sp/>format_arg<sp/>{</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>args_.<ref refid="classbasic__format__args_1a3339d3a4e4daaf7bb0de1a8084e7f086" kindref="member">get</ref>(name);</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>arg_id(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;char_type&gt;</ref><sp/>name)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>args_.get_id(name);</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>args()<sp/>const<sp/>-&gt;<sp/>const<sp/><ref refid="classbasic__format__args" kindref="compound">basic_format_args</ref>&lt;<ref refid="classbasic__format__context" kindref="compound">basic_format_context</ref>&gt;&amp;<sp/>{</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>args_;</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"></highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structerror__handler" kindref="compound">error_handler</ref>()<sp/>-&gt;<sp/>detail::error_handler<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{};<sp/>}</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_error(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message)<sp/>{<sp/><ref refid="structerror__handler" kindref="compound">error_handler</ref>().on_error(message);<sp/>}</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>an<sp/>iterator<sp/>to<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>output<sp/>range.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out()<sp/>-&gt;<sp/>iterator<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out_;<sp/>}</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Advances<sp/>the<sp/>begin<sp/>iterator<sp/>to<sp/>``it``.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>advance_to(iterator<sp/>it)<sp/>{</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!detail::is_back_insert_iterator&lt;iterator&gt;())<sp/>out_<sp/>=<sp/>it;</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>locale()<sp/>-&gt;<sp/>detail::locale_ref<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>loc_;<sp/>}</highlight></codeline>
<codeline lineno="1793"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"></highlight></codeline>
<codeline lineno="1795"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__context" kindref="compound">buffer_context</ref><sp/>=</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbasic__format__context" kindref="compound">basic_format_context&lt;detail::buffer_appender&lt;Char&gt;</ref>,<sp/>Char&gt;;</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__context" kindref="compound">format_context</ref><sp/>=<sp/><ref refid="classbasic__format__context" kindref="compound">buffer_context&lt;char&gt;</ref>;</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"></highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Workaround<sp/>an<sp/>alias<sp/>issue:<sp/>https://stackoverflow.com/q/62767544/471164.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMT_BUFFER_CONTEXT(Char)<sp/>\</highlight></codeline>
<codeline lineno="1802"><highlight class="preprocessor"><sp/><sp/>basic_format_context&lt;detail::buffer_appender&lt;Char&gt;,<sp/>Char&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char<sp/>=<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>is_formattable<sp/>=<sp/>bool_constant&lt;</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/>!std::is_base_of&lt;detail::unformattable,</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(detail::arg_mapper&lt;buffer_context&lt;Char&gt;&gt;().map(</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::declval&lt;T&gt;()))&gt;<ref refid="classvalue" kindref="compound">::value</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/>!detail::has_fallback_formatter&lt;T,<sp/>Char&gt;::value&gt;;</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="1819" refid="classformat__arg__store" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classformat__arg__store" kindref="compound">format_arg_store</ref></highlight></codeline>
<codeline lineno="1820"><highlight class="normal">#if<sp/>FMT_GCC_VERSION<sp/>&amp;&amp;<sp/>FMT_GCC_VERSION<sp/>&lt;<sp/>409</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Workaround<sp/>a<sp/>GCC<sp/>template<sp/>argument<sp/>substitution<sp/>bug.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__args" kindref="compound">basic_format_args&lt;Context&gt;</ref></highlight></codeline>
<codeline lineno="1823"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_args<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args);</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_named_args<sp/>=<sp/>detail::count_named_args&lt;Args...&gt;();</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_packed<sp/>=<sp/>num_args<sp/>&lt;=<sp/>detail::max_packed_args;</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>value_type<sp/>=<sp/>conditional_t&lt;is_packed,<sp/>detail::value&lt;Context&gt;,</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbasic__format__arg" kindref="compound">basic_format_arg&lt;Context&gt;</ref>&gt;;</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/>detail::arg_data&lt;value_type,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context::char_type,<sp/>num_args,</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_named_args&gt;</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data_;</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"></highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbasic__format__args" kindref="compound">basic_format_args</ref>&lt;Context&gt;;</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>desc<sp/>=</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(is_packed<sp/>?<sp/>detail::encode_types&lt;Context,<sp/>Args...&gt;()</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>detail::is_unpacked_bit<sp/>|<sp/>num_args)<sp/>|</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(num_named_args<sp/>!=<sp/>0</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(detail::has_named_args_bit)</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"></highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>T&gt;</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/>FMT_INLINE<sp/><ref refid="classformat__arg__store" kindref="compound">format_arg_store</ref>(T&amp;&amp;...<sp/>args)</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_GCC_VERSION<sp/>&amp;&amp;<sp/>FMT_GCC_VERSION<sp/>&lt;<sp/>409</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbasic__format__args" kindref="compound">basic_format_args&lt;Context&gt;</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_{detail::make_arg&lt;</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_packed,<sp/>Context,</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::mapped_type_constant&lt;remove_cvref_t&lt;T&gt;,<sp/>Context&gt;<ref refid="classvalue" kindref="compound">::value</ref>&gt;(</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;T&gt;(args))...}<sp/>{</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::init_named_args(data_.named_args(),<sp/>0,<sp/>0,<sp/>args...);</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1859"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context<sp/>=<sp/><ref refid="classbasic__format__context" kindref="compound">format_context</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>make_format_args(Args&amp;&amp;...<sp/>args)</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/><ref refid="classformat__arg__store" kindref="compound">format_arg_store&lt;Context, remove_cvref_t&lt;Args&gt;</ref>...&gt;<sp/>{</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{std::forward&lt;Args&gt;(args)...};</highlight></codeline>
<codeline lineno="1873"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>arg(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>arg)<sp/>-&gt;<sp/>detail::named_arg&lt;Char,<sp/>T&gt;<sp/>{</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(!detail::is_named_arg&lt;T&gt;(),<sp/></highlight><highlight class="stringliteral">&quot;nested<sp/>named<sp/>arguments&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{name,<sp/>arg};</highlight></codeline>
<codeline lineno="1890"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"></highlight></codeline>
<codeline lineno="1902" refid="classbasic__format__args" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Context&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbasic__format__args" kindref="compound">basic_format_args</ref><sp/>{</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>size_type<sp/>=<sp/>int;</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__arg" kindref="compound">format_arg</ref><sp/>=<sp/><ref refid="classbasic__format__arg" kindref="compound">basic_format_arg&lt;Context&gt;</ref>;</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>descriptor<sp/>that<sp/>contains<sp/>information<sp/>about<sp/>formatting<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>number<sp/>of<sp/>arguments<sp/>is<sp/>less<sp/>or<sp/>equal<sp/>to<sp/>max_packed_args<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>argument<sp/>types<sp/>are<sp/>passed<sp/>in<sp/>the<sp/>descriptor.<sp/>This<sp/>reduces<sp/>binary<sp/>code<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>per<sp/>formatting<sp/>function<sp/>call.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>desc_;</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>is_packed()<sp/>returns<sp/>true<sp/>then<sp/>argument<sp/>values<sp/>are<sp/>stored<sp/>in<sp/>values_;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise<sp/>they<sp/>are<sp/>stored<sp/>in<sp/>args_.<sp/>This<sp/>is<sp/>done<sp/>to<sp/>improve<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>locality<sp/>and<sp/>reduce<sp/>compiled<sp/>code<sp/>size<sp/>since<sp/>storing<sp/>larger<sp/>objects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>may<sp/>require<sp/>more<sp/>code<sp/>(at<sp/>least<sp/>on<sp/>x86-64)<sp/>even<sp/>if<sp/>the<sp/>same<sp/>amount<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>data<sp/>is<sp/>actually<sp/>copied<sp/>to<sp/>stack.<sp/>It<sp/>saves<sp/>~10%<sp/>on<sp/>the<sp/>bloat<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>detail::value&lt;Context&gt;*<sp/>values_;</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__arg" kindref="compound">format_arg</ref>*<sp/>args_;</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"></highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>is_packed()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(desc_<sp/>&amp;<sp/>detail::is_unpacked_bit)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>has_named_args()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(desc_<sp/>&amp;<sp/>detail::has_named_args_bit)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"></highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>type(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/>detail::type<sp/>{</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift<sp/>=<sp/>index<sp/>*<sp/>detail::packed_arg_bits;</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structmask" kindref="compound">mask</ref><sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>detail::packed_arg_bits)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">detail::type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((desc_<sp/>&gt;&gt;<sp/>shift)<sp/>&amp;<sp/><ref refid="structmask" kindref="compound">mask</ref>);</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"></highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>FMT_INLINE<sp/><ref refid="classbasic__format__args" kindref="compound">basic_format_args</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>desc,</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>detail::value&lt;Context&gt;*<sp/>values)</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>desc_(desc),<sp/>values_(values)<sp/>{}</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__args" kindref="compound">basic_format_args</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>desc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__arg" kindref="compound">format_arg</ref>*<sp/>args)</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>desc_(desc),<sp/>args_(args)<sp/>{}</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"></highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__args" kindref="compound">basic_format_args</ref>()<sp/>:<sp/>desc_(0),<sp/>args_(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"></highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="1951" refid="classbasic__format__args_1ac40bdd2deb4a1000df76553387588775" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>FMT_INLINE<sp/><ref refid="classbasic__format__args_1ac40bdd2deb4a1000df76553387588775" kindref="member">basic_format_args</ref>(</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classformat__arg__store" kindref="compound">format_arg_store&lt;Context, Args...&gt;</ref>&amp;<sp/>store)</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classbasic__format__args" kindref="compound">basic_format_args</ref>(<ref refid="classformat__arg__store" kindref="compound">format_arg_store</ref>&lt;Context,<sp/>Args...&gt;::desc,</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>store.data_.args())<sp/>{}</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"></highlight></codeline>
<codeline lineno="1962" refid="classbasic__format__args_1a69dd0f6fb0e95f42f57cc3bfb095a397" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>FMT_INLINE<sp/><ref refid="classbasic__format__args_1a69dd0f6fb0e95f42f57cc3bfb095a397" kindref="member">basic_format_args</ref>(</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdynamic__format__arg__store" kindref="compound">dynamic_format_arg_store&lt;Context&gt;</ref>&amp;<sp/>store)</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classbasic__format__args" kindref="compound">basic_format_args</ref>(store.get_types(),<sp/>store.data())<sp/>{}</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"></highlight></codeline>
<codeline lineno="1971" refid="classbasic__format__args_1a1b6a098d11577f454964b51c2d7f9027" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__args_1a1b6a098d11577f454964b51c2d7f9027" kindref="member">basic_format_args</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__arg" kindref="compound">format_arg</ref>*<sp/>args,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count)</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classbasic__format__args" kindref="compound">basic_format_args</ref>(detail::is_unpacked_bit<sp/>|<sp/>detail::to_unsigned(count),</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>args)<sp/>{}</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"></highlight></codeline>
<codeline lineno="1976" refid="classbasic__format__args_1a3339d3a4e4daaf7bb0de1a8084e7f086" refkind="member"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__args_1a3339d3a4e4daaf7bb0de1a8084e7f086" kindref="member">get</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/><ref refid="classbasic__format__arg" kindref="compound">format_arg</ref><sp/>{</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbasic__format__arg" kindref="compound">format_arg</ref><sp/>arg;</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_packed())<sp/>{</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/>max_size())<sp/>arg<sp/>=<sp/>args_[id];</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg;</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&gt;=<sp/>detail::max_packed_args)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg;</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/>arg.type_<sp/>=<sp/>type(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg.type_<sp/>==<sp/>detail::type::none_type)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg;</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/>arg.value_<sp/>=<sp/>values_[id];</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>arg;</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"></highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__args_1a3339d3a4e4daaf7bb0de1a8084e7f086" kindref="member">get</ref>(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>name)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/>format_arg<sp/>{</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>get_id(name);</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&gt;=<sp/>0<sp/>?<sp/><ref refid="classbasic__format__args_1a3339d3a4e4daaf7bb0de1a8084e7f086" kindref="member">get</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>:<sp/>format_arg();</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"></highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get_id(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>name)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!has_named_args())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>named_args<sp/>=</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(is_packed()<sp/>?<sp/>values_[-1]<sp/>:<sp/>args_[-1].value_).named_args;</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>named_args.size;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(named_args.data[i].name<sp/>==<sp/>name)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>named_args.data[i].id;</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"></highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>max_size()<sp/>const<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>max_packed<sp/>=<sp/>detail::max_packed_args;</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(is_packed()<sp/>?<sp/>max_packed</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>desc_<sp/>&amp;<sp/>~detail::is_unpacked_bit);</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2011"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"></highlight></codeline>
<codeline lineno="2014"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>separate<sp/>type<sp/>would<sp/>result<sp/>in<sp/>shorter<sp/>symbols<sp/>but<sp/>break<sp/>ABI<sp/>compatibility</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2015"><highlight class="normal"></highlight><highlight class="comment">//<sp/>between<sp/>clang<sp/>and<sp/>gcc<sp/>on<sp/>ARM<sp/>(#1919).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2016"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__args" kindref="compound">format_args</ref><sp/>=<sp/><ref refid="classbasic__format__args" kindref="compound">basic_format_args&lt;format_context&gt;</ref>;</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"></highlight></codeline>
<codeline lineno="2018"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>cannot<sp/>use<sp/>enum<sp/>classes<sp/>as<sp/>bit<sp/>fields<sp/>because<sp/>of<sp/>a<sp/>gcc<sp/>bug</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2019"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://gcc.gnu.org/bugzilla/show_bug.cgi?id=61414.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2020"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">align<sp/>{</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>type<sp/>{<sp/>none,<sp/>left,<sp/>right,<sp/>center,<sp/>numeric<sp/>};</highlight></codeline>
<codeline lineno="2022"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>align_t<sp/>=<sp/>align::type;</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="group__core__func__common_1gaf749e7f029eb88580a45493e41002629" kindref="member">sign</ref><sp/>{</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>type<sp/>{<sp/>none,<sp/>minus,<sp/>plus,<sp/>space<sp/>};</highlight></codeline>
<codeline lineno="2026"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structsign_1_1type" kindref="compound">sign_t</ref><sp/>=<sp/><ref refid="structsign_1_1type" kindref="compound">sign::type</ref>;</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"></highlight></codeline>
<codeline lineno="2029"><highlight class="normal">FMT_BEGIN_DETAIL_NAMESPACE</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"></highlight></codeline>
<codeline lineno="2031"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Workaround<sp/>an<sp/>array<sp/>initialization<sp/>issue<sp/>in<sp/>gcc<sp/>4.8.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2032" refid="structfill__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfill__t" kindref="compound">fill_t</ref><sp/>{</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>max_size<sp/>=<sp/>4<sp/>};</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/>Char<sp/>data_[max_size]<sp/>=<sp/>{Char(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">),<sp/>Char(0),<sp/>Char(0),<sp/>Char(0)};</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>size_<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"></highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator=(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>s.size();</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&gt;<sp/>max_size)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>throw_format_error(</highlight><highlight class="stringliteral">&quot;invalid<sp/>fill&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>++i)<sp/>data_[i]<sp/>=<sp/>s[i];</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/>size_<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(size);</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"></highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size_;<sp/>}</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>data()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_;<sp/>}</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator[](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>-&gt;<sp/>Char&amp;<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_[index];<sp/>}</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator[](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char&amp;<sp/>{</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_[index];</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2053"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2054"><highlight class="normal">FMT_END_DETAIL_NAMESPACE</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"></highlight></codeline>
<codeline lineno="2056"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>presentation_type<sp/>:<sp/>unsigned<sp/>char<sp/>{</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/>none,</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Integer<sp/>types<sp/>should<sp/>go<sp/>first,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/>dec,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;d&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/>oct,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;o&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/>hex_lower,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;x&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/>hex_upper,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;X&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/>bin_lower,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;b&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/>bin_upper,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;B&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/>hexfloat_lower,<sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;a&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/>hexfloat_upper,<sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;A&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/>exp_lower,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;e&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/>exp_upper,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;E&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/>fixed_lower,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;f&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/>fixed_upper,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;F&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/>general_lower,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;g&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/>general_upper,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;G&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/>chr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;c&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/>string,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;s&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/>pointer<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;p&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2076"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"></highlight></codeline>
<codeline lineno="2078"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Format<sp/>specifiers<sp/>for<sp/>built-in<sp/>and<sp/>string<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2079" refid="structbasic__format__specs" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs</ref><sp/>{</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width;</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision;</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/>presentation_type<sp/>type;</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/>align_t<sp/>align<sp/>:<sp/>4;</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><ref refid="structsign_1_1type" kindref="compound">sign_t</ref><sp/>sign<sp/>:<sp/>3;</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>alt<sp/>:<sp/>1;<sp/><sp/></highlight><highlight class="comment">//<sp/>Alternate<sp/>form<sp/>(&apos;#&apos;).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>localized<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/>detail::fill_t&lt;Char&gt;<sp/>fill;</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs</ref>()</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>width(0),</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>precision(-1),</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type(presentation_type::none),</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>align(align::none),</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sign(sign::none),</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alt(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>localized(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="2097"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"></highlight></codeline>
<codeline lineno="2099"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structbasic__format__specs" kindref="compound">format_specs</ref><sp/>=<sp/><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs&lt;char&gt;</ref>;</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"></highlight></codeline>
<codeline lineno="2101"><highlight class="normal">FMT_BEGIN_DETAIL_NAMESPACE</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"></highlight></codeline>
<codeline lineno="2103"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>arg_id_kind<sp/>{<sp/>none,<sp/>index,<sp/>name<sp/>};</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>argument<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2106" refid="structarg__ref" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structarg__ref" kindref="compound">arg_ref</ref><sp/>{</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/><ref refid="structarg__ref" kindref="compound">arg_ref</ref>()<sp/>:<sp/>kind(arg_id_kind::none),<sp/>val()<sp/>{}</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"></highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structarg__ref" kindref="compound">arg_ref</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>kind(arg_id_kind::index),<sp/>val(index)<sp/>{}</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structarg__ref" kindref="compound">arg_ref</ref>(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>name)</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>kind(arg_id_kind::name),<sp/>val(name)<sp/>{}</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"></highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator=(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx)<sp/>-&gt;<sp/><ref refid="structarg__ref" kindref="compound">arg_ref</ref>&amp;<sp/>{</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/>kind<sp/>=<sp/>arg_id_kind::index;</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/>val.index<sp/>=<sp/>idx;</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"></highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/>arg_id_kind<sp/>kind;</highlight></codeline>
<codeline lineno="2121" refid="unionarg__ref_1_1value" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal"><ref refid="unionarg__ref_1_1value" kindref="compound">value</ref><sp/>{</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_CONSTEXPR<sp/><ref refid="unionarg__ref_1_1value" kindref="compound">value</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>0)<sp/>:<sp/>index{</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">}<sp/>{}</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_CONSTEXPR<sp/><ref refid="unionarg__ref_1_1value" kindref="compound">value</ref>(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>n)<sp/>:<sp/>name(n)<sp/>{}</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"></highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>name;</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/>}<sp/>val;</highlight></codeline>
<codeline lineno="2128"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"></highlight></codeline>
<codeline lineno="2130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Format<sp/>specifiers<sp/>with<sp/>width<sp/>and<sp/>precision<sp/>resolved<sp/>at<sp/>formatting<sp/>rather</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>than<sp/>parsing<sp/>time<sp/>to<sp/>allow<sp/>re-using<sp/>the<sp/>same<sp/>parsed<sp/>specifiers<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>different<sp/>sets<sp/>of<sp/>arguments<sp/>(precompilation<sp/>of<sp/>format<sp/>strings).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2133"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="2134" refid="structdynamic__format__specs" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdynamic__format__specs" kindref="compound">dynamic_format_specs</ref><sp/>:<sp/><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs</ref>&lt;Char&gt;<sp/>{</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><ref refid="structarg__ref" kindref="compound">arg_ref&lt;Char&gt;</ref><sp/>width_ref;</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><ref refid="structarg__ref" kindref="compound">arg_ref&lt;Char&gt;</ref><sp/>precision_ref;</highlight></codeline>
<codeline lineno="2137"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"></highlight></codeline>
<codeline lineno="2139" refid="structauto__id" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structauto__id" kindref="compound">auto_id</ref><sp/>{};</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"></highlight></codeline>
<codeline lineno="2141"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>format<sp/>specifier<sp/>handler<sp/>that<sp/>sets<sp/>fields<sp/>in<sp/>basic_format_specs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2142" refid="classspecs__setter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classspecs__setter" kindref="compound">specs_setter</ref><sp/>{</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs&lt;Char&gt;</ref>&amp;<sp/>specs_;</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"></highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>FMT_CONSTEXPR<sp/><ref refid="classspecs__setter" kindref="compound">specs_setter</ref>(<ref refid="structbasic__format__specs" kindref="compound">basic_format_specs&lt;Char&gt;</ref>&amp;<sp/>specs)</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>specs_(specs)<sp/>{}</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"></highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/><ref refid="classspecs__setter" kindref="compound">specs_setter</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classspecs__setter" kindref="compound">specs_setter</ref>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>specs_(other.specs_)<sp/>{}</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"></highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_align(align_t<sp/>align)<sp/>{<sp/>specs_.align<sp/>=<sp/>align;<sp/>}</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_fill(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>fill)<sp/>{</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/>specs_.fill<sp/>=<sp/>fill;</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_sign(<ref refid="structsign_1_1type" kindref="compound">sign_t</ref><sp/>s)<sp/>{<sp/>specs_.sign<sp/>=<sp/>s;<sp/>}</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_hash()<sp/>{<sp/>specs_.alt<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_localized()<sp/>{<sp/>specs_.localized<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"></highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_zero()<sp/>{</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs_.align<sp/>==<sp/>align::none)<sp/>specs_.align<sp/>=<sp/>align::numeric;</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/>specs_.fill[0]<sp/>=<sp/>Char(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"></highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_width(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width)<sp/>{<sp/>specs_.width<sp/>=<sp/>width;<sp/>}</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_precision(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision)<sp/>{</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/>specs_.precision<sp/>=<sp/>precision;</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>end_precision()<sp/>{}</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"></highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_type(presentation_type<sp/>type)<sp/>{<sp/>specs_.type<sp/>=<sp/>type;<sp/>}</highlight></codeline>
<codeline lineno="2173"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"></highlight></codeline>
<codeline lineno="2175"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Format<sp/>spec<sp/>handler<sp/>that<sp/>saves<sp/>references<sp/>to<sp/>arguments<sp/>representing<sp/>dynamic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2176"><highlight class="normal"></highlight><highlight class="comment">//<sp/>width<sp/>and<sp/>precision<sp/>to<sp/>be<sp/>resolved<sp/>at<sp/>formatting<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2177"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ParseContext&gt;</highlight></codeline>
<codeline lineno="2178" refid="classdynamic__specs__handler" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdynamic__specs__handler" kindref="compound">dynamic_specs_handler</ref></highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classspecs__setter" kindref="compound">specs_setter</ref>&lt;typename<sp/>ParseContext::char_type&gt;<sp/>{</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>char_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ParseContext::char_type;</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"></highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/><ref refid="classdynamic__specs__handler" kindref="compound">dynamic_specs_handler</ref>(<ref refid="structdynamic__format__specs" kindref="compound">dynamic_format_specs&lt;char_type&gt;</ref>&amp;<sp/>specs,</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ParseContext&amp;<sp/>ctx)</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classspecs__setter" kindref="compound">specs_setter&lt;char_type&gt;</ref>(specs),<sp/>specs_(specs),<sp/>context_(ctx)<sp/>{}</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"></highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/><ref refid="classdynamic__specs__handler" kindref="compound">dynamic_specs_handler</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdynamic__specs__handler" kindref="compound">dynamic_specs_handler</ref>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classspecs__setter" kindref="compound">specs_setter&lt;char_type&gt;</ref>(other),</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specs_(other.specs_),</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context_(other.context_)<sp/>{}</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"></highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Id&gt;<sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_dynamic_width(Id<sp/>arg_id)<sp/>{</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/>specs_.width_ref<sp/>=<sp/>make_arg_ref(arg_id);</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"></highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Id&gt;<sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_dynamic_precision(Id<sp/>arg_id)<sp/>{</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/>specs_.precision_ref<sp/>=<sp/>make_arg_ref(arg_id);</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"></highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_error(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/>context_.on_error(message);</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"></highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><ref refid="structdynamic__format__specs" kindref="compound">dynamic_format_specs&lt;char_type&gt;</ref>&amp;<sp/>specs_;</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/>ParseContext&amp;<sp/>context_;</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"></highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarg__ref" kindref="compound">arg_ref_type</ref><sp/>=<sp/><ref refid="structarg__ref" kindref="compound">arg_ref&lt;char_type&gt;</ref>;</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"></highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>make_arg_ref(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arg_id)<sp/>-&gt;<sp/><ref refid="structarg__ref" kindref="compound">arg_ref_type</ref><sp/>{</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/>context_.check_arg_id(arg_id);</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structarg__ref" kindref="compound">arg_ref_type</ref>(arg_id);</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"></highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>make_arg_ref(<ref refid="structauto__id" kindref="compound">auto_id</ref>)<sp/>-&gt;<sp/><ref refid="structarg__ref" kindref="compound">arg_ref_type</ref><sp/>{</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structarg__ref" kindref="compound">arg_ref_type</ref>(context_.next_arg_id());</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>make_arg_ref(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;char_type&gt;</ref><sp/>arg_id)</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/><ref refid="structarg__ref" kindref="compound">arg_ref_type</ref><sp/>{</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/>context_.check_arg_id(arg_id);</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;char_type&gt;</ref><sp/>format_str(</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context_.begin(),<sp/>to_unsigned(context_.end()<sp/>-<sp/>context_.begin()));</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structarg__ref" kindref="compound">arg_ref_type</ref>(arg_id);</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2226"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"></highlight></codeline>
<codeline lineno="2228"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_ascii_letter(Char<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(c<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">)<sp/>||<sp/>(c<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>a<sp/>character<sp/>to<sp/>ASCII.<sp/>Returns<sp/>a<sp/>number<sp/>&gt;<sp/>127<sp/>on<sp/>conversion<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2233"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/>FMT_ENABLE_IF(std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral&lt;Char&gt;::value)&gt;</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>to_ascii(Char<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>-&gt;<sp/>Char<sp/>{</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="2236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/>FMT_ENABLE_IF(std::is_enum&lt;Char&gt;::value)&gt;</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>to_ascii(Char<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/>-&gt;</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::underlying_type&lt;Char&gt;::type<sp/>{</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="2241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"></highlight></codeline>
<codeline lineno="2243"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="2244"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>code_point_length(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>begin)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(const_check(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Char)<sp/>!=<sp/>1))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lengths<sp/>=</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3\3\4&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>lengths[</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*begin)<sp/>&gt;&gt;<sp/>3];</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"></highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/>next<sp/>character<sp/>early<sp/>so<sp/>that<sp/>the<sp/>next</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>iteration<sp/>can<sp/>start<sp/>working<sp/>on<sp/>the<sp/>next<sp/>character.<sp/>Neither<sp/>Clang</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>nor<sp/>GCC<sp/>figure<sp/>out<sp/>this<sp/>reordering<sp/>on<sp/>their<sp/>own.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>len<sp/>+<sp/>!len;</highlight></codeline>
<codeline lineno="2254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"></highlight></codeline>
<codeline lineno="2256"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>result<sp/>via<sp/>the<sp/>out<sp/>param<sp/>to<sp/>workaround<sp/>gcc<sp/>bug<sp/>77539.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2257"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IS_CONSTEXPR,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Ptr<sp/>=<sp/>const<sp/>T*&gt;</highlight></codeline>
<codeline lineno="2258"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>find(Ptr<sp/>first,<sp/>Ptr<sp/>last,<sp/>T<sp/><ref refid="classvalue" kindref="compound">value</ref>,<sp/>Ptr&amp;<sp/>out)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(out<sp/>=<sp/>first;<sp/>out<sp/>!=<sp/>last;<sp/>++out)<sp/>{</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*out<sp/>==<sp/><ref refid="classvalue" kindref="compound">value</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"></highlight></codeline>
<codeline lineno="2265"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>find&lt;false,<sp/>char&gt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>first,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>last,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref>,</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*&amp;<sp/>out)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/>out<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::memchr(first,<sp/><ref refid="classvalue" kindref="compound">value</ref>,<sp/>to_unsigned(last<sp/>-<sp/>first)));</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"></highlight></codeline>
<codeline lineno="2273"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parses<sp/>the<sp/>range<sp/>[begin,<sp/>end)<sp/>as<sp/>an<sp/>unsigned<sp/>integer.<sp/>This<sp/>function<sp/>assumes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2274"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>the<sp/>range<sp/>is<sp/>non-empty<sp/>and<sp/>the<sp/>first<sp/>character<sp/>is<sp/>a<sp/>digit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2275"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="2276"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parse_nonnegative_int(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*&amp;<sp/>begin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>end,</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error_value)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/>FMT_ASSERT(begin<sp/>!=<sp/>end<sp/>&amp;&amp;<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&lt;=<sp/>*begin<sp/>&amp;&amp;<sp/>*begin<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>=<sp/>0,<sp/>prev<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>begin;</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/>prev<sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref>;</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>=<sp/><ref refid="classvalue" kindref="compound">value</ref><sp/>*<sp/>10<sp/>+<sp/>unsigned(*p<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/>++p;</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p<sp/>!=<sp/>end<sp/>&amp;&amp;<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&lt;=<sp/>*p<sp/>&amp;&amp;<sp/>*p<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>num_digits<sp/>=<sp/>p<sp/>-<sp/>begin;</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/>begin<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_digits<sp/>&lt;=<sp/>std::numeric_limits&lt;int&gt;::digits10)</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classvalue" kindref="compound">value</ref>);</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>overflow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">max</ref><sp/>=<sp/>to_unsigned((<ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">std::numeric_limits&lt;int&gt;::max</ref>)());</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num_digits<sp/>==<sp/>std::numeric_limits&lt;int&gt;::digits10<sp/>+<sp/>1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prev<sp/>*<sp/>10ull<sp/>+<sp/>unsigned(p[-1]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>&lt;=<sp/><ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">max</ref></highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classvalue" kindref="compound">value</ref>)</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>error_value;</highlight></codeline>
<codeline lineno="2296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"></highlight></codeline>
<codeline lineno="2298"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parses<sp/>fill<sp/>and<sp/>alignment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2299"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Handler&gt;</highlight></codeline>
<codeline lineno="2300"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parse_align(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>begin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>end,</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Handler&amp;&amp;<sp/>handler)<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>{</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/>FMT_ASSERT(begin<sp/>!=<sp/>end,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>align<sp/>=<sp/>align::none;</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>begin<sp/>+<sp/>code_point_length(begin);</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>&gt;=<sp/>end)<sp/>p<sp/>=<sp/>begin;</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(to_ascii(*p))<sp/>{</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>align<sp/>=<sp/>align::left;</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>align<sp/>=<sp/>align::right;</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;^&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>align<sp/>=<sp/>align::center;</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(align<sp/>!=<sp/>align::none)<sp/>{</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>!=<sp/>begin)<sp/>{</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>*begin;</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handler.on_error(</highlight><highlight class="stringliteral">&quot;invalid<sp/>fill<sp/>character<sp/>&apos;{&apos;&quot;</highlight><highlight class="normal">),<sp/>begin;</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handler.on_fill(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref>(begin,<sp/>to_unsigned(p<sp/>-<sp/>begin)));</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>begin<sp/>=<sp/>p<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++begin;</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>handler.on_align(align);</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>begin)<sp/>{</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>begin;</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin;</highlight></codeline>
<codeline lineno="2337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"></highlight></codeline>
<codeline lineno="2339"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_name_start(Char<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>&lt;=<sp/>c<sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">)<sp/>||<sp/>(</highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>&lt;=<sp/>c<sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal">)<sp/>||<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal"><sp/>==<sp/>c;</highlight></codeline>
<codeline lineno="2341"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"></highlight></codeline>
<codeline lineno="2343"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IDHandler&gt;</highlight></codeline>
<codeline lineno="2344"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>do_parse_arg_id(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>begin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>end,</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDHandler&amp;&amp;<sp/>handler)<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>{</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/>FMT_ASSERT(begin<sp/>!=<sp/>end,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/>Char<sp/>c<sp/>=<sp/>*begin;</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parse_nonnegative_int(begin,<sp/>end,<sp/>(<ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">std::numeric_limits&lt;int&gt;::max</ref>)());</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++begin;</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(begin<sp/>==<sp/>end<sp/>||<sp/>(*begin<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>*begin<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>handler.on_error(</highlight><highlight class="stringliteral">&quot;invalid<sp/>format<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>handler(index);</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin;</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_name_start(c))<sp/>{</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_error(</highlight><highlight class="stringliteral">&quot;invalid<sp/>format<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin;</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>begin;</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>end<sp/>&amp;&amp;<sp/>(is_name_start(c<sp/>=<sp/>*it)<sp/>||<sp/>(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&lt;=<sp/>c<sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/>handler(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref>(begin,<sp/>to_unsigned(it<sp/>-<sp/>begin)));</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it;</highlight></codeline>
<codeline lineno="2371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"></highlight></codeline>
<codeline lineno="2373"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>IDHandler&gt;</highlight></codeline>
<codeline lineno="2374"><highlight class="normal">FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parse_arg_id(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>begin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>end,</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IDHandler&amp;&amp;<sp/>handler)<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>{</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/>Char<sp/>c<sp/>=<sp/>*begin;</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>do_parse_arg_id(begin,<sp/>end,<sp/>handler);</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/>handler();</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin;</highlight></codeline>
<codeline lineno="2380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"></highlight></codeline>
<codeline lineno="2382"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Handler&gt;</highlight></codeline>
<codeline lineno="2383"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parse_width(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>begin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>end,</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Handler&amp;&amp;<sp/>handler)<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>{</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>detail::auto_id;</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">width_adapter<sp/>{</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/>Handler&amp;<sp/>handler;</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"></highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()()<sp/>{<sp/>handler.on_dynamic_width(<ref refid="structauto__id" kindref="compound">auto_id</ref>());<sp/>}</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{<sp/>handler.on_dynamic_width(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>handler.on_dynamic_width(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_error(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(message)<sp/>handler.on_error(message);</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"></highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/>FMT_ASSERT(begin<sp/>!=<sp/>end,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&lt;=<sp/>*begin<sp/>&amp;&amp;<sp/>*begin<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>parse_nonnegative_int(begin,<sp/>end,<sp/>-1);</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(width<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>handler.on_width(width);</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>handler.on_error(</highlight><highlight class="stringliteral">&quot;number<sp/>is<sp/>too<sp/>big&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*begin<sp/>==<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/>++begin;</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(begin<sp/>!=<sp/>end)<sp/>begin<sp/>=<sp/>parse_arg_id(begin,<sp/>end,<sp/>width_adapter{handler});</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(begin<sp/>==<sp/>end<sp/>||<sp/>*begin<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handler.on_error(</highlight><highlight class="stringliteral">&quot;invalid<sp/>format<sp/>string&quot;</highlight><highlight class="normal">),<sp/>begin;</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/>++begin;</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin;</highlight></codeline>
<codeline lineno="2414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"></highlight></codeline>
<codeline lineno="2416"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Handler&gt;</highlight></codeline>
<codeline lineno="2417"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parse_precision(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>begin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>end,</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Handler&amp;&amp;<sp/>handler)<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>{</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>detail::auto_id;</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">precision_adapter<sp/>{</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/>Handler&amp;<sp/>handler;</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()()<sp/>{<sp/>handler.on_dynamic_precision(<ref refid="structauto__id" kindref="compound">auto_id</ref>());<sp/>}</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{<sp/>handler.on_dynamic_precision(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>handler.on_dynamic_precision(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_error(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(message)<sp/>handler.on_error(message);</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"></highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/>++begin;</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>begin<sp/>!=<sp/>end<sp/>?<sp/>*begin<sp/>:<sp/>Char();</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&lt;=<sp/>c<sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>precision<sp/>=<sp/>parse_nonnegative_int(begin,<sp/>end,<sp/>-1);</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(precision<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>handler.on_precision(precision);</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>handler.on_error(</highlight><highlight class="stringliteral">&quot;number<sp/>is<sp/>too<sp/>big&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/>++begin;</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(begin<sp/>!=<sp/>end)</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>begin<sp/>=<sp/>parse_arg_id(begin,<sp/>end,<sp/>precision_adapter{handler});</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(begin<sp/>==<sp/>end<sp/>||<sp/>*begin++<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handler.on_error(</highlight><highlight class="stringliteral">&quot;invalid<sp/>format<sp/>string&quot;</highlight><highlight class="normal">),<sp/>begin;</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handler.on_error(</highlight><highlight class="stringliteral">&quot;missing<sp/>precision<sp/>specifier&quot;</highlight><highlight class="normal">),<sp/>begin;</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/>handler.end_precision();</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin;</highlight></codeline>
<codeline lineno="2452"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"></highlight></codeline>
<codeline lineno="2454"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="2455"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parse_presentation_type(Char<sp/>type)<sp/>-&gt;<sp/>presentation_type<sp/>{</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(to_ascii(type))<sp/>{</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>presentation_type::dec;</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;o&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>presentation_type::oct;</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>presentation_type::hex_lower;</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;X&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>presentation_type::hex_upper;</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>presentation_type::bin_lower;</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;B&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>presentation_type::bin_upper;</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>presentation_type::hexfloat_lower;</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>presentation_type::hexfloat_upper;</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>presentation_type::exp_lower;</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;E&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>presentation_type::exp_upper;</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>presentation_type::fixed_lower;</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;F&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>presentation_type::fixed_upper;</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>presentation_type::general_lower;</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;G&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>presentation_type::general_upper;</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>presentation_type::chr;</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>presentation_type::string;</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;p&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>presentation_type::pointer;</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>presentation_type::none;</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2494"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"></highlight></codeline>
<codeline lineno="2496"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Parses<sp/>standard<sp/>format<sp/>specifiers<sp/>and<sp/>sends<sp/>notifications<sp/>about<sp/>parsed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2497"><highlight class="normal"></highlight><highlight class="comment">//<sp/>components<sp/>to<sp/>handler.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2498"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SpecHandler&gt;</highlight></codeline>
<codeline lineno="2499"><highlight class="normal">FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parse_format_specs(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>begin,</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>end,</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SpecHandler&amp;&amp;<sp/>handler)</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>{</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(1<sp/>&lt;<sp/>end<sp/>-<sp/>begin<sp/>&amp;&amp;<sp/>begin[1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>is_ascii_letter(*begin)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*begin<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;L&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/>presentation_type<sp/>type<sp/>=<sp/>parse_presentation_type(*begin++);</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>presentation_type::none)</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>handler.on_error(</highlight><highlight class="stringliteral">&quot;invalid<sp/>type<sp/>specifier&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_type(type);</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin;</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"></highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(begin<sp/>==<sp/>end)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin;</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/>begin<sp/>=<sp/>parse_align(begin,<sp/>end,<sp/>handler);</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(begin<sp/>==<sp/>end)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin;</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"></highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>sign.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(to_ascii(*begin))<sp/>{</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_sign(sign::plus);</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><sp/><sp/>++begin;</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_sign(sign::minus);</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/>++begin;</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_sign(sign::space);</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/>++begin;</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(begin<sp/>==<sp/>end)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin;</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"></highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*begin<sp/>==<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_hash();</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++begin<sp/>==<sp/>end)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin;</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"></highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>zero<sp/>flag.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*begin<sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_zero();</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++begin<sp/>==<sp/>end)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin;</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"></highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/>begin<sp/>=<sp/>parse_width(begin,<sp/>end,<sp/>handler);</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(begin<sp/>==<sp/>end)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin;</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"></highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>precision.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*begin<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/>begin<sp/>=<sp/>parse_precision(begin,<sp/>end,<sp/>handler);</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(begin<sp/>==<sp/>end)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin;</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"></highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*begin<sp/>==<sp/></highlight><highlight class="charliteral">&apos;L&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_localized();</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/>++begin;</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"></highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(begin<sp/>!=<sp/>end<sp/>&amp;&amp;<sp/>*begin<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/>presentation_type<sp/>type<sp/>=<sp/>parse_presentation_type(*begin++);</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>presentation_type::none)</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>handler.on_error(</highlight><highlight class="stringliteral">&quot;invalid<sp/>type<sp/>specifier&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_type(type);</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin;</highlight></codeline>
<codeline lineno="2569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"></highlight></codeline>
<codeline lineno="2571"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Handler&gt;</highlight></codeline>
<codeline lineno="2572"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parse_replacement_field(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>begin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>end,</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Handler&amp;&amp;<sp/>handler)<sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>{</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">id_adapter<sp/>{</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/>Handler&amp;<sp/>handler;</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>arg_id;</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"></highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()()<sp/>{<sp/>arg_id<sp/>=<sp/>handler.on_arg_id();<sp/>}</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{<sp/>arg_id<sp/>=<sp/>handler.on_arg_id(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arg_id<sp/>=<sp/>handler.on_arg_id(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_error(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(message)<sp/>handler.on_error(message);</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"></highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/>++begin;</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(begin<sp/>==<sp/>end)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handler.on_error(</highlight><highlight class="stringliteral">&quot;invalid<sp/>format<sp/>string&quot;</highlight><highlight class="normal">),<sp/>end;</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*begin<sp/>==<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_replacement_field(handler.on_arg_id(),<sp/>begin);</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*begin<sp/>==<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_text(begin,<sp/>begin<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>adapter<sp/>=<sp/>id_adapter{handler,<sp/>0};</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/>begin<sp/>=<sp/>parse_arg_id(begin,<sp/>end,<sp/>adapter);</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/>Char<sp/>c<sp/>=<sp/>begin<sp/>!=<sp/>end<sp/>?<sp/>*begin<sp/>:<sp/>Char();</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>handler.on_replacement_field(adapter.arg_id,<sp/>begin);</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>begin<sp/>=<sp/>handler.on_format_specs(adapter.arg_id,<sp/>begin<sp/>+<sp/>1,<sp/>end);</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(begin<sp/>==<sp/>end<sp/>||<sp/>*begin<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handler.on_error(</highlight><highlight class="stringliteral">&quot;unknown<sp/>format<sp/>specifier&quot;</highlight><highlight class="normal">),<sp/>end;</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handler.on_error(</highlight><highlight class="stringliteral">&quot;missing<sp/>&apos;}&apos;<sp/>in<sp/>format<sp/>string&quot;</highlight><highlight class="normal">),<sp/>end;</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2609"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"></highlight></codeline>
<codeline lineno="2611"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IS_CONSTEXPR,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Handler&gt;</highlight></codeline>
<codeline lineno="2612"><highlight class="normal">FMT_CONSTEXPR<sp/>FMT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>parse_format_string(</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>format_str,<sp/>Handler&amp;&amp;<sp/>handler)<sp/>{</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Workaround<sp/>a<sp/>name-lookup<sp/>bug<sp/>in<sp/>MSVC&apos;s<sp/>modules<sp/>implementation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>detail::find;</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"></highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>begin<sp/>=<sp/>format_str.<ref refid="classbasic__string__view_1a412831997be4db05ecb111fe51792be1" kindref="member">data</ref>();</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>begin<sp/>+<sp/>format_str.<ref refid="classbasic__string__view_1afdfceff7bfe9fdb7faf4f8bd35c3fc2c" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>-<sp/>begin<sp/>&lt;<sp/>32)<sp/>{</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>a<sp/>simple<sp/>loop<sp/>instead<sp/>of<sp/>memchr<sp/>for<sp/>small<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>p<sp/>=<sp/>begin;</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p<sp/>!=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>*p++;</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handler.on_text(begin,<sp/>p<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>begin<sp/>=<sp/>p<sp/>=<sp/>parse_replacement_field(p<sp/>-<sp/>1,<sp/>end,<sp/>handler);</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>end<sp/>||<sp/>*p<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handler.on_error(</highlight><highlight class="stringliteral">&quot;unmatched<sp/>&apos;}&apos;<sp/>in<sp/>format<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handler.on_text(begin,<sp/>p);</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>begin<sp/>=<sp/>++p;</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/>handler.on_text(begin,<sp/>end);</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">writer<sp/>{</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>pbegin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>pend)<sp/>{</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pbegin<sp/>==<sp/>pend)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>p<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!find&lt;IS_CONSTEXPR&gt;(pbegin,<sp/>pend,<sp/>Char(</highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">),<sp/>p))</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handler_.on_text(pbegin,<sp/>pend);</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++p;</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>==<sp/>pend<sp/>||<sp/>*p<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;}&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handler_.on_error(</highlight><highlight class="stringliteral">&quot;unmatched<sp/>&apos;}&apos;<sp/>in<sp/>format<sp/>string&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handler_.on_text(pbegin,<sp/>p);</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pbegin<sp/>=<sp/>p<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/><sp/><sp/>Handler&amp;<sp/>handler_;</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/>}<sp/>write{handler};</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(begin<sp/>!=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Doing<sp/>two<sp/>passes<sp/>with<sp/>memchr<sp/>(one<sp/>for<sp/>&apos;{&apos;<sp/>and<sp/>another<sp/>for<sp/>&apos;}&apos;)<sp/>is<sp/>up<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2.5x<sp/>faster<sp/>than<sp/>the<sp/>naive<sp/>one-pass<sp/>implementation<sp/>on<sp/>big<sp/>format<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>p<sp/>=<sp/>begin;</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*begin<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>!find&lt;IS_CONSTEXPR&gt;(begin<sp/>+<sp/>1,<sp/>end,<sp/>Char(</highlight><highlight class="charliteral">&apos;{&apos;</highlight><highlight class="normal">),<sp/>p))</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>write(begin,<sp/>end);</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/>write(begin,<sp/>p);</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/><sp/>begin<sp/>=<sp/>parse_replacement_field(p,<sp/>end,<sp/>handler);</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2662"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"></highlight></codeline>
<codeline lineno="2664"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ParseContext&gt;</highlight></codeline>
<codeline lineno="2665"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parse_format_specs(ParseContext&amp;<sp/>ctx)</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(ctx.begin())<sp/>{</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>char_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ParseContext::char_type;</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>context<sp/>=<sp/><ref refid="classbasic__format__context" kindref="compound">buffer_context&lt;char_type&gt;</ref>;</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>mapped_type<sp/>=<sp/>conditional_t&lt;</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtype__constant" kindref="compound">mapped_type_constant&lt;T, context&gt;::value</ref><sp/>!=<sp/>type::custom_type,</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(<ref refid="structarg__mapper" kindref="compound">arg_mapper&lt;context&gt;</ref>().map(std::declval&lt;const<sp/>T&amp;&gt;())),<sp/>T&gt;;</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>f<sp/>=<sp/>conditional_t&lt;has_formatter&lt;mapped_type,<sp/>context&gt;::value,</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structformatter" kindref="compound">formatter&lt;mapped_type, char_type&gt;</ref>,</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structfallback__formatter" kindref="compound">fallback_formatter&lt;T, char_type&gt;</ref>&gt;();</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f.parse(ctx);</highlight></codeline>
<codeline lineno="2676"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"></highlight></codeline>
<codeline lineno="2678"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>parse<sp/>context<sp/>with<sp/>extra<sp/>argument<sp/>id<sp/>checks.<sp/>It<sp/>is<sp/>only<sp/>used<sp/>at<sp/>compile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2679"><highlight class="normal"></highlight><highlight class="comment">//<sp/>time<sp/>because<sp/>adding<sp/>checks<sp/>at<sp/>runtime<sp/>would<sp/>introduce<sp/>substantial<sp/>overhead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2680"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>would<sp/>be<sp/>redundant<sp/>since<sp/>argument<sp/>ids<sp/>are<sp/>checked<sp/>when<sp/>arguments<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2681"><highlight class="normal"></highlight><highlight class="comment">//<sp/>retrieved<sp/>anyway.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2682"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ErrorHandler<sp/>=<sp/>error_handler&gt;</highlight></codeline>
<codeline lineno="2683" refid="classcompile__parse__context" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classcompile__parse__context" kindref="compound">compile_parse_context</ref></highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__parse__context" kindref="compound">basic_format_parse_context</ref>&lt;Char,<sp/>ErrorHandler&gt;<sp/>{</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_args_;</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__parse__context" kindref="compound">base</ref><sp/>=<sp/><ref refid="classbasic__format__parse__context" kindref="compound">basic_format_parse_context&lt;Char, ErrorHandler&gt;</ref>;</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"></highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>FMT_CONSTEXPR<sp/><ref refid="classcompile__parse__context" kindref="compound">compile_parse_context</ref>(</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>format_str,</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_args<sp/>=<sp/>(<ref refid="group__core__func__common_1ga98caa7f95a94c86a86ebce893a45326c" kindref="member">std::numeric_limits&lt;int&gt;::max</ref>)(),<sp/>ErrorHandler<sp/>eh<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classbasic__format__parse__context" kindref="compound">base</ref>(format_str,<sp/>eh),<sp/>num_args_(num_args)<sp/>{}</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"></highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>next_arg_id()<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/><ref refid="classbasic__format__parse__context_1a9eb66391da04f3f435cb4664fc9d9170" kindref="member">base::next_arg_id</ref>();</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&gt;=<sp/>num_args_)<sp/>this-&gt;on_error(</highlight><highlight class="stringliteral">&quot;argument<sp/>not<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"></highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_arg_id(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbasic__format__parse__context_1a7a548535000cbd315a9ac35996950eec" kindref="member">base::check_arg_id</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&gt;=<sp/>num_args_)<sp/>this-&gt;on_error(</highlight><highlight class="stringliteral">&quot;argument<sp/>not<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2705" refid="classcompile__parse__context_1a7a548535000cbd315a9ac35996950eec" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__parse__context_1a7a548535000cbd315a9ac35996950eec" kindref="member">base::check_arg_id</ref>;</highlight></codeline>
<codeline lineno="2706"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"></highlight></codeline>
<codeline lineno="2708"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ErrorHandler&gt;</highlight></codeline>
<codeline lineno="2709"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_int_type_spec(presentation_type<sp/>type,</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ErrorHandler&amp;&amp;<sp/>eh)<sp/>{</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>&gt;<sp/>presentation_type::bin_upper<sp/>&amp;&amp;<sp/>type<sp/>!=<sp/>presentation_type::chr)</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/><sp/>eh.on_error(</highlight><highlight class="stringliteral">&quot;invalid<sp/>type<sp/>specifier&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2713"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"></highlight></codeline>
<codeline lineno="2715"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Checks<sp/>char<sp/>specs<sp/>and<sp/>returns<sp/>true<sp/>if<sp/>the<sp/>type<sp/>spec<sp/>is<sp/>char<sp/>(and<sp/>not<sp/>int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2716"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ErrorHandler<sp/>=<sp/>error_handler&gt;</highlight></codeline>
<codeline lineno="2717"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>check_char_specs(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs&lt;Char&gt;</ref>&amp;<sp/>specs,</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ErrorHandler&amp;&amp;<sp/>eh<sp/>=<sp/>{})<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs.type<sp/>!=<sp/>presentation_type::none<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>specs.type<sp/>!=<sp/>presentation_type::chr)<sp/>{</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/>check_int_type_spec(specs.type,<sp/>eh);</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs.align<sp/>==<sp/>align::numeric<sp/>||<sp/>specs.sign<sp/>!=<sp/>sign::none<sp/>||<sp/>specs.alt)</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/>eh.on_error(</highlight><highlight class="stringliteral">&quot;invalid<sp/>format<sp/>specifier<sp/>for<sp/>char&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2727"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"></highlight></codeline>
<codeline lineno="2729"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>floating-point<sp/>presentation<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2730"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>float_format<sp/>:<sp/>unsigned<sp/>char<sp/>{</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/>general,<sp/><sp/></highlight><highlight class="comment">//<sp/>General:<sp/>exponent<sp/>notation<sp/>or<sp/>fixed<sp/>point<sp/>based<sp/>on<sp/>magnitude.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><ref refid="group__core__func__exponential_1gaf6342f49d902286a599ceb86036236ce" kindref="member">exp</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Exponent<sp/>notation<sp/>with<sp/>the<sp/>default<sp/>precision<sp/>of<sp/>6,<sp/>e.g.<sp/>1.2e-3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/>fixed,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fixed<sp/>point<sp/>with<sp/>the<sp/>default<sp/>precision<sp/>of<sp/>6,<sp/>e.g.<sp/>0.0012.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/>hex</highlight></codeline>
<codeline lineno="2735"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"></highlight></codeline>
<codeline lineno="2737" refid="structfloat__specs" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structfloat__specs" kindref="compound">float_specs</ref><sp/>{</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision;</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/>float_format<sp/>format<sp/>:<sp/>8;</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><ref refid="structsign_1_1type" kindref="compound">sign_t</ref><sp/>sign<sp/>:<sp/>8;</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>upper<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>locale<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>binary32<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fallback<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>showpoint<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="2746"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"></highlight></codeline>
<codeline lineno="2748"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ErrorHandler<sp/>=<sp/>error_handler,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="2749"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parse_float_type_spec(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structbasic__format__specs" kindref="compound">basic_format_specs&lt;Char&gt;</ref>&amp;<sp/>specs,</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ErrorHandler&amp;&amp;<sp/>eh<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/><ref refid="structfloat__specs" kindref="compound">float_specs</ref><sp/>{</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref><sp/>=<sp/><ref refid="structfloat__specs" kindref="compound">float_specs</ref>();</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/><ref refid="structresult" kindref="compound">result</ref>.showpoint<sp/>=<sp/>specs.alt;</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/><ref refid="structresult" kindref="compound">result</ref>.locale<sp/>=<sp/>specs.localized;</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(specs.type)<sp/>{</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>presentation_type::none:</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structresult" kindref="compound">result</ref>.format<sp/>=<sp/>float_format::general;</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>presentation_type::general_upper:</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structresult" kindref="compound">result</ref>.upper<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>presentation_type::general_lower:</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structresult" kindref="compound">result</ref>.format<sp/>=<sp/>float_format::general;</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>presentation_type::exp_upper:</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structresult" kindref="compound">result</ref>.upper<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>presentation_type::exp_lower:</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structresult" kindref="compound">result</ref>.format<sp/>=<sp/>float_format::exp;</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structresult" kindref="compound">result</ref>.showpoint<sp/>|=<sp/>specs.precision<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>presentation_type::fixed_upper:</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structresult" kindref="compound">result</ref>.upper<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>presentation_type::fixed_lower:</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structresult" kindref="compound">result</ref>.format<sp/>=<sp/>float_format::fixed;</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structresult" kindref="compound">result</ref>.showpoint<sp/>|=<sp/>specs.precision<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>presentation_type::hexfloat_upper:</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structresult" kindref="compound">result</ref>.upper<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/>FMT_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>presentation_type::hexfloat_lower:</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structresult" kindref="compound">result</ref>.format<sp/>=<sp/>float_format::hex;</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/><sp/><sp/>eh.on_error(</highlight><highlight class="stringliteral">&quot;invalid<sp/>type<sp/>specifier&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structresult" kindref="compound">result</ref>;</highlight></codeline>
<codeline lineno="2790"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"></highlight></codeline>
<codeline lineno="2792"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ErrorHandler<sp/>=<sp/>error_handler&gt;</highlight></codeline>
<codeline lineno="2793"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>check_cstring_type_spec(presentation_type<sp/>type,</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ErrorHandler&amp;&amp;<sp/>eh<sp/>=<sp/>{})<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/>presentation_type::none<sp/>||<sp/>type<sp/>==<sp/>presentation_type::string)</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>!=<sp/>presentation_type::pointer)<sp/>eh.on_error(</highlight><highlight class="stringliteral">&quot;invalid<sp/>type<sp/>specifier&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2799"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"></highlight></codeline>
<codeline lineno="2801"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ErrorHandler<sp/>=<sp/>error_handler&gt;</highlight></codeline>
<codeline lineno="2802"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_string_type_spec(presentation_type<sp/>type,</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ErrorHandler&amp;&amp;<sp/>eh<sp/>=<sp/>{})<sp/>{</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>!=<sp/>presentation_type::none<sp/>&amp;&amp;<sp/>type<sp/>!=<sp/>presentation_type::string)</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/><sp/><sp/>eh.on_error(</highlight><highlight class="stringliteral">&quot;invalid<sp/>type<sp/>specifier&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2806"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"></highlight></codeline>
<codeline lineno="2808"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ErrorHandler&gt;</highlight></codeline>
<codeline lineno="2809"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_pointer_type_spec(presentation_type<sp/>type,</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ErrorHandler&amp;&amp;<sp/>eh)<sp/>{</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>!=<sp/>presentation_type::none<sp/>&amp;&amp;<sp/>type<sp/>!=<sp/>presentation_type::pointer)</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/>eh.on_error(</highlight><highlight class="stringliteral">&quot;invalid<sp/>type<sp/>specifier&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2813"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"></highlight></codeline>
<codeline lineno="2815"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>parse_format_specs<sp/>handler<sp/>that<sp/>checks<sp/>if<sp/>specifiers<sp/>are<sp/>consistent<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2816"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>argument<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2817" refid="classspecs__checker" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Handler&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classspecs__checker" kindref="compound">specs_checker</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Handler<sp/>{</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/>detail::type<sp/>arg_type_;</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"></highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>require_numeric_argument()<sp/>{</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_arithmetic_type(arg_type_))</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;on_error(</highlight><highlight class="stringliteral">&quot;format<sp/>specifier<sp/>requires<sp/>numeric<sp/>argument&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"></highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/><ref refid="classspecs__checker" kindref="compound">specs_checker</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Handler&amp;<sp/>handler,<sp/>detail::type<sp/>arg_type)</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>Handler(handler),<sp/>arg_type_(arg_type)<sp/>{}</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"></highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_align(align_t<sp/>align)<sp/>{</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(align<sp/>==<sp/>align::numeric)<sp/>require_numeric_argument();</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/>Handler::on_align(align);</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"></highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_sign(<ref refid="structsign_1_1type" kindref="compound">sign_t</ref><sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/>require_numeric_argument();</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_integral_type(arg_type_)<sp/>&amp;&amp;<sp/>arg_type_<sp/>!=<sp/>type::int_type<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg_type_<sp/>!=<sp/>type::long_long_type<sp/>&amp;&amp;<sp/>arg_type_<sp/>!=<sp/>type::char_type)<sp/>{</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;on_error(</highlight><highlight class="stringliteral">&quot;format<sp/>specifier<sp/>requires<sp/>signed<sp/>argument&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/><sp/><sp/>Handler::on_sign(s);</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2843"><highlight class="normal"></highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_hash()<sp/>{</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/>require_numeric_argument();</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/>Handler::on_hash();</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"></highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_localized()<sp/>{</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/><sp/><sp/>require_numeric_argument();</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/><sp/>Handler::on_localized();</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"></highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_zero()<sp/>{</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/><sp/>require_numeric_argument();</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/><sp/>Handler::on_zero();</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"></highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>end_precision()<sp/>{</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_integral_type(arg_type_)<sp/>||<sp/>arg_type_<sp/>==<sp/>type::pointer_type)</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;on_error(</highlight><highlight class="stringliteral">&quot;precision<sp/>not<sp/>allowed<sp/>for<sp/>this<sp/>argument<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2863"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"></highlight></codeline>
<codeline lineno="2865"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>invalid_arg_index<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"></highlight></codeline>
<codeline lineno="2867"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_USE_NONTYPE_TEMPLATE_PARAMETERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2868"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get_arg_index_by_name(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>name)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(detail::is_statically_named_arg&lt;T&gt;())<sp/>{</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/>T::name)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>N;</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_arg_index_by_name&lt;N<sp/>+<sp/>1,<sp/>Args...&gt;(name);</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/>(void)name;<sp/><sp/></highlight><highlight class="comment">//<sp/>Workaround<sp/>an<sp/>MSVC<sp/>bug<sp/>about<sp/>&quot;unused&quot;<sp/>parameter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>invalid_arg_index;</highlight></codeline>
<codeline lineno="2877"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2879"><highlight class="normal"></highlight></codeline>
<codeline lineno="2880"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="2881"><highlight class="normal">FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>get_arg_index_by_name(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>name)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2882"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_USE_NONTYPE_TEMPLATE_PARAMETERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>get_arg_index_by_name&lt;0,<sp/>Args...&gt;(name);</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/>(void)name;</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>invalid_arg_index;</highlight></codeline>
<codeline lineno="2888"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"></highlight></codeline>
<codeline lineno="2890"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ErrorHandler,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="2891" refid="classformat__string__checker" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classformat__string__checker" kindref="compound">format_string_checker</ref><sp/>{</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classcompile__parse__context" kindref="compound">parse_context_type</ref><sp/>=<sp/><ref refid="classcompile__parse__context" kindref="compound">compile_parse_context&lt;Char, ErrorHandler&gt;</ref>;</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>num_args<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)<sp/>};</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"></highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Format<sp/>specifier<sp/>parsing<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>parse_func<sp/>=<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>(*)(<ref refid="classcompile__parse__context" kindref="compound">parse_context_type</ref>&amp;);</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"></highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><ref refid="classcompile__parse__context" kindref="compound">parse_context_type</ref><sp/>context_;</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/>parse_func<sp/>parse_funcs_[num_args<sp/>&gt;<sp/>0<sp/>?<sp/>num_args<sp/>:<sp/>1];</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"></highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>FMT_CONSTEXPR<sp/><ref refid="classformat__string__checker" kindref="compound">format_string_checker</ref>(</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>format_str,<sp/>ErrorHandler<sp/>eh)</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>context_(format_str,<sp/>num_args,<sp/>eh),</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parse_funcs_{&amp;parse_format_specs&lt;Args,<sp/>parse_context_type&gt;...}<sp/>{}</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"></highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_text(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*)<sp/>{}</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"></highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>on_arg_id()<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>context_.next_arg_id();<sp/>}</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>on_arg_id(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>context_.check_arg_id(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">),<sp/>id;</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>on_arg_id(<ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_USE_NONTYPE_TEMPLATE_PARAMETERS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>get_arg_index_by_name&lt;Args...&gt;(id);</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(index<sp/>==<sp/>invalid_arg_index)<sp/>on_error(</highlight><highlight class="stringliteral">&quot;named<sp/>argument<sp/>is<sp/>not<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>context_.check_arg_id(index),<sp/>index;</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/><sp/>on_error(</highlight><highlight class="stringliteral">&quot;compile-time<sp/>checks<sp/>for<sp/>named<sp/>arguments<sp/>require<sp/>C++20<sp/>support&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"></highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_replacement_field(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*)<sp/>{}</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"></highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>on_format_specs(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>begin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*)</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Char*<sp/>{</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/><sp/><sp/>context_.<ref refid="classbasic__format__parse__context_1ac123ab6c1c6e58db3ab0a917def4add8" kindref="member">advance_to</ref>(context_.<ref refid="classbasic__format__parse__context_1af6d5dc3ccce733a267ba8d029ee48d0a" kindref="member">begin</ref>()<sp/>+<sp/>(begin<sp/>-<sp/>&amp;*context_.<ref refid="classbasic__format__parse__context_1af6d5dc3ccce733a267ba8d029ee48d0a" kindref="member">begin</ref>()));</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>id<sp/>&gt;=<sp/>0<sp/>check<sp/>is<sp/>a<sp/>workaround<sp/>for<sp/>gcc<sp/>10<sp/>bug<sp/>(#2065).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/>num_args<sp/>?<sp/>parse_funcs_[id](context_)<sp/>:<sp/>begin;</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"></highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>on_error(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message)<sp/>{</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/><sp/><sp/>context_.on_error(message);</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2938"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"></highlight></codeline>
<codeline lineno="2940"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S,</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;(<ref refid="structis__compile__string" kindref="compound">is_compile_string&lt;S&gt;::value</ref>),<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&gt;&gt;</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>check_format_string(S<sp/>format_str)<sp/>{</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>to_string_view(format_str);</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>checker<sp/>=<sp/><ref refid="classformat__string__checker" kindref="compound">format_string_checker</ref>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S::char_type,<sp/><ref refid="structerror__handler" kindref="compound">error_handler</ref>,</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remove_cvref_t&lt;Args&gt;...&gt;;</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>invalid_format<sp/>=</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(parse_format_string&lt;true&gt;(s,<sp/>checker(s,<sp/>{})),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/>ignore_unused(invalid_format);</highlight></codeline>
<codeline lineno="2949"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"></highlight></codeline>
<codeline lineno="2951"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vformat_to(</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbuffer" kindref="compound">buffer&lt;Char&gt;</ref>&amp;<sp/>buf,<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>fmt,</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbasic__format__args" kindref="compound">basic_format_args</ref>&lt;FMT_BUFFER_CONTEXT(type_identity_t&lt;Char&gt;)&gt;<sp/>args,</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classlocale__ref" kindref="compound">locale_ref</ref><sp/>loc<sp/>=<sp/>{});</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"></highlight></codeline>
<codeline lineno="2957"><highlight class="normal">FMT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vprint_mojibake(std::FILE*,<sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref>,<sp/><ref refid="classbasic__format__args" kindref="compound">format_args</ref>);</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2959"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vprint_mojibake(std::FILE*,<sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref>,<sp/><ref refid="classbasic__format__args" kindref="compound">format_args</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2961"><highlight class="normal">FMT_END_DETAIL_NAMESPACE</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"></highlight></codeline>
<codeline lineno="2963"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>formatter<sp/>specialization<sp/>for<sp/>the<sp/>core<sp/>types<sp/>corresponding<sp/>to<sp/>detail::type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2964"><highlight class="normal"></highlight><highlight class="comment">//<sp/>constants.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2965"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;</highlight></codeline>
<codeline lineno="2966" refid="structformatter_3_01_t_00_01_char_00_01enable__if__t_3_01detail_1_1type__constant_3_01_t_00_01_ce66aa95d8f86570b04dc47971fbb1e4b" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structformatter" kindref="compound">formatter</ref>&lt;T,<sp/>Char,</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable_if_t&lt;detail::type_constant&lt;T,<sp/>Char&gt;::value<sp/>!=</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::type::custom_type&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="2969"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/>detail::dynamic_format_specs&lt;Char&gt;<sp/>specs_;</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"></highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Parses<sp/>format<sp/>specifiers<sp/>stopping<sp/>either<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>range<sp/>or<sp/>at<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>terminating<sp/>&apos;}&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ParseContext&gt;</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>parse(ParseContext&amp;<sp/>ctx)<sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(ctx.begin())<sp/>{</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>begin<sp/>=<sp/>ctx.begin(),<sp/>end<sp/>=<sp/>ctx.end();</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(begin<sp/>==<sp/>end)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>begin;</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>handler_type<sp/>=<sp/>detail::dynamic_specs_handler&lt;ParseContext&gt;;</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>detail::type_constant&lt;T,<sp/>Char&gt;::value;</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>checker<sp/>=</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::specs_checker&lt;handler_type&gt;(handler_type(specs_,<sp/>ctx),<sp/>type);</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>detail::parse_format_specs(begin,<sp/>end,<sp/>checker);</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>eh<sp/>=<sp/>ctx.error_handler();</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)<sp/>{</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::none_type:</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ASSERT(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>argument<sp/>type&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::bool_type:</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(specs_.type<sp/>==<sp/>presentation_type::none<sp/>||</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specs_.type<sp/>==<sp/>presentation_type::string)<sp/>{</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FMT_FALLTHROUGH;</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::int_type:</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::uint_type:</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::long_long_type:</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::ulong_long_type:</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::int128_type:</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::uint128_type:</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>detail::check_int_type_spec(specs_.type,<sp/>eh);</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::char_type:</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>detail::check_char_specs(specs_,<sp/>eh);</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::float_type:</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(detail::const_check(FMT_USE_FLOAT))</highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::parse_float_type_spec(specs_,<sp/>eh);</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ASSERT(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;float<sp/>support<sp/>disabled&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::double_type:</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(detail::const_check(FMT_USE_DOUBLE))</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::parse_float_type_spec(specs_,<sp/>eh);</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ASSERT(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;double<sp/>support<sp/>disabled&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::long_double_type:</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(detail::const_check(FMT_USE_LONG_DOUBLE))</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::parse_float_type_spec(specs_,<sp/>eh);</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ASSERT(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;long<sp/>double<sp/>support<sp/>disabled&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::cstring_type:</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>detail::check_cstring_type_spec(specs_.type,<sp/>eh);</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::string_type:</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>detail::check_string_type_spec(specs_.type,<sp/>eh);</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::pointer_type:</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>detail::check_pointer_type_spec(specs_.type,<sp/>eh);</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>detail::type::custom_type:</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Custom<sp/>format<sp/>specifiers<sp/>are<sp/>checked<sp/>in<sp/>parse<sp/>functions<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>formatter<sp/>specializations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it;</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"></highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FormatContext&gt;</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/>FMT_CONSTEXPR<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>val,<sp/>FormatContext&amp;<sp/>ctx)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(ctx.out());</highlight></codeline>
<codeline lineno="3044"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"></highlight></codeline>
<codeline lineno="3046" refid="structbasic__runtime" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structbasic__runtime" kindref="compound">basic_runtime</ref><sp/>{<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>str;<sp/>};</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"></highlight></codeline>
<codeline lineno="3049" refid="classbasic__format__string" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Char,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classbasic__format__string" kindref="compound">basic_format_string</ref><sp/>{</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref><sp/>str_;</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"></highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S,</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ENABLE_IF(</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_convertible&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>S&amp;,<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref>&gt;::<ref refid="classvalue" kindref="compound">value</ref>)&gt;</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/>FMT_CONSTEVAL<sp/>FMT_INLINE<sp/><ref refid="classbasic__format__string" kindref="compound">basic_format_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>S&amp;<sp/>s)<sp/>:<sp/>str_(s)<sp/>{</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::count&lt;</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(std::is_base_of&lt;detail::view,<sp/>remove_reference_t&lt;Args&gt;&gt;<ref refid="classvalue" kindref="compound">::value</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_reference&lt;Args&gt;::value)...&gt;()<sp/>==<sp/>0,</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;passing<sp/>views<sp/>as<sp/>lvalues<sp/>is<sp/>disallowed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FMT_HAS_CONSTEVAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(detail::count_named_args&lt;Args...&gt;()<sp/>==</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::count_statically_named_args&lt;Args...&gt;())<sp/>{</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>checker<sp/>=<sp/>detail::format_string_checker&lt;Char,<sp/>detail::error_handler,</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remove_cvref_t&lt;Args&gt;...&gt;;</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>detail::parse_format_string&lt;true&gt;(str_,<sp/>checker(s,<sp/>{}));</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3070"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::check_format_string&lt;Args...&gt;(s);</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/><ref refid="classbasic__format__string" kindref="compound">basic_format_string</ref>(<ref refid="structbasic__runtime" kindref="compound">basic_runtime&lt;Char&gt;</ref><sp/>r)<sp/>:<sp/>str_(r.str)<sp/>{}</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"></highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;Char&gt;</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str_;<sp/>}</highlight></codeline>
<codeline lineno="3077"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"></highlight></codeline>
<codeline lineno="3079"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>FMT_GCC_VERSION<sp/>&amp;&amp;<sp/>FMT_GCC_VERSION<sp/>&lt;<sp/>409</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3080"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Workaround<sp/>broken<sp/>conversion<sp/>on<sp/>older<sp/>gcc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3081"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__string" kindref="compound">format_string</ref><sp/>=<sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref>;</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>runtime(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>S&amp;<sp/>s)<sp/>-&gt;<sp/><ref refid="classbasic__string__view" kindref="compound">basic_string_view&lt;char_t&lt;S&gt;</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="3084"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3086"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classbasic__format__string" kindref="compound">format_string</ref><sp/>=<sp/><ref refid="classbasic__format__string" kindref="compound">basic_format_string&lt;char, type_identity_t&lt;Args&gt;</ref>...&gt;;</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>S&gt;<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>runtime(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>S&amp;<sp/>s)<sp/>-&gt;<sp/><ref refid="structbasic__runtime" kindref="compound">basic_runtime&lt;char_t&lt;S&gt;</ref>&gt;<sp/>{</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{{s}};</highlight></codeline>
<codeline lineno="3100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3102"><highlight class="normal"></highlight></codeline>
<codeline lineno="3103"><highlight class="normal">FMT_API<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vformat(<ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>fmt,<sp/><ref refid="classbasic__format__args" kindref="compound">format_args</ref><sp/>args)<sp/>-&gt;<sp/>std::string;</highlight></codeline>
<codeline lineno="3104"><highlight class="normal"></highlight></codeline>
<codeline lineno="3116"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>T&gt;</highlight></codeline>
<codeline lineno="3117"><highlight class="normal">FMT_NODISCARD<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format(<ref refid="classbasic__format__string" kindref="compound">format_string&lt;T...&gt;</ref><sp/>fmt,<sp/>T&amp;&amp;...<sp/>args)</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/>std::string<sp/>{</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vformat(fmt,<sp/>fmt::make_format_args(args...));</highlight></codeline>
<codeline lineno="3120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"></highlight></codeline>
<codeline lineno="3123"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ENABLE_IF(detail::is_output_iterator&lt;OutputIt,<sp/>char&gt;::value)&gt;</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vformat_to(OutputIt<sp/>out,<sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>fmt,<sp/><ref refid="classbasic__format__args" kindref="compound">format_args</ref><sp/>args)<sp/>-&gt;<sp/>OutputIt<sp/>{</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>detail::get_buffer;</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>buf<sp/>=<sp/>get_buffer&lt;char&gt;(out);</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/>detail::vformat_to(buf,<sp/>fmt,<sp/>args,<sp/>{});</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::get_iterator(buf);</highlight></codeline>
<codeline lineno="3130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"></highlight></codeline>
<codeline lineno="3144"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>T,</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ENABLE_IF(detail::is_output_iterator&lt;OutputIt,<sp/>char&gt;::value)&gt;</highlight></codeline>
<codeline lineno="3146"><highlight class="normal">FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format_to(OutputIt<sp/>out,<sp/><ref refid="classbasic__format__string" kindref="compound">format_string&lt;T...&gt;</ref><sp/>fmt,<sp/>T&amp;&amp;...<sp/>args)</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/>OutputIt<sp/>{</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vformat_to(out,<sp/>fmt,<sp/>fmt::make_format_args(args...));</highlight></codeline>
<codeline lineno="3149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"></highlight></codeline>
<codeline lineno="3151" refid="structformat__to__n__result" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structformat__to__n__result" kindref="compound">format_to_n_result</ref><sp/>{</highlight></codeline>
<codeline lineno="3153" refid="structformat__to__n__result_1a90597c6c1d23c7301aef16e756c6263b" refkind="member"><highlight class="normal"><sp/><sp/>OutputIt<sp/><ref refid="structformat__to__n__result_1a90597c6c1d23c7301aef16e756c6263b" kindref="member">out</ref>;</highlight></codeline>
<codeline lineno="3155" refid="structformat__to__n__result_1ab1c815078e1a78716bb07b9ed8c7023b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structformat__to__n__result_1ab1c815078e1a78716bb07b9ed8c7023b" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="3156"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"></highlight></codeline>
<codeline lineno="3158"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>T,</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ENABLE_IF(detail::is_output_iterator&lt;OutputIt,<sp/>char&gt;::value)&gt;</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vformat_to_n(OutputIt<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>fmt,<sp/><ref refid="classbasic__format__args" kindref="compound">format_args</ref><sp/>args)</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/><ref refid="structformat__to__n__result" kindref="compound">format_to_n_result&lt;OutputIt&gt;</ref><sp/>{</highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>traits<sp/>=<sp/>detail::fixed_buffer_traits;</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>buf<sp/>=<sp/>detail::iterator_buffer&lt;OutputIt,<sp/>char,<sp/>traits&gt;(out,<sp/>n);</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/>detail::vformat_to(buf,<sp/>fmt,<sp/>args,<sp/>{});</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{buf.out(),<sp/>buf.count()};</highlight></codeline>
<codeline lineno="3166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"></highlight></codeline>
<codeline lineno="3176"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>T,</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FMT_ENABLE_IF(detail::is_output_iterator&lt;OutputIt,<sp/>char&gt;::value)&gt;</highlight></codeline>
<codeline lineno="3178"><highlight class="normal">FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>format_to_n(OutputIt<sp/>out,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/><ref refid="classbasic__format__string" kindref="compound">format_string&lt;T...&gt;</ref><sp/>fmt,</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T&amp;&amp;...<sp/>args)<sp/>-&gt;<sp/><ref refid="structformat__to__n__result" kindref="compound">format_to_n_result&lt;OutputIt&gt;</ref><sp/>{</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vformat_to_n(out,<sp/>n,<sp/>fmt,<sp/>fmt::make_format_args(args...));</highlight></codeline>
<codeline lineno="3181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"></highlight></codeline>
<codeline lineno="3184"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>T&gt;</highlight></codeline>
<codeline lineno="3185"><highlight class="normal">FMT_NODISCARD<sp/>FMT_INLINE<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>formatted_size(<ref refid="classbasic__format__string" kindref="compound">format_string&lt;T...&gt;</ref><sp/>fmt,</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T&amp;&amp;...<sp/>args)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>buf<sp/>=<sp/>detail::counting_buffer&lt;&gt;();</highlight></codeline>
<codeline lineno="3188"><highlight class="normal"><sp/><sp/>detail::vformat_to(buf,<sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref>(fmt),<sp/>fmt::make_format_args(args...),<sp/>{});</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf.count();</highlight></codeline>
<codeline lineno="3190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3191"><highlight class="normal"></highlight></codeline>
<codeline lineno="3192"><highlight class="normal">FMT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vprint(<ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>fmt,<sp/><ref refid="classbasic__format__args" kindref="compound">format_args</ref><sp/>args);</highlight></codeline>
<codeline lineno="3193"><highlight class="normal">FMT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vprint(std::FILE*<sp/>f,<sp/><ref refid="classbasic__string__view" kindref="compound">string_view</ref><sp/>fmt,<sp/><ref refid="classbasic__format__args" kindref="compound">format_args</ref><sp/>args);</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"></highlight></codeline>
<codeline lineno="3205"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>T&gt;</highlight></codeline>
<codeline lineno="3206"><highlight class="normal">FMT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print(<ref refid="classbasic__format__string" kindref="compound">format_string&lt;T...&gt;</ref><sp/>fmt,<sp/>T&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>vargs<sp/>=<sp/>fmt::make_format_args(args...);</highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::is_utf8()<sp/>?<sp/>vprint(fmt,<sp/>vargs)</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>detail::vprint_mojibake(stdout,<sp/>fmt,<sp/>vargs);</highlight></codeline>
<codeline lineno="3210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"></highlight></codeline>
<codeline lineno="3222"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>T&gt;</highlight></codeline>
<codeline lineno="3223"><highlight class="normal">FMT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print(std::FILE*<sp/>f,<sp/><ref refid="classbasic__format__string" kindref="compound">format_string&lt;T...&gt;</ref><sp/>fmt,<sp/>T&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>vargs<sp/>=<sp/>fmt::make_format_args(args...);</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::is_utf8()<sp/>?<sp/>vprint(f,<sp/>fmt,<sp/>vargs)</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>detail::vprint_mojibake(f,<sp/>fmt,<sp/>vargs);</highlight></codeline>
<codeline lineno="3227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"></highlight></codeline>
<codeline lineno="3229"><highlight class="normal">FMT_MODULE_EXPORT_END</highlight></codeline>
<codeline lineno="3230"><highlight class="normal">FMT_GCC_PRAGMA(</highlight><highlight class="stringliteral">&quot;GCC<sp/>pop_options&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3231"><highlight class="normal">FMT_END_NAMESPACE</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"></highlight></codeline>
<codeline lineno="3233"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FMT_HEADER_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3234"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>include<sp/>&quot;format.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3235"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3236"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>FMT_CORE_H_</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/cwb/developer/learning/graphicRenderEngine/ceres/3rdparty/spdlog/include/spdlog/fmt/bundled/core.h"/>
  </compounddef>
</doxygen>
